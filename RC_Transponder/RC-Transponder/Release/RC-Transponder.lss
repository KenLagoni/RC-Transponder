
RC-Transponder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c32c  00002000  00002000  00002000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000280  20000000  0000e32c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000007ac  20000280  0000e5ac  00010280  2**2
                  ALLOC
  3 .ARM.attributes 00000028  00000000  00000000  00010280  2**0
                  CONTENTS, READONLY
  4 .comment      00000059  00000000  00000000  000102a8  2**0
                  CONTENTS, READONLY
  5 .debug_info   000b1750  00000000  00000000  00010301  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000dd34  00000000  00000000  000c1a51  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    0001268a  00000000  00000000  000cf785  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00001590  00000000  00000000  000e1e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000025a0  00000000  00000000  000e339f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00022bb2  00000000  00000000  000e593f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001dba0  00000000  00000000  001084f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0008aa03  00000000  00000000  00126091  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000045a4  00000000  00000000  001b0a94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00002000 <exception_table>:
    2000:	00 80 00 20 cd 5f 00 00 8d 5f 00 00 8d 5f 00 00     ... ._..._..._..
	...
    202c:	8d 5f 00 00 00 00 00 00 00 00 00 00 8d 5f 00 00     ._..........._..
    203c:	21 60 00 00 8d 5f 00 00 8d 5f 00 00 8d 5f 00 00     !`..._..._..._..
    204c:	8d 5f 00 00 8d 5f 00 00 8d 5f 00 00 8d 5f 00 00     ._..._..._..._..
    205c:	79 5f 00 00 8d 5f 00 00 8d 5f 00 00 8d 5f 00 00     y_..._..._..._..
    206c:	dd 40 00 00 ed 40 00 00 fd 40 00 00 0d 41 00 00     .@...@...@...A..
    207c:	8d 5f 00 00 8d 5f 00 00 8d 5f 00 00 35 5f 00 00     ._..._..._..5_..
    208c:	8d 5f 00 00 00 00 00 00 8d 5f 00 00 8d 5f 00 00     ._......._..._..
    209c:	8d 5f 00 00 8d 5f 00 00 8d 5f 00 00 8d 5f 00 00     ._..._..._..._..
    20ac:	8d 5f 00 00 00 00 00 00                             ._......

000020b4 <__do_global_dtors_aux>:
    20b4:	b510      	push	{r4, lr}
    20b6:	4c06      	ldr	r4, [pc, #24]	; (20d0 <__do_global_dtors_aux+0x1c>)
    20b8:	7823      	ldrb	r3, [r4, #0]
    20ba:	2b00      	cmp	r3, #0
    20bc:	d107      	bne.n	20ce <__do_global_dtors_aux+0x1a>
    20be:	4b05      	ldr	r3, [pc, #20]	; (20d4 <__do_global_dtors_aux+0x20>)
    20c0:	2b00      	cmp	r3, #0
    20c2:	d002      	beq.n	20ca <__do_global_dtors_aux+0x16>
    20c4:	4804      	ldr	r0, [pc, #16]	; (20d8 <__do_global_dtors_aux+0x24>)
    20c6:	e000      	b.n	20ca <__do_global_dtors_aux+0x16>
    20c8:	bf00      	nop
    20ca:	2301      	movs	r3, #1
    20cc:	7023      	strb	r3, [r4, #0]
    20ce:	bd10      	pop	{r4, pc}
    20d0:	20000280 	.word	0x20000280
    20d4:	00000000 	.word	0x00000000
    20d8:	0000e328 	.word	0x0000e328

000020dc <frame_dummy>:
    20dc:	4b08      	ldr	r3, [pc, #32]	; (2100 <frame_dummy+0x24>)
    20de:	b510      	push	{r4, lr}
    20e0:	2b00      	cmp	r3, #0
    20e2:	d003      	beq.n	20ec <frame_dummy+0x10>
    20e4:	4907      	ldr	r1, [pc, #28]	; (2104 <frame_dummy+0x28>)
    20e6:	4808      	ldr	r0, [pc, #32]	; (2108 <frame_dummy+0x2c>)
    20e8:	e000      	b.n	20ec <frame_dummy+0x10>
    20ea:	bf00      	nop
    20ec:	4807      	ldr	r0, [pc, #28]	; (210c <frame_dummy+0x30>)
    20ee:	6803      	ldr	r3, [r0, #0]
    20f0:	2b00      	cmp	r3, #0
    20f2:	d100      	bne.n	20f6 <frame_dummy+0x1a>
    20f4:	bd10      	pop	{r4, pc}
    20f6:	4b06      	ldr	r3, [pc, #24]	; (2110 <frame_dummy+0x34>)
    20f8:	2b00      	cmp	r3, #0
    20fa:	d0fb      	beq.n	20f4 <frame_dummy+0x18>
    20fc:	4798      	blx	r3
    20fe:	e7f9      	b.n	20f4 <frame_dummy+0x18>
    2100:	00000000 	.word	0x00000000
    2104:	20000284 	.word	0x20000284
    2108:	0000e328 	.word	0x0000e328
    210c:	2000027c 	.word	0x2000027c
    2110:	00000000 	.word	0x00000000

00002114 <_ZN11E28_2G4M20SC1Eiiiiiiiii>:
	Not for commercial use
 */ 

#include "E28-2G4M20S.h"

E28_2G4M20S::E28_2G4M20S(int chipSelectPin, int resetPin, int busyPin, int dio1Pin, int dio2Pin, int dio3Pin, int txEnablePin, int rxEnablePin, int ledPin)
    2114:	b570      	push	{r4, r5, r6, lr}
    2116:	0004      	movs	r4, r0
    2118:	481f      	ldr	r0, [pc, #124]	; (2198 <_ZN11E28_2G4M20SC1Eiiiiiiiii+0x84>)
    211a:	250d      	movs	r5, #13
    211c:	6260      	str	r0, [r4, #36]	; 0x24
    211e:	0020      	movs	r0, r4
    2120:	3028      	adds	r0, #40	; 0x28
    2122:	7005      	strb	r5, [r0, #0]
    2124:	2500      	movs	r5, #0
    2126:	3073      	adds	r0, #115	; 0x73
    2128:	4e1c      	ldr	r6, [pc, #112]	; (219c <_ZN11E28_2G4M20SC1Eiiiiiiiii+0x88>)
    212a:	6565      	str	r5, [r4, #84]	; 0x54
    212c:	7005      	strb	r5, [r0, #0]
    212e:	3001      	adds	r0, #1
    2130:	8006      	strh	r6, [r0, #0]
    2132:	4e1b      	ldr	r6, [pc, #108]	; (21a0 <_ZN11E28_2G4M20SC1Eiiiiiiiii+0x8c>)
    2134:	b086      	sub	sp, #24
    2136:	8046      	strh	r6, [r0, #2]
{
	_chipSelectPin = chipSelectPin;
	_resetPin      = resetPin;
	_busyPin       = busyPin;
    2138:	60a3      	str	r3, [r4, #8]
	_dio1Pin       = dio1Pin;
    213a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	_chipSelectPin = chipSelectPin;
    213c:	6021      	str	r1, [r4, #0]
	_dio1Pin       = dio1Pin;
    213e:	60e3      	str	r3, [r4, #12]
	_dio2Pin       = dio2Pin;
    2140:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	_resetPin      = resetPin;
    2142:	6062      	str	r2, [r4, #4]
	_dio2Pin       = dio2Pin;
    2144:	6123      	str	r3, [r4, #16]
	_dio3Pin       = dio3Pin;
    2146:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	_txEnablePin   = txEnablePin;
	_rxEnablePin   = rxEnablePin;
	_ledPin		   = ledPin;
		
	Radio = new SX1280Hal(_chipSelectPin, _busyPin, _dio1Pin, _dio2Pin, _dio3Pin, _resetPin, _txEnablePin, _rxEnablePin, _ledPin);	
    2148:	2044      	movs	r0, #68	; 0x44
	_dio3Pin       = dio3Pin;
    214a:	6163      	str	r3, [r4, #20]
	_txEnablePin   = txEnablePin;
    214c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    214e:	61a3      	str	r3, [r4, #24]
	_rxEnablePin   = rxEnablePin;
    2150:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2152:	61e3      	str	r3, [r4, #28]
	_ledPin		   = ledPin;
    2154:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2156:	6223      	str	r3, [r4, #32]
	Radio = new SX1280Hal(_chipSelectPin, _busyPin, _dio1Pin, _dio2Pin, _dio3Pin, _resetPin, _txEnablePin, _rxEnablePin, _ledPin);	
    2158:	f003 ffb2 	bl	60c0 <_Znwj>
    215c:	6a23      	ldr	r3, [r4, #32]
    215e:	68a2      	ldr	r2, [r4, #8]
    2160:	9305      	str	r3, [sp, #20]
    2162:	69e3      	ldr	r3, [r4, #28]
    2164:	6821      	ldr	r1, [r4, #0]
    2166:	9304      	str	r3, [sp, #16]
    2168:	69a3      	ldr	r3, [r4, #24]
    216a:	0006      	movs	r6, r0
    216c:	9303      	str	r3, [sp, #12]
    216e:	6863      	ldr	r3, [r4, #4]
    2170:	9302      	str	r3, [sp, #8]
    2172:	6963      	ldr	r3, [r4, #20]
    2174:	9301      	str	r3, [sp, #4]
    2176:	6923      	ldr	r3, [r4, #16]
    2178:	9300      	str	r3, [sp, #0]
    217a:	68e3      	ldr	r3, [r4, #12]
    217c:	f000 fbb6 	bl	28ec <_ZN9SX1280HalC1Eiiiiiiiii>
		
	RadioStatus.rxDone=false;
    2180:	0023      	movs	r3, r4
	RadioStatus.txDone=false;
	RadioStatus.rxTimeout=false;
	RadioStatus.txTimeout=false;
}
    2182:	0020      	movs	r0, r4
	RadioStatus.rxDone=false;
    2184:	3359      	adds	r3, #89	; 0x59
	Radio = new SX1280Hal(_chipSelectPin, _busyPin, _dio1Pin, _dio2Pin, _dio3Pin, _resetPin, _txEnablePin, _rxEnablePin, _ledPin);	
    2186:	6566      	str	r6, [r4, #84]	; 0x54
	RadioStatus.txDone=false;
    2188:	3b01      	subs	r3, #1
	RadioStatus.rxDone=false;
    218a:	705d      	strb	r5, [r3, #1]
	RadioStatus.rxTimeout=false;
    218c:	70dd      	strb	r5, [r3, #3]
	RadioStatus.txDone=false;
    218e:	701d      	strb	r5, [r3, #0]
	RadioStatus.txTimeout=false;
    2190:	3302      	adds	r3, #2
    2192:	701d      	strb	r5, [r3, #0]
}
    2194:	b006      	add	sp, #24
    2196:	bd70      	pop	{r4, r5, r6, pc}
    2198:	8f0d1800 	.word	0x8f0d1800
    219c:	00004002 	.word	0x00004002
    21a0:	00004001 	.word	0x00004001

000021a4 <_ZN11E28_2G4M20S15SetTxModeActiveEv>:

void E28_2G4M20S::SetTxModeActive( void )
{
    21a4:	b510      	push	{r4, lr}
    21a6:	0004      	movs	r4, r0
	Radio->SetRxEnablePin(LOW);
    21a8:	2100      	movs	r1, #0
    21aa:	6d40      	ldr	r0, [r0, #84]	; 0x54
    21ac:	f000 fc00 	bl	29b0 <_ZN9SX1280Hal14SetRxEnablePinEh>
	Radio->SetTxEnablePin(HIGH);
    21b0:	2101      	movs	r1, #1
    21b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
    21b4:	f000 fbf7 	bl	29a6 <_ZN9SX1280Hal14SetTxEnablePinEh>
}
    21b8:	bd10      	pop	{r4, pc}

000021ba <_ZN11E28_2G4M20S15SetRxModeActiveEv>:

void E28_2G4M20S::SetRxModeActive( void )
{
    21ba:	b510      	push	{r4, lr}
    21bc:	0004      	movs	r4, r0
	Radio->SetTxEnablePin(LOW);
    21be:	2100      	movs	r1, #0
    21c0:	6d40      	ldr	r0, [r0, #84]	; 0x54
    21c2:	f000 fbf0 	bl	29a6 <_ZN9SX1280Hal14SetTxEnablePinEh>
	Radio->SetRxEnablePin(HIGH);
    21c6:	2101      	movs	r1, #1
    21c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    21ca:	f000 fbf1 	bl	29b0 <_ZN9SX1280Hal14SetRxEnablePinEh>
}
    21ce:	bd10      	pop	{r4, pc}

000021d0 <_ZN11E28_2G4M20S4InitEv>:

void E28_2G4M20S::Init()
{
    21d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21d2:	0004      	movs	r4, r0
	 Radio->Init( );	 
    21d4:	6d40      	ldr	r0, [r0, #84]	; 0x54
    21d6:	f000 fc17 	bl	2a08 <_ZN6SX12804InitEv>
	 Radio->SetRegulatorMode( USE_DCDC ); // Can also be set in LDO mode but consume more power
    21da:	6d60      	ldr	r0, [r4, #84]	; 0x54
    21dc:	2101      	movs	r1, #1
    21de:	f000 fe84 	bl	2eea <_ZN6SX128016SetRegulatorModeE21RadioRegulatorModes_t>
	 memset( &RadioData.payload, 0x00, MAX_PAYLOAD_LENGTH ); // Zero fills the buffer
    21e2:	0020      	movs	r0, r4
    21e4:	223c      	movs	r2, #60	; 0x3c
    21e6:	2100      	movs	r1, #0
    21e8:	305c      	adds	r0, #92	; 0x5c
    21ea:	f009 f99a 	bl	b522 <memset>
	
//    SerialAUX->println( "Running in LORA mode");
//	SerialAUX->println( "Spreading factor set to 7");
//	SerialAUX->println( "Bandwidth set to 400kHz");
//	SerialAUX->println( "CR encoding set to 4/5");
    modulationParams.PacketType                  = PACKET_TYPE_LORA;
    21ee:	0026      	movs	r6, r4
    modulationParams.Params.LoRa.SpreadingFactor = LORA_SF7;
    21f0:	0022      	movs	r2, r4
    modulationParams.PacketType                  = PACKET_TYPE_LORA;
    21f2:	2301      	movs	r3, #1
    modulationParams.Params.LoRa.SpreadingFactor = LORA_SF7;
    21f4:	2170      	movs	r1, #112	; 0x70
    modulationParams.Params.LoRa.Bandwidth       = LORA_BW_0400;
    modulationParams.Params.LoRa.CodingRate      = LORA_CR_4_5;

    PacketParams.PacketType                 = PACKET_TYPE_LORA;
    21f6:	0027      	movs	r7, r4
    modulationParams.PacketType                  = PACKET_TYPE_LORA;
    21f8:	3646      	adds	r6, #70	; 0x46
    modulationParams.Params.LoRa.SpreadingFactor = LORA_SF7;
    21fa:	324a      	adds	r2, #74	; 0x4a
    modulationParams.PacketType                  = PACKET_TYPE_LORA;
    21fc:	7033      	strb	r3, [r6, #0]
    PacketParams.PacketType                 = PACKET_TYPE_LORA;
    21fe:	3729      	adds	r7, #41	; 0x29
    modulationParams.Params.LoRa.SpreadingFactor = LORA_SF7;
    2200:	7011      	strb	r1, [r2, #0]
    modulationParams.Params.LoRa.Bandwidth       = LORA_BW_0400;
    2202:	394a      	subs	r1, #74	; 0x4a
    2204:	7051      	strb	r1, [r2, #1]
    modulationParams.Params.LoRa.CodingRate      = LORA_CR_4_5;
    2206:	7093      	strb	r3, [r2, #2]
    PacketParams.PacketType                 = PACKET_TYPE_LORA;
    2208:	703b      	strb	r3, [r7, #0]
    PacketParams.Params.LoRa.PreambleLength = 0x08;
    220a:	0023      	movs	r3, r4
    220c:	2208      	movs	r2, #8
    220e:	3331      	adds	r3, #49	; 0x31
    2210:	701a      	strb	r2, [r3, #0]
    PacketParams.Params.LoRa.HeaderType     = LORA_PACKET_VARIABLE_LENGTH;
    PacketParams.Params.LoRa.PayloadLength  = MAX_PAYLOAD_LENGTH;
    2212:	3234      	adds	r2, #52	; 0x34
    2214:	709a      	strb	r2, [r3, #2]
    PacketParams.Params.LoRa.HeaderType     = LORA_PACKET_VARIABLE_LENGTH;
    2216:	2500      	movs	r5, #0
    PacketParams.Params.LoRa.CrcMode        = LORA_CRC_ON;
    2218:	2220      	movs	r2, #32
    PacketParams.Params.LoRa.HeaderType     = LORA_PACKET_VARIABLE_LENGTH;
    221a:	705d      	strb	r5, [r3, #1]
    PacketParams.Params.LoRa.CrcMode        = LORA_CRC_ON;
    221c:	70da      	strb	r2, [r3, #3]
    PacketParams.Params.LoRa.InvertIQ       = LORA_IQ_INVERTED;
    221e:	711d      	strb	r5, [r3, #4]

	#else
	#error "Please select the mode of operation for the RC Transponder"
	#endif

	Radio->SetStandby( STDBY_RC );
    2220:	0029      	movs	r1, r5
    2222:	6d60      	ldr	r0, [r4, #84]	; 0x54
    2224:	f000 fc20 	bl	2a68 <_ZN6SX128010SetStandbyE19RadioStandbyModes_t>
    Radio->SetPacketType( modulationParams.PacketType );
    2228:	7831      	ldrb	r1, [r6, #0]
    222a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    222c:	f000 fc2f 	bl	2a8e <_ZN6SX128013SetPacketTypeE18RadioPacketTypes_t>
    Radio->SetModulationParams( &modulationParams );
    2230:	0031      	movs	r1, r6
    2232:	6d60      	ldr	r0, [r4, #84]	; 0x54
    2234:	f000 fc67 	bl	2b06 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t>
    Radio->SetPacketParams( &PacketParams );
    2238:	0039      	movs	r1, r7
    223a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    223c:	f000 fc9f 	bl	2b7e <_ZN6SX128015SetPacketParamsEP14PacketParams_t>

    Radio->SetRfFrequency( rf_frequency );
    2240:	6a61      	ldr	r1, [r4, #36]	; 0x24
    2242:	6d60      	ldr	r0, [r4, #84]	; 0x54
    2244:	f000 fc2e 	bl	2aa4 <_ZN6SX128014SetRfFrequencyEm>
    Radio->SetBufferBaseAddresses( 0x00, 0x00 );
    2248:	002a      	movs	r2, r5
    224a:	0029      	movs	r1, r5
    224c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    224e:	f000 fc4f 	bl	2af0 <_ZN6SX128022SetBufferBaseAddressesEhh>
    Radio->SetTxParams( tx_power, RADIO_RAMP_20_US ); 
    2252:	2128      	movs	r1, #40	; 0x28
    2254:	22e0      	movs	r2, #224	; 0xe0
    2256:	5661      	ldrsb	r1, [r4, r1]
    2258:	6d60      	ldr	r0, [r4, #84]	; 0x54
    225a:	f000 fc3d 	bl	2ad8 <_ZN6SX128011SetTxParamsEa16RadioRampTimes_t>
//	SerialAUX->println( "Frequency set to " + String(rf_frequency/1000000) + "MHz");
//	SerialAUX->println( "TX Power set to " + String(tx_power) + "dBm");
}
    225e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002260 <_ZN11E28_2G4M20S9SetRXModeEb>:
	//Debug:
	Radio->SetLed(HIGH);
}

void E28_2G4M20S::SetRXMode(bool useTimeout)
{
    2260:	b530      	push	{r4, r5, lr}
    2262:	0004      	movs	r4, r0
    2264:	b085      	sub	sp, #20
    2266:	000d      	movs	r5, r1
   this->SetRxModeActive(); // Switch the hardware amplifier to RX mode.
    2268:	f7ff ffa7 	bl	21ba <_ZN11E28_2G4M20S15SetRxModeActiveEv>
   Radio->SetDioIrqParams( RxIrqMask, RxIrqMask, IRQ_RADIO_NONE, IRQ_RADIO_NONE ); // Set module to interrupt on RX complete on DI01 or Timeout.
    226c:	0023      	movs	r3, r4
    226e:	339c      	adds	r3, #156	; 0x9c
    2270:	8819      	ldrh	r1, [r3, #0]
    2272:	2300      	movs	r3, #0
    2274:	6d60      	ldr	r0, [r4, #84]	; 0x54
    2276:	9300      	str	r3, [sp, #0]
    2278:	000a      	movs	r2, r1
    227a:	f000 fe07 	bl	2e8c <_ZN6SX128015SetDioIrqParamsEtttt>
    227e:	6d60      	ldr	r0, [r4, #84]	; 0x54
   if(useTimeout){
    2280:	2d00      	cmp	r5, #0
    2282:	d009      	beq.n	2298 <_ZN11E28_2G4M20S9SetRXModeEb+0x38>
		Radio->SetRx( ( TickTime_t ) { RX_TIMEOUT_TICK_SIZE, RX_TIMEOUT_VALUE } );
    2284:	2202      	movs	r2, #2
    2286:	ab03      	add	r3, sp, #12
    2288:	701a      	strb	r2, [r3, #0]
    228a:	3230      	adds	r2, #48	; 0x30
    228c:	805a      	strh	r2, [r3, #2]
    228e:	9903      	ldr	r1, [sp, #12]
   }else{
		Radio->SetRx(RX_TX_CONTINUOUS);
    2290:	f000 fe96 	bl	2fc0 <_ZN6SX12805SetRxE10TickTime_s>
   }
}
    2294:	b005      	add	sp, #20
    2296:	bd30      	pop	{r4, r5, pc}
		Radio->SetRx(RX_TX_CONTINUOUS);
    2298:	2201      	movs	r2, #1
    229a:	ab02      	add	r3, sp, #8
    229c:	4252      	negs	r2, r2
    229e:	701d      	strb	r5, [r3, #0]
    22a0:	805a      	strh	r2, [r3, #2]
    22a2:	9902      	ldr	r1, [sp, #8]
    22a4:	e7f4      	b.n	2290 <_ZN11E28_2G4M20S9SetRXModeEb+0x30>

000022a6 <_ZN11E28_2G4M20S8OnTxDoneEv>:
{
    22a6:	b510      	push	{r4, lr}
    22a8:	0004      	movs	r4, r0
	SetRxModeActive();
    22aa:	f7ff ff86 	bl	21ba <_ZN11E28_2G4M20S15SetRxModeActiveEv>
	SetRXMode(false); // Set to RX with no timeout.
    22ae:	0020      	movs	r0, r4
    22b0:	2100      	movs	r1, #0
    22b2:	f7ff ffd5 	bl	2260 <_ZN11E28_2G4M20S9SetRXModeEb>
	Radio->SetLed(LOW);
    22b6:	2100      	movs	r1, #0
    22b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    22ba:	f000 fb6f 	bl	299c <_ZN9SX1280Hal6SetLedEh>
}
    22be:	bd10      	pop	{r4, pc}

000022c0 <_ZN11E28_2G4M20S5SleepEv>:

void E28_2G4M20S::Sleep(void){
    22c0:	b510      	push	{r4, lr}
    22c2:	0004      	movs	r4, r0
	SleepParameters.DataBufferRetention=1;
	SleepParameters.DataRamRetention=1;
	
//	SerialAUX->println("Radio Firmware version: " + String(Radio->GetFirmwareVersion()));
	
	Radio->SetTxEnablePin(LOW);
    22c4:	2100      	movs	r1, #0
    22c6:	6d40      	ldr	r0, [r0, #84]	; 0x54
    22c8:	f000 fb6d 	bl	29a6 <_ZN9SX1280Hal14SetTxEnablePinEh>
	Radio->SetRxEnablePin(LOW);
    22cc:	2100      	movs	r1, #0
    22ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
    22d0:	f000 fb6e 	bl	29b0 <_ZN9SX1280Hal14SetRxEnablePinEh>
		
	Radio->SetSaveContext();
    22d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    22d6:	f000 fe12 	bl	2efe <_ZN6SX128014SetSaveContextEv>
	Radio->SetSleep(SleepParameters);	
    22da:	210e      	movs	r1, #14
    22dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
    22de:	f000 fb9d 	bl	2a1c <_ZN6SX12808SetSleepE13SleepParams_t>

//	digitalWrite(_chipSelectPin, HIGH);
}
    22e2:	bd10      	pop	{r4, pc}

000022e4 <_ZN11E28_2G4M20S6WakeUpEv>:

void E28_2G4M20S::WakeUp(void){
    22e4:	b510      	push	{r4, lr}
	Radio->SetWakeup();
    22e6:	6d40      	ldr	r0, [r0, #84]	; 0x54
    22e8:	f000 fbb4 	bl	2a54 <_ZN6SX12809SetWakeupEv>
}
    22ec:	bd10      	pop	{r4, pc}

000022ee <_ZN11E28_2G4M20S12GetRadioDataEv>:


RadioData_t * E28_2G4M20S::GetRadioData()
{
	if(RadioDataReady){
    22ee:	0002      	movs	r2, r0
    22f0:	329b      	adds	r2, #155	; 0x9b
    22f2:	7811      	ldrb	r1, [r2, #0]
		RadioDataReady = false;
		return &RadioData;	
	}else{
		return nullptr;
    22f4:	1e0b      	subs	r3, r1, #0
	if(RadioDataReady){
    22f6:	d003      	beq.n	2300 <_ZN11E28_2G4M20S12GetRadioDataEv+0x12>
		RadioDataReady = false;
    22f8:	2300      	movs	r3, #0
    22fa:	7013      	strb	r3, [r2, #0]
		return &RadioData;	
    22fc:	0003      	movs	r3, r0
    22fe:	335c      	adds	r3, #92	; 0x5c
	}
}
    2300:	0018      	movs	r0, r3
    2302:	4770      	bx	lr

00002304 <_ZN11E28_2G4M20S14GetRadioStatusEv>:

RadioIRQStatus_t E28_2G4M20S::GetRadioStatus(){
	return this->RadioStatus;
    2304:	6d83      	ldr	r3, [r0, #88]	; 0x58
RadioIRQStatus_t E28_2G4M20S::GetRadioStatus(){
    2306:	b513      	push	{r0, r1, r4, lr}
	return this->RadioStatus;
    2308:	21ff      	movs	r1, #255	; 0xff
    230a:	001a      	movs	r2, r3
    230c:	0a18      	lsrs	r0, r3, #8
    230e:	0c1c      	lsrs	r4, r3, #16
    2310:	4008      	ands	r0, r1
    2312:	400a      	ands	r2, r1
    2314:	0200      	lsls	r0, r0, #8
    2316:	4021      	ands	r1, r4
    2318:	0409      	lsls	r1, r1, #16
    231a:	4310      	orrs	r0, r2
    231c:	0e1b      	lsrs	r3, r3, #24
    231e:	061b      	lsls	r3, r3, #24
    2320:	4308      	orrs	r0, r1
    2322:	4318      	orrs	r0, r3
}
    2324:	bd16      	pop	{r1, r2, r4, pc}

00002326 <_ZN11E28_2G4M20S16ClearRadioStatusEv>:

void E28_2G4M20S::ClearRadioStatus(){
	RadioStatus.rxDone=false;
    2326:	0002      	movs	r2, r0
    2328:	2300      	movs	r3, #0
    232a:	3259      	adds	r2, #89	; 0x59
    232c:	7013      	strb	r3, [r2, #0]
	RadioStatus.txDone=false;
	RadioStatus.rxTimeout=false;
	RadioStatus.txTimeout=false;	
    232e:	305a      	adds	r0, #90	; 0x5a
	RadioStatus.txDone=false;
    2330:	3a01      	subs	r2, #1
    2332:	7013      	strb	r3, [r2, #0]
	RadioStatus.rxTimeout=false;
    2334:	70d3      	strb	r3, [r2, #3]
	RadioStatus.txTimeout=false;	
    2336:	7003      	strb	r3, [r0, #0]
}
    2338:	4770      	bx	lr
	...

0000233c <_ZN11E28_2G4M20S12CalculateCRCEPhh>:

uint16_t E28_2G4M20S::CalculateCRC(uint8_t *data, uint8_t length){
    233c:	b570      	push	{r4, r5, r6, lr}
    233e:	2400      	movs	r4, #0
	uint16_t count;
	uint16_t crc = 0xFFFF;
    2340:	4807      	ldr	r0, [pc, #28]	; (2360 <_ZN11E28_2G4M20S12CalculateCRCEPhh+0x24>)
	uint16_t temp;

	for (count = 0; count < length; ++count)
	{
		temp = (uint16_t)((*data++ ^ (crc >> 8)) & 0xff);
		crc = (uint16_t)(crc_table[temp] ^ (crc << 8));
    2342:	4d08      	ldr	r5, [pc, #32]	; (2364 <_ZN11E28_2G4M20S12CalculateCRCEPhh+0x28>)
	for (count = 0; count < length; ++count)
    2344:	b2a3      	uxth	r3, r4
    2346:	4293      	cmp	r3, r2
    2348:	da09      	bge.n	235e <_ZN11E28_2G4M20S12CalculateCRCEPhh+0x22>
		temp = (uint16_t)((*data++ ^ (crc >> 8)) & 0xff);
    234a:	5d0b      	ldrb	r3, [r1, r4]
    234c:	1206      	asrs	r6, r0, #8
		crc = (uint16_t)(crc_table[temp] ^ (crc << 8));
    234e:	4073      	eors	r3, r6
    2350:	005b      	lsls	r3, r3, #1
    2352:	0206      	lsls	r6, r0, #8
    2354:	5b58      	ldrh	r0, [r3, r5]
    2356:	3401      	adds	r4, #1
    2358:	4070      	eors	r0, r6
    235a:	b280      	uxth	r0, r0
	for (count = 0; count < length; ++count)
    235c:	e7f2      	b.n	2344 <_ZN11E28_2G4M20S12CalculateCRCEPhh+0x8>
	}

	return (uint16_t)(crc ^ 0x0000);
}
    235e:	bd70      	pop	{r4, r5, r6, pc}
    2360:	0000ffff 	.word	0x0000ffff
    2364:	0000d660 	.word	0x0000d660

00002368 <_ZN11E28_2G4M20S8OnRxDoneEv>:
{
    2368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	memset(&RadioData.payload, 0x00, MAX_PAYLOAD_LENGTH);
    236a:	0007      	movs	r7, r0
{
    236c:	0004      	movs	r4, r0
	memset(&RadioData.payload, 0x00, MAX_PAYLOAD_LENGTH);
    236e:	375c      	adds	r7, #92	; 0x5c
    2370:	223c      	movs	r2, #60	; 0x3c
    2372:	2100      	movs	r1, #0
    2374:	0038      	movs	r0, r7
	RadioData.payloadLength=0;
    2376:	0026      	movs	r6, r4
	memset(&RadioData.payload, 0x00, MAX_PAYLOAD_LENGTH);
    2378:	f009 f8d3 	bl	b522 <memset>
	RadioData.payloadLength=0;
    237c:	2300      	movs	r3, #0
    237e:	3698      	adds	r6, #152	; 0x98
    2380:	7033      	strb	r3, [r6, #0]
	if(Radio->GetPayload(&RadioData.payload[0], &RadioData.payloadLength, MAX_PAYLOAD_LENGTH)){
    2382:	0032      	movs	r2, r6
    2384:	333c      	adds	r3, #60	; 0x3c
    2386:	0039      	movs	r1, r7
    2388:	6d60      	ldr	r0, [r4, #84]	; 0x54
    238a:	f000 fdc9 	bl	2f20 <_ZN6SX128010GetPayloadEPhS0_h>
    238e:	1e05      	subs	r5, r0, #0
    2390:	d13b      	bne.n	240a <_ZN11E28_2G4M20S8OnRxDoneEv+0xa2>
		uint16_t temp_crc = (uint16_t)((RadioData.payload[RadioData.payloadLength-2] << 8) + RadioData.payload[RadioData.payloadLength-1]);
    2392:	7833      	ldrb	r3, [r6, #0]
    2394:	1e9a      	subs	r2, r3, #2
    2396:	18a1      	adds	r1, r4, r2
    2398:	315c      	adds	r1, #92	; 0x5c
    239a:	7808      	ldrb	r0, [r1, #0]
    239c:	18e3      	adds	r3, r4, r3
    239e:	335b      	adds	r3, #91	; 0x5b
    23a0:	0200      	lsls	r0, r0, #8
    23a2:	9001      	str	r0, [sp, #4]
    23a4:	7818      	ldrb	r0, [r3, #0]
		RadioData.payloadLength -= 2; // we have removed CRC.
    23a6:	b2d2      	uxtb	r2, r2
		uint16_t temp_crc = (uint16_t)((RadioData.payload[RadioData.payloadLength-2] << 8) + RadioData.payload[RadioData.payloadLength-1]);
    23a8:	4684      	mov	ip, r0
    23aa:	9801      	ldr	r0, [sp, #4]
		RadioData.payload[RadioData.payloadLength-2]=0;
    23ac:	700d      	strb	r5, [r1, #0]
		uint16_t temp_crc = (uint16_t)((RadioData.payload[RadioData.payloadLength-2] << 8) + RadioData.payload[RadioData.payloadLength-1]);
    23ae:	4460      	add	r0, ip
    23b0:	b280      	uxth	r0, r0
		RadioData.payload[RadioData.payloadLength-1]=0;
    23b2:	701d      	strb	r5, [r3, #0]
		uint16_t temp_crc = (uint16_t)((RadioData.payload[RadioData.payloadLength-2] << 8) + RadioData.payload[RadioData.payloadLength-1]);
    23b4:	9001      	str	r0, [sp, #4]
		RadioData.payloadLength -= 2; // we have removed CRC.
    23b6:	7032      	strb	r2, [r6, #0]
		if(CalculateCRC(&RadioData.payload[0],RadioData.payloadLength) == temp_crc){
    23b8:	0039      	movs	r1, r7
    23ba:	0020      	movs	r0, r4
    23bc:	f7ff ffbe 	bl	233c <_ZN11E28_2G4M20S12CalculateCRCEPhh>
    23c0:	9b01      	ldr	r3, [sp, #4]
    23c2:	3e3f      	subs	r6, #63	; 0x3f
    23c4:	4283      	cmp	r3, r0
    23c6:	d12c      	bne.n	2422 <_ZN11E28_2G4M20S8OnRxDoneEv+0xba>
			Radio->GetPacketStatus(&PacketStatus);
    23c8:	0025      	movs	r5, r4
    23ca:	3541      	adds	r5, #65	; 0x41
    23cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
    23ce:	0029      	movs	r1, r5
    23d0:	f000 fc62 	bl	2c98 <_ZN6SX128015GetPacketStatusEP14PacketStatus_t>
			switch( PacketStatus.packetType )
    23d4:	7828      	ldrb	r0, [r5, #0]
    23d6:	280f      	cmp	r0, #15
    23d8:	d812      	bhi.n	2400 <_ZN11E28_2G4M20S8OnRxDoneEv+0x98>
    23da:	f006 f861 	bl	84a0 <__gnu_thumb1_case_uqi>
    23de:	081b      	.short	0x081b
    23e0:	111b1b08 	.word	0x111b1b08
    23e4:	11111111 	.word	0x11111111
    23e8:	11111111 	.word	0x11111111
    23ec:	1e11      	.short	0x1e11
					RadioData.rssi = PacketStatus.LoRa.RssiPkt;
    23ee:	0023      	movs	r3, r4
    23f0:	3342      	adds	r3, #66	; 0x42
    23f2:	781a      	ldrb	r2, [r3, #0]
    23f4:	3357      	adds	r3, #87	; 0x57
    23f6:	701a      	strb	r2, [r3, #0]
					RadioData.snr = PacketStatus.LoRa.SnrPkt;
    23f8:	3b56      	subs	r3, #86	; 0x56
				RadioData.rssi = PacketStatus.Ble.RssiSync;
    23fa:	781a      	ldrb	r2, [r3, #0]
    23fc:	3357      	adds	r3, #87	; 0x57
				RadioData.rssi = 0;
    23fe:	701a      	strb	r2, [r3, #0]
			RadioDataReady = true;
    2400:	0022      	movs	r2, r4
			RadioStatus.rxDone=true;
    2402:	2301      	movs	r3, #1
			RadioDataReady = true;
    2404:	329b      	adds	r2, #155	; 0x9b
			RadioStatus.rxDone=true;
    2406:	7033      	strb	r3, [r6, #0]
			RadioDataReady = true;
    2408:	7013      	strb	r3, [r2, #0]
	SetRXMode(false); // Set to RX with no timeout.
    240a:	2100      	movs	r1, #0
    240c:	0020      	movs	r0, r4
    240e:	f7ff ff27 	bl	2260 <_ZN11E28_2G4M20S9SetRXModeEb>
}
    2412:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
				RadioData.rssi = PacketStatus.Ble.RssiSync;
    2414:	0023      	movs	r3, r4
    2416:	3342      	adds	r3, #66	; 0x42
    2418:	e7ef      	b.n	23fa <_ZN11E28_2G4M20S8OnRxDoneEv+0x92>
				RadioData.rssi = 0;
    241a:	0023      	movs	r3, r4
    241c:	2200      	movs	r2, #0
    241e:	3399      	adds	r3, #153	; 0x99
    2420:	e7ed      	b.n	23fe <_ZN11E28_2G4M20S8OnRxDoneEv+0x96>
			RadioStatus.rxDone=false;
    2422:	7035      	strb	r5, [r6, #0]
    2424:	e7f1      	b.n	240a <_ZN11E28_2G4M20S8OnRxDoneEv+0xa2>

00002426 <_ZN11E28_2G4M20S10IRQHandlerEv>:
{
    2426:	b510      	push	{r4, lr}
    2428:	0004      	movs	r4, r0
	Radio->ProcessIrqs();	
    242a:	6d40      	ldr	r0, [r0, #84]	; 0x54
    242c:	f000 fdf4 	bl	3018 <_ZN6SX128011ProcessIrqsEv>
	RadioStatus.txDone=Radio->RadioPacketStatus.txDone;
    2430:	0021      	movs	r1, r4
    2432:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2434:	3158      	adds	r1, #88	; 0x58
    2436:	791a      	ldrb	r2, [r3, #4]
    2438:	700a      	strb	r2, [r1, #0]
	RadioStatus.rxTimeout=Radio->RadioPacketStatus.rxTimeout;
    243a:	7a58      	ldrb	r0, [r3, #9]
	RadioStatus.txTimeout=Radio->RadioPacketStatus.txTimeout;
    243c:	3102      	adds	r1, #2
	RadioStatus.rxTimeout=Radio->RadioPacketStatus.rxTimeout;
    243e:	7048      	strb	r0, [r1, #1]
	RadioStatus.txTimeout=Radio->RadioPacketStatus.txTimeout;
    2440:	7a1b      	ldrb	r3, [r3, #8]
    2442:	700b      	strb	r3, [r1, #0]
	if(Radio->RadioPacketStatus.txDone == true){
    2444:	2a00      	cmp	r2, #0
    2446:	d002      	beq.n	244e <_ZN11E28_2G4M20S10IRQHandlerEv+0x28>
		this->OnTxDone();
    2448:	0020      	movs	r0, r4
    244a:	f7ff ff2c 	bl	22a6 <_ZN11E28_2G4M20S8OnTxDoneEv>
	if(Radio->RadioPacketStatus.rxDone == true){
    244e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2450:	795b      	ldrb	r3, [r3, #5]
    2452:	2b00      	cmp	r3, #0
    2454:	d002      	beq.n	245c <_ZN11E28_2G4M20S10IRQHandlerEv+0x36>
		this->OnRxDone();
    2456:	0020      	movs	r0, r4
    2458:	f7ff ff86 	bl	2368 <_ZN11E28_2G4M20S8OnRxDoneEv>
}
    245c:	bd10      	pop	{r4, pc}

0000245e <_ZN11E28_2G4M20S13SendRadioDataEP11RadioData_t>:
	RadioData.payloadLength=data->payloadLength;
    245e:	000b      	movs	r3, r1
{
    2460:	b5f0      	push	{r4, r5, r6, r7, lr}
	RadioData.payloadLength=data->payloadLength;
    2462:	0006      	movs	r6, r0
	memcpy(&RadioData.payload, data->payload, RadioData.payloadLength);	// copy the data.
    2464:	0007      	movs	r7, r0
{
    2466:	0004      	movs	r4, r0
	RadioData.payloadLength=data->payloadLength;
    2468:	333c      	adds	r3, #60	; 0x3c
    246a:	781a      	ldrb	r2, [r3, #0]
    246c:	3698      	adds	r6, #152	; 0x98
	memcpy(&RadioData.payload, data->payload, RadioData.payloadLength);	// copy the data.
    246e:	375c      	adds	r7, #92	; 0x5c
{
    2470:	b085      	sub	sp, #20
	RadioData.payloadLength=data->payloadLength;
    2472:	7032      	strb	r2, [r6, #0]
	memcpy(&RadioData.payload, data->payload, RadioData.payloadLength);	// copy the data.
    2474:	0038      	movs	r0, r7
    2476:	f009 f839 	bl	b4ec <memcpy>
	uint16_t temp_crc = CalculateCRC(&RadioData.payload[0], RadioData.payloadLength);
    247a:	7835      	ldrb	r5, [r6, #0]
    247c:	0039      	movs	r1, r7
    247e:	002a      	movs	r2, r5
    2480:	0020      	movs	r0, r4
    2482:	f7ff ff5b 	bl	233c <_ZN11E28_2G4M20S12CalculateCRCEPhh>
	RadioData.payload[RadioData.payloadLength++] = (uint8_t)((temp_crc >>  8) & 0xFF);  // CRC
    2486:	1963      	adds	r3, r4, r5
    2488:	0a02      	lsrs	r2, r0, #8
    248a:	335c      	adds	r3, #92	; 0x5c
    248c:	701a      	strb	r2, [r3, #0]
	RadioData.payload[RadioData.payloadLength++] = (uint8_t)(temp_crc & 0xFF);		    // CRC	
    248e:	1cab      	adds	r3, r5, #2
	RadioData.payload[RadioData.payloadLength++] = (uint8_t)((temp_crc >>  8) & 0xFF);  // CRC
    2490:	3501      	adds	r5, #1
	RadioData.payload[RadioData.payloadLength++] = (uint8_t)(temp_crc & 0xFF);		    // CRC	
    2492:	b2ed      	uxtb	r5, r5
    2494:	1965      	adds	r5, r4, r5
    2496:	355c      	adds	r5, #92	; 0x5c
    2498:	7033      	strb	r3, [r6, #0]
    249a:	7028      	strb	r0, [r5, #0]
	this->SetTxModeActive(); // Switch the hardware amplifier to TX mode.
    249c:	0020      	movs	r0, r4
    249e:	f7ff fe81 	bl	21a4 <_ZN11E28_2G4M20S15SetTxModeActiveEv>
	Radio->SetDioIrqParams( TxIrqMask, TxIrqMask, IRQ_RADIO_NONE, IRQ_RADIO_NONE ); // Set module to interrupt on TX complete on DI01.
    24a2:	0023      	movs	r3, r4
    24a4:	2500      	movs	r5, #0
    24a6:	339e      	adds	r3, #158	; 0x9e
    24a8:	8819      	ldrh	r1, [r3, #0]
    24aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
    24ac:	002b      	movs	r3, r5
    24ae:	000a      	movs	r2, r1
    24b0:	9500      	str	r5, [sp, #0]
    24b2:	f000 fceb 	bl	2e8c <_ZN6SX128015SetDioIrqParamsEtttt>
	this->PacketParams.Params.LoRa.PayloadLength = RadioData.payloadLength;
    24b6:	0023      	movs	r3, r4
	Radio->SetPacketParams( &PacketParams );
    24b8:	0021      	movs	r1, r4
	this->PacketParams.Params.LoRa.PayloadLength = RadioData.payloadLength;
    24ba:	7832      	ldrb	r2, [r6, #0]
    24bc:	3333      	adds	r3, #51	; 0x33
    24be:	701a      	strb	r2, [r3, #0]
	Radio->SetPacketParams( &PacketParams );
    24c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    24c2:	3129      	adds	r1, #41	; 0x29
    24c4:	f000 fb5b 	bl	2b7e <_ZN6SX128015SetPacketParamsEP14PacketParams_t>
	Radio->SendPayload(&RadioData.payload[0], RadioData.payloadLength, ( TickTime_t ){ RX_TIMEOUT_TICK_SIZE, TX_TIMEOUT_VALUE } );
    24c8:	2102      	movs	r1, #2
    24ca:	ab03      	add	r3, sp, #12
    24cc:	7832      	ldrb	r2, [r6, #0]
    24ce:	7019      	strb	r1, [r3, #0]
    24d0:	3130      	adds	r1, #48	; 0x30
    24d2:	8059      	strh	r1, [r3, #2]
    24d4:	9b03      	ldr	r3, [sp, #12]
    24d6:	0039      	movs	r1, r7
    24d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    24da:	9500      	str	r5, [sp, #0]
    24dc:	f000 fd64 	bl	2fa8 <_ZN6SX128011SendPayloadEPhh10TickTime_sh>
	Radio->SetLed(HIGH);
    24e0:	2101      	movs	r1, #1
    24e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
    24e4:	f000 fa5a 	bl	299c <_ZN9SX1280Hal6SetLedEh>
}
    24e8:	b005      	add	sp, #20
    24ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000024ec <_ZN11E28_2G4M20S15GetDioPinStatusEv>:

uint16_t  E28_2G4M20S::GetFirmwareVersion( void ){
	return Radio->GetFirmwareVersion();
}

uint8_t E28_2G4M20S::GetDioPinStatus(void){
    24ec:	b510      	push	{r4, lr}
	return Radio->GetDioPinStatus();
    24ee:	6d40      	ldr	r0, [r0, #84]	; 0x54
    24f0:	f000 fa63 	bl	29ba <_ZN9SX1280Hal15GetDioPinStatusEv>
    24f4:	bd10      	pop	{r4, pc}

000024f6 <_ZN9SX1280HalD1Ev>:

    SPI.begin();
}

SX1280Hal::~SX1280Hal( void )
{
    24f6:	4770      	bx	lr

000024f8 <_ZN9SX1280Hal13WriteRegisterEth>:
	digitalWrite(RadioNss, HIGH);
	SPI.endTransaction();
   
    WaitOnBusy( );
}

    24f8:	b513      	push	{r0, r1, r4, lr}
    24fa:	0013      	movs	r3, r2
    24fc:	466a      	mov	r2, sp
    24fe:	3207      	adds	r2, #7
    2500:	7013      	strb	r3, [r2, #0]
void SX1280Hal::WriteRegister( uint16_t address, uint8_t value )
    2502:	6803      	ldr	r3, [r0, #0]
    2504:	699c      	ldr	r4, [r3, #24]
    2506:	2301      	movs	r3, #1
    2508:	47a0      	blx	r4
{
    250a:	bd13      	pop	{r0, r1, r4, pc}

0000250c <_ZN9SX1280Hal12ReadRegisterEt>:
	digitalWrite(RadioNss, HIGH);
	SPI.endTransaction();

    WaitOnBusy( );
}

    250c:	b537      	push	{r0, r1, r2, r4, r5, lr}
uint8_t SX1280Hal::ReadRegister( uint16_t address )
{
    uint8_t data;
    250e:	466b      	mov	r3, sp
    2510:	1ddc      	adds	r4, r3, #7
    2512:	6803      	ldr	r3, [r0, #0]
    2514:	0022      	movs	r2, r4
    2516:	6a1d      	ldr	r5, [r3, #32]
    2518:	2301      	movs	r3, #1
    251a:	47a8      	blx	r5

    251c:	7820      	ldrb	r0, [r4, #0]
    ReadRegister( address, &data, 1 );
    251e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00002520 <_ZN9SX1280HalD0Ev>:
}
    2520:	b510      	push	{r4, lr}
    2522:	0004      	movs	r4, r0
{
    2524:	f003 fdd0 	bl	60c8 <_ZdlPv>
    2528:	0020      	movs	r0, r4
    252a:	bd10      	pop	{r4, pc}

0000252c <_ZN9SX1280Hal5ResetEv>:
*/
    252c:	b510      	push	{r4, lr}
    252e:	0004      	movs	r4, r0
{
    2530:	2014      	movs	r0, #20
    2532:	f003 fd89 	bl	6048 <delay>
//    noInterrupts();
    2536:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2538:	2101      	movs	r1, #1
    253a:	f005 fa53 	bl	79e4 <pinMode>
    delay( 20 );
    253e:	2100      	movs	r1, #0
    2540:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2542:	f005 fa9b 	bl	7a7c <digitalWrite>
    pinMode(RadioReset, OUTPUT);
    2546:	2032      	movs	r0, #50	; 0x32
    2548:	f003 fd7e 	bl	6048 <delay>
    digitalWrite(RadioReset, LOW);
    254c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    254e:	2101      	movs	r1, #1
    2550:	f005 fa94 	bl	7a7c <digitalWrite>
    delay( 50 );
    2554:	2100      	movs	r1, #0
    2556:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2558:	f005 fa44 	bl	79e4 <pinMode>
    digitalWrite(RadioReset, HIGH);
    255c:	2014      	movs	r0, #20
    255e:	f003 fd73 	bl	6048 <delay>
    delay( 20 );
    2562:	bd10      	pop	{r4, pc}

00002564 <_ZN9SX1280Hal6WakeupEv>:

    2564:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2566:	0005      	movs	r5, r0
    //Don't wait for BUSY	here
    2568:	2100      	movs	r1, #0
    256a:	6a00      	ldr	r0, [r0, #32]
    256c:	f005 fa86 	bl	7a7c <digitalWrite>
    "   sub %0, #1   \n" // substract 1 from %0 (n)
    "   bne 1b       \n" // if result is not 0 jump to 1
    : "+r" (n)           // '%0' is n variable with RW constraints
    :                    // no input
    :                    // no clobber
  );
    2570:	2396      	movs	r3, #150	; 0x96
    2572:	011b      	lsls	r3, r3, #4
    2574:	3b01      	subs	r3, #1
    2576:	d1fd      	bne.n	2574 <_ZN9SX1280Hal6WakeupEv+0x10>
  }

  void init_AlwaysInline(uint32_t clock, BitOrder bitOrder, uint8_t dataMode) __attribute__((__always_inline__)) {
    this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? F_CPU / SPI_MIN_CLOCK_DIVIDER : clock);

    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    2578:	2600      	movs	r6, #0
    257a:	466b      	mov	r3, sp
	digitalWrite(RadioNss, LOW);
    257c:	4c0e      	ldr	r4, [pc, #56]	; (25b8 <_ZN9SX1280Hal6WakeupEv+0x54>)
    257e:	715e      	strb	r6, [r3, #5]

    switch (dataMode)
    {
      case SPI_MODE0:
        this->dataMode = SERCOM_SPI_MODE_0; break;
    2580:	711e      	strb	r6, [r3, #4]
    2582:	9a01      	ldr	r2, [sp, #4]
    2584:	490d      	ldr	r1, [pc, #52]	; (25bc <_ZN9SX1280Hal6WakeupEv+0x58>)
    2586:	0020      	movs	r0, r4
    2588:	f005 fc8c 	bl	7ea4 <_ZN8SPIClass16beginTransactionE11SPISettings>
	SPI.beginTransaction(SPISettings(2000000, MSBFIRST, SPI_MODE0));
    258c:	21c0      	movs	r1, #192	; 0xc0
    258e:	0020      	movs	r0, r4
    2590:	f005 fcb8 	bl	7f04 <_ZN8SPIClass8transferEh>
//	digitalWrite(21, LOW);	 debug
    2594:	0031      	movs	r1, r6
    2596:	0020      	movs	r0, r4
    2598:	f005 fcb4 	bl	7f04 <_ZN8SPIClass8transferEh>
    SPI.transfer( RADIO_GET_STATUS );
    259c:	6a28      	ldr	r0, [r5, #32]
    259e:	2101      	movs	r1, #1
    25a0:	f005 fa6c 	bl	7a7c <digitalWrite>
    SPI.transfer( 0 );
    25a4:	0020      	movs	r0, r4
    25a6:	f005 fc99 	bl	7edc <_ZN8SPIClass14endTransactionEv>
		
    25aa:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    25ac:	f005 fa92 	bl	7ad4 <digitalRead>
    25b0:	2801      	cmp	r0, #1
    25b2:	d0fa      	beq.n	25aa <_ZN9SX1280Hal6WakeupEv+0x46>
    WaitOnBusy( );
    25b4:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    25b6:	46c0      	nop			; (mov r8, r8)
    25b8:	200009d0 	.word	0x200009d0
    25bc:	001e8480 	.word	0x001e8480

000025c0 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht>:

    25c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    25c2:	0005      	movs	r5, r0
    25c4:	000f      	movs	r7, r1
    25c6:	b085      	sub	sp, #20
    25c8:	9200      	str	r2, [sp, #0]
    25ca:	9301      	str	r3, [sp, #4]
void SX1280Hal::WriteCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
    25cc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    25ce:	f005 fa81 	bl	7ad4 <digitalRead>
    25d2:	2801      	cmp	r0, #1
    25d4:	d0fa      	beq.n	25cc <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0xc>
    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    25d6:	2400      	movs	r4, #0

    25d8:	2100      	movs	r1, #0
    25da:	6a28      	ldr	r0, [r5, #32]
    25dc:	f005 fa4e 	bl	7a7c <digitalWrite>
    25e0:	ab02      	add	r3, sp, #8
   
    25e2:	4e13      	ldr	r6, [pc, #76]	; (2630 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x70>)
    25e4:	715c      	strb	r4, [r3, #5]
        this->dataMode = SERCOM_SPI_MODE_0; break;
    25e6:	711c      	strb	r4, [r3, #4]
    25e8:	4912      	ldr	r1, [pc, #72]	; (2634 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x74>)
    25ea:	0030      	movs	r0, r6
    25ec:	9a03      	ldr	r2, [sp, #12]
    25ee:	f005 fc59 	bl	7ea4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    digitalWrite(RadioNss, LOW);
    25f2:	0039      	movs	r1, r7
    25f4:	0030      	movs	r0, r6
    25f6:	f005 fc85 	bl	7f04 <_ZN8SPIClass8transferEh>
	SPI.beginTransaction(SPISettings(2000000, MSBFIRST, SPI_MODE0));
    25fa:	9b01      	ldr	r3, [sp, #4]
    25fc:	429c      	cmp	r4, r3
    25fe:	da07      	bge.n	2610 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x50>
    for( uint16_t i = 0; i < size; i++ )
    2600:	9b00      	ldr	r3, [sp, #0]
    2602:	0030      	movs	r0, r6
    2604:	5d19      	ldrb	r1, [r3, r4]
	SPI.beginTransaction(SPISettings(2000000, MSBFIRST, SPI_MODE0));
    2606:	3401      	adds	r4, #1
    for( uint16_t i = 0; i < size; i++ )
    2608:	f005 fc7c 	bl	7f04 <_ZN8SPIClass8transferEh>
	SPI.beginTransaction(SPISettings(2000000, MSBFIRST, SPI_MODE0));
    260c:	b2a4      	uxth	r4, r4
    260e:	e7f4      	b.n	25fa <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x3a>
        SPI.transfer( buffer[i] );
    2610:	6a28      	ldr	r0, [r5, #32]
    2612:	2101      	movs	r1, #1
    2614:	f005 fa32 	bl	7a7c <digitalWrite>
    }
    2618:	0030      	movs	r0, r6
    261a:	f005 fc5f 	bl	7edc <_ZN8SPIClass14endTransactionEv>
	SPI.endTransaction();
    261e:	2f84      	cmp	r7, #132	; 0x84
    2620:	d004      	beq.n	262c <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x6c>
    if( command != RADIO_SET_SLEEP )
    2622:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    2624:	f005 fa56 	bl	7ad4 <digitalRead>
    2628:	2801      	cmp	r0, #1
    262a:	d0fa      	beq.n	2622 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x62>
        WaitOnBusy( );
    262c:	b005      	add	sp, #20
    262e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2630:	200009d0 	.word	0x200009d0
    2634:	001e8480 	.word	0x001e8480

00002638 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht>:

    2638:	b5f0      	push	{r4, r5, r6, r7, lr}
    263a:	0006      	movs	r6, r0
    263c:	000f      	movs	r7, r1
    263e:	b085      	sub	sp, #20
    2640:	9200      	str	r2, [sp, #0]
    2642:	9301      	str	r3, [sp, #4]
void SX1280Hal::ReadCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
    2644:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    2646:	f005 fa45 	bl	7ad4 <digitalRead>
    264a:	2801      	cmp	r0, #1
    264c:	d0fa      	beq.n	2644 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0xc>
    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    264e:	2400      	movs	r4, #0
    WaitOnBusy( );
    2650:	2100      	movs	r1, #0
    2652:	6a30      	ldr	r0, [r6, #32]
    2654:	f005 fa12 	bl	7a7c <digitalWrite>
    2658:	ab02      	add	r3, sp, #8

    265a:	4d1c      	ldr	r5, [pc, #112]	; (26cc <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0x94>)
    265c:	715c      	strb	r4, [r3, #5]
        this->dataMode = SERCOM_SPI_MODE_0; break;
    265e:	711c      	strb	r4, [r3, #4]
    2660:	491b      	ldr	r1, [pc, #108]	; (26d0 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0x98>)
    2662:	0028      	movs	r0, r5
    2664:	9a03      	ldr	r2, [sp, #12]
    2666:	f005 fc1d 	bl	7ea4 <_ZN8SPIClass16beginTransactionE11SPISettings>
	 if( command == RADIO_GET_STATUS )
    266a:	0039      	movs	r1, r7
    266c:	0028      	movs	r0, r5
	SPI.beginTransaction(SPISettings(2000000, MSBFIRST, SPI_MODE0));
    266e:	2fc0      	cmp	r7, #192	; 0xc0
    2670:	d119      	bne.n	26a6 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0x6e>
	 if( command == RADIO_GET_STATUS )
    2672:	f005 fc47 	bl	7f04 <_ZN8SPIClass8transferEh>
    2676:	9b00      	ldr	r3, [sp, #0]
     {
    2678:	0021      	movs	r1, r4
	 if( command == RADIO_GET_STATUS )
    267a:	7018      	strb	r0, [r3, #0]
     {
    267c:	0028      	movs	r0, r5
    267e:	f005 fc41 	bl	7f04 <_ZN8SPIClass8transferEh>
		buffer[0] = SPI.transfer( ( uint8_t )command );
    2682:	0021      	movs	r1, r4
    2684:	0028      	movs	r0, r5
    2686:	f005 fc3d 	bl	7f04 <_ZN8SPIClass8transferEh>
         }
    268a:	6a30      	ldr	r0, [r6, #32]
    268c:	2101      	movs	r1, #1
    268e:	f005 f9f5 	bl	7a7c <digitalWrite>
	 }
    2692:	0028      	movs	r0, r5
    2694:	f005 fc22 	bl	7edc <_ZN8SPIClass14endTransactionEv>
	SPI.endTransaction();
    2698:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    269a:	f005 fa1b 	bl	7ad4 <digitalRead>
    269e:	2801      	cmp	r0, #1
    26a0:	d0fa      	beq.n	2698 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0x60>
	
    26a2:	b005      	add	sp, #20
    26a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	 }else
    26a6:	f005 fc2d 	bl	7f04 <_ZN8SPIClass8transferEh>
	 {
    26aa:	0021      	movs	r1, r4
    26ac:	0028      	movs	r0, r5
    26ae:	f005 fc29 	bl	7f04 <_ZN8SPIClass8transferEh>
		 SPI.transfer( ( uint8_t )command );
    26b2:	9b01      	ldr	r3, [sp, #4]
    26b4:	429c      	cmp	r4, r3
    26b6:	dae8      	bge.n	268a <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0x52>
		 for( uint16_t i = 0; i < size; i++ )
    26b8:	9b00      	ldr	r3, [sp, #0]
    26ba:	2100      	movs	r1, #0
    26bc:	0028      	movs	r0, r5
    26be:	191f      	adds	r7, r3, r4
    26c0:	f005 fc20 	bl	7f04 <_ZN8SPIClass8transferEh>
		 SPI.transfer( ( uint8_t )command );
    26c4:	3401      	adds	r4, #1
		 for( uint16_t i = 0; i < size; i++ )
    26c6:	7038      	strb	r0, [r7, #0]
		 SPI.transfer( ( uint8_t )command );
    26c8:	b2a4      	uxth	r4, r4
    26ca:	e7f2      	b.n	26b2 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0x7a>
    26cc:	200009d0 	.word	0x200009d0
    26d0:	001e8480 	.word	0x001e8480

000026d4 <_ZN9SX1280Hal13WriteRegisterEtPht>:

    26d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    26d6:	0006      	movs	r6, r0
    26d8:	000f      	movs	r7, r1
    26da:	b085      	sub	sp, #20
    26dc:	9200      	str	r2, [sp, #0]
    26de:	9301      	str	r3, [sp, #4]
void SX1280Hal::WriteRegister( uint16_t address, uint8_t *buffer, uint16_t size )
    26e0:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    26e2:	f005 f9f7 	bl	7ad4 <digitalRead>
    26e6:	2801      	cmp	r0, #1
    26e8:	d0fa      	beq.n	26e0 <_ZN9SX1280Hal13WriteRegisterEtPht+0xc>
    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    26ea:	2400      	movs	r4, #0
    WaitOnBusy( );
    26ec:	2100      	movs	r1, #0
    26ee:	6a30      	ldr	r0, [r6, #32]
    26f0:	f005 f9c4 	bl	7a7c <digitalWrite>
    26f4:	ab02      	add	r3, sp, #8

    26f6:	4d16      	ldr	r5, [pc, #88]	; (2750 <_ZN9SX1280Hal13WriteRegisterEtPht+0x7c>)
    26f8:	715c      	strb	r4, [r3, #5]
        this->dataMode = SERCOM_SPI_MODE_0; break;
    26fa:	711c      	strb	r4, [r3, #4]
    26fc:	9a03      	ldr	r2, [sp, #12]
    26fe:	4915      	ldr	r1, [pc, #84]	; (2754 <_ZN9SX1280Hal13WriteRegisterEtPht+0x80>)
    2700:	0028      	movs	r0, r5
    2702:	f005 fbcf 	bl	7ea4 <_ZN8SPIClass16beginTransactionE11SPISettings>
	SPI.beginTransaction(SPISettings(2000000, MSBFIRST, SPI_MODE0));
    2706:	2118      	movs	r1, #24
    2708:	0028      	movs	r0, r5
    270a:	f005 fbfb 	bl	7f04 <_ZN8SPIClass8transferEh>
	
    270e:	0a39      	lsrs	r1, r7, #8
    2710:	0028      	movs	r0, r5
    2712:	f005 fbf7 	bl	7f04 <_ZN8SPIClass8transferEh>
	SPI.transfer( RADIO_WRITE_REGISTER );
    2716:	b2f9      	uxtb	r1, r7
    2718:	0028      	movs	r0, r5
    271a:	f005 fbf3 	bl	7f04 <_ZN8SPIClass8transferEh>
	SPI.transfer( address & 0x00FF  );
    271e:	9b01      	ldr	r3, [sp, #4]
    2720:	429c      	cmp	r4, r3
    2722:	da07      	bge.n	2734 <_ZN9SX1280Hal13WriteRegisterEtPht+0x60>
	for( uint16_t i = 0; i < size; i++ )
    2724:	9b00      	ldr	r3, [sp, #0]
    2726:	0028      	movs	r0, r5
    2728:	5d19      	ldrb	r1, [r3, r4]
	SPI.transfer( address & 0x00FF  );
    272a:	3401      	adds	r4, #1
	for( uint16_t i = 0; i < size; i++ )
    272c:	f005 fbea 	bl	7f04 <_ZN8SPIClass8transferEh>
	SPI.transfer( address & 0x00FF  );
    2730:	b2a4      	uxth	r4, r4
    2732:	e7f4      	b.n	271e <_ZN9SX1280Hal13WriteRegisterEtPht+0x4a>
    }
    2734:	6a30      	ldr	r0, [r6, #32]
    2736:	2101      	movs	r1, #1
    2738:	f005 f9a0 	bl	7a7c <digitalWrite>
		
    273c:	0028      	movs	r0, r5
    273e:	f005 fbcd 	bl	7edc <_ZN8SPIClass14endTransactionEv>
	SPI.endTransaction();
    2742:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    2744:	f005 f9c6 	bl	7ad4 <digitalRead>
    2748:	2801      	cmp	r0, #1
    274a:	d0fa      	beq.n	2742 <_ZN9SX1280Hal13WriteRegisterEtPht+0x6e>
   
    274c:	b005      	add	sp, #20
    274e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2750:	200009d0 	.word	0x200009d0
    2754:	001e8480 	.word	0x001e8480

00002758 <_ZN9SX1280Hal12ReadRegisterEtPht>:

    2758:	b5f0      	push	{r4, r5, r6, r7, lr}
    275a:	0006      	movs	r6, r0
    275c:	000f      	movs	r7, r1
    275e:	b085      	sub	sp, #20
    2760:	9200      	str	r2, [sp, #0]
    2762:	9301      	str	r3, [sp, #4]
void SX1280Hal::ReadRegister( uint16_t address, uint8_t *buffer, uint16_t size )
    2764:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    2766:	f005 f9b5 	bl	7ad4 <digitalRead>
    276a:	2801      	cmp	r0, #1
    276c:	d0fa      	beq.n	2764 <_ZN9SX1280Hal12ReadRegisterEtPht+0xc>
    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    276e:	2400      	movs	r4, #0
    WaitOnBusy( );
    2770:	2100      	movs	r1, #0
    2772:	6a30      	ldr	r0, [r6, #32]
    2774:	f005 f982 	bl	7a7c <digitalWrite>
    2778:	ab02      	add	r3, sp, #8

    277a:	4d19      	ldr	r5, [pc, #100]	; (27e0 <_ZN9SX1280Hal12ReadRegisterEtPht+0x88>)
    277c:	715c      	strb	r4, [r3, #5]
        this->dataMode = SERCOM_SPI_MODE_0; break;
    277e:	711c      	strb	r4, [r3, #4]
    2780:	9a03      	ldr	r2, [sp, #12]
    2782:	4918      	ldr	r1, [pc, #96]	; (27e4 <_ZN9SX1280Hal12ReadRegisterEtPht+0x8c>)
    2784:	0028      	movs	r0, r5
    2786:	f005 fb8d 	bl	7ea4 <_ZN8SPIClass16beginTransactionE11SPISettings>
	SPI.beginTransaction(SPISettings(2000000, MSBFIRST, SPI_MODE0));
    278a:	2119      	movs	r1, #25
    278c:	0028      	movs	r0, r5
    278e:	f005 fbb9 	bl	7f04 <_ZN8SPIClass8transferEh>
	
    2792:	0a39      	lsrs	r1, r7, #8
    2794:	0028      	movs	r0, r5
    2796:	f005 fbb5 	bl	7f04 <_ZN8SPIClass8transferEh>
	SPI.transfer( RADIO_READ_REGISTER );
    279a:	b2f9      	uxtb	r1, r7
    279c:	0028      	movs	r0, r5
    279e:	f005 fbb1 	bl	7f04 <_ZN8SPIClass8transferEh>
	SPI.transfer( ( address & 0xFF00 ) >> 8  );
    27a2:	0021      	movs	r1, r4
    27a4:	0028      	movs	r0, r5
    27a6:	f005 fbad 	bl	7f04 <_ZN8SPIClass8transferEh>
	SPI.transfer( address & 0x00FF  );
    27aa:	9b01      	ldr	r3, [sp, #4]
    27ac:	429c      	cmp	r4, r3
    27ae:	da09      	bge.n	27c4 <_ZN9SX1280Hal12ReadRegisterEtPht+0x6c>
	for( uint16_t i = 0; i < size; i++ )
    27b0:	9b00      	ldr	r3, [sp, #0]
    27b2:	2100      	movs	r1, #0
    27b4:	0028      	movs	r0, r5
    27b6:	191f      	adds	r7, r3, r4
    27b8:	f005 fba4 	bl	7f04 <_ZN8SPIClass8transferEh>
	SPI.transfer( address & 0x00FF  );
    27bc:	3401      	adds	r4, #1
	for( uint16_t i = 0; i < size; i++ )
    27be:	7038      	strb	r0, [r7, #0]
	SPI.transfer( address & 0x00FF  );
    27c0:	b2a4      	uxth	r4, r4
    27c2:	e7f2      	b.n	27aa <_ZN9SX1280Hal12ReadRegisterEtPht+0x52>
    }
    27c4:	6a30      	ldr	r0, [r6, #32]
    27c6:	2101      	movs	r1, #1
    27c8:	f005 f958 	bl	7a7c <digitalWrite>
		
    27cc:	0028      	movs	r0, r5
    27ce:	f005 fb85 	bl	7edc <_ZN8SPIClass14endTransactionEv>
	SPI.endTransaction();
    27d2:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    27d4:	f005 f97e 	bl	7ad4 <digitalRead>
    27d8:	2801      	cmp	r0, #1
    27da:	d0fa      	beq.n	27d2 <_ZN9SX1280Hal12ReadRegisterEtPht+0x7a>

    27dc:	b005      	add	sp, #20
    27de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27e0:	200009d0 	.word	0x200009d0
    27e4:	001e8480 	.word	0x001e8480

000027e8 <_ZN9SX1280Hal11WriteBufferEhPhh>:
    return data;
}

    27e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    27ea:	0006      	movs	r6, r0
    27ec:	000f      	movs	r7, r1
    27ee:	b085      	sub	sp, #20
    27f0:	9200      	str	r2, [sp, #0]
    27f2:	9301      	str	r3, [sp, #4]
void SX1280Hal::WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
    27f4:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    27f6:	f005 f96d 	bl	7ad4 <digitalRead>
    27fa:	2801      	cmp	r0, #1
    27fc:	d0fa      	beq.n	27f4 <_ZN9SX1280Hal11WriteBufferEhPhh+0xc>
    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    27fe:	2400      	movs	r4, #0
{
    WaitOnBusy( );
    2800:	2100      	movs	r1, #0
    2802:	6a30      	ldr	r0, [r6, #32]
    2804:	f005 f93a 	bl	7a7c <digitalWrite>
    2808:	ab02      	add	r3, sp, #8

    280a:	4d14      	ldr	r5, [pc, #80]	; (285c <_ZN9SX1280Hal11WriteBufferEhPhh+0x74>)
    280c:	715c      	strb	r4, [r3, #5]
        this->dataMode = SERCOM_SPI_MODE_0; break;
    280e:	711c      	strb	r4, [r3, #4]
    2810:	4913      	ldr	r1, [pc, #76]	; (2860 <_ZN9SX1280Hal11WriteBufferEhPhh+0x78>)
    2812:	9a03      	ldr	r2, [sp, #12]
    2814:	0028      	movs	r0, r5
    2816:	f005 fb45 	bl	7ea4 <_ZN8SPIClass16beginTransactionE11SPISettings>
	digitalWrite(RadioNss, LOW);
	SPI.beginTransaction(SPISettings(2000000, MSBFIRST, SPI_MODE0));
    281a:	211a      	movs	r1, #26
    281c:	0028      	movs	r0, r5
    281e:	f005 fb71 	bl	7f04 <_ZN8SPIClass8transferEh>
	
    2822:	0039      	movs	r1, r7
    2824:	0028      	movs	r0, r5
    2826:	f005 fb6d 	bl	7f04 <_ZN8SPIClass8transferEh>
	SPI.transfer( RADIO_WRITE_BUFFER );
    282a:	9b01      	ldr	r3, [sp, #4]
    282c:	429c      	cmp	r4, r3
    282e:	da07      	bge.n	2840 <_ZN9SX1280Hal11WriteBufferEhPhh+0x58>
	SPI.transfer( offset  );
	for( uint16_t i = 0; i < size; i++ )
    2830:	9b00      	ldr	r3, [sp, #0]
    2832:	0028      	movs	r0, r5
    2834:	5d19      	ldrb	r1, [r3, r4]
	SPI.transfer( RADIO_WRITE_BUFFER );
    2836:	3401      	adds	r4, #1
	for( uint16_t i = 0; i < size; i++ )
    2838:	f005 fb64 	bl	7f04 <_ZN8SPIClass8transferEh>
	SPI.transfer( RADIO_WRITE_BUFFER );
    283c:	b2a4      	uxth	r4, r4
    283e:	e7f4      	b.n	282a <_ZN9SX1280Hal11WriteBufferEhPhh+0x42>
    {
            SPI.transfer( buffer[i] );
    }
    2840:	6a30      	ldr	r0, [r6, #32]
    2842:	2101      	movs	r1, #1
    2844:	f005 f91a 	bl	7a7c <digitalWrite>
		
    2848:	0028      	movs	r0, r5
    284a:	f005 fb47 	bl	7edc <_ZN8SPIClass14endTransactionEv>
	digitalWrite(RadioNss, HIGH);
	SPI.endTransaction();
    284e:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    2850:	f005 f940 	bl	7ad4 <digitalRead>
    2854:	2801      	cmp	r0, #1
    2856:	d0fa      	beq.n	284e <_ZN9SX1280Hal11WriteBufferEhPhh+0x66>
	   
    2858:	b005      	add	sp, #20
    285a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    285c:	200009d0 	.word	0x200009d0
    2860:	001e8480 	.word	0x001e8480

00002864 <_ZN9SX1280Hal10ReadBufferEhPhh>:
    WaitOnBusy( );
}

    2864:	b5f0      	push	{r4, r5, r6, r7, lr}
    2866:	0006      	movs	r6, r0
    2868:	000f      	movs	r7, r1
    286a:	b085      	sub	sp, #20
    286c:	9200      	str	r2, [sp, #0]
    286e:	9301      	str	r3, [sp, #4]
void SX1280Hal::ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
    2870:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    2872:	f005 f92f 	bl	7ad4 <digitalRead>
    2876:	2801      	cmp	r0, #1
    2878:	d0fa      	beq.n	2870 <_ZN9SX1280Hal10ReadBufferEhPhh+0xc>
    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    287a:	2400      	movs	r4, #0
{
    WaitOnBusy( );
    287c:	2100      	movs	r1, #0
    287e:	6a30      	ldr	r0, [r6, #32]
    2880:	f005 f8fc 	bl	7a7c <digitalWrite>
    2884:	ab02      	add	r3, sp, #8

    2886:	4d17      	ldr	r5, [pc, #92]	; (28e4 <_ZN9SX1280Hal10ReadBufferEhPhh+0x80>)
    2888:	715c      	strb	r4, [r3, #5]
        this->dataMode = SERCOM_SPI_MODE_0; break;
    288a:	711c      	strb	r4, [r3, #4]
    288c:	9a03      	ldr	r2, [sp, #12]
    288e:	4916      	ldr	r1, [pc, #88]	; (28e8 <_ZN9SX1280Hal10ReadBufferEhPhh+0x84>)
    2890:	0028      	movs	r0, r5
    2892:	f005 fb07 	bl	7ea4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    digitalWrite(RadioNss, LOW);
    2896:	211b      	movs	r1, #27
    2898:	0028      	movs	r0, r5
    289a:	f005 fb33 	bl	7f04 <_ZN8SPIClass8transferEh>
	SPI.beginTransaction(SPISettings(2000000, MSBFIRST, SPI_MODE0));
    289e:	0039      	movs	r1, r7
    28a0:	0028      	movs	r0, r5
    28a2:	f005 fb2f 	bl	7f04 <_ZN8SPIClass8transferEh>
    SPI.transfer( RADIO_READ_BUFFER );
    28a6:	0021      	movs	r1, r4
    28a8:	0028      	movs	r0, r5
    28aa:	f005 fb2b 	bl	7f04 <_ZN8SPIClass8transferEh>
    SPI.transfer( offset );
    28ae:	9b01      	ldr	r3, [sp, #4]
    28b0:	429c      	cmp	r4, r3
    28b2:	da09      	bge.n	28c8 <_ZN9SX1280Hal10ReadBufferEhPhh+0x64>
    SPI.transfer( 0 );
    for( uint16_t i = 0; i < size; i++ )
    28b4:	9b00      	ldr	r3, [sp, #0]
    28b6:	2100      	movs	r1, #0
    28b8:	0028      	movs	r0, r5
    28ba:	191f      	adds	r7, r3, r4
    28bc:	f005 fb22 	bl	7f04 <_ZN8SPIClass8transferEh>
    SPI.transfer( offset );
    28c0:	3401      	adds	r4, #1
    for( uint16_t i = 0; i < size; i++ )
    28c2:	7038      	strb	r0, [r7, #0]
    SPI.transfer( offset );
    28c4:	b2a4      	uxth	r4, r4
    28c6:	e7f2      	b.n	28ae <_ZN9SX1280Hal10ReadBufferEhPhh+0x4a>
    {
        buffer[i] = SPI.transfer( 0 );
    28c8:	6a30      	ldr	r0, [r6, #32]
    28ca:	2101      	movs	r1, #1
    28cc:	f005 f8d6 	bl	7a7c <digitalWrite>
    }
    28d0:	0028      	movs	r0, r5
    28d2:	f005 fb03 	bl	7edc <_ZN8SPIClass14endTransactionEv>
    digitalWrite(RadioNss, HIGH);
	SPI.endTransaction();
    28d6:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    28d8:	f005 f8fc 	bl	7ad4 <digitalRead>
    28dc:	2801      	cmp	r0, #1
    28de:	d0fa      	beq.n	28d6 <_ZN9SX1280Hal10ReadBufferEhPhh+0x72>
 
    28e0:	b005      	add	sp, #20
    28e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28e4:	200009d0 	.word	0x200009d0
    28e8:	001e8480 	.word	0x001e8480

000028ec <_ZN9SX1280HalC1Eiiiiiiiii>:
SX1280Hal::SX1280Hal( int nss, int busy, int dio1, int dio2, int dio3, int rst,  int txEnablePin, int rxEnablePin, int ledPin)
    28ec:	b570      	push	{r4, r5, r6, lr}
     *                             all callbacks function pointers
     */
    SX1280( ):// RadioCallbacks_t *callbacks ):
        // The class members are value-initialiazed in member-initilaizer list
        Radio( ), OperatingMode( MODE_STDBY_RC ), PacketType( PACKET_TYPE_NONE ),
        LoRaBandwidth( LORA_BW_1600 ), IrqState( false ), PollingMode( true )
    28ee:	2302      	movs	r3, #2
    28f0:	0004      	movs	r4, r0
	*/
	RadioPacketStatus_t RadioPacketStatus;
	
	Radio( )
    {
		RadioPacketStatus.txDone=false;
    28f2:	2500      	movs	r5, #0
    28f4:	2601      	movs	r6, #1
    28f6:	7363      	strb	r3, [r4, #13]
    28f8:	330d      	adds	r3, #13
    28fa:	73e3      	strb	r3, [r4, #15]
    28fc:	3b05      	subs	r3, #5
    28fe:	7423      	strb	r3, [r4, #16]
        :   SX1280( )
    2900:	4b24      	ldr	r3, [pc, #144]	; (2994 <_ZN9SX1280HalC1Eiiiiiiiii+0xa8>)
    BUSY = busy;
    2902:	62a2      	str	r2, [r4, #40]	; 0x28
        :   SX1280( )
    2904:	3308      	adds	r3, #8
    2906:	6023      	str	r3, [r4, #0]
    RadioReset = rst;
    2908:	9b06      	ldr	r3, [sp, #24]
SX1280Hal::SX1280Hal( int nss, int busy, int dio1, int dio2, int dio3, int rst,  int txEnablePin, int rxEnablePin, int ledPin)
    290a:	0008      	movs	r0, r1
    RadioReset = rst;
    290c:	6263      	str	r3, [r4, #36]	; 0x24
	DIO1 = dio1;
    290e:	9b07      	ldr	r3, [sp, #28]
    2910:	7125      	strb	r5, [r4, #4]
    2912:	63a3      	str	r3, [r4, #56]	; 0x38
	TXENPIN = txEnablePin;
    2914:	9b08      	ldr	r3, [sp, #32]
		RadioPacketStatus.rxDone=false;
    2916:	7165      	strb	r5, [r4, #5]
    2918:	63e3      	str	r3, [r4, #60]	; 0x3c
	RXENPIN = rxEnablePin;
    291a:	9b09      	ldr	r3, [sp, #36]	; 0x24
		RadioPacketStatus.rxSyncWordDone=false;
    291c:	71a5      	strb	r5, [r4, #6]
    291e:	6423      	str	r3, [r4, #64]	; 0x40
		RadioPacketStatus.rxHeaderDone=false;
    2920:	71e5      	strb	r5, [r4, #7]
		RadioPacketStatus.rxError=IRQ_HEADER_NO_ERROR_CODE;	
    2922:	72a5      	strb	r5, [r4, #10]
		RadioPacketStatus.rangingDone=IRQ_RANGING_NO_ERROR_CODE;
    2924:	72e5      	strb	r5, [r4, #11]
		RadioPacketStatus.cadDone=false;
    2926:	7325      	strb	r5, [r4, #12]
		RadioPacketStatus.txTimeout=false;
    2928:	7225      	strb	r5, [r4, #8]
		RadioPacketStatus.rxTimeout=false;
    292a:	7265      	strb	r5, [r4, #9]
    292c:	7465      	strb	r5, [r4, #17]
    292e:	7726      	strb	r6, [r4, #28]
	RadioNss = nss;
    2930:	6221      	str	r1, [r4, #32]
    
    2932:	0031      	movs	r1, r6
    2934:	f005 f856 	bl	79e4 <pinMode>
	pinMode(RadioNss, OUTPUT);
    2938:	0031      	movs	r1, r6
    293a:	6a20      	ldr	r0, [r4, #32]
    293c:	f005 f89e 	bl	7a7c <digitalWrite>
    digitalWrite(RadioNss, HIGH);
    2940:	0031      	movs	r1, r6
    2942:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2944:	f005 f84e 	bl	79e4 <pinMode>
	pinMode(RadioReset, OUTPUT);
    2948:	0031      	movs	r1, r6
    294a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    294c:	f005 f896 	bl	7a7c <digitalWrite>
    digitalWrite(RadioReset, HIGH);
    2950:	0029      	movs	r1, r5
    2952:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    2954:	f005 f846 	bl	79e4 <pinMode>
	pinMode(DIO1, INPUT);
    2958:	0031      	movs	r1, r6
    295a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    295c:	f005 f842 	bl	79e4 <pinMode>
	pinMode(BUSY, INPUT);
    2960:	0029      	movs	r1, r5
    2962:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    2964:	f005 f88a 	bl	7a7c <digitalWrite>
	pinMode(TXENPIN, OUTPUT);
    2968:	0031      	movs	r1, r6
    296a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    296c:	f005 f83a 	bl	79e4 <pinMode>
    digitalWrite(TXENPIN, LOW);
    2970:	0031      	movs	r1, r6
    2972:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    2974:	f005 f882 	bl	7a7c <digitalWrite>
	pinMode(RXENPIN, OUTPUT);
    2978:	0031      	movs	r1, r6
    297a:	6c20      	ldr	r0, [r4, #64]	; 0x40
    297c:	f005 f832 	bl	79e4 <pinMode>
	digitalWrite(RXENPIN, HIGH);
    2980:	0029      	movs	r1, r5
    2982:	6c20      	ldr	r0, [r4, #64]	; 0x40
    2984:	f005 f87a 	bl	7a7c <digitalWrite>
	digitalWrite(LEDPIN, LOW);
    2988:	4803      	ldr	r0, [pc, #12]	; (2998 <_ZN9SX1280HalC1Eiiiiiiiii+0xac>)
    298a:	f005 fa63 	bl	7e54 <_ZN8SPIClass5beginEv>

    298e:	0020      	movs	r0, r4
    2990:	bd70      	pop	{r4, r5, r6, pc}
    2992:	46c0      	nop			; (mov r8, r8)
    2994:	0000d860 	.word	0x0000d860
    2998:	200009d0 	.word	0x200009d0

0000299c <_ZN9SX1280Hal6SetLedEh>:
    WaitOnBusy( );
}
    299c:	b510      	push	{r4, lr}

    299e:	6c00      	ldr	r0, [r0, #64]	; 0x40
    29a0:	f005 f86c 	bl	7a7c <digitalWrite>
void SX1280Hal::SetLed(uint8_t output){
    29a4:	bd10      	pop	{r4, pc}

000029a6 <_ZN9SX1280Hal14SetTxEnablePinEh>:
	digitalWrite(LEDPIN, output);
}
    29a6:	b510      	push	{r4, lr}

    29a8:	6b80      	ldr	r0, [r0, #56]	; 0x38
    29aa:	f005 f867 	bl	7a7c <digitalWrite>
void SX1280Hal::SetTxEnablePin(uint8_t output){
    29ae:	bd10      	pop	{r4, pc}

000029b0 <_ZN9SX1280Hal14SetRxEnablePinEh>:
	digitalWrite(TXENPIN, output);
}
    29b0:	b510      	push	{r4, lr}

    29b2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    29b4:	f005 f862 	bl	7a7c <digitalWrite>
void SX1280Hal::SetRxEnablePin(uint8_t output){
    29b8:	bd10      	pop	{r4, pc}

000029ba <_ZN9SX1280Hal15GetDioPinStatusEv>:
	digitalWrite(RXENPIN, output);
}
    29ba:	b510      	push	{r4, lr}

    29bc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    29be:	f005 f889 	bl	7ad4 <digitalRead>
    29c2:	b2c0      	uxtb	r0, r0
uint8_t SX1280Hal::GetDioPinStatus(){
    29c4:	bd10      	pop	{r4, pc}

000029c6 <_ZN6SX128018GetFirmwareVersionEv>:
    }
}

uint16_t SX1280::GetFirmwareVersion( void )
{
    return( ( ( ReadRegister( REG_LR_FIRMWARE_VERSION_MSB ) ) << 8 ) | ( ReadRegister( REG_LR_FIRMWARE_VERSION_MSB + 1 ) ) );
    29c6:	2154      	movs	r1, #84	; 0x54
    29c8:	6803      	ldr	r3, [r0, #0]
{
    29ca:	b570      	push	{r4, r5, r6, lr}
    29cc:	0005      	movs	r5, r0
    return( ( ( ReadRegister( REG_LR_FIRMWARE_VERSION_MSB ) ) << 8 ) | ( ReadRegister( REG_LR_FIRMWARE_VERSION_MSB + 1 ) ) );
    29ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    29d0:	31ff      	adds	r1, #255	; 0xff
    29d2:	4798      	blx	r3
    29d4:	21aa      	movs	r1, #170	; 0xaa
    29d6:	682b      	ldr	r3, [r5, #0]
    29d8:	0004      	movs	r4, r0
    29da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    29dc:	0028      	movs	r0, r5
    29de:	0049      	lsls	r1, r1, #1
    29e0:	4798      	blx	r3
    29e2:	0224      	lsls	r4, r4, #8
    29e4:	4320      	orrs	r0, r4
    29e6:	b280      	uxth	r0, r0
}
    29e8:	bd70      	pop	{r4, r5, r6, pc}

000029ea <_ZN6SX12809GetStatusEv>:

RadioStatus_t SX1280::GetStatus( void )
{
    29ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t stat = 0;
    29ec:	466b      	mov	r3, sp
    29ee:	1ddc      	adds	r4, r3, #7
    29f0:	2300      	movs	r3, #0
    29f2:	7023      	strb	r3, [r4, #0]
    RadioStatus_t status;

    ReadCommand( RADIO_GET_STATUS, ( uint8_t * )&stat, 1 );
    29f4:	6803      	ldr	r3, [r0, #0]
    29f6:	0022      	movs	r2, r4
    29f8:	695d      	ldr	r5, [r3, #20]
    29fa:	21c0      	movs	r1, #192	; 0xc0
    29fc:	2301      	movs	r3, #1
    29fe:	47a8      	blx	r5
    status.Value = stat;
    return( status );
    2a00:	7820      	ldrb	r0, [r4, #0]
}
    2a02:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00002a04 <_ZN6SX12809GetOpModeEv>:

RadioOperatingModes_t SX1280::GetOpMode( void )
{
    return( OperatingMode );
    2a04:	7b40      	ldrb	r0, [r0, #13]
}
    2a06:	4770      	bx	lr

00002a08 <_ZN6SX12804InitEv>:
{
    2a08:	b510      	push	{r4, lr}
    2a0a:	0004      	movs	r4, r0
    Reset( );
    2a0c:	6803      	ldr	r3, [r0, #0]
    2a0e:	689b      	ldr	r3, [r3, #8]
    2a10:	4798      	blx	r3
    Wakeup( );
    2a12:	6823      	ldr	r3, [r4, #0]
    2a14:	0020      	movs	r0, r4
    2a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2a18:	4798      	blx	r3
}
    2a1a:	bd10      	pop	{r4, pc}

00002a1c <_ZN6SX12808SetSleepE13SleepParams_t>:

void SX1280::SetSleep( SleepParams_t sleepConfig )
{
    2a1c:	b513      	push	{r0, r1, r4, lr}
    uint8_t sleep = ( sleepConfig.WakeUpRTC << 3 ) |
                    ( sleepConfig.InstructionRamRetention << 2 ) |
                    ( sleepConfig.DataBufferRetention << 1 ) |
                    ( sleepConfig.DataRamRetention );
    2a1e:	466b      	mov	r3, sp
                    ( sleepConfig.InstructionRamRetention << 2 ) |
    2a20:	078c      	lsls	r4, r1, #30
                    ( sleepConfig.DataRamRetention );
    2a22:	1dda      	adds	r2, r3, #7
    uint8_t sleep = ( sleepConfig.WakeUpRTC << 3 ) |
    2a24:	07cb      	lsls	r3, r1, #31
    2a26:	0fdb      	lsrs	r3, r3, #31
                    ( sleepConfig.InstructionRamRetention << 2 ) |
    2a28:	0fe4      	lsrs	r4, r4, #31
    2a2a:	00a4      	lsls	r4, r4, #2
    uint8_t sleep = ( sleepConfig.WakeUpRTC << 3 ) |
    2a2c:	00db      	lsls	r3, r3, #3
    2a2e:	4323      	orrs	r3, r4
                    ( sleepConfig.DataRamRetention );
    2a30:	070c      	lsls	r4, r1, #28
                    ( sleepConfig.DataBufferRetention << 1 ) |
    2a32:	0749      	lsls	r1, r1, #29
                    ( sleepConfig.DataRamRetention );
    2a34:	0fe4      	lsrs	r4, r4, #31
                    ( sleepConfig.DataBufferRetention << 1 ) |
    2a36:	0fc9      	lsrs	r1, r1, #31
    2a38:	4323      	orrs	r3, r4
    2a3a:	0049      	lsls	r1, r1, #1
    2a3c:	4319      	orrs	r1, r3
                    ( sleepConfig.DataRamRetention );
    2a3e:	7011      	strb	r1, [r2, #0]

	OperatingModeBeforeSleep = OperatingMode;
    2a40:	7b43      	ldrb	r3, [r0, #13]
    OperatingMode = MODE_SLEEP;
    WriteCommand( RADIO_SET_SLEEP, &sleep, 1 );
    2a42:	2184      	movs	r1, #132	; 0x84
	OperatingModeBeforeSleep = OperatingMode;
    2a44:	7383      	strb	r3, [r0, #14]
    OperatingMode = MODE_SLEEP;
    2a46:	2300      	movs	r3, #0
    2a48:	7343      	strb	r3, [r0, #13]
    WriteCommand( RADIO_SET_SLEEP, &sleep, 1 );
    2a4a:	6803      	ldr	r3, [r0, #0]
    2a4c:	691c      	ldr	r4, [r3, #16]
    2a4e:	2301      	movs	r3, #1
    2a50:	47a0      	blx	r4
}
    2a52:	bd13      	pop	{r0, r1, r4, pc}

00002a54 <_ZN6SX12809SetWakeupEv>:

void SX1280::SetWakeup( void )
{
	if(OperatingMode == MODE_SLEEP){
    2a54:	7b43      	ldrb	r3, [r0, #13]
{
    2a56:	b510      	push	{r4, lr}
	if(OperatingMode == MODE_SLEEP){
    2a58:	2b00      	cmp	r3, #0
    2a5a:	d104      	bne.n	2a66 <_ZN6SX12809SetWakeupEv+0x12>
		OperatingMode = OperatingModeBeforeSleep;
    2a5c:	7b83      	ldrb	r3, [r0, #14]
    2a5e:	7343      	strb	r3, [r0, #13]
		Wakeup();
    2a60:	6803      	ldr	r3, [r0, #0]
    2a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2a64:	4798      	blx	r3
	}
}
    2a66:	bd10      	pop	{r4, pc}

00002a68 <_ZN6SX128010SetStandbyE19RadioStandbyModes_t>:

void SX1280::SetStandby( RadioStandbyModes_t standbyConfig )
{
    2a68:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2a6a:	466b      	mov	r3, sp
    2a6c:	1ddd      	adds	r5, r3, #7
    2a6e:	71d9      	strb	r1, [r3, #7]
    WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
    2a70:	6803      	ldr	r3, [r0, #0]
    2a72:	002a      	movs	r2, r5
    2a74:	691e      	ldr	r6, [r3, #16]
    2a76:	2180      	movs	r1, #128	; 0x80
    2a78:	2301      	movs	r3, #1
{
    2a7a:	0004      	movs	r4, r0
    WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
    2a7c:	47b0      	blx	r6
    if( standbyConfig == STDBY_RC )
    2a7e:	782b      	ldrb	r3, [r5, #0]
    2a80:	2b00      	cmp	r3, #0
    2a82:	d102      	bne.n	2a8a <_ZN6SX128010SetStandbyE19RadioStandbyModes_t+0x22>
    {
        OperatingMode = MODE_STDBY_RC;
    2a84:	3302      	adds	r3, #2
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    2a86:	7363      	strb	r3, [r4, #13]
    }
}
    2a88:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
        OperatingMode = MODE_STDBY_XOSC;
    2a8a:	2303      	movs	r3, #3
    2a8c:	e7fb      	b.n	2a86 <_ZN6SX128010SetStandbyE19RadioStandbyModes_t+0x1e>

00002a8e <_ZN6SX128013SetPacketTypeE18RadioPacketTypes_t>:
{
    WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SX1280::SetPacketType( RadioPacketTypes_t packetType )
{
    2a8e:	b513      	push	{r0, r1, r4, lr}
    2a90:	466b      	mov	r3, sp
    2a92:	1dda      	adds	r2, r3, #7
    // Save packet type internally to avoid questioning the radio
    this->PacketType = packetType;

    WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
    2a94:	6803      	ldr	r3, [r0, #0]
{
    2a96:	7011      	strb	r1, [r2, #0]
    this->PacketType = packetType;
    2a98:	73c1      	strb	r1, [r0, #15]
    WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
    2a9a:	691c      	ldr	r4, [r3, #16]
    2a9c:	218a      	movs	r1, #138	; 0x8a
    2a9e:	2301      	movs	r3, #1
    2aa0:	47a0      	blx	r4
}
    2aa2:	bd13      	pop	{r0, r1, r4, pc}

00002aa4 <_ZN6SX128014SetRfFrequencyEm>:
    }
    return packetType;
}

void SX1280::SetRfFrequency( uint32_t rfFrequency )
{
    2aa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2aa6:	0004      	movs	r4, r0
    uint8_t buf[3];
    uint32_t freq = 0;

    freq = ( uint32_t )( ( double )rfFrequency / ( double )FREQ_STEP );
    2aa8:	0008      	movs	r0, r1
    2aaa:	f008 fb95 	bl	b1d8 <__aeabi_ui2d>
    2aae:	2200      	movs	r2, #0
    2ab0:	4b08      	ldr	r3, [pc, #32]	; (2ad4 <_ZN6SX128014SetRfFrequencyEm+0x30>)
    2ab2:	f007 f931 	bl	9d18 <__aeabi_ddiv>
    2ab6:	f005 ff0d 	bl	88d4 <__aeabi_d2uiz>
    buf[0] = ( uint8_t )( ( freq >> 16 ) & 0xFF );
    2aba:	aa01      	add	r2, sp, #4
    2abc:	0c03      	lsrs	r3, r0, #16
    2abe:	7013      	strb	r3, [r2, #0]
    buf[1] = ( uint8_t )( ( freq >> 8 ) & 0xFF );
    2ac0:	0a03      	lsrs	r3, r0, #8
    2ac2:	7053      	strb	r3, [r2, #1]
    buf[2] = ( uint8_t )( freq & 0xFF );
    WriteCommand( RADIO_SET_RFFREQUENCY, buf, 3 );
    2ac4:	6823      	ldr	r3, [r4, #0]
    buf[2] = ( uint8_t )( freq & 0xFF );
    2ac6:	7090      	strb	r0, [r2, #2]
    WriteCommand( RADIO_SET_RFFREQUENCY, buf, 3 );
    2ac8:	691d      	ldr	r5, [r3, #16]
    2aca:	2186      	movs	r1, #134	; 0x86
    2acc:	2303      	movs	r3, #3
    2ace:	0020      	movs	r0, r4
    2ad0:	47a8      	blx	r5
}
    2ad2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    2ad4:	4068cba8 	.word	0x4068cba8

00002ad8 <_ZN6SX128011SetTxParamsEa16RadioRampTimes_t>:

void SX1280::SetTxParams( int8_t power, RadioRampTimes_t rampTime )
{
    2ad8:	b537      	push	{r0, r1, r2, r4, r5, lr}

    // The power value to send on SPI/UART is in the range [0..31] and the
    // physical output power is in the range [-18..13]dBm
    buf[0] = power + 18;
    buf[1] = ( uint8_t )rampTime;
    WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
    2ada:	6803      	ldr	r3, [r0, #0]
    buf[0] = power + 18;
    2adc:	ac01      	add	r4, sp, #4
    2ade:	3112      	adds	r1, #18
    WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
    2ae0:	691d      	ldr	r5, [r3, #16]
    buf[0] = power + 18;
    2ae2:	7021      	strb	r1, [r4, #0]
    buf[1] = ( uint8_t )rampTime;
    2ae4:	7062      	strb	r2, [r4, #1]
    WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
    2ae6:	2302      	movs	r3, #2
    2ae8:	0022      	movs	r2, r4
    2aea:	218e      	movs	r1, #142	; 0x8e
    2aec:	47a8      	blx	r5
}
    2aee:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

00002af0 <_ZN6SX128022SetBufferBaseAddressesEhh>:
    WriteCommand( RADIO_SET_CADPARAMS, ( uint8_t* )&cadSymbolNum, 1 );
    OperatingMode = MODE_CAD;
}

void SX1280::SetBufferBaseAddresses( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
    2af0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t buf[2];

    buf[0] = txBaseAddress;
    buf[1] = rxBaseAddress;
    WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
    2af2:	6803      	ldr	r3, [r0, #0]
    buf[0] = txBaseAddress;
    2af4:	ac01      	add	r4, sp, #4
    WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
    2af6:	691d      	ldr	r5, [r3, #16]
    buf[0] = txBaseAddress;
    2af8:	7021      	strb	r1, [r4, #0]
    buf[1] = rxBaseAddress;
    2afa:	7062      	strb	r2, [r4, #1]
    WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
    2afc:	2302      	movs	r3, #2
    2afe:	0022      	movs	r2, r4
    2b00:	218f      	movs	r1, #143	; 0x8f
    2b02:	47a8      	blx	r5
}
    2b04:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

00002b06 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t>:

void SX1280::SetModulationParams( ModulationParams_t *modParams )
{
    2b06:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2b08:	000c      	movs	r4, r1
    uint8_t buf[3];

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( this->PacketType != modParams->PacketType )
    2b0a:	7bc3      	ldrb	r3, [r0, #15]
    2b0c:	7809      	ldrb	r1, [r1, #0]
{
    2b0e:	0005      	movs	r5, r0
    if( this->PacketType != modParams->PacketType )
    2b10:	428b      	cmp	r3, r1
    2b12:	d001      	beq.n	2b18 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0x12>
    {
        this->SetPacketType( modParams->PacketType );
    2b14:	f7ff ffbb 	bl	2a8e <_ZN6SX128013SetPacketTypeE18RadioPacketTypes_t>
    }

    switch( modParams->PacketType )
    2b18:	7820      	ldrb	r0, [r4, #0]
    2b1a:	aa01      	add	r2, sp, #4
    2b1c:	280f      	cmp	r0, #15
    2b1e:	d817      	bhi.n	2b50 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0x4a>
    2b20:	f005 fcbe 	bl	84a0 <__gnu_thumb1_case_uqi>
    2b24:	1d0f0f08 	.word	0x1d0f0f08
    2b28:	16161623 	.word	0x16161623
    2b2c:	16161616 	.word	0x16161616
    2b30:	29161616 	.word	0x29161616
    {
        case PACKET_TYPE_GFSK:
            buf[0] = modParams->Params.Gfsk.BitrateBandwidth;
    2b34:	7863      	ldrb	r3, [r4, #1]
    2b36:	7013      	strb	r3, [r2, #0]
            buf[1] = modParams->Params.Gfsk.ModulationIndex;
    2b38:	78a3      	ldrb	r3, [r4, #2]
    2b3a:	7053      	strb	r3, [r2, #1]
            buf[2] = modParams->Params.Gfsk.ModulationShaping;
    2b3c:	78e3      	ldrb	r3, [r4, #3]
            buf[2] = modParams->Params.Ble.ModulationShaping;
            break;
        case PACKET_TYPE_NONE:
            buf[0] = 0;
            buf[1] = 0;
            buf[2] = 0;
    2b3e:	7093      	strb	r3, [r2, #2]
            break;
    2b40:	e006      	b.n	2b50 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0x4a>
            buf[0] = modParams->Params.LoRa.SpreadingFactor;
    2b42:	7923      	ldrb	r3, [r4, #4]
    2b44:	7013      	strb	r3, [r2, #0]
            buf[1] = modParams->Params.LoRa.Bandwidth;
    2b46:	7963      	ldrb	r3, [r4, #5]
    2b48:	7053      	strb	r3, [r2, #1]
            buf[2] = modParams->Params.LoRa.CodingRate;
    2b4a:	79a1      	ldrb	r1, [r4, #6]
            this->LoRaBandwidth = modParams->Params.LoRa.Bandwidth;
    2b4c:	742b      	strb	r3, [r5, #16]
            buf[2] = modParams->Params.LoRa.CodingRate;
    2b4e:	7091      	strb	r1, [r2, #2]
    }
    WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, 3 );
    2b50:	682b      	ldr	r3, [r5, #0]
    2b52:	0028      	movs	r0, r5
    2b54:	691c      	ldr	r4, [r3, #16]
    2b56:	218b      	movs	r1, #139	; 0x8b
    2b58:	2303      	movs	r3, #3
    2b5a:	47a0      	blx	r4
}
    2b5c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
            buf[0] = modParams->Params.Flrc.BitrateBandwidth;
    2b5e:	79e3      	ldrb	r3, [r4, #7]
    2b60:	7013      	strb	r3, [r2, #0]
            buf[1] = modParams->Params.Flrc.CodingRate;
    2b62:	7a23      	ldrb	r3, [r4, #8]
    2b64:	7053      	strb	r3, [r2, #1]
            buf[2] = modParams->Params.Flrc.ModulationShaping;
    2b66:	7a63      	ldrb	r3, [r4, #9]
    2b68:	e7e9      	b.n	2b3e <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0x38>
            buf[0] = modParams->Params.Ble.BitrateBandwidth;
    2b6a:	7aa3      	ldrb	r3, [r4, #10]
    2b6c:	7013      	strb	r3, [r2, #0]
            buf[1] = modParams->Params.Ble.ModulationIndex;
    2b6e:	7ae3      	ldrb	r3, [r4, #11]
    2b70:	7053      	strb	r3, [r2, #1]
            buf[2] = modParams->Params.Ble.ModulationShaping;
    2b72:	7b23      	ldrb	r3, [r4, #12]
    2b74:	e7e3      	b.n	2b3e <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0x38>
            buf[0] = 0;
    2b76:	2300      	movs	r3, #0
    2b78:	7013      	strb	r3, [r2, #0]
            buf[1] = 0;
    2b7a:	7053      	strb	r3, [r2, #1]
    2b7c:	e7df      	b.n	2b3e <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0x38>

00002b7e <_ZN6SX128015SetPacketParamsEP14PacketParams_t>:

void SX1280::SetPacketParams( PacketParams_t *packetParams )
{
    2b7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2b80:	000c      	movs	r4, r1
    uint8_t buf[7];
    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( this->PacketType != packetParams->PacketType )
    2b82:	7bc3      	ldrb	r3, [r0, #15]
    2b84:	7809      	ldrb	r1, [r1, #0]
{
    2b86:	0005      	movs	r5, r0
    if( this->PacketType != packetParams->PacketType )
    2b88:	428b      	cmp	r3, r1
    2b8a:	d001      	beq.n	2b90 <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x12>
    {
        this->SetPacketType( packetParams->PacketType );
    2b8c:	f7ff ff7f 	bl	2a8e <_ZN6SX128013SetPacketTypeE18RadioPacketTypes_t>
    }

    switch( packetParams->PacketType )
    2b90:	7820      	ldrb	r0, [r4, #0]
    2b92:	280f      	cmp	r0, #15
    2b94:	d818      	bhi.n	2bc8 <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x4a>
    2b96:	f005 fc83 	bl	84a0 <__gnu_thumb1_case_uqi>
    2b9a:	1f08      	.short	0x1f08
    2b9c:	173c2d1f 	.word	0x173c2d1f
    2ba0:	17171717 	.word	0x17171717
    2ba4:	17171717 	.word	0x17171717
    2ba8:	4817      	.short	0x4817
    {
        case PACKET_TYPE_GFSK:
            buf[0] = packetParams->Params.Gfsk.PreambleLength;
    2baa:	466a      	mov	r2, sp
    2bac:	7863      	ldrb	r3, [r4, #1]
    2bae:	7013      	strb	r3, [r2, #0]
            buf[1] = packetParams->Params.Gfsk.SyncWordLength;
    2bb0:	78a3      	ldrb	r3, [r4, #2]
    2bb2:	7053      	strb	r3, [r2, #1]
            buf[2] = packetParams->Params.Gfsk.SyncWordMatch;
    2bb4:	78e3      	ldrb	r3, [r4, #3]
    2bb6:	7093      	strb	r3, [r2, #2]
            buf[3] = packetParams->Params.Gfsk.HeaderType;
    2bb8:	7923      	ldrb	r3, [r4, #4]
    2bba:	70d3      	strb	r3, [r2, #3]
            buf[4] = packetParams->Params.Gfsk.PayloadLength;
    2bbc:	7963      	ldrb	r3, [r4, #5]
    2bbe:	7113      	strb	r3, [r2, #4]
            buf[5] = packetParams->Params.Gfsk.CrcLength;
    2bc0:	79a3      	ldrb	r3, [r4, #6]
    2bc2:	7153      	strb	r3, [r2, #5]
            buf[6] = packetParams->Params.Gfsk.Whitening;
    2bc4:	79e3      	ldrb	r3, [r4, #7]
            buf[1] = 0;
            buf[2] = 0;
            buf[3] = 0;
            buf[4] = 0;
            buf[5] = 0;
            buf[6] = 0;
    2bc6:	7193      	strb	r3, [r2, #6]
            break;
    }
    WriteCommand( RADIO_SET_PACKETPARAMS, buf, 7 );
    2bc8:	682b      	ldr	r3, [r5, #0]
    2bca:	0028      	movs	r0, r5
    2bcc:	691c      	ldr	r4, [r3, #16]
    2bce:	466a      	mov	r2, sp
    2bd0:	2307      	movs	r3, #7
    2bd2:	218c      	movs	r1, #140	; 0x8c
    2bd4:	47a0      	blx	r4
}
    2bd6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
            buf[0] = packetParams->Params.LoRa.PreambleLength;
    2bd8:	466a      	mov	r2, sp
    2bda:	7a23      	ldrb	r3, [r4, #8]
    2bdc:	7013      	strb	r3, [r2, #0]
            buf[1] = packetParams->Params.LoRa.HeaderType;
    2bde:	7a63      	ldrb	r3, [r4, #9]
    2be0:	7053      	strb	r3, [r2, #1]
            buf[2] = packetParams->Params.LoRa.PayloadLength;
    2be2:	7aa3      	ldrb	r3, [r4, #10]
    2be4:	7093      	strb	r3, [r2, #2]
            buf[3] = packetParams->Params.LoRa.CrcMode;
    2be6:	7ae3      	ldrb	r3, [r4, #11]
    2be8:	70d3      	strb	r3, [r2, #3]
            buf[4] = packetParams->Params.LoRa.InvertIQ;
    2bea:	7b23      	ldrb	r3, [r4, #12]
    2bec:	7113      	strb	r3, [r2, #4]
            buf[5] = 0;
    2bee:	2300      	movs	r3, #0
            buf[5] = 0;
    2bf0:	7153      	strb	r3, [r2, #5]
    2bf2:	e7e8      	b.n	2bc6 <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x48>
            buf[0] = packetParams->Params.Flrc.PreambleLength;
    2bf4:	466a      	mov	r2, sp
    2bf6:	7b63      	ldrb	r3, [r4, #13]
    2bf8:	7013      	strb	r3, [r2, #0]
            buf[1] = packetParams->Params.Flrc.SyncWordLength;
    2bfa:	7ba3      	ldrb	r3, [r4, #14]
    2bfc:	7053      	strb	r3, [r2, #1]
            buf[2] = packetParams->Params.Flrc.SyncWordMatch;
    2bfe:	7be3      	ldrb	r3, [r4, #15]
    2c00:	7093      	strb	r3, [r2, #2]
            buf[3] = packetParams->Params.Flrc.HeaderType;
    2c02:	7c23      	ldrb	r3, [r4, #16]
    2c04:	70d3      	strb	r3, [r2, #3]
            buf[4] = packetParams->Params.Flrc.PayloadLength;
    2c06:	7c63      	ldrb	r3, [r4, #17]
    2c08:	7113      	strb	r3, [r2, #4]
            buf[5] = packetParams->Params.Flrc.CrcLength;
    2c0a:	7ca3      	ldrb	r3, [r4, #18]
    2c0c:	7153      	strb	r3, [r2, #5]
            buf[6] = packetParams->Params.Flrc.Whitening;
    2c0e:	7ce3      	ldrb	r3, [r4, #19]
    2c10:	e7d9      	b.n	2bc6 <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x48>
            buf[0] = packetParams->Params.Ble.ConnectionState;
    2c12:	466a      	mov	r2, sp
    2c14:	7d23      	ldrb	r3, [r4, #20]
    2c16:	7013      	strb	r3, [r2, #0]
            buf[1] = packetParams->Params.Ble.CrcLength;
    2c18:	7d63      	ldrb	r3, [r4, #21]
    2c1a:	7053      	strb	r3, [r2, #1]
            buf[2] = packetParams->Params.Ble.BleTestPayload;
    2c1c:	7da3      	ldrb	r3, [r4, #22]
    2c1e:	7093      	strb	r3, [r2, #2]
            buf[3] = packetParams->Params.Ble.Whitening;
    2c20:	7de3      	ldrb	r3, [r4, #23]
    2c22:	70d3      	strb	r3, [r2, #3]
            buf[4] = 0;
    2c24:	2300      	movs	r3, #0
            buf[4] = 0;
    2c26:	7113      	strb	r3, [r2, #4]
    2c28:	e7e2      	b.n	2bf0 <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x72>
            buf[0] = 0;
    2c2a:	2300      	movs	r3, #0
    2c2c:	466a      	mov	r2, sp
    2c2e:	7013      	strb	r3, [r2, #0]
            buf[1] = 0;
    2c30:	7053      	strb	r3, [r2, #1]
            buf[2] = 0;
    2c32:	7093      	strb	r3, [r2, #2]
            buf[3] = 0;
    2c34:	70d3      	strb	r3, [r2, #3]
    2c36:	e7f6      	b.n	2c26 <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0xa8>

00002c38 <_ZN6SX128017GetRxBufferStatusEPhS0_>:
{
    this->WriteRegister( REG_LR_PREAMBLELENGTH, ( this->ReadRegister( REG_LR_PREAMBLELENGTH ) & MASK_FORCE_PREAMBLELENGTH ) | preambleLength );
}

void SX1280::GetRxBufferStatus( uint8_t *rxPayloadLength, uint8_t *rxStartBufferPointer )
{
    2c38:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c3a:	0004      	movs	r4, r0
    2c3c:	b085      	sub	sp, #20
    uint8_t status[2];

    ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
    2c3e:	6803      	ldr	r3, [r0, #0]
    2c40:	ad03      	add	r5, sp, #12
{
    2c42:	9201      	str	r2, [sp, #4]
    ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
    2c44:	695f      	ldr	r7, [r3, #20]
{
    2c46:	000e      	movs	r6, r1
    ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
    2c48:	2302      	movs	r3, #2
    2c4a:	002a      	movs	r2, r5
    2c4c:	2117      	movs	r1, #23
    2c4e:	47b8      	blx	r7

    // In case of LORA fixed header, the rxPayloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( this -> GetPacketType( true ) == PACKET_TYPE_LORA ) && ( ReadRegister( REG_LR_PACKETPARAMS ) >> 7 == 1 ) )
    2c50:	7be3      	ldrb	r3, [r4, #15]
    2c52:	2b01      	cmp	r3, #1
    2c54:	d110      	bne.n	2c78 <_ZN6SX128017GetRxBufferStatusEPhS0_+0x40>
    2c56:	6823      	ldr	r3, [r4, #0]
    2c58:	490d      	ldr	r1, [pc, #52]	; (2c90 <_ZN6SX128017GetRxBufferStatusEPhS0_+0x58>)
    2c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2c5c:	0020      	movs	r0, r4
    2c5e:	4798      	blx	r3
    2c60:	11c0      	asrs	r0, r0, #7
    2c62:	2801      	cmp	r0, #1
    2c64:	d108      	bne.n	2c78 <_ZN6SX128017GetRxBufferStatusEPhS0_+0x40>
    {
        *rxPayloadLength = ReadRegister( REG_LR_PAYLOADLENGTH );
    2c66:	6823      	ldr	r3, [r4, #0]
    2c68:	490a      	ldr	r1, [pc, #40]	; (2c94 <_ZN6SX128017GetRxBufferStatusEPhS0_+0x5c>)
    2c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2c6c:	0020      	movs	r0, r4
    2c6e:	4798      	blx	r3
    2c70:	7030      	strb	r0, [r6, #0]
    2c72:	e007      	b.n	2c84 <_ZN6SX128017GetRxBufferStatusEPhS0_+0x4c>
        // so it is added there
        *rxPayloadLength = status[0] + 2;
    }
    else
    {
        *rxPayloadLength = status[0];
    2c74:	782b      	ldrb	r3, [r5, #0]
    2c76:	e004      	b.n	2c82 <_ZN6SX128017GetRxBufferStatusEPhS0_+0x4a>
    else if( this -> GetPacketType( true ) == PACKET_TYPE_BLE )
    2c78:	7be3      	ldrb	r3, [r4, #15]
    2c7a:	2b04      	cmp	r3, #4
    2c7c:	d1fa      	bne.n	2c74 <_ZN6SX128017GetRxBufferStatusEPhS0_+0x3c>
        *rxPayloadLength = status[0] + 2;
    2c7e:	782b      	ldrb	r3, [r5, #0]
    2c80:	3302      	adds	r3, #2
        *rxPayloadLength = status[0];
    2c82:	7033      	strb	r3, [r6, #0]
    }

    *rxStartBufferPointer = status[1];
    2c84:	786b      	ldrb	r3, [r5, #1]
    2c86:	9a01      	ldr	r2, [sp, #4]
    2c88:	7013      	strb	r3, [r2, #0]
}
    2c8a:	b005      	add	sp, #20
    2c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c8e:	46c0      	nop			; (mov r8, r8)
    2c90:	00000903 	.word	0x00000903
    2c94:	00000901 	.word	0x00000901

00002c98 <_ZN6SX128015GetPacketStatusEP14PacketStatus_t>:

void SX1280::GetPacketStatus( PacketStatus_t *packetStatus )
{
    2c98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2c9a:	0005      	movs	r5, r0
    2c9c:	000c      	movs	r4, r1
    uint8_t status[5];

    ReadCommand( RADIO_GET_PACKETSTATUS, status, 5 );
    2c9e:	6803      	ldr	r3, [r0, #0]
    2ca0:	466a      	mov	r2, sp
    2ca2:	695e      	ldr	r6, [r3, #20]
    2ca4:	211d      	movs	r1, #29
    2ca6:	2305      	movs	r3, #5
    2ca8:	47b0      	blx	r6
        packetType = this->PacketType;
    2caa:	7be8      	ldrb	r0, [r5, #15]

    packetStatus->packetType = this -> GetPacketType( true );
    2cac:	7020      	strb	r0, [r4, #0]
    switch( packetStatus->packetType )
    2cae:	280f      	cmp	r0, #15
    2cb0:	d85b      	bhi.n	2d6a <_ZN6SX128015GetPacketStatusEP14PacketStatus_t+0xd2>
    2cb2:	f005 fbf5 	bl	84a0 <__gnu_thumb1_case_uqi>
    2cb6:	4f08      	.short	0x4f08
    2cb8:	5aaa5e4f 	.word	0x5aaa5e4f
    2cbc:	5a5a5a5a 	.word	0x5a5a5a5a
    2cc0:	5a5a5a5a 	.word	0x5a5a5a5a
    2cc4:	e35a      	.short	0xe35a
    {
        case PACKET_TYPE_GFSK:
            packetStatus->Gfsk.RssiSync = -( status[1] / 2 );
    2cc6:	466b      	mov	r3, sp
    2cc8:	785b      	ldrb	r3, [r3, #1]

            packetStatus->Gfsk.ErrorStatus.SyncError = ( status[2] >> 6 ) & 0x01;
    2cca:	2201      	movs	r2, #1
            packetStatus->Gfsk.RssiSync = -( status[1] / 2 );
    2ccc:	085b      	lsrs	r3, r3, #1
    2cce:	425b      	negs	r3, r3
    2cd0:	7063      	strb	r3, [r4, #1]
            packetStatus->Gfsk.ErrorStatus.SyncError = ( status[2] >> 6 ) & 0x01;
    2cd2:	466b      	mov	r3, sp
    2cd4:	7898      	ldrb	r0, [r3, #2]
    2cd6:	78a3      	ldrb	r3, [r4, #2]
    2cd8:	0981      	lsrs	r1, r0, #6
    2cda:	4011      	ands	r1, r2
    2cdc:	4393      	bics	r3, r2
            packetStatus->Gfsk.ErrorStatus.LengthError = ( status[2] >> 5 ) & 0x01;
    2cde:	0945      	lsrs	r5, r0, #5
    2ce0:	4015      	ands	r5, r2
    2ce2:	430b      	orrs	r3, r1
    2ce4:	2102      	movs	r1, #2
    2ce6:	4095      	lsls	r5, r2
            packetStatus->Gfsk.ErrorStatus.CrcError = ( status[2] >> 4 ) & 0x01;
    2ce8:	0906      	lsrs	r6, r0, #4
            packetStatus->Gfsk.ErrorStatus.LengthError = ( status[2] >> 5 ) & 0x01;
    2cea:	438b      	bics	r3, r1
            packetStatus->Gfsk.ErrorStatus.CrcError = ( status[2] >> 4 ) & 0x01;
    2cec:	4016      	ands	r6, r2
    2cee:	432b      	orrs	r3, r5
    2cf0:	2504      	movs	r5, #4
    2cf2:	408e      	lsls	r6, r1
    2cf4:	43ab      	bics	r3, r5
            packetStatus->Gfsk.ErrorStatus.AbortError = ( status[2] >> 3 ) & 0x01;
    2cf6:	4333      	orrs	r3, r6
    2cf8:	2608      	movs	r6, #8
    2cfa:	08c5      	lsrs	r5, r0, #3
    2cfc:	4015      	ands	r5, r2
    2cfe:	00ed      	lsls	r5, r5, #3
    2d00:	43b3      	bics	r3, r6
            packetStatus->Gfsk.ErrorStatus.HeaderReceived = ( status[2] >> 2 ) & 0x01;
    2d02:	432b      	orrs	r3, r5
    2d04:	2510      	movs	r5, #16
    2d06:	0886      	lsrs	r6, r0, #2
    2d08:	4016      	ands	r6, r2
    2d0a:	0136      	lsls	r6, r6, #4
    2d0c:	43ab      	bics	r3, r5
            packetStatus->Gfsk.ErrorStatus.PacketReceived = ( status[2] >> 1 ) & 0x01;
    2d0e:	4333      	orrs	r3, r6
    2d10:	2620      	movs	r6, #32
    2d12:	0845      	lsrs	r5, r0, #1
    2d14:	4015      	ands	r5, r2
    2d16:	016d      	lsls	r5, r5, #5
    2d18:	43b3      	bics	r3, r6
            packetStatus->Gfsk.ErrorStatus.PacketControlerBusy = status[2] & 0x01;
    2d1a:	432b      	orrs	r3, r5
    2d1c:	2540      	movs	r5, #64	; 0x40
    2d1e:	4010      	ands	r0, r2
    2d20:	0180      	lsls	r0, r0, #6
    2d22:	43ab      	bics	r3, r5
    2d24:	4303      	orrs	r3, r0
    2d26:	70a3      	strb	r3, [r4, #2]

            packetStatus->Gfsk.TxRxStatus.RxNoAck = ( status[3] >> 5 ) & 0x01;
    2d28:	466b      	mov	r3, sp
    2d2a:	78d8      	ldrb	r0, [r3, #3]
    2d2c:	78e3      	ldrb	r3, [r4, #3]
    2d2e:	0945      	lsrs	r5, r0, #5
    2d30:	4015      	ands	r5, r2
    2d32:	4393      	bics	r3, r2
            packetStatus->Gfsk.TxRxStatus.PacketSent = status[3] & 0x01;
    2d34:	4010      	ands	r0, r2
    2d36:	432b      	orrs	r3, r5
    2d38:	4090      	lsls	r0, r2
    2d3a:	001a      	movs	r2, r3
    2d3c:	438a      	bics	r2, r1
    2d3e:	4302      	orrs	r2, r0
    2d40:	70e2      	strb	r2, [r4, #3]
            packetStatus->Ble.ErrorStatus.PacketReceived = ( status[2] >> 1 ) & 0x01;
            packetStatus->Ble.ErrorStatus.PacketControlerBusy = status[2] & 0x01;

            packetStatus->Ble.TxRxStatus.PacketSent = status[3] & 0x01;

            packetStatus->Ble.SyncAddrStatus = status[4] & 0x07;
    2d42:	466b      	mov	r3, sp
    2d44:	2107      	movs	r1, #7
    2d46:	791a      	ldrb	r2, [r3, #4]
    2d48:	7923      	ldrb	r3, [r4, #4]
    2d4a:	400a      	ands	r2, r1
    2d4c:	438b      	bics	r3, r1
    2d4e:	4313      	orrs	r3, r2
    2d50:	7123      	strb	r3, [r4, #4]
            break;
    2d52:	e00a      	b.n	2d6a <_ZN6SX128015GetPacketStatusEP14PacketStatus_t+0xd2>
            packetStatus->LoRa.RssiPkt = -( status[0] / 2 );
    2d54:	466b      	mov	r3, sp
    2d56:	781b      	ldrb	r3, [r3, #0]
    2d58:	085b      	lsrs	r3, r3, #1
    2d5a:	425b      	negs	r3, r3
    2d5c:	7063      	strb	r3, [r4, #1]
            ( status[1] < 128 ) ? ( packetStatus->LoRa.SnrPkt = status[1] / 4 ) : ( packetStatus->LoRa.SnrPkt = ( ( status[1] - 256 ) /4 ) );
    2d5e:	466b      	mov	r3, sp
    2d60:	785b      	ldrb	r3, [r3, #1]
    2d62:	2b7f      	cmp	r3, #127	; 0x7f
    2d64:	dc02      	bgt.n	2d6c <_ZN6SX128015GetPacketStatusEP14PacketStatus_t+0xd4>
    2d66:	089b      	lsrs	r3, r3, #2
    2d68:	70a3      	strb	r3, [r4, #2]
            // and reset the packet type accordingly
            memset( packetStatus, 0, sizeof( PacketStatus_t ) );
            packetStatus->packetType = PACKET_TYPE_NONE;
            break;
    }
}
    2d6a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            ( status[1] < 128 ) ? ( packetStatus->LoRa.SnrPkt = status[1] / 4 ) : ( packetStatus->LoRa.SnrPkt = ( ( status[1] - 256 ) /4 ) );
    2d6c:	3bfd      	subs	r3, #253	; 0xfd
    2d6e:	109b      	asrs	r3, r3, #2
    2d70:	e7fa      	b.n	2d68 <_ZN6SX128015GetPacketStatusEP14PacketStatus_t+0xd0>
            packetStatus->Flrc.RssiSync = -( status[1] / 2 );
    2d72:	466b      	mov	r3, sp
    2d74:	785b      	ldrb	r3, [r3, #1]
            packetStatus->Flrc.ErrorStatus.SyncError = ( status[2] >> 6 ) & 0x01;
    2d76:	2101      	movs	r1, #1
            packetStatus->Flrc.RssiSync = -( status[1] / 2 );
    2d78:	085b      	lsrs	r3, r3, #1
    2d7a:	425b      	negs	r3, r3
    2d7c:	7063      	strb	r3, [r4, #1]
            packetStatus->Flrc.ErrorStatus.SyncError = ( status[2] >> 6 ) & 0x01;
    2d7e:	466b      	mov	r3, sp
    2d80:	7898      	ldrb	r0, [r3, #2]
    2d82:	78a2      	ldrb	r2, [r4, #2]
    2d84:	0983      	lsrs	r3, r0, #6
    2d86:	400b      	ands	r3, r1
    2d88:	438a      	bics	r2, r1
            packetStatus->Flrc.ErrorStatus.LengthError = ( status[2] >> 5 ) & 0x01;
    2d8a:	431a      	orrs	r2, r3
    2d8c:	2302      	movs	r3, #2
    2d8e:	0945      	lsrs	r5, r0, #5
    2d90:	400d      	ands	r5, r1
    2d92:	408d      	lsls	r5, r1
            packetStatus->Flrc.ErrorStatus.CrcError = ( status[2] >> 4 ) & 0x01;
    2d94:	0907      	lsrs	r7, r0, #4
    2d96:	2604      	movs	r6, #4
    2d98:	400f      	ands	r7, r1
    2d9a:	409f      	lsls	r7, r3
            packetStatus->Flrc.ErrorStatus.LengthError = ( status[2] >> 5 ) & 0x01;
    2d9c:	439a      	bics	r2, r3
            packetStatus->Flrc.ErrorStatus.CrcError = ( status[2] >> 4 ) & 0x01;
    2d9e:	432a      	orrs	r2, r5
    2da0:	43b2      	bics	r2, r6
            packetStatus->Flrc.ErrorStatus.AbortError = ( status[2] >> 3 ) & 0x01;
    2da2:	433a      	orrs	r2, r7
    2da4:	2708      	movs	r7, #8
    2da6:	08c5      	lsrs	r5, r0, #3
    2da8:	400d      	ands	r5, r1
    2daa:	00ed      	lsls	r5, r5, #3
    2dac:	43ba      	bics	r2, r7
            packetStatus->Flrc.ErrorStatus.HeaderReceived = ( status[2] >> 2 ) & 0x01;
    2dae:	432a      	orrs	r2, r5
    2db0:	2510      	movs	r5, #16
    2db2:	43aa      	bics	r2, r5
    2db4:	4694      	mov	ip, r2
    2db6:	0883      	lsrs	r3, r0, #2
    2db8:	400b      	ands	r3, r1
            packetStatus->Flrc.ErrorStatus.PacketReceived = ( status[2] >> 1 ) & 0x01;
    2dba:	4665      	mov	r5, ip
            packetStatus->Flrc.ErrorStatus.HeaderReceived = ( status[2] >> 2 ) & 0x01;
    2dbc:	40b3      	lsls	r3, r6
            packetStatus->Flrc.ErrorStatus.PacketReceived = ( status[2] >> 1 ) & 0x01;
    2dbe:	432b      	orrs	r3, r5
    2dc0:	2520      	movs	r5, #32
    2dc2:	0842      	lsrs	r2, r0, #1
    2dc4:	400a      	ands	r2, r1
    2dc6:	0152      	lsls	r2, r2, #5
    2dc8:	43ab      	bics	r3, r5
            packetStatus->Flrc.ErrorStatus.PacketControlerBusy = status[2] & 0x01;
    2dca:	4313      	orrs	r3, r2
    2dcc:	2240      	movs	r2, #64	; 0x40
    2dce:	4008      	ands	r0, r1
    2dd0:	4393      	bics	r3, r2
    2dd2:	0180      	lsls	r0, r0, #6
    2dd4:	4318      	orrs	r0, r3
            packetStatus->Flrc.TxRxStatus.RxPid = ( status[3] >> 6 ) & 0x03;
    2dd6:	466b      	mov	r3, sp
            packetStatus->Flrc.ErrorStatus.PacketControlerBusy = status[2] & 0x01;
    2dd8:	70a0      	strb	r0, [r4, #2]
            packetStatus->Flrc.TxRxStatus.RxPid = ( status[3] >> 6 ) & 0x03;
    2dda:	78da      	ldrb	r2, [r3, #3]
    2ddc:	78e0      	ldrb	r0, [r4, #3]
    2dde:	3d1d      	subs	r5, #29
    2de0:	43a8      	bics	r0, r5
    2de2:	0993      	lsrs	r3, r2, #6
            packetStatus->Flrc.TxRxStatus.RxNoAck = ( status[3] >> 5 ) & 0x01;
    2de4:	0955      	lsrs	r5, r2, #5
    2de6:	400d      	ands	r5, r1
    2de8:	4303      	orrs	r3, r0
    2dea:	00ad      	lsls	r5, r5, #2
            packetStatus->Flrc.TxRxStatus.RxPidErr = ( status[3] >> 4 ) & 0x01;
    2dec:	0910      	lsrs	r0, r2, #4
            packetStatus->Flrc.TxRxStatus.RxNoAck = ( status[3] >> 5 ) & 0x01;
    2dee:	43b3      	bics	r3, r6
            packetStatus->Flrc.TxRxStatus.RxPidErr = ( status[3] >> 4 ) & 0x01;
    2df0:	4008      	ands	r0, r1
    2df2:	432b      	orrs	r3, r5
    2df4:	00c0      	lsls	r0, r0, #3
    2df6:	43bb      	bics	r3, r7
            packetStatus->Flrc.TxRxStatus.PacketSent = status[3] & 0x01;
    2df8:	4303      	orrs	r3, r0
    2dfa:	400a      	ands	r2, r1
    2dfc:	0019      	movs	r1, r3
    2dfe:	2310      	movs	r3, #16
    2e00:	40b2      	lsls	r2, r6
    2e02:	4399      	bics	r1, r3
    2e04:	4311      	orrs	r1, r2
    2e06:	70e1      	strb	r1, [r4, #3]
    2e08:	e79b      	b.n	2d42 <_ZN6SX128015GetPacketStatusEP14PacketStatus_t+0xaa>
            packetStatus->Ble.RssiSync =  -( status[1] / 2 );
    2e0a:	466b      	mov	r3, sp
    2e0c:	785b      	ldrb	r3, [r3, #1]
            packetStatus->Ble.ErrorStatus.SyncError = ( status[2] >> 6 ) & 0x01;
    2e0e:	2201      	movs	r2, #1
            packetStatus->Ble.RssiSync =  -( status[1] / 2 );
    2e10:	085b      	lsrs	r3, r3, #1
    2e12:	425b      	negs	r3, r3
    2e14:	7063      	strb	r3, [r4, #1]
            packetStatus->Ble.ErrorStatus.SyncError = ( status[2] >> 6 ) & 0x01;
    2e16:	466b      	mov	r3, sp
    2e18:	7899      	ldrb	r1, [r3, #2]
    2e1a:	78a3      	ldrb	r3, [r4, #2]
    2e1c:	098d      	lsrs	r5, r1, #6
    2e1e:	4015      	ands	r5, r2
            packetStatus->Ble.ErrorStatus.LengthError = ( status[2] >> 5 ) & 0x01;
    2e20:	0948      	lsrs	r0, r1, #5
            packetStatus->Ble.ErrorStatus.SyncError = ( status[2] >> 6 ) & 0x01;
    2e22:	4393      	bics	r3, r2
            packetStatus->Ble.ErrorStatus.LengthError = ( status[2] >> 5 ) & 0x01;
    2e24:	432b      	orrs	r3, r5
    2e26:	4010      	ands	r0, r2
    2e28:	2502      	movs	r5, #2
    2e2a:	4090      	lsls	r0, r2
    2e2c:	43ab      	bics	r3, r5
            packetStatus->Ble.ErrorStatus.CrcError = ( status[2] >> 4 ) & 0x01;
    2e2e:	4303      	orrs	r3, r0
    2e30:	2004      	movs	r0, #4
    2e32:	090d      	lsrs	r5, r1, #4
    2e34:	4015      	ands	r5, r2
    2e36:	00ad      	lsls	r5, r5, #2
    2e38:	4383      	bics	r3, r0
            packetStatus->Ble.ErrorStatus.AbortError = ( status[2] >> 3 ) & 0x01;
    2e3a:	432b      	orrs	r3, r5
    2e3c:	2508      	movs	r5, #8
    2e3e:	08c8      	lsrs	r0, r1, #3
    2e40:	4010      	ands	r0, r2
    2e42:	00c0      	lsls	r0, r0, #3
    2e44:	43ab      	bics	r3, r5
            packetStatus->Ble.ErrorStatus.HeaderReceived = ( status[2] >> 2 ) & 0x01;
    2e46:	4303      	orrs	r3, r0
    2e48:	2010      	movs	r0, #16
    2e4a:	088d      	lsrs	r5, r1, #2
    2e4c:	4015      	ands	r5, r2
    2e4e:	012d      	lsls	r5, r5, #4
    2e50:	4383      	bics	r3, r0
            packetStatus->Ble.ErrorStatus.PacketReceived = ( status[2] >> 1 ) & 0x01;
    2e52:	432b      	orrs	r3, r5
    2e54:	2520      	movs	r5, #32
    2e56:	0848      	lsrs	r0, r1, #1
    2e58:	4010      	ands	r0, r2
    2e5a:	0140      	lsls	r0, r0, #5
    2e5c:	43ab      	bics	r3, r5
            packetStatus->Ble.ErrorStatus.PacketControlerBusy = status[2] & 0x01;
    2e5e:	4303      	orrs	r3, r0
    2e60:	2040      	movs	r0, #64	; 0x40
    2e62:	4011      	ands	r1, r2
    2e64:	0189      	lsls	r1, r1, #6
    2e66:	4383      	bics	r3, r0
    2e68:	430b      	orrs	r3, r1
    2e6a:	70a3      	strb	r3, [r4, #2]
            packetStatus->Ble.TxRxStatus.PacketSent = status[3] & 0x01;
    2e6c:	466b      	mov	r3, sp
    2e6e:	78d9      	ldrb	r1, [r3, #3]
    2e70:	78e3      	ldrb	r3, [r4, #3]
    2e72:	4011      	ands	r1, r2
    2e74:	4393      	bics	r3, r2
    2e76:	430b      	orrs	r3, r1
    2e78:	70e3      	strb	r3, [r4, #3]
    2e7a:	e762      	b.n	2d42 <_ZN6SX128015GetPacketStatusEP14PacketStatus_t+0xaa>
            memset( packetStatus, 0, sizeof( PacketStatus_t ) );
    2e7c:	2205      	movs	r2, #5
    2e7e:	2100      	movs	r1, #0
    2e80:	0020      	movs	r0, r4
    2e82:	f008 fb4e 	bl	b522 <memset>
            packetStatus->packetType = PACKET_TYPE_NONE;
    2e86:	230f      	movs	r3, #15
    2e88:	7023      	strb	r3, [r4, #0]
}
    2e8a:	e76e      	b.n	2d6a <_ZN6SX128015GetPacketStatusEP14PacketStatus_t+0xd2>

00002e8c <_ZN6SX128015SetDioIrqParamsEtttt>:

    return ( int8_t ) ( -raw / 2 );
}
*/
void SX1280::SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
    2e8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
    2e8e:	466e      	mov	r6, sp
{
    2e90:	ac06      	add	r4, sp, #24
    2e92:	8824      	ldrh	r4, [r4, #0]
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
    2e94:	0a0d      	lsrs	r5, r1, #8
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
    2e96:	7071      	strb	r1, [r6, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
    2e98:	70f2      	strb	r2, [r6, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
    2e9a:	7173      	strb	r3, [r6, #5]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
    2e9c:	0a11      	lsrs	r1, r2, #8
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
    2e9e:	0a1a      	lsrs	r2, r3, #8
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
    2ea0:	0a23      	lsrs	r3, r4, #8
    2ea2:	71b3      	strb	r3, [r6, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
    WriteCommand( RADIO_SET_DIOIRQPARAMS, buf, 8 );
    2ea4:	6803      	ldr	r3, [r0, #0]
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
    2ea6:	7035      	strb	r5, [r6, #0]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
    2ea8:	70b1      	strb	r1, [r6, #2]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
    2eaa:	7132      	strb	r2, [r6, #4]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
    2eac:	71f4      	strb	r4, [r6, #7]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
    2eae:	466a      	mov	r2, sp
    WriteCommand( RADIO_SET_DIOIRQPARAMS, buf, 8 );
    2eb0:	691c      	ldr	r4, [r3, #16]
    2eb2:	218d      	movs	r1, #141	; 0x8d
    2eb4:	2308      	movs	r3, #8
    2eb6:	47a0      	blx	r4
}
    2eb8:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

00002eba <_ZN6SX128012GetIrqStatusEv>:

uint16_t SX1280::GetIrqStatus( void )
{
    2eba:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t irqStatus[2];
    ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    2ebc:	6803      	ldr	r3, [r0, #0]
    2ebe:	ac01      	add	r4, sp, #4
    2ec0:	695d      	ldr	r5, [r3, #20]
    2ec2:	0022      	movs	r2, r4
    2ec4:	2302      	movs	r3, #2
    2ec6:	2115      	movs	r1, #21
    2ec8:	47a8      	blx	r5
    return ( irqStatus[0] << 8 ) | irqStatus[1];
    2eca:	7823      	ldrb	r3, [r4, #0]
    2ecc:	7860      	ldrb	r0, [r4, #1]
    2ece:	021b      	lsls	r3, r3, #8
    2ed0:	4318      	orrs	r0, r3
}
    2ed2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00002ed4 <_ZN6SX128014ClearIrqStatusEt>:

void SX1280::ClearIrqStatus( uint16_t irqMask )
{
    2ed4:	b513      	push	{r0, r1, r4, lr}
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( ( uint16_t )irqMask >> 8 ) & 0x00FF );
    2ed6:	0a0b      	lsrs	r3, r1, #8
    2ed8:	aa01      	add	r2, sp, #4
    2eda:	7013      	strb	r3, [r2, #0]
    buf[1] = ( uint8_t )( ( uint16_t )irqMask & 0x00FF );
    WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
    2edc:	6803      	ldr	r3, [r0, #0]
    buf[1] = ( uint8_t )( ( uint16_t )irqMask & 0x00FF );
    2ede:	7051      	strb	r1, [r2, #1]
    WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
    2ee0:	691c      	ldr	r4, [r3, #16]
    2ee2:	2197      	movs	r1, #151	; 0x97
    2ee4:	2302      	movs	r3, #2
    2ee6:	47a0      	blx	r4
}
    2ee8:	bd13      	pop	{r0, r1, r4, pc}

00002eea <_ZN6SX128016SetRegulatorModeE21RadioRegulatorModes_t>:
                  ( calibParam.RC64KEnable );
    WriteCommand( RADIO_CALIBRATE, &cal, 1 );
}

void SX1280::SetRegulatorMode( RadioRegulatorModes_t mode )
{
    2eea:	b513      	push	{r0, r1, r4, lr}
    2eec:	466b      	mov	r3, sp
    2eee:	1dda      	adds	r2, r3, #7
    WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
    2ef0:	6803      	ldr	r3, [r0, #0]
{
    2ef2:	7011      	strb	r1, [r2, #0]
    WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
    2ef4:	691c      	ldr	r4, [r3, #16]
    2ef6:	2196      	movs	r1, #150	; 0x96
    2ef8:	2301      	movs	r3, #1
    2efa:	47a0      	blx	r4
}
    2efc:	bd13      	pop	{r0, r1, r4, pc}

00002efe <_ZN6SX128014SetSaveContextEv>:

void SX1280::SetSaveContext( void )
{
    WriteCommand( RADIO_SET_SAVECONTEXT, 0, 0 );
    2efe:	6803      	ldr	r3, [r0, #0]
{
    2f00:	b510      	push	{r4, lr}
    WriteCommand( RADIO_SET_SAVECONTEXT, 0, 0 );
    2f02:	691c      	ldr	r4, [r3, #16]
    2f04:	2300      	movs	r3, #0
    2f06:	21d5      	movs	r1, #213	; 0xd5
    2f08:	001a      	movs	r2, r3
    2f0a:	47a0      	blx	r4
}
    2f0c:	bd10      	pop	{r4, pc}

00002f0e <_ZN6SX128010SetPayloadEPhhh>:
{
    WriteCommand( RADIO_SET_LONGPREAMBLE, ( uint8_t * )&enable, 1 );
}

void SX1280::SetPayload( uint8_t *buffer, uint8_t size, uint8_t offset )
{
    2f0e:	b570      	push	{r4, r5, r6, lr}
    2f10:	000d      	movs	r5, r1
    2f12:	0019      	movs	r1, r3
    WriteBuffer( offset, buffer, size );
    2f14:	6803      	ldr	r3, [r0, #0]
    2f16:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    2f18:	0013      	movs	r3, r2
    2f1a:	002a      	movs	r2, r5
    2f1c:	47a0      	blx	r4
}
    2f1e:	bd70      	pop	{r4, r5, r6, pc}

00002f20 <_ZN6SX128010GetPayloadEPhS0_h>:

uint8_t SX1280::GetPayload( uint8_t *buffer, uint8_t *size , uint8_t maxSize )
{
    2f20:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f22:	0016      	movs	r6, r2
    2f24:	b085      	sub	sp, #20
    2f26:	9301      	str	r3, [sp, #4]
    uint8_t offset;

    GetRxBufferStatus( size, &offset );
    2f28:	ab02      	add	r3, sp, #8
    2f2a:	1ddd      	adds	r5, r3, #7
    2f2c:	002a      	movs	r2, r5
{
    2f2e:	000f      	movs	r7, r1
    GetRxBufferStatus( size, &offset );
    2f30:	0031      	movs	r1, r6
{
    2f32:	0004      	movs	r4, r0
    GetRxBufferStatus( size, &offset );
    2f34:	f7ff fe80 	bl	2c38 <_ZN6SX128017GetRxBufferStatusEPhS0_>
    if( *size > maxSize )
    2f38:	7833      	ldrb	r3, [r6, #0]
    2f3a:	9a01      	ldr	r2, [sp, #4]
    {
        return 1;
    2f3c:	2001      	movs	r0, #1
    if( *size > maxSize )
    2f3e:	4293      	cmp	r3, r2
    2f40:	dc06      	bgt.n	2f50 <_ZN6SX128010GetPayloadEPhS0_h+0x30>
    }
    ReadBuffer( offset, buffer, *size );
    2f42:	6822      	ldr	r2, [r4, #0]
    2f44:	7829      	ldrb	r1, [r5, #0]
    2f46:	0020      	movs	r0, r4
    2f48:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
    2f4a:	003a      	movs	r2, r7
    2f4c:	47a8      	blx	r5
    return 0;
    2f4e:	2000      	movs	r0, #0
}
    2f50:	b005      	add	sp, #20
    2f52:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002f54 <_ZN6SX128014SetRangingRoleE19RadioRangingRoles_t>:
    // Silently set 8 as minimum value
    WriteRegister( REG_LR_RANGINGFILTERWINDOWSIZE, ( num < DEFAULT_RANGING_FILTER_SIZE ) ? DEFAULT_RANGING_FILTER_SIZE : num );
}

void SX1280::SetRangingRole( RadioRangingRoles_t role )
{
    2f54:	b513      	push	{r0, r1, r4, lr}
    uint8_t buf[1];

    buf[0] = role;
    WriteCommand( RADIO_SET_RANGING_ROLE, &buf[0], 1 );
    2f56:	6803      	ldr	r3, [r0, #0]
    buf[0] = role;
    2f58:	aa01      	add	r2, sp, #4
    2f5a:	7011      	strb	r1, [r2, #0]
    WriteCommand( RADIO_SET_RANGING_ROLE, &buf[0], 1 );
    2f5c:	691c      	ldr	r4, [r3, #16]
    2f5e:	21a3      	movs	r1, #163	; 0xa3
    2f60:	2301      	movs	r3, #1
    2f62:	47a0      	blx	r4
}
    2f64:	bd13      	pop	{r0, r1, r4, pc}
	...

00002f68 <_ZN6SX12805SetTxE10TickTime_s>:
{
    2f68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    2f6a:	000b      	movs	r3, r1
    2f6c:	0004      	movs	r4, r0
    2f6e:	9101      	str	r1, [sp, #4]
    buf[0] = timeout.PeriodBase;
    2f70:	ad03      	add	r5, sp, #12
    2f72:	0c09      	lsrs	r1, r1, #16
    2f74:	702b      	strb	r3, [r5, #0]
    buf[2] = ( uint8_t )( timeout.PeriodBaseCount & 0x00FF );
    2f76:	70a9      	strb	r1, [r5, #2]
    buf[1] = ( uint8_t )( ( timeout.PeriodBaseCount >> 8 ) & 0x00FF );
    2f78:	0a0b      	lsrs	r3, r1, #8
    ClearIrqStatus( IRQ_RADIO_ALL );
    2f7a:	490a      	ldr	r1, [pc, #40]	; (2fa4 <_ZN6SX12805SetTxE10TickTime_s+0x3c>)
    buf[1] = ( uint8_t )( ( timeout.PeriodBaseCount >> 8 ) & 0x00FF );
    2f7c:	706b      	strb	r3, [r5, #1]
    ClearIrqStatus( IRQ_RADIO_ALL );
    2f7e:	f7ff ffa9 	bl	2ed4 <_ZN6SX128014ClearIrqStatusEt>
    if( GetPacketType( true ) == PACKET_TYPE_RANGING )
    2f82:	7be3      	ldrb	r3, [r4, #15]
    2f84:	2b02      	cmp	r3, #2
    2f86:	d103      	bne.n	2f90 <_ZN6SX12805SetTxE10TickTime_s+0x28>
        SetRangingRole( RADIO_RANGING_ROLE_MASTER );
    2f88:	2101      	movs	r1, #1
    2f8a:	0020      	movs	r0, r4
    2f8c:	f7ff ffe2 	bl	2f54 <_ZN6SX128014SetRangingRoleE19RadioRangingRoles_t>
    WriteCommand( RADIO_SET_TX, buf, 3 );
    2f90:	6823      	ldr	r3, [r4, #0]
    2f92:	002a      	movs	r2, r5
    2f94:	691e      	ldr	r6, [r3, #16]
    2f96:	2183      	movs	r1, #131	; 0x83
    2f98:	2303      	movs	r3, #3
    2f9a:	0020      	movs	r0, r4
    2f9c:	47b0      	blx	r6
    OperatingMode = MODE_TX;
    2f9e:	2306      	movs	r3, #6
    2fa0:	7363      	strb	r3, [r4, #13]
}
    2fa2:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    2fa4:	0000ffff 	.word	0x0000ffff

00002fa8 <_ZN6SX128011SendPayloadEPhh10TickTime_sh>:
{
    2fa8:	b513      	push	{r0, r1, r4, lr}
    2faa:	0004      	movs	r4, r0
    2fac:	9301      	str	r3, [sp, #4]
    2fae:	ab04      	add	r3, sp, #16
    2fb0:	781b      	ldrb	r3, [r3, #0]
    SetPayload( payload, size, offset );
    2fb2:	f7ff ffac 	bl	2f0e <_ZN6SX128010SetPayloadEPhhh>
    SetTx( timeout );
    2fb6:	9901      	ldr	r1, [sp, #4]
    2fb8:	0020      	movs	r0, r4
    2fba:	f7ff ffd5 	bl	2f68 <_ZN6SX12805SetTxE10TickTime_s>
}
    2fbe:	bd13      	pop	{r0, r1, r4, pc}

00002fc0 <_ZN6SX12805SetRxE10TickTime_s>:
{
    2fc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    2fc2:	000b      	movs	r3, r1
    2fc4:	0004      	movs	r4, r0
    2fc6:	9101      	str	r1, [sp, #4]
    buf[0] = timeout.PeriodBase;
    2fc8:	ad03      	add	r5, sp, #12
    2fca:	0c09      	lsrs	r1, r1, #16
    2fcc:	702b      	strb	r3, [r5, #0]
    buf[2] = ( uint8_t )( timeout.PeriodBaseCount & 0x00FF );
    2fce:	70a9      	strb	r1, [r5, #2]
    buf[1] = ( uint8_t )( ( timeout.PeriodBaseCount >> 8 ) & 0x00FF );
    2fd0:	0a0b      	lsrs	r3, r1, #8
    ClearIrqStatus( IRQ_RADIO_ALL );
    2fd2:	490a      	ldr	r1, [pc, #40]	; (2ffc <_ZN6SX12805SetRxE10TickTime_s+0x3c>)
    buf[1] = ( uint8_t )( ( timeout.PeriodBaseCount >> 8 ) & 0x00FF );
    2fd4:	706b      	strb	r3, [r5, #1]
    ClearIrqStatus( IRQ_RADIO_ALL );
    2fd6:	f7ff ff7d 	bl	2ed4 <_ZN6SX128014ClearIrqStatusEt>
    if( GetPacketType( true ) == PACKET_TYPE_RANGING )
    2fda:	7be3      	ldrb	r3, [r4, #15]
    2fdc:	2b02      	cmp	r3, #2
    2fde:	d103      	bne.n	2fe8 <_ZN6SX12805SetRxE10TickTime_s+0x28>
        SetRangingRole( RADIO_RANGING_ROLE_SLAVE );
    2fe0:	2100      	movs	r1, #0
    2fe2:	0020      	movs	r0, r4
    2fe4:	f7ff ffb6 	bl	2f54 <_ZN6SX128014SetRangingRoleE19RadioRangingRoles_t>
    WriteCommand( RADIO_SET_RX, buf, 3 );
    2fe8:	6823      	ldr	r3, [r4, #0]
    2fea:	002a      	movs	r2, r5
    2fec:	691e      	ldr	r6, [r3, #16]
    2fee:	2182      	movs	r1, #130	; 0x82
    2ff0:	2303      	movs	r3, #3
    2ff2:	0020      	movs	r0, r4
    2ff4:	47b0      	blx	r6
    OperatingMode = MODE_RX;
    2ff6:	2305      	movs	r3, #5
    2ff8:	7363      	strb	r3, [r4, #13]
}
    2ffa:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    2ffc:	0000ffff 	.word	0x0000ffff

00003000 <_ZN6SX128017ClearPacketStatusEv>:
}
*/

void SX1280::ClearPacketStatus( void )
{
	RadioPacketStatus.txDone=false;
    3000:	2300      	movs	r3, #0
    3002:	7103      	strb	r3, [r0, #4]
	RadioPacketStatus.rxDone=false;
    3004:	7143      	strb	r3, [r0, #5]
	RadioPacketStatus.rxSyncWordDone=false;
    3006:	7183      	strb	r3, [r0, #6]
	RadioPacketStatus.rxHeaderDone=false;
    3008:	71c3      	strb	r3, [r0, #7]
	RadioPacketStatus.rxError=IRQ_HEADER_NO_ERROR_CODE;	
    300a:	7283      	strb	r3, [r0, #10]
	RadioPacketStatus.rangingDone=IRQ_RANGING_NO_ERROR_CODE;
    300c:	72c3      	strb	r3, [r0, #11]
	RadioPacketStatus.cadDone=false;
    300e:	7303      	strb	r3, [r0, #12]
	RadioPacketStatus.txTimeout=false;
    3010:	7203      	strb	r3, [r0, #8]
	RadioPacketStatus.rxTimeout=false;
    3012:	7243      	strb	r3, [r0, #9]
}
    3014:	4770      	bx	lr
	...

00003018 <_ZN6SX128011ProcessIrqsEv>:

void SX1280::ProcessIrqs( void )
{
    3018:	b570      	push	{r4, r5, r6, lr}
    301a:	0004      	movs	r4, r0
        packetType = this->PacketType;
    301c:	7bc6      	ldrb	r6, [r0, #15]
            return;
        }
    }
*/
    packetType = GetPacketType( true );
    uint16_t irqRegs = GetIrqStatus( );
    301e:	f7ff ff4c 	bl	2eba <_ZN6SX128012GetIrqStatusEv>
	//Serial.println("IRQ Register Status: " + String(irqRegs));
    ClearIrqStatus( IRQ_RADIO_ALL );
    3022:	4949      	ldr	r1, [pc, #292]	; (3148 <_ZN6SX128011ProcessIrqsEv+0x130>)
    uint16_t irqRegs = GetIrqStatus( );
    3024:	0005      	movs	r5, r0
    ClearIrqStatus( IRQ_RADIO_ALL );
    3026:	0020      	movs	r0, r4
    3028:	f7ff ff54 	bl	2ed4 <_ZN6SX128014ClearIrqStatusEt>
	ClearPacketStatus();
    302c:	0020      	movs	r0, r4
    302e:	f7ff ffe7 	bl	3000 <_ZN6SX128017ClearPacketStatusEv>
    }
    TEST_PIN_1 = 0;
    TEST_PIN_2 = 0;
#endif
*/
    switch( packetType )
    3032:	2e04      	cmp	r6, #4
    3034:	d80b      	bhi.n	304e <_ZN6SX128011ProcessIrqsEv+0x36>
    3036:	0030      	movs	r0, r6
    3038:	7b63      	ldrb	r3, [r4, #13]
                    // Unexpected IRQ: silently returns
                    break;
            }
            break;
        case PACKET_TYPE_RANGING:
            switch( OperatingMode )
    303a:	b2db      	uxtb	r3, r3
    switch( packetType )
    303c:	f005 fa30 	bl	84a0 <__gnu_thumb1_case_uqi>
    3040:	035d2d03 	.word	0x035d2d03
    3044:	03          	.byte	0x03
    3045:	00          	.byte	0x00
            switch( OperatingMode )
    3046:	2b05      	cmp	r3, #5
    3048:	d002      	beq.n	3050 <_ZN6SX128011ProcessIrqsEv+0x38>
    304a:	2b06      	cmp	r3, #6
    304c:	d01c      	beq.n	3088 <_ZN6SX128011ProcessIrqsEv+0x70>
            break;
        default:
            // Unexpected IRQ: silently returns
            break;
    }
}
    304e:	bd70      	pop	{r4, r5, r6, pc}
                    if( ( irqRegs & IRQ_RX_DONE ) == IRQ_RX_DONE )
    3050:	2302      	movs	r3, #2
    3052:	421d      	tst	r5, r3
    3054:	d003      	beq.n	305e <_ZN6SX128011ProcessIrqsEv+0x46>
                        if( ( irqRegs & IRQ_CRC_ERROR ) == IRQ_CRC_ERROR )
    3056:	066a      	lsls	r2, r5, #25
    3058:	d511      	bpl.n	307e <_ZN6SX128011ProcessIrqsEv+0x66>
							RadioPacketStatus.rxError=IRQ_CRC_ERROR_CODE;
    305a:	3301      	adds	r3, #1
							RadioPacketStatus.rxError=IRQ_SYNCWORD_ERROR_CODE;
    305c:	72a3      	strb	r3, [r4, #10]
                    if( ( irqRegs & IRQ_SYNCWORD_VALID ) == IRQ_SYNCWORD_VALID )
    305e:	076b      	lsls	r3, r5, #29
    3060:	d501      	bpl.n	3066 <_ZN6SX128011ProcessIrqsEv+0x4e>
						RadioPacketStatus.rxSyncWordDone=true;
    3062:	2301      	movs	r3, #1
    3064:	71a3      	strb	r3, [r4, #6]
                    if( ( irqRegs & IRQ_SYNCWORD_ERROR ) == IRQ_SYNCWORD_ERROR )
    3066:	072b      	lsls	r3, r5, #28
    3068:	d501      	bpl.n	306e <_ZN6SX128011ProcessIrqsEv+0x56>
                        RadioPacketStatus.rxError=IRQ_SYNCWORD_ERROR_CODE;
    306a:	2302      	movs	r3, #2
    306c:	72a3      	strb	r3, [r4, #10]
    306e:	2301      	movs	r3, #1
                    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
    3070:	046a      	lsls	r2, r5, #17
    3072:	d500      	bpl.n	3076 <_ZN6SX128011ProcessIrqsEv+0x5e>
						RadioPacketStatus.rxTimeout=true;
    3074:	7263      	strb	r3, [r4, #9]
                    if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
    3076:	421d      	tst	r5, r3
    3078:	d0e9      	beq.n	304e <_ZN6SX128011ProcessIrqsEv+0x36>
						RadioPacketStatus.txDone=true;
    307a:	7123      	strb	r3, [r4, #4]
    307c:	e7e7      	b.n	304e <_ZN6SX128011ProcessIrqsEv+0x36>
                        else if( ( irqRegs & IRQ_SYNCWORD_ERROR ) == IRQ_SYNCWORD_ERROR )
    307e:	072a      	lsls	r2, r5, #28
    3080:	d4ec      	bmi.n	305c <_ZN6SX128011ProcessIrqsEv+0x44>
							RadioPacketStatus.rxDone=true;
    3082:	2301      	movs	r3, #1
    3084:	7163      	strb	r3, [r4, #5]
    3086:	e7ea      	b.n	305e <_ZN6SX128011ProcessIrqsEv+0x46>
                    if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
    3088:	2301      	movs	r3, #1
    308a:	421d      	tst	r5, r3
    308c:	d000      	beq.n	3090 <_ZN6SX128011ProcessIrqsEv+0x78>
						RadioPacketStatus.txDone=true;
    308e:	7123      	strb	r3, [r4, #4]
                    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
    3090:	046b      	lsls	r3, r5, #17
    3092:	d5dc      	bpl.n	304e <_ZN6SX128011ProcessIrqsEv+0x36>
						RadioPacketStatus.txTimeout=true;
    3094:	2301      	movs	r3, #1
    3096:	7223      	strb	r3, [r4, #8]
    3098:	e7d9      	b.n	304e <_ZN6SX128011ProcessIrqsEv+0x36>
            switch( OperatingMode )
    309a:	2b06      	cmp	r3, #6
    309c:	d0f4      	beq.n	3088 <_ZN6SX128011ProcessIrqsEv+0x70>
    309e:	2b07      	cmp	r3, #7
    30a0:	d01b      	beq.n	30da <_ZN6SX128011ProcessIrqsEv+0xc2>
    30a2:	2b05      	cmp	r3, #5
    30a4:	d1d3      	bne.n	304e <_ZN6SX128011ProcessIrqsEv+0x36>
                    if( ( irqRegs & IRQ_RX_DONE ) == IRQ_RX_DONE )
    30a6:	07ab      	lsls	r3, r5, #30
    30a8:	d503      	bpl.n	30b2 <_ZN6SX128011ProcessIrqsEv+0x9a>
                        if( ( irqRegs & IRQ_CRC_ERROR ) == IRQ_CRC_ERROR )
    30aa:	066b      	lsls	r3, r5, #25
    30ac:	d512      	bpl.n	30d4 <_ZN6SX128011ProcessIrqsEv+0xbc>
							RadioPacketStatus.rxError=IRQ_CRC_ERROR_CODE;
    30ae:	2303      	movs	r3, #3
    30b0:	72a3      	strb	r3, [r4, #10]
                    if( ( irqRegs & IRQ_HEADER_VALID ) == IRQ_HEADER_VALID )
    30b2:	06eb      	lsls	r3, r5, #27
    30b4:	d501      	bpl.n	30ba <_ZN6SX128011ProcessIrqsEv+0xa2>
						RadioPacketStatus.rxHeaderDone=true;
    30b6:	2301      	movs	r3, #1
    30b8:	71e3      	strb	r3, [r4, #7]
                    if( ( irqRegs & IRQ_HEADER_ERROR ) == IRQ_HEADER_ERROR )
    30ba:	06ab      	lsls	r3, r5, #26
    30bc:	d501      	bpl.n	30c2 <_ZN6SX128011ProcessIrqsEv+0xaa>
						RadioPacketStatus.rxError=IRQ_HEADER_ERROR_CODE;
    30be:	2301      	movs	r3, #1
    30c0:	72a3      	strb	r3, [r4, #10]
                    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
    30c2:	046b      	lsls	r3, r5, #17
    30c4:	d501      	bpl.n	30ca <_ZN6SX128011ProcessIrqsEv+0xb2>
						RadioPacketStatus.rxTimeout=true;
    30c6:	2301      	movs	r3, #1
    30c8:	7263      	strb	r3, [r4, #9]
                    if( ( irqRegs & IRQ_RANGING_SLAVE_REQUEST_DISCARDED ) == IRQ_RANGING_SLAVE_REQUEST_DISCARDED )
    30ca:	05eb      	lsls	r3, r5, #23
    30cc:	d5bf      	bpl.n	304e <_ZN6SX128011ProcessIrqsEv+0x36>
						RadioPacketStatus.rxError=IRQ_RANGING_ON_LORA_ERROR_CODE;
    30ce:	2304      	movs	r3, #4
						RadioPacketStatus.rxError=IRQ_HEADER_ERROR_CODE;
    30d0:	72a3      	strb	r3, [r4, #10]
    30d2:	e7bc      	b.n	304e <_ZN6SX128011ProcessIrqsEv+0x36>
							RadioPacketStatus.rxDone=true;
    30d4:	2301      	movs	r3, #1
    30d6:	7163      	strb	r3, [r4, #5]
    30d8:	e7eb      	b.n	30b2 <_ZN6SX128011ProcessIrqsEv+0x9a>
                    if( ( irqRegs & IRQ_CAD_DONE ) == IRQ_CAD_DONE )
    30da:	04eb      	lsls	r3, r5, #19
    30dc:	d508      	bpl.n	30f0 <_ZN6SX128011ProcessIrqsEv+0xd8>
                        if( ( irqRegs & IRQ_CAD_DETECTED ) == IRQ_CAD_DETECTED )
    30de:	2380      	movs	r3, #128	; 0x80
    30e0:	019b      	lsls	r3, r3, #6
    30e2:	401d      	ands	r5, r3
    30e4:	d002      	beq.n	30ec <_ZN6SX128011ProcessIrqsEv+0xd4>
							RadioPacketStatus.cadDone=true;
    30e6:	2301      	movs	r3, #1
    30e8:	7323      	strb	r3, [r4, #12]
    30ea:	e7b0      	b.n	304e <_ZN6SX128011ProcessIrqsEv+0x36>
							RadioPacketStatus.cadDone=false;
    30ec:	7325      	strb	r5, [r4, #12]
    30ee:	e7ae      	b.n	304e <_ZN6SX128011ProcessIrqsEv+0x36>
                    else if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
    30f0:	046b      	lsls	r3, r5, #17
    30f2:	d5ac      	bpl.n	304e <_ZN6SX128011ProcessIrqsEv+0x36>
						RadioPacketStatus.rxTimeout=true;
    30f4:	2301      	movs	r3, #1
    30f6:	7263      	strb	r3, [r4, #9]
    30f8:	e7a9      	b.n	304e <_ZN6SX128011ProcessIrqsEv+0x36>
            switch( OperatingMode )
    30fa:	2b05      	cmp	r3, #5
    30fc:	d00a      	beq.n	3114 <_ZN6SX128011ProcessIrqsEv+0xfc>
    30fe:	2b06      	cmp	r3, #6
    3100:	d1a5      	bne.n	304e <_ZN6SX128011ProcessIrqsEv+0x36>
                    if( ( irqRegs & IRQ_RANGING_MASTER_TIMEOUT ) == IRQ_RANGING_MASTER_TIMEOUT )
    3102:	056b      	lsls	r3, r5, #21
    3104:	d501      	bpl.n	310a <_ZN6SX128011ProcessIrqsEv+0xf2>
						RadioPacketStatus.rangingDone=IRQ_RANGING_MASTER_ERROR_CODE;
    3106:	2303      	movs	r3, #3
    3108:	72e3      	strb	r3, [r4, #11]
                    if( ( irqRegs & IRQ_RANGING_MASTER_RESULT_VALID ) == IRQ_RANGING_MASTER_RESULT_VALID )
    310a:	05ab      	lsls	r3, r5, #22
    310c:	d59f      	bpl.n	304e <_ZN6SX128011ProcessIrqsEv+0x36>
						RadioPacketStatus.rangingDone=IRQ_RANGING_MASTER_VALID_CODE;
    310e:	2304      	movs	r3, #4
    3110:	72e3      	strb	r3, [r4, #11]
}
    3112:	e79c      	b.n	304e <_ZN6SX128011ProcessIrqsEv+0x36>
                    if( ( irqRegs & IRQ_RANGING_SLAVE_REQUEST_DISCARDED ) == IRQ_RANGING_SLAVE_REQUEST_DISCARDED )
    3114:	05eb      	lsls	r3, r5, #23
    3116:	d501      	bpl.n	311c <_ZN6SX128011ProcessIrqsEv+0x104>
						RadioPacketStatus.rangingDone=IRQ_RANGING_SLAVE_ERROR_CODE;
    3118:	2301      	movs	r3, #1
    311a:	72e3      	strb	r3, [r4, #11]
                    if( ( irqRegs & IRQ_RANGING_SLAVE_REQUEST_VALID ) == IRQ_RANGING_SLAVE_REQUEST_VALID )
    311c:	052b      	lsls	r3, r5, #20
    311e:	d501      	bpl.n	3124 <_ZN6SX128011ProcessIrqsEv+0x10c>
						RadioPacketStatus.rangingDone=IRQ_RANGING_SLAVE_VALID_CODE;
    3120:	2302      	movs	r3, #2
    3122:	72e3      	strb	r3, [r4, #11]
                    if( ( irqRegs & IRQ_RANGING_SLAVE_RESPONSE_DONE ) == IRQ_RANGING_SLAVE_RESPONSE_DONE )
    3124:	062b      	lsls	r3, r5, #24
    3126:	d501      	bpl.n	312c <_ZN6SX128011ProcessIrqsEv+0x114>
						RadioPacketStatus.rangingDone=IRQ_RANGING_SLAVE_VALID_CODE;
    3128:	2302      	movs	r3, #2
    312a:	72e3      	strb	r3, [r4, #11]
                    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
    312c:	046b      	lsls	r3, r5, #17
    312e:	d501      	bpl.n	3134 <_ZN6SX128011ProcessIrqsEv+0x11c>
						RadioPacketStatus.rangingDone=IRQ_RANGING_SLAVE_ERROR_CODE;
    3130:	2301      	movs	r3, #1
    3132:	72e3      	strb	r3, [r4, #11]
                    if( ( irqRegs & IRQ_HEADER_VALID ) == IRQ_HEADER_VALID )
    3134:	06eb      	lsls	r3, r5, #27
    3136:	d501      	bpl.n	313c <_ZN6SX128011ProcessIrqsEv+0x124>
						RadioPacketStatus.rxHeaderDone=true;
    3138:	2301      	movs	r3, #1
    313a:	71e3      	strb	r3, [r4, #7]
                    if( ( irqRegs & IRQ_HEADER_ERROR ) == IRQ_HEADER_ERROR )
    313c:	06ab      	lsls	r3, r5, #26
    313e:	d400      	bmi.n	3142 <_ZN6SX128011ProcessIrqsEv+0x12a>
    3140:	e785      	b.n	304e <_ZN6SX128011ProcessIrqsEv+0x36>
						RadioPacketStatus.rxError=IRQ_HEADER_ERROR_CODE;
    3142:	2301      	movs	r3, #1
    3144:	e7c4      	b.n	30d0 <_ZN6SX128011ProcessIrqsEv+0xb8>
    3146:	46c0      	nop			; (mov r8, r8)
    3148:	0000ffff 	.word	0x0000ffff

0000314c <_ZN16FrSkySportSensor4sendER26FrSkySportSingleWireSerialhm>:
*/

#include "FrSkySportSensor.h" 

FrSkySportSensor::FrSkySportSensor(SensorId id) : sensorId(id), sensorDataIdx(0) {}
void FrSkySportSensor::send(FrSkySportSingleWireSerial& serial, uint8_t id, uint32_t now) { }
    314c:	4770      	bx	lr

0000314e <_ZN16FrSkySportSensor10decodeDataEhtm>:
uint16_t FrSkySportSensor::decodeData(uint8_t id, uint16_t appId, uint32_t data) { return SENSOR_NO_DATA_ID; }
    314e:	2000      	movs	r0, #0
    3150:	4770      	bx	lr
	...

00003154 <_ZN16FrSkySportSensorC1ENS_8SensorIdE>:
FrSkySportSensor::FrSkySportSensor(SensorId id) : sensorId(id), sensorDataIdx(0) {}
    3154:	4b03      	ldr	r3, [pc, #12]	; (3164 <_ZN16FrSkySportSensorC1ENS_8SensorIdE+0x10>)
    3156:	7101      	strb	r1, [r0, #4]
    3158:	3308      	adds	r3, #8
    315a:	6003      	str	r3, [r0, #0]
    315c:	2300      	movs	r3, #0
    315e:	7143      	strb	r3, [r0, #5]
    3160:	4770      	bx	lr
    3162:	46c0      	nop			; (mov r8, r8)
    3164:	0000d8a4 	.word	0x0000d8a4

00003168 <_ZN19FrSkySportSensorGps10decodeDataEhtm>:
    if(sensorDataIdx >= GPS_DATA_COUNT) sensorDataIdx = 0;
  }
}

uint16_t FrSkySportSensorGps::decodeData(uint8_t id, uint16_t appId, uint32_t data)
{
    3168:	b570      	push	{r4, r5, r6, lr}
    316a:	001d      	movs	r5, r3
  if((sensorId == id) || (sensorId == FrSkySportSensor::ID_IGNORE))
    316c:	7903      	ldrb	r3, [r0, #4]
{
    316e:	0004      	movs	r4, r0
    3170:	0016      	movs	r6, r2
  if((sensorId == id) || (sensorId == FrSkySportSensor::ID_IGNORE))
    3172:	428b      	cmp	r3, r1
    3174:	d001      	beq.n	317a <_ZN19FrSkySportSensorGps10decodeDataEhtm+0x12>
    3176:	2bff      	cmp	r3, #255	; 0xff
    3178:	d10a      	bne.n	3190 <_ZN19FrSkySportSensorGps10decodeDataEhtm+0x28>
  {
    switch(appId)
    317a:	2383      	movs	r3, #131	; 0x83
    317c:	011b      	lsls	r3, r3, #4
    317e:	429e      	cmp	r6, r3
    3180:	d043      	beq.n	320a <_ZN19FrSkySportSensorGps10decodeDataEhtm+0xa2>
    3182:	d807      	bhi.n	3194 <_ZN19FrSkySportSensorGps10decodeDataEhtm+0x2c>
    3184:	3b30      	subs	r3, #48	; 0x30
    3186:	429e      	cmp	r6, r3
    3188:	d01a      	beq.n	31c0 <_ZN19FrSkySportSensorGps10decodeDataEhtm+0x58>
    318a:	3320      	adds	r3, #32
    318c:	429e      	cmp	r6, r3
    318e:	d031      	beq.n	31f4 <_ZN19FrSkySportSensorGps10decodeDataEhtm+0x8c>
          data >>= 8; hour = data & 0xFF;
        }
        return appId;
    }
  }
  return SENSOR_NO_DATA_ID;
    3190:	2600      	movs	r6, #0
    3192:	e02b      	b.n	31ec <_ZN19FrSkySportSensorGps10decodeDataEhtm+0x84>
    switch(appId)
    3194:	2384      	movs	r3, #132	; 0x84
    3196:	011b      	lsls	r3, r3, #4
    3198:	429e      	cmp	r6, r3
    319a:	d041      	beq.n	3220 <_ZN19FrSkySportSensorGps10decodeDataEhtm+0xb8>
    319c:	3310      	adds	r3, #16
    319e:	429e      	cmp	r6, r3
    31a0:	d1f6      	bne.n	3190 <_ZN19FrSkySportSensorGps10decodeDataEhtm+0x28>
        if((data & 0xFF) > 0)  // is date?
    31a2:	b2e9      	uxtb	r1, r5
    31a4:	0a2a      	lsrs	r2, r5, #8
    31a6:	0c2b      	lsrs	r3, r5, #16
    31a8:	0e2d      	lsrs	r5, r5, #24
    31aa:	2900      	cmp	r1, #0
    31ac:	d043      	beq.n	3236 <_ZN19FrSkySportSensorGps10decodeDataEhtm+0xce>
          data >>= 8; day = data & 0xFF;
    31ae:	0021      	movs	r1, r4
    31b0:	3156      	adds	r1, #86	; 0x56
    31b2:	700a      	strb	r2, [r1, #0]
          data >>= 8; month = data & 0xFF;
    31b4:	0022      	movs	r2, r4
    31b6:	3255      	adds	r2, #85	; 0x55
    31b8:	7013      	strb	r3, [r2, #0]
          data >>= 8; year = data & 0xFF;
    31ba:	3454      	adds	r4, #84	; 0x54
          data >>= 8; hour = data & 0xFF;
    31bc:	7025      	strb	r5, [r4, #0]
    31be:	e015      	b.n	31ec <_ZN19FrSkySportSensorGps10decodeDataEhtm+0x84>
          float latLonData = (data & 0x3FFFFFFF) / 10000.0 / 60.0;
    31c0:	00a8      	lsls	r0, r5, #2
    31c2:	0880      	lsrs	r0, r0, #2
    31c4:	f008 f808 	bl	b1d8 <__aeabi_ui2d>
    31c8:	2200      	movs	r2, #0
    31ca:	4b1f      	ldr	r3, [pc, #124]	; (3248 <_ZN19FrSkySportSensorGps10decodeDataEhtm+0xe0>)
    31cc:	f006 fda4 	bl	9d18 <__aeabi_ddiv>
    31d0:	4b1e      	ldr	r3, [pc, #120]	; (324c <_ZN19FrSkySportSensorGps10decodeDataEhtm+0xe4>)
    31d2:	2200      	movs	r2, #0
    31d4:	f006 fda0 	bl	9d18 <__aeabi_ddiv>
    31d8:	f008 f888 	bl	b2ec <__aeabi_d2f>
          if((data & 0x40000000) > 0) latLonData = -latLonData;                 // is negative?
    31dc:	006b      	lsls	r3, r5, #1
    31de:	d502      	bpl.n	31e6 <_ZN19FrSkySportSensorGps10decodeDataEhtm+0x7e>
    31e0:	2380      	movs	r3, #128	; 0x80
    31e2:	061b      	lsls	r3, r3, #24
    31e4:	18c0      	adds	r0, r0, r3
          if((data & 0x80000000) == 0) lat = latLonData; else lon = latLonData; // is latitude?
    31e6:	2d00      	cmp	r5, #0
    31e8:	db02      	blt.n	31f0 <_ZN19FrSkySportSensorGps10decodeDataEhtm+0x88>
    31ea:	6420      	str	r0, [r4, #64]	; 0x40
}
    31ec:	0030      	movs	r0, r6
    31ee:	bd70      	pop	{r4, r5, r6, pc}
          if((data & 0x80000000) == 0) lat = latLonData; else lon = latLonData; // is latitude?
    31f0:	6460      	str	r0, [r4, #68]	; 0x44
    31f2:	e7fb      	b.n	31ec <_ZN19FrSkySportSensorGps10decodeDataEhtm+0x84>
        altitude = ((int32_t)data) / 100.0;
    31f4:	0028      	movs	r0, r5
    31f6:	f007 ffad 	bl	b154 <__aeabi_i2d>
    31fa:	2200      	movs	r2, #0
    31fc:	4b14      	ldr	r3, [pc, #80]	; (3250 <_ZN19FrSkySportSensorGps10decodeDataEhtm+0xe8>)
    31fe:	f006 fd8b 	bl	9d18 <__aeabi_ddiv>
    3202:	f008 f873 	bl	b2ec <__aeabi_d2f>
    3206:	64a0      	str	r0, [r4, #72]	; 0x48
    3208:	e7f0      	b.n	31ec <_ZN19FrSkySportSensorGps10decodeDataEhtm+0x84>
        speed = data / 1944.0; // Convert knots to m/s
    320a:	0028      	movs	r0, r5
    320c:	f007 ffe4 	bl	b1d8 <__aeabi_ui2d>
    3210:	2200      	movs	r2, #0
    3212:	4b10      	ldr	r3, [pc, #64]	; (3254 <_ZN19FrSkySportSensorGps10decodeDataEhtm+0xec>)
    3214:	f006 fd80 	bl	9d18 <__aeabi_ddiv>
    3218:	f008 f868 	bl	b2ec <__aeabi_d2f>
    321c:	64e0      	str	r0, [r4, #76]	; 0x4c
    321e:	e7e5      	b.n	31ec <_ZN19FrSkySportSensorGps10decodeDataEhtm+0x84>
        cog = data / 100.0;
    3220:	0028      	movs	r0, r5
    3222:	f007 ffd9 	bl	b1d8 <__aeabi_ui2d>
    3226:	2200      	movs	r2, #0
    3228:	4b09      	ldr	r3, [pc, #36]	; (3250 <_ZN19FrSkySportSensorGps10decodeDataEhtm+0xe8>)
    322a:	f006 fd75 	bl	9d18 <__aeabi_ddiv>
    322e:	f008 f85d 	bl	b2ec <__aeabi_d2f>
    3232:	6520      	str	r0, [r4, #80]	; 0x50
    3234:	e7da      	b.n	31ec <_ZN19FrSkySportSensorGps10decodeDataEhtm+0x84>
          data >>= 8; second = data & 0xFF;
    3236:	0021      	movs	r1, r4
    3238:	3159      	adds	r1, #89	; 0x59
    323a:	700a      	strb	r2, [r1, #0]
          data >>= 8; minute = data & 0xFF;
    323c:	0022      	movs	r2, r4
    323e:	3258      	adds	r2, #88	; 0x58
    3240:	7013      	strb	r3, [r2, #0]
          data >>= 8; hour = data & 0xFF;
    3242:	3457      	adds	r4, #87	; 0x57
    3244:	e7ba      	b.n	31bc <_ZN19FrSkySportSensorGps10decodeDataEhtm+0x54>
    3246:	46c0      	nop			; (mov r8, r8)
    3248:	40c38800 	.word	0x40c38800
    324c:	404e0000 	.word	0x404e0000
    3250:	40590000 	.word	0x40590000
    3254:	409e6000 	.word	0x409e6000

00003258 <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm>:
{
    3258:	b570      	push	{r4, r5, r6, lr}
    325a:	000d      	movs	r5, r1
  if(sensorId == id)
    325c:	7901      	ldrb	r1, [r0, #4]
{
    325e:	0004      	movs	r4, r0
  if(sensorId == id)
    3260:	4291      	cmp	r1, r2
    3262:	d121      	bne.n	32a8 <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0x50>
    switch(sensorDataIdx)
    3264:	7940      	ldrb	r0, [r0, #5]
    3266:	2806      	cmp	r0, #6
    3268:	d818      	bhi.n	329c <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0x44>
    326a:	f005 f919 	bl	84a0 <__gnu_thumb1_case_uqi>
    326e:	1e04      	.short	0x1e04
    3270:	483d3227 	.word	0x483d3227
    3274:	53          	.byte	0x53
    3275:	00          	.byte	0x00
        if(now > latTime)
    3276:	6a62      	ldr	r2, [r4, #36]	; 0x24
    3278:	4293      	cmp	r3, r2
    327a:	d90a      	bls.n	3292 <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0x3a>
          latTime = now + GPS_LAT_LON_DATA_PERIOD;
    327c:	22fa      	movs	r2, #250	; 0xfa
    327e:	0092      	lsls	r2, r2, #2
    3280:	189b      	adds	r3, r3, r2
          serial.sendData(GPS_LAT_LON_DATA_ID, latData);
    3282:	68a2      	ldr	r2, [r4, #8]
          latTime = now + GPS_LAT_LON_DATA_PERIOD;
    3284:	6263      	str	r3, [r4, #36]	; 0x24
          serial.sendData(GPS_LAT_LON_DATA_ID, lonData);
    3286:	2180      	movs	r1, #128	; 0x80
          serial.sendData(GPS_DATE_TIME_DATA_ID, timeData);
    3288:	0109      	lsls	r1, r1, #4
    328a:	0028      	movs	r0, r5
    328c:	f000 f913 	bl	34b6 <_ZN26FrSkySportSingleWireSerial8sendDataEtm>
    3290:	e004      	b.n	329c <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0x44>
          serial.sendEmpty(GPS_LAT_LON_DATA_ID);
    3292:	2180      	movs	r1, #128	; 0x80
          serial.sendEmpty(GPS_DATE_TIME_DATA_ID);
    3294:	0109      	lsls	r1, r1, #4
    3296:	0028      	movs	r0, r5
    3298:	f000 f943 	bl	3522 <_ZN26FrSkySportSingleWireSerial9sendEmptyEt>
    sensorDataIdx++;
    329c:	7963      	ldrb	r3, [r4, #5]
    329e:	3301      	adds	r3, #1
    32a0:	b2db      	uxtb	r3, r3
    if(sensorDataIdx >= GPS_DATA_COUNT) sensorDataIdx = 0;
    32a2:	2b06      	cmp	r3, #6
    32a4:	d83e      	bhi.n	3324 <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0xcc>
    32a6:	7163      	strb	r3, [r4, #5]
}
    32a8:	bd70      	pop	{r4, r5, r6, pc}
        if(now > lonTime)
    32aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    32ac:	4293      	cmp	r3, r2
    32ae:	d9f0      	bls.n	3292 <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0x3a>
          lonTime = now + GPS_LAT_LON_DATA_PERIOD;
    32b0:	22fa      	movs	r2, #250	; 0xfa
    32b2:	0092      	lsls	r2, r2, #2
    32b4:	189b      	adds	r3, r3, r2
    32b6:	62a3      	str	r3, [r4, #40]	; 0x28
          serial.sendData(GPS_LAT_LON_DATA_ID, lonData);
    32b8:	68e2      	ldr	r2, [r4, #12]
    32ba:	e7e4      	b.n	3286 <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0x2e>
        if(now > altTime)
    32bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    32be:	4293      	cmp	r3, r2
    32c0:	d905      	bls.n	32ce <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0x76>
          altTime = now + GPS_ALT_DATA_PERIOD;
    32c2:	33f5      	adds	r3, #245	; 0xf5
    32c4:	33ff      	adds	r3, #255	; 0xff
    32c6:	62e3      	str	r3, [r4, #44]	; 0x2c
          serial.sendData(GPS_ALT_DATA_ID, altData);
    32c8:	6922      	ldr	r2, [r4, #16]
    32ca:	2182      	movs	r1, #130	; 0x82
    32cc:	e7dc      	b.n	3288 <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0x30>
          serial.sendEmpty(GPS_ALT_DATA_ID);
    32ce:	2182      	movs	r1, #130	; 0x82
    32d0:	e7e0      	b.n	3294 <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0x3c>
        if(now > speedTime)
    32d2:	6b22      	ldr	r2, [r4, #48]	; 0x30
    32d4:	4293      	cmp	r3, r2
    32d6:	d905      	bls.n	32e4 <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0x8c>
          speedTime = now + GPS_SPEED_DATA_PERIOD;
    32d8:	33f5      	adds	r3, #245	; 0xf5
    32da:	33ff      	adds	r3, #255	; 0xff
    32dc:	6323      	str	r3, [r4, #48]	; 0x30
          serial.sendData(GPS_SPEED_DATA_ID, speedData);
    32de:	6962      	ldr	r2, [r4, #20]
    32e0:	2183      	movs	r1, #131	; 0x83
    32e2:	e7d1      	b.n	3288 <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0x30>
          serial.sendEmpty(GPS_SPEED_DATA_ID);
    32e4:	2183      	movs	r1, #131	; 0x83
    32e6:	e7d5      	b.n	3294 <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0x3c>
        if(now > cogTime)
    32e8:	6b62      	ldr	r2, [r4, #52]	; 0x34
    32ea:	4293      	cmp	r3, r2
    32ec:	d905      	bls.n	32fa <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0xa2>
          cogTime = now + GPS_COG_DATA_PERIOD;
    32ee:	33f5      	adds	r3, #245	; 0xf5
    32f0:	33ff      	adds	r3, #255	; 0xff
    32f2:	6363      	str	r3, [r4, #52]	; 0x34
          serial.sendData(GPS_COG_DATA_ID, cogData);
    32f4:	69a2      	ldr	r2, [r4, #24]
    32f6:	2184      	movs	r1, #132	; 0x84
    32f8:	e7c6      	b.n	3288 <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0x30>
          serial.sendEmpty(GPS_COG_DATA_ID);
    32fa:	2184      	movs	r1, #132	; 0x84
    32fc:	e7ca      	b.n	3294 <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0x3c>
        if(now > dateTime)
    32fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3300:	4293      	cmp	r3, r2
    3302:	d905      	bls.n	3310 <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0xb8>
          dateTime = now + GPS_DATE_TIME_DATA_PERIOD;
    3304:	4a08      	ldr	r2, [pc, #32]	; (3328 <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0xd0>)
    3306:	189b      	adds	r3, r3, r2
          serial.sendData(GPS_DATE_TIME_DATA_ID, dateData);
    3308:	69e2      	ldr	r2, [r4, #28]
          dateTime = now + GPS_DATE_TIME_DATA_PERIOD;
    330a:	63a3      	str	r3, [r4, #56]	; 0x38
          serial.sendData(GPS_DATE_TIME_DATA_ID, timeData);
    330c:	2185      	movs	r1, #133	; 0x85
    330e:	e7bb      	b.n	3288 <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0x30>
          serial.sendEmpty(GPS_DATE_TIME_DATA_ID);
    3310:	2185      	movs	r1, #133	; 0x85
    3312:	e7bf      	b.n	3294 <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0x3c>
        if(now > timeTime)
    3314:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    3316:	4293      	cmp	r3, r2
    3318:	d9fa      	bls.n	3310 <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0xb8>
          timeTime = now + GPS_DATE_TIME_DATA_PERIOD;
    331a:	4a03      	ldr	r2, [pc, #12]	; (3328 <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0xd0>)
    331c:	189b      	adds	r3, r3, r2
    331e:	63e3      	str	r3, [r4, #60]	; 0x3c
          serial.sendData(GPS_DATE_TIME_DATA_ID, timeData);
    3320:	6a22      	ldr	r2, [r4, #32]
    3322:	e7f3      	b.n	330c <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0xb4>
    if(sensorDataIdx >= GPS_DATA_COUNT) sensorDataIdx = 0;
    3324:	2300      	movs	r3, #0
    3326:	e7be      	b.n	32a6 <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0x4e>
    3328:	00002710 	.word	0x00002710

0000332c <_ZN19FrSkySportSensorGpsC1EN16FrSkySportSensor8SensorIdE>:
FrSkySportSensorGps::FrSkySportSensorGps(SensorId id) : FrSkySportSensor(id) { }
    332c:	b510      	push	{r4, lr}
    332e:	0004      	movs	r4, r0
    3330:	f7ff ff10 	bl	3154 <_ZN16FrSkySportSensorC1ENS_8SensorIdE>
    3334:	4b02      	ldr	r3, [pc, #8]	; (3340 <_ZN19FrSkySportSensorGpsC1EN16FrSkySportSensor8SensorIdE+0x14>)
    3336:	0020      	movs	r0, r4
    3338:	3308      	adds	r3, #8
    333a:	6023      	str	r3, [r4, #0]
    333c:	bd10      	pop	{r4, pc}
    333e:	46c0      	nop			; (mov r8, r8)
    3340:	0000d8b4 	.word	0x0000d8b4

00003344 <_ZN19FrSkySportSensorGps9setLatLonEfb>:
{
    3344:	b570      	push	{r4, r5, r6, lr}
    3346:	000e      	movs	r6, r1
  uint32_t data = (uint32_t)((latLon < 0 ? -latLon : latLon) * 60 * 10000) & 0x3FFFFFFF;
    3348:	2100      	movs	r1, #0
{
    334a:	1c05      	adds	r5, r0, #0
  uint32_t data = (uint32_t)((latLon < 0 ? -latLon : latLon) * 60 * 10000) & 0x3FFFFFFF;
    334c:	f005 fa82 	bl	8854 <__aeabi_fcmplt>
    3350:	2800      	cmp	r0, #0
    3352:	d012      	beq.n	337a <_ZN19FrSkySportSensorGps9setLatLonEfb+0x36>
    3354:	2380      	movs	r3, #128	; 0x80
    3356:	061b      	lsls	r3, r3, #24
    3358:	18e8      	adds	r0, r5, r3
    335a:	4914      	ldr	r1, [pc, #80]	; (33ac <_ZN19FrSkySportSensorGps9setLatLonEfb+0x68>)
    335c:	f005 fe5a 	bl	9014 <__aeabi_fmul>
    3360:	4913      	ldr	r1, [pc, #76]	; (33b0 <_ZN19FrSkySportSensorGps9setLatLonEfb+0x6c>)
    3362:	f005 fe57 	bl	9014 <__aeabi_fmul>
    3366:	f005 fa9d 	bl	88a4 <__aeabi_f2uiz>
    336a:	0084      	lsls	r4, r0, #2
    336c:	08a4      	lsrs	r4, r4, #2
  if(isLat == false) data |= 0x80000000;
    336e:	2e00      	cmp	r6, #0
    3370:	d116      	bne.n	33a0 <_ZN19FrSkySportSensorGps9setLatLonEfb+0x5c>
    3372:	2380      	movs	r3, #128	; 0x80
    3374:	061b      	lsls	r3, r3, #24
    3376:	431c      	orrs	r4, r3
    3378:	e00c      	b.n	3394 <_ZN19FrSkySportSensorGps9setLatLonEfb+0x50>
  uint32_t data = (uint32_t)((latLon < 0 ? -latLon : latLon) * 60 * 10000) & 0x3FFFFFFF;
    337a:	490c      	ldr	r1, [pc, #48]	; (33ac <_ZN19FrSkySportSensorGps9setLatLonEfb+0x68>)
    337c:	1c28      	adds	r0, r5, #0
    337e:	f005 fe49 	bl	9014 <__aeabi_fmul>
    3382:	490b      	ldr	r1, [pc, #44]	; (33b0 <_ZN19FrSkySportSensorGps9setLatLonEfb+0x6c>)
    3384:	f005 fe46 	bl	9014 <__aeabi_fmul>
    3388:	f005 fa8c 	bl	88a4 <__aeabi_f2uiz>
    338c:	0084      	lsls	r4, r0, #2
    338e:	08a4      	lsrs	r4, r4, #2
  if(isLat == false) data |= 0x80000000;
    3390:	2e00      	cmp	r6, #0
    3392:	d0ee      	beq.n	3372 <_ZN19FrSkySportSensorGps9setLatLonEfb+0x2e>
  if(latLon < 0) data |= 0x40000000;
    3394:	2100      	movs	r1, #0
    3396:	1c28      	adds	r0, r5, #0
    3398:	f005 fa5c 	bl	8854 <__aeabi_fcmplt>
    339c:	2800      	cmp	r0, #0
    339e:	d002      	beq.n	33a6 <_ZN19FrSkySportSensorGps9setLatLonEfb+0x62>
    33a0:	2380      	movs	r3, #128	; 0x80
    33a2:	05db      	lsls	r3, r3, #23
    33a4:	431c      	orrs	r4, r3
}
    33a6:	0020      	movs	r0, r4
    33a8:	bd70      	pop	{r4, r5, r6, pc}
    33aa:	46c0      	nop			; (mov r8, r8)
    33ac:	42700000 	.word	0x42700000
    33b0:	461c4000 	.word	0x461c4000

000033b4 <_ZN19FrSkySportSensorGps7setDataEfffffhhhhhh>:
{
    33b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    33b6:	b087      	sub	sp, #28
    33b8:	1c1e      	adds	r6, r3, #0
    33ba:	ab0e      	add	r3, sp, #56	; 0x38
    33bc:	781b      	ldrb	r3, [r3, #0]
    33be:	0004      	movs	r4, r0
    33c0:	9301      	str	r3, [sp, #4]
    33c2:	ab0f      	add	r3, sp, #60	; 0x3c
    33c4:	781b      	ldrb	r3, [r3, #0]
    33c6:	1c08      	adds	r0, r1, #0
    33c8:	9302      	str	r3, [sp, #8]
    33ca:	ab10      	add	r3, sp, #64	; 0x40
    33cc:	781b      	ldrb	r3, [r3, #0]
  latData = setLatLon(lat, true);
    33ce:	2101      	movs	r1, #1
{
    33d0:	9303      	str	r3, [sp, #12]
    33d2:	ab11      	add	r3, sp, #68	; 0x44
    33d4:	781b      	ldrb	r3, [r3, #0]
    33d6:	1c17      	adds	r7, r2, #0
    33d8:	9304      	str	r3, [sp, #16]
    33da:	ab12      	add	r3, sp, #72	; 0x48
    33dc:	781b      	ldrb	r3, [r3, #0]
    33de:	9305      	str	r3, [sp, #20]
    33e0:	ab13      	add	r3, sp, #76	; 0x4c
    33e2:	781d      	ldrb	r5, [r3, #0]
  latData = setLatLon(lat, true);
    33e4:	f7ff ffae 	bl	3344 <_ZN19FrSkySportSensorGps9setLatLonEfb>
  lonData = setLatLon(lon, false);
    33e8:	2100      	movs	r1, #0
  latData = setLatLon(lat, true);
    33ea:	60a0      	str	r0, [r4, #8]
  lonData = setLatLon(lon, false);
    33ec:	1c38      	adds	r0, r7, #0
    33ee:	f7ff ffa9 	bl	3344 <_ZN19FrSkySportSensorGps9setLatLonEfb>
  cogData = cog * 100;
    33f2:	4915      	ldr	r1, [pc, #84]	; (3448 <_ZN19FrSkySportSensorGps7setDataEfffffhhhhhh+0x94>)
  lonData = setLatLon(lon, false);
    33f4:	60e0      	str	r0, [r4, #12]
  cogData = cog * 100;
    33f6:	980d      	ldr	r0, [sp, #52]	; 0x34
    33f8:	f005 fe0c 	bl	9014 <__aeabi_fmul>
    33fc:	f005 fa52 	bl	88a4 <__aeabi_f2uiz>
  speedData = speed * 1944; // Convert m/s to knots
    3400:	4912      	ldr	r1, [pc, #72]	; (344c <_ZN19FrSkySportSensorGps7setDataEfffffhhhhhh+0x98>)
  cogData = cog * 100;
    3402:	61a0      	str	r0, [r4, #24]
  speedData = speed * 1944; // Convert m/s to knots
    3404:	980c      	ldr	r0, [sp, #48]	; 0x30
    3406:	f005 fe05 	bl	9014 <__aeabi_fmul>
    340a:	f005 fa4b 	bl	88a4 <__aeabi_f2uiz>
  altData = alt * 100;
    340e:	490e      	ldr	r1, [pc, #56]	; (3448 <_ZN19FrSkySportSensorGps7setDataEfffffhhhhhh+0x94>)
  speedData = speed * 1944; // Convert m/s to knots
    3410:	6160      	str	r0, [r4, #20]
  altData = alt * 100;
    3412:	1c30      	adds	r0, r6, #0
    3414:	f005 fdfe 	bl	9014 <__aeabi_fmul>
    3418:	f006 f8b8 	bl	958c <__aeabi_f2iz>
  data <<= 8;
    341c:	9b01      	ldr	r3, [sp, #4]
  data |= monthOrMinute;
    341e:	9a02      	ldr	r2, [sp, #8]
  data <<= 8;
    3420:	021b      	lsls	r3, r3, #8
  data |= monthOrMinute;
    3422:	4313      	orrs	r3, r2
  data |= dayOrSecond;
    3424:	9a03      	ldr	r2, [sp, #12]
  data <<= 8;
    3426:	021b      	lsls	r3, r3, #8
  data |= dayOrSecond;
    3428:	4313      	orrs	r3, r2
  if(isDate == true) data |= 0xFF;
    342a:	22ff      	movs	r2, #255	; 0xff
  data <<= 8;
    342c:	021b      	lsls	r3, r3, #8
  if(isDate == true) data |= 0xFF;
    342e:	4313      	orrs	r3, r2
  dateData = setDateTime(year, month, day, true);
    3430:	61e3      	str	r3, [r4, #28]
  data <<= 8;
    3432:	9b04      	ldr	r3, [sp, #16]
  data |= monthOrMinute;
    3434:	9a05      	ldr	r2, [sp, #20]
  data <<= 8;
    3436:	021b      	lsls	r3, r3, #8
  data |= monthOrMinute;
    3438:	4313      	orrs	r3, r2
  data <<= 8;
    343a:	021b      	lsls	r3, r3, #8
  data |= dayOrSecond;
    343c:	431d      	orrs	r5, r3
  data <<= 8;
    343e:	022d      	lsls	r5, r5, #8
  altData = alt * 100;
    3440:	6120      	str	r0, [r4, #16]
  timeData = setDateTime(hour, minute, second, false);
    3442:	6225      	str	r5, [r4, #32]
}
    3444:	b007      	add	sp, #28
    3446:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3448:	42c80000 	.word	0x42c80000
    344c:	44f30000 	.word	0x44f30000

00003450 <_ZN26FrSkySportSingleWireSerialC1Ev>:
//#include "Arduino.h"
//#include "SERCOM.h"

FrSkySportSingleWireSerial::FrSkySportSingleWireSerial()
{
  uartC3 = NULL;
    3450:	2300      	movs	r3, #0
    3452:	6043      	str	r3, [r0, #4]
  port = NULL;
    3454:	6003      	str	r3, [r0, #0]
}
    3456:	4770      	bx	lr

00003458 <_ZN26FrSkySportSingleWireSerial5beginEP4Uart>:
    UART2_C3 = 0x10;  // Invert Serial3 Tx levels
    UART2_S2 = 0x10;  // Invert Serial3 Rx levels;
  }
  */
	port=ptr1;
  crc = 0;
    3458:	2300      	movs	r3, #0
	port=ptr1;
    345a:	6001      	str	r1, [r0, #0]
  crc = 0;
    345c:	8103      	strh	r3, [r0, #8]
}
    345e:	4770      	bx	lr

00003460 <_ZN26FrSkySportSingleWireSerial8sendByteEh>:
    setMode(RX);
  }
}

void FrSkySportSingleWireSerial::sendByte(uint8_t byte)
{
    3460:	b570      	push	{r4, r5, r6, lr}
    3462:	0004      	movs	r4, r0
  if(port != NULL)
    3464:	6800      	ldr	r0, [r0, #0]
{
    3466:	000d      	movs	r5, r1
  if(port != NULL)
    3468:	2800      	cmp	r0, #0
    346a:	d011      	beq.n	3490 <_ZN26FrSkySportSingleWireSerial8sendByteEh+0x30>
    346c:	6803      	ldr	r3, [r0, #0]
  {
    if(byte == 0x7E)
    {
      port->write(FRSKY_STUFFING);
    346e:	681b      	ldr	r3, [r3, #0]
    if(byte == 0x7E)
    3470:	297e      	cmp	r1, #126	; 0x7e
    3472:	d10e      	bne.n	3492 <_ZN26FrSkySportSingleWireSerial8sendByteEh+0x32>
      port->write(FRSKY_STUFFING);
    3474:	217d      	movs	r1, #125	; 0x7d
    3476:	4798      	blx	r3
      port->write(0x5E); // 0x7E xor 0x20
    3478:	215e      	movs	r1, #94	; 0x5e
    347a:	6820      	ldr	r0, [r4, #0]
    347c:	6803      	ldr	r3, [r0, #0]
    347e:	681b      	ldr	r3, [r3, #0]
      port->write(FRSKY_STUFFING);
      port->write(0x5D); // 0x7D xor 0x20
    }
    else
    {
      port->write(byte);
    3480:	4798      	blx	r3
    }
    crc += byte;
    3482:	8921      	ldrh	r1, [r4, #8]
    3484:	1949      	adds	r1, r1, r5
    3486:	b289      	uxth	r1, r1
    crc += crc >> 8; crc &= 0x00ff;
    3488:	120b      	asrs	r3, r1, #8
    348a:	18c9      	adds	r1, r1, r3
    348c:	b2c9      	uxtb	r1, r1
    348e:	8121      	strh	r1, [r4, #8]
  }
}
    3490:	bd70      	pop	{r4, r5, r6, pc}
    else if(byte == 0x7D)
    3492:	297d      	cmp	r1, #125	; 0x7d
    3494:	d1f4      	bne.n	3480 <_ZN26FrSkySportSingleWireSerial8sendByteEh+0x20>
      port->write(FRSKY_STUFFING);
    3496:	4798      	blx	r3
      port->write(0x5D); // 0x7D xor 0x20
    3498:	6820      	ldr	r0, [r4, #0]
    349a:	215d      	movs	r1, #93	; 0x5d
    349c:	6803      	ldr	r3, [r0, #0]
    349e:	681b      	ldr	r3, [r3, #0]
    34a0:	e7ee      	b.n	3480 <_ZN26FrSkySportSingleWireSerial8sendByteEh+0x20>

000034a2 <_ZN26FrSkySportSingleWireSerial7sendCrcEv>:

void FrSkySportSingleWireSerial::sendCrc()
{
  // Send and reset CRC
  sendByte(0xFF - crc);
    34a2:	8901      	ldrh	r1, [r0, #8]
{
    34a4:	b510      	push	{r4, lr}
  sendByte(0xFF - crc);
    34a6:	43c9      	mvns	r1, r1
    34a8:	b2c9      	uxtb	r1, r1
{
    34aa:	0004      	movs	r4, r0
  sendByte(0xFF - crc);
    34ac:	f7ff ffd8 	bl	3460 <_ZN26FrSkySportSingleWireSerial8sendByteEh>
  crc = 0;
    34b0:	2300      	movs	r3, #0
    34b2:	8123      	strh	r3, [r4, #8]
}
    34b4:	bd10      	pop	{r4, pc}

000034b6 <_ZN26FrSkySportSingleWireSerial8sendDataEtm>:

void FrSkySportSingleWireSerial::sendData(uint16_t dataTypeId, uint32_t data)
{
    34b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    34b8:	466b      	mov	r3, sp
    34ba:	0004      	movs	r4, r0
  if(port != NULL)
    34bc:	6800      	ldr	r0, [r0, #0]
{
    34be:	9200      	str	r2, [sp, #0]
    34c0:	1d9d      	adds	r5, r3, #6
    34c2:	80d9      	strh	r1, [r3, #6]
  if(port != NULL)
    34c4:	2800      	cmp	r0, #0
    34c6:	d02b      	beq.n	3520 <_ZN26FrSkySportSingleWireSerial8sendDataEtm+0x6a>
		port->disableRXPin();
    34c8:	f002 ff72 	bl	63b0 <_ZN4Uart12disableRXPinEv>
  {
    setMode(TX);
    sendByte(FRSKY_SENSOR_DATA_FRAME);
    34cc:	2110      	movs	r1, #16
    34ce:	0020      	movs	r0, r4
    34d0:	f7ff ffc6 	bl	3460 <_ZN26FrSkySportSingleWireSerial8sendByteEh>
    uint8_t *bytes = (uint8_t*)&dataTypeId;
    sendByte(bytes[0]);
    34d4:	7829      	ldrb	r1, [r5, #0]
    34d6:	0020      	movs	r0, r4
    34d8:	f7ff ffc2 	bl	3460 <_ZN26FrSkySportSingleWireSerial8sendByteEh>
    sendByte(bytes[1]);
    34dc:	7869      	ldrb	r1, [r5, #1]
    34de:	0020      	movs	r0, r4
    34e0:	f7ff ffbe 	bl	3460 <_ZN26FrSkySportSingleWireSerial8sendByteEh>
    bytes = (uint8_t*)&data;
    sendByte(bytes[0]);
    34e4:	466b      	mov	r3, sp
    34e6:	0020      	movs	r0, r4
    34e8:	7819      	ldrb	r1, [r3, #0]
    34ea:	f7ff ffb9 	bl	3460 <_ZN26FrSkySportSingleWireSerial8sendByteEh>
    sendByte(bytes[1]);
    34ee:	466b      	mov	r3, sp
    34f0:	0020      	movs	r0, r4
    34f2:	7859      	ldrb	r1, [r3, #1]
    34f4:	f7ff ffb4 	bl	3460 <_ZN26FrSkySportSingleWireSerial8sendByteEh>
    sendByte(bytes[2]);
    34f8:	466b      	mov	r3, sp
    34fa:	0020      	movs	r0, r4
    34fc:	7899      	ldrb	r1, [r3, #2]
    34fe:	f7ff ffaf 	bl	3460 <_ZN26FrSkySportSingleWireSerial8sendByteEh>
    sendByte(bytes[3]);
    3502:	466b      	mov	r3, sp
    3504:	0020      	movs	r0, r4
    3506:	78d9      	ldrb	r1, [r3, #3]
    3508:	f7ff ffaa 	bl	3460 <_ZN26FrSkySportSingleWireSerial8sendByteEh>
    sendCrc();
    350c:	0020      	movs	r0, r4
    350e:	f7ff ffc8 	bl	34a2 <_ZN26FrSkySportSingleWireSerial7sendCrcEv>
    port->flush();
    3512:	6820      	ldr	r0, [r4, #0]
    3514:	6803      	ldr	r3, [r0, #0]
    3516:	68db      	ldr	r3, [r3, #12]
    3518:	4798      	blx	r3
		port->enableRXPin();
    351a:	6820      	ldr	r0, [r4, #0]
    351c:	f002 ff43 	bl	63a6 <_ZN4Uart11enableRXPinEv>
    setMode(RX);
  }
}
    3520:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

00003522 <_ZN26FrSkySportSingleWireSerial9sendEmptyEt>:

void FrSkySportSingleWireSerial::sendEmpty(uint16_t dataTypeId)
{
    3522:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3524:	466b      	mov	r3, sp
    3526:	0004      	movs	r4, r0
  if(port != NULL)
    3528:	6800      	ldr	r0, [r0, #0]
{
    352a:	1d9d      	adds	r5, r3, #6
    352c:	80d9      	strh	r1, [r3, #6]
  if(port != NULL)
    352e:	2800      	cmp	r0, #0
    3530:	d020      	beq.n	3574 <_ZN26FrSkySportSingleWireSerial9sendEmptyEt+0x52>
		port->disableRXPin();
    3532:	f002 ff3d 	bl	63b0 <_ZN4Uart12disableRXPinEv>
  {
    setMode(TX);
    sendByte(0x00);
    3536:	2100      	movs	r1, #0
    3538:	0020      	movs	r0, r4
    353a:	f7ff ff91 	bl	3460 <_ZN26FrSkySportSingleWireSerial8sendByteEh>
    uint8_t *bytes = (uint8_t*)&dataTypeId;
    sendByte(bytes[0]);
    353e:	7829      	ldrb	r1, [r5, #0]
    3540:	0020      	movs	r0, r4
    3542:	f7ff ff8d 	bl	3460 <_ZN26FrSkySportSingleWireSerial8sendByteEh>
    sendByte(bytes[1]);
    3546:	7869      	ldrb	r1, [r5, #1]
    3548:	0020      	movs	r0, r4
    354a:	f7ff ff89 	bl	3460 <_ZN26FrSkySportSingleWireSerial8sendByteEh>
    354e:	2505      	movs	r5, #5
    3550:	3d01      	subs	r5, #1
    for(uint8_t i = 0; i < 4; i++) sendByte(0x00);
    3552:	2d00      	cmp	r5, #0
    3554:	d004      	beq.n	3560 <_ZN26FrSkySportSingleWireSerial9sendEmptyEt+0x3e>
    3556:	2100      	movs	r1, #0
    3558:	0020      	movs	r0, r4
    355a:	f7ff ff81 	bl	3460 <_ZN26FrSkySportSingleWireSerial8sendByteEh>
    355e:	e7f7      	b.n	3550 <_ZN26FrSkySportSingleWireSerial9sendEmptyEt+0x2e>
    sendCrc();
    3560:	0020      	movs	r0, r4
    3562:	f7ff ff9e 	bl	34a2 <_ZN26FrSkySportSingleWireSerial7sendCrcEv>
    port->flush();
    3566:	6820      	ldr	r0, [r4, #0]
    3568:	6803      	ldr	r3, [r0, #0]
    356a:	68db      	ldr	r3, [r3, #12]
    356c:	4798      	blx	r3
		port->enableRXPin();
    356e:	6820      	ldr	r0, [r4, #0]
    3570:	f002 ff19 	bl	63a6 <_ZN4Uart11enableRXPinEv>
    setMode(RX);
  }
}
    3574:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

00003576 <_ZN19FrSkySportTelemetryC1Eb>:
  Not for commercial use
*/

#include "FrSkySportTelemetry.h"

FrSkySportTelemetry::FrSkySportTelemetry(bool polling)
    3576:	b510      	push	{r4, lr}
    3578:	0004      	movs	r4, r0
    357a:	3070      	adds	r0, #112	; 0x70
    357c:	f7ff ff68 	bl	3450 <_ZN26FrSkySportSingleWireSerialC1Ev>
{
  //if(polling == true) pollingClass = new FrSkySportPolling();
  //else 
  pollingClass = NULL; 
    3580:	2200      	movs	r2, #0
    3582:	1d23      	adds	r3, r4, #4
}
    3584:	0020      	movs	r0, r4
  pollingClass = NULL; 
    3586:	67da      	str	r2, [r3, #124]	; 0x7c
}
    3588:	bd10      	pop	{r4, pc}

0000358a <_ZN19FrSkySportTelemetry5beginEP4UartP16FrSkySportSensorS3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_>:
                                FrSkySportSensor* sensor16, FrSkySportSensor* sensor17, FrSkySportSensor* sensor18,
                                FrSkySportSensor* sensor19, FrSkySportSensor* sensor20, FrSkySportSensor* sensor21,
                                FrSkySportSensor* sensor22, FrSkySportSensor* sensor23, FrSkySportSensor* sensor24,
                                FrSkySportSensor* sensor25, FrSkySportSensor* sensor26, FrSkySportSensor* sensor27,
                                FrSkySportSensor* sensor28)
{
    358a:	b510      	push	{r4, lr}
  // Store sensor references in array
  sensors[0] = sensor1;
  sensors[1] = sensor2;
    358c:	6043      	str	r3, [r0, #4]
  sensors[2] = sensor3;
    358e:	9b02      	ldr	r3, [sp, #8]
  sensors[0] = sensor1;
    3590:	6002      	str	r2, [r0, #0]
  sensors[2] = sensor3;
    3592:	6083      	str	r3, [r0, #8]
  sensors[3] = sensor4;
    3594:	9b03      	ldr	r3, [sp, #12]
  sensors[25] = sensor26;
  sensors[26] = sensor27;
  sensors[27] = sensor28;

  // Count sensors (stops at first NULL)
  for(sensorCount = 0; sensorCount < FRSKY_TELEMETRY_MAX_SENSORS; sensorCount++)
    3596:	0002      	movs	r2, r0
  sensors[3] = sensor4;
    3598:	60c3      	str	r3, [r0, #12]
  sensors[4] = sensor5;
    359a:	9b04      	ldr	r3, [sp, #16]
  for(sensorCount = 0; sensorCount < FRSKY_TELEMETRY_MAX_SENSORS; sensorCount++)
    359c:	327c      	adds	r2, #124	; 0x7c
  sensors[4] = sensor5;
    359e:	6103      	str	r3, [r0, #16]
  sensors[5] = sensor6;
    35a0:	9b05      	ldr	r3, [sp, #20]
    35a2:	6143      	str	r3, [r0, #20]
  sensors[6] = sensor7;
    35a4:	9b06      	ldr	r3, [sp, #24]
    35a6:	6183      	str	r3, [r0, #24]
  sensors[7] = sensor8;
    35a8:	9b07      	ldr	r3, [sp, #28]
    35aa:	61c3      	str	r3, [r0, #28]
  sensors[8] = sensor9;
    35ac:	9b08      	ldr	r3, [sp, #32]
    35ae:	6203      	str	r3, [r0, #32]
  sensors[9] = sensor10;
    35b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    35b2:	6243      	str	r3, [r0, #36]	; 0x24
  sensors[10] = sensor11;
    35b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    35b6:	6283      	str	r3, [r0, #40]	; 0x28
  sensors[11] = sensor12;
    35b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    35ba:	62c3      	str	r3, [r0, #44]	; 0x2c
  sensors[12] = sensor13;
    35bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    35be:	6303      	str	r3, [r0, #48]	; 0x30
  sensors[13] = sensor14;
    35c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    35c2:	6343      	str	r3, [r0, #52]	; 0x34
  sensors[14] = sensor15;
    35c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    35c6:	6383      	str	r3, [r0, #56]	; 0x38
  sensors[15] = sensor16;
    35c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    35ca:	63c3      	str	r3, [r0, #60]	; 0x3c
  sensors[16] = sensor17;
    35cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    35ce:	6403      	str	r3, [r0, #64]	; 0x40
  sensors[17] = sensor18;
    35d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    35d2:	6443      	str	r3, [r0, #68]	; 0x44
  sensors[18] = sensor19;
    35d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    35d6:	6483      	str	r3, [r0, #72]	; 0x48
  sensors[19] = sensor20;
    35d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    35da:	64c3      	str	r3, [r0, #76]	; 0x4c
  sensors[20] = sensor21;
    35dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
    35de:	6503      	str	r3, [r0, #80]	; 0x50
  sensors[21] = sensor22;
    35e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    35e2:	6543      	str	r3, [r0, #84]	; 0x54
  sensors[22] = sensor23;
    35e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    35e6:	6583      	str	r3, [r0, #88]	; 0x58
  sensors[23] = sensor24;
    35e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    35ea:	65c3      	str	r3, [r0, #92]	; 0x5c
  sensors[24] = sensor25;
    35ec:	9b18      	ldr	r3, [sp, #96]	; 0x60
    35ee:	6603      	str	r3, [r0, #96]	; 0x60
  sensors[25] = sensor26;
    35f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    35f2:	6643      	str	r3, [r0, #100]	; 0x64
  sensors[26] = sensor27;
    35f4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    35f6:	6683      	str	r3, [r0, #104]	; 0x68
  sensors[27] = sensor28;
    35f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    35fa:	66c3      	str	r3, [r0, #108]	; 0x6c
  for(sensorCount = 0; sensorCount < FRSKY_TELEMETRY_MAX_SENSORS; sensorCount++)
    35fc:	2300      	movs	r3, #0
    35fe:	7013      	strb	r3, [r2, #0]
    3600:	7813      	ldrb	r3, [r2, #0]
    3602:	2b1b      	cmp	r3, #27
    3604:	dc05      	bgt.n	3612 <_ZN19FrSkySportTelemetry5beginEP4UartP16FrSkySportSensorS3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_+0x88>
  {
    if(sensors[sensorCount] == NULL) break;
    3606:	009c      	lsls	r4, r3, #2
    3608:	5824      	ldr	r4, [r4, r0]
    360a:	2c00      	cmp	r4, #0
    360c:	d001      	beq.n	3612 <_ZN19FrSkySportTelemetry5beginEP4UartP16FrSkySportSensorS3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_+0x88>
  for(sensorCount = 0; sensorCount < FRSKY_TELEMETRY_MAX_SENSORS; sensorCount++)
    360e:	3301      	adds	r3, #1
    3610:	e7f5      	b.n	35fe <_ZN19FrSkySportTelemetry5beginEP4UartP16FrSkySportSensorS3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_+0x74>
  }

  FrSkySportTelemetry::serial.begin(ptr1);
    3612:	3070      	adds	r0, #112	; 0x70
    3614:	f7ff ff20 	bl	3458 <_ZN26FrSkySportSingleWireSerial5beginEP4Uart>
}
    3618:	bd10      	pop	{r4, pc}

0000361a <_ZN19FrSkySportTelemetry4sendEv>:

void FrSkySportTelemetry::send()
{
  if(serial.port != NULL)
    361a:	6f03      	ldr	r3, [r0, #112]	; 0x70
{
    361c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    361e:	0004      	movs	r4, r0
  if(serial.port != NULL)
    3620:	2b00      	cmp	r3, #0
    3622:	d02e      	beq.n	3682 <_ZN19FrSkySportTelemetry4sendEv+0x68>
  {
    uint8_t polledId = FrSkySportSensor::ID_IGNORE;
    uint32_t now = millis();
    3624:	f002 fd0a 	bl	603c <millis>

    if(pollingClass != NULL)
    3628:	1d23      	adds	r3, r4, #4
    362a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    uint32_t now = millis();
    362c:	9001      	str	r0, [sp, #4]
    if(pollingClass != NULL)
    362e:	2b00      	cmp	r3, #0
    3630:	d127      	bne.n	3682 <_ZN19FrSkySportTelemetry4sendEv+0x68>
    {
  //    polledId = pollingClass->pollData(serial, now);
    }
    else
    {
      if(serial.port->available())
    3632:	6f20      	ldr	r0, [r4, #112]	; 0x70
    3634:	6803      	ldr	r3, [r0, #0]
    3636:	691b      	ldr	r3, [r3, #16]
    3638:	4798      	blx	r3
    363a:	2800      	cmp	r0, #0
    363c:	d021      	beq.n	3682 <_ZN19FrSkySportTelemetry4sendEv+0x68>
      {
        uint8_t data = serial.port->read();
    363e:	6f20      	ldr	r0, [r4, #112]	; 0x70
    uint8_t polledId = FrSkySportSensor::ID_IGNORE;
    3640:	26ff      	movs	r6, #255	; 0xff
        uint8_t data = serial.port->read();
    3642:	6803      	ldr	r3, [r0, #0]
    3644:	695b      	ldr	r3, [r3, #20]
    3646:	4798      	blx	r3
        if(prevData == FRSKY_TELEMETRY_START_FRAME) polledId = data;
    3648:	0023      	movs	r3, r4
    364a:	337d      	adds	r3, #125	; 0x7d
    364c:	781a      	ldrb	r2, [r3, #0]
        uint8_t data = serial.port->read();
    364e:	b2c0      	uxtb	r0, r0
        if(prevData == FRSKY_TELEMETRY_START_FRAME) polledId = data;
    3650:	2a7e      	cmp	r2, #126	; 0x7e
    3652:	d100      	bne.n	3656 <_ZN19FrSkySportTelemetry4sendEv+0x3c>
    3654:	0006      	movs	r6, r0
        prevData = data;
    3656:	7018      	strb	r0, [r3, #0]
      }
    }

    if(polledId != FrSkySportSensor::ID_IGNORE) 
    3658:	2eff      	cmp	r6, #255	; 0xff
    365a:	d012      	beq.n	3682 <_ZN19FrSkySportTelemetry4sendEv+0x68>
    365c:	2500      	movs	r5, #0
    {
      // Send the actual data
      for(uint8_t i = 0; i < sensorCount; i++)
    365e:	0023      	movs	r3, r4
    3660:	337c      	adds	r3, #124	; 0x7c
    3662:	781b      	ldrb	r3, [r3, #0]
    3664:	429d      	cmp	r5, r3
    3666:	da0c      	bge.n	3682 <_ZN19FrSkySportTelemetry4sendEv+0x68>
      {
        sensors[i]->send(serial, polledId, now);
    3668:	0021      	movs	r1, r4
    366a:	00ab      	lsls	r3, r5, #2
    366c:	5918      	ldr	r0, [r3, r4]
    366e:	0032      	movs	r2, r6
    3670:	6803      	ldr	r3, [r0, #0]
    3672:	3170      	adds	r1, #112	; 0x70
    3674:	681b      	ldr	r3, [r3, #0]
      for(uint8_t i = 0; i < sensorCount; i++)
    3676:	3501      	adds	r5, #1
        sensors[i]->send(serial, polledId, now);
    3678:	001f      	movs	r7, r3
    367a:	9b01      	ldr	r3, [sp, #4]
    367c:	47b8      	blx	r7
      for(uint8_t i = 0; i < sensorCount; i++)
    367e:	b2ed      	uxtb	r5, r5
    3680:	e7ed      	b.n	365e <_ZN19FrSkySportTelemetry4sendEv+0x44>
      }
    }
  }
}
    3682:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

00003684 <_ZN10GPSL80LiteC1Ev>:

#define MAX_LAT_SIZE 9	
#define MAX_LONG_SIZE 10	


struct GpsDataLite
    3684:	0002      	movs	r2, r0

Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
{
*/

GPSL80Lite::GPSL80Lite()
    3686:	2300      	movs	r3, #0
    3688:	324d      	adds	r2, #77	; 0x4d
    368a:	7003      	strb	r3, [r0, #0]
    368c:	7043      	strb	r3, [r0, #1]
    368e:	6043      	str	r3, [r0, #4]
    3690:	7203      	strb	r3, [r0, #8]
    3692:	7243      	strb	r3, [r0, #9]
    3694:	7283      	strb	r3, [r0, #10]
    3696:	60c3      	str	r3, [r0, #12]
    3698:	7013      	strb	r3, [r2, #0]
    369a:	70d3      	strb	r3, [r2, #3]
    369c:	7193      	strb	r3, [r2, #6]
    369e:	71d3      	strb	r3, [r2, #7]
    36a0:	7213      	strb	r3, [r2, #8]
{
}
    36a2:	4770      	bx	lr

000036a4 <_ZN10GPSL80Lite13resetTempDataEv>:
		
	return dummy;
}

void GPSL80Lite::resetTempData()
{
    36a4:	b510      	push	{r4, lr}
	uint8_t a = 0;

	tempData.UTCTime=0;	
    36a6:	2300      	movs	r3, #0
    36a8:	0002      	movs	r2, r0
    36aa:	0004      	movs	r4, r0
	for(a=0;a<MAX_LAT_SIZE;a++){
		tempData.LatitudeDEG[a] = 0;
    36ac:	2100      	movs	r1, #0
	tempData.UTCTime=0;	
    36ae:	6103      	str	r3, [r0, #16]
    36b0:	3217      	adds	r2, #23
    36b2:	3420      	adds	r4, #32
	for(a=0;a<MAX_LAT_SIZE;a++){
    36b4:	42a2      	cmp	r2, r4
    36b6:	d002      	beq.n	36be <_ZN10GPSL80Lite13resetTempDataEv+0x1a>
		tempData.LatitudeDEG[a] = 0;
    36b8:	7011      	strb	r1, [r2, #0]
    36ba:	3201      	adds	r2, #1
	for(a=0;a<MAX_LAT_SIZE;a++){
    36bc:	e7fa      	b.n	36b4 <_ZN10GPSL80Lite13resetTempDataEv+0x10>
    36be:	0001      	movs	r1, r0
    36c0:	0004      	movs	r4, r0
    36c2:	2200      	movs	r2, #0
    36c4:	3122      	adds	r1, #34	; 0x22
    36c6:	342c      	adds	r4, #44	; 0x2c
	}	
	for(a=0;a<MAX_LONG_SIZE;a++){
    36c8:	42a1      	cmp	r1, r4
    36ca:	d002      	beq.n	36d2 <_ZN10GPSL80Lite13resetTempDataEv+0x2e>
		tempData.LongitudeDEG[a] = 0;
    36cc:	700a      	strb	r2, [r1, #0]
    36ce:	3101      	adds	r1, #1
	for(a=0;a<MAX_LONG_SIZE;a++){
    36d0:	e7fa      	b.n	36c8 <_ZN10GPSL80Lite13resetTempDataEv+0x24>
	}
	tempData.Latitude = 0;
	tempData.Longitude = 0;
	tempData.LatitudeDIR='*';
    36d2:	212a      	movs	r1, #42	; 0x2a
    36d4:	1c84      	adds	r4, r0, #2
	tempData.Latitude = 0;
    36d6:	6302      	str	r2, [r0, #48]	; 0x30
	tempData.Longitude = 0;
    36d8:	6342      	str	r2, [r0, #52]	; 0x34
	tempData.LatitudeDIR='*';
    36da:	77e1      	strb	r1, [r4, #31]
	tempData.LongitudeDIR='*';
    36dc:	342b      	adds	r4, #43	; 0x2b
	tempData.Fix = '*';
	tempData.FixDecimal = 0;
    36de:	7522      	strb	r2, [r4, #20]
	tempData.NumberOfSatellites = 0;
    36e0:	7562      	strb	r2, [r4, #21]
	tempData.HDOP = 0;
	tempData.Altitude = 0;
	tempData.AltitudeUnit = '*';
    36e2:	0002      	movs	r2, r0
    36e4:	324c      	adds	r2, #76	; 0x4c
	tempData.LongitudeDIR='*';
    36e6:	7021      	strb	r1, [r4, #0]
	tempData.Fix = '*';
    36e8:	74e1      	strb	r1, [r4, #19]
	tempData.HDOP = 0;
    36ea:	6443      	str	r3, [r0, #68]	; 0x44
	tempData.Altitude = 0;
    36ec:	6483      	str	r3, [r0, #72]	; 0x48
	tempData.AltitudeUnit = '*';
    36ee:	7011      	strb	r1, [r2, #0]
	tempData.LatitudeDecimal = 0;
    36f0:	6383      	str	r3, [r0, #56]	; 0x38
	tempData.LongitudeDecimal = 0;
    36f2:	63c3      	str	r3, [r0, #60]	; 0x3c
}
    36f4:	bd10      	pop	{r4, pc}
	...

000036f8 <_ZN10GPSL80Lite10updateDataEv>:

void GPSL80Lite::updateData()
{
    36f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	//	130532
	uint8_t a = 0;
	dataOut->UTCTime=tempData.UTCTime;
    36fa:	68c3      	ldr	r3, [r0, #12]
    36fc:	6902      	ldr	r2, [r0, #16]
{
    36fe:	0004      	movs	r4, r0
	dataOut->UTCTime=tempData.UTCTime;
    3700:	601a      	str	r2, [r3, #0]
	uint32_t secconds;
	uint32_t minutes;
	uint32_t hours;
		
	hours = tempData.UTCTime / 10000;
    3702:	6906      	ldr	r6, [r0, #16]
    3704:	4980      	ldr	r1, [pc, #512]	; (3908 <_ZN10GPSL80Lite10updateDataEv+0x210>)
    3706:	1c30      	adds	r0, r6, #0
	dataOut->UTCTime=tempData.UTCTime;
    3708:	9301      	str	r3, [sp, #4]
	hours = tempData.UTCTime / 10000;
    370a:	f005 fa93 	bl	8c34 <__aeabi_fdiv>
    370e:	f005 f8c9 	bl	88a4 <__aeabi_f2uiz>
	minutes = tempData.UTCTime / 100 - hours*100;
    3712:	497e      	ldr	r1, [pc, #504]	; (390c <_ZN10GPSL80Lite10updateDataEv+0x214>)
	hours = tempData.UTCTime / 10000;
    3714:	0005      	movs	r5, r0
	minutes = tempData.UTCTime / 100 - hours*100;
    3716:	1c30      	adds	r0, r6, #0
    3718:	f005 fa8c 	bl	8c34 <__aeabi_fdiv>
    371c:	1c07      	adds	r7, r0, #0
    371e:	2064      	movs	r0, #100	; 0x64
    3720:	4368      	muls	r0, r5
    3722:	f005 ffa3 	bl	966c <__aeabi_ui2f>
    3726:	1c01      	adds	r1, r0, #0
    3728:	1c38      	adds	r0, r7, #0
    372a:	f005 fd93 	bl	9254 <__aeabi_fsub>
    372e:	f005 f8b9 	bl	88a4 <__aeabi_f2uiz>
    3732:	0007      	movs	r7, r0
	secconds = tempData.UTCTime - hours*10000 - minutes*100;
    3734:	4876      	ldr	r0, [pc, #472]	; (3910 <_ZN10GPSL80Lite10updateDataEv+0x218>)
    3736:	4368      	muls	r0, r5
    3738:	f005 ff98 	bl	966c <__aeabi_ui2f>
    373c:	1c01      	adds	r1, r0, #0
    373e:	1c30      	adds	r0, r6, #0
    3740:	f005 fd88 	bl	9254 <__aeabi_fsub>
    3744:	1c06      	adds	r6, r0, #0
    3746:	2064      	movs	r0, #100	; 0x64
    3748:	4378      	muls	r0, r7
    374a:	f005 ff8f 	bl	966c <__aeabi_ui2f>
    374e:	1c01      	adds	r1, r0, #0
    3750:	1c30      	adds	r0, r6, #0
    3752:	f005 fd7f 	bl	9254 <__aeabi_fsub>
    3756:	f005 f8a5 	bl	88a4 <__aeabi_f2uiz>
	dataOut->UTC_sec = (uint8_t)secconds;
    375a:	9b01      	ldr	r3, [sp, #4]
    375c:	7118      	strb	r0, [r3, #4]
	dataOut->UTC_min = (uint8_t)minutes;
    375e:	68e3      	ldr	r3, [r4, #12]
    3760:	715f      	strb	r7, [r3, #5]
	dataOut->UTC_hour = (uint8_t)hours;
    3762:	68e3      	ldr	r3, [r4, #12]
    3764:	719d      	strb	r5, [r3, #6]
    3766:	2300      	movs	r3, #0
		
	for(a=0;a<MAX_LAT_SIZE;a++){
    3768:	001a      	movs	r2, r3
    376a:	3301      	adds	r3, #1
    376c:	2b0a      	cmp	r3, #10
    376e:	d10b      	bne.n	3788 <_ZN10GPSL80Lite10updateDataEv+0x90>
    3770:	2300      	movs	r3, #0
    3772:	1c5a      	adds	r2, r3, #1
    3774:	68e5      	ldr	r5, [r4, #12]
		dataOut->LatitudeDEG[a]=tempData.LatitudeDEG[a];
	}
	for(a=0;a<MAX_LONG_SIZE;a++){
    3776:	2a0b      	cmp	r2, #11
    3778:	d00c      	beq.n	3794 <_ZN10GPSL80Lite10updateDataEv+0x9c>
		dataOut->LongitudeDEG[a]=tempData.LongitudeDEG[a];
    377a:	0019      	movs	r1, r3
    377c:	3122      	adds	r1, #34	; 0x22
    377e:	5c61      	ldrb	r1, [r4, r1]
    3780:	18ed      	adds	r5, r5, r3
    3782:	74a9      	strb	r1, [r5, #18]
	for(a=0;a<MAX_LONG_SIZE;a++){
    3784:	0013      	movs	r3, r2
    3786:	e7f4      	b.n	3772 <_ZN10GPSL80Lite10updateDataEv+0x7a>
		dataOut->LatitudeDEG[a]=tempData.LatitudeDEG[a];
    3788:	68e0      	ldr	r0, [r4, #12]
    378a:	18e1      	adds	r1, r4, r3
    378c:	7d89      	ldrb	r1, [r1, #22]
    378e:	1882      	adds	r2, r0, r2
    3790:	71d1      	strb	r1, [r2, #7]
	for(a=0;a<MAX_LAT_SIZE;a++){
    3792:	e7e9      	b.n	3768 <_ZN10GPSL80Lite10updateDataEv+0x70>
/*
	Serial.println();
	Serial.println(":" + String(tempData.LatitudeDEG) + ":");
	*/
	int32_t factor = 10000000;
	if(tempData.LatitudeDEG[0] != 0)
    3794:	7de3      	ldrb	r3, [r4, #23]
    3796:	2b00      	cmp	r3, #0
    3798:	d025      	beq.n	37e6 <_ZN10GPSL80Lite10updateDataEv+0xee>
	{
		dataOut->Latitude = 0;
    379a:	2300      	movs	r3, #0
    379c:	622b      	str	r3, [r5, #32]
    379e:	0023      	movs	r3, r4
    37a0:	0026      	movs	r6, r4
			if(tempData.LatitudeDEG[a] != '.'){ // Don't convert the dot!
				//			Serial.println("Input for a=" + String(a) + " :" + String(tempData.LatitudeDEG[a])+":");
				//		    Serial.println("Factor=" + String(factor) );
				dataOut->Latitude += charToInt(tempData.LatitudeDEG[a]) * factor;
				//			Serial.println("Output for a=" + String(a) + " :" + String(dataOut->Latitude)+":");
				factor /= 10;
    37a2:	270a      	movs	r7, #10
    37a4:	3320      	adds	r3, #32
	int32_t factor = 10000000;
    37a6:	485b      	ldr	r0, [pc, #364]	; (3914 <_ZN10GPSL80Lite10updateDataEv+0x21c>)
    37a8:	3617      	adds	r6, #23
    37aa:	9301      	str	r3, [sp, #4]
		for(a=0;a<MAX_LAT_SIZE;a++){
    37ac:	9b01      	ldr	r3, [sp, #4]
    37ae:	42b3      	cmp	r3, r6
    37b0:	d012      	beq.n	37d8 <_ZN10GPSL80Lite10updateDataEv+0xe0>
			if(tempData.LatitudeDEG[a] != '.'){ // Don't convert the dot!
    37b2:	7831      	ldrb	r1, [r6, #0]
    37b4:	292e      	cmp	r1, #46	; 0x2e
    37b6:	d00d      	beq.n	37d4 <_ZN10GPSL80Lite10updateDataEv+0xdc>
		dummy = dummy - 48;
    37b8:	000b      	movs	r3, r1
    37ba:	3b30      	subs	r3, #48	; 0x30
    37bc:	b2db      	uxtb	r3, r3
	if(dummy > 57) // Must be A-F
    37be:	2939      	cmp	r1, #57	; 0x39
    37c0:	dd01      	ble.n	37c6 <_ZN10GPSL80Lite10updateDataEv+0xce>
		dummy = dummy - 55;		
    37c2:	3937      	subs	r1, #55	; 0x37
    37c4:	b2cb      	uxtb	r3, r1
				dataOut->Latitude += charToInt(tempData.LatitudeDEG[a]) * factor;
    37c6:	4343      	muls	r3, r0
    37c8:	6a2a      	ldr	r2, [r5, #32]
				factor /= 10;
    37ca:	0039      	movs	r1, r7
				dataOut->Latitude += charToInt(tempData.LatitudeDEG[a]) * factor;
    37cc:	18d3      	adds	r3, r2, r3
    37ce:	622b      	str	r3, [r5, #32]
				factor /= 10;
    37d0:	f004 ff04 	bl	85dc <__divsi3>
    37d4:	3601      	adds	r6, #1
		for(a=0;a<MAX_LAT_SIZE;a++){
    37d6:	e7e9      	b.n	37ac <_ZN10GPSL80Lite10updateDataEv+0xb4>
			}
		}
		if(tempData.LatitudeDIR == 'S'){
    37d8:	1ca3      	adds	r3, r4, #2
    37da:	7fdb      	ldrb	r3, [r3, #31]
    37dc:	2b53      	cmp	r3, #83	; 0x53
    37de:	d102      	bne.n	37e6 <_ZN10GPSL80Lite10updateDataEv+0xee>
			dataOut->Latitude *= -1;
    37e0:	6a2b      	ldr	r3, [r5, #32]
    37e2:	425b      	negs	r3, r3
    37e4:	622b      	str	r3, [r5, #32]
		}

	}
	float Degrees = (float)(dataOut->Latitude / 1000000);
    37e6:	6a2f      	ldr	r7, [r5, #32]
    37e8:	494b      	ldr	r1, [pc, #300]	; (3918 <_ZN10GPSL80Lite10updateDataEv+0x220>)
    37ea:	0038      	movs	r0, r7
    37ec:	f004 fef6 	bl	85dc <__divsi3>
    37f0:	f005 feec 	bl	95cc <__aeabi_i2f>
    37f4:	1c06      	adds	r6, r0, #0
	float Minutes = ((float)(dataOut->Latitude) / 10000) - (Degrees * 100);
    37f6:	0038      	movs	r0, r7
    37f8:	f005 fee8 	bl	95cc <__aeabi_i2f>
    37fc:	4942      	ldr	r1, [pc, #264]	; (3908 <_ZN10GPSL80Lite10updateDataEv+0x210>)
    37fe:	f005 fa19 	bl	8c34 <__aeabi_fdiv>
    3802:	4942      	ldr	r1, [pc, #264]	; (390c <_ZN10GPSL80Lite10updateDataEv+0x214>)
    3804:	1c07      	adds	r7, r0, #0
    3806:	1c30      	adds	r0, r6, #0
    3808:	f005 fc04 	bl	9014 <__aeabi_fmul>
    380c:	1c01      	adds	r1, r0, #0
    380e:	1c38      	adds	r0, r7, #0
    3810:	f005 fd20 	bl	9254 <__aeabi_fsub>
	dataOut->LatitudeDecimal = Degrees + Minutes/60;
    3814:	4941      	ldr	r1, [pc, #260]	; (391c <_ZN10GPSL80Lite10updateDataEv+0x224>)
    3816:	f005 fa0d 	bl	8c34 <__aeabi_fdiv>
    381a:	1c31      	adds	r1, r6, #0
    381c:	f005 f878 	bl	8910 <__aeabi_fadd>
	tempData.LongitudeDEG[7] = '2';
	tempData.LongitudeDEG[8] = '3';
	tempData.LongitudeDEG[9] = '4';
	tempData.LongitudeDIR = 'W';
	*/
	if(tempData.LongitudeDEG[0] != 0)
    3820:	1ce3      	adds	r3, r4, #3
	dataOut->LatitudeDecimal = Degrees + Minutes/60;
    3822:	62a8      	str	r0, [r5, #40]	; 0x28
	if(tempData.LongitudeDEG[0] != 0)
    3824:	7fdb      	ldrb	r3, [r3, #31]
    3826:	2b00      	cmp	r3, #0
    3828:	d026      	beq.n	3878 <_ZN10GPSL80Lite10updateDataEv+0x180>
	{
		factor = 100000000;
		dataOut->Longitude = 0;
    382a:	2300      	movs	r3, #0
    382c:	626b      	str	r3, [r5, #36]	; 0x24
    382e:	0023      	movs	r3, r4
    3830:	0026      	movs	r6, r4
			if(tempData.LongitudeDEG[a] != '.'){ // Don't convert the dot!
//							   Serial.println("Input for a=" + String(a) + " :" + String(tempData.LongitudeDEG[a])+":");
//							   Serial.println("Factor=" + String(factor) );
				dataOut->Longitude += charToInt(tempData.LongitudeDEG[a]) * factor;
				 			//Serial.println("Output for a=" + String(a) + " :" + String(dataOut->Longitude)+":");
				factor /= 10;
    3832:	270a      	movs	r7, #10
    3834:	332c      	adds	r3, #44	; 0x2c
		factor = 100000000;
    3836:	483a      	ldr	r0, [pc, #232]	; (3920 <_ZN10GPSL80Lite10updateDataEv+0x228>)
    3838:	3622      	adds	r6, #34	; 0x22
    383a:	9301      	str	r3, [sp, #4]
		for(a=0;a<MAX_LONG_SIZE;a++){
    383c:	9b01      	ldr	r3, [sp, #4]
    383e:	42b3      	cmp	r3, r6
    3840:	d012      	beq.n	3868 <_ZN10GPSL80Lite10updateDataEv+0x170>
			if(tempData.LongitudeDEG[a] != '.'){ // Don't convert the dot!
    3842:	7831      	ldrb	r1, [r6, #0]
    3844:	292e      	cmp	r1, #46	; 0x2e
    3846:	d00d      	beq.n	3864 <_ZN10GPSL80Lite10updateDataEv+0x16c>
		dummy = dummy - 48;
    3848:	000b      	movs	r3, r1
    384a:	3b30      	subs	r3, #48	; 0x30
    384c:	b2db      	uxtb	r3, r3
	if(dummy > 57) // Must be A-F
    384e:	2939      	cmp	r1, #57	; 0x39
    3850:	dd01      	ble.n	3856 <_ZN10GPSL80Lite10updateDataEv+0x15e>
		dummy = dummy - 55;		
    3852:	3937      	subs	r1, #55	; 0x37
    3854:	b2cb      	uxtb	r3, r1
				dataOut->Longitude += charToInt(tempData.LongitudeDEG[a]) * factor;
    3856:	4343      	muls	r3, r0
    3858:	6a6a      	ldr	r2, [r5, #36]	; 0x24
				factor /= 10;
    385a:	0039      	movs	r1, r7
				dataOut->Longitude += charToInt(tempData.LongitudeDEG[a]) * factor;
    385c:	18d3      	adds	r3, r2, r3
    385e:	626b      	str	r3, [r5, #36]	; 0x24
				factor /= 10;
    3860:	f004 febc 	bl	85dc <__divsi3>
    3864:	3601      	adds	r6, #1
		for(a=0;a<MAX_LONG_SIZE;a++){
    3866:	e7e9      	b.n	383c <_ZN10GPSL80Lite10updateDataEv+0x144>
			}
		}
		if(tempData.LongitudeDIR == 'W'){
    3868:	0023      	movs	r3, r4
    386a:	332d      	adds	r3, #45	; 0x2d
    386c:	781b      	ldrb	r3, [r3, #0]
    386e:	2b57      	cmp	r3, #87	; 0x57
    3870:	d102      	bne.n	3878 <_ZN10GPSL80Lite10updateDataEv+0x180>
			dataOut->Longitude *= -1;
    3872:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3874:	425b      	negs	r3, r3
    3876:	626b      	str	r3, [r5, #36]	; 0x24
	So the complete formula looks similar the following:
	Decimal value = (Degrees + (Minutes/60) + (Seconds/3600) )(*-1 if S or W)
	*/
	// 01224.0718E -> 12240718 || 01224.0718W -> -12240718
//	Serial.println("Longitude uint: " + String(dataOut->Longitude));	
	Degrees = (float)(dataOut->Longitude / 1000000);
    3878:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    387a:	4927      	ldr	r1, [pc, #156]	; (3918 <_ZN10GPSL80Lite10updateDataEv+0x220>)
    387c:	0038      	movs	r0, r7
    387e:	f004 fead 	bl	85dc <__divsi3>
    3882:	f005 fea3 	bl	95cc <__aeabi_i2f>
    3886:	1c06      	adds	r6, r0, #0
//	Serial.println("");
//	Serial.println("Degrees: " + String(Degrees,4));	
	Minutes = ((float)(dataOut->Longitude) / 10000) - (Degrees * 100);
    3888:	0038      	movs	r0, r7
    388a:	f005 fe9f 	bl	95cc <__aeabi_i2f>
    388e:	491e      	ldr	r1, [pc, #120]	; (3908 <_ZN10GPSL80Lite10updateDataEv+0x210>)
    3890:	f005 f9d0 	bl	8c34 <__aeabi_fdiv>
    3894:	491d      	ldr	r1, [pc, #116]	; (390c <_ZN10GPSL80Lite10updateDataEv+0x214>)
    3896:	1c07      	adds	r7, r0, #0
    3898:	1c30      	adds	r0, r6, #0
    389a:	f005 fbbb 	bl	9014 <__aeabi_fmul>
    389e:	1c01      	adds	r1, r0, #0
    38a0:	1c38      	adds	r0, r7, #0
    38a2:	f005 fcd7 	bl	9254 <__aeabi_fsub>
//	Serial.println("Minutes: " + String(Minutes,4));
//	
//				   -12
//					   -1224.0718 + 1200 = 1200 - 1224.0718 = -24,0718 	
	
	dataOut->LongitudeDecimal = Degrees + Minutes/60;
    38a6:	491d      	ldr	r1, [pc, #116]	; (391c <_ZN10GPSL80Lite10updateDataEv+0x224>)
    38a8:	f005 f9c4 	bl	8c34 <__aeabi_fdiv>
    38ac:	1c31      	adds	r1, r6, #0
    38ae:	f005 f82f 	bl	8910 <__aeabi_fadd>
	Serial.println(":" + String(tempData.LongitudeDIR) + ":");
	Serial.println(":" + String(dataOut->Latitude) + ":");
	Serial.println(":" + String(dataOut->Longitude) + ":");
	Serial.println("");*/

	dataOut->LatitudeDIR=tempData.LatitudeDIR;
    38b2:	1ca3      	adds	r3, r4, #2
	dataOut->LongitudeDecimal = Degrees + Minutes/60;
    38b4:	62e8      	str	r0, [r5, #44]	; 0x2c
	dataOut->LatitudeDIR=tempData.LatitudeDIR;
    38b6:	7fdb      	ldrb	r3, [r3, #31]
    38b8:	746b      	strb	r3, [r5, #17]
	dataOut->LongitudeDIR=tempData.LongitudeDIR;
    38ba:	0023      	movs	r3, r4
    38bc:	332d      	adds	r3, #45	; 0x2d
    38be:	68e2      	ldr	r2, [r4, #12]
    38c0:	781b      	ldrb	r3, [r3, #0]
    38c2:	7753      	strb	r3, [r2, #29]
	dataOut->Fix=tempData.Fix;
    38c4:	0023      	movs	r3, r4
    38c6:	3340      	adds	r3, #64	; 0x40
    38c8:	781a      	ldrb	r2, [r3, #0]
    38ca:	68e3      	ldr	r3, [r4, #12]
    38cc:	3330      	adds	r3, #48	; 0x30
    38ce:	701a      	strb	r2, [r3, #0]
	dataOut->FixDecimal=tempData.FixDecimal;
    38d0:	0023      	movs	r3, r4
    38d2:	3341      	adds	r3, #65	; 0x41
    38d4:	781a      	ldrb	r2, [r3, #0]
    38d6:	68e3      	ldr	r3, [r4, #12]
    38d8:	3331      	adds	r3, #49	; 0x31
    38da:	701a      	strb	r2, [r3, #0]
	dataOut->NumberOfSatellites=tempData.NumberOfSatellites;
    38dc:	0023      	movs	r3, r4
    38de:	3342      	adds	r3, #66	; 0x42
    38e0:	781a      	ldrb	r2, [r3, #0]
    38e2:	68e3      	ldr	r3, [r4, #12]
    38e4:	3332      	adds	r3, #50	; 0x32
    38e6:	701a      	strb	r2, [r3, #0]
	dataOut->HDOP=tempData.HDOP;
    38e8:	68e3      	ldr	r3, [r4, #12]
    38ea:	6c62      	ldr	r2, [r4, #68]	; 0x44
    38ec:	635a      	str	r2, [r3, #52]	; 0x34
	dataOut->Altitude=tempData.Altitude;
    38ee:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    38f0:	639a      	str	r2, [r3, #56]	; 0x38
	dataOut->AltitudeUnit=tempData.AltitudeUnit;
    38f2:	0022      	movs	r2, r4
    38f4:	324c      	adds	r2, #76	; 0x4c
    38f6:	7812      	ldrb	r2, [r2, #0]
    38f8:	333c      	adds	r3, #60	; 0x3c
    38fa:	701a      	strb	r2, [r3, #0]
	dataOut->DataIsValid=true;
    38fc:	2201      	movs	r2, #1
    38fe:	68e3      	ldr	r3, [r4, #12]
    3900:	333d      	adds	r3, #61	; 0x3d
    3902:	701a      	strb	r2, [r3, #0]
}
    3904:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3906:	46c0      	nop			; (mov r8, r8)
    3908:	461c4000 	.word	0x461c4000
    390c:	42c80000 	.word	0x42c80000
    3910:	00002710 	.word	0x00002710
    3914:	00989680 	.word	0x00989680
    3918:	000f4240 	.word	0x000f4240
    391c:	42700000 	.word	0x42700000
    3920:	05f5e100 	.word	0x05f5e100

00003924 <_ZN10GPSL80Lite4initEP4UartP11GpsDataLitemii>:
{
    3924:	b570      	push	{r4, r5, r6, lr}
    3926:	0004      	movs	r4, r0
    3928:	001d      	movs	r5, r3
	dataOut->DataIsValid = false;
    392a:	2300      	movs	r3, #0
	SerialGPS->begin(9600); // 9600 is default baud after power cycle.. which we don't do here but assumes had been done.
    392c:	2696      	movs	r6, #150	; 0x96
	dataOut =  ptr2;
    392e:	60e2      	str	r2, [r4, #12]
	dataOut->DataIsValid = false;
    3930:	323d      	adds	r2, #61	; 0x3d
	SerialGPS = ptr1;
    3932:	6061      	str	r1, [r4, #4]
	dataOut->DataIsValid = false;
    3934:	7013      	strb	r3, [r2, #0]
	SerialGPS->begin(9600); // 9600 is default baud after power cycle.. which we don't do here but assumes had been done.
    3936:	680b      	ldr	r3, [r1, #0]
    3938:	01b6      	lsls	r6, r6, #6
    393a:	69db      	ldr	r3, [r3, #28]
{
    393c:	0008      	movs	r0, r1
	SerialGPS->begin(9600); // 9600 is default baud after power cycle.. which we don't do here but assumes had been done.
    393e:	0031      	movs	r1, r6
    3940:	4798      	blx	r3
		pinPeripheral(txPin, PIO_SERCOM_ALT); //Assign TX function to GPS TX pin.
    3942:	2103      	movs	r1, #3
    3944:	9805      	ldr	r0, [sp, #20]
    3946:	f004 f8dd 	bl	7b04 <pinPeripheral>
		pinPeripheral(rxPin, PIO_SERCOM_ALT); //Assign RX function to GPS RX pin.
    394a:	2103      	movs	r1, #3
    394c:	9804      	ldr	r0, [sp, #16]
    394e:	f004 f8d9 	bl	7b04 <pinPeripheral>
	delay(1000);
    3952:	20fa      	movs	r0, #250	; 0xfa
    3954:	0080      	lsls	r0, r0, #2
    3956:	f002 fb77 	bl	6048 <delay>
	SerialGPS->println("$PMTK314,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29"); //Setup the GPS for only GPGGA output at 1Hz.
    395a:	4920      	ldr	r1, [pc, #128]	; (39dc <_ZN10GPSL80Lite4initEP4UartP11GpsDataLitemii+0xb8>)
    395c:	6860      	ldr	r0, [r4, #4]
    395e:	f002 fbf7 	bl	6150 <_ZN5Print7printlnEPKc>
	delay(1000);
    3962:	20fa      	movs	r0, #250	; 0xfa
    3964:	0080      	lsls	r0, r0, #2
    3966:	f002 fb6f 	bl	6048 <delay>
	 switch(baudrate){
    396a:	2396      	movs	r3, #150	; 0x96
    396c:	01db      	lsls	r3, r3, #7
    396e:	429d      	cmp	r5, r3
    3970:	d030      	beq.n	39d4 <_ZN10GPSL80Lite4initEP4UartP11GpsDataLitemii+0xb0>
    3972:	d810      	bhi.n	3996 <_ZN10GPSL80Lite4initEP4UartP11GpsDataLitemii+0x72>
    3974:	42b5      	cmp	r5, r6
    3976:	d028      	beq.n	39ca <_ZN10GPSL80Lite4initEP4UartP11GpsDataLitemii+0xa6>
		pinPeripheral(txPin, PIO_SERCOM_ALT); //Assign TX function to GPS TX pin.
    3978:	2103      	movs	r1, #3
    397a:	9805      	ldr	r0, [sp, #20]
    397c:	f004 f8c2 	bl	7b04 <pinPeripheral>
		pinPeripheral(rxPin, PIO_SERCOM_ALT); //Assign RX function to GPS RX pin.
    3980:	2103      	movs	r1, #3
    3982:	9804      	ldr	r0, [sp, #16]
    3984:	f004 f8be 	bl	7b04 <pinPeripheral>
	resetTempData();
    3988:	0020      	movs	r0, r4
    398a:	f7ff fe8b 	bl	36a4 <_ZN10GPSL80Lite13resetTempDataEv>
	updateData();	
    398e:	0020      	movs	r0, r4
    3990:	f7ff feb2 	bl	36f8 <_ZN10GPSL80Lite10updateDataEv>
}
    3994:	bd70      	pop	{r4, r5, r6, pc}
	 switch(baudrate){
    3996:	2396      	movs	r3, #150	; 0x96
    3998:	021b      	lsls	r3, r3, #8
    399a:	429d      	cmp	r5, r3
    399c:	d01c      	beq.n	39d8 <_ZN10GPSL80Lite4initEP4UartP11GpsDataLitemii+0xb4>
    399e:	23e1      	movs	r3, #225	; 0xe1
			SerialGPS->println("$PMTK251,57600*2C");     //Setup GPS serial speed for 57600. (This gives us less idle time thus saving power). This looks like i is too fast for the software serial on 8MMz.			
    39a0:	490f      	ldr	r1, [pc, #60]	; (39e0 <_ZN10GPSL80Lite4initEP4UartP11GpsDataLitemii+0xbc>)
	 switch(baudrate){
    39a2:	021b      	lsls	r3, r3, #8
    39a4:	429d      	cmp	r5, r3
    39a6:	d1e7      	bne.n	3978 <_ZN10GPSL80Lite4initEP4UartP11GpsDataLitemii+0x54>
			SerialGPS->println("$PMTK251,57600*2C");     //Setup GPS serial speed for 57600. (This gives us less idle time thus saving power). This looks like i is too fast for the software serial on 8MMz.			
    39a8:	6860      	ldr	r0, [r4, #4]
    39aa:	f002 fbd1 	bl	6150 <_ZN5Print7printlnEPKc>
			delay(1000);
    39ae:	20fa      	movs	r0, #250	; 0xfa
    39b0:	0080      	lsls	r0, r0, #2
    39b2:	f002 fb49 	bl	6048 <delay>
			SerialGPS->end();
    39b6:	6860      	ldr	r0, [r4, #4]
    39b8:	6803      	ldr	r3, [r0, #0]
    39ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    39bc:	4798      	blx	r3
			SerialGPS->begin(57600);  // GPS module uses 57600 as standard speed.*/
    39be:	6860      	ldr	r0, [r4, #4]
    39c0:	0029      	movs	r1, r5
    39c2:	6803      	ldr	r3, [r0, #0]
    39c4:	69db      	ldr	r3, [r3, #28]
    39c6:	4798      	blx	r3
		 break;
    39c8:	e7d6      	b.n	3978 <_ZN10GPSL80Lite4initEP4UartP11GpsDataLitemii+0x54>
			 delay(1000);
    39ca:	20fa      	movs	r0, #250	; 0xfa
    39cc:	0080      	lsls	r0, r0, #2
    39ce:	f002 fb3b 	bl	6048 <delay>
			 break;
    39d2:	e7d1      	b.n	3978 <_ZN10GPSL80Lite4initEP4UartP11GpsDataLitemii+0x54>
		    SerialGPS->println("$PMTK251,19200*22");    //Setup GPS serial speed for 19200. (This gives us less idle time thus saving power).			
    39d4:	4903      	ldr	r1, [pc, #12]	; (39e4 <_ZN10GPSL80Lite4initEP4UartP11GpsDataLitemii+0xc0>)
    39d6:	e7e7      	b.n	39a8 <_ZN10GPSL80Lite4initEP4UartP11GpsDataLitemii+0x84>
			SerialGPS->println("$PMTK251,38400*27");    //Setup GPS serial speed for 38400. (This gives us less idle time thus saving power).This looks like i is too fast for the software serial on 8MMz.			
    39d8:	4903      	ldr	r1, [pc, #12]	; (39e8 <_ZN10GPSL80Lite4initEP4UartP11GpsDataLitemii+0xc4>)
    39da:	e7e5      	b.n	39a8 <_ZN10GPSL80Lite4initEP4UartP11GpsDataLitemii+0x84>
    39dc:	0000d8c4 	.word	0x0000d8c4
    39e0:	0000d91a 	.word	0x0000d91a
    39e4:	0000d8f6 	.word	0x0000d8f6
    39e8:	0000d908 	.word	0x0000d908

000039ec <_ZN10GPSL80Lite10inputValidEc>:
	Serial.print(String(String(dataOut->Altitude)+dataOut->AltitudeUnit));
	Serial.println(":");
}

bool GPSL80Lite::inputValid(char input)
{
    39ec:	0002      	movs	r2, r0
	if((input == '\r') || (input == '$')) 
    39ee:	290d      	cmp	r1, #13
    39f0:	d002      	beq.n	39f8 <_ZN10GPSL80Lite10inputValidEc+0xc>
		if( ReadErrors < 255)
			ReadErrors++;
		state=LOOKING_FOR_START; // Go back to start							
		return 0;
	}
	return 1;		
    39f2:	2001      	movs	r0, #1
	if((input == '\r') || (input == '$')) 
    39f4:	2924      	cmp	r1, #36	; 0x24
    39f6:	d108      	bne.n	3a0a <_ZN10GPSL80Lite10inputValidEc+0x1e>
		if( ReadErrors < 255)
    39f8:	0011      	movs	r1, r2
    39fa:	3152      	adds	r1, #82	; 0x52
    39fc:	780b      	ldrb	r3, [r1, #0]
    39fe:	2bff      	cmp	r3, #255	; 0xff
    3a00:	d001      	beq.n	3a06 <_ZN10GPSL80Lite10inputValidEc+0x1a>
			ReadErrors++;
    3a02:	3301      	adds	r3, #1
    3a04:	700b      	strb	r3, [r1, #0]
		state=LOOKING_FOR_START; // Go back to start							
    3a06:	2000      	movs	r0, #0
    3a08:	7210      	strb	r0, [r2, #8]
}
    3a0a:	4770      	bx	lr

00003a0c <_ZN10GPSL80Lite6updateEv>:

void GPSL80Lite::update()
{
    3a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a0e:	0004      	movs	r4, r0
    3a10:	b08f      	sub	sp, #60	; 0x3c
	bool printOnes = false;
	do
	{
		dataReady=SerialGPS->available();
    3a12:	6860      	ldr	r0, [r4, #4]
    3a14:	6803      	ldr	r3, [r0, #0]
    3a16:	691b      	ldr	r3, [r3, #16]
    3a18:	4798      	blx	r3
    3a1a:	0003      	movs	r3, r0
    3a1c:	1e5a      	subs	r2, r3, #1
    3a1e:	4193      	sbcs	r3, r2
    3a20:	7023      	strb	r3, [r4, #0]
		
		if(dataReady)
    3a22:	2800      	cmp	r0, #0
    3a24:	d070      	beq.n	3b08 <_ZN10GPSL80Lite6updateEv+0xfc>
		{
			if(printOnes==false){
//				SerialAUX->print("GPS Bytes to analyze=" + String(dataReady));	
				printOnes=true;
			}
			_newChar=SerialGPS->read(); // read char from input buffer
    3a26:	6860      	ldr	r0, [r4, #4]
    3a28:	6803      	ldr	r3, [r0, #0]
    3a2a:	695b      	ldr	r3, [r3, #20]
    3a2c:	4798      	blx	r3
    3a2e:	b2c1      	uxtb	r1, r0
    3a30:	0002      	movs	r2, r0
//			Serial.print(_newChar);
//			data[byteNumber++] = _newChar; // Save the incomming data to buffer.
								
			switch (state)
    3a32:	7a20      	ldrb	r0, [r4, #8]
			_newChar=SerialGPS->read(); // read char from input buffer
    3a34:	7061      	strb	r1, [r4, #1]
			switch (state)
    3a36:	280f      	cmp	r0, #15
    3a38:	d832      	bhi.n	3aa0 <_ZN10GPSL80Lite6updateEv+0x94>
    3a3a:	f004 fd3b 	bl	84b4 <__gnu_thumb1_case_uhi>
    3a3e:	0010      	.short	0x0010
    3a40:	003f001e 	.word	0x003f001e
    3a44:	00720067 	.word	0x00720067
    3a48:	00a6008c 	.word	0x00a6008c
    3a4c:	00dd00c1 	.word	0x00dd00c1
    3a50:	01370104 	.word	0x01370104
    3a54:	01e40191 	.word	0x01e40191
    3a58:	02180200 	.word	0x02180200
    3a5c:	0229      	.short	0x0229
			{
				case LOOKING_FOR_START: // look for $ in incomming data
					if(_newChar == '$')
    3a5e:	2924      	cmp	r1, #36	; 0x24
    3a60:	d14f      	bne.n	3b02 <_ZN10GPSL80Lite6updateEv+0xf6>
					{
						dataLength = 0;    // counter number of bytes read.
						byteNumber = 0;    // Reset the pointer in data
    3a62:	0022      	movs	r2, r4
						dataLength = 0;    // counter number of bytes read.
    3a64:	2300      	movs	r3, #0
						byteNumber = 0;    // Reset the pointer in data
    3a66:	3250      	adds	r2, #80	; 0x50
						dataLength = 0;    // counter number of bytes read.
    3a68:	7263      	strb	r3, [r4, #9]
						CRC=0;			   // Reeat CRC calculation for new data.
						resetTempData();
    3a6a:	0020      	movs	r0, r4
						byteNumber = 0;    // Reset the pointer in data
    3a6c:	7013      	strb	r3, [r2, #0]
						CRC=0;			   // Reeat CRC calculation for new data.
    3a6e:	70d3      	strb	r3, [r2, #3]
						resetTempData();
    3a70:	f7ff fe18 	bl	36a4 <_ZN10GPSL80Lite13resetTempDataEv>
					//                $GPRMC,064951.000,A,2307.1256,N,12016.4438,E,0.03,165.48,260406,3.05,W,A*2C 			
					switch (dataLength)
					{
						case 1: 
							if(_newChar == 'G')
								state = READ_HEADER;
    3a74:	2301      	movs	r3, #1
					
					state = LOOKING_FOR_START;
				break;
				
				default: 
					state = LOOKING_FOR_START;
    3a76:	7223      	strb	r3, [r4, #8]
				break;
    3a78:	e043      	b.n	3b02 <_ZN10GPSL80Lite6updateEv+0xf6>
					CRC = CRC ^ uint8_t(_newChar); // Calculate CRC
    3a7a:	0022      	movs	r2, r4
					dataLength++;
    3a7c:	7a60      	ldrb	r0, [r4, #9]
					CRC = CRC ^ uint8_t(_newChar); // Calculate CRC
    3a7e:	3253      	adds	r2, #83	; 0x53
					dataLength++;
    3a80:	3001      	adds	r0, #1
    3a82:	b2c0      	uxtb	r0, r0
    3a84:	7260      	strb	r0, [r4, #9]
					CRC = CRC ^ uint8_t(_newChar); // Calculate CRC
    3a86:	7813      	ldrb	r3, [r2, #0]
					switch (dataLength)
    3a88:	3801      	subs	r0, #1
					CRC = CRC ^ uint8_t(_newChar); // Calculate CRC
    3a8a:	404b      	eors	r3, r1
    3a8c:	7013      	strb	r3, [r2, #0]
					switch (dataLength)
    3a8e:	2805      	cmp	r0, #5
    3a90:	d806      	bhi.n	3aa0 <_ZN10GPSL80Lite6updateEv+0x94>
    3a92:	f004 fd05 	bl	84a0 <__gnu_thumb1_case_uqi>
    3a96:	0703      	.short	0x0703
    3a98:	0d0a0303 	.word	0x0d0a0303
							if(_newChar == 'G')
    3a9c:	2947      	cmp	r1, #71	; 0x47
    3a9e:	d0e9      	beq.n	3a74 <_ZN10GPSL80Lite6updateEv+0x68>
					state = LOOKING_FOR_START;
    3aa0:	2300      	movs	r3, #0
    3aa2:	e7e8      	b.n	3a76 <_ZN10GPSL80Lite6updateEv+0x6a>
							if(_newChar == 'P')
    3aa4:	2950      	cmp	r1, #80	; 0x50
    3aa6:	d1fb      	bne.n	3aa0 <_ZN10GPSL80Lite6updateEv+0x94>
    3aa8:	e7e4      	b.n	3a74 <_ZN10GPSL80Lite6updateEv+0x68>
							if(_newChar == 'A')
    3aaa:	2941      	cmp	r1, #65	; 0x41
    3aac:	d1f8      	bne.n	3aa0 <_ZN10GPSL80Lite6updateEv+0x94>
    3aae:	e7e1      	b.n	3a74 <_ZN10GPSL80Lite6updateEv+0x68>
							if(_newChar == ','){
    3ab0:	292c      	cmp	r1, #44	; 0x2c
    3ab2:	d1f5      	bne.n	3aa0 <_ZN10GPSL80Lite6updateEv+0x94>
								dataLength=0;
    3ab4:	2300      	movs	r3, #0
    3ab6:	7263      	strb	r3, [r4, #9]
								state = READ_UTC_DATA; 
    3ab8:	3302      	adds	r3, #2
    3aba:	e7dc      	b.n	3a76 <_ZN10GPSL80Lite6updateEv+0x6a>
					dataLength++;
    3abc:	7a63      	ldrb	r3, [r4, #9]
					if(inputValid(_newChar))
    3abe:	0020      	movs	r0, r4
					dataLength++;
    3ac0:	3301      	adds	r3, #1
    3ac2:	7263      	strb	r3, [r4, #9]
					if(inputValid(_newChar))
    3ac4:	f7ff ff92 	bl	39ec <_ZN10GPSL80Lite10inputValidEc>
    3ac8:	2800      	cmp	r0, #0
    3aca:	d01a      	beq.n	3b02 <_ZN10GPSL80Lite6updateEv+0xf6>
						CRC = CRC ^ uint8_t(_newChar); // Calculate CRC
    3acc:	0022      	movs	r2, r4
    3ace:	3253      	adds	r2, #83	; 0x53
    3ad0:	7865      	ldrb	r5, [r4, #1]
    3ad2:	7813      	ldrb	r3, [r2, #0]
    3ad4:	406b      	eors	r3, r5
    3ad6:	7013      	strb	r3, [r2, #0]
							state=WAIT_FOR_NEXT_PARAMETER;
    3ad8:	2303      	movs	r3, #3
						if(_newChar == '.')
    3ada:	2d2e      	cmp	r5, #46	; 0x2e
    3adc:	d0cb      	beq.n	3a76 <_ZN10GPSL80Lite6updateEv+0x6a>
							tempData.UTCTime=tempData.UTCTime * 10 + charToInt(_newChar);								
    3ade:	49ba      	ldr	r1, [pc, #744]	; (3dc8 <_ZN10GPSL80Lite6updateEv+0x3bc>)
    3ae0:	6920      	ldr	r0, [r4, #16]
    3ae2:	f005 fa97 	bl	9014 <__aeabi_fmul>
    3ae6:	1c06      	adds	r6, r0, #0
		dummy = dummy - 48;
    3ae8:	0028      	movs	r0, r5
    3aea:	3830      	subs	r0, #48	; 0x30
    3aec:	b2c0      	uxtb	r0, r0
	if(dummy > 57) // Must be A-F
    3aee:	2d39      	cmp	r5, #57	; 0x39
    3af0:	dd01      	ble.n	3af6 <_ZN10GPSL80Lite6updateEv+0xea>
		dummy = dummy - 55;		
    3af2:	3d37      	subs	r5, #55	; 0x37
    3af4:	b2e8      	uxtb	r0, r5
							tempData.UTCTime=tempData.UTCTime * 10 + charToInt(_newChar);								
    3af6:	f005 fd69 	bl	95cc <__aeabi_i2f>
    3afa:	1c31      	adds	r1, r6, #0
    3afc:	f004 ff08 	bl	8910 <__aeabi_fadd>
    3b00:	6120      	str	r0, [r4, #16]
			}
		}			
	}while(dataReady); // loop until buffer is empty	
    3b02:	7823      	ldrb	r3, [r4, #0]
    3b04:	2b00      	cmp	r3, #0
    3b06:	d184      	bne.n	3a12 <_ZN10GPSL80Lite6updateEv+0x6>
	
}
    3b08:	b00f      	add	sp, #60	; 0x3c
    3b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
					CRC = CRC ^ uint8_t(_newChar); // Calculate CRC
    3b0c:	0022      	movs	r2, r4
    3b0e:	3253      	adds	r2, #83	; 0x53
    3b10:	7813      	ldrb	r3, [r2, #0]
    3b12:	404b      	eors	r3, r1
    3b14:	7013      	strb	r3, [r2, #0]
					if(_newChar == ',') 
    3b16:	292c      	cmp	r1, #44	; 0x2c
    3b18:	d1f3      	bne.n	3b02 <_ZN10GPSL80Lite6updateEv+0xf6>
						dataLength=0;
    3b1a:	2300      	movs	r3, #0
    3b1c:	7263      	strb	r3, [r4, #9]
						state=READ_LAT_DATA;
    3b1e:	3304      	adds	r3, #4
    3b20:	e7a9      	b.n	3a76 <_ZN10GPSL80Lite6updateEv+0x6a>
					dataLength++;					
    3b22:	7a63      	ldrb	r3, [r4, #9]
					if(inputValid(_newChar))
    3b24:	0020      	movs	r0, r4
					dataLength++;					
    3b26:	3301      	adds	r3, #1
    3b28:	7263      	strb	r3, [r4, #9]
					if(inputValid(_newChar))
    3b2a:	f7ff ff5f 	bl	39ec <_ZN10GPSL80Lite10inputValidEc>
    3b2e:	2800      	cmp	r0, #0
    3b30:	d0e7      	beq.n	3b02 <_ZN10GPSL80Lite6updateEv+0xf6>
						CRC = CRC ^ uint8_t(_newChar); // Calculate CRC
    3b32:	0021      	movs	r1, r4
    3b34:	3153      	adds	r1, #83	; 0x53
    3b36:	7862      	ldrb	r2, [r4, #1]
    3b38:	780b      	ldrb	r3, [r1, #0]
    3b3a:	4053      	eors	r3, r2
    3b3c:	700b      	strb	r3, [r1, #0]
						if(_newChar == ',')
    3b3e:	2a2c      	cmp	r2, #44	; 0x2c
    3b40:	d103      	bne.n	3b4a <_ZN10GPSL80Lite6updateEv+0x13e>
							dataLength=0;
    3b42:	2300      	movs	r3, #0
    3b44:	7263      	strb	r3, [r4, #9]
							state=READ_LAT_DIR_DATA;
    3b46:	3305      	adds	r3, #5
    3b48:	e795      	b.n	3a76 <_ZN10GPSL80Lite6updateEv+0x6a>
						}else if(dataLength <= MAX_LAT_SIZE)
    3b4a:	7a63      	ldrb	r3, [r4, #9]
    3b4c:	2b09      	cmp	r3, #9
    3b4e:	dcd8      	bgt.n	3b02 <_ZN10GPSL80Lite6updateEv+0xf6>
							tempData.LatitudeDEG[dataLength-1]=_newChar;
    3b50:	18e3      	adds	r3, r4, r3
    3b52:	759a      	strb	r2, [r3, #22]
    3b54:	e7d5      	b.n	3b02 <_ZN10GPSL80Lite6updateEv+0xf6>
					dataLength++;				
    3b56:	7a63      	ldrb	r3, [r4, #9]
					if(inputValid(_newChar))
    3b58:	0020      	movs	r0, r4
					dataLength++;				
    3b5a:	3301      	adds	r3, #1
    3b5c:	7263      	strb	r3, [r4, #9]
					if(inputValid(_newChar))
    3b5e:	f7ff ff45 	bl	39ec <_ZN10GPSL80Lite10inputValidEc>
    3b62:	2800      	cmp	r0, #0
    3b64:	d0cd      	beq.n	3b02 <_ZN10GPSL80Lite6updateEv+0xf6>
						CRC = CRC ^ uint8_t(_newChar); // Calculate CRC			
    3b66:	0021      	movs	r1, r4
    3b68:	3153      	adds	r1, #83	; 0x53
    3b6a:	7863      	ldrb	r3, [r4, #1]
    3b6c:	780a      	ldrb	r2, [r1, #0]
    3b6e:	405a      	eors	r2, r3
    3b70:	700a      	strb	r2, [r1, #0]
						if(_newChar == ',')
    3b72:	2b2c      	cmp	r3, #44	; 0x2c
    3b74:	d103      	bne.n	3b7e <_ZN10GPSL80Lite6updateEv+0x172>
							dataLength=0;
    3b76:	2300      	movs	r3, #0
    3b78:	7263      	strb	r3, [r4, #9]
							state=READ_LONG_DATA;
    3b7a:	3306      	adds	r3, #6
    3b7c:	e77b      	b.n	3a76 <_ZN10GPSL80Lite6updateEv+0x6a>
						else if(dataLength == 1){
    3b7e:	7a62      	ldrb	r2, [r4, #9]
    3b80:	2a01      	cmp	r2, #1
    3b82:	d1be      	bne.n	3b02 <_ZN10GPSL80Lite6updateEv+0xf6>
							tempData.LatitudeDIR=_newChar;
    3b84:	1ca2      	adds	r2, r4, #2
    3b86:	77d3      	strb	r3, [r2, #31]
    3b88:	e7bb      	b.n	3b02 <_ZN10GPSL80Lite6updateEv+0xf6>
					dataLength++;					
    3b8a:	7a63      	ldrb	r3, [r4, #9]
					if(inputValid(_newChar))
    3b8c:	0020      	movs	r0, r4
					dataLength++;					
    3b8e:	3301      	adds	r3, #1
    3b90:	7263      	strb	r3, [r4, #9]
					if(inputValid(_newChar))
    3b92:	f7ff ff2b 	bl	39ec <_ZN10GPSL80Lite10inputValidEc>
    3b96:	2800      	cmp	r0, #0
    3b98:	d0b3      	beq.n	3b02 <_ZN10GPSL80Lite6updateEv+0xf6>
						CRC = CRC ^ uint8_t(_newChar); // Calculate CRC
    3b9a:	0021      	movs	r1, r4
    3b9c:	3153      	adds	r1, #83	; 0x53
    3b9e:	7862      	ldrb	r2, [r4, #1]
    3ba0:	780b      	ldrb	r3, [r1, #0]
    3ba2:	4053      	eors	r3, r2
    3ba4:	700b      	strb	r3, [r1, #0]
						if(_newChar == ',')
    3ba6:	2a2c      	cmp	r2, #44	; 0x2c
    3ba8:	d103      	bne.n	3bb2 <_ZN10GPSL80Lite6updateEv+0x1a6>
							dataLength=0;
    3baa:	2300      	movs	r3, #0
    3bac:	7263      	strb	r3, [r4, #9]
							state=READ_LONG_DIR_DATA;
    3bae:	3307      	adds	r3, #7
    3bb0:	e761      	b.n	3a76 <_ZN10GPSL80Lite6updateEv+0x6a>
						}else if(dataLength <= MAX_LONG_SIZE){ 	
    3bb2:	7a63      	ldrb	r3, [r4, #9]
    3bb4:	2b0a      	cmp	r3, #10
    3bb6:	dca4      	bgt.n	3b02 <_ZN10GPSL80Lite6updateEv+0xf6>
							tempData.LongitudeDEG[dataLength-1]=_newChar;
    3bb8:	18e3      	adds	r3, r4, r3
    3bba:	3302      	adds	r3, #2
    3bbc:	77da      	strb	r2, [r3, #31]
    3bbe:	e7a0      	b.n	3b02 <_ZN10GPSL80Lite6updateEv+0xf6>
					dataLength++;
    3bc0:	7a63      	ldrb	r3, [r4, #9]
					if(inputValid(_newChar))
    3bc2:	0020      	movs	r0, r4
					dataLength++;
    3bc4:	3301      	adds	r3, #1
    3bc6:	7263      	strb	r3, [r4, #9]
					if(inputValid(_newChar))
    3bc8:	f7ff ff10 	bl	39ec <_ZN10GPSL80Lite10inputValidEc>
    3bcc:	2800      	cmp	r0, #0
    3bce:	d098      	beq.n	3b02 <_ZN10GPSL80Lite6updateEv+0xf6>
						CRC = CRC ^ uint8_t(_newChar); // Calculate CRC
    3bd0:	0021      	movs	r1, r4
    3bd2:	3153      	adds	r1, #83	; 0x53
    3bd4:	7863      	ldrb	r3, [r4, #1]
    3bd6:	780a      	ldrb	r2, [r1, #0]
    3bd8:	405a      	eors	r2, r3
    3bda:	700a      	strb	r2, [r1, #0]
						if(_newChar == ',')
    3bdc:	2b2c      	cmp	r3, #44	; 0x2c
    3bde:	d103      	bne.n	3be8 <_ZN10GPSL80Lite6updateEv+0x1dc>
							dataLength=0;
    3be0:	2300      	movs	r3, #0
    3be2:	7263      	strb	r3, [r4, #9]
							state=READ_FIX_DATA;
    3be4:	3308      	adds	r3, #8
    3be6:	e746      	b.n	3a76 <_ZN10GPSL80Lite6updateEv+0x6a>
						else if(dataLength == 1)
    3be8:	7a62      	ldrb	r2, [r4, #9]
    3bea:	2a01      	cmp	r2, #1
    3bec:	d000      	beq.n	3bf0 <_ZN10GPSL80Lite6updateEv+0x1e4>
    3bee:	e788      	b.n	3b02 <_ZN10GPSL80Lite6updateEv+0xf6>
							tempData.LongitudeDIR=_newChar;
    3bf0:	0022      	movs	r2, r4
    3bf2:	322d      	adds	r2, #45	; 0x2d
							CRC = CRC ^ uint8_t(_newChar); // Calculate CRC
    3bf4:	7013      	strb	r3, [r2, #0]
    3bf6:	e784      	b.n	3b02 <_ZN10GPSL80Lite6updateEv+0xf6>
					dataLength++;
    3bf8:	7a63      	ldrb	r3, [r4, #9]
					if(inputValid(_newChar))
    3bfa:	0020      	movs	r0, r4
					dataLength++;
    3bfc:	3301      	adds	r3, #1
    3bfe:	7263      	strb	r3, [r4, #9]
					if(inputValid(_newChar))
    3c00:	f7ff fef4 	bl	39ec <_ZN10GPSL80Lite10inputValidEc>
    3c04:	2800      	cmp	r0, #0
    3c06:	d100      	bne.n	3c0a <_ZN10GPSL80Lite6updateEv+0x1fe>
    3c08:	e77b      	b.n	3b02 <_ZN10GPSL80Lite6updateEv+0xf6>
						CRC = CRC ^ uint8_t(_newChar); // Calculate CRC				
    3c0a:	0021      	movs	r1, r4
    3c0c:	3153      	adds	r1, #83	; 0x53
    3c0e:	7863      	ldrb	r3, [r4, #1]
    3c10:	780a      	ldrb	r2, [r1, #0]
    3c12:	405a      	eors	r2, r3
    3c14:	700a      	strb	r2, [r1, #0]
						if(_newChar == ',')
    3c16:	2b2c      	cmp	r3, #44	; 0x2c
    3c18:	d103      	bne.n	3c22 <_ZN10GPSL80Lite6updateEv+0x216>
							dataLength=0;
    3c1a:	2300      	movs	r3, #0
    3c1c:	7263      	strb	r3, [r4, #9]
							state=READ_SAT_DATA;
    3c1e:	3309      	adds	r3, #9
    3c20:	e729      	b.n	3a76 <_ZN10GPSL80Lite6updateEv+0x6a>
						else if(dataLength == 1){
    3c22:	7a62      	ldrb	r2, [r4, #9]
    3c24:	2a01      	cmp	r2, #1
    3c26:	d000      	beq.n	3c2a <_ZN10GPSL80Lite6updateEv+0x21e>
    3c28:	e76b      	b.n	3b02 <_ZN10GPSL80Lite6updateEv+0xf6>
							tempData.Fix=_newChar;	
    3c2a:	0022      	movs	r2, r4
    3c2c:	3240      	adds	r2, #64	; 0x40
    3c2e:	7013      	strb	r3, [r2, #0]
		dummy = dummy - 48;
    3c30:	001a      	movs	r2, r3
    3c32:	3a30      	subs	r2, #48	; 0x30
    3c34:	b2d2      	uxtb	r2, r2
	if(dummy > 57) // Must be A-F
    3c36:	2b39      	cmp	r3, #57	; 0x39
    3c38:	dd01      	ble.n	3c3e <_ZN10GPSL80Lite6updateEv+0x232>
		dummy = dummy - 55;		
    3c3a:	3b37      	subs	r3, #55	; 0x37
    3c3c:	b2da      	uxtb	r2, r3
							tempData.FixDecimal = charToInt(_newChar);			
    3c3e:	0023      	movs	r3, r4
    3c40:	3341      	adds	r3, #65	; 0x41
							decimal=10;
    3c42:	701a      	strb	r2, [r3, #0]
    3c44:	e75d      	b.n	3b02 <_ZN10GPSL80Lite6updateEv+0xf6>
					dataLength++;
    3c46:	7a63      	ldrb	r3, [r4, #9]
					if(inputValid(_newChar))
    3c48:	0020      	movs	r0, r4
					dataLength++;
    3c4a:	3301      	adds	r3, #1
    3c4c:	7263      	strb	r3, [r4, #9]
					if(inputValid(_newChar))
    3c4e:	f7ff fecd 	bl	39ec <_ZN10GPSL80Lite10inputValidEc>
    3c52:	2800      	cmp	r0, #0
    3c54:	d100      	bne.n	3c58 <_ZN10GPSL80Lite6updateEv+0x24c>
    3c56:	e754      	b.n	3b02 <_ZN10GPSL80Lite6updateEv+0xf6>
						CRC = CRC ^ uint8_t(_newChar); // Calculate CRC						
    3c58:	0021      	movs	r1, r4
    3c5a:	3153      	adds	r1, #83	; 0x53
    3c5c:	7863      	ldrb	r3, [r4, #1]
    3c5e:	780a      	ldrb	r2, [r1, #0]
    3c60:	405a      	eors	r2, r3
    3c62:	700a      	strb	r2, [r1, #0]
						if(_newChar == ',')
    3c64:	2b2c      	cmp	r3, #44	; 0x2c
    3c66:	d106      	bne.n	3c76 <_ZN10GPSL80Lite6updateEv+0x26a>
							decimal=0;
    3c68:	0022      	movs	r2, r4
							dataLength=0;
    3c6a:	2300      	movs	r3, #0
							decimal=0;
    3c6c:	3255      	adds	r2, #85	; 0x55
							dataLength=0;
    3c6e:	7263      	strb	r3, [r4, #9]
							decimal=0;
    3c70:	7013      	strb	r3, [r2, #0]
							state=READ_HDOP_DATA;
    3c72:	330a      	adds	r3, #10
    3c74:	e6ff      	b.n	3a76 <_ZN10GPSL80Lite6updateEv+0x6a>
    3c76:	0021      	movs	r1, r4
						else if(dataLength == 1){
    3c78:	7a62      	ldrb	r2, [r4, #9]
    3c7a:	3142      	adds	r1, #66	; 0x42
    3c7c:	2a01      	cmp	r2, #1
    3c7e:	d108      	bne.n	3c92 <_ZN10GPSL80Lite6updateEv+0x286>
		dummy = dummy - 48;
    3c80:	001a      	movs	r2, r3
    3c82:	3a30      	subs	r2, #48	; 0x30
    3c84:	b2d2      	uxtb	r2, r2
	if(dummy > 57) // Must be A-F
    3c86:	2b39      	cmp	r3, #57	; 0x39
    3c88:	dd01      	ble.n	3c8e <_ZN10GPSL80Lite6updateEv+0x282>
		dummy = dummy - 55;		
    3c8a:	3b37      	subs	r3, #55	; 0x37
    3c8c:	b2da      	uxtb	r2, r3
							tempData.NumberOfSatellites = tempData.NumberOfSatellites * 10 + charToInt(_newChar);
    3c8e:	700a      	strb	r2, [r1, #0]
    3c90:	e737      	b.n	3b02 <_ZN10GPSL80Lite6updateEv+0xf6>
    3c92:	220a      	movs	r2, #10
    3c94:	7808      	ldrb	r0, [r1, #0]
    3c96:	4342      	muls	r2, r0
		dummy = dummy - 48;
    3c98:	0018      	movs	r0, r3
    3c9a:	3830      	subs	r0, #48	; 0x30
							tempData.NumberOfSatellites = tempData.NumberOfSatellites * 10 + charToInt(_newChar);
    3c9c:	b2d2      	uxtb	r2, r2
		dummy = dummy - 48;
    3c9e:	b2c0      	uxtb	r0, r0
	if(dummy > 57) // Must be A-F
    3ca0:	2b39      	cmp	r3, #57	; 0x39
    3ca2:	dd01      	ble.n	3ca8 <_ZN10GPSL80Lite6updateEv+0x29c>
		dummy = dummy - 55;		
    3ca4:	3b37      	subs	r3, #55	; 0x37
    3ca6:	b2d8      	uxtb	r0, r3
							tempData.NumberOfSatellites = tempData.NumberOfSatellites * 10 + charToInt(_newChar);
    3ca8:	1812      	adds	r2, r2, r0
    3caa:	e7f0      	b.n	3c8e <_ZN10GPSL80Lite6updateEv+0x282>
					dataLength++;
    3cac:	7a63      	ldrb	r3, [r4, #9]
					if(inputValid(_newChar))
    3cae:	0020      	movs	r0, r4
					dataLength++;
    3cb0:	3301      	adds	r3, #1
    3cb2:	7263      	strb	r3, [r4, #9]
					if(inputValid(_newChar))
    3cb4:	f7ff fe9a 	bl	39ec <_ZN10GPSL80Lite10inputValidEc>
    3cb8:	2800      	cmp	r0, #0
    3cba:	d100      	bne.n	3cbe <_ZN10GPSL80Lite6updateEv+0x2b2>
    3cbc:	e721      	b.n	3b02 <_ZN10GPSL80Lite6updateEv+0xf6>
						CRC = CRC ^ uint8_t(_newChar); // Calculate CRC
    3cbe:	0022      	movs	r2, r4
    3cc0:	3253      	adds	r2, #83	; 0x53
    3cc2:	7865      	ldrb	r5, [r4, #1]
    3cc4:	7813      	ldrb	r3, [r2, #0]
    3cc6:	406b      	eors	r3, r5
    3cc8:	7013      	strb	r3, [r2, #0]
						if(_newChar == ',')
    3cca:	2d2c      	cmp	r5, #44	; 0x2c
    3ccc:	d104      	bne.n	3cd8 <_ZN10GPSL80Lite6updateEv+0x2cc>
							dataLength=0;
    3cce:	2300      	movs	r3, #0
    3cd0:	7263      	strb	r3, [r4, #9]
							decimal=0;
    3cd2:	7093      	strb	r3, [r2, #2]
							state=READ_ALITUDE_DATA;
    3cd4:	330b      	adds	r3, #11
    3cd6:	e6ce      	b.n	3a76 <_ZN10GPSL80Lite6updateEv+0x6a>
						}else if(_newChar == '.'){				
    3cd8:	2d2e      	cmp	r5, #46	; 0x2e
    3cda:	d103      	bne.n	3ce4 <_ZN10GPSL80Lite6updateEv+0x2d8>
							decimal=10;
    3cdc:	0023      	movs	r3, r4
    3cde:	220a      	movs	r2, #10
    3ce0:	3355      	adds	r3, #85	; 0x55
    3ce2:	e7ae      	b.n	3c42 <_ZN10GPSL80Lite6updateEv+0x236>
						}else if(_newChar == '-'){				
    3ce4:	2d2d      	cmp	r5, #45	; 0x2d
    3ce6:	d102      	bne.n	3cee <_ZN10GPSL80Lite6updateEv+0x2e2>
							tempData.HDOP=-1;
    3ce8:	4b38      	ldr	r3, [pc, #224]	; (3dcc <_ZN10GPSL80Lite6updateEv+0x3c0>)
    3cea:	6463      	str	r3, [r4, #68]	; 0x44
    3cec:	e709      	b.n	3b02 <_ZN10GPSL80Lite6updateEv+0xf6>
							if(decimal == 0){
    3cee:	0027      	movs	r7, r4
    3cf0:	3755      	adds	r7, #85	; 0x55
    3cf2:	783e      	ldrb	r6, [r7, #0]
    3cf4:	2e00      	cmp	r6, #0
    3cf6:	d112      	bne.n	3d1e <_ZN10GPSL80Lite6updateEv+0x312>
								tempData.HDOP = tempData.HDOP * 10 + charToInt(_newChar);
    3cf8:	4933      	ldr	r1, [pc, #204]	; (3dc8 <_ZN10GPSL80Lite6updateEv+0x3bc>)
    3cfa:	6c60      	ldr	r0, [r4, #68]	; 0x44
    3cfc:	f005 f98a 	bl	9014 <__aeabi_fmul>
    3d00:	1c06      	adds	r6, r0, #0
		dummy = dummy - 48;
    3d02:	0028      	movs	r0, r5
    3d04:	3830      	subs	r0, #48	; 0x30
    3d06:	b2c0      	uxtb	r0, r0
	if(dummy > 57) // Must be A-F
    3d08:	2d39      	cmp	r5, #57	; 0x39
    3d0a:	dd01      	ble.n	3d10 <_ZN10GPSL80Lite6updateEv+0x304>
		dummy = dummy - 55;		
    3d0c:	3d37      	subs	r5, #55	; 0x37
    3d0e:	b2e8      	uxtb	r0, r5
								tempData.HDOP = tempData.HDOP * 10 + charToInt(_newChar);
    3d10:	f005 fc5c 	bl	95cc <__aeabi_i2f>
    3d14:	1c31      	adds	r1, r6, #0
    3d16:	f004 fdfb 	bl	8910 <__aeabi_fadd>
    3d1a:	6460      	str	r0, [r4, #68]	; 0x44
    3d1c:	e6f1      	b.n	3b02 <_ZN10GPSL80Lite6updateEv+0xf6>
							}else if(decimal <= 100){
    3d1e:	2e64      	cmp	r6, #100	; 0x64
    3d20:	dd00      	ble.n	3d24 <_ZN10GPSL80Lite6updateEv+0x318>
    3d22:	e6ee      	b.n	3b02 <_ZN10GPSL80Lite6updateEv+0xf6>
		dummy = dummy - 48;
    3d24:	0028      	movs	r0, r5
								tempData.HDOP = tempData.HDOP + ((float)charToInt(_newChar) / (float)decimal);
    3d26:	6c63      	ldr	r3, [r4, #68]	; 0x44
		dummy = dummy - 48;
    3d28:	3830      	subs	r0, #48	; 0x30
								tempData.HDOP = tempData.HDOP + ((float)charToInt(_newChar) / (float)decimal);
    3d2a:	9301      	str	r3, [sp, #4]
		dummy = dummy - 48;
    3d2c:	b2c0      	uxtb	r0, r0
	if(dummy > 57) // Must be A-F
    3d2e:	2d39      	cmp	r5, #57	; 0x39
    3d30:	dd01      	ble.n	3d36 <_ZN10GPSL80Lite6updateEv+0x32a>
		dummy = dummy - 55;		
    3d32:	3d37      	subs	r5, #55	; 0x37
    3d34:	b2e8      	uxtb	r0, r5
								tempData.HDOP = tempData.HDOP + ((float)charToInt(_newChar) / (float)decimal);
    3d36:	f005 fc99 	bl	966c <__aeabi_ui2f>
    3d3a:	1c05      	adds	r5, r0, #0
    3d3c:	0030      	movs	r0, r6
    3d3e:	f005 fc95 	bl	966c <__aeabi_ui2f>
    3d42:	1c01      	adds	r1, r0, #0
    3d44:	1c28      	adds	r0, r5, #0
    3d46:	f004 ff75 	bl	8c34 <__aeabi_fdiv>
    3d4a:	9901      	ldr	r1, [sp, #4]
    3d4c:	f004 fde0 	bl	8910 <__aeabi_fadd>
    3d50:	6460      	str	r0, [r4, #68]	; 0x44
								if(decimal != 100)
    3d52:	2e64      	cmp	r6, #100	; 0x64
    3d54:	d100      	bne.n	3d58 <_ZN10GPSL80Lite6updateEv+0x34c>
    3d56:	e6d4      	b.n	3b02 <_ZN10GPSL80Lite6updateEv+0xf6>
									decimal = decimal * 10;
    3d58:	230a      	movs	r3, #10
    3d5a:	435e      	muls	r6, r3
    3d5c:	703e      	strb	r6, [r7, #0]
    3d5e:	e6d0      	b.n	3b02 <_ZN10GPSL80Lite6updateEv+0xf6>
					dataLength++;
    3d60:	7a63      	ldrb	r3, [r4, #9]
					if(inputValid(_newChar))
    3d62:	0020      	movs	r0, r4
					dataLength++;
    3d64:	3301      	adds	r3, #1
    3d66:	7263      	strb	r3, [r4, #9]
					if(inputValid(_newChar))
    3d68:	f7ff fe40 	bl	39ec <_ZN10GPSL80Lite10inputValidEc>
    3d6c:	2800      	cmp	r0, #0
    3d6e:	d100      	bne.n	3d72 <_ZN10GPSL80Lite6updateEv+0x366>
    3d70:	e6c7      	b.n	3b02 <_ZN10GPSL80Lite6updateEv+0xf6>
						CRC = CRC ^ uint8_t(_newChar); // Calculate CRC
    3d72:	0022      	movs	r2, r4
    3d74:	3253      	adds	r2, #83	; 0x53
    3d76:	7865      	ldrb	r5, [r4, #1]
    3d78:	7813      	ldrb	r3, [r2, #0]
    3d7a:	406b      	eors	r3, r5
    3d7c:	7013      	strb	r3, [r2, #0]
						if(_newChar == ',')
    3d7e:	2d2c      	cmp	r5, #44	; 0x2c
    3d80:	d103      	bne.n	3d8a <_ZN10GPSL80Lite6updateEv+0x37e>
							dataLength=0;
    3d82:	2300      	movs	r3, #0
    3d84:	7263      	strb	r3, [r4, #9]
							state=READ_ALITUDE_UNIT_DATA;
    3d86:	330c      	adds	r3, #12
    3d88:	e675      	b.n	3a76 <_ZN10GPSL80Lite6updateEv+0x6a>
						}else if(_newChar == '.'){				
    3d8a:	2d2e      	cmp	r5, #46	; 0x2e
    3d8c:	d0a6      	beq.n	3cdc <_ZN10GPSL80Lite6updateEv+0x2d0>
						}else if(_newChar == '-'){				
    3d8e:	2d2d      	cmp	r5, #45	; 0x2d
    3d90:	d102      	bne.n	3d98 <_ZN10GPSL80Lite6updateEv+0x38c>
							tempData.Altitude=-1;
    3d92:	4b0e      	ldr	r3, [pc, #56]	; (3dcc <_ZN10GPSL80Lite6updateEv+0x3c0>)
    3d94:	64a3      	str	r3, [r4, #72]	; 0x48
    3d96:	e6b4      	b.n	3b02 <_ZN10GPSL80Lite6updateEv+0xf6>
							if(decimal == 0){
    3d98:	0027      	movs	r7, r4
    3d9a:	3755      	adds	r7, #85	; 0x55
    3d9c:	783e      	ldrb	r6, [r7, #0]
    3d9e:	2e00      	cmp	r6, #0
    3da0:	d116      	bne.n	3dd0 <_ZN10GPSL80Lite6updateEv+0x3c4>
								tempData.Altitude = tempData.Altitude * 10 + charToInt(_newChar);
    3da2:	4909      	ldr	r1, [pc, #36]	; (3dc8 <_ZN10GPSL80Lite6updateEv+0x3bc>)
    3da4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    3da6:	f005 f935 	bl	9014 <__aeabi_fmul>
    3daa:	1c06      	adds	r6, r0, #0
		dummy = dummy - 48;
    3dac:	0028      	movs	r0, r5
    3dae:	3830      	subs	r0, #48	; 0x30
    3db0:	b2c0      	uxtb	r0, r0
	if(dummy > 57) // Must be A-F
    3db2:	2d39      	cmp	r5, #57	; 0x39
    3db4:	dd01      	ble.n	3dba <_ZN10GPSL80Lite6updateEv+0x3ae>
		dummy = dummy - 55;		
    3db6:	3d37      	subs	r5, #55	; 0x37
    3db8:	b2e8      	uxtb	r0, r5
								tempData.Altitude = tempData.Altitude * 10 + charToInt(_newChar);
    3dba:	f005 fc07 	bl	95cc <__aeabi_i2f>
    3dbe:	1c31      	adds	r1, r6, #0
    3dc0:	f004 fda6 	bl	8910 <__aeabi_fadd>
    3dc4:	64a0      	str	r0, [r4, #72]	; 0x48
    3dc6:	e69c      	b.n	3b02 <_ZN10GPSL80Lite6updateEv+0xf6>
    3dc8:	41200000 	.word	0x41200000
    3dcc:	bf800000 	.word	0xbf800000
							}else if(decimal <= 100){
    3dd0:	2e64      	cmp	r6, #100	; 0x64
    3dd2:	dd00      	ble.n	3dd6 <_ZN10GPSL80Lite6updateEv+0x3ca>
    3dd4:	e695      	b.n	3b02 <_ZN10GPSL80Lite6updateEv+0xf6>
		dummy = dummy - 48;
    3dd6:	0028      	movs	r0, r5
								tempData.Altitude = tempData.Altitude + ((float)charToInt(_newChar) / (float)decimal);
    3dd8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		dummy = dummy - 48;
    3dda:	3830      	subs	r0, #48	; 0x30
								tempData.Altitude = tempData.Altitude + ((float)charToInt(_newChar) / (float)decimal);
    3ddc:	9301      	str	r3, [sp, #4]
		dummy = dummy - 48;
    3dde:	b2c0      	uxtb	r0, r0
	if(dummy > 57) // Must be A-F
    3de0:	2d39      	cmp	r5, #57	; 0x39
    3de2:	dd01      	ble.n	3de8 <_ZN10GPSL80Lite6updateEv+0x3dc>
		dummy = dummy - 55;		
    3de4:	3d37      	subs	r5, #55	; 0x37
    3de6:	b2e8      	uxtb	r0, r5
								tempData.Altitude = tempData.Altitude + ((float)charToInt(_newChar) / (float)decimal);
    3de8:	f005 fc40 	bl	966c <__aeabi_ui2f>
    3dec:	1c05      	adds	r5, r0, #0
    3dee:	0030      	movs	r0, r6
    3df0:	f005 fc3c 	bl	966c <__aeabi_ui2f>
    3df4:	1c01      	adds	r1, r0, #0
    3df6:	1c28      	adds	r0, r5, #0
    3df8:	f004 ff1c 	bl	8c34 <__aeabi_fdiv>
    3dfc:	9901      	ldr	r1, [sp, #4]
    3dfe:	f004 fd87 	bl	8910 <__aeabi_fadd>
    3e02:	64a0      	str	r0, [r4, #72]	; 0x48
    3e04:	e7a5      	b.n	3d52 <_ZN10GPSL80Lite6updateEv+0x346>
					dataLength++;
    3e06:	7a63      	ldrb	r3, [r4, #9]
					if(inputValid(_newChar))
    3e08:	0020      	movs	r0, r4
					dataLength++;
    3e0a:	3301      	adds	r3, #1
    3e0c:	7263      	strb	r3, [r4, #9]
					if(inputValid(_newChar))
    3e0e:	f7ff fded 	bl	39ec <_ZN10GPSL80Lite10inputValidEc>
    3e12:	2800      	cmp	r0, #0
    3e14:	d100      	bne.n	3e18 <_ZN10GPSL80Lite6updateEv+0x40c>
    3e16:	e674      	b.n	3b02 <_ZN10GPSL80Lite6updateEv+0xf6>
						CRC = CRC ^ uint8_t(_newChar); // Calculate CRC						
    3e18:	0021      	movs	r1, r4
    3e1a:	3153      	adds	r1, #83	; 0x53
    3e1c:	7863      	ldrb	r3, [r4, #1]
    3e1e:	780a      	ldrb	r2, [r1, #0]
    3e20:	405a      	eors	r2, r3
    3e22:	700a      	strb	r2, [r1, #0]
						if(_newChar == ',')
    3e24:	2b2c      	cmp	r3, #44	; 0x2c
    3e26:	d103      	bne.n	3e30 <_ZN10GPSL80Lite6updateEv+0x424>
							dataLength=0;
    3e28:	2300      	movs	r3, #0
    3e2a:	7263      	strb	r3, [r4, #9]
							state=WAIT_FOR_CRC;
    3e2c:	330d      	adds	r3, #13
    3e2e:	e622      	b.n	3a76 <_ZN10GPSL80Lite6updateEv+0x6a>
						}else if(dataLength == 1){
    3e30:	7a62      	ldrb	r2, [r4, #9]
    3e32:	2a01      	cmp	r2, #1
    3e34:	d000      	beq.n	3e38 <_ZN10GPSL80Lite6updateEv+0x42c>
    3e36:	e664      	b.n	3b02 <_ZN10GPSL80Lite6updateEv+0xf6>
							tempData.AltitudeUnit=_newChar;				
    3e38:	0022      	movs	r2, r4
    3e3a:	324c      	adds	r2, #76	; 0x4c
    3e3c:	e6da      	b.n	3bf4 <_ZN10GPSL80Lite6updateEv+0x1e8>
					dataLength++;
    3e3e:	7a63      	ldrb	r3, [r4, #9]
					if(inputValid(_newChar))
    3e40:	0020      	movs	r0, r4
					dataLength++;
    3e42:	3301      	adds	r3, #1
    3e44:	7263      	strb	r3, [r4, #9]
					if(inputValid(_newChar))
    3e46:	f7ff fdd1 	bl	39ec <_ZN10GPSL80Lite10inputValidEc>
    3e4a:	2800      	cmp	r0, #0
    3e4c:	d100      	bne.n	3e50 <_ZN10GPSL80Lite6updateEv+0x444>
    3e4e:	e658      	b.n	3b02 <_ZN10GPSL80Lite6updateEv+0xf6>
						if(_newChar == '*')
    3e50:	7863      	ldrb	r3, [r4, #1]
    3e52:	2b2a      	cmp	r3, #42	; 0x2a
    3e54:	d106      	bne.n	3e64 <_ZN10GPSL80Lite6updateEv+0x458>
							CRC_RESULT = 0;
    3e56:	0022      	movs	r2, r4
							dataLength=0;
    3e58:	2300      	movs	r3, #0
							CRC_RESULT = 0;
    3e5a:	3254      	adds	r2, #84	; 0x54
							dataLength=0;
    3e5c:	7263      	strb	r3, [r4, #9]
							CRC_RESULT = 0;
    3e5e:	7013      	strb	r3, [r2, #0]
							state=READ_CRC_1;
    3e60:	330e      	adds	r3, #14
    3e62:	e608      	b.n	3a76 <_ZN10GPSL80Lite6updateEv+0x6a>
							CRC = CRC ^ uint8_t(_newChar); // Calculate CRC
    3e64:	0022      	movs	r2, r4
    3e66:	3253      	adds	r2, #83	; 0x53
    3e68:	7811      	ldrb	r1, [r2, #0]
    3e6a:	404b      	eors	r3, r1
    3e6c:	e6c2      	b.n	3bf4 <_ZN10GPSL80Lite6updateEv+0x1e8>
	if(dummy > 57) // Must be A-F
    3e6e:	23ff      	movs	r3, #255	; 0xff
    3e70:	401a      	ands	r2, r3
		dummy = dummy - 48;
    3e72:	000b      	movs	r3, r1
    3e74:	3b30      	subs	r3, #48	; 0x30
    3e76:	b2db      	uxtb	r3, r3
	if(dummy > 57) // Must be A-F
    3e78:	2a39      	cmp	r2, #57	; 0x39
    3e7a:	dd01      	ble.n	3e80 <_ZN10GPSL80Lite6updateEv+0x474>
		dummy = dummy - 55;		
    3e7c:	3937      	subs	r1, #55	; 0x37
    3e7e:	b2cb      	uxtb	r3, r1
 					CRC_RESULT += charToInt(_newChar)*16;
    3e80:	0022      	movs	r2, r4
    3e82:	3254      	adds	r2, #84	; 0x54
    3e84:	7811      	ldrb	r1, [r2, #0]
    3e86:	011b      	lsls	r3, r3, #4
    3e88:	18cb      	adds	r3, r1, r3
    3e8a:	7013      	strb	r3, [r2, #0]
					state=READ_CRC_2;
    3e8c:	230f      	movs	r3, #15
    3e8e:	e5f2      	b.n	3a76 <_ZN10GPSL80Lite6updateEv+0x6a>
	if(dummy > 57) // Must be A-F
    3e90:	23ff      	movs	r3, #255	; 0xff
    3e92:	401a      	ands	r2, r3
		dummy = dummy - 48;
    3e94:	000b      	movs	r3, r1
    3e96:	3b30      	subs	r3, #48	; 0x30
    3e98:	b2db      	uxtb	r3, r3
	if(dummy > 57) // Must be A-F
    3e9a:	2a39      	cmp	r2, #57	; 0x39
    3e9c:	dd01      	ble.n	3ea2 <_ZN10GPSL80Lite6updateEv+0x496>
		dummy = dummy - 55;		
    3e9e:	3937      	subs	r1, #55	; 0x37
    3ea0:	b2cb      	uxtb	r3, r1
					CRC_RESULT += charToInt(_newChar);
    3ea2:	0022      	movs	r2, r4
    3ea4:	3254      	adds	r2, #84	; 0x54
    3ea6:	7811      	ldrb	r1, [r2, #0]
    3ea8:	1859      	adds	r1, r3, r1
					if(CRC_RESULT == CRC) // check if CRC is ok.
    3eaa:	0023      	movs	r3, r4
					CRC_RESULT += charToInt(_newChar);
    3eac:	b2c9      	uxtb	r1, r1
    3eae:	7011      	strb	r1, [r2, #0]
					if(CRC_RESULT == CRC) // check if CRC is ok.
    3eb0:	3353      	adds	r3, #83	; 0x53
    3eb2:	781b      	ldrb	r3, [r3, #0]
    3eb4:	428b      	cmp	r3, r1
    3eb6:	d144      	bne.n	3f42 <_ZN10GPSL80Lite6updateEv+0x536>
						SerialAUX->print(" CRC OK, Updating GPS data->");
    3eb8:	4d26      	ldr	r5, [pc, #152]	; (3f54 <_ZN10GPSL80Lite6updateEv+0x548>)
    3eba:	4927      	ldr	r1, [pc, #156]	; (3f58 <_ZN10GPSL80Lite6updateEv+0x54c>)
    3ebc:	6828      	ldr	r0, [r5, #0]
    3ebe:	f002 f930 	bl	6122 <_ZN5Print5printEPKc>
						updateData();	
    3ec2:	0020      	movs	r0, r4
    3ec4:	f7ff fc18 	bl	36f8 <_ZN10GPSL80Lite10updateDataEv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    3ec8:	4924      	ldr	r1, [pc, #144]	; (3f5c <_ZN10GPSL80Lite6updateEv+0x550>)
    3eca:	a805      	add	r0, sp, #20
						SerialAUX->println("UTC:"+ String(dataOut->UTCTime) + "#sat=" + String(dataOut->NumberOfSatellites) + " Fix:" + String(dataOut->Fix));												
    3ecc:	682d      	ldr	r5, [r5, #0]
    3ece:	f003 feca 	bl	7c66 <_ZN6StringC1EPKc>
    3ed2:	68e3      	ldr	r3, [r4, #12]
    3ed4:	2202      	movs	r2, #2
    3ed6:	6819      	ldr	r1, [r3, #0]
    3ed8:	a802      	add	r0, sp, #8
    3eda:	f003 ff2b 	bl	7d34 <_ZN6StringC1Efh>
    3ede:	a902      	add	r1, sp, #8
    3ee0:	a805      	add	r0, sp, #20
    3ee2:	f003 ff64 	bl	7dae <_ZplRK15StringSumHelperRK6String>
    3ee6:	491e      	ldr	r1, [pc, #120]	; (3f60 <_ZN10GPSL80Lite6updateEv+0x554>)
    3ee8:	f003 ff6e 	bl	7dc8 <_ZplRK15StringSumHelperPKc>
    3eec:	0006      	movs	r6, r0
    3eee:	68e3      	ldr	r3, [r4, #12]
    3ef0:	220a      	movs	r2, #10
    3ef2:	3332      	adds	r3, #50	; 0x32
    3ef4:	7819      	ldrb	r1, [r3, #0]
    3ef6:	a808      	add	r0, sp, #32
    3ef8:	f003 fee7 	bl	7cca <_ZN6StringC1Ehh>
    3efc:	a908      	add	r1, sp, #32
    3efe:	0030      	movs	r0, r6
    3f00:	f003 ff55 	bl	7dae <_ZplRK15StringSumHelperRK6String>
    3f04:	4917      	ldr	r1, [pc, #92]	; (3f64 <_ZN10GPSL80Lite6updateEv+0x558>)
    3f06:	f003 ff5f 	bl	7dc8 <_ZplRK15StringSumHelperPKc>
    3f0a:	0006      	movs	r6, r0
    3f0c:	68e3      	ldr	r3, [r4, #12]
    3f0e:	a80b      	add	r0, sp, #44	; 0x2c
    3f10:	3330      	adds	r3, #48	; 0x30
    3f12:	7819      	ldrb	r1, [r3, #0]
    3f14:	f003 fecb 	bl	7cae <_ZN6StringC1Ec>
    3f18:	a90b      	add	r1, sp, #44	; 0x2c
    3f1a:	0030      	movs	r0, r6
    3f1c:	f003 ff47 	bl	7dae <_ZplRK15StringSumHelperRK6String>
    3f20:	0001      	movs	r1, r0
    3f22:	0028      	movs	r0, r5
    3f24:	f002 f90a 	bl	613c <_ZN5Print7printlnERK6String>
    3f28:	a80b      	add	r0, sp, #44	; 0x2c
    3f2a:	f003 fe54 	bl	7bd6 <_ZN6StringD1Ev>
    3f2e:	a808      	add	r0, sp, #32
    3f30:	f003 fe51 	bl	7bd6 <_ZN6StringD1Ev>
    3f34:	a802      	add	r0, sp, #8
    3f36:	f003 fe4e 	bl	7bd6 <_ZN6StringD1Ev>
class StringSumHelper : public String
    3f3a:	a805      	add	r0, sp, #20
    3f3c:	f003 fe4b 	bl	7bd6 <_ZN6StringD1Ev>
    3f40:	e5ae      	b.n	3aa0 <_ZN10GPSL80Lite6updateEv+0x94>
						if(CRCErrors < 255)
    3f42:	0022      	movs	r2, r4
    3f44:	3251      	adds	r2, #81	; 0x51
    3f46:	7813      	ldrb	r3, [r2, #0]
    3f48:	2bff      	cmp	r3, #255	; 0xff
    3f4a:	d100      	bne.n	3f4e <_ZN10GPSL80Lite6updateEv+0x542>
    3f4c:	e5a8      	b.n	3aa0 <_ZN10GPSL80Lite6updateEv+0x94>
							CRCErrors++;
    3f4e:	3301      	adds	r3, #1
    3f50:	7013      	strb	r3, [r2, #0]
    3f52:	e5a5      	b.n	3aa0 <_ZN10GPSL80Lite6updateEv+0x94>
    3f54:	2000029c 	.word	0x2000029c
    3f58:	0000d92c 	.word	0x0000d92c
    3f5c:	0000d949 	.word	0x0000d949
    3f60:	0000d94e 	.word	0x0000d94e
    3f64:	0000d954 	.word	0x0000d954

00003f68 <_Z6hwInitv>:

// Must be freed up in variant.cpp or alternative use Serial1 (defualt on mkrzero and uses same pins)
Uart *SerialAUX = NULL;
//Uart auxSerial(&sercom5, auxRXPin, auxTXPin, SERCOM_RX_PAD_3, UART_TX_PAD_2);                                // Create the new UART instance for auxillary serial.

void hwInit() {
    3f68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}


	// Init Pins for Power:
	pinMode(powerOnPin, OUTPUT);
    3f6a:	2101      	movs	r1, #1
    3f6c:	2000      	movs	r0, #0
    3f6e:	f003 fd39 	bl	79e4 <pinMode>
	digitalWrite(powerOnPin, LOW); // LOW = OFF
    3f72:	2100      	movs	r1, #0
    3f74:	0008      	movs	r0, r1
    3f76:	f003 fd81 	bl	7a7c <digitalWrite>

	// Init pins for analog voltage read:  PRICE ~70uA (or not)
	pinMode(analogVinPin, INPUT);
    3f7a:	2100      	movs	r1, #0
    3f7c:	2013      	movs	r0, #19
    3f7e:	f003 fd31 	bl	79e4 <pinMode>
	pinMode(analogVbatPin, INPUT);
    3f82:	2100      	movs	r1, #0
    3f84:	2010      	movs	r0, #16
    3f86:	f003 fd2d 	bl	79e4 <pinMode>
	analogReference(AR_INTERNAL1V0); // Use internal 1V as voltage reference.
    3f8a:	2003      	movs	r0, #3
    3f8c:	f003 fc92 	bl	78b4 <analogReference>

	#if PCB_VERSION == 11
		pinMode(analogVin5VPin, INPUT);
    3f90:	2100      	movs	r1, #0
    3f92:	200f      	movs	r0, #15
    3f94:	f003 fd26 	bl	79e4 <pinMode>
	#endif

	
	// Init pins for GPS: Price: ~0uA
	pinMode(gPSPowerOnPin, OUTPUT);
    3f98:	2101      	movs	r1, #1
    3f9a:	2014      	movs	r0, #20
    3f9c:	f003 fd22 	bl	79e4 <pinMode>
	digitalWrite(gPSPowerOnPin, LOW);  // High=Off, Low= On
    3fa0:	2100      	movs	r1, #0
    3fa2:	2014      	movs	r0, #20
    3fa4:	f003 fd6a 	bl	7a7c <digitalWrite>
	#if PCB_VERSION == 11
		pinMode(GPSBackupPowerPin, OUTPUT);
    3fa8:	2101      	movs	r1, #1
    3faa:	201d      	movs	r0, #29
    3fac:	f003 fd1a 	bl	79e4 <pinMode>
		digitalWrite(GPSBackupPowerPin, HIGH);  // High= backup power on, LOW=Backup power off.
    3fb0:	2101      	movs	r1, #1
    3fb2:	201d      	movs	r0, #29
    3fb4:	f003 fd62 	bl	7a7c <digitalWrite>
	#endif

	delay(2000);	

	// Now that the GPS has been power cycled, we know it is talking 9600.
	SerialGPS = new Uart(&sercom2, GPSRxPin, GPSTxPin, SERCOM_RX_PAD_1, UART_TX_PAD_0);   // Create the new UART instance for the GPS module
    3fb8:	268f      	movs	r6, #143	; 0x8f
	delay(2000);	
    3fba:	20fa      	movs	r0, #250	; 0xfa
	SerialGPS = new Uart(&sercom2, GPSRxPin, GPSTxPin, SERCOM_RX_PAD_1, UART_TX_PAD_0);   // Create the new UART instance for the GPS module
    3fbc:	00b6      	lsls	r6, r6, #2
	delay(2000);	
    3fbe:	00c0      	lsls	r0, r0, #3
    3fc0:	f002 f842 	bl	6048 <delay>
	SerialGPS = new Uart(&sercom2, GPSRxPin, GPSTxPin, SERCOM_RX_PAD_1, UART_TX_PAD_0);   // Create the new UART instance for the GPS module
    3fc4:	0030      	movs	r0, r6
    3fc6:	f002 f87b 	bl	60c0 <_Znwj>
    3fca:	2401      	movs	r4, #1
    3fcc:	2500      	movs	r5, #0
    3fce:	0007      	movs	r7, r0
    3fd0:	220c      	movs	r2, #12
    3fd2:	9501      	str	r5, [sp, #4]
    3fd4:	9400      	str	r4, [sp, #0]
    3fd6:	230b      	movs	r3, #11
    3fd8:	493a      	ldr	r1, [pc, #232]	; (40c4 <_Z6hwInitv+0x15c>)
    3fda:	f002 fa9d 	bl	6518 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
    3fde:	4b3a      	ldr	r3, [pc, #232]	; (40c8 <_Z6hwInitv+0x160>)

	// Init for FRSKY SPORT:
	pinMode(fryskyInvertPin, OUTPUT);    // THIS LINE MAKES COM20 UNIT STALL HERE!!!!
    3fe0:	0021      	movs	r1, r4
    3fe2:	2002      	movs	r0, #2
	SerialGPS = new Uart(&sercom2, GPSRxPin, GPSTxPin, SERCOM_RX_PAD_1, UART_TX_PAD_0);   // Create the new UART instance for the GPS module
    3fe4:	601f      	str	r7, [r3, #0]
	pinMode(fryskyInvertPin, OUTPUT);    // THIS LINE MAKES COM20 UNIT STALL HERE!!!!
    3fe6:	f003 fcfd 	bl	79e4 <pinMode>
	digitalWrite(fryskyInvertPin, HIGH);
    3fea:	0021      	movs	r1, r4
    3fec:	2002      	movs	r0, #2
    3fee:	f003 fd45 	bl	7a7c <digitalWrite>

	// Init LED 2
	pinMode(led2Pin, OUTPUT);
    3ff2:	0021      	movs	r1, r4
    3ff4:	2015      	movs	r0, #21
    3ff6:	f003 fcf5 	bl	79e4 <pinMode>
	digitalWrite(led2Pin, HIGH);  // Low=off, High=On
    3ffa:	0021      	movs	r1, r4
    3ffc:	2015      	movs	r0, #21
    3ffe:	f003 fd3d 	bl	7a7c <digitalWrite>

	
	// Init the RCin SBUS pins: price 0uA
	SerialSBUS = new Uart(&sercom4, sBUSRXPin, sBUSRXPin, SERCOM_RX_PAD_1, UART_TX_PAD_0);   // Create the new UART instance for the GPS module
    4002:	0030      	movs	r0, r6
    4004:	f002 f85c 	bl	60c0 <_Znwj>
    4008:	2321      	movs	r3, #33	; 0x21
    400a:	0007      	movs	r7, r0
    400c:	001a      	movs	r2, r3
    400e:	9501      	str	r5, [sp, #4]
    4010:	9400      	str	r4, [sp, #0]
    4012:	492e      	ldr	r1, [pc, #184]	; (40cc <_Z6hwInitv+0x164>)
    4014:	f002 fa80 	bl	6518 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
    4018:	4b2d      	ldr	r3, [pc, #180]	; (40d0 <_Z6hwInitv+0x168>)
	pinMode(sBUSInvertPin, OUTPUT);
    401a:	0021      	movs	r1, r4
    401c:	2012      	movs	r0, #18
	SerialSBUS = new Uart(&sercom4, sBUSRXPin, sBUSRXPin, SERCOM_RX_PAD_1, UART_TX_PAD_0);   // Create the new UART instance for the GPS module
    401e:	601f      	str	r7, [r3, #0]
	pinMode(sBUSInvertPin, OUTPUT);
    4020:	f003 fce0 	bl	79e4 <pinMode>
	digitalWrite(sBUSInvertPin, LOW);
    4024:	0029      	movs	r1, r5
    4026:	2012      	movs	r0, #18
    4028:	f003 fd28 	bl	7a7c <digitalWrite>
	
	
	// Init SPI and pins used for Radio price 0uA
	pinMode(chipSelectPin, OUTPUT);
    402c:	0021      	movs	r1, r4
    402e:	0020      	movs	r0, r4
    4030:	f003 fcd8 	bl	79e4 <pinMode>
	digitalWrite(chipSelectPin, LOW);
    4034:	0029      	movs	r1, r5
    4036:	0020      	movs	r0, r4
    4038:	f003 fd20 	bl	7a7c <digitalWrite>
	pinMode(resetPin, OUTPUT);
    403c:	0021      	movs	r1, r4
    403e:	2004      	movs	r0, #4
    4040:	f003 fcd0 	bl	79e4 <pinMode>
	digitalWrite(resetPin, LOW);
    4044:	0029      	movs	r1, r5
    4046:	2004      	movs	r0, #4
    4048:	f003 fd18 	bl	7a7c <digitalWrite>
	pinMode(rxEnPin, OUTPUT);
    404c:	0021      	movs	r1, r4
    404e:	2011      	movs	r0, #17
    4050:	f003 fcc8 	bl	79e4 <pinMode>
	digitalWrite(rxEnPin, HIGH); // RX enabled by default.
    4054:	0021      	movs	r1, r4
    4056:	2011      	movs	r0, #17
    4058:	f003 fd10 	bl	7a7c <digitalWrite>
	pinMode(txEnPin, OUTPUT);
    405c:	0021      	movs	r1, r4
    405e:	2020      	movs	r0, #32
    4060:	f003 fcc0 	bl	79e4 <pinMode>
	digitalWrite(txEnPin, LOW);
    4064:	0029      	movs	r1, r5
    4066:	2020      	movs	r0, #32
    4068:	f003 fd08 	bl	7a7c <digitalWrite>
	pinMode(busyPin, INPUT);
    406c:	0029      	movs	r1, r5
    406e:	2005      	movs	r0, #5
    4070:	f003 fcb8 	bl	79e4 <pinMode>
	pinMode(dio1Pin, INPUT);
    4074:	0029      	movs	r1, r5
    4076:	2019      	movs	r0, #25
    4078:	f003 fcb4 	bl	79e4 <pinMode>

	// Init Baro
	#if PCB_VERSION == 11
		pinMode(Baro_chipSelectPin, OUTPUT);
    407c:	0021      	movs	r1, r4
    407e:	2018      	movs	r0, #24
    4080:	f003 fcb0 	bl	79e4 <pinMode>
		digitalWrite(Baro_chipSelectPin, HIGH); // Not active!
    4084:	0021      	movs	r1, r4
    4086:	2018      	movs	r0, #24
    4088:	f003 fcf8 	bl	7a7c <digitalWrite>
	#endif
	
	// Init Safety switch and LED:
	#if PCB_VERSION == 11
		pinMode(SaftySwitchPin, INPUT);
    408c:	0029      	movs	r1, r5
    408e:	201a      	movs	r0, #26
    4090:	f003 fca8 	bl	79e4 <pinMode>
		pinMode(SaftyLEDPin, OUTPUT);
    4094:	0021      	movs	r1, r4
    4096:	201e      	movs	r0, #30
    4098:	f003 fca4 	bl	79e4 <pinMode>
		digitalWrite(SaftyLEDPin, LOW);
    409c:	0029      	movs	r1, r5
    409e:	201e      	movs	r0, #30
    40a0:	f003 fcec 	bl	7a7c <digitalWrite>
	#endif
	
	// Make SerialAUX Uart:
	SerialAUX = new Uart(&sercom5, auxRXPin, auxTXPin, SERCOM_RX_PAD_3, UART_TX_PAD_2);   // Create the new UART instance for the AUX serial port
    40a4:	0030      	movs	r0, r6
    40a6:	f002 f80b 	bl	60c0 <_Znwj>
    40aa:	2303      	movs	r3, #3
    40ac:	0005      	movs	r5, r0
    40ae:	9300      	str	r3, [sp, #0]
    40b0:	9401      	str	r4, [sp, #4]
    40b2:	330b      	adds	r3, #11
    40b4:	220d      	movs	r2, #13
    40b6:	4907      	ldr	r1, [pc, #28]	; (40d4 <_Z6hwInitv+0x16c>)
    40b8:	f002 fa2e 	bl	6518 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
    40bc:	4b06      	ldr	r3, [pc, #24]	; (40d8 <_Z6hwInitv+0x170>)
    40be:	601d      	str	r5, [r3, #0]
	
}
    40c0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    40c2:	46c0      	nop			; (mov r8, r8)
    40c4:	20000a00 	.word	0x20000a00
    40c8:	200002a0 	.word	0x200002a0
    40cc:	20000a08 	.word	0x20000a08
    40d0:	200002a4 	.word	0x200002a4
    40d4:	20000a0c 	.word	0x20000a0c
    40d8:	2000029c 	.word	0x2000029c

000040dc <SERCOM2_Handler>:
		
	// Attach the interrupt handler to the SERCOM
void SERCOM2_Handler(){
    40dc:	b510      	push	{r4, lr}
	SerialGPS->IrqHandler();
    40de:	4b02      	ldr	r3, [pc, #8]	; (40e8 <SERCOM2_Handler+0xc>)
    40e0:	6818      	ldr	r0, [r3, #0]
    40e2:	f002 fa84 	bl	65ee <_ZN4Uart10IrqHandlerEv>
}
    40e6:	bd10      	pop	{r4, pc}
    40e8:	200002a0 	.word	0x200002a0

000040ec <SERCOM3_Handler>:

void SERCOM3_Handler(){
    40ec:	b510      	push	{r4, lr}
	SerialfrskySPort->IrqHandler();
    40ee:	4b02      	ldr	r3, [pc, #8]	; (40f8 <SERCOM3_Handler+0xc>)
    40f0:	6818      	ldr	r0, [r3, #0]
    40f2:	f002 fa7c 	bl	65ee <_ZN4Uart10IrqHandlerEv>
}
    40f6:	bd10      	pop	{r4, pc}
    40f8:	200002a8 	.word	0x200002a8

000040fc <SERCOM4_Handler>:
	
void SERCOM4_Handler(){
    40fc:	b510      	push	{r4, lr}
	SerialSBUS->IrqHandler();
    40fe:	4b02      	ldr	r3, [pc, #8]	; (4108 <SERCOM4_Handler+0xc>)
    4100:	6818      	ldr	r0, [r3, #0]
    4102:	f002 fa74 	bl	65ee <_ZN4Uart10IrqHandlerEv>
}
    4106:	bd10      	pop	{r4, pc}
    4108:	200002a4 	.word	0x200002a4

0000410c <SERCOM5_Handler>:
	
void SERCOM5_Handler(){
    410c:	b510      	push	{r4, lr}
	SerialAUX->IrqHandler();
    410e:	4b02      	ldr	r3, [pc, #8]	; (4118 <SERCOM5_Handler+0xc>)
    4110:	6818      	ldr	r0, [r3, #0]
    4112:	f002 fa6c 	bl	65ee <_ZN4Uart10IrqHandlerEv>
}
    4116:	bd10      	pop	{r4, pc}
    4118:	2000029c 	.word	0x2000029c

0000411c <_Z17getBatteryVoltagev>:
	

float getBatteryVoltage(void){
    411c:	b510      	push	{r4, lr}
	#if PCB_VERSION == 10
		return ((((float)analogRead(analogVbatPin))*4.9)/1024.0);
	#elif PCB_VERSION == 11 
		return ((((float)analogRead(analogVbatPin))*5.7)/1024.0); // R1=470k R2=100k; Vinput=R2/(R1+R2)*Vbat = 100k/570k*Vbat----- Vbat=AnalogRead/1024*1V*(570k/100k) = AR/1024*5.7
    411e:	2010      	movs	r0, #16
    4120:	f003 fbfa 	bl	7918 <analogRead>
    4124:	f005 faa2 	bl	966c <__aeabi_ui2f>
    4128:	f007 f88e 	bl	b248 <__aeabi_f2d>
    412c:	4a05      	ldr	r2, [pc, #20]	; (4144 <_Z17getBatteryVoltagev+0x28>)
    412e:	4b06      	ldr	r3, [pc, #24]	; (4148 <_Z17getBatteryVoltagev+0x2c>)
    4130:	f006 fa26 	bl	a580 <__aeabi_dmul>
    4134:	2200      	movs	r2, #0
    4136:	4b05      	ldr	r3, [pc, #20]	; (414c <_Z17getBatteryVoltagev+0x30>)
    4138:	f006 fa22 	bl	a580 <__aeabi_dmul>
    413c:	f007 f8d6 	bl	b2ec <__aeabi_d2f>
	#else
		#error What the fuck
	#endif	
}
    4140:	bd10      	pop	{r4, pc}
    4142:	46c0      	nop			; (mov r8, r8)
    4144:	cccccccd 	.word	0xcccccccd
    4148:	4016cccc 	.word	0x4016cccc
    414c:	3f500000 	.word	0x3f500000

00004150 <_Z15getInputVoltagev>:

float getInputVoltage(void){
    4150:	b510      	push	{r4, lr}
	#if PCB_VERSION == 10
		return 0;
	#elif PCB_VERSION == 11 
		return ((((float)analogRead(analogVinPin))*11)/1024.0); 
    4152:	2013      	movs	r0, #19
    4154:	f003 fbe0 	bl	7918 <analogRead>
    4158:	f005 fa88 	bl	966c <__aeabi_ui2f>
    415c:	4903      	ldr	r1, [pc, #12]	; (416c <_Z15getInputVoltagev+0x1c>)
    415e:	f004 ff59 	bl	9014 <__aeabi_fmul>
    4162:	21ea      	movs	r1, #234	; 0xea
    4164:	0589      	lsls	r1, r1, #22
    4166:	f004 ff55 	bl	9014 <__aeabi_fmul>
	#endif	
}
    416a:	bd10      	pop	{r4, pc}
    416c:	41300000 	.word	0x41300000

00004170 <_Z17getInput5VVoltagev>:

float getInput5VVoltage(void){
    4170:	b510      	push	{r4, lr}
	#if PCB_VERSION == 11
		return ((((float)analogRead(analogVin5VPin))*11)/1024.0);
    4172:	200f      	movs	r0, #15
    4174:	f003 fbd0 	bl	7918 <analogRead>
    4178:	f005 fa78 	bl	966c <__aeabi_ui2f>
    417c:	4903      	ldr	r1, [pc, #12]	; (418c <_Z17getInput5VVoltagev+0x1c>)
    417e:	f004 ff49 	bl	9014 <__aeabi_fmul>
    4182:	21ea      	movs	r1, #234	; 0xea
    4184:	0589      	lsls	r1, r1, #22
    4186:	f004 ff45 	bl	9014 <__aeabi_fmul>
	#endif
}
    418a:	bd10      	pop	{r4, pc}
    418c:	41300000 	.word	0x41300000

00004190 <_Z7PowerONv>:

void PowerON(void){
    4190:	b510      	push	{r4, lr}
	digitalWrite(powerOnPin, HIGH); // LOW = OFF
    4192:	2101      	movs	r1, #1
    4194:	2000      	movs	r0, #0
    4196:	f003 fc71 	bl	7a7c <digitalWrite>
}
    419a:	bd10      	pop	{r4, pc}

0000419c <_Z8PowerOFFv>:

void PowerOFF(void){
	digitalWrite(powerOnPin, LOW); // LOW = OFF
    419c:	2100      	movs	r1, #0
void PowerOFF(void){
    419e:	b510      	push	{r4, lr}
	digitalWrite(powerOnPin, LOW); // LOW = OFF
    41a0:	0008      	movs	r0, r1
    41a2:	f003 fc6b 	bl	7a7c <digitalWrite>
}
    41a6:	bd10      	pop	{r4, pc}

000041a8 <_Z10PowerONGPSv>:

void PowerONGPS(void){
    41a8:	b510      	push	{r4, lr}
	digitalWrite(gPSPowerOnPin, LOW);  // High=Off, Low= On
    41aa:	2100      	movs	r1, #0
    41ac:	2014      	movs	r0, #20
    41ae:	f003 fc65 	bl	7a7c <digitalWrite>
}
    41b2:	bd10      	pop	{r4, pc}

000041b4 <_Z11PowerOFFGPSv>:
	
void PowerOFFGPS(void){
    41b4:	b510      	push	{r4, lr}
	digitalWrite(gPSPowerOnPin, HIGH);  // High=Off, Low= On
    41b6:	2101      	movs	r1, #1
    41b8:	2014      	movs	r0, #20
    41ba:	f003 fc5f 	bl	7a7c <digitalWrite>
}
    41be:	bd10      	pop	{r4, pc}

000041c0 <_Z16PowerONGPSBackupv>:

#if PCB_VERSION == 11
	void PowerONGPSBackup(void){
    41c0:	b510      	push	{r4, lr}
		digitalWrite(GPSBackupPowerPin, HIGH);  // High=On, Low= Off
    41c2:	2101      	movs	r1, #1
    41c4:	201d      	movs	r0, #29
    41c6:	f003 fc59 	bl	7a7c <digitalWrite>
	}
    41ca:	bd10      	pop	{r4, pc}

000041cc <_Z16LEDSaftySwitchONv>:

	void PowerOFFGPSBackup(void){
		digitalWrite(GPSBackupPowerPin, LOW);  // High=On, Low= Off
	}

	void LEDSaftySwitchON(void){
    41cc:	b510      	push	{r4, lr}
		digitalWrite(SaftyLEDPin, LOW);
    41ce:	2100      	movs	r1, #0
    41d0:	201e      	movs	r0, #30
    41d2:	f003 fc53 	bl	7a7c <digitalWrite>
	}
    41d6:	bd10      	pop	{r4, pc}

000041d8 <_Z17LEDSaftySwitchOFFv>:

	void LEDSaftySwitchOFF(void){
    41d8:	b510      	push	{r4, lr}
		digitalWrite(SaftyLEDPin, HIGH);
    41da:	2101      	movs	r1, #1
    41dc:	201e      	movs	r0, #30
    41de:	f003 fc4d 	bl	7a7c <digitalWrite>
	}
    41e2:	bd10      	pop	{r4, pc}

000041e4 <_Z9GoToSleepv>:
			break;
		}
	}while(1); 
}

void GoToSleep(void){
    41e4:	b570      	push	{r4, r5, r6, lr}
	RadioService->PowerDown();
    41e6:	4c0b      	ldr	r4, [pc, #44]	; (4214 <_Z9GoToSleepv+0x30>)
    41e8:	6820      	ldr	r0, [r4, #0]
    41ea:	f000 ff30 	bl	504e <_ZN9RFService9PowerDownEv>
	
	//delay(10); // time to TX Serial.

	//delay(1000);	
	USBDevice.detach();
    41ee:	4d0a      	ldr	r5, [pc, #40]	; (4218 <_Z9GoToSleepv+0x34>)
    41f0:	0028      	movs	r0, r5
    41f2:	f002 fe5d 	bl	6eb0 <_ZN14USBDeviceClass6detachEv>
	SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    41f6:	2304      	movs	r3, #4
    41f8:	4a08      	ldr	r2, [pc, #32]	; (421c <_Z9GoToSleepv+0x38>)
    41fa:	6911      	ldr	r1, [r2, #16]
    41fc:	430b      	orrs	r3, r1
    41fe:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4200:	f3bf 8f4f 	dsb	sy
	__DSB();
	__WFI();
    4204:	bf30      	wfi
	USBDevice.attach();
    4206:	0028      	movs	r0, r5
    4208:	f002 fe14 	bl	6e34 <_ZN14USBDeviceClass6attachEv>

	RadioService->WakeUp();
    420c:	6820      	ldr	r0, [r4, #0]
    420e:	f000 ff26 	bl	505e <_ZN9RFService6WakeUpEv>
}
    4212:	bd70      	pop	{r4, r5, r6, pc}
    4214:	20000398 	.word	0x20000398
    4218:	20000410 	.word	0x20000410
    421c:	e000ed00 	.word	0xe000ed00

00004220 <_Z13BeaconServicev>:
	}while(1);

}

// Ensure a beacon is transmitted every N second.
void BeaconService(void){
    4220:	b510      	push	{r4, lr}
	if(SystemInformation.BeaconSecondCounter >= 5){
    4222:	4b0a      	ldr	r3, [pc, #40]	; (424c <_Z13BeaconServicev+0x2c>)
    4224:	799a      	ldrb	r2, [r3, #6]
    4226:	2a04      	cmp	r2, #4
    4228:	dd09      	ble.n	423e <_Z13BeaconServicev+0x1e>
		// Send a Standard beacon:
		SystemInformation.BeaconSecondCounter =  0; // Reset Beacon counter.
    422a:	2200      	movs	r2, #0
    422c:	719a      	strb	r2, [r3, #6]
		if(SystemInformation.IsGroundStation==false){
    422e:	3334      	adds	r3, #52	; 0x34
    4230:	781b      	ldrb	r3, [r3, #0]
    4232:	4293      	cmp	r3, r2
    4234:	d104      	bne.n	4240 <_Z13BeaconServicev+0x20>
			RadioService->SendBeacon();
    4236:	4b06      	ldr	r3, [pc, #24]	; (4250 <_Z13BeaconServicev+0x30>)
    4238:	6818      	ldr	r0, [r3, #0]
    423a:	f000 ff19 	bl	5070 <_ZN9RFService10SendBeaconEv>
		}else{
			SerialAUX->println("Im groundstation, NoPing!");
		}
		
	}	
}
    423e:	bd10      	pop	{r4, pc}
			SerialAUX->println("Im groundstation, NoPing!");
    4240:	4b04      	ldr	r3, [pc, #16]	; (4254 <_Z13BeaconServicev+0x34>)
    4242:	4905      	ldr	r1, [pc, #20]	; (4258 <_Z13BeaconServicev+0x38>)
    4244:	6818      	ldr	r0, [r3, #0]
    4246:	f001 ff83 	bl	6150 <_ZN5Print7printlnEPKc>
}
    424a:	e7f8      	b.n	423e <_Z13BeaconServicev+0x1e>
    424c:	200003a0 	.word	0x200003a0
    4250:	20000398 	.word	0x20000398
    4254:	2000029c 	.word	0x2000029c
    4258:	0000d99b 	.word	0x0000d99b

0000425c <_Z17One_second_Updatev>:
	return __brkval ? &top - __brkval : &top - __malloc_heap_start;
	#endif  // __arm__
}


void One_second_Update(void){
    425c:	b5f0      	push	{r4, r5, r6, r7, lr}
			if(SystemInformation.SaftySwitchFirstTimePushed==true)
			{
				for(int a=0;a<10;a++)
				{
					LEDSaftySwitchOFF();
					delay(50);
    425e:	2532      	movs	r5, #50	; 0x32
void One_second_Update(void){
    4260:	b08f      	sub	sp, #60	; 0x3c
	while(SystemInformation.SecondCounter){
    4262:	4c4c      	ldr	r4, [pc, #304]	; (4394 <_Z17One_second_Updatev+0x138>)
    4264:	7963      	ldrb	r3, [r4, #5]
    4266:	2b00      	cmp	r3, #0
    4268:	d100      	bne.n	426c <_Z17One_second_Updatev+0x10>
    426a:	e090      	b.n	438e <_Z17One_second_Updatev+0x132>
		SystemInformation.SecondCounter--;
    426c:	3b01      	subs	r3, #1
    426e:	7163      	strb	r3, [r4, #5]
		SystemInformation.BatteryVoltage = getBatteryVoltage();
    4270:	f7ff ff54 	bl	411c <_Z17getBatteryVoltagev>
    4274:	60a0      	str	r0, [r4, #8]
		SystemInformation.InputVoltage = getInputVoltage();
    4276:	f7ff ff6b 	bl	4150 <_Z15getInputVoltagev>
    427a:	60e0      	str	r0, [r4, #12]
		SystemInformation.USBVoltage = getInput5VVoltage();				
    427c:	f7ff ff78 	bl	4170 <_Z17getInput5VVoltagev>
		FrskyGPS.setData(GPSData->LatitudeDecimal, GPSData->LongitudeDecimal,GPSData->Altitude,0,0,0,0,0,GPSData->UTC_hour,GPSData->UTC_min,GPSData->UTC_sec);	
    4280:	4b45      	ldr	r3, [pc, #276]	; (4398 <_Z17One_second_Updatev+0x13c>)
		SystemInformation.USBVoltage = getInput5VVoltage();				
    4282:	6120      	str	r0, [r4, #16]
		FrskyGPS.setData(GPSData->LatitudeDecimal, GPSData->LongitudeDecimal,GPSData->Altitude,0,0,0,0,0,GPSData->UTC_hour,GPSData->UTC_min,GPSData->UTC_sec);	
    4284:	6819      	ldr	r1, [r3, #0]
    4286:	4845      	ldr	r0, [pc, #276]	; (439c <_Z17One_second_Updatev+0x140>)
    4288:	790b      	ldrb	r3, [r1, #4]
    428a:	9307      	str	r3, [sp, #28]
    428c:	794b      	ldrb	r3, [r1, #5]
    428e:	9306      	str	r3, [sp, #24]
    4290:	798b      	ldrb	r3, [r1, #6]
    4292:	9305      	str	r3, [sp, #20]
    4294:	2300      	movs	r3, #0
    4296:	9304      	str	r3, [sp, #16]
    4298:	9303      	str	r3, [sp, #12]
    429a:	9302      	str	r3, [sp, #8]
    429c:	2300      	movs	r3, #0
    429e:	9301      	str	r3, [sp, #4]
    42a0:	9300      	str	r3, [sp, #0]
    42a2:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    42a4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
    42a6:	6a89      	ldr	r1, [r1, #40]	; 0x28
    42a8:	f7ff f884 	bl	33b4 <_ZN19FrSkySportSensorGps7setDataEfffffhhhhhh>
		if(SystemInformation.InputVoltage <= 4.3 || (SystemInformation.SimulateRunningOnBattery)){
    42ac:	68e0      	ldr	r0, [r4, #12]
    42ae:	f006 ffcb 	bl	b248 <__aeabi_f2d>
    42b2:	4a3b      	ldr	r2, [pc, #236]	; (43a0 <_Z17One_second_Updatev+0x144>)
    42b4:	4b3b      	ldr	r3, [pc, #236]	; (43a4 <_Z17One_second_Updatev+0x148>)
    42b6:	f004 fa9d 	bl	87f4 <__aeabi_dcmple>
			if(SystemInformation.SecondsBatteryLowCounter < 255){
    42ba:	0022      	movs	r2, r4
    42bc:	3235      	adds	r2, #53	; 0x35
		if(SystemInformation.InputVoltage <= 4.3 || (SystemInformation.SimulateRunningOnBattery)){
    42be:	2800      	cmp	r0, #0
    42c0:	d104      	bne.n	42cc <_Z17One_second_Updatev+0x70>
    42c2:	0023      	movs	r3, r4
    42c4:	3336      	adds	r3, #54	; 0x36
    42c6:	781b      	ldrb	r3, [r3, #0]
    42c8:	2b00      	cmp	r3, #0
    42ca:	d003      	beq.n	42d4 <_Z17One_second_Updatev+0x78>
			if(SystemInformation.SecondsBatteryLowCounter < 255){
    42cc:	7813      	ldrb	r3, [r2, #0]
    42ce:	2bff      	cmp	r3, #255	; 0xff
    42d0:	d001      	beq.n	42d6 <_Z17One_second_Updatev+0x7a>
				SystemInformation.SecondsBatteryLowCounter++;
    42d2:	3301      	adds	r3, #1
			SystemInformation.SecondsBatteryLowCounter=0;
    42d4:	7013      	strb	r3, [r2, #0]
	StringSumHelper(const char *p) : String(p) {}
    42d6:	4934      	ldr	r1, [pc, #208]	; (43a8 <_Z17One_second_Updatev+0x14c>)
    42d8:	a80b      	add	r0, sp, #44	; 0x2c
    42da:	f003 fcc4 	bl	7c66 <_ZN6StringC1EPKc>
		Serial.println("Switch:" + String(digitalRead(SaftySwitchPin)));
    42de:	201a      	movs	r0, #26
    42e0:	f003 fbf8 	bl	7ad4 <digitalRead>
    42e4:	220a      	movs	r2, #10
    42e6:	0001      	movs	r1, r0
    42e8:	a808      	add	r0, sp, #32
    42ea:	f003 fcff 	bl	7cec <_ZN6StringC1Eih>
    42ee:	a908      	add	r1, sp, #32
    42f0:	a80b      	add	r0, sp, #44	; 0x2c
    42f2:	f003 fd5c 	bl	7dae <_ZplRK15StringSumHelperRK6String>
    42f6:	0001      	movs	r1, r0
    42f8:	482c      	ldr	r0, [pc, #176]	; (43ac <_Z17One_second_Updatev+0x150>)
    42fa:	f001 ff1f 	bl	613c <_ZN5Print7printlnERK6String>
    42fe:	a808      	add	r0, sp, #32
    4300:	f003 fc69 	bl	7bd6 <_ZN6StringD1Ev>
class StringSumHelper : public String
    4304:	a80b      	add	r0, sp, #44	; 0x2c
    4306:	f003 fc66 	bl	7bd6 <_ZN6StringD1Ev>
		if(digitalRead(SaftySwitchPin) == HIGH)
    430a:	201a      	movs	r0, #26
    430c:	f003 fbe2 	bl	7ad4 <digitalRead>
    4310:	2801      	cmp	r0, #1
    4312:	d122      	bne.n	435a <_Z17One_second_Updatev+0xfe>
    4314:	260a      	movs	r6, #10
    4316:	2700      	movs	r7, #0
				count += digitalRead(SaftySwitchPin);
    4318:	201a      	movs	r0, #26
    431a:	f003 fbdb 	bl	7ad4 <digitalRead>
    431e:	3e01      	subs	r6, #1
    4320:	183f      	adds	r7, r7, r0
				delay(2);
    4322:	2002      	movs	r0, #2
    4324:	f001 fe90 	bl	6048 <delay>
			for(int b=0;b<10;b++){
    4328:	2e00      	cmp	r6, #0
    432a:	d1f5      	bne.n	4318 <_Z17One_second_Updatev+0xbc>
			if(count== 10){
    432c:	2f0a      	cmp	r7, #10
    432e:	d198      	bne.n	4262 <_Z17One_second_Updatev+0x6>
				SystemInformation.SafteSwitchPushedTimer++;
    4330:	0022      	movs	r2, r4
    4332:	323a      	adds	r2, #58	; 0x3a
    4334:	7813      	ldrb	r3, [r2, #0]
    4336:	3301      	adds	r3, #1
    4338:	b2db      	uxtb	r3, r3
    433a:	7013      	strb	r3, [r2, #0]
				if(SystemInformation.SafteSwitchPushedTimer == 2){
    433c:	2b02      	cmp	r3, #2
    433e:	d105      	bne.n	434c <_Z17One_second_Updatev+0xf0>
					LEDSaftySwitchON();
    4340:	f7ff ff44 	bl	41cc <_Z16LEDSaftySwitchONv>
					SystemInformation.SaftySwitchFirstTimePushed=true;
    4344:	343b      	adds	r4, #59	; 0x3b
					LEDSaftySwitchON();
					delay(50);
				}
				SystemInformation.SaftySwitchFirstTimePushed=false;
				SystemInformation.SaftySwitchPushed=true;
    4346:	2301      	movs	r3, #1
			}else
			{
				SystemInformation.SafteSwitchPushedTimer=0;
    4348:	7023      	strb	r3, [r4, #0]
    434a:	e78a      	b.n	4262 <_Z17One_second_Updatev+0x6>
				}else if(SystemInformation.SafteSwitchPushedTimer >= 4){
    434c:	2b03      	cmp	r3, #3
    434e:	dd88      	ble.n	4262 <_Z17One_second_Updatev+0x6>
					SystemInformation.SaftySwitchFirstTimePushed=false;
    4350:	343b      	adds	r4, #59	; 0x3b
					LEDSaftySwitchOFF();
    4352:	f7ff ff41 	bl	41d8 <_Z17LEDSaftySwitchOFFv>
					SystemInformation.SaftySwitchFirstTimePushed=false;
    4356:	7026      	strb	r6, [r4, #0]
    4358:	e783      	b.n	4262 <_Z17One_second_Updatev+0x6>
			if(SystemInformation.SaftySwitchFirstTimePushed==true)
    435a:	0023      	movs	r3, r4
    435c:	333b      	adds	r3, #59	; 0x3b
    435e:	781b      	ldrb	r3, [r3, #0]
    4360:	2b00      	cmp	r3, #0
    4362:	d012      	beq.n	438a <_Z17One_second_Updatev+0x12e>
    4364:	260a      	movs	r6, #10
					LEDSaftySwitchOFF();
    4366:	f7ff ff37 	bl	41d8 <_Z17LEDSaftySwitchOFFv>
					delay(50);
    436a:	0028      	movs	r0, r5
    436c:	f001 fe6c 	bl	6048 <delay>
    4370:	3e01      	subs	r6, #1
					LEDSaftySwitchON();
    4372:	f7ff ff2b 	bl	41cc <_Z16LEDSaftySwitchONv>
					delay(50);
    4376:	0028      	movs	r0, r5
    4378:	f001 fe66 	bl	6048 <delay>
				for(int a=0;a<10;a++)
    437c:	2e00      	cmp	r6, #0
    437e:	d1f2      	bne.n	4366 <_Z17One_second_Updatev+0x10a>
				SystemInformation.SaftySwitchFirstTimePushed=false;
    4380:	0023      	movs	r3, r4
    4382:	333b      	adds	r3, #59	; 0x3b
    4384:	701e      	strb	r6, [r3, #0]
				SystemInformation.SaftySwitchPushed=true;
    4386:	343c      	adds	r4, #60	; 0x3c
    4388:	e7dd      	b.n	4346 <_Z17One_second_Updatev+0xea>
				SystemInformation.SafteSwitchPushedTimer=0;
    438a:	343a      	adds	r4, #58	; 0x3a
    438c:	e7dc      	b.n	4348 <_Z17One_second_Updatev+0xec>
			}
		}
		
	}
}
    438e:	b00f      	add	sp, #60	; 0x3c
    4390:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4392:	46c0      	nop			; (mov r8, r8)
    4394:	200003a0 	.word	0x200003a0
    4398:	20000390 	.word	0x20000390
    439c:	200002ac 	.word	0x200002ac
    43a0:	33333333 	.word	0x33333333
    43a4:	40113333 	.word	0x40113333
    43a8:	0000d9b5 	.word	0x0000d9b5
    43ac:	200003f4 	.word	0x200003f4

000043b0 <loop>:
void loop() {
    43b0:	b570      	push	{r4, r5, r6, lr}
		One_second_Update();
    43b2:	f7ff ff53 	bl	425c <_Z17One_second_Updatev>
		GPS->update();  // Function empty serial buffer and analyzes string.
    43b6:	4d53      	ldr	r5, [pc, #332]	; (4504 <loop+0x154>)
    43b8:	6828      	ldr	r0, [r5, #0]
    43ba:	f7ff fb27 	bl	3a0c <_ZN10GPSL80Lite6updateEv>
		BeaconService();
    43be:	f7ff ff2f 	bl	4220 <_Z13BeaconServicev>
		RadioService->Service();
    43c2:	4b51      	ldr	r3, [pc, #324]	; (4508 <loop+0x158>)
    43c4:	6818      	ldr	r0, [r3, #0]
    43c6:	f000 fc31 	bl	4c2c <_ZN10RFProtocol7ServiceEv>
		if(SystemInformation.SaftySwitchPushed == true){
    43ca:	4c50      	ldr	r4, [pc, #320]	; (450c <loop+0x15c>)
    43cc:	0023      	movs	r3, r4
    43ce:	333c      	adds	r3, #60	; 0x3c
    43d0:	781b      	ldrb	r3, [r3, #0]
    43d2:	2b00      	cmp	r3, #0
    43d4:	d001      	beq.n	43da <loop+0x2a>
			SystemInformation.state=POWER_OFF;
    43d6:	2305      	movs	r3, #5
    43d8:	71e3      	strb	r3, [r4, #7]
		switch(SystemInformation.state)
    43da:	79e0      	ldrb	r0, [r4, #7]
    43dc:	2805      	cmp	r0, #5
    43de:	d831      	bhi.n	4444 <loop+0x94>
    43e0:	f004 f85e 	bl	84a0 <__gnu_thumb1_case_uqi>
    43e4:	22130388 	.word	0x22130388
    43e8:	714e      	.short	0x714e
				if(SystemInformation.SecondsBatteryLowCounter > 2){ // filter.
    43ea:	0023      	movs	r3, r4
    43ec:	3335      	adds	r3, #53	; 0x35
    43ee:	781b      	ldrb	r3, [r3, #0]
    43f0:	2b02      	cmp	r3, #2
    43f2:	dd02      	ble.n	43fa <loop+0x4a>
					SystemInformation.state=GET_READY_TO_RUN_ON_BATTERY;
    43f4:	2302      	movs	r3, #2
				SystemInformation.state = STARTING_UP;
    43f6:	71e3      	strb	r3, [r4, #7]
			break;
    43f8:	e7db      	b.n	43b2 <loop+0x2>
					SerialProtocol->Service(); // Comunincation to PC.
    43fa:	4b45      	ldr	r3, [pc, #276]	; (4510 <loop+0x160>)
    43fc:	6818      	ldr	r0, [r3, #0]
    43fe:	f001 fc9b 	bl	5d38 <_ZN10PCProtocol7ServiceEv>
					FrskySport.send(); // Service the Serial for SPORT.
    4402:	4844      	ldr	r0, [pc, #272]	; (4514 <loop+0x164>)
    4404:	f7ff f909 	bl	361a <_ZN19FrSkySportTelemetry4sendEv>
    4408:	e7d3      	b.n	43b2 <loop+0x2>
				if(SystemInformation.SecondsBatteryLowCounter == 0){
    440a:	0023      	movs	r3, r4
    440c:	3335      	adds	r3, #53	; 0x35
    440e:	781b      	ldrb	r3, [r3, #0]
    4410:	2b00      	cmp	r3, #0
    4412:	d101      	bne.n	4418 <loop+0x68>
				SystemInformation.state=NORMAL;		
    4414:	3301      	adds	r3, #1
    4416:	e7ee      	b.n	43f6 <loop+0x46>
					if(SystemInformation.SecondsBatteryLowCounter > POWER_DOWN_DELAY){
    4418:	2b3c      	cmp	r3, #60	; 0x3c
    441a:	ddee      	ble.n	43fa <loop+0x4a>
						PowerONGPSBackup(); // Ensure backup power is enabled for GPS.
    441c:	f7ff fed0 	bl	41c0 <_Z16PowerONGPSBackupv>
						SystemInformation.GPSActiveCounter=0; // ensure GPS active counter is reset.
    4420:	2300      	movs	r3, #0
    4422:	8723      	strh	r3, [r4, #56]	; 0x38
							SystemInformation.state=RUNNING_ON_BATTERY_GPS_ON;
    4424:	2303      	movs	r3, #3
    4426:	e7e6      	b.n	43f6 <loop+0x46>
				if(SystemInformation.InputVoltage > 4.3 && (!SystemInformation.SimulateRunningOnBattery)){ // in debug mode force running on battery mode.
    4428:	68e0      	ldr	r0, [r4, #12]
    442a:	f006 ff0d 	bl	b248 <__aeabi_f2d>
    442e:	4a3a      	ldr	r2, [pc, #232]	; (4518 <loop+0x168>)
    4430:	4b3a      	ldr	r3, [pc, #232]	; (451c <loop+0x16c>)
    4432:	f004 f9e9 	bl	8808 <__aeabi_dcmpgt>
    4436:	2800      	cmp	r0, #0
    4438:	d006      	beq.n	4448 <loop+0x98>
    443a:	0023      	movs	r3, r4
    443c:	3336      	adds	r3, #54	; 0x36
    443e:	781b      	ldrb	r3, [r3, #0]
    4440:	2b00      	cmp	r3, #0
    4442:	d101      	bne.n	4448 <loop+0x98>
				SystemInformation.state = STARTING_UP;
    4444:	2300      	movs	r3, #0
    4446:	e7d6      	b.n	43f6 <loop+0x46>
				}else if(SystemInformation.BatteryVoltage <= 3.0){
    4448:	4935      	ldr	r1, [pc, #212]	; (4520 <loop+0x170>)
    444a:	68a0      	ldr	r0, [r4, #8]
    444c:	f004 fa0c 	bl	8868 <__aeabi_fcmple>
    4450:	1e06      	subs	r6, r0, #0
    4452:	d001      	beq.n	4458 <loop+0xa8>
					SystemInformation.state=POWER_OFF;
    4454:	2305      	movs	r3, #5
    4456:	e7ce      	b.n	43f6 <loop+0x46>
					GoToSleep(); // Sleep until 1 sec interrupt will wake us up.
    4458:	f7ff fec4 	bl	41e4 <_Z9GoToSleepv>
					if(++SystemInformation.GPSActiveCounter > GPS_ON_TIME){ // power off GPS after 1 min.
    445c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    445e:	3301      	adds	r3, #1
    4460:	b29b      	uxth	r3, r3
    4462:	8723      	strh	r3, [r4, #56]	; 0x38
    4464:	2b3c      	cmp	r3, #60	; 0x3c
    4466:	d9a4      	bls.n	43b2 <loop+0x2>
						delay(2000); // busy wait while GPS serial gets time to receive data from GPS (Unable in sleep mode).
    4468:	20fa      	movs	r0, #250	; 0xfa
    446a:	00c0      	lsls	r0, r0, #3
						SystemInformation.GPSActiveCounter=0;
    446c:	8726      	strh	r6, [r4, #56]	; 0x38
						delay(2000); // busy wait while GPS serial gets time to receive data from GPS (Unable in sleep mode).
    446e:	f001 fdeb 	bl	6048 <delay>
						GPS->update();  // Service the GPS.
    4472:	6828      	ldr	r0, [r5, #0]
    4474:	f7ff faca 	bl	3a0c <_ZN10GPSL80Lite6updateEv>
						PowerOFFGPS();// Turn OFF GPS main power.
    4478:	f7ff fe9c 	bl	41b4 <_Z11PowerOFFGPSv>
						SystemInformation.state=RUNNING_ON_BATTERY_GPS_OFF;
    447c:	2304      	movs	r3, #4
    447e:	e7ba      	b.n	43f6 <loop+0x46>
				if(SystemInformation.InputVoltage > 4.3 && (!SystemInformation.SimulateRunningOnBattery)){ // in debug mode force running on battery mode.
    4480:	68e0      	ldr	r0, [r4, #12]
    4482:	f006 fee1 	bl	b248 <__aeabi_f2d>
    4486:	4a24      	ldr	r2, [pc, #144]	; (4518 <loop+0x168>)
    4488:	4b24      	ldr	r3, [pc, #144]	; (451c <loop+0x16c>)
    448a:	f004 f9bd 	bl	8808 <__aeabi_dcmpgt>
    448e:	2800      	cmp	r0, #0
    4490:	d004      	beq.n	449c <loop+0xec>
    4492:	0023      	movs	r3, r4
    4494:	3336      	adds	r3, #54	; 0x36
    4496:	781b      	ldrb	r3, [r3, #0]
    4498:	2b00      	cmp	r3, #0
    449a:	d0d3      	beq.n	4444 <loop+0x94>
					}else if(SystemInformation.BatteryVoltage <= 3.0){
    449c:	4920      	ldr	r1, [pc, #128]	; (4520 <loop+0x170>)
    449e:	68a0      	ldr	r0, [r4, #8]
    44a0:	f004 f9e2 	bl	8868 <__aeabi_fcmple>
    44a4:	1e05      	subs	r5, r0, #0
    44a6:	d1d5      	bne.n	4454 <loop+0xa4>
						GoToSleep(); // Sleep until 1 sec interrupt will wake us up.
    44a8:	f7ff fe9c 	bl	41e4 <_Z9GoToSleepv>
						if(++SystemInformation.GPSActiveCounter > GPS_OFF_TIME){ // Turn on GPS every 10 mins.
    44ac:	2296      	movs	r2, #150	; 0x96
    44ae:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    44b0:	0092      	lsls	r2, r2, #2
    44b2:	3301      	adds	r3, #1
    44b4:	b29b      	uxth	r3, r3
    44b6:	8723      	strh	r3, [r4, #56]	; 0x38
    44b8:	4293      	cmp	r3, r2
    44ba:	d800      	bhi.n	44be <loop+0x10e>
    44bc:	e779      	b.n	43b2 <loop+0x2>
							SystemInformation.GPSActiveCounter=0;
    44be:	8725      	strh	r5, [r4, #56]	; 0x38
							PowerONGPS();// Turn OFF GPS main power.
    44c0:	f7ff fe72 	bl	41a8 <_Z10PowerONGPSv>
    44c4:	e7ae      	b.n	4424 <loop+0x74>
				PowerOFF(); 
    44c6:	f7ff fe69 	bl	419c <_Z8PowerOFFv>
					digitalWrite(led2Pin, HIGH);
    44ca:	2515      	movs	r5, #21
					delay(50);
    44cc:	2432      	movs	r4, #50	; 0x32
					digitalWrite(led2Pin, HIGH);
    44ce:	2101      	movs	r1, #1
    44d0:	0028      	movs	r0, r5
    44d2:	f003 fad3 	bl	7a7c <digitalWrite>
					LEDSaftySwitchON();
    44d6:	f7ff fe79 	bl	41cc <_Z16LEDSaftySwitchONv>
					delay(50);
    44da:	0020      	movs	r0, r4
    44dc:	f001 fdb4 	bl	6048 <delay>
					digitalWrite(led2Pin, LOW);
    44e0:	0028      	movs	r0, r5
    44e2:	2100      	movs	r1, #0
    44e4:	f003 faca 	bl	7a7c <digitalWrite>
					LEDSaftySwitchOFF();
    44e8:	f7ff fe76 	bl	41d8 <_Z17LEDSaftySwitchOFFv>
					delay(50);
    44ec:	0020      	movs	r0, r4
    44ee:	f001 fdab 	bl	6048 <delay>
    44f2:	e7ec      	b.n	44ce <loop+0x11e>
				PowerONGPS();// Turn on GPS.
    44f4:	f7ff fe58 	bl	41a8 <_Z10PowerONGPSv>
				SystemInformation.SecondsBatteryLowCounter = 0;
    44f8:	0022      	movs	r2, r4
				SystemInformation.SecondCounter=0; // reset second counter.
    44fa:	2300      	movs	r3, #0
				SystemInformation.SecondsBatteryLowCounter = 0;
    44fc:	3235      	adds	r2, #53	; 0x35
				SystemInformation.SecondCounter=0; // reset second counter.
    44fe:	7163      	strb	r3, [r4, #5]
				SystemInformation.SecondsBatteryLowCounter = 0;
    4500:	7013      	strb	r3, [r2, #0]
    4502:	e787      	b.n	4414 <loop+0x64>
    4504:	2000038c 	.word	0x2000038c
    4508:	20000398 	.word	0x20000398
    450c:	200003a0 	.word	0x200003a0
    4510:	2000039c 	.word	0x2000039c
    4514:	20000308 	.word	0x20000308
    4518:	33333333 	.word	0x33333333
    451c:	40113333 	.word	0x40113333
    4520:	40400000 	.word	0x40400000

00004524 <_Z13base64_encodePhi>:
	

static String base64_chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
String base64_encode(byte bytes_to_encode[], int in_len)
{
    4524:	b5f0      	push	{r4, r5, r6, r7, lr}
	String ret = "";
	int i = 0;
    4526:	2500      	movs	r5, #0
{
    4528:	b085      	sub	sp, #20
    452a:	9100      	str	r1, [sp, #0]
	String ret = "";
    452c:	4936      	ldr	r1, [pc, #216]	; (4608 <_Z13base64_encodePhi+0xe4>)
{
    452e:	0004      	movs	r4, r0
    4530:	9201      	str	r2, [sp, #4]
	String ret = "";
    4532:	f003 fb98 	bl	7c66 <_ZN6StringC1EPKc>
    4536:	9e00      	ldr	r6, [sp, #0]
    4538:	9b01      	ldr	r3, [sp, #4]
    453a:	9a00      	ldr	r2, [sp, #0]
    453c:	1b9b      	subs	r3, r3, r6
    453e:	18d3      	adds	r3, r2, r3
	int j = 0;
	byte char_array_3[3];
	byte char_array_4[4];
	int place = 0;

	while (in_len-- > 0) {
    4540:	2b00      	cmp	r3, #0
    4542:	dd2b      	ble.n	459c <_Z13base64_encodePhi+0x78>
		char_array_3[i++] = bytes_to_encode[place++];
    4544:	7832      	ldrb	r2, [r6, #0]
    4546:	a902      	add	r1, sp, #8
    4548:	1c6b      	adds	r3, r5, #1
    454a:	554a      	strb	r2, [r1, r5]
		if (i == 3) {
    454c:	2b03      	cmp	r3, #3
    454e:	d122      	bne.n	4596 <_Z13base64_encodePhi+0x72>
			char_array_4[0] = (byte)((char_array_3[0] & 0xfc) >> 2);
    4550:	780a      	ldrb	r2, [r1, #0]
    4552:	ad03      	add	r5, sp, #12
    4554:	0893      	lsrs	r3, r2, #2
    4556:	702b      	strb	r3, [r5, #0]
			char_array_4[1] = (byte)(((char_array_3[0] & 0x03) << 4) + ((char_array_3[1] & 0xf0) >> 4));
    4558:	784b      	ldrb	r3, [r1, #1]
    455a:	2130      	movs	r1, #48	; 0x30
    455c:	0112      	lsls	r2, r2, #4
    455e:	400a      	ands	r2, r1
    4560:	0919      	lsrs	r1, r3, #4
    4562:	1852      	adds	r2, r2, r1
			char_array_4[2] = (byte)(((char_array_3[1] & 0x0f) << 2) + ((char_array_3[2] & 0xc0) >> 6));
    4564:	213c      	movs	r1, #60	; 0x3c
			char_array_4[1] = (byte)(((char_array_3[0] & 0x03) << 4) + ((char_array_3[1] & 0xf0) >> 4));
    4566:	706a      	strb	r2, [r5, #1]
			char_array_4[2] = (byte)(((char_array_3[1] & 0x0f) << 2) + ((char_array_3[2] & 0xc0) >> 6));
    4568:	aa02      	add	r2, sp, #8
    456a:	7892      	ldrb	r2, [r2, #2]
    456c:	009b      	lsls	r3, r3, #2
    456e:	400b      	ands	r3, r1
    4570:	0991      	lsrs	r1, r2, #6
    4572:	185b      	adds	r3, r3, r1
    4574:	70ab      	strb	r3, [r5, #2]
			char_array_4[3] = (byte)(char_array_3[2] & 0x3f);
    4576:	233f      	movs	r3, #63	; 0x3f

			for(i = 0; (i<4) ; i++)
    4578:	2700      	movs	r7, #0
			char_array_4[3] = (byte)(char_array_3[2] & 0x3f);
    457a:	401a      	ands	r2, r3
    457c:	70ea      	strb	r2, [r5, #3]
				ret += base64_chars[char_array_4[i]];
    457e:	5de9      	ldrb	r1, [r5, r7]
    4580:	4822      	ldr	r0, [pc, #136]	; (460c <_Z13base64_encodePhi+0xe8>)
    4582:	f003 fc35 	bl	7df0 <_ZN6StringixEj>
			for(i = 0; (i<4) ; i++)
    4586:	3701      	adds	r7, #1
	String & operator += (char c)			{concat(c); return (*this);}
    4588:	7801      	ldrb	r1, [r0, #0]
    458a:	0020      	movs	r0, r4
    458c:	f003 fc05 	bl	7d9a <_ZN6String6concatEc>
    4590:	2f04      	cmp	r7, #4
    4592:	d1f4      	bne.n	457e <_Z13base64_encodePhi+0x5a>
			i = 0;
    4594:	2300      	movs	r3, #0
    4596:	3601      	adds	r6, #1
    4598:	001d      	movs	r5, r3
    459a:	e7cd      	b.n	4538 <_Z13base64_encodePhi+0x14>
		}
	}

	if (i > 0) {
    459c:	2d00      	cmp	r5, #0
    459e:	d030      	beq.n	4602 <_Z13base64_encodePhi+0xde>
    45a0:	002b      	movs	r3, r5
		for(j = i; j< 3; j++)
		char_array_3[j] = 0;
    45a2:	2200      	movs	r2, #0
		for(j = i; j< 3; j++)
    45a4:	2b02      	cmp	r3, #2
    45a6:	dc03      	bgt.n	45b0 <_Z13base64_encodePhi+0x8c>
		char_array_3[j] = 0;
    45a8:	a902      	add	r1, sp, #8
    45aa:	54ca      	strb	r2, [r1, r3]
		for(j = i; j< 3; j++)
    45ac:	3301      	adds	r3, #1
    45ae:	e7f9      	b.n	45a4 <_Z13base64_encodePhi+0x80>

		char_array_4[0] = (byte)(( char_array_3[0] & 0xfc) >> 2);
		char_array_4[1] = (byte)(((char_array_3[0] & 0x03) << 4) + ((char_array_3[1] & 0xf0) >> 4));
    45b0:	2130      	movs	r1, #48	; 0x30
		char_array_4[0] = (byte)(( char_array_3[0] & 0xfc) >> 2);
    45b2:	ab02      	add	r3, sp, #8
    45b4:	781a      	ldrb	r2, [r3, #0]
    45b6:	ae03      	add	r6, sp, #12
    45b8:	0893      	lsrs	r3, r2, #2
    45ba:	7033      	strb	r3, [r6, #0]
		char_array_4[1] = (byte)(((char_array_3[0] & 0x03) << 4) + ((char_array_3[1] & 0xf0) >> 4));
    45bc:	ab02      	add	r3, sp, #8
    45be:	785b      	ldrb	r3, [r3, #1]
    45c0:	0112      	lsls	r2, r2, #4
    45c2:	400a      	ands	r2, r1
    45c4:	0919      	lsrs	r1, r3, #4
    45c6:	1852      	adds	r2, r2, r1
    45c8:	7072      	strb	r2, [r6, #1]
		char_array_4[2] = (byte)(((char_array_3[1] & 0x0f) << 2) + ((char_array_3[2] & 0xc0) >> 6));
    45ca:	223c      	movs	r2, #60	; 0x3c

		for (j = 0; (j<i + 1); j++)
    45cc:	2700      	movs	r7, #0
		char_array_4[2] = (byte)(((char_array_3[1] & 0x0f) << 2) + ((char_array_3[2] & 0xc0) >> 6));
    45ce:	009b      	lsls	r3, r3, #2
    45d0:	4013      	ands	r3, r2
    45d2:	aa02      	add	r2, sp, #8
    45d4:	7892      	ldrb	r2, [r2, #2]
    45d6:	0992      	lsrs	r2, r2, #6
    45d8:	189b      	adds	r3, r3, r2
    45da:	70b3      	strb	r3, [r6, #2]
		ret += base64_chars[char_array_4[j]];
    45dc:	5df1      	ldrb	r1, [r6, r7]
    45de:	480b      	ldr	r0, [pc, #44]	; (460c <_Z13base64_encodePhi+0xe8>)
    45e0:	f003 fc06 	bl	7df0 <_ZN6StringixEj>
		for (j = 0; (j<i + 1); j++)
    45e4:	3701      	adds	r7, #1
    45e6:	7801      	ldrb	r1, [r0, #0]
    45e8:	0020      	movs	r0, r4
    45ea:	f003 fbd6 	bl	7d9a <_ZN6String6concatEc>
    45ee:	42bd      	cmp	r5, r7
    45f0:	daf4      	bge.n	45dc <_Z13base64_encodePhi+0xb8>

		while((i++ < 3))
    45f2:	2d03      	cmp	r5, #3
    45f4:	d005      	beq.n	4602 <_Z13base64_encodePhi+0xde>
    45f6:	213d      	movs	r1, #61	; 0x3d
    45f8:	0020      	movs	r0, r4
    45fa:	f003 fbce 	bl	7d9a <_ZN6String6concatEc>
    45fe:	3501      	adds	r5, #1
    4600:	e7f7      	b.n	45f2 <_Z13base64_encodePhi+0xce>

	}

	return ret;

    4602:	0020      	movs	r0, r4
    4604:	b005      	add	sp, #20
    4606:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4608:	0000db7e 	.word	0x0000db7e
    460c:	200003e0 	.word	0x200003e0

00004610 <_GLOBAL__sub_I_SystemInformation>:
	RUNNING_ON_BATTERY_GPS_ON,
	RUNNING_ON_BATTERY_GPS_OFF,
	POWER_OFF
};

extern struct SystemInformation_t
    4610:	22fe      	movs	r2, #254	; 0xfe
    4612:	4b21      	ldr	r3, [pc, #132]	; (4698 <_GLOBAL__sub_I_SystemInformation+0x88>)
    4614:	0592      	lsls	r2, r2, #22
    4616:	b510      	push	{r4, lr}
    4618:	601a      	str	r2, [r3, #0]
    461a:	220b      	movs	r2, #11
    461c:	711a      	strb	r2, [r3, #4]
    461e:	2200      	movs	r2, #0
    4620:	2400      	movs	r4, #0
    4622:	609a      	str	r2, [r3, #8]
    4624:	60da      	str	r2, [r3, #12]
    4626:	611a      	str	r2, [r3, #16]
    4628:	4a1c      	ldr	r2, [pc, #112]	; (469c <_GLOBAL__sub_I_SystemInformation+0x8c>)
    462a:	715c      	strb	r4, [r3, #5]
    462c:	719c      	strb	r4, [r3, #6]
    462e:	615a      	str	r2, [r3, #20]
	float InputVoltage = 0;
	float USBVoltage = 0;

	//Serial number:
	volatile uint32_t *AddrSerialNumber1 = (volatile uint32_t *)0x0080A00C;
	uint32_t SerialNumber1= *AddrSerialNumber1;
    4630:	6812      	ldr	r2, [r2, #0]
extern struct SystemInformation_t
    4632:	71dc      	strb	r4, [r3, #7]
    4634:	619a      	str	r2, [r3, #24]
    4636:	4a1a      	ldr	r2, [pc, #104]	; (46a0 <_GLOBAL__sub_I_SystemInformation+0x90>)
FrSkySportSensorGps FrskyGPS;                 // Create GPS sensor with default ID
    4638:	2183      	movs	r1, #131	; 0x83
    463a:	61da      	str	r2, [r3, #28]

	volatile uint32_t *AddrSerialNumber2 = (volatile uint32_t *)0x0080A040;
	uint32_t SerialNumber2= *AddrSerialNumber2;
    463c:	6812      	ldr	r2, [r2, #0]
    463e:	4819      	ldr	r0, [pc, #100]	; (46a4 <_GLOBAL__sub_I_SystemInformation+0x94>)
extern struct SystemInformation_t
    4640:	621a      	str	r2, [r3, #32]
    4642:	4a19      	ldr	r2, [pc, #100]	; (46a8 <_GLOBAL__sub_I_SystemInformation+0x98>)
    4644:	625a      	str	r2, [r3, #36]	; 0x24

	volatile uint32_t *AddrSerialNumber3 = (volatile uint32_t *)0x0080A044;
	uint32_t SerialNumber3= *AddrSerialNumber3;
    4646:	6812      	ldr	r2, [r2, #0]
extern struct SystemInformation_t
    4648:	629a      	str	r2, [r3, #40]	; 0x28
    464a:	4a18      	ldr	r2, [pc, #96]	; (46ac <_GLOBAL__sub_I_SystemInformation+0x9c>)
    464c:	62da      	str	r2, [r3, #44]	; 0x2c

	volatile uint32_t *AddrSerialNumber4 = (volatile uint32_t *)0x0080A048;
	uint32_t SerialNumber4= *AddrSerialNumber4;	
    464e:	6812      	ldr	r2, [r2, #0]
extern struct SystemInformation_t
    4650:	871c      	strh	r4, [r3, #56]	; 0x38
    4652:	631a      	str	r2, [r3, #48]	; 0x30
    4654:	001a      	movs	r2, r3
    4656:	3234      	adds	r2, #52	; 0x34
    4658:	7014      	strb	r4, [r2, #0]
    465a:	001a      	movs	r2, r3
    465c:	3235      	adds	r2, #53	; 0x35
    465e:	7014      	strb	r4, [r2, #0]
    4660:	001a      	movs	r2, r3
    4662:	3236      	adds	r2, #54	; 0x36
    4664:	7014      	strb	r4, [r2, #0]
    4666:	001a      	movs	r2, r3
    4668:	323a      	adds	r2, #58	; 0x3a
    466a:	7014      	strb	r4, [r2, #0]
    466c:	001a      	movs	r2, r3
    466e:	333c      	adds	r3, #60	; 0x3c
    4670:	323b      	adds	r2, #59	; 0x3b
    4672:	701c      	strb	r4, [r3, #0]
    4674:	7014      	strb	r4, [r2, #0]
    4676:	f7fe fe59 	bl	332c <_ZN19FrSkySportSensorGpsC1EN16FrSkySportSensor8SensorIdE>
FrSkySportTelemetry FrskySport;           // Create telemetry object without polling
    467a:	0021      	movs	r1, r4
    467c:	480c      	ldr	r0, [pc, #48]	; (46b0 <_GLOBAL__sub_I_SystemInformation+0xa0>)
    467e:	f7fe ff7a 	bl	3576 <_ZN19FrSkySportTelemetryC1Eb>
static String base64_chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    4682:	4c0c      	ldr	r4, [pc, #48]	; (46b4 <_GLOBAL__sub_I_SystemInformation+0xa4>)
    4684:	490c      	ldr	r1, [pc, #48]	; (46b8 <_GLOBAL__sub_I_SystemInformation+0xa8>)
    4686:	0020      	movs	r0, r4
    4688:	f003 faed 	bl	7c66 <_ZN6StringC1EPKc>
    468c:	4a0b      	ldr	r2, [pc, #44]	; (46bc <_GLOBAL__sub_I_SystemInformation+0xac>)
    468e:	490c      	ldr	r1, [pc, #48]	; (46c0 <_GLOBAL__sub_I_SystemInformation+0xb0>)
    4690:	0020      	movs	r0, r4
    4692:	f003 fef3 	bl	847c <__aeabi_atexit>
    4696:	bd10      	pop	{r4, pc}
    4698:	200003a0 	.word	0x200003a0
    469c:	0080a00c 	.word	0x0080a00c
    46a0:	0080a040 	.word	0x0080a040
    46a4:	200002ac 	.word	0x200002ac
    46a8:	0080a044 	.word	0x0080a044
    46ac:	0080a048 	.word	0x0080a048
    46b0:	20000308 	.word	0x20000308
    46b4:	200003e0 	.word	0x200003e0
    46b8:	0000d95a 	.word	0x0000d95a
    46bc:	20000000 	.word	0x20000000
    46c0:	00007bd7 	.word	0x00007bd7

000046c4 <setup>:
void setup() {	
    46c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	SerialAUX->begin(115200);
    46c6:	24e1      	movs	r4, #225	; 0xe1
void setup() {	
    46c8:	b0ad      	sub	sp, #180	; 0xb4
	hwInit(); // Setup all pins according to hardware.
    46ca:	f7ff fc4d 	bl	3f68 <_Z6hwInitv>
		delay(5000); // Time to get USB bootloader ready, but only if debugger is not connected.
    46ce:	48fb      	ldr	r0, [pc, #1004]	; (4abc <setup+0x3f8>)
    46d0:	f001 fcba 	bl	6048 <delay>
	SerialAUX->begin(115200);
    46d4:	4bfa      	ldr	r3, [pc, #1000]	; (4ac0 <setup+0x3fc>)
    46d6:	0264      	lsls	r4, r4, #9
    46d8:	6818      	ldr	r0, [r3, #0]
    46da:	0021      	movs	r1, r4
    46dc:	6803      	ldr	r3, [r0, #0]
    46de:	69db      	ldr	r3, [r3, #28]
    46e0:	4798      	blx	r3
	Serial.begin(115200);
    46e2:	4ef8      	ldr	r6, [pc, #992]	; (4ac4 <setup+0x400>)
    46e4:	0021      	movs	r1, r4
    46e6:	0030      	movs	r0, r6
    46e8:	f002 f8ee 	bl	68c8 <_ZN7Serial_5beginEm>
	delay(500);
    46ec:	20fa      	movs	r0, #250	; 0xfa
    46ee:	0040      	lsls	r0, r0, #1
    46f0:	f001 fcaa 	bl	6048 <delay>
	StringSumHelper(const char *p) : String(p) {}
    46f4:	49f4      	ldr	r1, [pc, #976]	; (4ac8 <setup+0x404>)
    46f6:	a825      	add	r0, sp, #148	; 0x94
    46f8:	f003 fab5 	bl	7c66 <_ZN6StringC1EPKc>
	Serial.println("Starting RC Transponder ver. " + String((int)SystemInformation.FIRMWARE_VERSION) + "." + String((int)((SystemInformation.FIRMWARE_VERSION-((int)SystemInformation.FIRMWARE_VERSION))*100)));
    46fc:	4df3      	ldr	r5, [pc, #972]	; (4acc <setup+0x408>)
    46fe:	6828      	ldr	r0, [r5, #0]
    4700:	f004 ff44 	bl	958c <__aeabi_f2iz>
    4704:	220a      	movs	r2, #10
    4706:	0001      	movs	r1, r0
    4708:	a822      	add	r0, sp, #136	; 0x88
    470a:	f003 faef 	bl	7cec <_ZN6StringC1Eih>
    470e:	a922      	add	r1, sp, #136	; 0x88
    4710:	a825      	add	r0, sp, #148	; 0x94
    4712:	f003 fb4c 	bl	7dae <_ZplRK15StringSumHelperRK6String>
    4716:	49ee      	ldr	r1, [pc, #952]	; (4ad0 <setup+0x40c>)
    4718:	f003 fb56 	bl	7dc8 <_ZplRK15StringSumHelperPKc>
    471c:	682c      	ldr	r4, [r5, #0]
    471e:	0007      	movs	r7, r0
    4720:	1c20      	adds	r0, r4, #0
    4722:	f004 ff33 	bl	958c <__aeabi_f2iz>
    4726:	f004 ff51 	bl	95cc <__aeabi_i2f>
    472a:	1c01      	adds	r1, r0, #0
    472c:	1c20      	adds	r0, r4, #0
    472e:	f004 fd91 	bl	9254 <__aeabi_fsub>
    4732:	49e8      	ldr	r1, [pc, #928]	; (4ad4 <setup+0x410>)
    4734:	f004 fc6e 	bl	9014 <__aeabi_fmul>
    4738:	f004 ff28 	bl	958c <__aeabi_f2iz>
    473c:	ac28      	add	r4, sp, #160	; 0xa0
    473e:	220a      	movs	r2, #10
    4740:	0001      	movs	r1, r0
    4742:	0020      	movs	r0, r4
    4744:	f003 fad2 	bl	7cec <_ZN6StringC1Eih>
    4748:	0021      	movs	r1, r4
    474a:	0038      	movs	r0, r7
    474c:	f003 fb2f 	bl	7dae <_ZplRK15StringSumHelperRK6String>
    4750:	0001      	movs	r1, r0
    4752:	0030      	movs	r0, r6
    4754:	f001 fcf2 	bl	613c <_ZN5Print7printlnERK6String>
    4758:	0020      	movs	r0, r4
    475a:	f003 fa3c 	bl	7bd6 <_ZN6StringD1Ev>
    475e:	a822      	add	r0, sp, #136	; 0x88
    4760:	f003 fa39 	bl	7bd6 <_ZN6StringD1Ev>
class StringSumHelper : public String
    4764:	a825      	add	r0, sp, #148	; 0x94
    4766:	f003 fa36 	bl	7bd6 <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
    476a:	49db      	ldr	r1, [pc, #876]	; (4ad8 <setup+0x414>)
    476c:	0020      	movs	r0, r4
    476e:	f003 fa7a 	bl	7c66 <_ZN6StringC1EPKc>
	Serial.println("Chip unique serial number part 1:" + String(SystemInformation.SerialNumber1));
    4772:	220a      	movs	r2, #10
    4774:	69a9      	ldr	r1, [r5, #24]
    4776:	a825      	add	r0, sp, #148	; 0x94
    4778:	f003 faca 	bl	7d10 <_ZN6StringC1Emh>
    477c:	a925      	add	r1, sp, #148	; 0x94
    477e:	0020      	movs	r0, r4
    4780:	f003 fb15 	bl	7dae <_ZplRK15StringSumHelperRK6String>
    4784:	0001      	movs	r1, r0
    4786:	0030      	movs	r0, r6
    4788:	f001 fcd8 	bl	613c <_ZN5Print7printlnERK6String>
    478c:	a825      	add	r0, sp, #148	; 0x94
    478e:	f003 fa22 	bl	7bd6 <_ZN6StringD1Ev>
class StringSumHelper : public String
    4792:	0020      	movs	r0, r4
    4794:	f003 fa1f 	bl	7bd6 <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
    4798:	49d0      	ldr	r1, [pc, #832]	; (4adc <setup+0x418>)
    479a:	0020      	movs	r0, r4
    479c:	f003 fa63 	bl	7c66 <_ZN6StringC1EPKc>
	Serial.println("Chip unique serial number part 2:" + String(SystemInformation.SerialNumber2));
    47a0:	220a      	movs	r2, #10
    47a2:	6a29      	ldr	r1, [r5, #32]
    47a4:	a825      	add	r0, sp, #148	; 0x94
    47a6:	f003 fab3 	bl	7d10 <_ZN6StringC1Emh>
    47aa:	a925      	add	r1, sp, #148	; 0x94
    47ac:	0020      	movs	r0, r4
    47ae:	f003 fafe 	bl	7dae <_ZplRK15StringSumHelperRK6String>
    47b2:	0001      	movs	r1, r0
    47b4:	0030      	movs	r0, r6
    47b6:	f001 fcc1 	bl	613c <_ZN5Print7printlnERK6String>
    47ba:	a825      	add	r0, sp, #148	; 0x94
    47bc:	f003 fa0b 	bl	7bd6 <_ZN6StringD1Ev>
class StringSumHelper : public String
    47c0:	0020      	movs	r0, r4
    47c2:	f003 fa08 	bl	7bd6 <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
    47c6:	49c6      	ldr	r1, [pc, #792]	; (4ae0 <setup+0x41c>)
    47c8:	0020      	movs	r0, r4
    47ca:	f003 fa4c 	bl	7c66 <_ZN6StringC1EPKc>
	Serial.println("Chip unique serial number part 3:" + String(SystemInformation.SerialNumber3));
    47ce:	220a      	movs	r2, #10
    47d0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    47d2:	a825      	add	r0, sp, #148	; 0x94
    47d4:	f003 fa9c 	bl	7d10 <_ZN6StringC1Emh>
    47d8:	a925      	add	r1, sp, #148	; 0x94
    47da:	0020      	movs	r0, r4
    47dc:	f003 fae7 	bl	7dae <_ZplRK15StringSumHelperRK6String>
    47e0:	0001      	movs	r1, r0
    47e2:	0030      	movs	r0, r6
    47e4:	f001 fcaa 	bl	613c <_ZN5Print7printlnERK6String>
    47e8:	a825      	add	r0, sp, #148	; 0x94
    47ea:	f003 f9f4 	bl	7bd6 <_ZN6StringD1Ev>
class StringSumHelper : public String
    47ee:	0020      	movs	r0, r4
    47f0:	f003 f9f1 	bl	7bd6 <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
    47f4:	49bb      	ldr	r1, [pc, #748]	; (4ae4 <setup+0x420>)
    47f6:	0020      	movs	r0, r4
    47f8:	f003 fa35 	bl	7c66 <_ZN6StringC1EPKc>
	Serial.println("Chip unique serial number part 4:" + String(SystemInformation.SerialNumber4));
    47fc:	220a      	movs	r2, #10
    47fe:	6b29      	ldr	r1, [r5, #48]	; 0x30
    4800:	a825      	add	r0, sp, #148	; 0x94
    4802:	f003 fa85 	bl	7d10 <_ZN6StringC1Emh>
    4806:	a925      	add	r1, sp, #148	; 0x94
    4808:	0020      	movs	r0, r4
    480a:	f003 fad0 	bl	7dae <_ZplRK15StringSumHelperRK6String>
    480e:	0001      	movs	r1, r0
    4810:	0030      	movs	r0, r6
    4812:	f001 fc93 	bl	613c <_ZN5Print7printlnERK6String>
    4816:	a825      	add	r0, sp, #148	; 0x94
    4818:	f003 f9dd 	bl	7bd6 <_ZN6StringD1Ev>
class StringSumHelper : public String
    481c:	0020      	movs	r0, r4
    481e:	f003 f9da 	bl	7bd6 <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
    4822:	49b1      	ldr	r1, [pc, #708]	; (4ae8 <setup+0x424>)
    4824:	a81f      	add	r0, sp, #124	; 0x7c
    4826:	f003 fa1e 	bl	7c66 <_ZN6StringC1EPKc>
	Serial.println("Chip unique serial number: \"" + String(SystemInformation.SerialNumber1) + String(SystemInformation.SerialNumber2) + String(SystemInformation.SerialNumber3) + String(SystemInformation.SerialNumber4)+"\"");
    482a:	220a      	movs	r2, #10
    482c:	69a9      	ldr	r1, [r5, #24]
    482e:	a81c      	add	r0, sp, #112	; 0x70
    4830:	f003 fa6e 	bl	7d10 <_ZN6StringC1Emh>
    4834:	a91c      	add	r1, sp, #112	; 0x70
    4836:	a81f      	add	r0, sp, #124	; 0x7c
    4838:	f003 fab9 	bl	7dae <_ZplRK15StringSumHelperRK6String>
    483c:	0007      	movs	r7, r0
    483e:	220a      	movs	r2, #10
    4840:	6a29      	ldr	r1, [r5, #32]
    4842:	a822      	add	r0, sp, #136	; 0x88
    4844:	f003 fa64 	bl	7d10 <_ZN6StringC1Emh>
    4848:	a922      	add	r1, sp, #136	; 0x88
    484a:	0038      	movs	r0, r7
    484c:	f003 faaf 	bl	7dae <_ZplRK15StringSumHelperRK6String>
    4850:	0007      	movs	r7, r0
    4852:	220a      	movs	r2, #10
    4854:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    4856:	a825      	add	r0, sp, #148	; 0x94
    4858:	f003 fa5a 	bl	7d10 <_ZN6StringC1Emh>
    485c:	a925      	add	r1, sp, #148	; 0x94
    485e:	0038      	movs	r0, r7
    4860:	f003 faa5 	bl	7dae <_ZplRK15StringSumHelperRK6String>
    4864:	0007      	movs	r7, r0
    4866:	220a      	movs	r2, #10
    4868:	6b29      	ldr	r1, [r5, #48]	; 0x30
    486a:	0020      	movs	r0, r4
    486c:	f003 fa50 	bl	7d10 <_ZN6StringC1Emh>
    4870:	0021      	movs	r1, r4
    4872:	0038      	movs	r0, r7
    4874:	f003 fa9b 	bl	7dae <_ZplRK15StringSumHelperRK6String>
    4878:	4f9c      	ldr	r7, [pc, #624]	; (4aec <setup+0x428>)
    487a:	0039      	movs	r1, r7
    487c:	f003 faa4 	bl	7dc8 <_ZplRK15StringSumHelperPKc>
    4880:	0001      	movs	r1, r0
    4882:	0030      	movs	r0, r6
    4884:	f001 fc5a 	bl	613c <_ZN5Print7printlnERK6String>
    4888:	0020      	movs	r0, r4
    488a:	f003 f9a4 	bl	7bd6 <_ZN6StringD1Ev>
    488e:	a825      	add	r0, sp, #148	; 0x94
    4890:	f003 f9a1 	bl	7bd6 <_ZN6StringD1Ev>
    4894:	a822      	add	r0, sp, #136	; 0x88
    4896:	f003 f99e 	bl	7bd6 <_ZN6StringD1Ev>
    489a:	a81c      	add	r0, sp, #112	; 0x70
    489c:	f003 f99b 	bl	7bd6 <_ZN6StringD1Ev>
class StringSumHelper : public String
    48a0:	a81f      	add	r0, sp, #124	; 0x7c
    48a2:	f003 f998 	bl	7bd6 <_ZN6StringD1Ev>
	data[0] = (byte)((SystemInformation.SerialNumber1 >> 24) & 0xFF);
    48a6:	69ab      	ldr	r3, [r5, #24]
	StringSumHelper(const char *p) : String(p) {}
    48a8:	4991      	ldr	r1, [pc, #580]	; (4af0 <setup+0x42c>)
    48aa:	0e1a      	lsrs	r2, r3, #24
    48ac:	7022      	strb	r2, [r4, #0]
	data[1] = (byte)((SystemInformation.SerialNumber1 >> 16) & 0xFF);
    48ae:	0c1a      	lsrs	r2, r3, #16
    48b0:	7062      	strb	r2, [r4, #1]
	data[3] = (byte)(SystemInformation.SerialNumber1 & 0xFF);
    48b2:	70e3      	strb	r3, [r4, #3]
	data[2] = (byte)((SystemInformation.SerialNumber1 >> 8) & 0xFF);
    48b4:	0a1a      	lsrs	r2, r3, #8
	data[4] = (byte)((SystemInformation.SerialNumber2 >> 24) & 0xFF);
    48b6:	6a2b      	ldr	r3, [r5, #32]
	data[2] = (byte)((SystemInformation.SerialNumber1 >> 8) & 0xFF);
    48b8:	70a2      	strb	r2, [r4, #2]
	data[4] = (byte)((SystemInformation.SerialNumber2 >> 24) & 0xFF);
    48ba:	0e1a      	lsrs	r2, r3, #24
    48bc:	7122      	strb	r2, [r4, #4]
	data[5] = (byte)((SystemInformation.SerialNumber2 >> 16) & 0xFF);
    48be:	0c1a      	lsrs	r2, r3, #16
    48c0:	7162      	strb	r2, [r4, #5]
	data[7] = (byte)(SystemInformation.SerialNumber2 & 0xFF);
    48c2:	71e3      	strb	r3, [r4, #7]
	data[6] = (byte)((SystemInformation.SerialNumber2 >> 8) & 0xFF);
    48c4:	0a1a      	lsrs	r2, r3, #8
	data[8] = (byte)((SystemInformation.SerialNumber3 >> 24) & 0xFF);
    48c6:	6aab      	ldr	r3, [r5, #40]	; 0x28
	data[6] = (byte)((SystemInformation.SerialNumber2 >> 8) & 0xFF);
    48c8:	71a2      	strb	r2, [r4, #6]
	data[8] = (byte)((SystemInformation.SerialNumber3 >> 24) & 0xFF);
    48ca:	0e1a      	lsrs	r2, r3, #24
    48cc:	7222      	strb	r2, [r4, #8]
	data[9] = (byte)((SystemInformation.SerialNumber3 >> 16) & 0xFF);
    48ce:	0c1a      	lsrs	r2, r3, #16
    48d0:	7262      	strb	r2, [r4, #9]
	data[11] = (byte)(SystemInformation.SerialNumber3 & 0xFF);
    48d2:	72e3      	strb	r3, [r4, #11]
	data[10] = (byte)((SystemInformation.SerialNumber3 >> 8) & 0xFF);
    48d4:	0a1a      	lsrs	r2, r3, #8
	data[12] = (byte)((SystemInformation.SerialNumber4 >> 24) & 0xFF);
    48d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	data[10] = (byte)((SystemInformation.SerialNumber3 >> 8) & 0xFF);
    48d8:	72a2      	strb	r2, [r4, #10]
	data[12] = (byte)((SystemInformation.SerialNumber4 >> 24) & 0xFF);
    48da:	0e1a      	lsrs	r2, r3, #24
    48dc:	7322      	strb	r2, [r4, #12]
	data[13] = (byte)((SystemInformation.SerialNumber4 >> 16) & 0xFF);
    48de:	0c1a      	lsrs	r2, r3, #16
    48e0:	7362      	strb	r2, [r4, #13]
    48e2:	a825      	add	r0, sp, #148	; 0x94
	data[14] = (byte)((SystemInformation.SerialNumber4 >> 8) & 0xFF);
    48e4:	0a1a      	lsrs	r2, r3, #8
	data[15] = (byte)(SystemInformation.SerialNumber4 & 0xFF);
    48e6:	73e3      	strb	r3, [r4, #15]
	data[14] = (byte)((SystemInformation.SerialNumber4 >> 8) & 0xFF);
    48e8:	73a2      	strb	r2, [r4, #14]
    48ea:	f003 f9bc 	bl	7c66 <_ZN6StringC1EPKc>
	Serial.println("Chip unique serial number in Base64 encode:\"" + base64_encode(data,SERIALNUMBER_SIZE) +"\"");
    48ee:	2210      	movs	r2, #16
    48f0:	0021      	movs	r1, r4
    48f2:	a822      	add	r0, sp, #136	; 0x88
    48f4:	f7ff fe16 	bl	4524 <_Z13base64_encodePhi>
    48f8:	a922      	add	r1, sp, #136	; 0x88
    48fa:	a825      	add	r0, sp, #148	; 0x94
    48fc:	f003 fa57 	bl	7dae <_ZplRK15StringSumHelperRK6String>
    4900:	0039      	movs	r1, r7
    4902:	f003 fa61 	bl	7dc8 <_ZplRK15StringSumHelperPKc>
    4906:	0001      	movs	r1, r0
    4908:	0030      	movs	r0, r6
    490a:	f001 fc17 	bl	613c <_ZN5Print7printlnERK6String>
    490e:	a822      	add	r0, sp, #136	; 0x88
    4910:	f003 f961 	bl	7bd6 <_ZN6StringD1Ev>
class StringSumHelper : public String
    4914:	a825      	add	r0, sp, #148	; 0x94
    4916:	f003 f95e 	bl	7bd6 <_ZN6StringD1Ev>
	PORT->Group[g_APinDescription[0].ulPort].PINCFG[g_APinDescription[0].ulPin].bit.INEN = 0;
    491a:	2100      	movs	r1, #0
    491c:	4b75      	ldr	r3, [pc, #468]	; (4af4 <setup+0x430>)
    491e:	5659      	ldrsb	r1, [r3, r1]
    4920:	685a      	ldr	r2, [r3, #4]
    4922:	01c9      	lsls	r1, r1, #7
    4924:	1851      	adds	r1, r2, r1
    4926:	4a74      	ldr	r2, [pc, #464]	; (4af8 <setup+0x434>)
    4928:	1889      	adds	r1, r1, r2
    492a:	2202      	movs	r2, #2
    492c:	7808      	ldrb	r0, [r1, #0]
    492e:	4390      	bics	r0, r2
    4930:	7008      	strb	r0, [r1, #0]
	PORT->Group[g_APinDescription[1].ulPort].PINCFG[g_APinDescription[1].ulPin].bit.INEN = 0;
    4932:	2118      	movs	r1, #24
    4934:	5659      	ldrsb	r1, [r3, r1]
    4936:	69d8      	ldr	r0, [r3, #28]
    4938:	01c9      	lsls	r1, r1, #7
    493a:	1841      	adds	r1, r0, r1
    493c:	486e      	ldr	r0, [pc, #440]	; (4af8 <setup+0x434>)
    493e:	1809      	adds	r1, r1, r0
    4940:	7808      	ldrb	r0, [r1, #0]
    4942:	4390      	bics	r0, r2
    4944:	7008      	strb	r0, [r1, #0]
	PORT->Group[g_APinDescription[5].ulPort].PINCFG[g_APinDescription[5].ulPin].bit.INEN = 0;
    4946:	0019      	movs	r1, r3
    4948:	3178      	adds	r1, #120	; 0x78
    494a:	7809      	ldrb	r1, [r1, #0]
    494c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    494e:	b249      	sxtb	r1, r1
    4950:	01c9      	lsls	r1, r1, #7
    4952:	1841      	adds	r1, r0, r1
    4954:	4868      	ldr	r0, [pc, #416]	; (4af8 <setup+0x434>)
    4956:	1809      	adds	r1, r1, r0
    4958:	7808      	ldrb	r0, [r1, #0]
    495a:	4390      	bics	r0, r2
    495c:	7008      	strb	r0, [r1, #0]
	PORT->Group[g_APinDescription[17].ulPort].PINCFG[g_APinDescription[17].ulPin].bit.INEN = 0;
    495e:	21cc      	movs	r1, #204	; 0xcc
    4960:	0049      	lsls	r1, r1, #1
    4962:	5658      	ldrsb	r0, [r3, r1]
    4964:	3104      	adds	r1, #4
    4966:	5859      	ldr	r1, [r3, r1]
    4968:	01c0      	lsls	r0, r0, #7
    496a:	1809      	adds	r1, r1, r0
    496c:	4862      	ldr	r0, [pc, #392]	; (4af8 <setup+0x434>)
    496e:	1809      	adds	r1, r1, r0
    4970:	7808      	ldrb	r0, [r1, #0]
    4972:	4390      	bics	r0, r2
    4974:	7008      	strb	r0, [r1, #0]
	PORT->Group[g_APinDescription[18].ulPort].PINCFG[g_APinDescription[18].ulPin].bit.INEN = 0;
    4976:	21d8      	movs	r1, #216	; 0xd8
    4978:	0049      	lsls	r1, r1, #1
    497a:	5658      	ldrsb	r0, [r3, r1]
    497c:	3104      	adds	r1, #4
    497e:	5859      	ldr	r1, [r3, r1]
    4980:	01c0      	lsls	r0, r0, #7
    4982:	1809      	adds	r1, r1, r0
    4984:	485c      	ldr	r0, [pc, #368]	; (4af8 <setup+0x434>)
    4986:	1809      	adds	r1, r1, r0
    4988:	7808      	ldrb	r0, [r1, #0]
    498a:	4390      	bics	r0, r2
    498c:	7008      	strb	r0, [r1, #0]
	PORT->Group[g_APinDescription[20].ulPort].PINCFG[g_APinDescription[20].ulPin].bit.INEN = 0;	
    498e:	21f0      	movs	r1, #240	; 0xf0
    4990:	0049      	lsls	r1, r1, #1
    4992:	5658      	ldrsb	r0, [r3, r1]
    4994:	3104      	adds	r1, #4
    4996:	5859      	ldr	r1, [r3, r1]
    4998:	01c0      	lsls	r0, r0, #7
    499a:	1809      	adds	r1, r1, r0
    499c:	4856      	ldr	r0, [pc, #344]	; (4af8 <setup+0x434>)
    499e:	1809      	adds	r1, r1, r0
    49a0:	7808      	ldrb	r0, [r1, #0]
    49a2:	4390      	bics	r0, r2
    49a4:	7008      	strb	r0, [r1, #0]
	PORT->Group[g_APinDescription[21].ulPort].PINCFG[g_APinDescription[21].ulPin].bit.INEN = 0;	
    49a6:	21fc      	movs	r1, #252	; 0xfc
    49a8:	0049      	lsls	r1, r1, #1
    49aa:	5658      	ldrsb	r0, [r3, r1]
    49ac:	3104      	adds	r1, #4
    49ae:	5859      	ldr	r1, [r3, r1]
    49b0:	01c0      	lsls	r0, r0, #7
    49b2:	1809      	adds	r1, r1, r0
    49b4:	4850      	ldr	r0, [pc, #320]	; (4af8 <setup+0x434>)
    49b6:	1809      	adds	r1, r1, r0
    49b8:	7808      	ldrb	r0, [r1, #0]
    49ba:	4390      	bics	r0, r2
    49bc:	7008      	strb	r0, [r1, #0]
	PORT->Group[g_APinDescription[32].ulPort].PINCFG[g_APinDescription[32].ulPin].bit.INEN = 0;	
    49be:	21c0      	movs	r1, #192	; 0xc0
    49c0:	20c1      	movs	r0, #193	; 0xc1
    49c2:	0089      	lsls	r1, r1, #2
    49c4:	5659      	ldrsb	r1, [r3, r1]
    49c6:	0080      	lsls	r0, r0, #2
    49c8:	581b      	ldr	r3, [r3, r0]
    49ca:	01c9      	lsls	r1, r1, #7
    49cc:	185b      	adds	r3, r3, r1
    49ce:	494a      	ldr	r1, [pc, #296]	; (4af8 <setup+0x434>)
    49d0:	185b      	adds	r3, r3, r1
    49d2:	7819      	ldrb	r1, [r3, #0]
    49d4:	4391      	bics	r1, r2
    49d6:	7019      	strb	r1, [r3, #0]
	PowerONGPS();// Turn on GPS. price 31uA
    49d8:	f7ff fbe6 	bl	41a8 <_Z10PowerONGPSv>
	GPS = new GPSL80Lite();
    49dc:	2058      	movs	r0, #88	; 0x58
    49de:	f001 fb6f 	bl	60c0 <_Znwj>
    49e2:	0004      	movs	r4, r0
    49e4:	f7fe fe4e 	bl	3684 <_ZN10GPSL80LiteC1Ev>
    49e8:	4f44      	ldr	r7, [pc, #272]	; (4afc <setup+0x438>)
	GPSData = new GpsDataLite();
    49ea:	2040      	movs	r0, #64	; 0x40
	GPS = new GPSL80Lite();
    49ec:	603c      	str	r4, [r7, #0]
	GPSData = new GpsDataLite();
    49ee:	f001 fb67 	bl	60c0 <_Znwj>
    49f2:	2240      	movs	r2, #64	; 0x40
    49f4:	2100      	movs	r1, #0
    49f6:	0004      	movs	r4, r0
    49f8:	f006 fd93 	bl	b522 <memset>
	GPS->init(SerialGPS, GPSData, 57600, GPSRxPin, GPSTxPin);
    49fc:	230b      	movs	r3, #11
	GPSData = new GpsDataLite();
    49fe:	4e40      	ldr	r6, [pc, #256]	; (4b00 <setup+0x43c>)
	GPS->init(SerialGPS, GPSData, 57600, GPSRxPin, GPSTxPin);
    4a00:	4940      	ldr	r1, [pc, #256]	; (4b04 <setup+0x440>)
	GPSData = new GpsDataLite();
    4a02:	6034      	str	r4, [r6, #0]
	GPS->init(SerialGPS, GPSData, 57600, GPSRxPin, GPSTxPin);
    4a04:	9301      	str	r3, [sp, #4]
    4a06:	3301      	adds	r3, #1
    4a08:	9300      	str	r3, [sp, #0]
    4a0a:	23e1      	movs	r3, #225	; 0xe1
    4a0c:	0022      	movs	r2, r4
    4a0e:	021b      	lsls	r3, r3, #8
    4a10:	6809      	ldr	r1, [r1, #0]
    4a12:	6838      	ldr	r0, [r7, #0]
    4a14:	f7fe ff86 	bl	3924 <_ZN10GPSL80Lite4initEP4UartP11GpsDataLitemii>
	Radio = new E28_2G4M20S(chipSelectPin,resetPin,busyPin,dio1Pin,0,0,txEnPin,rxEnPin, led2Pin);
    4a18:	20a0      	movs	r0, #160	; 0xa0
    4a1a:	f001 fb51 	bl	60c0 <_Znwj>
    4a1e:	2315      	movs	r3, #21
    4a20:	2400      	movs	r4, #0
    4a22:	0007      	movs	r7, r0
    4a24:	9305      	str	r3, [sp, #20]
    4a26:	3b04      	subs	r3, #4
    4a28:	9304      	str	r3, [sp, #16]
    4a2a:	330f      	adds	r3, #15
    4a2c:	9303      	str	r3, [sp, #12]
    4a2e:	3b07      	subs	r3, #7
    4a30:	9300      	str	r3, [sp, #0]
    4a32:	2204      	movs	r2, #4
    4a34:	2101      	movs	r1, #1
    4a36:	9402      	str	r4, [sp, #8]
    4a38:	9401      	str	r4, [sp, #4]
    4a3a:	3b14      	subs	r3, #20
    4a3c:	f7fd fb6a 	bl	2114 <_ZN11E28_2G4M20SC1Eiiiiiiiii>
    4a40:	4b31      	ldr	r3, [pc, #196]	; (4b08 <setup+0x444>)
	RadioService = new RFService(Radio, GPSData, &SystemInformation);
    4a42:	4832      	ldr	r0, [pc, #200]	; (4b0c <setup+0x448>)
	Radio = new E28_2G4M20S(chipSelectPin,resetPin,busyPin,dio1Pin,0,0,txEnPin,rxEnPin, led2Pin);
    4a44:	601f      	str	r7, [r3, #0]
	RadioService = new RFService(Radio, GPSData, &SystemInformation);
    4a46:	f001 fb3b 	bl	60c0 <_Znwj>
    4a4a:	492f      	ldr	r1, [pc, #188]	; (4b08 <setup+0x444>)
    4a4c:	6832      	ldr	r2, [r6, #0]
    4a4e:	002b      	movs	r3, r5
    4a50:	6809      	ldr	r1, [r1, #0]
    4a52:	901b      	str	r0, [sp, #108]	; 0x6c
    4a54:	f000 fa0c 	bl	4e70 <_ZN9RFServiceC1EP11E28_2G4M20SP11GpsDataLiteP19SystemInformation_t>
    4a58:	4f2d      	ldr	r7, [pc, #180]	; (4b10 <setup+0x44c>)
    4a5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
	SerialProtocol = new PCProtocol(RadioService, Radio);
    4a5c:	20d0      	movs	r0, #208	; 0xd0
	RadioService = new RFService(Radio, GPSData, &SystemInformation);
    4a5e:	603b      	str	r3, [r7, #0]
	SerialProtocol = new PCProtocol(RadioService, Radio);
    4a60:	f001 fb2e 	bl	60c0 <_Znwj>
    4a64:	4b28      	ldr	r3, [pc, #160]	; (4b08 <setup+0x444>)
    4a66:	6839      	ldr	r1, [r7, #0]
    4a68:	681a      	ldr	r2, [r3, #0]
    4a6a:	0006      	movs	r6, r0
    4a6c:	f001 f8d9 	bl	5c22 <_ZN10PCProtocolC1EP10RFProtocolP11E28_2G4M20S>
	SerialfrskySPort = new Uart(&sercom3, fryskySmartPortRXPin, fryskySmartPortTXPin, SERCOM_RX_PAD_3, UART_TX_PAD_2);   // Create the new UART instance for the Frsky SPORT module
    4a70:	208f      	movs	r0, #143	; 0x8f
	SerialProtocol = new PCProtocol(RadioService, Radio);
    4a72:	4b28      	ldr	r3, [pc, #160]	; (4b14 <setup+0x450>)
	SerialfrskySPort = new Uart(&sercom3, fryskySmartPortRXPin, fryskySmartPortTXPin, SERCOM_RX_PAD_3, UART_TX_PAD_2);   // Create the new UART instance for the Frsky SPORT module
    4a74:	0080      	lsls	r0, r0, #2
	SerialProtocol = new PCProtocol(RadioService, Radio);
    4a76:	601e      	str	r6, [r3, #0]
	SerialfrskySPort = new Uart(&sercom3, fryskySmartPortRXPin, fryskySmartPortTXPin, SERCOM_RX_PAD_3, UART_TX_PAD_2);   // Create the new UART instance for the Frsky SPORT module
    4a78:	f001 fb22 	bl	60c0 <_Znwj>
    4a7c:	2301      	movs	r3, #1
    4a7e:	9301      	str	r3, [sp, #4]
    4a80:	3302      	adds	r3, #2
    4a82:	2207      	movs	r2, #7
    4a84:	9300      	str	r3, [sp, #0]
    4a86:	4924      	ldr	r1, [pc, #144]	; (4b18 <setup+0x454>)
    4a88:	3303      	adds	r3, #3
    4a8a:	0006      	movs	r6, r0
    4a8c:	f001 fd44 	bl	6518 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
	SerialfrskySPort->begin(57600);  //Baudrate for frskys SPORT protocol.
    4a90:	21e1      	movs	r1, #225	; 0xe1
	SerialfrskySPort = new Uart(&sercom3, fryskySmartPortRXPin, fryskySmartPortTXPin, SERCOM_RX_PAD_3, UART_TX_PAD_2);   // Create the new UART instance for the Frsky SPORT module
    4a92:	4f22      	ldr	r7, [pc, #136]	; (4b1c <setup+0x458>)
	SerialfrskySPort->begin(57600);  //Baudrate for frskys SPORT protocol.
    4a94:	0030      	movs	r0, r6
    4a96:	0209      	lsls	r1, r1, #8
	SerialfrskySPort = new Uart(&sercom3, fryskySmartPortRXPin, fryskySmartPortTXPin, SERCOM_RX_PAD_3, UART_TX_PAD_2);   // Create the new UART instance for the Frsky SPORT module
    4a98:	603e      	str	r6, [r7, #0]
	SerialfrskySPort->begin(57600);  //Baudrate for frskys SPORT protocol.
    4a9a:	f001 fc5f 	bl	635c <_ZN4Uart5beginEm>
	pinPeripheral(fryskySmartPortRXPin, PIO_SERCOM_ALT); //Assign RX function to pin.
    4a9e:	2103      	movs	r1, #3
    4aa0:	2007      	movs	r0, #7
    4aa2:	f003 f82f 	bl	7b04 <pinPeripheral>
	pinPeripheral(fryskySmartPortTXPin, PIO_SERCOM_ALT); //Assign TX function to pin.
    4aa6:	2103      	movs	r1, #3
    4aa8:	2006      	movs	r0, #6
    4aaa:	f003 f82b 	bl	7b04 <pinPeripheral>
	FrskySport.begin(SerialfrskySPort, &FrskyGPS);
    4aae:	9419      	str	r4, [sp, #100]	; 0x64
    4ab0:	9418      	str	r4, [sp, #96]	; 0x60
    4ab2:	9417      	str	r4, [sp, #92]	; 0x5c
    4ab4:	9416      	str	r4, [sp, #88]	; 0x58
    4ab6:	9415      	str	r4, [sp, #84]	; 0x54
    4ab8:	e032      	b.n	4b20 <setup+0x45c>
    4aba:	46c0      	nop			; (mov r8, r8)
    4abc:	00001388 	.word	0x00001388
    4ac0:	2000029c 	.word	0x2000029c
    4ac4:	200003f4 	.word	0x200003f4
    4ac8:	0000d9bd 	.word	0x0000d9bd
    4acc:	200003a0 	.word	0x200003a0
    4ad0:	0000d9db 	.word	0x0000d9db
    4ad4:	42c80000 	.word	0x42c80000
    4ad8:	0000d9dd 	.word	0x0000d9dd
    4adc:	0000d9ff 	.word	0x0000d9ff
    4ae0:	0000da21 	.word	0x0000da21
    4ae4:	0000da43 	.word	0x0000da43
    4ae8:	0000da65 	.word	0x0000da65
    4aec:	0000da80 	.word	0x0000da80
    4af0:	0000da82 	.word	0x0000da82
    4af4:	0000dc20 	.word	0x0000dc20
    4af8:	41004440 	.word	0x41004440
    4afc:	2000038c 	.word	0x2000038c
    4b00:	20000390 	.word	0x20000390
    4b04:	200002a0 	.word	0x200002a0
    4b08:	20000394 	.word	0x20000394
    4b0c:	00001058 	.word	0x00001058
    4b10:	20000398 	.word	0x20000398
    4b14:	2000039c 	.word	0x2000039c
    4b18:	20000a04 	.word	0x20000a04
    4b1c:	200002a8 	.word	0x200002a8
    4b20:	9414      	str	r4, [sp, #80]	; 0x50
    4b22:	9413      	str	r4, [sp, #76]	; 0x4c
    4b24:	9412      	str	r4, [sp, #72]	; 0x48
    4b26:	9411      	str	r4, [sp, #68]	; 0x44
    4b28:	9410      	str	r4, [sp, #64]	; 0x40
    4b2a:	940f      	str	r4, [sp, #60]	; 0x3c
    4b2c:	940e      	str	r4, [sp, #56]	; 0x38
    4b2e:	940d      	str	r4, [sp, #52]	; 0x34
    4b30:	940c      	str	r4, [sp, #48]	; 0x30
    4b32:	940b      	str	r4, [sp, #44]	; 0x2c
    4b34:	940a      	str	r4, [sp, #40]	; 0x28
    4b36:	9409      	str	r4, [sp, #36]	; 0x24
    4b38:	9408      	str	r4, [sp, #32]
    4b3a:	9407      	str	r4, [sp, #28]
    4b3c:	9406      	str	r4, [sp, #24]
    4b3e:	9405      	str	r4, [sp, #20]
    4b40:	9404      	str	r4, [sp, #16]
    4b42:	9403      	str	r4, [sp, #12]
    4b44:	9402      	str	r4, [sp, #8]
    4b46:	9401      	str	r4, [sp, #4]
    4b48:	9400      	str	r4, [sp, #0]
    4b4a:	0023      	movs	r3, r4
    4b4c:	4a0c      	ldr	r2, [pc, #48]	; (4b80 <setup+0x4bc>)
    4b4e:	6839      	ldr	r1, [r7, #0]
    4b50:	480c      	ldr	r0, [pc, #48]	; (4b84 <setup+0x4c0>)
    4b52:	f7fe fd1a 	bl	358a <_ZN19FrSkySportTelemetry5beginEP4UartP16FrSkySportSensorS3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_>
	startTimer3(1); // 1Hz
    4b56:	2001      	movs	r0, #1
    4b58:	f001 f9a0 	bl	5e9c <_Z11startTimer3i>
	SystemInformation.state=STARTING_UP;
    4b5c:	71ec      	strb	r4, [r5, #7]
	PowerON(); // Ensure transponder keeps running from battery if external power is lost.
    4b5e:	f7ff fb17 	bl	4190 <_Z7PowerONv>
	PowerONGPSBackup(); // Enable backup power for GPS.
    4b62:	f7ff fb2d 	bl	41c0 <_Z16PowerONGPSBackupv>
	SystemInformation.BatteryVoltage = getBatteryVoltage();
    4b66:	f7ff fad9 	bl	411c <_Z17getBatteryVoltagev>
    4b6a:	60a8      	str	r0, [r5, #8]
	SystemInformation.InputVoltage = getInputVoltage();
    4b6c:	f7ff faf0 	bl	4150 <_Z15getInputVoltagev>
    4b70:	60e8      	str	r0, [r5, #12]
	SystemInformation.USBVoltage = getInput5VVoltage();
    4b72:	f7ff fafd 	bl	4170 <_Z17getInput5VVoltagev>
    4b76:	6128      	str	r0, [r5, #16]
	LEDSaftySwitchOFF();
    4b78:	f7ff fb2e 	bl	41d8 <_Z17LEDSaftySwitchOFFv>
}
    4b7c:	b02d      	add	sp, #180	; 0xb4
    4b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b80:	200002ac 	.word	0x200002ac
    4b84:	20000308 	.word	0x20000308

00004b88 <_ZN10RFProtocolC1EP11E28_2G4M20S>:
	Not for commercial use
 */ 
 #include "RFProtocol.h"


 RFProtocol::RFProtocol(E28_2G4M20S *Radio){
    4b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b8a:	4b0e      	ldr	r3, [pc, #56]	; (4bc4 <_ZN10RFProtocolC1EP11E28_2G4M20S+0x3c>)
}

template <typename ET, size_t S, typename IT, typename BT>
RingBuf<ET, S, IT, BT>::RingBuf() :
mReadIndex(0),
mSize(0)
    4b8c:	2500      	movs	r5, #0
    4b8e:	6003      	str	r3, [r0, #0]
    4b90:	0003      	movs	r3, r0
    4b92:	0002      	movs	r2, r0
    4b94:	0007      	movs	r7, r0
    4b96:	0004      	movs	r4, r0
    4b98:	000e      	movs	r6, r1
    4b9a:	3380      	adds	r3, #128	; 0x80
    4b9c:	701d      	strb	r5, [r3, #0]
    4b9e:	705d      	strb	r5, [r3, #1]
    4ba0:	32fd      	adds	r2, #253	; 0xfd
    4ba2:	337c      	adds	r3, #124	; 0x7c
    4ba4:	37ff      	adds	r7, #255	; 0xff
    4ba6:	701d      	strb	r5, [r3, #0]
	this->Radio = Radio;

	Radio->Init();
    4ba8:	0008      	movs	r0, r1
    4baa:	7015      	strb	r5, [r2, #0]
 RFProtocol::RFProtocol(E28_2G4M20S *Radio){
    4bac:	707d      	strb	r5, [r7, #1]
    4bae:	609d      	str	r5, [r3, #8]
	this->Radio = Radio;
    4bb0:	6061      	str	r1, [r4, #4]
	Radio->Init();
    4bb2:	f7fd fb0d 	bl	21d0 <_ZN11E28_2G4M20S4InitEv>
	Radio->SetRXMode(false); // no timeout
    4bb6:	0030      	movs	r0, r6
    4bb8:	0029      	movs	r1, r5
    4bba:	f7fd fb51 	bl	2260 <_ZN11E28_2G4M20S9SetRXModeEb>
	this->RFstate = RX_IDLE;
    4bbe:	707d      	strb	r5, [r7, #1]
 }
    4bc0:	0020      	movs	r0, r4
    4bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4bc4:	0000dab8 	.word	0x0000dab8

00004bc8 <_ZN10RFProtocol9AvailableEv>:
	}
}

 int RFProtocol::Available()
 {
	 return this->rxFIFO.size();
    4bc8:	3081      	adds	r0, #129	; 0x81
    4bca:	7800      	ldrb	r0, [r0, #0]
 }
    4bcc:	4770      	bx	lr

00004bce <_ZN10RFProtocol17ConvertToTelegramEP11RadioData_t>:


Telegram * RFProtocol::ConvertToTelegram(RadioData_t *newdata) // must delete newdata to avoid memory leaks.
{ 
    4bce:	b570      	push	{r4, r5, r6, lr}
//	 SerialAUX->print("New message is...");
	 if(newdata == NULL){
//		SerialAUX->println("NULL!");
		return NULL;
    4bd0:	0008      	movs	r0, r1
{ 
    4bd2:	1e0d      	subs	r5, r1, #0
	 if(newdata == NULL){
    4bd4:	d00f      	beq.n	4bf6 <_ZN10RFProtocol17ConvertToTelegramEP11RadioData_t+0x28>
	 
	 ProtocolMSG_t newMessageID = (ProtocolMSG_t)newdata->payload[0];
	 
	 Telegram *msg =NULL;

	 switch(newMessageID)
    4bd6:	780b      	ldrb	r3, [r1, #0]
    4bd8:	2b02      	cmp	r3, #2
    4bda:	d00d      	beq.n	4bf8 <_ZN10RFProtocol17ConvertToTelegramEP11RadioData_t+0x2a>
    4bdc:	2b03      	cmp	r3, #3
    4bde:	d013      	beq.n	4c08 <_ZN10RFProtocol17ConvertToTelegramEP11RadioData_t+0x3a>
		 }
		 break;
		 
		 default:
//			SerialAUX->println("Unknown/Null!");
			return NULL;
    4be0:	2000      	movs	r0, #0
	 switch(newMessageID)
    4be2:	2b01      	cmp	r3, #1
    4be4:	d107      	bne.n	4bf6 <_ZN10RFProtocol17ConvertToTelegramEP11RadioData_t+0x28>
			 msg = new Telegram_MSG_1(newdata);
    4be6:	2080      	movs	r0, #128	; 0x80
    4be8:	f001 fa6a 	bl	60c0 <_Znwj>
    4bec:	0029      	movs	r1, r5
    4bee:	0004      	movs	r4, r0
    4bf0:	f000 fda0 	bl	5734 <_ZN14Telegram_MSG_1C1EP11RadioData_t>
			 msg = new Telegram_MSG_2(newdata);
    4bf4:	0020      	movs	r0, r4
		 break;
	 }
	return msg;	
 }
    4bf6:	bd70      	pop	{r4, r5, r6, pc}
			 msg = new Telegram_MSG_2(newdata);
    4bf8:	2080      	movs	r0, #128	; 0x80
    4bfa:	f001 fa61 	bl	60c0 <_Znwj>
    4bfe:	0029      	movs	r1, r5
    4c00:	0004      	movs	r4, r0
    4c02:	f000 fe59 	bl	58b8 <_ZN14Telegram_MSG_2C1EP11RadioData_t>
    4c06:	e7f5      	b.n	4bf4 <_ZN10RFProtocol17ConvertToTelegramEP11RadioData_t+0x26>
			 msg = new Telegram_MSG_3(newdata);
    4c08:	2058      	movs	r0, #88	; 0x58
    4c0a:	f001 fa59 	bl	60c0 <_Znwj>
    4c0e:	0029      	movs	r1, r5
    4c10:	0004      	movs	r4, r0
    4c12:	f000 ffed 	bl	5bf0 <_ZN14Telegram_MSG_3C1EP11RadioData_t>
    4c16:	e7ed      	b.n	4bf4 <_ZN10RFProtocol17ConvertToTelegramEP11RadioData_t+0x26>

00004c18 <_ZN10RFProtocol7_WakeUpEv>:
		}while(this->RFstate!=RX_IDLE);

	Radio->Sleep();
}		

void RFProtocol::_WakeUp(){
    4c18:	b510      	push	{r4, lr}
    4c1a:	0004      	movs	r4, r0
	Radio->WakeUp();
    4c1c:	6840      	ldr	r0, [r0, #4]
    4c1e:	f7fd fb61 	bl	22e4 <_ZN11E28_2G4M20S6WakeUpEv>
	Radio->SetRXMode(false); // Set Radio to RX mode with timeout. This will trigger rx.timeout, and thus the continues flow of the statemachine, should there be data left in TX fifo.
    4c22:	2100      	movs	r1, #0
    4c24:	6860      	ldr	r0, [r4, #4]
    4c26:	f7fd fb1b 	bl	2260 <_ZN11E28_2G4M20S9SetRXModeEb>
}
    4c2a:	bd10      	pop	{r4, pc}

00004c2c <_ZN10RFProtocol7ServiceEv>:

void RFProtocol::Service(){
    4c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c2e:	0004      	movs	r4, r0
    4c30:	b085      	sub	sp, #20

	if(Radio->GetDioPinStatus() == HIGH){
    4c32:	6840      	ldr	r0, [r0, #4]
    4c34:	f7fd fc5a 	bl	24ec <_ZN11E28_2G4M20S15GetDioPinStatusEv>
    4c38:	2801      	cmp	r0, #1
    4c3a:	d102      	bne.n	4c42 <_ZN10RFProtocol7ServiceEv+0x16>
		this->Radio->IRQHandler();
    4c3c:	6860      	ldr	r0, [r4, #4]
    4c3e:	f7fd fbf2 	bl	2426 <_ZN11E28_2G4M20S10IRQHandlerEv>
	}

	RadioIRQStatus_t status = Radio->GetRadioStatus();
    4c42:	6860      	ldr	r0, [r4, #4]
    4c44:	f7fd fb5e 	bl	2304 <_ZN11E28_2G4M20S14GetRadioStatusEv>
    4c48:	0c03      	lsrs	r3, r0, #16
    4c4a:	b2db      	uxtb	r3, r3
    4c4c:	0a07      	lsrs	r7, r0, #8
    4c4e:	9003      	str	r0, [sp, #12]
    4c50:	b2c6      	uxtb	r6, r0
    4c52:	0e05      	lsrs	r5, r0, #24
	Radio->ClearRadioStatus();
    4c54:	6860      	ldr	r0, [r4, #4]
	RadioIRQStatus_t status = Radio->GetRadioStatus();
    4c56:	9300      	str	r3, [sp, #0]
	Radio->ClearRadioStatus();
    4c58:	f7fd fb65 	bl	2326 <_ZN11E28_2G4M20S16ClearRadioStatusEv>
	RFProtocolStates_t nextState = RX_IDLE;

//	SerialAUX->println("Service RF Statemachine state:" + String(RX_IDLE) + " and nextState:" + String(nextState));


	switch(this->RFstate)
    4c5c:	0023      	movs	r3, r4
    4c5e:	33ff      	adds	r3, #255	; 0xff
    4c60:	9301      	str	r3, [sp, #4]
    4c62:	7858      	ldrb	r0, [r3, #1]
	RadioIRQStatus_t status = Radio->GetRadioStatus();
    4c64:	b2ff      	uxtb	r7, r7
	switch(this->RFstate)
    4c66:	2803      	cmp	r0, #3
    4c68:	d80a      	bhi.n	4c80 <_ZN10RFProtocol7ServiceEv+0x54>
    4c6a:	f003 fc19 	bl	84a0 <__gnu_thumb1_case_uqi>
    4c6e:	2602      	.short	0x2602
    4c70:	503d      	.short	0x503d
		case RX_IDLE:
		{
			nextState=RX_IDLE;

			// fail fast:
			if((status.txDone == true) || (status.txTimeout == true) || (status.rxTimeout == true))
    4c72:	2e00      	cmp	r6, #0
    4c74:	d104      	bne.n	4c80 <_ZN10RFProtocol7ServiceEv+0x54>
    4c76:	9b00      	ldr	r3, [sp, #0]
    4c78:	2b00      	cmp	r3, #0
    4c7a:	d101      	bne.n	4c80 <_ZN10RFProtocol7ServiceEv+0x54>
    4c7c:	2d00      	cmp	r5, #0
    4c7e:	d005      	beq.n	4c8c <_ZN10RFProtocol7ServiceEv+0x60>
		break;
		
		default:
			nextState=RX_IDLE;
//			SerialAUX->println("Error! - Default!");
			Radio->SetRXMode(false); // Set RX without.
    4c80:	2100      	movs	r1, #0
    4c82:	6860      	ldr	r0, [r4, #4]
    4c84:	f7fd faec 	bl	2260 <_ZN11E28_2G4M20S9SetRXModeEb>
			nextState=RX_IDLE;
    4c88:	2700      	movs	r7, #0
		break;
    4c8a:	e008      	b.n	4c9e <_ZN10RFProtocol7ServiceEv+0x72>
    4c8c:	6823      	ldr	r3, [r4, #0]
				if(status.rxDone == true)
    4c8e:	2f00      	cmp	r7, #0
    4c90:	d001      	beq.n	4c96 <_ZN10RFProtocol7ServiceEv+0x6a>
					nextState=RXHandler(); // Returns TX_WITHOUT_REPLY || TX_WITH_REPLY || RX_IDLE
    4c92:	685b      	ldr	r3, [r3, #4]
    4c94:	e000      	b.n	4c98 <_ZN10RFProtocol7ServiceEv+0x6c>
					nextState=TXHandler(); // Returns TX_WITHOUT_REPLY || TX_WITH_REPLY || RX_IDLE
    4c96:	689b      	ldr	r3, [r3, #8]
					nextState=RXHandler(); // Returns TX_WITHOUT_REPLY || TX_WITH_REPLY || RX_IDLE
    4c98:	0020      	movs	r0, r4
    4c9a:	4798      	blx	r3
    4c9c:	0007      	movs	r7, r0
	}
	
	if(this->RFstate != nextState){
    4c9e:	9b01      	ldr	r3, [sp, #4]
    4ca0:	785b      	ldrb	r3, [r3, #1]
    4ca2:	42bb      	cmp	r3, r7
    4ca4:	d007      	beq.n	4cb6 <_ZN10RFProtocol7ServiceEv+0x8a>
		this->timeoutStart = milliSeconds(); // for software timeout.
    4ca6:	6823      	ldr	r3, [r4, #0]
    4ca8:	0020      	movs	r0, r4
    4caa:	681b      	ldr	r3, [r3, #0]
    4cac:	4798      	blx	r3
//		SerialAUX->println("New state! - RFSate:" +String(RFstate) + " NextState:" + String(nextState));
		this->RFstate=nextState;
    4cae:	9b01      	ldr	r3, [sp, #4]
		this->timeoutStart = milliSeconds(); // for software timeout.
    4cb0:	34fc      	adds	r4, #252	; 0xfc
    4cb2:	60a0      	str	r0, [r4, #8]
		this->RFstate=nextState;
    4cb4:	705f      	strb	r7, [r3, #1]

	}
}
    4cb6:	b005      	add	sp, #20
    4cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if((status.txDone == true) || (status.txTimeout == true))
    4cba:	2e00      	cmp	r6, #0
    4cbc:	d1e0      	bne.n	4c80 <_ZN10RFProtocol7ServiceEv+0x54>
    4cbe:	9b00      	ldr	r3, [sp, #0]
    4cc0:	2b00      	cmp	r3, #0
    4cc2:	d1dd      	bne.n	4c80 <_ZN10RFProtocol7ServiceEv+0x54>
				if(status.rxDone == true)
    4cc4:	2f00      	cmp	r7, #0
    4cc6:	d001      	beq.n	4ccc <_ZN10RFProtocol7ServiceEv+0xa0>
					nextState=RXHandler(); // Returns TX_WITHOUT_REPLY || TX_WITH_REPLY || RX_IDLE
    4cc8:	6823      	ldr	r3, [r4, #0]
    4cca:	e7e2      	b.n	4c92 <_ZN10RFProtocol7ServiceEv+0x66>
					if(status.rxTimeout == true){
    4ccc:	2d00      	cmp	r5, #0
    4cce:	d1d7      	bne.n	4c80 <_ZN10RFProtocol7ServiceEv+0x54>
						if(milliSeconds() > this->timeoutStart+TIMEOUT_MS){
    4cd0:	6823      	ldr	r3, [r4, #0]
    4cd2:	0020      	movs	r0, r4
    4cd4:	681b      	ldr	r3, [r3, #0]
    4cd6:	4798      	blx	r3
    4cd8:	0023      	movs	r3, r4
			nextState=WAITING_FOR_REPLY;
    4cda:	2701      	movs	r7, #1
						if(milliSeconds() > this->timeoutStart+TIMEOUT_MS){
    4cdc:	33fc      	adds	r3, #252	; 0xfc
    4cde:	689b      	ldr	r3, [r3, #8]
    4ce0:	3364      	adds	r3, #100	; 0x64
					if(milliSeconds() > this->timeoutStart+TIMEOUT_MS){
    4ce2:	4298      	cmp	r0, r3
    4ce4:	d9db      	bls.n	4c9e <_ZN10RFProtocol7ServiceEv+0x72>
    4ce6:	e7cb      	b.n	4c80 <_ZN10RFProtocol7ServiceEv+0x54>
			if((status.rxDone == true) || (status.rxTimeout == true) || (status.txTimeout == true)) 
    4ce8:	2f00      	cmp	r7, #0
    4cea:	d1c9      	bne.n	4c80 <_ZN10RFProtocol7ServiceEv+0x54>
    4cec:	2d00      	cmp	r5, #0
    4cee:	d1c7      	bne.n	4c80 <_ZN10RFProtocol7ServiceEv+0x54>
    4cf0:	9b00      	ldr	r3, [sp, #0]
    4cf2:	2b00      	cmp	r3, #0
    4cf4:	d1c4      	bne.n	4c80 <_ZN10RFProtocol7ServiceEv+0x54>
				if(status.txDone == true){
    4cf6:	2e00      	cmp	r6, #0
    4cf8:	d1c2      	bne.n	4c80 <_ZN10RFProtocol7ServiceEv+0x54>
					if(milliSeconds() > this->timeoutStart+TIMEOUT_MS){
    4cfa:	6823      	ldr	r3, [r4, #0]
    4cfc:	0020      	movs	r0, r4
    4cfe:	681b      	ldr	r3, [r3, #0]
    4d00:	4798      	blx	r3
    4d02:	0023      	movs	r3, r4
    4d04:	33fc      	adds	r3, #252	; 0xfc
    4d06:	689b      	ldr	r3, [r3, #8]
			nextState=TX_WITHOUT_REPLY;
    4d08:	3702      	adds	r7, #2
					if(milliSeconds() > this->timeoutStart+TIMEOUT_MS){
    4d0a:	3364      	adds	r3, #100	; 0x64
    4d0c:	e7e9      	b.n	4ce2 <_ZN10RFProtocol7ServiceEv+0xb6>
			if((status.rxDone == true) || (status.rxTimeout == true) || (status.txTimeout == true))
    4d0e:	2f00      	cmp	r7, #0
    4d10:	d1b6      	bne.n	4c80 <_ZN10RFProtocol7ServiceEv+0x54>
    4d12:	2d00      	cmp	r5, #0
    4d14:	d1b4      	bne.n	4c80 <_ZN10RFProtocol7ServiceEv+0x54>
    4d16:	9b00      	ldr	r3, [sp, #0]
    4d18:	2b00      	cmp	r3, #0
    4d1a:	d1b1      	bne.n	4c80 <_ZN10RFProtocol7ServiceEv+0x54>
				if(status.txDone == true){
    4d1c:	2e00      	cmp	r6, #0
    4d1e:	d005      	beq.n	4d2c <_ZN10RFProtocol7ServiceEv+0x100>
					Radio->SetRXMode(true); // Set RX with timeout.
    4d20:	2101      	movs	r1, #1
    4d22:	6860      	ldr	r0, [r4, #4]
    4d24:	f7fd fa9c 	bl	2260 <_ZN11E28_2G4M20S9SetRXModeEb>
					nextState=WAITING_FOR_REPLY;
    4d28:	3701      	adds	r7, #1
    4d2a:	e7b8      	b.n	4c9e <_ZN10RFProtocol7ServiceEv+0x72>
					if(milliSeconds() > this->timeoutStart+TIMEOUT_MS){
    4d2c:	6823      	ldr	r3, [r4, #0]
    4d2e:	0020      	movs	r0, r4
    4d30:	681b      	ldr	r3, [r3, #0]
    4d32:	4798      	blx	r3
    4d34:	0023      	movs	r3, r4
    4d36:	33fc      	adds	r3, #252	; 0xfc
    4d38:	689b      	ldr	r3, [r3, #8]
			nextState=TX_WITH_REPLY;
    4d3a:	2703      	movs	r7, #3
					if(milliSeconds() > this->timeoutStart+TIMEOUT_MS){
    4d3c:	3364      	adds	r3, #100	; 0x64
    4d3e:	e7d0      	b.n	4ce2 <_ZN10RFProtocol7ServiceEv+0xb6>

00004d40 <_ZN10RFProtocol10_PowerDownEv>:
void RFProtocol::_PowerDown(){
    4d40:	b510      	push	{r4, lr}
    4d42:	0004      	movs	r4, r0
		this->Service();
    4d44:	0020      	movs	r0, r4
    4d46:	f7ff ff71 	bl	4c2c <_ZN10RFProtocol7ServiceEv>
		}while(this->RFstate!=RX_IDLE);
    4d4a:	0023      	movs	r3, r4
    4d4c:	33ff      	adds	r3, #255	; 0xff
    4d4e:	785b      	ldrb	r3, [r3, #1]
    4d50:	2b00      	cmp	r3, #0
    4d52:	d1f7      	bne.n	4d44 <_ZN10RFProtocol10_PowerDownEv+0x4>
	Radio->Sleep();
    4d54:	6860      	ldr	r0, [r4, #4]
    4d56:	f7fd fab3 	bl	22c0 <_ZN11E28_2G4M20S5SleepEv>
}		
    4d5a:	bd10      	pop	{r4, pc}

00004d5c <_ZN7RingBufIP8TelegramLj30EhtE4pushES1_>:
{
}

template <typename ET, size_t S, typename IT, typename BT>
bool RingBuf<ET, S, IT, BT>::push(const ET inElement)
    4d5c:	b510      	push	{r4, lr}
    4d5e:	0004      	movs	r4, r0
    4d60:	3479      	adds	r4, #121	; 0x79
    4d62:	7822      	ldrb	r2, [r4, #0]
{
  if (isFull()) return false;
    4d64:	2300      	movs	r3, #0
    4d66:	2a1e      	cmp	r2, #30
    4d68:	d00d      	beq.n	4d86 <_ZN7RingBufIP8TelegramLj30EhtE4pushES1_+0x2a>
 BT wi = (BT)mReadIndex + (BT)mSize;
    4d6a:	0003      	movs	r3, r0
    4d6c:	3378      	adds	r3, #120	; 0x78
    4d6e:	781b      	ldrb	r3, [r3, #0]
    4d70:	189b      	adds	r3, r3, r2
 if (wi >= (BT)S) wi -= (BT)S;
    4d72:	2b1d      	cmp	r3, #29
    4d74:	d901      	bls.n	4d7a <_ZN7RingBufIP8TelegramLj30EhtE4pushES1_+0x1e>
    4d76:	3b1e      	subs	r3, #30
    4d78:	b29b      	uxth	r3, r3
  mBuffer[writeIndex()] = inElement;
    4d7a:	b2db      	uxtb	r3, r3
    4d7c:	009b      	lsls	r3, r3, #2
    4d7e:	5019      	str	r1, [r3, r0]
  mSize++;
  return true;
    4d80:	2301      	movs	r3, #1
  mSize++;
    4d82:	3201      	adds	r2, #1
    4d84:	7022      	strb	r2, [r4, #0]
}
    4d86:	0018      	movs	r0, r3
    4d88:	bd10      	pop	{r4, pc}

00004d8a <_ZN10RFProtocol7AddDataEP11RadioData_t>:
	if(this->txFIFO.isFull()){
    4d8a:	0003      	movs	r3, r0
 {
    4d8c:	b510      	push	{r4, lr}
	if(this->txFIFO.isFull()){
    4d8e:	33fd      	adds	r3, #253	; 0xfd
    4d90:	781b      	ldrb	r3, [r3, #0]
 {
    4d92:	0004      	movs	r4, r0
	if(this->txFIFO.isFull()){
    4d94:	2b1e      	cmp	r3, #30
    4d96:	d007      	beq.n	4da8 <_ZN10RFProtocol7AddDataEP11RadioData_t+0x1e>
	Telegram *msg = this->ConvertToTelegram(newdata);
    4d98:	f7ff ff19 	bl	4bce <_ZN10RFProtocol17ConvertToTelegramEP11RadioData_t>
    4d9c:	1e01      	subs	r1, r0, #0
	if(msg!=NULL)
    4d9e:	d003      	beq.n	4da8 <_ZN10RFProtocol7AddDataEP11RadioData_t+0x1e>
		this->txFIFO.push(msg);	//Add to TX FIFO
    4da0:	0020      	movs	r0, r4
    4da2:	3084      	adds	r0, #132	; 0x84
    4da4:	f7ff ffda 	bl	4d5c <_ZN7RingBufIP8TelegramLj30EhtE4pushES1_>
}
    4da8:	bd10      	pop	{r4, pc}

00004daa <_ZN7RingBufIP8TelegramLj30EhtE3popERS1_>:
  interrupts();
  return result;
}

template <typename ET, size_t S, typename IT, typename BT>
bool RingBuf<ET, S, IT, BT>::pop(ET &outElement)
    4daa:	b510      	push	{r4, lr}
{
  if (isEmpty()) return false;
    4dac:	0004      	movs	r4, r0
bool RingBuf<ET, S, IT, BT>::pop(ET &outElement)
    4dae:	0003      	movs	r3, r0
  if (isEmpty()) return false;
    4db0:	2000      	movs	r0, #0
    4db2:	3479      	adds	r4, #121	; 0x79
    4db4:	7822      	ldrb	r2, [r4, #0]
    4db6:	4282      	cmp	r2, r0
    4db8:	d011      	beq.n	4dde <_ZN7RingBufIP8TelegramLj30EhtE3popERS1_+0x34>
  outElement = mBuffer[mReadIndex];
    4dba:	001a      	movs	r2, r3
    4dbc:	3278      	adds	r2, #120	; 0x78
    4dbe:	7810      	ldrb	r0, [r2, #0]
    4dc0:	0080      	lsls	r0, r0, #2
    4dc2:	58c3      	ldr	r3, [r0, r3]
  mReadIndex++;
  mSize--;
  if (mReadIndex == S) mReadIndex = 0;
  return true;
    4dc4:	2001      	movs	r0, #1
  outElement = mBuffer[mReadIndex];
    4dc6:	600b      	str	r3, [r1, #0]
  mReadIndex++;
    4dc8:	7813      	ldrb	r3, [r2, #0]
    4dca:	3301      	adds	r3, #1
    4dcc:	b2db      	uxtb	r3, r3
    4dce:	7013      	strb	r3, [r2, #0]
  mSize--;
    4dd0:	7821      	ldrb	r1, [r4, #0]
    4dd2:	3901      	subs	r1, #1
    4dd4:	7021      	strb	r1, [r4, #0]
  if (mReadIndex == S) mReadIndex = 0;
    4dd6:	2b1e      	cmp	r3, #30
    4dd8:	d101      	bne.n	4dde <_ZN7RingBufIP8TelegramLj30EhtE3popERS1_+0x34>
    4dda:	2300      	movs	r3, #0
    4ddc:	7013      	strb	r3, [r2, #0]
}
    4dde:	bd10      	pop	{r4, pc}

00004de0 <_ZN10RFProtocol7GetDataEv>:
	if(this->rxFIFO.isEmpty())
    4de0:	0003      	movs	r3, r0
{
    4de2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4de4:	2600      	movs	r6, #0
	if(this->rxFIFO.isEmpty())
    4de6:	3381      	adds	r3, #129	; 0x81
    4de8:	781b      	ldrb	r3, [r3, #0]
{
    4dea:	0005      	movs	r5, r0
		return NULL;
    4dec:	0018      	movs	r0, r3
	if(this->rxFIFO.isEmpty())
    4dee:	42b3      	cmp	r3, r6
    4df0:	d039      	beq.n	4e66 <_ZN10RFProtocol7GetDataEv+0x86>
		memset(&rxbuffer.payload, 0 , MAX_PAYLOAD_LENGTH);
    4df2:	002c      	movs	r4, r5
		rxFIFO.pop(msg);
    4df4:	0028      	movs	r0, r5
		memset(&rxbuffer.payload, 0 , MAX_PAYLOAD_LENGTH);
    4df6:	3409      	adds	r4, #9
		rxFIFO.pop(msg);
    4df8:	a901      	add	r1, sp, #4
		memset(&rxbuffer.payload, 0 , MAX_PAYLOAD_LENGTH);
    4dfa:	34ff      	adds	r4, #255	; 0xff
		rxFIFO.pop(msg);
    4dfc:	3008      	adds	r0, #8
		Telegram * msg = NULL;
    4dfe:	9601      	str	r6, [sp, #4]
		rxFIFO.pop(msg);
    4e00:	f7ff ffd3 	bl	4daa <_ZN7RingBufIP8TelegramLj30EhtE3popERS1_>
		memset(&rxbuffer.payload, 0 , MAX_PAYLOAD_LENGTH);
    4e04:	0031      	movs	r1, r6
    4e06:	223c      	movs	r2, #60	; 0x3c
    4e08:	0020      	movs	r0, r4
    4e0a:	f006 fb8a 	bl	b522 <memset>
		memcpy(&rxbuffer.payload, msg->GetRadioData()->payload, msg->GetRadioData()->payloadLength);	// copy the data.
    4e0e:	9801      	ldr	r0, [sp, #4]
    4e10:	f000 fbad 	bl	556e <_ZN8Telegram12GetRadioDataEv>
    4e14:	0006      	movs	r6, r0
    4e16:	9801      	ldr	r0, [sp, #4]
    4e18:	f000 fba9 	bl	556e <_ZN8Telegram12GetRadioDataEv>
    4e1c:	303c      	adds	r0, #60	; 0x3c
    4e1e:	7802      	ldrb	r2, [r0, #0]
    4e20:	0031      	movs	r1, r6
    4e22:	0020      	movs	r0, r4
    4e24:	f006 fb62 	bl	b4ec <memcpy>
		rxbuffer.payloadLength = msg->GetRadioData()->payloadLength;
    4e28:	9801      	ldr	r0, [sp, #4]
    4e2a:	f000 fba0 	bl	556e <_ZN8Telegram12GetRadioDataEv>
    4e2e:	23a2      	movs	r3, #162	; 0xa2
    4e30:	303c      	adds	r0, #60	; 0x3c
    4e32:	7802      	ldrb	r2, [r0, #0]
    4e34:	005b      	lsls	r3, r3, #1
    4e36:	54ea      	strb	r2, [r5, r3]
		rxbuffer.rssi = msg->GetRadioData()->rssi;
    4e38:	9801      	ldr	r0, [sp, #4]
    4e3a:	f000 fb98 	bl	556e <_ZN8Telegram12GetRadioDataEv>
    4e3e:	223d      	movs	r2, #61	; 0x3d
    4e40:	2346      	movs	r3, #70	; 0x46
    4e42:	5682      	ldrsb	r2, [r0, r2]
    4e44:	33ff      	adds	r3, #255	; 0xff
    4e46:	54ea      	strb	r2, [r5, r3]
		rxbuffer.snr = msg->GetRadioData()->snr;
    4e48:	9801      	ldr	r0, [sp, #4]
    4e4a:	f000 fb90 	bl	556e <_ZN8Telegram12GetRadioDataEv>
    4e4e:	223e      	movs	r2, #62	; 0x3e
    4e50:	23a3      	movs	r3, #163	; 0xa3
    4e52:	5682      	ldrsb	r2, [r0, r2]
		delete msg;
    4e54:	9801      	ldr	r0, [sp, #4]
		rxbuffer.snr = msg->GetRadioData()->snr;
    4e56:	005b      	lsls	r3, r3, #1
    4e58:	54ea      	strb	r2, [r5, r3]
		delete msg;
    4e5a:	2800      	cmp	r0, #0
    4e5c:	d002      	beq.n	4e64 <_ZN10RFProtocol7GetDataEv+0x84>
    4e5e:	6803      	ldr	r3, [r0, #0]
    4e60:	689b      	ldr	r3, [r3, #8]
    4e62:	4798      	blx	r3
    4e64:	0020      	movs	r0, r4
}
    4e66:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

00004e68 <_ZN9RFService12milliSecondsEv>:
	//	SerialAUX->println("Sleep=false");
	RFProtocolStatus.Sleep = false;
	this->_WakeUp();
}

uint32_t RFService::milliSeconds(){
    4e68:	b510      	push	{r4, lr}
	return millis();
    4e6a:	f001 f8e7 	bl	603c <millis>
}
    4e6e:	bd10      	pop	{r4, pc}

00004e70 <_ZN9RFServiceC1EP11E28_2G4M20SP11GpsDataLiteP19SystemInformation_t>:
RFService::RFService(E28_2G4M20S *Radio, GpsDataLite *GPS, SystemInformation_t *status) : RFProtocol(Radio)
    4e70:	b570      	push	{r4, r5, r6, lr}
    4e72:	0004      	movs	r4, r0
    4e74:	0016      	movs	r6, r2
    4e76:	001d      	movs	r5, r3
    4e78:	f7ff fe86 	bl	4b88 <_ZN10RFProtocolC1EP11E28_2G4M20S>
    4e7c:	4b0d      	ldr	r3, [pc, #52]	; (4eb4 <_ZN9RFServiceC1EP11E28_2G4M20SP11GpsDataLiteP19SystemInformation_t+0x44>)
	RFProtocol::RFProtocolStates_t TXHandler();
	uint32_t milliSeconds();
	
	private:
	
	struct RFProtocolStatus_t
    4e7e:	2248      	movs	r2, #72	; 0x48
    4e80:	3308      	adds	r3, #8
    4e82:	6023      	str	r3, [r4, #0]
    4e84:	2300      	movs	r3, #0
    4e86:	32ff      	adds	r2, #255	; 0xff
    4e88:	54a3      	strb	r3, [r4, r2]
    4e8a:	0022      	movs	r2, r4
    4e8c:	3248      	adds	r2, #72	; 0x48
    4e8e:	32ff      	adds	r2, #255	; 0xff
    4e90:	7053      	strb	r3, [r2, #1]
    4e92:	7093      	strb	r3, [r2, #2]
    4e94:	3a4b      	subs	r2, #75	; 0x4b
    4e96:	6513      	str	r3, [r2, #80]	; 0x50
    4e98:	0023      	movs	r3, r4
    4e9a:	4907      	ldr	r1, [pc, #28]	; (4eb8 <_ZN9RFServiceC1EP11E28_2G4M20SP11GpsDataLiteP19SystemInformation_t+0x48>)
    4e9c:	3359      	adds	r3, #89	; 0x59
{
	public:
	virtual void SerialPrintMessage( void ); // Function for each massage to print out the data to Serial.print.	
	uint32_t GetUTCTime();
	// Constructor to create empty messages. (only used for compile to allocate memory)
	Telegram_MSG_2(){};
    4e9e:	4807      	ldr	r0, [pc, #28]	; (4ebc <_ZN9RFServiceC1EP11E28_2G4M20SP11GpsDataLiteP19SystemInformation_t+0x4c>)
    4ea0:	33ff      	adds	r3, #255	; 0xff
    4ea2:	1861      	adds	r1, r4, r1
    4ea4:	6018      	str	r0, [r3, #0]
    4ea6:	3380      	adds	r3, #128	; 0x80
    4ea8:	428b      	cmp	r3, r1
    4eaa:	d1fb      	bne.n	4ea4 <_ZN9RFServiceC1EP11E28_2G4M20SP11GpsDataLiteP19SystemInformation_t+0x34>
	this->GPSData = GPS;
    4eac:	6556      	str	r6, [r2, #84]	; 0x54
	this->SystemInformation = status;
    4eae:	6595      	str	r5, [r2, #88]	; 0x58
}
    4eb0:	0020      	movs	r0, r4
    4eb2:	bd70      	pop	{r4, r5, r6, pc}
    4eb4:	0000db18 	.word	0x0000db18
    4eb8:	00001058 	.word	0x00001058
    4ebc:	0000db5c 	.word	0x0000db5c

00004ec0 <_ZN14Telegram_MSG_2aSERKS_>:
class Telegram_MSG_2 : public Telegram
    4ec0:	b570      	push	{r4, r5, r6, lr}
    4ec2:	000c      	movs	r4, r1
    4ec4:	0005      	movs	r5, r0
	CMD_Do_Power_Off,
	CMD_Simulate_run_on_battery,
}ProtocolCMD_t;


class Telegram
    4ec6:	790b      	ldrb	r3, [r1, #4]
    4ec8:	223f      	movs	r2, #63	; 0x3f
    4eca:	7103      	strb	r3, [r0, #4]
    4ecc:	688b      	ldr	r3, [r1, #8]
    4ece:	6083      	str	r3, [r0, #8]
    4ed0:	68cb      	ldr	r3, [r1, #12]
    4ed2:	60c3      	str	r3, [r0, #12]
    4ed4:	690b      	ldr	r3, [r1, #16]
    4ed6:	6103      	str	r3, [r0, #16]
    4ed8:	694b      	ldr	r3, [r1, #20]
    4eda:	3118      	adds	r1, #24
    4edc:	6143      	str	r3, [r0, #20]
    4ede:	3018      	adds	r0, #24
    4ee0:	f006 fb04 	bl	b4ec <memcpy>
    4ee4:	6da3      	ldr	r3, [r4, #88]	; 0x58
    4ee6:	0028      	movs	r0, r5
    4ee8:	65ab      	str	r3, [r5, #88]	; 0x58
    4eea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    4eec:	65eb      	str	r3, [r5, #92]	; 0x5c
    4eee:	6e23      	ldr	r3, [r4, #96]	; 0x60
    4ef0:	662b      	str	r3, [r5, #96]	; 0x60
    4ef2:	0023      	movs	r3, r4
    4ef4:	3364      	adds	r3, #100	; 0x64
    4ef6:	781a      	ldrb	r2, [r3, #0]
    4ef8:	002b      	movs	r3, r5
    4efa:	3364      	adds	r3, #100	; 0x64
    4efc:	701a      	strb	r2, [r3, #0]
    4efe:	0023      	movs	r3, r4
    4f00:	3365      	adds	r3, #101	; 0x65
    4f02:	781a      	ldrb	r2, [r3, #0]
    4f04:	002b      	movs	r3, r5
    4f06:	3365      	adds	r3, #101	; 0x65
    4f08:	701a      	strb	r2, [r3, #0]
    4f0a:	0023      	movs	r3, r4
    4f0c:	3366      	adds	r3, #102	; 0x66
    4f0e:	781a      	ldrb	r2, [r3, #0]
    4f10:	002b      	movs	r3, r5
    4f12:	3366      	adds	r3, #102	; 0x66
    4f14:	701a      	strb	r2, [r3, #0]
    4f16:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    4f18:	66ab      	str	r3, [r5, #104]	; 0x68
    4f1a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    4f1c:	66eb      	str	r3, [r5, #108]	; 0x6c
    4f1e:	0023      	movs	r3, r4
    4f20:	3370      	adds	r3, #112	; 0x70
    4f22:	781a      	ldrb	r2, [r3, #0]
    4f24:	002b      	movs	r3, r5
    4f26:	3370      	adds	r3, #112	; 0x70
    4f28:	701a      	strb	r2, [r3, #0]
    4f2a:	6f63      	ldr	r3, [r4, #116]	; 0x74
    4f2c:	676b      	str	r3, [r5, #116]	; 0x74
    4f2e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    4f30:	67ab      	str	r3, [r5, #120]	; 0x78
    4f32:	0023      	movs	r3, r4
    4f34:	337c      	adds	r3, #124	; 0x7c
    4f36:	781a      	ldrb	r2, [r3, #0]
    4f38:	002b      	movs	r3, r5
    4f3a:	337c      	adds	r3, #124	; 0x7c
    4f3c:	701a      	strb	r2, [r3, #0]
    4f3e:	227d      	movs	r2, #125	; 0x7d
    4f40:	002b      	movs	r3, r5
    4f42:	56a2      	ldrsb	r2, [r4, r2]
    4f44:	337d      	adds	r3, #125	; 0x7d
    4f46:	701a      	strb	r2, [r3, #0]
    4f48:	227e      	movs	r2, #126	; 0x7e
    4f4a:	56a2      	ldrsb	r2, [r4, r2]
    4f4c:	705a      	strb	r2, [r3, #1]
    4f4e:	bd70      	pop	{r4, r5, r6, pc}

00004f50 <_ZN9RFService21SaveTransponderBeaconEP14Telegram_MSG_1.part.0>:
bool RFService::SaveTransponderBeacon(Telegram_MSG_1 *msg){
    4f50:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f52:	0004      	movs	r4, r0
    4f54:	0007      	movs	r7, r0
    4f56:	000d      	movs	r5, r1
    4f58:	2300      	movs	r3, #0
    4f5a:	3459      	adds	r4, #89	; 0x59
    4f5c:	b0ab      	sub	sp, #172	; 0xac
    4f5e:	34ff      	adds	r4, #255	; 0xff
		 for(int a=0;a<RFProtocolStatus.NumberOfBeaconsToRelay; a++){
    4f60:	2648      	movs	r6, #72	; 0x48
bool RFService::SaveTransponderBeacon(Telegram_MSG_1 *msg){
    4f62:	9302      	str	r3, [sp, #8]
		 for(int a=0;a<RFProtocolStatus.NumberOfBeaconsToRelay; a++){
    4f64:	36ff      	adds	r6, #255	; 0xff
    4f66:	5dbb      	ldrb	r3, [r7, r6]
    4f68:	9a02      	ldr	r2, [sp, #8]
    4f6a:	4293      	cmp	r3, r2
    4f6c:	dd28      	ble.n	4fc0 <_ZN9RFService21SaveTransponderBeaconEP14Telegram_MSG_1.part.0+0x70>
			 if( SavedBeacons[a].TelegramMatchUniqueID(msg->GetUniqueID1(), msg->GetUniqueID2(), msg->GetUniqueID3(), msg->GetUniqueID4()) == true ){
    4f6e:	0028      	movs	r0, r5
    4f70:	9404      	str	r4, [sp, #16]
    4f72:	f000 fad9 	bl	5528 <_ZN8Telegram12GetUniqueID1Ev>
    4f76:	9003      	str	r0, [sp, #12]
    4f78:	0028      	movs	r0, r5
    4f7a:	f000 fad7 	bl	552c <_ZN8Telegram12GetUniqueID2Ev>
    4f7e:	9005      	str	r0, [sp, #20]
    4f80:	0028      	movs	r0, r5
    4f82:	f000 fad5 	bl	5530 <_ZN8Telegram12GetUniqueID3Ev>
    4f86:	0006      	movs	r6, r0
    4f88:	0028      	movs	r0, r5
    4f8a:	f000 fad3 	bl	5534 <_ZN8Telegram12GetUniqueID4Ev>
    4f8e:	0033      	movs	r3, r6
    4f90:	9000      	str	r0, [sp, #0]
    4f92:	9a05      	ldr	r2, [sp, #20]
    4f94:	0020      	movs	r0, r4
    4f96:	9903      	ldr	r1, [sp, #12]
    4f98:	f000 fad6 	bl	5548 <_ZN8Telegram21TelegramMatchUniqueIDEmmmm>
    4f9c:	3480      	adds	r4, #128	; 0x80
    4f9e:	9003      	str	r0, [sp, #12]
    4fa0:	2800      	cmp	r0, #0
    4fa2:	d00a      	beq.n	4fba <_ZN9RFService21SaveTransponderBeaconEP14Telegram_MSG_1.part.0+0x6a>
				 SavedBeacons[a] = Telegram_MSG_2(msg);
    4fa4:	0029      	movs	r1, r5
    4fa6:	a80a      	add	r0, sp, #40	; 0x28
    4fa8:	f000 fdae 	bl	5b08 <_ZN14Telegram_MSG_2C1EP14Telegram_MSG_1>
    4fac:	a90a      	add	r1, sp, #40	; 0x28
    4fae:	9804      	ldr	r0, [sp, #16]
    4fb0:	f7ff ff86 	bl	4ec0 <_ZN14Telegram_MSG_2aSERKS_>
}
    4fb4:	9803      	ldr	r0, [sp, #12]
    4fb6:	b02b      	add	sp, #172	; 0xac
    4fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		 for(int a=0;a<RFProtocolStatus.NumberOfBeaconsToRelay; a++){
    4fba:	9b02      	ldr	r3, [sp, #8]
    4fbc:	3301      	adds	r3, #1
    4fbe:	e7cf      	b.n	4f60 <_ZN9RFService21SaveTransponderBeaconEP14Telegram_MSG_1.part.0+0x10>
	return false;
    4fc0:	2200      	movs	r2, #0
    4fc2:	9203      	str	r2, [sp, #12]
		 if(RFProtocolStatus.NumberOfBeaconsToRelay < FIFO_SIZE){
    4fc4:	2b1d      	cmp	r3, #29
    4fc6:	dcf5      	bgt.n	4fb4 <_ZN9RFService21SaveTransponderBeaconEP14Telegram_MSG_1.part.0+0x64>
			 SavedBeacons[RFProtocolStatus.NumberOfBeaconsToRelay] = Telegram_MSG_2(msg);
    4fc8:	01db      	lsls	r3, r3, #7
    4fca:	3359      	adds	r3, #89	; 0x59
    4fcc:	33ff      	adds	r3, #255	; 0xff
    4fce:	18fc      	adds	r4, r7, r3
    4fd0:	0029      	movs	r1, r5
    4fd2:	a80a      	add	r0, sp, #40	; 0x28
    4fd4:	f000 fd98 	bl	5b08 <_ZN14Telegram_MSG_2C1EP14Telegram_MSG_1>
    4fd8:	a90a      	add	r1, sp, #40	; 0x28
    4fda:	0020      	movs	r0, r4
    4fdc:	f7ff ff70 	bl	4ec0 <_ZN14Telegram_MSG_2aSERKS_>
	StringSumHelper(const char *p) : String(p) {}
    4fe0:	490d      	ldr	r1, [pc, #52]	; (5018 <_ZN9RFService21SaveTransponderBeaconEP14Telegram_MSG_1.part.0+0xc8>)
    4fe2:	a80a      	add	r0, sp, #40	; 0x28
    4fe4:	f002 fe3f 	bl	7c66 <_ZN6StringC1EPKc>
			 Serial.println("It was added to the list at:" + String( RFProtocolStatus.NumberOfBeaconsToRelay));
    4fe8:	220a      	movs	r2, #10
    4fea:	5db9      	ldrb	r1, [r7, r6]
    4fec:	a807      	add	r0, sp, #28
    4fee:	f002 fe6c 	bl	7cca <_ZN6StringC1Ehh>
    4ff2:	a907      	add	r1, sp, #28
    4ff4:	a80a      	add	r0, sp, #40	; 0x28
    4ff6:	f002 feda 	bl	7dae <_ZplRK15StringSumHelperRK6String>
    4ffa:	0001      	movs	r1, r0
    4ffc:	4807      	ldr	r0, [pc, #28]	; (501c <_ZN9RFService21SaveTransponderBeaconEP14Telegram_MSG_1.part.0+0xcc>)
    4ffe:	f001 f89d 	bl	613c <_ZN5Print7printlnERK6String>
    5002:	a807      	add	r0, sp, #28
    5004:	f002 fde7 	bl	7bd6 <_ZN6StringD1Ev>
class StringSumHelper : public String
    5008:	a80a      	add	r0, sp, #40	; 0x28
    500a:	f002 fde4 	bl	7bd6 <_ZN6StringD1Ev>
			 RFProtocolStatus.NumberOfBeaconsToRelay++;
    500e:	5dbb      	ldrb	r3, [r7, r6]
    5010:	3301      	adds	r3, #1
    5012:	55bb      	strb	r3, [r7, r6]
    5014:	e7ce      	b.n	4fb4 <_ZN9RFService21SaveTransponderBeaconEP14Telegram_MSG_1.part.0+0x64>
    5016:	46c0      	nop			; (mov r8, r8)
    5018:	0000daf9 	.word	0x0000daf9
    501c:	200003f4 	.word	0x200003f4

00005020 <_ZN9RFService21SaveTransponderBeaconEP14Telegram_MSG_1>:
bool RFService::SaveTransponderBeacon(Telegram_MSG_1 *msg){
    5020:	b570      	push	{r4, r5, r6, lr}
    5022:	0005      	movs	r5, r0
	 if(msg->GetNumberOfSecondsSinceLastGroundStationCom() > 20){
    5024:	0008      	movs	r0, r1
bool RFService::SaveTransponderBeacon(Telegram_MSG_1 *msg){
    5026:	000c      	movs	r4, r1
	 if(msg->GetNumberOfSecondsSinceLastGroundStationCom() > 20){
    5028:	f000 fc1e 	bl	5868 <_ZN14Telegram_MSG_143GetNumberOfSecondsSinceLastGroundStationComEv>
    502c:	0003      	movs	r3, r0
	return false;
    502e:	2000      	movs	r0, #0
	 if(msg->GetNumberOfSecondsSinceLastGroundStationCom() > 20){
    5030:	2b14      	cmp	r3, #20
    5032:	dd03      	ble.n	503c <_ZN9RFService21SaveTransponderBeaconEP14Telegram_MSG_1+0x1c>
    5034:	0021      	movs	r1, r4
    5036:	0028      	movs	r0, r5
    5038:	f7ff ff8a 	bl	4f50 <_ZN9RFService21SaveTransponderBeaconEP14Telegram_MSG_1.part.0>
}
    503c:	bd70      	pop	{r4, r5, r6, pc}

0000503e <_ZN9RFService14SeccondCounterEv>:
	if(RFProtocolStatus.SecondCounterSinceLasteGroundStationContact < 254){
    503e:	22a4      	movs	r2, #164	; 0xa4
    5040:	0052      	lsls	r2, r2, #1
    5042:	5c83      	ldrb	r3, [r0, r2]
    5044:	2bfd      	cmp	r3, #253	; 0xfd
    5046:	dc01      	bgt.n	504c <_ZN9RFService14SeccondCounterEv+0xe>
		RFProtocolStatus.SecondCounterSinceLasteGroundStationContact++;
    5048:	3301      	adds	r3, #1
    504a:	5483      	strb	r3, [r0, r2]
}
    504c:	4770      	bx	lr

0000504e <_ZN9RFService9PowerDownEv>:
	RFProtocolStatus.Sleep = true;
    504e:	234a      	movs	r3, #74	; 0x4a
    5050:	2201      	movs	r2, #1
void RFService::PowerDown(){
    5052:	b510      	push	{r4, lr}
	RFProtocolStatus.Sleep = true;
    5054:	33ff      	adds	r3, #255	; 0xff
    5056:	54c2      	strb	r2, [r0, r3]
	this->_PowerDown();
    5058:	f7ff fe72 	bl	4d40 <_ZN10RFProtocol10_PowerDownEv>
}
    505c:	bd10      	pop	{r4, pc}

0000505e <_ZN9RFService6WakeUpEv>:
	RFProtocolStatus.Sleep = false;
    505e:	234a      	movs	r3, #74	; 0x4a
    5060:	2200      	movs	r2, #0
void RFService::WakeUp(){
    5062:	b510      	push	{r4, lr}
	RFProtocolStatus.Sleep = false;
    5064:	33ff      	adds	r3, #255	; 0xff
    5066:	54c2      	strb	r2, [r0, r3]
	this->_WakeUp();
    5068:	f7ff fdd6 	bl	4c18 <_ZN10RFProtocol7_WakeUpEv>
}
    506c:	bd10      	pop	{r4, pc}
	...

00005070 <_ZN9RFService10SendBeaconEv>:
{
    5070:	b570      	push	{r4, r5, r6, lr}
    5072:	0005      	movs	r5, r0
    5074:	b08e      	sub	sp, #56	; 0x38
											 SystemInformation->FIRMWARE_VERSION, SystemInformation->pcbVersion, RFProtocolStatus.NumberOfBeaconsToRelay);
    5076:	2080      	movs	r0, #128	; 0x80
    5078:	f001 f822 	bl	60c0 <_Znwj>
	Telegram_MSG_1 *msg = new Telegram_MSG_1(SystemInformation->SerialNumber1, SystemInformation->SerialNumber2, SystemInformation->SerialNumber3, SystemInformation->SerialNumber4,
    507c:	002b      	movs	r3, r5
    507e:	33fc      	adds	r3, #252	; 0xfc
    5080:	6d9c      	ldr	r4, [r3, #88]	; 0x58
											 (uint32_t)GPSData->UTCTime, GPSData->Latitude, GPSData->Longitude,
    5082:	6d5a      	ldr	r2, [r3, #84]	; 0x54
											 SystemInformation->FIRMWARE_VERSION, SystemInformation->pcbVersion, RFProtocolStatus.NumberOfBeaconsToRelay);
    5084:	2348      	movs	r3, #72	; 0x48
    5086:	33ff      	adds	r3, #255	; 0xff
    5088:	5ceb      	ldrb	r3, [r5, r3]
    508a:	0006      	movs	r6, r0
    508c:	930d      	str	r3, [sp, #52]	; 0x34
    508e:	7923      	ldrb	r3, [r4, #4]
    5090:	2002      	movs	r0, #2
    5092:	930c      	str	r3, [sp, #48]	; 0x30
    5094:	6823      	ldr	r3, [r4, #0]
    5096:	930b      	str	r3, [sp, #44]	; 0x2c
    5098:	68a3      	ldr	r3, [r4, #8]
    509a:	930a      	str	r3, [sp, #40]	; 0x28
    509c:	23a4      	movs	r3, #164	; 0xa4
    509e:	005b      	lsls	r3, r3, #1
    50a0:	5ceb      	ldrb	r3, [r5, r3]
    50a2:	9309      	str	r3, [sp, #36]	; 0x24
    50a4:	2300      	movs	r3, #0
    50a6:	9308      	str	r3, [sp, #32]
    50a8:	9307      	str	r3, [sp, #28]
    50aa:	2300      	movs	r3, #0
											 GPSData->NumberOfSatellites, GPSData->FixDecimal, ((SystemInformation->state==RUNNING_ON_BATTERY_GPS_ON) || (SystemInformation->state==GET_READY_TO_RUN_ON_BATTERY) || (SystemInformation->state==RUNNING_ON_BATTERY_GPS_OFF)),
    50ac:	79e1      	ldrb	r1, [r4, #7]
    50ae:	3902      	subs	r1, #2
											 SystemInformation->FIRMWARE_VERSION, SystemInformation->pcbVersion, RFProtocolStatus.NumberOfBeaconsToRelay);
    50b0:	b2c9      	uxtb	r1, r1
    50b2:	4288      	cmp	r0, r1
    50b4:	415b      	adcs	r3, r3
    50b6:	b2db      	uxtb	r3, r3
    50b8:	9306      	str	r3, [sp, #24]
    50ba:	0013      	movs	r3, r2
    50bc:	3331      	adds	r3, #49	; 0x31
    50be:	781b      	ldrb	r3, [r3, #0]
    50c0:	9305      	str	r3, [sp, #20]
    50c2:	0013      	movs	r3, r2
    50c4:	3332      	adds	r3, #50	; 0x32
    50c6:	781b      	ldrb	r3, [r3, #0]
    50c8:	9304      	str	r3, [sp, #16]
    50ca:	6a53      	ldr	r3, [r2, #36]	; 0x24
    50cc:	9303      	str	r3, [sp, #12]
    50ce:	6a13      	ldr	r3, [r2, #32]
    50d0:	9302      	str	r3, [sp, #8]
    50d2:	6810      	ldr	r0, [r2, #0]
    50d4:	f003 fbe6 	bl	88a4 <__aeabi_f2uiz>
    50d8:	9001      	str	r0, [sp, #4]
    50da:	6b23      	ldr	r3, [r4, #48]	; 0x30
    50dc:	0030      	movs	r0, r6
    50de:	9300      	str	r3, [sp, #0]
    50e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    50e2:	6a22      	ldr	r2, [r4, #32]
    50e4:	69a1      	ldr	r1, [r4, #24]
    50e6:	f000 fa4d 	bl	5584 <_ZN14Telegram_MSG_1C1Emmmmmmmhhbffhffhh>
	if(this->txFIFO.isFull()){
    50ea:	002b      	movs	r3, r5
    50ec:	33fd      	adds	r3, #253	; 0xfd
    50ee:	781b      	ldrb	r3, [r3, #0]
    50f0:	2b1e      	cmp	r3, #30
    50f2:	d106      	bne.n	5102 <_ZN9RFService10SendBeaconEv+0x92>
		SerialAUX->println("Error! - Tx FIFO Full, Unable to send Beacon message");
    50f4:	4b06      	ldr	r3, [pc, #24]	; (5110 <_ZN9RFService10SendBeaconEv+0xa0>)
    50f6:	4907      	ldr	r1, [pc, #28]	; (5114 <_ZN9RFService10SendBeaconEv+0xa4>)
    50f8:	6818      	ldr	r0, [r3, #0]
    50fa:	f001 f829 	bl	6150 <_ZN5Print7printlnEPKc>
}
    50fe:	b00e      	add	sp, #56	; 0x38
    5100:	bd70      	pop	{r4, r5, r6, pc}
			this->txFIFO.push(msg);	//Add to TX FIFO
    5102:	0028      	movs	r0, r5
    5104:	0031      	movs	r1, r6
    5106:	3084      	adds	r0, #132	; 0x84
    5108:	f7ff fe28 	bl	4d5c <_ZN7RingBufIP8TelegramLj30EhtE4pushES1_>
}
    510c:	e7f7      	b.n	50fe <_ZN9RFService10SendBeaconEv+0x8e>
    510e:	46c0      	nop			; (mov r8, r8)
    5110:	2000029c 	.word	0x2000029c
    5114:	0000dac4 	.word	0x0000dac4

00005118 <_ZN9RFService9RXHandlerEv>:
{
    5118:	b5f0      	push	{r4, r5, r6, r7, lr}
	Telegram *msg = ConvertToTelegram(Radio->GetRadioData());
    511a:	0007      	movs	r7, r0
    511c:	37fc      	adds	r7, #252	; 0xfc
{
    511e:	b0b1      	sub	sp, #196	; 0xc4
    5120:	0006      	movs	r6, r0
	Telegram *msg = ConvertToTelegram(Radio->GetRadioData());
    5122:	6d38      	ldr	r0, [r7, #80]	; 0x50
    5124:	f7fd f8e3 	bl	22ee <_ZN11E28_2G4M20S12GetRadioDataEv>
    5128:	0001      	movs	r1, r0
    512a:	0030      	movs	r0, r6
    512c:	f7ff fd4f 	bl	4bce <_ZN10RFProtocol17ConvertToTelegramEP11RadioData_t>
    5130:	900e      	str	r0, [sp, #56]	; 0x38
	RFProtocolStates_t returnState =RX_IDLE; 
    5132:	1e05      	subs	r5, r0, #0
	if(msg!=NULL)
    5134:	d019      	beq.n	516a <_ZN9RFService9RXHandlerEv+0x52>
		switch(msg->GetRadioMSG_ID())
    5136:	f000 f9f5 	bl	5524 <_ZN8Telegram14GetRadioMSG_IDEv>
    513a:	2801      	cmp	r0, #1
    513c:	d004      	beq.n	5148 <_ZN9RFService9RXHandlerEv+0x30>
    513e:	2803      	cmp	r0, #3
    5140:	d016      	beq.n	5170 <_ZN9RFService9RXHandlerEv+0x58>
		bool SaveTelegram = false;
    5142:	2400      	movs	r4, #0
	RFProtocolStates_t returnState =RX_IDLE; 
    5144:	0025      	movs	r5, r4
    5146:	e005      	b.n	5154 <_ZN9RFService9RXHandlerEv+0x3c>
				SaveTelegram = SaveTransponderBeacon((Telegram_MSG_1 *)msg);
    5148:	990e      	ldr	r1, [sp, #56]	; 0x38
    514a:	0030      	movs	r0, r6
    514c:	f7ff ff68 	bl	5020 <_ZN9RFService21SaveTransponderBeaconEP14Telegram_MSG_1>
	RFProtocolStates_t returnState =RX_IDLE; 
    5150:	2500      	movs	r5, #0
				SaveTelegram = SaveTransponderBeacon((Telegram_MSG_1 *)msg);
    5152:	0004      	movs	r4, r0
		if(!(rxFIFO.isFull()))
    5154:	0033      	movs	r3, r6
    5156:	3381      	adds	r3, #129	; 0x81
    5158:	781b      	ldrb	r3, [r3, #0]
    515a:	2b1e      	cmp	r3, #30
    515c:	d100      	bne.n	5160 <_ZN9RFService9RXHandlerEv+0x48>
    515e:	e108      	b.n	5372 <_ZN9RFService9RXHandlerEv+0x25a>
			rxFIFO.push(msg);
    5160:	0030      	movs	r0, r6
    5162:	990e      	ldr	r1, [sp, #56]	; 0x38
    5164:	3008      	adds	r0, #8
    5166:	f7ff fdf9 	bl	4d5c <_ZN7RingBufIP8TelegramLj30EhtE4pushES1_>
}
    516a:	0028      	movs	r0, r5
    516c:	b031      	add	sp, #196	; 0xc4
    516e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if(msg->TelegramMatchUniqueID(SystemInformation->SerialNumber1, SystemInformation->SerialNumber2, SystemInformation->SerialNumber3, SystemInformation->SerialNumber4))
    5170:	6db9      	ldr	r1, [r7, #88]	; 0x58
    5172:	980e      	ldr	r0, [sp, #56]	; 0x38
    5174:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    5176:	9300      	str	r3, [sp, #0]
    5178:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    517a:	6a0a      	ldr	r2, [r1, #32]
    517c:	6989      	ldr	r1, [r1, #24]
    517e:	f000 f9e3 	bl	5548 <_ZN8Telegram21TelegramMatchUniqueIDEmmmm>
    5182:	2800      	cmp	r0, #0
    5184:	d0dd      	beq.n	5142 <_ZN9RFService9RXHandlerEv+0x2a>
					RFProtocolStatus.SecondCounterSinceLasteGroundStationContact=0;
    5186:	23a4      	movs	r3, #164	; 0xa4
    5188:	2400      	movs	r4, #0
    518a:	005b      	lsls	r3, r3, #1
    518c:	54f4      	strb	r4, [r6, r3]
					switch(((Telegram_MSG_3 *)msg)->GetCommand())
    518e:	980e      	ldr	r0, [sp, #56]	; 0x38
    5190:	f000 fd44 	bl	5c1c <_ZN14Telegram_MSG_310GetCommandEv>
    5194:	3801      	subs	r0, #1
    5196:	2803      	cmp	r0, #3
    5198:	d8d4      	bhi.n	5144 <_ZN9RFService9RXHandlerEv+0x2c>
    519a:	f003 f981 	bl	84a0 <__gnu_thumb1_case_uqi>
    519e:	4502      	.short	0x4502
    51a0:	e4d3      	.short	0xe4d3
							 if(RFProtocolStatus.Sleep == true){ // don't send reply if sleep mode is requested.
    51a2:	234a      	movs	r3, #74	; 0x4a
    51a4:	33ff      	adds	r3, #255	; 0xff
    51a6:	5cf4      	ldrb	r4, [r6, r3]
    51a8:	2c00      	cmp	r4, #0
    51aa:	d1ca      	bne.n	5142 <_ZN9RFService9RXHandlerEv+0x2a>
																		SystemInformation->FIRMWARE_VERSION, SystemInformation->pcbVersion, RFProtocolStatus.NumberOfBeaconsToRelay);
    51ac:	2248      	movs	r2, #72	; 0x48
    51ae:	32ff      	adds	r2, #255	; 0xff
    51b0:	5cb2      	ldrb	r2, [r6, r2]
								Telegram_MSG_1 msgReply = Telegram_MSG_1(SystemInformation->SerialNumber1, SystemInformation->SerialNumber2,
    51b2:	6dbd      	ldr	r5, [r7, #88]	; 0x58
 																		(uint32_t)GPSData->UTCTime, GPSData->Latitude, GPSData->Longitude,
    51b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
																		SystemInformation->FIRMWARE_VERSION, SystemInformation->pcbVersion, RFProtocolStatus.NumberOfBeaconsToRelay);
    51b6:	920d      	str	r2, [sp, #52]	; 0x34
    51b8:	792a      	ldrb	r2, [r5, #4]
    51ba:	2002      	movs	r0, #2
    51bc:	920c      	str	r2, [sp, #48]	; 0x30
    51be:	682a      	ldr	r2, [r5, #0]
    51c0:	0021      	movs	r1, r4
    51c2:	920b      	str	r2, [sp, #44]	; 0x2c
    51c4:	68aa      	ldr	r2, [r5, #8]
    51c6:	920a      	str	r2, [sp, #40]	; 0x28
    51c8:	22a4      	movs	r2, #164	; 0xa4
    51ca:	0052      	lsls	r2, r2, #1
    51cc:	5cb2      	ldrb	r2, [r6, r2]
    51ce:	9209      	str	r2, [sp, #36]	; 0x24
    51d0:	2200      	movs	r2, #0
    51d2:	9208      	str	r2, [sp, #32]
    51d4:	9207      	str	r2, [sp, #28]
 																		GPSData->NumberOfSatellites, GPSData->FixDecimal, ((SystemInformation->state==RUNNING_ON_BATTERY_GPS_ON) || (SystemInformation->state==GET_READY_TO_RUN_ON_BATTERY) || (SystemInformation->state==RUNNING_ON_BATTERY_GPS_OFF)),
    51d6:	79ea      	ldrb	r2, [r5, #7]
    51d8:	3a02      	subs	r2, #2
																		SystemInformation->FIRMWARE_VERSION, SystemInformation->pcbVersion, RFProtocolStatus.NumberOfBeaconsToRelay);
    51da:	b2d2      	uxtb	r2, r2
    51dc:	4290      	cmp	r0, r2
    51de:	4161      	adcs	r1, r4
    51e0:	b2ca      	uxtb	r2, r1
    51e2:	9206      	str	r2, [sp, #24]
    51e4:	001a      	movs	r2, r3
    51e6:	3231      	adds	r2, #49	; 0x31
    51e8:	7812      	ldrb	r2, [r2, #0]
    51ea:	9205      	str	r2, [sp, #20]
    51ec:	001a      	movs	r2, r3
    51ee:	3232      	adds	r2, #50	; 0x32
    51f0:	7812      	ldrb	r2, [r2, #0]
    51f2:	9204      	str	r2, [sp, #16]
    51f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    51f6:	9203      	str	r2, [sp, #12]
    51f8:	6a1a      	ldr	r2, [r3, #32]
    51fa:	9202      	str	r2, [sp, #8]
    51fc:	6818      	ldr	r0, [r3, #0]
    51fe:	f003 fb51 	bl	88a4 <__aeabi_f2uiz>
    5202:	9001      	str	r0, [sp, #4]
    5204:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    5206:	a810      	add	r0, sp, #64	; 0x40
    5208:	9300      	str	r3, [sp, #0]
    520a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    520c:	6a2a      	ldr	r2, [r5, #32]
    520e:	69a9      	ldr	r1, [r5, #24]
    5210:	f000 f9b8 	bl	5584 <_ZN14Telegram_MSG_1C1Emmmmmmmhhbffhffhh>
								Radio->SendRadioData(msgReply.GetRadioData());
    5214:	6d3d      	ldr	r5, [r7, #80]	; 0x50
    5216:	a810      	add	r0, sp, #64	; 0x40
    5218:	f000 f9a9 	bl	556e <_ZN8Telegram12GetRadioDataEv>
    521c:	0001      	movs	r1, r0
    521e:	0028      	movs	r0, r5
    5220:	f7fd f91d 	bl	245e <_ZN11E28_2G4M20S13SendRadioDataEP11RadioData_t>
								returnState=TX_WITHOUT_REPLY;
    5224:	2502      	movs	r5, #2
    5226:	e795      	b.n	5154 <_ZN9RFService9RXHandlerEv+0x3c>
							if(RFProtocolStatus.Sleep == true){ // don't send reply if sleep mode is requested.
    5228:	234a      	movs	r3, #74	; 0x4a
    522a:	33ff      	adds	r3, #255	; 0xff
    522c:	5cf4      	ldrb	r4, [r6, r3]
    522e:	2c00      	cmp	r4, #0
    5230:	d000      	beq.n	5234 <_ZN9RFService9RXHandlerEv+0x11c>
    5232:	e786      	b.n	5142 <_ZN9RFService9RXHandlerEv+0x2a>
								if(RFProtocolStatus.NumberOfBeaconsToRelay > 0){
    5234:	2348      	movs	r3, #72	; 0x48
    5236:	33ff      	adds	r3, #255	; 0xff
    5238:	5cf3      	ldrb	r3, [r6, r3]
    523a:	2b00      	cmp	r3, #0
    523c:	d100      	bne.n	5240 <_ZN9RFService9RXHandlerEv+0x128>
    523e:	e780      	b.n	5142 <_ZN9RFService9RXHandlerEv+0x2a>
									Telegram_MSG_2 msgReply = SavedBeacons[RFProtocolStatus.NumberOfBeaconsToRelay-1];
    5240:	3b01      	subs	r3, #1
    5242:	01dd      	lsls	r5, r3, #7
    5244:	1975      	adds	r5, r6, r5
    5246:	930f      	str	r3, [sp, #60]	; 0x3c
    5248:	002b      	movs	r3, r5
    524a:	335d      	adds	r3, #93	; 0x5d
    524c:	33ff      	adds	r3, #255	; 0xff
    524e:	781b      	ldrb	r3, [r3, #0]
    5250:	af10      	add	r7, sp, #64	; 0x40
    5252:	713b      	strb	r3, [r7, #4]
    5254:	002b      	movs	r3, r5
    5256:	0029      	movs	r1, r5
    5258:	33fc      	adds	r3, #252	; 0xfc
    525a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    525c:	3171      	adds	r1, #113	; 0x71
    525e:	9212      	str	r2, [sp, #72]	; 0x48
    5260:	6e9a      	ldr	r2, [r3, #104]	; 0x68
    5262:	31ff      	adds	r1, #255	; 0xff
    5264:	9213      	str	r2, [sp, #76]	; 0x4c
    5266:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    5268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    526a:	9214      	str	r2, [sp, #80]	; 0x50
    526c:	a816      	add	r0, sp, #88	; 0x58
    526e:	223f      	movs	r2, #63	; 0x3f
    5270:	9315      	str	r3, [sp, #84]	; 0x54
    5272:	f006 f93b 	bl	b4ec <memcpy>
    5276:	4b43      	ldr	r3, [pc, #268]	; (5384 <_ZN9RFService9RXHandlerEv+0x26c>)
    5278:	a902      	add	r1, sp, #8
    527a:	9310      	str	r3, [sp, #64]	; 0x40
    527c:	002b      	movs	r3, r5
    527e:	33b1      	adds	r3, #177	; 0xb1
    5280:	33ff      	adds	r3, #255	; 0xff
    5282:	681b      	ldr	r3, [r3, #0]
									if(msgReply.GetRadioMSG_ID() == MSG_Beacon_Relay)
    5284:	0038      	movs	r0, r7
    5286:	65bb      	str	r3, [r7, #88]	; 0x58
    5288:	002b      	movs	r3, r5
    528a:	33b5      	adds	r3, #181	; 0xb5
    528c:	33ff      	adds	r3, #255	; 0xff
    528e:	681b      	ldr	r3, [r3, #0]
    5290:	65fb      	str	r3, [r7, #92]	; 0x5c
    5292:	002b      	movs	r3, r5
    5294:	33b9      	adds	r3, #185	; 0xb9
    5296:	33ff      	adds	r3, #255	; 0xff
    5298:	681b      	ldr	r3, [r3, #0]
    529a:	663b      	str	r3, [r7, #96]	; 0x60
    529c:	002b      	movs	r3, r5
    529e:	33bd      	adds	r3, #189	; 0xbd
    52a0:	33ff      	adds	r3, #255	; 0xff
    52a2:	781a      	ldrb	r2, [r3, #0]
    52a4:	ab29      	add	r3, sp, #164	; 0xa4
    52a6:	701a      	strb	r2, [r3, #0]
    52a8:	002b      	movs	r3, r5
    52aa:	33be      	adds	r3, #190	; 0xbe
    52ac:	33ff      	adds	r3, #255	; 0xff
    52ae:	781a      	ldrb	r2, [r3, #0]
    52b0:	239d      	movs	r3, #157	; 0x9d
    52b2:	185b      	adds	r3, r3, r1
    52b4:	701a      	strb	r2, [r3, #0]
    52b6:	002b      	movs	r3, r5
    52b8:	33bf      	adds	r3, #191	; 0xbf
    52ba:	33ff      	adds	r3, #255	; 0xff
    52bc:	781a      	ldrb	r2, [r3, #0]
    52be:	239e      	movs	r3, #158	; 0x9e
    52c0:	185b      	adds	r3, r3, r1
    52c2:	701a      	strb	r2, [r3, #0]
    52c4:	002b      	movs	r3, r5
    52c6:	33c1      	adds	r3, #193	; 0xc1
    52c8:	33ff      	adds	r3, #255	; 0xff
    52ca:	681b      	ldr	r3, [r3, #0]
    52cc:	66bb      	str	r3, [r7, #104]	; 0x68
    52ce:	002b      	movs	r3, r5
    52d0:	33c5      	adds	r3, #197	; 0xc5
    52d2:	33ff      	adds	r3, #255	; 0xff
    52d4:	681b      	ldr	r3, [r3, #0]
    52d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    52d8:	002b      	movs	r3, r5
    52da:	33c9      	adds	r3, #201	; 0xc9
    52dc:	33ff      	adds	r3, #255	; 0xff
    52de:	781a      	ldrb	r2, [r3, #0]
    52e0:	ab2c      	add	r3, sp, #176	; 0xb0
    52e2:	701a      	strb	r2, [r3, #0]
    52e4:	002b      	movs	r3, r5
    52e6:	33cd      	adds	r3, #205	; 0xcd
    52e8:	33ff      	adds	r3, #255	; 0xff
    52ea:	681b      	ldr	r3, [r3, #0]
    52ec:	677b      	str	r3, [r7, #116]	; 0x74
    52ee:	002b      	movs	r3, r5
    52f0:	33d1      	adds	r3, #209	; 0xd1
    52f2:	33ff      	adds	r3, #255	; 0xff
    52f4:	681b      	ldr	r3, [r3, #0]
    52f6:	67bb      	str	r3, [r7, #120]	; 0x78
    52f8:	002b      	movs	r3, r5
    52fa:	33d5      	adds	r3, #213	; 0xd5
    52fc:	33ff      	adds	r3, #255	; 0xff
    52fe:	781a      	ldrb	r2, [r3, #0]
    5300:	ab2f      	add	r3, sp, #188	; 0xbc
    5302:	701a      	strb	r2, [r3, #0]
    5304:	002b      	movs	r3, r5
    5306:	33d6      	adds	r3, #214	; 0xd6
    5308:	33ff      	adds	r3, #255	; 0xff
    530a:	781a      	ldrb	r2, [r3, #0]
    530c:	23b5      	movs	r3, #181	; 0xb5
    530e:	185b      	adds	r3, r3, r1
    5310:	701a      	strb	r2, [r3, #0]
    5312:	23b6      	movs	r3, #182	; 0xb6
    5314:	35d7      	adds	r5, #215	; 0xd7
    5316:	35ff      	adds	r5, #255	; 0xff
    5318:	782a      	ldrb	r2, [r5, #0]
    531a:	185b      	adds	r3, r3, r1
    531c:	701a      	strb	r2, [r3, #0]
									RFProtocolStatus.NumberOfBeaconsToRelay--;
    531e:	213c      	movs	r1, #60	; 0x3c
    5320:	466a      	mov	r2, sp
    5322:	2348      	movs	r3, #72	; 0x48
    5324:	1852      	adds	r2, r2, r1
    5326:	7812      	ldrb	r2, [r2, #0]
    5328:	33ff      	adds	r3, #255	; 0xff
    532a:	54f2      	strb	r2, [r6, r3]
									if(msgReply.GetRadioMSG_ID() == MSG_Beacon_Relay)
    532c:	f000 f8fa 	bl	5524 <_ZN8Telegram14GetRadioMSG_IDEv>
	RFProtocolStates_t returnState =RX_IDLE; 
    5330:	0025      	movs	r5, r4
									if(msgReply.GetRadioMSG_ID() == MSG_Beacon_Relay)
    5332:	900f      	str	r0, [sp, #60]	; 0x3c
    5334:	2802      	cmp	r0, #2
    5336:	d000      	beq.n	533a <_ZN9RFService9RXHandlerEv+0x222>
    5338:	e70c      	b.n	5154 <_ZN9RFService9RXHandlerEv+0x3c>
										Radio->SendRadioData(msgReply.GetRadioData());
    533a:	0033      	movs	r3, r6
    533c:	33fc      	adds	r3, #252	; 0xfc
    533e:	6d1d      	ldr	r5, [r3, #80]	; 0x50
    5340:	0038      	movs	r0, r7
    5342:	e769      	b.n	5218 <_ZN9RFService9RXHandlerEv+0x100>
							digitalWrite(led2Pin, HIGH);	
    5344:	2101      	movs	r1, #1
    5346:	2015      	movs	r0, #21
    5348:	f002 fb98 	bl	7a7c <digitalWrite>
							delay(2000);
    534c:	20fa      	movs	r0, #250	; 0xfa
    534e:	00c0      	lsls	r0, r0, #3
    5350:	f000 fe7a 	bl	6048 <delay>
							digitalWrite(led2Pin, LOW);	
    5354:	2100      	movs	r1, #0
    5356:	2015      	movs	r0, #21
    5358:	f002 fb90 	bl	7a7c <digitalWrite>
							SystemInformation->SaftySwitchPushed=true; // ensure next state is POWER_OFF
    535c:	2201      	movs	r2, #1
    535e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    5360:	333c      	adds	r3, #60	; 0x3c
							SystemInformation->SimulateRunningOnBattery = !SystemInformation->SimulateRunningOnBattery; // toggle.
    5362:	701a      	strb	r2, [r3, #0]
    5364:	e6ed      	b.n	5142 <_ZN9RFService9RXHandlerEv+0x2a>
    5366:	2201      	movs	r2, #1
    5368:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    536a:	3336      	adds	r3, #54	; 0x36
    536c:	7819      	ldrb	r1, [r3, #0]
    536e:	404a      	eors	r2, r1
    5370:	e7f7      	b.n	5362 <_ZN9RFService9RXHandlerEv+0x24a>
		if(!SaveTelegram)
    5372:	2c00      	cmp	r4, #0
    5374:	d000      	beq.n	5378 <_ZN9RFService9RXHandlerEv+0x260>
    5376:	e6f8      	b.n	516a <_ZN9RFService9RXHandlerEv+0x52>
			delete msg;
    5378:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    537a:	980e      	ldr	r0, [sp, #56]	; 0x38
    537c:	681b      	ldr	r3, [r3, #0]
    537e:	689b      	ldr	r3, [r3, #8]
    5380:	4798      	blx	r3
    5382:	e6f2      	b.n	516a <_ZN9RFService9RXHandlerEv+0x52>
    5384:	0000db5c 	.word	0x0000db5c

00005388 <_ZN9RFService9TXHandlerEv>:
	Telegram *msg = NULL;
    5388:	2300      	movs	r3, #0
RFProtocol::RFProtocolStates_t RFService::TXHandler(){
    538a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	Telegram *msg = NULL;
    538c:	9301      	str	r3, [sp, #4]
	if(RFProtocolStatus.Sleep == true){
    538e:	234a      	movs	r3, #74	; 0x4a
    5390:	33ff      	adds	r3, #255	; 0xff
    5392:	5cc4      	ldrb	r4, [r0, r3]
RFProtocol::RFProtocolStates_t RFService::TXHandler(){
    5394:	0005      	movs	r5, r0
	if(RFProtocolStatus.Sleep == true){
    5396:	2c00      	cmp	r4, #0
    5398:	d002      	beq.n	53a0 <_ZN9RFService9TXHandlerEv+0x18>
		return _nextState;
    539a:	2400      	movs	r4, #0
}
    539c:	0020      	movs	r0, r4
    539e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	if(txFIFO.pop(msg)){
    53a0:	a901      	add	r1, sp, #4
    53a2:	3084      	adds	r0, #132	; 0x84
    53a4:	f7ff fd01 	bl	4daa <_ZN7RingBufIP8TelegramLj30EhtE3popERS1_>
    53a8:	2800      	cmp	r0, #0
    53aa:	d0f6      	beq.n	539a <_ZN9RFService9TXHandlerEv+0x12>
		if(msg!=NULL){
    53ac:	9801      	ldr	r0, [sp, #4]
    53ae:	2800      	cmp	r0, #0
    53b0:	d0f3      	beq.n	539a <_ZN9RFService9TXHandlerEv+0x12>
			switch(msg->GetRadioMSG_ID())
    53b2:	f000 f8b7 	bl	5524 <_ZN8Telegram14GetRadioMSG_IDEv>
    53b6:	2800      	cmp	r0, #0
    53b8:	d003      	beq.n	53c2 <_ZN9RFService9TXHandlerEv+0x3a>
    53ba:	2802      	cmp	r0, #2
    53bc:	d903      	bls.n	53c6 <_ZN9RFService9TXHandlerEv+0x3e>
    53be:	2803      	cmp	r0, #3
    53c0:	d00c      	beq.n	53dc <_ZN9RFService9TXHandlerEv+0x54>
	RFProtocolStates_t _nextState = RX_IDLE;
    53c2:	2400      	movs	r4, #0
    53c4:	e01e      	b.n	5404 <_ZN9RFService9TXHandlerEv+0x7c>
				Radio->SendRadioData(msg->GetRadioData());
    53c6:	35fc      	adds	r5, #252	; 0xfc
    53c8:	6d2c      	ldr	r4, [r5, #80]	; 0x50
						Radio->SendRadioData(msg->GetRadioData());
    53ca:	9801      	ldr	r0, [sp, #4]
    53cc:	f000 f8cf 	bl	556e <_ZN8Telegram12GetRadioDataEv>
    53d0:	0001      	movs	r1, r0
    53d2:	0020      	movs	r0, r4
    53d4:	f7fd f843 	bl	245e <_ZN11E28_2G4M20S13SendRadioDataEP11RadioData_t>
						_nextState=TX_WITHOUT_REPLY;
    53d8:	2402      	movs	r4, #2
					break;
    53da:	e013      	b.n	5404 <_ZN9RFService9TXHandlerEv+0x7c>
				switch(((Telegram_MSG_3 *)msg)->GetCommand())
    53dc:	9801      	ldr	r0, [sp, #4]
    53de:	f000 fc1d 	bl	5c1c <_ZN14Telegram_MSG_310GetCommandEv>
    53e2:	3801      	subs	r0, #1
    53e4:	2803      	cmp	r0, #3
    53e6:	d80d      	bhi.n	5404 <_ZN9RFService9TXHandlerEv+0x7c>
    53e8:	35fc      	adds	r5, #252	; 0xfc
						Radio->SendRadioData(msg->GetRadioData());
    53ea:	6d2c      	ldr	r4, [r5, #80]	; 0x50
				switch(((Telegram_MSG_3 *)msg)->GetCommand())
    53ec:	f003 f84e 	bl	848c <__gnu_thumb1_case_sqi>
    53f0:	eded0202 	.word	0xeded0202
						Radio->SendRadioData(msg->GetRadioData());
    53f4:	9801      	ldr	r0, [sp, #4]
    53f6:	f000 f8ba 	bl	556e <_ZN8Telegram12GetRadioDataEv>
    53fa:	0001      	movs	r1, r0
    53fc:	0020      	movs	r0, r4
    53fe:	f7fd f82e 	bl	245e <_ZN11E28_2G4M20S13SendRadioDataEP11RadioData_t>
						_nextState=TX_WITH_REPLY;
    5402:	2403      	movs	r4, #3
			delete msg;
    5404:	9801      	ldr	r0, [sp, #4]
    5406:	2800      	cmp	r0, #0
    5408:	d0c8      	beq.n	539c <_ZN9RFService9TXHandlerEv+0x14>
    540a:	6803      	ldr	r3, [r0, #0]
    540c:	689b      	ldr	r3, [r3, #8]
    540e:	4798      	blx	r3
    5410:	e7c4      	b.n	539c <_ZN9RFService9TXHandlerEv+0x14>
	...

00005414 <_ZN8TelegramC1E13ProtocolMSG_tmmmm>:
 
 
 Telegram::Telegram(ProtocolMSG_t _MSG_ID,  uint32_t _Unique_ID_1, uint32_t _Unique_ID_2, uint32_t _Unique_ID_3, uint32_t _Unique_ID_4)
 {
 	// header:
 	this->MSG_ID = _MSG_ID;
    5414:	7101      	strb	r1, [r0, #4]
 	this->Unique_ID_2 = _Unique_ID_2;
 	this->Unique_ID_3 = _Unique_ID_3;
 	this->Unique_ID_4 = _Unique_ID_4;
	
	//Telegram MSG
	TelegramData.payload[0] = (uint8_t)MSG_ID;
    5416:	7601      	strb	r1, [r0, #24]

	// Unique_ID_1 transformed to 32bits.
	TelegramData.payload[1] = (uint8_t)((Unique_ID_1 >> 24) & 0xFF);
    5418:	0e11      	lsrs	r1, r2, #24
    541a:	7641      	strb	r1, [r0, #25]
	TelegramData.payload[2] = (uint8_t)((Unique_ID_1 >> 16) & 0xFF);
    541c:	0c11      	lsrs	r1, r2, #16
 	this->Unique_ID_1 = _Unique_ID_1;
    541e:	6082      	str	r2, [r0, #8]
	TelegramData.payload[2] = (uint8_t)((Unique_ID_1 >> 16) & 0xFF);
    5420:	7681      	strb	r1, [r0, #26]
	TelegramData.payload[3] = (uint8_t)((Unique_ID_1 >>  8) & 0xFF);
	TelegramData.payload[4] = (uint8_t)(Unique_ID_1 & 0xFF);
    5422:	7702      	strb	r2, [r0, #28]
	TelegramData.payload[3] = (uint8_t)((Unique_ID_1 >>  8) & 0xFF);
    5424:	0a11      	lsrs	r1, r2, #8

	// Unique_ID_1 transformed to 32bits.
	TelegramData.payload[5] = (uint8_t)((Unique_ID_2 >> 24) & 0xFF);
    5426:	0e1a      	lsrs	r2, r3, #24
 Telegram::Telegram(ProtocolMSG_t _MSG_ID,  uint32_t _Unique_ID_1, uint32_t _Unique_ID_2, uint32_t _Unique_ID_3, uint32_t _Unique_ID_4)
    5428:	b570      	push	{r4, r5, r6, lr}
	TelegramData.payload[5] = (uint8_t)((Unique_ID_2 >> 24) & 0xFF);
    542a:	7742      	strb	r2, [r0, #29]
	TelegramData.payload[6] = (uint8_t)((Unique_ID_2 >> 16) & 0xFF);
    542c:	0c1a      	lsrs	r2, r3, #16
    542e:	7782      	strb	r2, [r0, #30]
 Telegram::Telegram(ProtocolMSG_t _MSG_ID,  uint32_t _Unique_ID_1, uint32_t _Unique_ID_2, uint32_t _Unique_ID_3, uint32_t _Unique_ID_4)
    5430:	9d04      	ldr	r5, [sp, #16]
    5432:	9c05      	ldr	r4, [sp, #20]
    5434:	4e10      	ldr	r6, [pc, #64]	; (5478 <_ZN8TelegramC1E13ProtocolMSG_tmmmm+0x64>)
	TelegramData.payload[7] = (uint8_t)((Unique_ID_2 >>  8) & 0xFF);
    5436:	0a1a      	lsrs	r2, r3, #8
    5438:	77c2      	strb	r2, [r0, #31]
	TelegramData.payload[8] = (uint8_t)(Unique_ID_2 & 0xFF);
    543a:	1c42      	adds	r2, r0, #1
 Telegram::Telegram(ProtocolMSG_t _MSG_ID,  uint32_t _Unique_ID_1, uint32_t _Unique_ID_2, uint32_t _Unique_ID_3, uint32_t _Unique_ID_4)
    543c:	6006      	str	r6, [r0, #0]
 	this->Unique_ID_2 = _Unique_ID_2;
    543e:	60c3      	str	r3, [r0, #12]
 	this->Unique_ID_3 = _Unique_ID_3;
    5440:	6105      	str	r5, [r0, #16]
 	this->Unique_ID_4 = _Unique_ID_4;
    5442:	6144      	str	r4, [r0, #20]
	TelegramData.payload[3] = (uint8_t)((Unique_ID_1 >>  8) & 0xFF);
    5444:	76c1      	strb	r1, [r0, #27]
	TelegramData.payload[8] = (uint8_t)(Unique_ID_2 & 0xFF);
    5446:	77d3      	strb	r3, [r2, #31]

	// Unique_ID_1 transformed to 32bits.
	TelegramData.payload[9] = (uint8_t)((Unique_ID_3 >> 24) & 0xFF);
    5448:	0e2a      	lsrs	r2, r5, #24
    544a:	1c83      	adds	r3, r0, #2
    544c:	77da      	strb	r2, [r3, #31]
	TelegramData.payload[10] = (uint8_t)((Unique_ID_3 >> 16) & 0xFF);
    544e:	0c2a      	lsrs	r2, r5, #16
    5450:	1cc3      	adds	r3, r0, #3
    5452:	77da      	strb	r2, [r3, #31]
	TelegramData.payload[11] = (uint8_t)((Unique_ID_3 >>  8) & 0xFF);
    5454:	0a2a      	lsrs	r2, r5, #8
    5456:	1d03      	adds	r3, r0, #4
    5458:	77da      	strb	r2, [r3, #31]
	TelegramData.payload[12] = (uint8_t)(Unique_ID_3 & 0xFF);
    545a:	1d43      	adds	r3, r0, #5
    545c:	77dd      	strb	r5, [r3, #31]

	// Unique_ID_1 transformed to 32bits.
	TelegramData.payload[13] = (uint8_t)((Unique_ID_4 >> 24) & 0xFF);
    545e:	0e22      	lsrs	r2, r4, #24
    5460:	1d83      	adds	r3, r0, #6
    5462:	77da      	strb	r2, [r3, #31]
	TelegramData.payload[14] = (uint8_t)((Unique_ID_4 >> 16) & 0xFF);
    5464:	0c22      	lsrs	r2, r4, #16
    5466:	1dc3      	adds	r3, r0, #7
    5468:	77da      	strb	r2, [r3, #31]
	TelegramData.payload[15] = (uint8_t)((Unique_ID_4 >>  8) & 0xFF);
    546a:	0a22      	lsrs	r2, r4, #8
    546c:	3301      	adds	r3, #1
    546e:	77da      	strb	r2, [r3, #31]
	TelegramData.payload[16] = (uint8_t)(Unique_ID_4 & 0xFF);	
    5470:	3320      	adds	r3, #32
    5472:	701c      	strb	r4, [r3, #0]
}
    5474:	bd70      	pop	{r4, r5, r6, pc}
    5476:	46c0      	nop			; (mov r8, r8)
    5478:	0000db34 	.word	0x0000db34

0000547c <_ZN8TelegramC1EP11RadioData_t>:
 

 Telegram::Telegram(RadioData_t *data)
    547c:	b570      	push	{r4, r5, r6, lr}
 {
	memcpy(&TelegramData.payload,data->payload,data->payloadLength);
    547e:	000e      	movs	r6, r1
 Telegram::Telegram(RadioData_t *data)
    5480:	0004      	movs	r4, r0
    5482:	4b27      	ldr	r3, [pc, #156]	; (5520 <_ZN8TelegramC1EP11RadioData_t+0xa4>)
	memcpy(&TelegramData.payload,data->payload,data->payloadLength);
    5484:	363c      	adds	r6, #60	; 0x3c
 Telegram::Telegram(RadioData_t *data)
    5486:	6003      	str	r3, [r0, #0]
	memcpy(&TelegramData.payload,data->payload,data->payloadLength);
    5488:	7832      	ldrb	r2, [r6, #0]
    548a:	3018      	adds	r0, #24
 Telegram::Telegram(RadioData_t *data)
    548c:	000d      	movs	r5, r1
	memcpy(&TelegramData.payload,data->payload,data->payloadLength);
    548e:	f006 f82d 	bl	b4ec <memcpy>
	TelegramData.payloadLength = data->payloadLength;
    5492:	0023      	movs	r3, r4
    5494:	7832      	ldrb	r2, [r6, #0]
    5496:	3354      	adds	r3, #84	; 0x54
    5498:	701a      	strb	r2, [r3, #0]
	TelegramData.rssi = data->rssi;
    549a:	223d      	movs	r2, #61	; 0x3d
    549c:	0023      	movs	r3, r4
    549e:	56aa      	ldrsb	r2, [r5, r2]
    54a0:	3355      	adds	r3, #85	; 0x55
    54a2:	701a      	strb	r2, [r3, #0]
	TelegramData.snr = data->snr;
    54a4:	223e      	movs	r2, #62	; 0x3e
    54a6:	56aa      	ldrsb	r2, [r5, r2]
	MSG_ID = (ProtocolMSG_t)TelegramData.payload[0];
	Unique_ID_1 = (uint32_t)((TelegramData.payload[1] << 24) + (TelegramData.payload[2] << 16) + (TelegramData.payload[3] << 8) + TelegramData.payload[4]);
	Unique_ID_2 = (uint32_t)((TelegramData.payload[5] << 24) + (TelegramData.payload[6] << 16) + (TelegramData.payload[7] << 8) + TelegramData.payload[8]);
	Unique_ID_3 = (uint32_t)((TelegramData.payload[9] << 24) + (TelegramData.payload[10] << 16) + (TelegramData.payload[11] << 8) + TelegramData.payload[12]);
	Unique_ID_4 = (uint32_t)((TelegramData.payload[13] << 24) + (TelegramData.payload[14] << 16) + (TelegramData.payload[15] << 8) + TelegramData.payload[16]);	
 }
    54a8:	0020      	movs	r0, r4
	TelegramData.snr = data->snr;
    54aa:	705a      	strb	r2, [r3, #1]
	MSG_ID = (ProtocolMSG_t)TelegramData.payload[0];
    54ac:	7e23      	ldrb	r3, [r4, #24]
	Unique_ID_1 = (uint32_t)((TelegramData.payload[1] << 24) + (TelegramData.payload[2] << 16) + (TelegramData.payload[3] << 8) + TelegramData.payload[4]);
    54ae:	7ea2      	ldrb	r2, [r4, #26]
	MSG_ID = (ProtocolMSG_t)TelegramData.payload[0];
    54b0:	7123      	strb	r3, [r4, #4]
	Unique_ID_1 = (uint32_t)((TelegramData.payload[1] << 24) + (TelegramData.payload[2] << 16) + (TelegramData.payload[3] << 8) + TelegramData.payload[4]);
    54b2:	7e63      	ldrb	r3, [r4, #25]
    54b4:	0412      	lsls	r2, r2, #16
    54b6:	061b      	lsls	r3, r3, #24
    54b8:	189b      	adds	r3, r3, r2
    54ba:	7ee2      	ldrb	r2, [r4, #27]
    54bc:	0212      	lsls	r2, r2, #8
    54be:	189b      	adds	r3, r3, r2
    54c0:	7f22      	ldrb	r2, [r4, #28]
    54c2:	189b      	adds	r3, r3, r2
    54c4:	60a3      	str	r3, [r4, #8]
	Unique_ID_2 = (uint32_t)((TelegramData.payload[5] << 24) + (TelegramData.payload[6] << 16) + (TelegramData.payload[7] << 8) + TelegramData.payload[8]);
    54c6:	7fa2      	ldrb	r2, [r4, #30]
    54c8:	7f63      	ldrb	r3, [r4, #29]
    54ca:	0412      	lsls	r2, r2, #16
    54cc:	061b      	lsls	r3, r3, #24
    54ce:	189b      	adds	r3, r3, r2
    54d0:	7fe2      	ldrb	r2, [r4, #31]
    54d2:	0212      	lsls	r2, r2, #8
    54d4:	189b      	adds	r3, r3, r2
    54d6:	1c62      	adds	r2, r4, #1
    54d8:	7fd2      	ldrb	r2, [r2, #31]
    54da:	189b      	adds	r3, r3, r2
    54dc:	60e3      	str	r3, [r4, #12]
	Unique_ID_3 = (uint32_t)((TelegramData.payload[9] << 24) + (TelegramData.payload[10] << 16) + (TelegramData.payload[11] << 8) + TelegramData.payload[12]);
    54de:	1ce2      	adds	r2, r4, #3
    54e0:	1ca3      	adds	r3, r4, #2
    54e2:	7fdb      	ldrb	r3, [r3, #31]
    54e4:	7fd2      	ldrb	r2, [r2, #31]
    54e6:	061b      	lsls	r3, r3, #24
    54e8:	0412      	lsls	r2, r2, #16
    54ea:	189b      	adds	r3, r3, r2
    54ec:	1d22      	adds	r2, r4, #4
    54ee:	7fd2      	ldrb	r2, [r2, #31]
    54f0:	0212      	lsls	r2, r2, #8
    54f2:	189b      	adds	r3, r3, r2
    54f4:	1d62      	adds	r2, r4, #5
    54f6:	7fd2      	ldrb	r2, [r2, #31]
    54f8:	189b      	adds	r3, r3, r2
    54fa:	6123      	str	r3, [r4, #16]
	Unique_ID_4 = (uint32_t)((TelegramData.payload[13] << 24) + (TelegramData.payload[14] << 16) + (TelegramData.payload[15] << 8) + TelegramData.payload[16]);	
    54fc:	1de2      	adds	r2, r4, #7
    54fe:	1da3      	adds	r3, r4, #6
    5500:	7fdb      	ldrb	r3, [r3, #31]
    5502:	7fd2      	ldrb	r2, [r2, #31]
    5504:	061b      	lsls	r3, r3, #24
    5506:	0412      	lsls	r2, r2, #16
    5508:	189b      	adds	r3, r3, r2
    550a:	0022      	movs	r2, r4
    550c:	3208      	adds	r2, #8
    550e:	7fd2      	ldrb	r2, [r2, #31]
    5510:	0212      	lsls	r2, r2, #8
    5512:	189b      	adds	r3, r3, r2
    5514:	0022      	movs	r2, r4
    5516:	3228      	adds	r2, #40	; 0x28
    5518:	7812      	ldrb	r2, [r2, #0]
    551a:	189b      	adds	r3, r3, r2
    551c:	6163      	str	r3, [r4, #20]
 }
    551e:	bd70      	pop	{r4, r5, r6, pc}
    5520:	0000db34 	.word	0x0000db34

00005524 <_ZN8Telegram14GetRadioMSG_IDEv>:
 
ProtocolMSG_t Telegram::GetRadioMSG_ID(){
	return MSG_ID;
    5524:	7900      	ldrb	r0, [r0, #4]
}
    5526:	4770      	bx	lr

00005528 <_ZN8Telegram12GetUniqueID1Ev>:
 

uint32_t Telegram::GetUniqueID1(void){
	return Unique_ID_1;
    5528:	6880      	ldr	r0, [r0, #8]
}
    552a:	4770      	bx	lr

0000552c <_ZN8Telegram12GetUniqueID2Ev>:

uint32_t Telegram::GetUniqueID2(void){
	return Unique_ID_2;
    552c:	68c0      	ldr	r0, [r0, #12]
}
    552e:	4770      	bx	lr

00005530 <_ZN8Telegram12GetUniqueID3Ev>:

uint32_t Telegram::GetUniqueID3(void){
	return Unique_ID_3;
    5530:	6900      	ldr	r0, [r0, #16]
}
    5532:	4770      	bx	lr

00005534 <_ZN8Telegram12GetUniqueID4Ev>:

uint32_t Telegram::GetUniqueID4(void){
	return Unique_ID_4;
    5534:	6940      	ldr	r0, [r0, #20]
}
    5536:	4770      	bx	lr

00005538 <_ZN8Telegram7GetRSSIEv>:
  
int8_t Telegram::GetRSSI(){
	return TelegramData.rssi;
    5538:	3055      	adds	r0, #85	; 0x55
    553a:	7800      	ldrb	r0, [r0, #0]
    553c:	b240      	sxtb	r0, r0
}
    553e:	4770      	bx	lr

00005540 <_ZN8Telegram6GetSNREv>:

int8_t Telegram::GetSNR(){
	return TelegramData.snr;
    5540:	3056      	adds	r0, #86	; 0x56
    5542:	7800      	ldrb	r0, [r0, #0]
    5544:	b240      	sxtb	r0, r0
}
    5546:	4770      	bx	lr

00005548 <_ZN8Telegram21TelegramMatchUniqueIDEmmmm>:


 bool Telegram::TelegramMatchUniqueID(uint32_t _destinationID_1, uint32_t _destinationID_2, uint32_t _destinationID_3, uint32_t _destinationID_4){
    5548:	b530      	push	{r4, r5, lr}
    554a:	0004      	movs	r4, r0
	 if(_destinationID_1 == Unique_ID_1){
    554c:	68a5      	ldr	r5, [r4, #8]
					return true;
				}
			}
		 }
	 }
	 return false;
    554e:	2000      	movs	r0, #0
	 if(_destinationID_1 == Unique_ID_1){
    5550:	428d      	cmp	r5, r1
    5552:	d10b      	bne.n	556c <_ZN8Telegram21TelegramMatchUniqueIDEmmmm+0x24>
		 if(_destinationID_2 == Unique_ID_2){
    5554:	68e1      	ldr	r1, [r4, #12]
    5556:	4291      	cmp	r1, r2
    5558:	d108      	bne.n	556c <_ZN8Telegram21TelegramMatchUniqueIDEmmmm+0x24>
			if(_destinationID_3 == Unique_ID_3){
    555a:	6922      	ldr	r2, [r4, #16]
    555c:	429a      	cmp	r2, r3
    555e:	d105      	bne.n	556c <_ZN8Telegram21TelegramMatchUniqueIDEmmmm+0x24>
				if(_destinationID_4 == Unique_ID_4){
    5560:	9b03      	ldr	r3, [sp, #12]
    5562:	6960      	ldr	r0, [r4, #20]
    5564:	1ac0      	subs	r0, r0, r3
    5566:	4242      	negs	r2, r0
    5568:	4142      	adcs	r2, r0
    556a:	b2d0      	uxtb	r0, r2
 }
    556c:	bd30      	pop	{r4, r5, pc}

0000556e <_ZN8Telegram12GetRadioDataEv>:
  
RadioData_t * Telegram::GetRadioData(){
	return &TelegramData;
    556e:	3018      	adds	r0, #24
    5570:	4770      	bx	lr

00005572 <_ZN14Telegram_MSG_1D1Ev>:

	// Constructor to create messages from Radio data struct.
	Telegram_MSG_1(RadioData_t *radioData);

	
	virtual	~Telegram_MSG_1(){};	// destructor.
    5572:	4770      	bx	lr

00005574 <_ZN14Telegram_MSG_118SerialPrintMessageEv>:
	SerialAUX->println("Firmware Version      :" + String(this->FirmwareVersion));
	SerialAUX->println("PCB Version           :" + String(this->PCBVersion));
	SerialAUX->println("# of Beacons to relay :" + String(this->NumberOfBeaconsToRelay));
	SerialAUX->println("----------------------------------------------------------------");
	SerialAUX->println("");*/
}
    5574:	4770      	bx	lr

00005576 <_ZN14Telegram_MSG_1D0Ev>:
    5576:	b510      	push	{r4, lr}
    5578:	0004      	movs	r4, r0
    557a:	f000 fda5 	bl	60c8 <_ZdlPv>
    557e:	0020      	movs	r0, r4
    5580:	bd10      	pop	{r4, pc}
	...

00005584 <_ZN14Telegram_MSG_1C1Emmmmmmmhhbffhffhh>:
Telegram_MSG_1::Telegram_MSG_1(uint32_t _Unique_ID_1, uint32_t _Unique_ID_2, uint32_t _Unique_ID_3, uint32_t _Unique_ID_4, 
    5584:	b5f0      	push	{r4, r5, r6, r7, lr}
    5586:	b087      	sub	sp, #28
    5588:	0004      	movs	r4, r0
    558a:	a810      	add	r0, sp, #64	; 0x40
    558c:	7800      	ldrb	r0, [r0, #0]
    558e:	ae04      	add	r6, sp, #16
    5590:	9003      	str	r0, [sp, #12]
    5592:	a811      	add	r0, sp, #68	; 0x44
    5594:	7800      	ldrb	r0, [r0, #0]
    5596:	9004      	str	r0, [sp, #16]
    5598:	a812      	add	r0, sp, #72	; 0x48
    559a:	7805      	ldrb	r5, [r0, #0]
    559c:	2025      	movs	r0, #37	; 0x25
    559e:	1980      	adds	r0, r0, r6
    55a0:	7fc7      	ldrb	r7, [r0, #31]
    55a2:	a818      	add	r0, sp, #96	; 0x60
    55a4:	7800      	ldrb	r0, [r0, #0]
    55a6:	9005      	str	r0, [sp, #20]
    55a8:	a819      	add	r0, sp, #100	; 0x64
    55aa:	7806      	ldrb	r6, [r0, #0]
							   : Telegram(MSG_Beacon_Broadcast, _Unique_ID_1, _Unique_ID_2, _Unique_ID_3, _Unique_ID_4)
    55ac:	980c      	ldr	r0, [sp, #48]	; 0x30
    55ae:	9300      	str	r3, [sp, #0]
    55b0:	9001      	str	r0, [sp, #4]
    55b2:	0013      	movs	r3, r2
    55b4:	0020      	movs	r0, r4
    55b6:	000a      	movs	r2, r1
    55b8:	2101      	movs	r1, #1
    55ba:	f7ff ff2b 	bl	5414 <_ZN8TelegramC1E13ProtocolMSG_tmmmm>
    55be:	4b59      	ldr	r3, [pc, #356]	; (5724 <_ZN14Telegram_MSG_1C1Emmmmmmmhhbffhffhh+0x1a0>)
	this->NumberOfSat = _NumberOfSat;
    55c0:	466a      	mov	r2, sp
							   : Telegram(MSG_Beacon_Broadcast, _Unique_ID_1, _Unique_ID_2, _Unique_ID_3, _Unique_ID_4)
    55c2:	3308      	adds	r3, #8
    55c4:	6023      	str	r3, [r4, #0]
	this->UTCTime = _UTCTime;
    55c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	this->NumberOfSat = _NumberOfSat;
    55c8:	7b12      	ldrb	r2, [r2, #12]
	this->UTCTime = _UTCTime;
    55ca:	65a3      	str	r3, [r4, #88]	; 0x58
	this->Latitude = _Lattitude;
    55cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	TelegramData.payload[HEADER_SIZE+2] = (uint8_t)(UTCTime & 0xFF);
    55ce:	2124      	movs	r1, #36	; 0x24
	this->Latitude = _Lattitude;
    55d0:	65e3      	str	r3, [r4, #92]	; 0x5c
	this->Longitude = _Longitude;			
    55d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    55d4:	6623      	str	r3, [r4, #96]	; 0x60
	this->NumberOfSat = _NumberOfSat;
    55d6:	0023      	movs	r3, r4
    55d8:	3364      	adds	r3, #100	; 0x64
    55da:	701a      	strb	r2, [r3, #0]
	this->Fix = _Fix;
    55dc:	466a      	mov	r2, sp
    55de:	7c12      	ldrb	r2, [r2, #16]
	this->RunningOnBattery = _RunningOnBattery;
    55e0:	709d      	strb	r5, [r3, #2]
	this->Fix = _Fix;
    55e2:	705a      	strb	r2, [r3, #1]
	this->Pressure = _Pressure;
    55e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	this->PCBVersion = _PCBVersion;
    55e6:	466a      	mov	r2, sp
	this->Pressure = _Pressure;
    55e8:	66a3      	str	r3, [r4, #104]	; 0x68
	this->GroundSpeed = _GroundSpeed;
    55ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
	this->PCBVersion = _PCBVersion;
    55ec:	7d12      	ldrb	r2, [r2, #20]
	this->GroundSpeed = _GroundSpeed;
    55ee:	66e3      	str	r3, [r4, #108]	; 0x6c
	this->SecondsSinceLastGSContact = _SecondsSinceLastGSContact;
    55f0:	0023      	movs	r3, r4
    55f2:	3370      	adds	r3, #112	; 0x70
    55f4:	701f      	strb	r7, [r3, #0]
	this->BatteryVoltage = _BatteryVoltage;
    55f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    55f8:	6763      	str	r3, [r4, #116]	; 0x74
	this->FirmwareVersion = _FirmwareVersion;
    55fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    55fc:	67a3      	str	r3, [r4, #120]	; 0x78
	this->PCBVersion = _PCBVersion;
    55fe:	0023      	movs	r3, r4
    5600:	337c      	adds	r3, #124	; 0x7c
    5602:	701a      	strb	r2, [r3, #0]
	this->NumberOfBeaconsToRelay = _NumberOfBeaconsToRelay;	
    5604:	705e      	strb	r6, [r3, #1]
	TelegramData.payload[HEADER_SIZE+0] = (uint8_t)((UTCTime >> 16) & 0xFF);
    5606:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5608:	0c1a      	lsrs	r2, r3, #16
    560a:	0023      	movs	r3, r4
    560c:	3329      	adds	r3, #41	; 0x29
    560e:	701a      	strb	r2, [r3, #0]
	TelegramData.payload[HEADER_SIZE+1] = (uint8_t)((UTCTime >> 8) & 0xFF);
    5610:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5612:	0a1a      	lsrs	r2, r3, #8
    5614:	0023      	movs	r3, r4
    5616:	332a      	adds	r3, #42	; 0x2a
    5618:	701a      	strb	r2, [r3, #0]
	TelegramData.payload[HEADER_SIZE+2] = (uint8_t)(UTCTime & 0xFF);
    561a:	aa04      	add	r2, sp, #16
    561c:	1852      	adds	r2, r2, r1
    561e:	7812      	ldrb	r2, [r2, #0]
	TelegramData.payload[HEADER_SIZE+6] = (uint8_t)(Latitude & 0xFF);
    5620:	3104      	adds	r1, #4
	TelegramData.payload[HEADER_SIZE+2] = (uint8_t)(UTCTime & 0xFF);
    5622:	705a      	strb	r2, [r3, #1]
	TelegramData.payload[HEADER_SIZE+3] = (uint8_t)((Latitude >> 24) & 0xFF);
    5624:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5626:	0e1a      	lsrs	r2, r3, #24
    5628:	0023      	movs	r3, r4
    562a:	332c      	adds	r3, #44	; 0x2c
    562c:	701a      	strb	r2, [r3, #0]
	TelegramData.payload[HEADER_SIZE+4] = (uint8_t)((Latitude >> 16) & 0xFF);
    562e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5630:	141a      	asrs	r2, r3, #16
    5632:	0023      	movs	r3, r4
    5634:	332d      	adds	r3, #45	; 0x2d
    5636:	701a      	strb	r2, [r3, #0]
	TelegramData.payload[HEADER_SIZE+5] = (uint8_t)((Latitude >>  8) & 0xFF);
    5638:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    563a:	121a      	asrs	r2, r3, #8
    563c:	0023      	movs	r3, r4
    563e:	332e      	adds	r3, #46	; 0x2e
    5640:	701a      	strb	r2, [r3, #0]
	TelegramData.payload[HEADER_SIZE+6] = (uint8_t)(Latitude & 0xFF);
    5642:	aa04      	add	r2, sp, #16
    5644:	1852      	adds	r2, r2, r1
    5646:	7812      	ldrb	r2, [r2, #0]
	TelegramData.payload[HEADER_SIZE+10] = (uint8_t)(Longitude & 0xFF);
    5648:	3104      	adds	r1, #4
	TelegramData.payload[HEADER_SIZE+6] = (uint8_t)(Latitude & 0xFF);
    564a:	705a      	strb	r2, [r3, #1]
	TelegramData.payload[HEADER_SIZE+7]  = (uint8_t)((Longitude >> 24) & 0xFF);
    564c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    564e:	0e1a      	lsrs	r2, r3, #24
    5650:	0023      	movs	r3, r4
    5652:	3330      	adds	r3, #48	; 0x30
    5654:	701a      	strb	r2, [r3, #0]
	TelegramData.payload[HEADER_SIZE+8]  = (uint8_t)((Longitude >> 16) & 0xFF);
    5656:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5658:	141a      	asrs	r2, r3, #16
    565a:	0023      	movs	r3, r4
    565c:	3331      	adds	r3, #49	; 0x31
    565e:	701a      	strb	r2, [r3, #0]
	TelegramData.payload[HEADER_SIZE+9]  = (uint8_t)((Longitude >>  8) & 0xFF);
    5660:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5662:	121a      	asrs	r2, r3, #8
    5664:	0023      	movs	r3, r4
    5666:	3332      	adds	r3, #50	; 0x32
    5668:	701a      	strb	r2, [r3, #0]
	TelegramData.payload[HEADER_SIZE+10] = (uint8_t)(Longitude & 0xFF);
    566a:	aa04      	add	r2, sp, #16
    566c:	1852      	adds	r2, r2, r1
    566e:	7812      	ldrb	r2, [r2, #0]
	temp_8 = NumberOfSat & 0b00011111;
    5670:	9903      	ldr	r1, [sp, #12]
	TelegramData.payload[HEADER_SIZE+10] = (uint8_t)(Longitude & 0xFF);
    5672:	705a      	strb	r2, [r3, #1]
	temp_8 |= ((Fix & 0b00000011) << 5);
    5674:	2260      	movs	r2, #96	; 0x60
    5676:	9b04      	ldr	r3, [sp, #16]
    5678:	015b      	lsls	r3, r3, #5
    567a:	4013      	ands	r3, r2
	temp_8 = NumberOfSat & 0b00011111;
    567c:	3a41      	subs	r2, #65	; 0x41
    567e:	400a      	ands	r2, r1
	temp_8 |= ((Fix & 0b00000011) << 5);
    5680:	4313      	orrs	r3, r2
	if(RunningOnBattery)
    5682:	2d00      	cmp	r5, #0
    5684:	d001      	beq.n	568a <_ZN14Telegram_MSG_1C1Emmmmmmmhhbffhffhh+0x106>
	temp_8 |= 0b10000000;
    5686:	2280      	movs	r2, #128	; 0x80
    5688:	4313      	orrs	r3, r2
	TelegramData.payload[HEADER_SIZE+11] = temp_8;
    568a:	0022      	movs	r2, r4
    568c:	3234      	adds	r2, #52	; 0x34
    568e:	7013      	strb	r3, [r2, #0]
	temp_16=(uint16_t)(Pressure);
    5690:	9813      	ldr	r0, [sp, #76]	; 0x4c
    5692:	f003 f907 	bl	88a4 <__aeabi_f2uiz>
	TelegramData.payload[HEADER_SIZE+12]  = (uint8_t)((temp_16 >>  8) & 0xFF);
    5696:	0023      	movs	r3, r4
	temp_16=(uint16_t)(Pressure);
    5698:	b280      	uxth	r0, r0
	TelegramData.payload[HEADER_SIZE+12]  = (uint8_t)((temp_16 >>  8) & 0xFF);
    569a:	0a02      	lsrs	r2, r0, #8
    569c:	3335      	adds	r3, #53	; 0x35
    569e:	701a      	strb	r2, [r3, #0]
	TelegramData.payload[HEADER_SIZE+13] = (uint8_t)(temp_16 & 0xFF);
    56a0:	7058      	strb	r0, [r3, #1]
	temp_16=(uint16_t)(GroundSpeed*10);
    56a2:	4921      	ldr	r1, [pc, #132]	; (5728 <_ZN14Telegram_MSG_1C1Emmmmmmmhhbffhffhh+0x1a4>)
    56a4:	9814      	ldr	r0, [sp, #80]	; 0x50
    56a6:	f003 fcb5 	bl	9014 <__aeabi_fmul>
    56aa:	f003 f8fb 	bl	88a4 <__aeabi_f2uiz>
	TelegramData.payload[HEADER_SIZE+14]  = (uint8_t)(((temp_16) >>  8) & 0xFF);
    56ae:	0023      	movs	r3, r4
	temp_16=(uint16_t)(GroundSpeed*10);
    56b0:	b280      	uxth	r0, r0
	TelegramData.payload[HEADER_SIZE+14]  = (uint8_t)(((temp_16) >>  8) & 0xFF);
    56b2:	3337      	adds	r3, #55	; 0x37
    56b4:	0a02      	lsrs	r2, r0, #8
    56b6:	701a      	strb	r2, [r3, #0]
	TelegramData.payload[HEADER_SIZE+15] = (uint8_t)((temp_16) & 0xFF);
    56b8:	7058      	strb	r0, [r3, #1]
	TelegramData.payload[HEADER_SIZE+16] = SecondsSinceLastGSContact;
    56ba:	709f      	strb	r7, [r3, #2]
	temp_8=(uint8_t)((BatteryVoltage-2.0)*100);
    56bc:	9816      	ldr	r0, [sp, #88]	; 0x58
    56be:	f005 fdc3 	bl	b248 <__aeabi_f2d>
    56c2:	2380      	movs	r3, #128	; 0x80
    56c4:	2200      	movs	r2, #0
    56c6:	05db      	lsls	r3, r3, #23
    56c8:	f005 f9da 	bl	aa80 <__aeabi_dsub>
    56cc:	2200      	movs	r2, #0
    56ce:	4b17      	ldr	r3, [pc, #92]	; (572c <_ZN14Telegram_MSG_1C1Emmmmmmmhhbffhffhh+0x1a8>)
    56d0:	f004 ff56 	bl	a580 <__aeabi_dmul>
    56d4:	f003 f8fe 	bl	88d4 <__aeabi_d2uiz>
	TelegramData.payload[HEADER_SIZE+17] = temp_8;
    56d8:	0023      	movs	r3, r4
    56da:	333a      	adds	r3, #58	; 0x3a
    56dc:	7018      	strb	r0, [r3, #0]
	temp_8 = (uint8_t)(FirmwareVersion);
    56de:	9817      	ldr	r0, [sp, #92]	; 0x5c
    56e0:	f003 f8e0 	bl	88a4 <__aeabi_f2uiz>
	TelegramData.payload[HEADER_SIZE+18] = temp_8;
    56e4:	0023      	movs	r3, r4
	temp_8 = (uint8_t)(FirmwareVersion);
    56e6:	b2c5      	uxtb	r5, r0
	TelegramData.payload[HEADER_SIZE+18] = temp_8;
    56e8:	333b      	adds	r3, #59	; 0x3b
    56ea:	701d      	strb	r5, [r3, #0]
	TelegramData.payload[HEADER_SIZE+19] = (uint8_t)((FirmwareVersion*100)-temp_8*100);
    56ec:	4910      	ldr	r1, [pc, #64]	; (5730 <_ZN14Telegram_MSG_1C1Emmmmmmmhhbffhffhh+0x1ac>)
    56ee:	9817      	ldr	r0, [sp, #92]	; 0x5c
    56f0:	f003 fc90 	bl	9014 <__aeabi_fmul>
    56f4:	1c07      	adds	r7, r0, #0
    56f6:	2064      	movs	r0, #100	; 0x64
    56f8:	4368      	muls	r0, r5
    56fa:	f003 ff67 	bl	95cc <__aeabi_i2f>
    56fe:	1c01      	adds	r1, r0, #0
    5700:	1c38      	adds	r0, r7, #0
    5702:	f003 fda7 	bl	9254 <__aeabi_fsub>
    5706:	f003 f8cd 	bl	88a4 <__aeabi_f2uiz>
	TelegramData.payload[HEADER_SIZE+20] = PCBVersion;
    570a:	466a      	mov	r2, sp
	TelegramData.payload[HEADER_SIZE+19] = (uint8_t)((FirmwareVersion*100)-temp_8*100);
    570c:	0023      	movs	r3, r4
	TelegramData.payload[HEADER_SIZE+20] = PCBVersion;
    570e:	7d12      	ldrb	r2, [r2, #20]
	TelegramData.payload[HEADER_SIZE+19] = (uint8_t)((FirmwareVersion*100)-temp_8*100);
    5710:	333c      	adds	r3, #60	; 0x3c
    5712:	7018      	strb	r0, [r3, #0]
	TelegramData.payload[HEADER_SIZE+20] = PCBVersion;
    5714:	705a      	strb	r2, [r3, #1]
}
    5716:	0020      	movs	r0, r4
	TelegramData.payloadLength = HEADER_SIZE + 21 + 1;
    5718:	2227      	movs	r2, #39	; 0x27
	TelegramData.payload[HEADER_SIZE+21] = (uint8_t)NumberOfBeaconsToRelay;
    571a:	709e      	strb	r6, [r3, #2]
	TelegramData.payloadLength = HEADER_SIZE + 21 + 1;
    571c:	761a      	strb	r2, [r3, #24]
}
    571e:	b007      	add	sp, #28
    5720:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5722:	46c0      	nop			; (mov r8, r8)
    5724:	0000db40 	.word	0x0000db40
    5728:	41200000 	.word	0x41200000
    572c:	40590000 	.word	0x40590000
    5730:	42c80000 	.word	0x42c80000

00005734 <_ZN14Telegram_MSG_1C1EP11RadioData_t>:
Telegram_MSG_1::Telegram_MSG_1(RadioData_t *radioData) : Telegram(radioData)
    5734:	b510      	push	{r4, lr}
    5736:	0004      	movs	r4, r0
    5738:	f7ff fea0 	bl	547c <_ZN8TelegramC1EP11RadioData_t>
    573c:	4b47      	ldr	r3, [pc, #284]	; (585c <_ZN14Telegram_MSG_1C1EP11RadioData_t+0x128>)
    573e:	3308      	adds	r3, #8
    5740:	6023      	str	r3, [r4, #0]
	if( (TelegramData.payloadLength >= HEADER_SIZE+21+1)){
    5742:	0023      	movs	r3, r4
    5744:	3354      	adds	r3, #84	; 0x54
    5746:	781b      	ldrb	r3, [r3, #0]
    5748:	2b26      	cmp	r3, #38	; 0x26
    574a:	dc00      	bgt.n	574e <_ZN14Telegram_MSG_1C1EP11RadioData_t+0x1a>
    574c:	e083      	b.n	5856 <_ZN14Telegram_MSG_1C1EP11RadioData_t+0x122>
		UTCTime =   (uint32_t)((TelegramData.payload[HEADER_SIZE+0] << 16) + (TelegramData.payload[HEADER_SIZE+1] << 8) + TelegramData.payload[HEADER_SIZE+2]);
    574e:	0023      	movs	r3, r4
    5750:	0022      	movs	r2, r4
    5752:	3329      	adds	r3, #41	; 0x29
    5754:	322a      	adds	r2, #42	; 0x2a
    5756:	781b      	ldrb	r3, [r3, #0]
    5758:	7812      	ldrb	r2, [r2, #0]
    575a:	041b      	lsls	r3, r3, #16
    575c:	0212      	lsls	r2, r2, #8
    575e:	189b      	adds	r3, r3, r2
    5760:	0022      	movs	r2, r4
    5762:	322b      	adds	r2, #43	; 0x2b
    5764:	7812      	ldrb	r2, [r2, #0]
		NumberOfSat = (uint8_t)(TelegramData.payload[HEADER_SIZE+11] & 0b00011111);
    5766:	0021      	movs	r1, r4
		UTCTime =   (uint32_t)((TelegramData.payload[HEADER_SIZE+0] << 16) + (TelegramData.payload[HEADER_SIZE+1] << 8) + TelegramData.payload[HEADER_SIZE+2]);
    5768:	189b      	adds	r3, r3, r2
    576a:	65a3      	str	r3, [r4, #88]	; 0x58
		Latitude =  (uint32_t)((TelegramData.payload[HEADER_SIZE+3] << 24) + (TelegramData.payload[HEADER_SIZE+4] << 16) + (TelegramData.payload[HEADER_SIZE+5] << 8) + TelegramData.payload[HEADER_SIZE+6]);
    576c:	0022      	movs	r2, r4
    576e:	0023      	movs	r3, r4
    5770:	322d      	adds	r2, #45	; 0x2d
    5772:	332c      	adds	r3, #44	; 0x2c
    5774:	781b      	ldrb	r3, [r3, #0]
    5776:	7812      	ldrb	r2, [r2, #0]
    5778:	061b      	lsls	r3, r3, #24
    577a:	0412      	lsls	r2, r2, #16
    577c:	189b      	adds	r3, r3, r2
    577e:	0022      	movs	r2, r4
    5780:	322e      	adds	r2, #46	; 0x2e
    5782:	7812      	ldrb	r2, [r2, #0]
		NumberOfSat = (uint8_t)(TelegramData.payload[HEADER_SIZE+11] & 0b00011111);
    5784:	3164      	adds	r1, #100	; 0x64
		Latitude =  (uint32_t)((TelegramData.payload[HEADER_SIZE+3] << 24) + (TelegramData.payload[HEADER_SIZE+4] << 16) + (TelegramData.payload[HEADER_SIZE+5] << 8) + TelegramData.payload[HEADER_SIZE+6]);
    5786:	0212      	lsls	r2, r2, #8
    5788:	189b      	adds	r3, r3, r2
    578a:	0022      	movs	r2, r4
    578c:	322f      	adds	r2, #47	; 0x2f
    578e:	7812      	ldrb	r2, [r2, #0]
    5790:	189b      	adds	r3, r3, r2
    5792:	65e3      	str	r3, [r4, #92]	; 0x5c
		Longitude = (uint32_t)((TelegramData.payload[HEADER_SIZE+7] << 24) + (TelegramData.payload[HEADER_SIZE+8] << 16) + (TelegramData.payload[HEADER_SIZE+9] << 8) + TelegramData.payload[HEADER_SIZE+10]);
    5794:	0022      	movs	r2, r4
    5796:	0023      	movs	r3, r4
    5798:	3231      	adds	r2, #49	; 0x31
    579a:	3330      	adds	r3, #48	; 0x30
    579c:	781b      	ldrb	r3, [r3, #0]
    579e:	7812      	ldrb	r2, [r2, #0]
    57a0:	061b      	lsls	r3, r3, #24
    57a2:	0412      	lsls	r2, r2, #16
    57a4:	189b      	adds	r3, r3, r2
    57a6:	0022      	movs	r2, r4
    57a8:	3232      	adds	r2, #50	; 0x32
    57aa:	7812      	ldrb	r2, [r2, #0]
    57ac:	0212      	lsls	r2, r2, #8
    57ae:	189b      	adds	r3, r3, r2
    57b0:	0022      	movs	r2, r4
    57b2:	3233      	adds	r2, #51	; 0x33
    57b4:	7812      	ldrb	r2, [r2, #0]
    57b6:	189b      	adds	r3, r3, r2
    57b8:	6623      	str	r3, [r4, #96]	; 0x60
		NumberOfSat = (uint8_t)(TelegramData.payload[HEADER_SIZE+11] & 0b00011111);
    57ba:	0023      	movs	r3, r4
    57bc:	221f      	movs	r2, #31
    57be:	3334      	adds	r3, #52	; 0x34
    57c0:	781b      	ldrb	r3, [r3, #0]
    57c2:	401a      	ands	r2, r3
    57c4:	700a      	strb	r2, [r1, #0]
		Fix			= (uint8_t)((TelegramData.payload[HEADER_SIZE+11]& 0b01100000) >> 5);
    57c6:	065a      	lsls	r2, r3, #25
    57c8:	0f92      	lsrs	r2, r2, #30
		if((TelegramData.payload[HEADER_SIZE+11] & 0b10000000)){
    57ca:	b25b      	sxtb	r3, r3
		Fix			= (uint8_t)((TelegramData.payload[HEADER_SIZE+11]& 0b01100000) >> 5);
    57cc:	704a      	strb	r2, [r1, #1]
		if((TelegramData.payload[HEADER_SIZE+11] & 0b10000000)){
    57ce:	2b00      	cmp	r3, #0
    57d0:	da03      	bge.n	57da <_ZN14Telegram_MSG_1C1EP11RadioData_t+0xa6>
			RunningOnBattery = true;
    57d2:	0023      	movs	r3, r4
    57d4:	2201      	movs	r2, #1
    57d6:	3366      	adds	r3, #102	; 0x66
    57d8:	701a      	strb	r2, [r3, #0]
		Pressure = 	(float)((TelegramData.payload[HEADER_SIZE+12] << 8) + TelegramData.payload[HEADER_SIZE+13]);
    57da:	0023      	movs	r3, r4
    57dc:	3335      	adds	r3, #53	; 0x35
    57de:	7818      	ldrb	r0, [r3, #0]
    57e0:	3301      	adds	r3, #1
    57e2:	781b      	ldrb	r3, [r3, #0]
    57e4:	0200      	lsls	r0, r0, #8
    57e6:	18c0      	adds	r0, r0, r3
    57e8:	f003 fef0 	bl	95cc <__aeabi_i2f>
		GroundSpeed = (float)((TelegramData.payload[HEADER_SIZE+14] << 8) + TelegramData.payload[HEADER_SIZE+15]);
    57ec:	0023      	movs	r3, r4
		Pressure = 	(float)((TelegramData.payload[HEADER_SIZE+12] << 8) + TelegramData.payload[HEADER_SIZE+13]);
    57ee:	66a0      	str	r0, [r4, #104]	; 0x68
		GroundSpeed = (float)((TelegramData.payload[HEADER_SIZE+14] << 8) + TelegramData.payload[HEADER_SIZE+15]);
    57f0:	3337      	adds	r3, #55	; 0x37
    57f2:	7818      	ldrb	r0, [r3, #0]
    57f4:	3301      	adds	r3, #1
    57f6:	781b      	ldrb	r3, [r3, #0]
    57f8:	0200      	lsls	r0, r0, #8
    57fa:	18c0      	adds	r0, r0, r3
    57fc:	f003 fee6 	bl	95cc <__aeabi_i2f>
		GroundSpeed = GroundSpeed / 10;
    5800:	4917      	ldr	r1, [pc, #92]	; (5860 <_ZN14Telegram_MSG_1C1EP11RadioData_t+0x12c>)
    5802:	f003 fa17 	bl	8c34 <__aeabi_fdiv>
		SecondsSinceLastGSContact = (uint8_t)TelegramData.payload[HEADER_SIZE+16];
    5806:	0023      	movs	r3, r4
		GroundSpeed = GroundSpeed / 10;
    5808:	66e0      	str	r0, [r4, #108]	; 0x6c
		SecondsSinceLastGSContact = (uint8_t)TelegramData.payload[HEADER_SIZE+16];
    580a:	3339      	adds	r3, #57	; 0x39
    580c:	781a      	ldrb	r2, [r3, #0]
    580e:	3337      	adds	r3, #55	; 0x37
    5810:	701a      	strb	r2, [r3, #0]
		BatteryVoltage  = (float)TelegramData.payload[HEADER_SIZE+17];
    5812:	3b36      	subs	r3, #54	; 0x36
    5814:	7818      	ldrb	r0, [r3, #0]
    5816:	f003 ff29 	bl	966c <__aeabi_ui2f>
		BatteryVoltage = (BatteryVoltage/100)+2.0;
    581a:	4912      	ldr	r1, [pc, #72]	; (5864 <_ZN14Telegram_MSG_1C1EP11RadioData_t+0x130>)
    581c:	f003 fa0a 	bl	8c34 <__aeabi_fdiv>
    5820:	2180      	movs	r1, #128	; 0x80
    5822:	05c9      	lsls	r1, r1, #23
    5824:	f003 f874 	bl	8910 <__aeabi_fadd>
		FirmwareVersion = (float)((TelegramData.payload[HEADER_SIZE+18] << 8) + TelegramData.payload[HEADER_SIZE+19]);
    5828:	0023      	movs	r3, r4
		BatteryVoltage = (BatteryVoltage/100)+2.0;
    582a:	6760      	str	r0, [r4, #116]	; 0x74
		FirmwareVersion = (float)((TelegramData.payload[HEADER_SIZE+18] << 8) + TelegramData.payload[HEADER_SIZE+19]);
    582c:	333b      	adds	r3, #59	; 0x3b
    582e:	7818      	ldrb	r0, [r3, #0]
    5830:	3301      	adds	r3, #1
    5832:	781b      	ldrb	r3, [r3, #0]
    5834:	0200      	lsls	r0, r0, #8
    5836:	18c0      	adds	r0, r0, r3
    5838:	f003 fec8 	bl	95cc <__aeabi_i2f>
		FirmwareVersion = FirmwareVersion / 100;
    583c:	4909      	ldr	r1, [pc, #36]	; (5864 <_ZN14Telegram_MSG_1C1EP11RadioData_t+0x130>)
    583e:	f003 f9f9 	bl	8c34 <__aeabi_fdiv>
		PCBVersion      = (uint8_t)TelegramData.payload[HEADER_SIZE+20];
    5842:	0023      	movs	r3, r4
		FirmwareVersion = FirmwareVersion / 100;
    5844:	67a0      	str	r0, [r4, #120]	; 0x78
		PCBVersion      = (uint8_t)TelegramData.payload[HEADER_SIZE+20];
    5846:	333d      	adds	r3, #61	; 0x3d
    5848:	781a      	ldrb	r2, [r3, #0]
    584a:	333f      	adds	r3, #63	; 0x3f
    584c:	701a      	strb	r2, [r3, #0]
		NumberOfBeaconsToRelay = (uint8_t)TelegramData.payload[HEADER_SIZE+21];
    584e:	3b3e      	subs	r3, #62	; 0x3e
    5850:	781a      	ldrb	r2, [r3, #0]
    5852:	333f      	adds	r3, #63	; 0x3f
    5854:	701a      	strb	r2, [r3, #0]
}
    5856:	0020      	movs	r0, r4
    5858:	bd10      	pop	{r4, pc}
    585a:	46c0      	nop			; (mov r8, r8)
    585c:	0000db40 	.word	0x0000db40
    5860:	41200000 	.word	0x41200000
    5864:	42c80000 	.word	0x42c80000

00005868 <_ZN14Telegram_MSG_143GetNumberOfSecondsSinceLastGroundStationComEv>:
    5868:	3070      	adds	r0, #112	; 0x70
    586a:	7800      	ldrb	r0, [r0, #0]
    586c:	4770      	bx	lr

0000586e <_ZN14Telegram_MSG_110GetUTCTimeEv>:
	return UTCTime;
    586e:	6d80      	ldr	r0, [r0, #88]	; 0x58
}
    5870:	4770      	bx	lr

00005872 <_ZN14Telegram_MSG_111GetLatitudeEv>:
	return Latitude;
    5872:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
}
    5874:	4770      	bx	lr

00005876 <_ZN14Telegram_MSG_112GetLongitudeEv>:
	return Longitude;
    5876:	6e00      	ldr	r0, [r0, #96]	; 0x60
}
    5878:	4770      	bx	lr

0000587a <_ZN14Telegram_MSG_114GetNumberOfSatEv>:
	return NumberOfSat;
    587a:	3064      	adds	r0, #100	; 0x64
    587c:	7800      	ldrb	r0, [r0, #0]
}
    587e:	4770      	bx	lr

00005880 <_ZN14Telegram_MSG_16GetFixEv>:
	return Fix;
    5880:	3065      	adds	r0, #101	; 0x65
    5882:	7800      	ldrb	r0, [r0, #0]
}
    5884:	4770      	bx	lr

00005886 <_ZN14Telegram_MSG_119GetRunningOnBatteryEv>:
	return RunningOnBattery;
    5886:	3066      	adds	r0, #102	; 0x66
    5888:	7800      	ldrb	r0, [r0, #0]
}
    588a:	4770      	bx	lr

0000588c <_ZN14Telegram_MSG_111GetPressureEv>:
	return Pressure;
    588c:	6e80      	ldr	r0, [r0, #104]	; 0x68
}
    588e:	4770      	bx	lr

00005890 <_ZN14Telegram_MSG_114GetGroundSpeedEv>:
	return GroundSpeed;
    5890:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
}
    5892:	4770      	bx	lr

00005894 <_ZN14Telegram_MSG_128GetSecondsSinceLastGSContactEv>:
	return SecondsSinceLastGSContact;
    5894:	3070      	adds	r0, #112	; 0x70
    5896:	7800      	ldrb	r0, [r0, #0]
}
    5898:	4770      	bx	lr

0000589a <_ZN14Telegram_MSG_117GetBatteryVoltageEv>:
	return BatteryVoltage;
    589a:	6f40      	ldr	r0, [r0, #116]	; 0x74
}
    589c:	4770      	bx	lr

0000589e <_ZN14Telegram_MSG_118GetFirmwareVersionEv>:
	return FirmwareVersion;
    589e:	6f80      	ldr	r0, [r0, #120]	; 0x78
}
    58a0:	4770      	bx	lr

000058a2 <_ZN14Telegram_MSG_113GetPCBVersionEv>:
	return PCBVersion;
    58a2:	307c      	adds	r0, #124	; 0x7c
    58a4:	7800      	ldrb	r0, [r0, #0]
}
    58a6:	4770      	bx	lr

000058a8 <_ZN14Telegram_MSG_2D1Ev>:

	// Constructor to create messages from MSG 1.
	Telegram_MSG_2(Telegram_MSG_1 *msg);


	virtual	~Telegram_MSG_2(){};	// destructor.	
    58a8:	4770      	bx	lr

000058aa <_ZN14Telegram_MSG_218SerialPrintMessageEv>:
	Serial.println("PCB Version           :" + String(this->PCBVersion));
	Serial.println("RSSI Relay            :" + String(this->RSSI_relay));
	Serial.println("SNR Relay             :" + String(this->SNR_relay));
	Serial.println("----------------------------------------------------------------");
	Serial.println("");*/
}
    58aa:	4770      	bx	lr

000058ac <_ZN14Telegram_MSG_2D0Ev>:
    58ac:	b510      	push	{r4, lr}
    58ae:	0004      	movs	r4, r0
    58b0:	f000 fc0a 	bl	60c8 <_ZdlPv>
    58b4:	0020      	movs	r0, r4
    58b6:	bd10      	pop	{r4, pc}

000058b8 <_ZN14Telegram_MSG_2C1EP11RadioData_t>:
Telegram_MSG_2::Telegram_MSG_2(RadioData_t *radioData) : Telegram(radioData)
    58b8:	b510      	push	{r4, lr}
    58ba:	0004      	movs	r4, r0
    58bc:	f7ff fdde 	bl	547c <_ZN8TelegramC1EP11RadioData_t>
    58c0:	4b49      	ldr	r3, [pc, #292]	; (59e8 <_ZN14Telegram_MSG_2C1EP11RadioData_t+0x130>)
    58c2:	3308      	adds	r3, #8
    58c4:	6023      	str	r3, [r4, #0]
	if( (TelegramData.payloadLength >= HEADER_SIZE+22+1)){
    58c6:	0023      	movs	r3, r4
    58c8:	3354      	adds	r3, #84	; 0x54
    58ca:	781b      	ldrb	r3, [r3, #0]
    58cc:	2b27      	cmp	r3, #39	; 0x27
    58ce:	dc00      	bgt.n	58d2 <_ZN14Telegram_MSG_2C1EP11RadioData_t+0x1a>
    58d0:	e087      	b.n	59e2 <_ZN14Telegram_MSG_2C1EP11RadioData_t+0x12a>
		UTCTime =   (uint32_t)((TelegramData.payload[HEADER_SIZE+0] << 16) + (TelegramData.payload[HEADER_SIZE+1] << 8) + TelegramData.payload[HEADER_SIZE+2]);
    58d2:	0023      	movs	r3, r4
    58d4:	0022      	movs	r2, r4
    58d6:	3329      	adds	r3, #41	; 0x29
    58d8:	322a      	adds	r2, #42	; 0x2a
    58da:	781b      	ldrb	r3, [r3, #0]
    58dc:	7812      	ldrb	r2, [r2, #0]
    58de:	041b      	lsls	r3, r3, #16
    58e0:	0212      	lsls	r2, r2, #8
    58e2:	189b      	adds	r3, r3, r2
    58e4:	0022      	movs	r2, r4
    58e6:	322b      	adds	r2, #43	; 0x2b
    58e8:	7812      	ldrb	r2, [r2, #0]
		NumberOfSat = (uint8_t)(TelegramData.payload[HEADER_SIZE+11] & 0b00011111);
    58ea:	0021      	movs	r1, r4
		UTCTime =   (uint32_t)((TelegramData.payload[HEADER_SIZE+0] << 16) + (TelegramData.payload[HEADER_SIZE+1] << 8) + TelegramData.payload[HEADER_SIZE+2]);
    58ec:	189b      	adds	r3, r3, r2
    58ee:	65a3      	str	r3, [r4, #88]	; 0x58
		Latitude =  (uint32_t)((TelegramData.payload[HEADER_SIZE+3] << 24) + (TelegramData.payload[HEADER_SIZE+4] << 16) + (TelegramData.payload[HEADER_SIZE+5] << 8) + TelegramData.payload[HEADER_SIZE+6]);
    58f0:	0022      	movs	r2, r4
    58f2:	0023      	movs	r3, r4
    58f4:	322d      	adds	r2, #45	; 0x2d
    58f6:	332c      	adds	r3, #44	; 0x2c
    58f8:	781b      	ldrb	r3, [r3, #0]
    58fa:	7812      	ldrb	r2, [r2, #0]
    58fc:	061b      	lsls	r3, r3, #24
    58fe:	0412      	lsls	r2, r2, #16
    5900:	189b      	adds	r3, r3, r2
    5902:	0022      	movs	r2, r4
    5904:	322e      	adds	r2, #46	; 0x2e
    5906:	7812      	ldrb	r2, [r2, #0]
		NumberOfSat = (uint8_t)(TelegramData.payload[HEADER_SIZE+11] & 0b00011111);
    5908:	3164      	adds	r1, #100	; 0x64
		Latitude =  (uint32_t)((TelegramData.payload[HEADER_SIZE+3] << 24) + (TelegramData.payload[HEADER_SIZE+4] << 16) + (TelegramData.payload[HEADER_SIZE+5] << 8) + TelegramData.payload[HEADER_SIZE+6]);
    590a:	0212      	lsls	r2, r2, #8
    590c:	189b      	adds	r3, r3, r2
    590e:	0022      	movs	r2, r4
    5910:	322f      	adds	r2, #47	; 0x2f
    5912:	7812      	ldrb	r2, [r2, #0]
    5914:	189b      	adds	r3, r3, r2
    5916:	65e3      	str	r3, [r4, #92]	; 0x5c
		Longitude = (uint32_t)((TelegramData.payload[HEADER_SIZE+7] << 24) + (TelegramData.payload[HEADER_SIZE+8] << 16) + (TelegramData.payload[HEADER_SIZE+9] << 8) + TelegramData.payload[HEADER_SIZE+10]);
    5918:	0022      	movs	r2, r4
    591a:	0023      	movs	r3, r4
    591c:	3231      	adds	r2, #49	; 0x31
    591e:	3330      	adds	r3, #48	; 0x30
    5920:	781b      	ldrb	r3, [r3, #0]
    5922:	7812      	ldrb	r2, [r2, #0]
    5924:	061b      	lsls	r3, r3, #24
    5926:	0412      	lsls	r2, r2, #16
    5928:	189b      	adds	r3, r3, r2
    592a:	0022      	movs	r2, r4
    592c:	3232      	adds	r2, #50	; 0x32
    592e:	7812      	ldrb	r2, [r2, #0]
    5930:	0212      	lsls	r2, r2, #8
    5932:	189b      	adds	r3, r3, r2
    5934:	0022      	movs	r2, r4
    5936:	3233      	adds	r2, #51	; 0x33
    5938:	7812      	ldrb	r2, [r2, #0]
    593a:	189b      	adds	r3, r3, r2
    593c:	6623      	str	r3, [r4, #96]	; 0x60
		NumberOfSat = (uint8_t)(TelegramData.payload[HEADER_SIZE+11] & 0b00011111);
    593e:	0023      	movs	r3, r4
    5940:	221f      	movs	r2, #31
    5942:	3334      	adds	r3, #52	; 0x34
    5944:	781b      	ldrb	r3, [r3, #0]
    5946:	401a      	ands	r2, r3
    5948:	700a      	strb	r2, [r1, #0]
		Fix			= (uint8_t)((TelegramData.payload[HEADER_SIZE+11]& 0b01100000) >> 5);
    594a:	065a      	lsls	r2, r3, #25
    594c:	0f92      	lsrs	r2, r2, #30
		if((TelegramData.payload[HEADER_SIZE+11] & 0b10000000)){
    594e:	b25b      	sxtb	r3, r3
		Fix			= (uint8_t)((TelegramData.payload[HEADER_SIZE+11]& 0b01100000) >> 5);
    5950:	704a      	strb	r2, [r1, #1]
		if((TelegramData.payload[HEADER_SIZE+11] & 0b10000000)){
    5952:	2b00      	cmp	r3, #0
    5954:	da03      	bge.n	595e <_ZN14Telegram_MSG_2C1EP11RadioData_t+0xa6>
			RunningOnBattery = true;
    5956:	0023      	movs	r3, r4
    5958:	2201      	movs	r2, #1
    595a:	3366      	adds	r3, #102	; 0x66
    595c:	701a      	strb	r2, [r3, #0]
		Pressure = 	(float)((TelegramData.payload[HEADER_SIZE+12] << 8) + TelegramData.payload[HEADER_SIZE+13]);
    595e:	0023      	movs	r3, r4
    5960:	3335      	adds	r3, #53	; 0x35
    5962:	7818      	ldrb	r0, [r3, #0]
    5964:	3301      	adds	r3, #1
    5966:	781b      	ldrb	r3, [r3, #0]
    5968:	0200      	lsls	r0, r0, #8
    596a:	18c0      	adds	r0, r0, r3
    596c:	f003 fe2e 	bl	95cc <__aeabi_i2f>
		GroundSpeed = (float)((TelegramData.payload[HEADER_SIZE+14] << 8) + TelegramData.payload[HEADER_SIZE+15]);
    5970:	0023      	movs	r3, r4
		Pressure = 	(float)((TelegramData.payload[HEADER_SIZE+12] << 8) + TelegramData.payload[HEADER_SIZE+13]);
    5972:	66a0      	str	r0, [r4, #104]	; 0x68
		GroundSpeed = (float)((TelegramData.payload[HEADER_SIZE+14] << 8) + TelegramData.payload[HEADER_SIZE+15]);
    5974:	3337      	adds	r3, #55	; 0x37
    5976:	7818      	ldrb	r0, [r3, #0]
    5978:	3301      	adds	r3, #1
    597a:	781b      	ldrb	r3, [r3, #0]
    597c:	0200      	lsls	r0, r0, #8
    597e:	18c0      	adds	r0, r0, r3
    5980:	f003 fe24 	bl	95cc <__aeabi_i2f>
		GroundSpeed = GroundSpeed / 10;
    5984:	4919      	ldr	r1, [pc, #100]	; (59ec <_ZN14Telegram_MSG_2C1EP11RadioData_t+0x134>)
    5986:	f003 f955 	bl	8c34 <__aeabi_fdiv>
		SecondsSinceLastGSContact = (uint8_t)TelegramData.payload[HEADER_SIZE+16];
    598a:	0023      	movs	r3, r4
		GroundSpeed = GroundSpeed / 10;
    598c:	66e0      	str	r0, [r4, #108]	; 0x6c
		SecondsSinceLastGSContact = (uint8_t)TelegramData.payload[HEADER_SIZE+16];
    598e:	3339      	adds	r3, #57	; 0x39
    5990:	781a      	ldrb	r2, [r3, #0]
    5992:	3337      	adds	r3, #55	; 0x37
    5994:	701a      	strb	r2, [r3, #0]
		BatteryVoltage  = (float)TelegramData.payload[HEADER_SIZE+17];
    5996:	3b36      	subs	r3, #54	; 0x36
    5998:	7818      	ldrb	r0, [r3, #0]
    599a:	f003 fe67 	bl	966c <__aeabi_ui2f>
		BatteryVoltage = (BatteryVoltage/100)+2.0;
    599e:	4914      	ldr	r1, [pc, #80]	; (59f0 <_ZN14Telegram_MSG_2C1EP11RadioData_t+0x138>)
    59a0:	f003 f948 	bl	8c34 <__aeabi_fdiv>
    59a4:	2180      	movs	r1, #128	; 0x80
    59a6:	05c9      	lsls	r1, r1, #23
    59a8:	f002 ffb2 	bl	8910 <__aeabi_fadd>
		FirmwareVersion = (float)((TelegramData.payload[HEADER_SIZE+18] << 8) + TelegramData.payload[HEADER_SIZE+19]);
    59ac:	0023      	movs	r3, r4
		BatteryVoltage = (BatteryVoltage/100)+2.0;
    59ae:	6760      	str	r0, [r4, #116]	; 0x74
		FirmwareVersion = (float)((TelegramData.payload[HEADER_SIZE+18] << 8) + TelegramData.payload[HEADER_SIZE+19]);
    59b0:	333b      	adds	r3, #59	; 0x3b
    59b2:	7818      	ldrb	r0, [r3, #0]
    59b4:	3301      	adds	r3, #1
    59b6:	781b      	ldrb	r3, [r3, #0]
    59b8:	0200      	lsls	r0, r0, #8
    59ba:	18c0      	adds	r0, r0, r3
    59bc:	f003 fe06 	bl	95cc <__aeabi_i2f>
		FirmwareVersion = FirmwareVersion / 100;
    59c0:	490b      	ldr	r1, [pc, #44]	; (59f0 <_ZN14Telegram_MSG_2C1EP11RadioData_t+0x138>)
    59c2:	f003 f937 	bl	8c34 <__aeabi_fdiv>
		PCBVersion      = (uint8_t)TelegramData.payload[HEADER_SIZE+20];
    59c6:	0023      	movs	r3, r4
		FirmwareVersion = FirmwareVersion / 100;
    59c8:	67a0      	str	r0, [r4, #120]	; 0x78
		PCBVersion      = (uint8_t)TelegramData.payload[HEADER_SIZE+20];
    59ca:	333d      	adds	r3, #61	; 0x3d
    59cc:	781a      	ldrb	r2, [r3, #0]
    59ce:	333f      	adds	r3, #63	; 0x3f
    59d0:	701a      	strb	r2, [r3, #0]
		RSSI_relay		= (uint8_t)TelegramData.payload[HEADER_SIZE+21]; 
    59d2:	3b3e      	subs	r3, #62	; 0x3e
    59d4:	781a      	ldrb	r2, [r3, #0]
    59d6:	333f      	adds	r3, #63	; 0x3f
    59d8:	701a      	strb	r2, [r3, #0]
		SNR_relay		= (uint8_t)TelegramData.payload[HEADER_SIZE+22]; 
    59da:	3b3e      	subs	r3, #62	; 0x3e
    59dc:	781a      	ldrb	r2, [r3, #0]
    59de:	333f      	adds	r3, #63	; 0x3f
    59e0:	701a      	strb	r2, [r3, #0]
}
    59e2:	0020      	movs	r0, r4
    59e4:	bd10      	pop	{r4, pc}
    59e6:	46c0      	nop			; (mov r8, r8)
    59e8:	0000db54 	.word	0x0000db54
    59ec:	41200000 	.word	0x41200000
    59f0:	42c80000 	.word	0x42c80000

000059f4 <_ZN14Telegram_MSG_215GeneratePayloadEv>:
	TelegramData.payload[HEADER_SIZE+0] = (uint8_t)((UTCTime >> 16) & 0xFF);
    59f4:	0002      	movs	r2, r0
    59f6:	6d83      	ldr	r3, [r0, #88]	; 0x58
    59f8:	3229      	adds	r2, #41	; 0x29
    59fa:	0c19      	lsrs	r1, r3, #16
{
    59fc:	b570      	push	{r4, r5, r6, lr}
	TelegramData.payload[HEADER_SIZE+0] = (uint8_t)((UTCTime >> 16) & 0xFF);
    59fe:	7011      	strb	r1, [r2, #0]
	TelegramData.payload[HEADER_SIZE+1] = (uint8_t)((UTCTime >> 8) & 0xFF);
    5a00:	0a19      	lsrs	r1, r3, #8
    5a02:	7051      	strb	r1, [r2, #1]
	TelegramData.payload[HEADER_SIZE+2] = (uint8_t)(UTCTime & 0xFF);
    5a04:	7093      	strb	r3, [r2, #2]
	TelegramData.payload[HEADER_SIZE+3] = (uint8_t)((Latitude >> 24) & 0xFF);
    5a06:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
{
    5a08:	0004      	movs	r4, r0
	TelegramData.payload[HEADER_SIZE+3] = (uint8_t)((Latitude >> 24) & 0xFF);
    5a0a:	0e19      	lsrs	r1, r3, #24
    5a0c:	70d1      	strb	r1, [r2, #3]
	TelegramData.payload[HEADER_SIZE+4] = (uint8_t)((Latitude >> 16) & 0xFF);
    5a0e:	1419      	asrs	r1, r3, #16
    5a10:	7111      	strb	r1, [r2, #4]
	TelegramData.payload[HEADER_SIZE+5] = (uint8_t)((Latitude >>  8) & 0xFF);
    5a12:	1219      	asrs	r1, r3, #8
    5a14:	7151      	strb	r1, [r2, #5]
	TelegramData.payload[HEADER_SIZE+6] = (uint8_t)(Latitude & 0xFF);
    5a16:	7193      	strb	r3, [r2, #6]
	TelegramData.payload[HEADER_SIZE+7]  = (uint8_t)((Longitude >> 24) & 0xFF);
    5a18:	6e03      	ldr	r3, [r0, #96]	; 0x60
    5a1a:	0e19      	lsrs	r1, r3, #24
    5a1c:	71d1      	strb	r1, [r2, #7]
	TelegramData.payload[HEADER_SIZE+8]  = (uint8_t)((Longitude >> 16) & 0xFF);
    5a1e:	1419      	asrs	r1, r3, #16
    5a20:	7211      	strb	r1, [r2, #8]
	TelegramData.payload[HEADER_SIZE+10] = (uint8_t)(Longitude & 0xFF);
    5a22:	7293      	strb	r3, [r2, #10]
	TelegramData.payload[HEADER_SIZE+9]  = (uint8_t)((Longitude >>  8) & 0xFF);
    5a24:	1219      	asrs	r1, r3, #8
	temp_8 |= ((Fix & 0b00000011) << 5);
    5a26:	0003      	movs	r3, r0
	TelegramData.payload[HEADER_SIZE+9]  = (uint8_t)((Longitude >>  8) & 0xFF);
    5a28:	7251      	strb	r1, [r2, #9]
	temp_8 |= ((Fix & 0b00000011) << 5);
    5a2a:	2260      	movs	r2, #96	; 0x60
    5a2c:	3365      	adds	r3, #101	; 0x65
    5a2e:	781b      	ldrb	r3, [r3, #0]
	temp_8 = NumberOfSat & 0b00011111;
    5a30:	211f      	movs	r1, #31
	temp_8 |= ((Fix & 0b00000011) << 5);
    5a32:	015b      	lsls	r3, r3, #5
    5a34:	4013      	ands	r3, r2
	temp_8 = NumberOfSat & 0b00011111;
    5a36:	0002      	movs	r2, r0
    5a38:	3264      	adds	r2, #100	; 0x64
    5a3a:	7812      	ldrb	r2, [r2, #0]
    5a3c:	400a      	ands	r2, r1
	temp_8 |= ((Fix & 0b00000011) << 5);
    5a3e:	4313      	orrs	r3, r2
	if(RunningOnBattery)
    5a40:	0002      	movs	r2, r0
    5a42:	3266      	adds	r2, #102	; 0x66
    5a44:	7812      	ldrb	r2, [r2, #0]
    5a46:	2a00      	cmp	r2, #0
    5a48:	d001      	beq.n	5a4e <_ZN14Telegram_MSG_215GeneratePayloadEv+0x5a>
	temp_8 |= 0b10000000;
    5a4a:	2280      	movs	r2, #128	; 0x80
    5a4c:	4313      	orrs	r3, r2
	TelegramData.payload[HEADER_SIZE+11] = temp_8;
    5a4e:	0022      	movs	r2, r4
    5a50:	3234      	adds	r2, #52	; 0x34
    5a52:	7013      	strb	r3, [r2, #0]
	temp_16=(uint16_t)(Pressure);
    5a54:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    5a56:	f002 ff25 	bl	88a4 <__aeabi_f2uiz>
	TelegramData.payload[HEADER_SIZE+12]  = (uint8_t)((temp_16 >>  8) & 0xFF);
    5a5a:	0023      	movs	r3, r4
	temp_16=(uint16_t)(Pressure);
    5a5c:	b280      	uxth	r0, r0
	TelegramData.payload[HEADER_SIZE+12]  = (uint8_t)((temp_16 >>  8) & 0xFF);
    5a5e:	0a02      	lsrs	r2, r0, #8
    5a60:	3335      	adds	r3, #53	; 0x35
    5a62:	701a      	strb	r2, [r3, #0]
	TelegramData.payload[HEADER_SIZE+13] = (uint8_t)(temp_16 & 0xFF);
    5a64:	7058      	strb	r0, [r3, #1]
	temp_16=(uint16_t)(GroundSpeed*10);
    5a66:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    5a68:	4924      	ldr	r1, [pc, #144]	; (5afc <_ZN14Telegram_MSG_215GeneratePayloadEv+0x108>)
    5a6a:	f003 fad3 	bl	9014 <__aeabi_fmul>
    5a6e:	f002 ff19 	bl	88a4 <__aeabi_f2uiz>
	TelegramData.payload[HEADER_SIZE+14]  = (uint8_t)(((temp_16) >>  8) & 0xFF);
    5a72:	0023      	movs	r3, r4
	temp_16=(uint16_t)(GroundSpeed*10);
    5a74:	b280      	uxth	r0, r0
	TelegramData.payload[HEADER_SIZE+14]  = (uint8_t)(((temp_16) >>  8) & 0xFF);
    5a76:	3337      	adds	r3, #55	; 0x37
    5a78:	0a02      	lsrs	r2, r0, #8
    5a7a:	701a      	strb	r2, [r3, #0]
	TelegramData.payload[HEADER_SIZE+16] = SecondsSinceLastGSContact;
    5a7c:	0022      	movs	r2, r4
	TelegramData.payload[HEADER_SIZE+15] = (uint8_t)((temp_16) & 0xFF);
    5a7e:	7058      	strb	r0, [r3, #1]
	TelegramData.payload[HEADER_SIZE+16] = SecondsSinceLastGSContact;
    5a80:	3270      	adds	r2, #112	; 0x70
    5a82:	7812      	ldrb	r2, [r2, #0]
    5a84:	709a      	strb	r2, [r3, #2]
	temp_8=(uint8_t)((BatteryVoltage-2.0)*100);
    5a86:	6f60      	ldr	r0, [r4, #116]	; 0x74
    5a88:	f005 fbde 	bl	b248 <__aeabi_f2d>
    5a8c:	2380      	movs	r3, #128	; 0x80
    5a8e:	2200      	movs	r2, #0
    5a90:	05db      	lsls	r3, r3, #23
    5a92:	f004 fff5 	bl	aa80 <__aeabi_dsub>
    5a96:	2200      	movs	r2, #0
    5a98:	4b19      	ldr	r3, [pc, #100]	; (5b00 <_ZN14Telegram_MSG_215GeneratePayloadEv+0x10c>)
    5a9a:	f004 fd71 	bl	a580 <__aeabi_dmul>
    5a9e:	f002 ff19 	bl	88d4 <__aeabi_d2uiz>
	TelegramData.payload[HEADER_SIZE+17] = temp_8;
    5aa2:	0023      	movs	r3, r4
    5aa4:	333a      	adds	r3, #58	; 0x3a
    5aa6:	7018      	strb	r0, [r3, #0]
	temp_8 = (uint8_t)(FirmwareVersion);
    5aa8:	6fa6      	ldr	r6, [r4, #120]	; 0x78
    5aaa:	1c30      	adds	r0, r6, #0
    5aac:	f002 fefa 	bl	88a4 <__aeabi_f2uiz>
	TelegramData.payload[HEADER_SIZE+18] = temp_8;
    5ab0:	0023      	movs	r3, r4
	temp_8 = (uint8_t)(FirmwareVersion);
    5ab2:	b2c5      	uxtb	r5, r0
	TelegramData.payload[HEADER_SIZE+18] = temp_8;
    5ab4:	333b      	adds	r3, #59	; 0x3b
    5ab6:	701d      	strb	r5, [r3, #0]
	TelegramData.payload[HEADER_SIZE+19] = (uint8_t)((FirmwareVersion*100)-temp_8*100);
    5ab8:	4912      	ldr	r1, [pc, #72]	; (5b04 <_ZN14Telegram_MSG_215GeneratePayloadEv+0x110>)
    5aba:	1c30      	adds	r0, r6, #0
    5abc:	f003 faaa 	bl	9014 <__aeabi_fmul>
    5ac0:	1c06      	adds	r6, r0, #0
    5ac2:	2064      	movs	r0, #100	; 0x64
    5ac4:	4368      	muls	r0, r5
    5ac6:	f003 fd81 	bl	95cc <__aeabi_i2f>
    5aca:	1c01      	adds	r1, r0, #0
    5acc:	1c30      	adds	r0, r6, #0
    5ace:	f003 fbc1 	bl	9254 <__aeabi_fsub>
    5ad2:	f002 fee7 	bl	88a4 <__aeabi_f2uiz>
    5ad6:	0023      	movs	r3, r4
	TelegramData.payload[HEADER_SIZE+20] = PCBVersion;
    5ad8:	0022      	movs	r2, r4
	TelegramData.payload[HEADER_SIZE+19] = (uint8_t)((FirmwareVersion*100)-temp_8*100);
    5ada:	333c      	adds	r3, #60	; 0x3c
    5adc:	7018      	strb	r0, [r3, #0]
	TelegramData.payload[HEADER_SIZE+20] = PCBVersion;
    5ade:	327c      	adds	r2, #124	; 0x7c
    5ae0:	7812      	ldrb	r2, [r2, #0]
    5ae2:	705a      	strb	r2, [r3, #1]
	TelegramData.payload[HEADER_SIZE+21] = RSSI_relay;
    5ae4:	0022      	movs	r2, r4
    5ae6:	327d      	adds	r2, #125	; 0x7d
    5ae8:	7812      	ldrb	r2, [r2, #0]
    5aea:	709a      	strb	r2, [r3, #2]
	TelegramData.payload[HEADER_SIZE+22] = SNR_relay;
    5aec:	0022      	movs	r2, r4
    5aee:	327e      	adds	r2, #126	; 0x7e
    5af0:	7812      	ldrb	r2, [r2, #0]
	TelegramData.payloadLength = HEADER_SIZE + 22 + 1;
    5af2:	3454      	adds	r4, #84	; 0x54
	TelegramData.payload[HEADER_SIZE+22] = SNR_relay;
    5af4:	70da      	strb	r2, [r3, #3]
	TelegramData.payloadLength = HEADER_SIZE + 22 + 1;
    5af6:	2328      	movs	r3, #40	; 0x28
    5af8:	7023      	strb	r3, [r4, #0]
}
    5afa:	bd70      	pop	{r4, r5, r6, pc}
    5afc:	41200000 	.word	0x41200000
    5b00:	40590000 	.word	0x40590000
    5b04:	42c80000 	.word	0x42c80000

00005b08 <_ZN14Telegram_MSG_2C1EP14Telegram_MSG_1>:
Telegram_MSG_2::Telegram_MSG_2(Telegram_MSG_1 *msg) : Telegram(MSG_Beacon_Relay,msg->GetUniqueID1(),msg->GetUniqueID2(),msg->GetUniqueID3(),msg->GetUniqueID4()) 
    5b08:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b0a:	0004      	movs	r4, r0
    5b0c:	b085      	sub	sp, #20
    5b0e:	0008      	movs	r0, r1
    5b10:	000d      	movs	r5, r1
    5b12:	f7ff fd09 	bl	5528 <_ZN8Telegram12GetUniqueID1Ev>
    5b16:	9003      	str	r0, [sp, #12]
    5b18:	0028      	movs	r0, r5
    5b1a:	f7ff fd07 	bl	552c <_ZN8Telegram12GetUniqueID2Ev>
    5b1e:	0006      	movs	r6, r0
    5b20:	0028      	movs	r0, r5
    5b22:	f7ff fd05 	bl	5530 <_ZN8Telegram12GetUniqueID3Ev>
    5b26:	0007      	movs	r7, r0
    5b28:	0028      	movs	r0, r5
    5b2a:	f7ff fd03 	bl	5534 <_ZN8Telegram12GetUniqueID4Ev>
    5b2e:	9a03      	ldr	r2, [sp, #12]
    5b30:	2102      	movs	r1, #2
    5b32:	9001      	str	r0, [sp, #4]
    5b34:	0033      	movs	r3, r6
    5b36:	9700      	str	r7, [sp, #0]
    5b38:	0020      	movs	r0, r4
    5b3a:	f7ff fc6b 	bl	5414 <_ZN8TelegramC1E13ProtocolMSG_tmmmm>
    5b3e:	4b27      	ldr	r3, [pc, #156]	; (5bdc <_ZN14Telegram_MSG_2C1EP14Telegram_MSG_1+0xd4>)
	this->UTCTime = msg->GetUTCTime();
    5b40:	0028      	movs	r0, r5
Telegram_MSG_2::Telegram_MSG_2(Telegram_MSG_1 *msg) : Telegram(MSG_Beacon_Relay,msg->GetUniqueID1(),msg->GetUniqueID2(),msg->GetUniqueID3(),msg->GetUniqueID4()) 
    5b42:	3308      	adds	r3, #8
    5b44:	6023      	str	r3, [r4, #0]
	this->UTCTime = msg->GetUTCTime();
    5b46:	f7ff fe92 	bl	586e <_ZN14Telegram_MSG_110GetUTCTimeEv>
    5b4a:	65a0      	str	r0, [r4, #88]	; 0x58
	this->Latitude = msg->GetLatitude();
    5b4c:	0028      	movs	r0, r5
    5b4e:	f7ff fe90 	bl	5872 <_ZN14Telegram_MSG_111GetLatitudeEv>
    5b52:	65e0      	str	r0, [r4, #92]	; 0x5c
	this->Longitude = msg->GetLongitude();
    5b54:	0028      	movs	r0, r5
    5b56:	f7ff fe8e 	bl	5876 <_ZN14Telegram_MSG_112GetLongitudeEv>
    5b5a:	6620      	str	r0, [r4, #96]	; 0x60
	this->NumberOfSat = msg->GetNumberOfSat();
    5b5c:	0028      	movs	r0, r5
    5b5e:	f7ff fe8c 	bl	587a <_ZN14Telegram_MSG_114GetNumberOfSatEv>
    5b62:	0023      	movs	r3, r4
    5b64:	3364      	adds	r3, #100	; 0x64
    5b66:	7018      	strb	r0, [r3, #0]
	this->Fix = msg->GetFix();
    5b68:	0028      	movs	r0, r5
    5b6a:	f7ff fe89 	bl	5880 <_ZN14Telegram_MSG_16GetFixEv>
    5b6e:	0023      	movs	r3, r4
    5b70:	3365      	adds	r3, #101	; 0x65
    5b72:	7018      	strb	r0, [r3, #0]
	this->RunningOnBattery = msg->GetRunningOnBattery();
    5b74:	0028      	movs	r0, r5
    5b76:	f7ff fe86 	bl	5886 <_ZN14Telegram_MSG_119GetRunningOnBatteryEv>
    5b7a:	0023      	movs	r3, r4
    5b7c:	3366      	adds	r3, #102	; 0x66
    5b7e:	7018      	strb	r0, [r3, #0]
	this->Pressure = msg->GetPressure();
    5b80:	0028      	movs	r0, r5
    5b82:	f7ff fe83 	bl	588c <_ZN14Telegram_MSG_111GetPressureEv>
    5b86:	66a0      	str	r0, [r4, #104]	; 0x68
	this->GroundSpeed = msg->GetGroundSpeed();
    5b88:	0028      	movs	r0, r5
    5b8a:	f7ff fe81 	bl	5890 <_ZN14Telegram_MSG_114GetGroundSpeedEv>
    5b8e:	66e0      	str	r0, [r4, #108]	; 0x6c
	this->SecondsSinceLastGSContact = msg->GetSecondsSinceLastGSContact();
    5b90:	0028      	movs	r0, r5
    5b92:	f7ff fe7f 	bl	5894 <_ZN14Telegram_MSG_128GetSecondsSinceLastGSContactEv>
    5b96:	0023      	movs	r3, r4
    5b98:	3370      	adds	r3, #112	; 0x70
    5b9a:	7018      	strb	r0, [r3, #0]
	this->BatteryVoltage = msg->GetBatteryVoltage();
    5b9c:	0028      	movs	r0, r5
    5b9e:	f7ff fe7c 	bl	589a <_ZN14Telegram_MSG_117GetBatteryVoltageEv>
    5ba2:	6760      	str	r0, [r4, #116]	; 0x74
	this->FirmwareVersion = msg->GetFirmwareVersion();
    5ba4:	0028      	movs	r0, r5
    5ba6:	f7ff fe7a 	bl	589e <_ZN14Telegram_MSG_118GetFirmwareVersionEv>
    5baa:	67a0      	str	r0, [r4, #120]	; 0x78
	this->PCBVersion = msg->GetPCBVersion();
    5bac:	0028      	movs	r0, r5
    5bae:	f7ff fe78 	bl	58a2 <_ZN14Telegram_MSG_113GetPCBVersionEv>
    5bb2:	0023      	movs	r3, r4
    5bb4:	337c      	adds	r3, #124	; 0x7c
    5bb6:	7018      	strb	r0, [r3, #0]
	this->RSSI_relay = msg->GetRSSI();
    5bb8:	0028      	movs	r0, r5
    5bba:	f7ff fcbd 	bl	5538 <_ZN8Telegram7GetRSSIEv>
    5bbe:	0023      	movs	r3, r4
    5bc0:	337d      	adds	r3, #125	; 0x7d
    5bc2:	7018      	strb	r0, [r3, #0]
	this->SNR_relay = msg->GetSNR();	
    5bc4:	0028      	movs	r0, r5
    5bc6:	f7ff fcbb 	bl	5540 <_ZN8Telegram6GetSNREv>
    5bca:	0023      	movs	r3, r4
    5bcc:	337e      	adds	r3, #126	; 0x7e
    5bce:	7018      	strb	r0, [r3, #0]
	GeneratePayload();
    5bd0:	0020      	movs	r0, r4
    5bd2:	f7ff ff0f 	bl	59f4 <_ZN14Telegram_MSG_215GeneratePayloadEv>
}
    5bd6:	0020      	movs	r0, r4
    5bd8:	b005      	add	sp, #20
    5bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5bdc:	0000db54 	.word	0x0000db54

00005be0 <_ZN14Telegram_MSG_3D1Ev>:
	Telegram_MSG_3(uint32_t _Unique_ID_1, uint32_t _Unique_ID_2, uint32_t _Unique_ID_3, uint32_t _Unique_ID_4, ProtocolCMD_t _command);

	// Constructor to create messages from Radio data struct.
	Telegram_MSG_3(RadioData_t *radioData);
	
	virtual	~Telegram_MSG_3(){}; 	// destructor.
    5be0:	4770      	bx	lr

00005be2 <_ZN14Telegram_MSG_318SerialPrintMessageEv>:

	Serial.println("Message Data:");
	Serial.println("Command ID             :" + String(this->cmd));
	Serial.println("----------------------------------------------");
	Serial.println("");*/
    5be2:	4770      	bx	lr

00005be4 <_ZN14Telegram_MSG_3D0Ev>:
    5be4:	b510      	push	{r4, lr}
    5be6:	0004      	movs	r4, r0
    5be8:	f000 fa6e 	bl	60c8 <_ZdlPv>
    5bec:	0020      	movs	r0, r4
    5bee:	bd10      	pop	{r4, pc}

00005bf0 <_ZN14Telegram_MSG_3C1EP11RadioData_t>:
Telegram_MSG_3::Telegram_MSG_3(RadioData_t *radioData) : Telegram(radioData)
    5bf0:	b510      	push	{r4, lr}
    5bf2:	0004      	movs	r4, r0
    5bf4:	f7ff fc42 	bl	547c <_ZN8TelegramC1EP11RadioData_t>
    5bf8:	4b07      	ldr	r3, [pc, #28]	; (5c18 <_ZN14Telegram_MSG_3C1EP11RadioData_t+0x28>)
    5bfa:	3308      	adds	r3, #8
    5bfc:	6023      	str	r3, [r4, #0]
	if( (TelegramData.payloadLength >= HEADER_SIZE+0+1)){
    5bfe:	0023      	movs	r3, r4
    5c00:	3354      	adds	r3, #84	; 0x54
    5c02:	781b      	ldrb	r3, [r3, #0]
    5c04:	2b11      	cmp	r3, #17
    5c06:	dd04      	ble.n	5c12 <_ZN14Telegram_MSG_3C1EP11RadioData_t+0x22>
		cmd  = (ProtocolCMD_t)TelegramData.payload[HEADER_SIZE+0];
    5c08:	0023      	movs	r3, r4
    5c0a:	3329      	adds	r3, #41	; 0x29
    5c0c:	781a      	ldrb	r2, [r3, #0]
    5c0e:	332e      	adds	r3, #46	; 0x2e
    5c10:	701a      	strb	r2, [r3, #0]
}
    5c12:	0020      	movs	r0, r4
    5c14:	bd10      	pop	{r4, pc}
    5c16:	46c0      	nop			; (mov r8, r8)
    5c18:	0000db68 	.word	0x0000db68

00005c1c <_ZN14Telegram_MSG_310GetCommandEv>:
	return cmd;
    5c1c:	3057      	adds	r0, #87	; 0x57
    5c1e:	7800      	ldrb	r0, [r0, #0]
}
    5c20:	4770      	bx	lr

00005c22 <_ZN10PCProtocolC1EP10RFProtocolP11E28_2G4M20S>:
	Not for commercial use
 */ 
#include <Arduino.h>
#include "PCProtocol.h"  // For add and get function to RF protocol RX/TX FIFO

PCProtocol::PCProtocol(RFProtocol *inout, E28_2G4M20S *radio){
    5c22:	2300      	movs	r3, #0
    5c24:	b510      	push	{r4, lr}
    5c26:	0004      	movs	r4, r0
    5c28:	6003      	str	r3, [r0, #0]
    5c2a:	7183      	strb	r3, [r0, #6]
    5c2c:	30cc      	adds	r0, #204	; 0xcc
    5c2e:	8003      	strh	r3, [r0, #0]
	this->_inout = inout;
    5c30:	64a1      	str	r1, [r4, #72]	; 0x48
	this->RadioForCRC = radio; // for CRC function.
    5c32:	64e2      	str	r2, [r4, #76]	; 0x4c
	memset(&data, 0,  MAX_PAYLOAD_LENGTH);
    5c34:	0019      	movs	r1, r3
    5c36:	223c      	movs	r2, #60	; 0x3c
    5c38:	38c4      	subs	r0, #196	; 0xc4
    5c3a:	f005 fc72 	bl	b522 <memset>
}
    5c3e:	0020      	movs	r0, r4
    5c40:	bd10      	pop	{r4, pc}

00005c42 <_ZN10PCProtocol14clearInputDataEv>:
		Serial.write(output, data->payloadLength+4);
}

  
void PCProtocol::clearInputData(){
	dataLength = 0;    // counter number of bytes read.
    5c42:	0003      	movs	r3, r0
void PCProtocol::clearInputData(){
    5c44:	b570      	push	{r4, r5, r6, lr}
	dataLength = 0;    // counter number of bytes read.
    5c46:	2500      	movs	r5, #0
	dataIndex = 0;
	memset(&data, 0,  MAX_PAYLOAD_LENGTH);
    5c48:	263c      	movs	r6, #60	; 0x3c
void PCProtocol::clearInputData(){
    5c4a:	0004      	movs	r4, r0
	dataLength = 0;    // counter number of bytes read.
    5c4c:	3344      	adds	r3, #68	; 0x44
    5c4e:	701d      	strb	r5, [r3, #0]
	dataIndex = 0;
    5c50:	705d      	strb	r5, [r3, #1]
	memset(&data, 0,  MAX_PAYLOAD_LENGTH);
    5c52:	0032      	movs	r2, r6
    5c54:	0029      	movs	r1, r5
    5c56:	3008      	adds	r0, #8
    5c58:	f005 fc63 	bl	b522 <memset>
	memset(&input.payload, 0,  MAX_PAYLOAD_LENGTH);
    5c5c:	0020      	movs	r0, r4
    5c5e:	0032      	movs	r2, r6
    5c60:	0029      	movs	r1, r5
    5c62:	3050      	adds	r0, #80	; 0x50
    5c64:	f005 fc5d 	bl	b522 <memset>
	input.payloadLength=0;
    5c68:	0023      	movs	r3, r4
	input.rssi=0;
	input.snr=0;
	CRC = 0;	
    5c6a:	34cc      	adds	r4, #204	; 0xcc
	input.payloadLength=0;
    5c6c:	338c      	adds	r3, #140	; 0x8c
    5c6e:	701d      	strb	r5, [r3, #0]
	input.rssi=0;
    5c70:	705d      	strb	r5, [r3, #1]
	input.snr=0;
    5c72:	709d      	strb	r5, [r3, #2]
	CRC = 0;	
    5c74:	8025      	strh	r5, [r4, #0]
}
    5c76:	bd70      	pop	{r4, r5, r6, pc}

00005c78 <_ZN10PCProtocol16RadioDataHandlerEv>:
			default:		
			break;
		}	
}

void PCProtocol::RadioDataHandler(){
    5c78:	b570      	push	{r4, r5, r6, lr}
	PayloadID_t _payloadID = (PayloadID_t)data[0];
	
	switch(_payloadID) // PAyload Id eather RADIO_DATA_TO_RF or RADIO_DATA_TO_PC.
    5c7a:	7a03      	ldrb	r3, [r0, #8]
void PCProtocol::RadioDataHandler(){
    5c7c:	0004      	movs	r4, r0
	switch(_payloadID) // PAyload Id eather RADIO_DATA_TO_RF or RADIO_DATA_TO_PC.
    5c7e:	2b01      	cmp	r3, #1
    5c80:	d117      	bne.n	5cb2 <_ZN10PCProtocol16RadioDataHandlerEv+0x3a>
	{
		case RADIO_DATA_TO_RF: // Application ask if we are a transponder (ground station) - Reply with same message to ack.
		{
			memcpy(&input.payload[0], &data[1], dataLength-3);   //
    5c82:	0003      	movs	r3, r0
    5c84:	0006      	movs	r6, r0
    5c86:	0001      	movs	r1, r0
    5c88:	3344      	adds	r3, #68	; 0x44
    5c8a:	781d      	ldrb	r5, [r3, #0]
    5c8c:	3650      	adds	r6, #80	; 0x50
    5c8e:	3d03      	subs	r5, #3
    5c90:	3109      	adds	r1, #9
    5c92:	002a      	movs	r2, r5
    5c94:	0030      	movs	r0, r6
    5c96:	f005 fc29 	bl	b4ec <memcpy>
			input.payloadLength=dataLength-3;			 // Payload is length minus CRC (2) minus PayloadID (1), thus 3.	
    5c9a:	0023      	movs	r3, r4
			input.rssi=0;
    5c9c:	0022      	movs	r2, r4
			input.payloadLength=dataLength-3;			 // Payload is length minus CRC (2) minus PayloadID (1), thus 3.	
    5c9e:	338c      	adds	r3, #140	; 0x8c
    5ca0:	701d      	strb	r5, [r3, #0]
			input.rssi=0;
    5ca2:	2300      	movs	r3, #0
    5ca4:	328d      	adds	r2, #141	; 0x8d
    5ca6:	7013      	strb	r3, [r2, #0]
			input.snr=0;
    5ca8:	7053      	strb	r3, [r2, #1]
			this->_inout->AddData(&input); // Add RadioData to RF protocol.
    5caa:	0031      	movs	r1, r6
    5cac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    5cae:	f7ff f86c 	bl	4d8a <_ZN10RFProtocol7AddDataEP11RadioData_t>
		break;

		default:
		break;
	}
}
    5cb2:	bd70      	pop	{r4, r5, r6, pc}

00005cb4 <_ZN10PCProtocol13WriteToSerialEP11RadioData_t>:
{
    5cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		output[0]=0x1E; // Start byte
    5cb6:	0006      	movs	r6, r0
		output[1]=data->payloadLength+2; // Length (output.payloadlength +2 byte CRC;
    5cb8:	000d      	movs	r5, r1
		output[0]=0x1E; // Start byte
    5cba:	231e      	movs	r3, #30
		output[1]=data->payloadLength+2; // Length (output.payloadlength +2 byte CRC;
    5cbc:	0002      	movs	r2, r0
		memcpy(&output[2], &data->payload[0], data->payloadLength);
    5cbe:	0007      	movs	r7, r0
{
    5cc0:	0004      	movs	r4, r0
		output[0]=0x1E; // Start byte
    5cc2:	368f      	adds	r6, #143	; 0x8f
		output[1]=data->payloadLength+2; // Length (output.payloadlength +2 byte CRC;
    5cc4:	353c      	adds	r5, #60	; 0x3c
		output[0]=0x1E; // Start byte
    5cc6:	7033      	strb	r3, [r6, #0]
		output[1]=data->payloadLength+2; // Length (output.payloadlength +2 byte CRC;
    5cc8:	782b      	ldrb	r3, [r5, #0]
    5cca:	3290      	adds	r2, #144	; 0x90
    5ccc:	3302      	adds	r3, #2
    5cce:	7013      	strb	r3, [r2, #0]
		memcpy(&output[2], &data->payload[0], data->payloadLength);
    5cd0:	3791      	adds	r7, #145	; 0x91
    5cd2:	782a      	ldrb	r2, [r5, #0]
    5cd4:	0038      	movs	r0, r7
    5cd6:	f005 fc09 	bl	b4ec <memcpy>
		uint16_t temp_crc = RadioForCRC->CalculateCRC(&output[2], data->payloadLength);
    5cda:	782a      	ldrb	r2, [r5, #0]
    5cdc:	0039      	movs	r1, r7
    5cde:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    5ce0:	f7fc fb2c 	bl	233c <_ZN11E28_2G4M20S12CalculateCRCEPhh>
		output[data->payloadLength+2] = (uint8_t)((temp_crc >>  8) & 0xFF);  // CRC
    5ce4:	782b      	ldrb	r3, [r5, #0]
    5ce6:	0a02      	lsrs	r2, r0, #8
    5ce8:	18e3      	adds	r3, r4, r3
    5cea:	3391      	adds	r3, #145	; 0x91
    5cec:	701a      	strb	r2, [r3, #0]
		output[data->payloadLength+3] = (uint8_t)(temp_crc & 0xFF);		     // CRC
    5cee:	782b      	ldrb	r3, [r5, #0]
		Serial.write(output, data->payloadLength+4);
    5cf0:	0031      	movs	r1, r6
		output[data->payloadLength+3] = (uint8_t)(temp_crc & 0xFF);		     // CRC
    5cf2:	18e4      	adds	r4, r4, r3
    5cf4:	3492      	adds	r4, #146	; 0x92
    5cf6:	7020      	strb	r0, [r4, #0]
		Serial.write(output, data->payloadLength+4);
    5cf8:	782a      	ldrb	r2, [r5, #0]
    5cfa:	4802      	ldr	r0, [pc, #8]	; (5d04 <_ZN10PCProtocol13WriteToSerialEP11RadioData_t+0x50>)
    5cfc:	3204      	adds	r2, #4
    5cfe:	f000 fd69 	bl	67d4 <_ZN7Serial_5writeEPKhj>
}
    5d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5d04:	200003f4 	.word	0x200003f4

00005d08 <_ZN10PCProtocol21ApplicationCMDHandlerEv>:
		switch(CMD) // MSG ID
    5d08:	7a03      	ldrb	r3, [r0, #8]
void PCProtocol::ApplicationCMDHandler(){
    5d0a:	b510      	push	{r4, lr}
		switch(CMD) // MSG ID
    5d0c:	2b00      	cmp	r3, #0
    5d0e:	d10f      	bne.n	5d30 <_ZN10PCProtocol21ApplicationCMDHandlerEv+0x28>
				input.payload[0] = RADAR_APPLICATION_ID;    // PAyload ID 0 (CMD_ID)
    5d10:	0001      	movs	r1, r0
				input.payload[1] = HW_REPLY;			    // (HW_REPLY)
    5d12:	0002      	movs	r2, r0
				input.payload[0] = RADAR_APPLICATION_ID;    // PAyload ID 0 (CMD_ID)
    5d14:	3150      	adds	r1, #80	; 0x50
				input.payload[1] = HW_REPLY;			    // (HW_REPLY)
    5d16:	3251      	adds	r2, #81	; 0x51
				input.payload[0] = RADAR_APPLICATION_ID;    // PAyload ID 0 (CMD_ID)
    5d18:	700b      	strb	r3, [r1, #0]
				input.payload[1] = HW_REPLY;			    // (HW_REPLY)
    5d1a:	7013      	strb	r3, [r2, #0]
				input.payloadLength=2;
    5d1c:	0003      	movs	r3, r0
    5d1e:	2202      	movs	r2, #2
    5d20:	338c      	adds	r3, #140	; 0x8c
    5d22:	701a      	strb	r2, [r3, #0]
				WriteToSerial(&input);
    5d24:	f7ff ffc6 	bl	5cb4 <_ZN10PCProtocol13WriteToSerialEP11RadioData_t>
				SystemInformation.IsGroundStation=true;
    5d28:	2201      	movs	r2, #1
    5d2a:	4b02      	ldr	r3, [pc, #8]	; (5d34 <_ZN10PCProtocol21ApplicationCMDHandlerEv+0x2c>)
    5d2c:	3334      	adds	r3, #52	; 0x34
    5d2e:	701a      	strb	r2, [r3, #0]
}
    5d30:	bd10      	pop	{r4, pc}
    5d32:	46c0      	nop			; (mov r8, r8)
    5d34:	200003a0 	.word	0x200003a0

00005d38 <_ZN10PCProtocol7ServiceEv>:
 void PCProtocol::Service(){
    5d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NumberOfBytesToRead = Serial.available();
    5d3a:	4e49      	ldr	r6, [pc, #292]	; (5e60 <_ZN10PCProtocol7ServiceEv+0x128>)
 void PCProtocol::Service(){
    5d3c:	0004      	movs	r4, r0
	NumberOfBytesToRead = Serial.available();
    5d3e:	0030      	movs	r0, r6
    5d40:	f000 fd3c 	bl	67bc <_ZN7Serial_9availableEv>
							SerialState=READ_CRC1; // Done with Data payload, now go to CRC
    5d44:	2704      	movs	r7, #4
	NumberOfBytesToRead = Serial.available();
    5d46:	6020      	str	r0, [r4, #0]
	if(NumberOfBytesToRead == 0){
    5d48:	2800      	cmp	r0, #0
    5d4a:	d154      	bne.n	5df6 <_ZN10PCProtocol7ServiceEv+0xbe>
		if(_inout->Available()){
    5d4c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    5d4e:	f7fe ff3b 	bl	4bc8 <_ZN10RFProtocol9AvailableEv>
    5d52:	2800      	cmp	r0, #0
    5d54:	d015      	beq.n	5d82 <_ZN10PCProtocol7ServiceEv+0x4a>
			RadioData_t *output = _inout->GetData();
    5d56:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    5d58:	f7ff f842 	bl	4de0 <_ZN10RFProtocol7GetDataEv>
			if(output->payloadLength < MAX_PAYLOAD_LENGTH-2){
    5d5c:	0002      	movs	r2, r0
    5d5e:	323c      	adds	r2, #60	; 0x3c
    5d60:	7813      	ldrb	r3, [r2, #0]
			RadioData_t *output = _inout->GetData();
    5d62:	0001      	movs	r1, r0
			if(output->payloadLength < MAX_PAYLOAD_LENGTH-2){
    5d64:	2b39      	cmp	r3, #57	; 0x39
    5d66:	dc0c      	bgt.n	5d82 <_ZN10PCProtocol7ServiceEv+0x4a>
				output->payload[output->payloadLength+1]=(uint8_t)output->snr;
    5d68:	000d      	movs	r5, r1
				uint8_t rssi_uint8=(uint8_t)output->rssi;
    5d6a:	303d      	adds	r0, #61	; 0x3d
				output->payload[output->payloadLength]=(uint8_t)output->rssi;
    5d6c:	7800      	ldrb	r0, [r0, #0]
				output->payload[output->payloadLength+1]=(uint8_t)output->snr;
    5d6e:	353e      	adds	r5, #62	; 0x3e
				output->payload[output->payloadLength]=(uint8_t)output->rssi;
    5d70:	54c8      	strb	r0, [r1, r3]
				output->payload[output->payloadLength+1]=(uint8_t)output->snr;
    5d72:	782d      	ldrb	r5, [r5, #0]
    5d74:	18c8      	adds	r0, r1, r3
				output->payloadLength+=2;
    5d76:	3302      	adds	r3, #2
				output->payload[output->payloadLength+1]=(uint8_t)output->snr;
    5d78:	7045      	strb	r5, [r0, #1]
				output->payloadLength+=2;
    5d7a:	7013      	strb	r3, [r2, #0]
				WriteToSerial(output);
    5d7c:	0020      	movs	r0, r4
    5d7e:	f7ff ff99 	bl	5cb4 <_ZN10PCProtocol13WriteToSerialEP11RadioData_t>
}
    5d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if(_newChar == 0x1E)
    5d84:	79e3      	ldrb	r3, [r4, #7]
    5d86:	2b1e      	cmp	r3, #30
    5d88:	d132      	bne.n	5df0 <_ZN10PCProtocol7ServiceEv+0xb8>
						clearInputData();
    5d8a:	0020      	movs	r0, r4
    5d8c:	f7ff ff59 	bl	5c42 <_ZN10PCProtocol14clearInputDataEv>
						SerialState=READ_DATA_LENGTH; // Start of string found!
    5d90:	2301      	movs	r3, #1
					SerialState = LOOKING_FOR_START; // error, restart.
    5d92:	71a3      	strb	r3, [r4, #6]
				break;
    5d94:	e02c      	b.n	5df0 <_ZN10PCProtocol7ServiceEv+0xb8>
					if(_newChar >= MAX_PAYLOAD_LENGTH ){
    5d96:	79e3      	ldrb	r3, [r4, #7]
    5d98:	2b3b      	cmp	r3, #59	; 0x3b
    5d9a:	dd01      	ble.n	5da0 <_ZN10PCProtocol7ServiceEv+0x68>
					SerialState = LOOKING_FOR_START; // error, restart.
    5d9c:	2300      	movs	r3, #0
    5d9e:	e7f8      	b.n	5d92 <_ZN10PCProtocol7ServiceEv+0x5a>
					}else if(_newChar == 0x1E){
    5da0:	2b1e      	cmp	r3, #30
    5da2:	d0f2      	beq.n	5d8a <_ZN10PCProtocol7ServiceEv+0x52>
						 dataLength = _newChar;
    5da4:	0022      	movs	r2, r4
    5da6:	3244      	adds	r2, #68	; 0x44
    5da8:	7013      	strb	r3, [r2, #0]
						 SerialState=READ_PAYLOAD_ID; // Start of string found!						
    5daa:	2302      	movs	r3, #2
    5dac:	e7f1      	b.n	5d92 <_ZN10PCProtocol7ServiceEv+0x5a>
					if(_newChar == 0x1E){
    5dae:	79e2      	ldrb	r2, [r4, #7]
    5db0:	2a1e      	cmp	r2, #30
    5db2:	d0ea      	beq.n	5d8a <_ZN10PCProtocol7ServiceEv+0x52>
						PayloadID = (PayloadID_t)_newChar;
    5db4:	7162      	strb	r2, [r4, #5]
						if((PayloadID == RADAR_APPLICATION_ID) || (PayloadID == RADIO_DATA_TO_RF) || (PayloadID == RADIO_DATA_TO_PC)){
    5db6:	2a02      	cmp	r2, #2
    5db8:	d8f0      	bhi.n	5d9c <_ZN10PCProtocol7ServiceEv+0x64>
							data[dataIndex++] = _newChar;
    5dba:	0021      	movs	r1, r4
    5dbc:	3145      	adds	r1, #69	; 0x45
    5dbe:	780b      	ldrb	r3, [r1, #0]
    5dc0:	1c58      	adds	r0, r3, #1
    5dc2:	18e3      	adds	r3, r4, r3
    5dc4:	7008      	strb	r0, [r1, #0]
    5dc6:	721a      	strb	r2, [r3, #8]
							SerialState=READ_PAYLOAD;		
    5dc8:	2303      	movs	r3, #3
    5dca:	e7e2      	b.n	5d92 <_ZN10PCProtocol7ServiceEv+0x5a>
					data[dataIndex++] = _newChar;
    5dcc:	0021      	movs	r1, r4
    5dce:	3145      	adds	r1, #69	; 0x45
    5dd0:	780a      	ldrb	r2, [r1, #0]
    5dd2:	1c53      	adds	r3, r2, #1
    5dd4:	b2db      	uxtb	r3, r3
    5dd6:	700b      	strb	r3, [r1, #0]
    5dd8:	79e1      	ldrb	r1, [r4, #7]
    5dda:	18a2      	adds	r2, r4, r2
    5ddc:	7211      	strb	r1, [r2, #8]
					if(dataIndex < MAX_PAYLOAD_LENGTH){
    5dde:	2b3b      	cmp	r3, #59	; 0x3b
    5de0:	d8dc      	bhi.n	5d9c <_ZN10PCProtocol7ServiceEv+0x64>
						if(dataIndex >= (dataLength-2)){
    5de2:	0022      	movs	r2, r4
    5de4:	3244      	adds	r2, #68	; 0x44
    5de6:	7812      	ldrb	r2, [r2, #0]
    5de8:	3a02      	subs	r2, #2
    5dea:	4293      	cmp	r3, r2
    5dec:	db00      	blt.n	5df0 <_ZN10PCProtocol7ServiceEv+0xb8>
							SerialState=READ_CRC1; // Done with Data payload, now go to CRC
    5dee:	71a7      	strb	r7, [r4, #6]
		}while(NumberOfBytesToRead > 0); // loop until buffer is empty		 
    5df0:	6823      	ldr	r3, [r4, #0]
    5df2:	2b00      	cmp	r3, #0
    5df4:	ddc5      	ble.n	5d82 <_ZN10PCProtocol7ServiceEv+0x4a>
			_newChar=Serial.read(); // read char from input buffer
    5df6:	0030      	movs	r0, r6
    5df8:	f000 fd08 	bl	680c <_ZN7Serial_4readEv>
    5dfc:	71e0      	strb	r0, [r4, #7]
			NumberOfBytesToRead = Serial.available();
    5dfe:	0030      	movs	r0, r6
    5e00:	f000 fcdc 	bl	67bc <_ZN7Serial_9availableEv>
    5e04:	6020      	str	r0, [r4, #0]
			switch (SerialState)
    5e06:	79a0      	ldrb	r0, [r4, #6]
    5e08:	2805      	cmp	r0, #5
    5e0a:	d8c7      	bhi.n	5d9c <_ZN10PCProtocol7ServiceEv+0x64>
    5e0c:	f002 fb3e 	bl	848c <__gnu_thumb1_case_sqi>
    5e10:	decfc3ba 	.word	0xdecfc3ba
    5e14:	0a03      	.short	0x0a03
					CRC = (uint16_t)(_newChar<< 8);
    5e16:	0022      	movs	r2, r4
    5e18:	79e3      	ldrb	r3, [r4, #7]
    5e1a:	32cc      	adds	r2, #204	; 0xcc
    5e1c:	021b      	lsls	r3, r3, #8
    5e1e:	8013      	strh	r3, [r2, #0]
					SerialState=READ_CRC2; 
    5e20:	2305      	movs	r3, #5
    5e22:	e7b6      	b.n	5d92 <_ZN10PCProtocol7ServiceEv+0x5a>
					CRC |= (uint16_t)_newChar;
    5e24:	0025      	movs	r5, r4
    5e26:	35cc      	adds	r5, #204	; 0xcc
    5e28:	882a      	ldrh	r2, [r5, #0]
    5e2a:	79e3      	ldrb	r3, [r4, #7]
					if(RadioForCRC->CalculateCRC(&data[0] , dataIndex) != CRC){
    5e2c:	0021      	movs	r1, r4
					CRC |= (uint16_t)_newChar;
    5e2e:	4313      	orrs	r3, r2
    5e30:	802b      	strh	r3, [r5, #0]
					if(RadioForCRC->CalculateCRC(&data[0] , dataIndex) != CRC){
    5e32:	0023      	movs	r3, r4
    5e34:	3345      	adds	r3, #69	; 0x45
    5e36:	781a      	ldrb	r2, [r3, #0]
    5e38:	3108      	adds	r1, #8
    5e3a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    5e3c:	f7fc fa7e 	bl	233c <_ZN11E28_2G4M20S12CalculateCRCEPhh>
    5e40:	882b      	ldrh	r3, [r5, #0]
    5e42:	4283      	cmp	r3, r0
    5e44:	d1aa      	bne.n	5d9c <_ZN10PCProtocol7ServiceEv+0x64>
					switch(PayloadID) // MSG ID
    5e46:	7963      	ldrb	r3, [r4, #5]
    5e48:	2b00      	cmp	r3, #0
    5e4a:	d005      	beq.n	5e58 <_ZN10PCProtocol7ServiceEv+0x120>
    5e4c:	2b02      	cmp	r3, #2
    5e4e:	d8a5      	bhi.n	5d9c <_ZN10PCProtocol7ServiceEv+0x64>
							RadioDataHandler();						
    5e50:	0020      	movs	r0, r4
    5e52:	f7ff ff11 	bl	5c78 <_ZN10PCProtocol16RadioDataHandlerEv>
						break;
    5e56:	e7a1      	b.n	5d9c <_ZN10PCProtocol7ServiceEv+0x64>
							ApplicationCMDHandler();
    5e58:	0020      	movs	r0, r4
    5e5a:	f7ff ff55 	bl	5d08 <_ZN10PCProtocol21ApplicationCMDHandlerEv>
						break;
    5e5e:	e79d      	b.n	5d9c <_ZN10PCProtocol7ServiceEv+0x64>
    5e60:	200003f4 	.word	0x200003f4

00005e64 <_Z17setTimerFrequencyi>:
#include "main.h"
#include "Arduino.h"
#include "RFService.h"


void setTimerFrequency(int frequencyHz) {
    5e64:	b537      	push	{r0, r1, r2, r4, r5, lr}
	
	//int compareValue = (CPU_HZ / (TIMER_PRESCALER_DIV * frequencyHz)) - 1;
	int compareValue = (KHZ_OSC / (16 * frequencyHz)) - 1;
    5e66:	0101      	lsls	r1, r0, #4
    5e68:	2080      	movs	r0, #128	; 0x80
    5e6a:	0200      	lsls	r0, r0, #8
    5e6c:	f002 fbb6 	bl	85dc <__divsi3>
	TcCount16* TC = (TcCount16*) TC3;
	
	// Make sure the count is in a proportional position to where it was
	// to prevent any jitter or disconnect when changing the compare value.
	TC->COUNT.reg = map(TC->COUNT.reg, 0, TC->CC[0].reg, 0, compareValue);
    5e70:	2300      	movs	r3, #0
    5e72:	4c09      	ldr	r4, [pc, #36]	; (5e98 <_Z17setTimerFrequencyi+0x34>)
	int compareValue = (KHZ_OSC / (16 * frequencyHz)) - 1;
    5e74:	1e45      	subs	r5, r0, #1
	TC->COUNT.reg = map(TC->COUNT.reg, 0, TC->CC[0].reg, 0, compareValue);
    5e76:	8a20      	ldrh	r0, [r4, #16]
    5e78:	8b22      	ldrh	r2, [r4, #24]
    5e7a:	b280      	uxth	r0, r0
    5e7c:	9500      	str	r5, [sp, #0]
    5e7e:	b292      	uxth	r2, r2
    5e80:	0019      	movs	r1, r3
    5e82:	f001 fe9d 	bl	7bc0 <_Z3maplllll>
	TC->CC[0].reg = compareValue;
    5e86:	b2ad      	uxth	r5, r5
	TC->COUNT.reg = map(TC->COUNT.reg, 0, TC->CC[0].reg, 0, compareValue);
    5e88:	b280      	uxth	r0, r0
    5e8a:	8220      	strh	r0, [r4, #16]
	TC->CC[0].reg = compareValue;
    5e8c:	8325      	strh	r5, [r4, #24]
	//  Serial.println(TC->COUNT.reg);
	//  Serial.println(TC->CC[0].reg);
	while (TC->STATUS.bit.SYNCBUSY == 1);
    5e8e:	7be3      	ldrb	r3, [r4, #15]
    5e90:	09db      	lsrs	r3, r3, #7
    5e92:	d1fc      	bne.n	5e8e <_Z17setTimerFrequencyi+0x2a>
}
    5e94:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    5e96:	46c0      	nop			; (mov r8, r8)
    5e98:	42002c00 	.word	0x42002c00

00005e9c <_Z11startTimer3i>:

void startTimer3(int frequencyHz){
	// Setup Timer 3 to use internal 32khz, and ensure it runs in standby.

	// Put Generic Clock Generator 1 (32Khz) as source for Timer 3 (and 2)
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(GCM_TCC2_TC3)     | // Timer 2 and Timer 3
    5e9c:	4b20      	ldr	r3, [pc, #128]	; (5f20 <_Z11startTimer3i+0x84>)
    5e9e:	4a21      	ldr	r2, [pc, #132]	; (5f24 <_Z11startTimer3i+0x88>)
void startTimer3(int frequencyHz){
    5ea0:	b570      	push	{r4, r5, r6, lr}
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(GCM_TCC2_TC3)     | // Timer 2 and Timer 3
    5ea2:	805a      	strh	r2, [r3, #2]
						GCLK_CLKCTRL_GEN_GCLK2			  | // Generic Clock Generator 2 is source (Internal 32khz).
						GCLK_CLKCTRL_CLKEN;
	
	while ( GCLK->STATUS.bit.SYNCBUSY == 1 ); // wait for sync
    5ea4:	785a      	ldrb	r2, [r3, #1]
    5ea6:	09d2      	lsrs	r2, r2, #7
    5ea8:	d1fc      	bne.n	5ea4 <_Z11startTimer3i+0x8>

	GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2)				   | // Generic Clock Generator 2
    5eaa:	4a1f      	ldr	r2, [pc, #124]	; (5f28 <_Z11startTimer3i+0x8c>)
    5eac:	605a      	str	r2, [r3, #4]
						GCLK_GENCTRL_SRC_OSCULP32K		   | // Use internal 32 Khz oscilator
						GCLK_GENCTRL_GENEN				   | // Clock Generator Enabled
						GCLK_GENCTRL_RUNSTDBY;				 // Run in standtby.

						
	while ( GCLK->STATUS.bit.SYNCBUSY == 1 ); // wait for sync
    5eae:	785a      	ldrb	r2, [r3, #1]
    5eb0:	09d2      	lsrs	r2, r2, #7
    5eb2:	d1fc      	bne.n	5eae <_Z11startTimer3i+0x12>
	TcCount16* TC = (TcCount16*) TC3;

	TC->CTRLA.reg &= ~TC_CTRLA_ENABLE;
    5eb4:	4c1d      	ldr	r4, [pc, #116]	; (5f2c <_Z11startTimer3i+0x90>)
    5eb6:	3202      	adds	r2, #2
    5eb8:	8823      	ldrh	r3, [r4, #0]
    5eba:	4393      	bics	r3, r2
    5ebc:	8023      	strh	r3, [r4, #0]
	while (TC->STATUS.bit.SYNCBUSY == 1); // wait for sync
    5ebe:	7be3      	ldrb	r3, [r4, #15]
    5ec0:	09db      	lsrs	r3, r3, #7
    5ec2:	d1fc      	bne.n	5ebe <_Z11startTimer3i+0x22>

	TC->CTRLA.bit.RUNSTDBY = 1;
    5ec4:	2380      	movs	r3, #128	; 0x80
    5ec6:	8822      	ldrh	r2, [r4, #0]
    5ec8:	011b      	lsls	r3, r3, #4
    5eca:	4313      	orrs	r3, r2
    5ecc:	8023      	strh	r3, [r4, #0]

	// Use the 16-bit timer
	TC->CTRLA.reg |= TC_CTRLA_MODE_COUNT16;
    5ece:	8823      	ldrh	r3, [r4, #0]
    5ed0:	b29b      	uxth	r3, r3
    5ed2:	8023      	strh	r3, [r4, #0]
	while (TC->STATUS.bit.SYNCBUSY == 1); // wait for sync
    5ed4:	7be3      	ldrb	r3, [r4, #15]
    5ed6:	09db      	lsrs	r3, r3, #7
    5ed8:	d1fc      	bne.n	5ed4 <_Z11startTimer3i+0x38>

	// Use match mode so that the timer counter resets when the count matches the compare register
	TC->CTRLA.reg |= TC_CTRLA_WAVEGEN_MFRQ;
    5eda:	8822      	ldrh	r2, [r4, #0]
    5edc:	3320      	adds	r3, #32
    5ede:	4313      	orrs	r3, r2
    5ee0:	8023      	strh	r3, [r4, #0]
	while (TC->STATUS.bit.SYNCBUSY == 1); // wait for sync
    5ee2:	7be3      	ldrb	r3, [r4, #15]
    5ee4:	09db      	lsrs	r3, r3, #7
    5ee6:	d1fc      	bne.n	5ee2 <_Z11startTimer3i+0x46>
  
	// Set prescaler to 1024
	//	TC->CTRLA.reg |= TC_CTRLA_PRESCALER_DIV1024;
	TC->CTRLA.reg |= TC_CTRLA_PRESCALER_DIV16;
    5ee8:	2380      	movs	r3, #128	; 0x80
    5eea:	8822      	ldrh	r2, [r4, #0]
    5eec:	00db      	lsls	r3, r3, #3
    5eee:	4313      	orrs	r3, r2
    5ef0:	8023      	strh	r3, [r4, #0]
	while (TC->STATUS.bit.SYNCBUSY == 1); // wait for sync
    5ef2:	7be5      	ldrb	r5, [r4, #15]
    5ef4:	09ed      	lsrs	r5, r5, #7
    5ef6:	d1fc      	bne.n	5ef2 <_Z11startTimer3i+0x56>
	setTimerFrequency(frequencyHz);
    5ef8:	f7ff ffb4 	bl	5e64 <_Z17setTimerFrequencyi>

	// Enable the compare interrupt
	TC->INTENSET.reg = 0;
	TC->INTENSET.bit.MC0 = 1;
    5efc:	2310      	movs	r3, #16
	TC->INTENSET.reg = 0;
    5efe:	7365      	strb	r5, [r4, #13]
	TC->INTENSET.bit.MC0 = 1;
    5f00:	7b62      	ldrb	r2, [r4, #13]
    5f02:	4313      	orrs	r3, r2
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    5f04:	2280      	movs	r2, #128	; 0x80
    5f06:	7363      	strb	r3, [r4, #13]
    5f08:	4b09      	ldr	r3, [pc, #36]	; (5f30 <_Z11startTimer3i+0x94>)
    5f0a:	02d2      	lsls	r2, r2, #11
    5f0c:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(TC3_IRQn);
	TC->CTRLA.reg |= TC_CTRLA_ENABLE;
    5f0e:	2302      	movs	r3, #2
    5f10:	8822      	ldrh	r2, [r4, #0]
    5f12:	4313      	orrs	r3, r2
    5f14:	8023      	strh	r3, [r4, #0]
	while (TC->STATUS.bit.SYNCBUSY == 1); // wait for sync
    5f16:	7be3      	ldrb	r3, [r4, #15]
    5f18:	09db      	lsrs	r3, r3, #7
    5f1a:	d1fc      	bne.n	5f16 <_Z11startTimer3i+0x7a>
}
    5f1c:	bd70      	pop	{r4, r5, r6, pc}
    5f1e:	46c0      	nop			; (mov r8, r8)
    5f20:	40000c00 	.word	0x40000c00
    5f24:	0000421b 	.word	0x0000421b
    5f28:	00210302 	.word	0x00210302
    5f2c:	42002c00 	.word	0x42002c00
    5f30:	e000e100 	.word	0xe000e100

00005f34 <TC3_Handler>:

// ISR function doe timer 3
void TC3_Handler() {
    5f34:	b510      	push	{r4, lr}
	TcCount16* TC = (TcCount16*) TC3;
	// If this interrupt is due to the compare register matching the timer count
	// we toggle the LED.
	if (TC->INTFLAG.bit.MC0 == 1) {
    5f36:	4b0c      	ldr	r3, [pc, #48]	; (5f68 <TC3_Handler+0x34>)
    5f38:	7b9a      	ldrb	r2, [r3, #14]
    5f3a:	06d2      	lsls	r2, r2, #27
    5f3c:	d512      	bpl.n	5f64 <TC3_Handler+0x30>
		TC->INTFLAG.bit.MC0 = 1;
    5f3e:	2210      	movs	r2, #16
    5f40:	7b99      	ldrb	r1, [r3, #14]
    5f42:	430a      	orrs	r2, r1
    5f44:	739a      	strb	r2, [r3, #14]
		// Write callback here!!!
		
		RadioService->SeccondCounter(); // Count up the Seconds since laste ground contact.
    5f46:	4b09      	ldr	r3, [pc, #36]	; (5f6c <TC3_Handler+0x38>)
    5f48:	6818      	ldr	r0, [r3, #0]
    5f4a:	f7ff f878 	bl	503e <_ZN9RFService14SeccondCounterEv>
		
		if(SystemInformation.SecondCounter < 254){
    5f4e:	4b08      	ldr	r3, [pc, #32]	; (5f70 <TC3_Handler+0x3c>)
    5f50:	795a      	ldrb	r2, [r3, #5]
    5f52:	2afd      	cmp	r2, #253	; 0xfd
    5f54:	dc01      	bgt.n	5f5a <TC3_Handler+0x26>
			SystemInformation.SecondCounter++;
    5f56:	3201      	adds	r2, #1
    5f58:	715a      	strb	r2, [r3, #5]
		}
		
		if(SystemInformation.BeaconSecondCounter < 20){
    5f5a:	799a      	ldrb	r2, [r3, #6]
    5f5c:	2a13      	cmp	r2, #19
    5f5e:	dc01      	bgt.n	5f64 <TC3_Handler+0x30>
			SystemInformation.BeaconSecondCounter++;
    5f60:	3201      	adds	r2, #1
    5f62:	719a      	strb	r2, [r3, #6]
		}
	}
}
    5f64:	bd10      	pop	{r4, pc}
    5f66:	46c0      	nop			; (mov r8, r8)
    5f68:	42002c00 	.word	0x42002c00
    5f6c:	20000398 	.word	0x20000398
    5f70:	200003a0 	.word	0x200003a0

00005f74 <__cxa_pure_virtual>:
#include <stdlib.h>

extern "C" void __cxa_pure_virtual(void) __attribute__ ((__noreturn__));
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
    5f74:	e7fe      	b.n	5f74 <__cxa_pure_virtual>
	...

00005f78 <USB_Handler>:

static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
  if (usb_isr)
    5f78:	4b03      	ldr	r3, [pc, #12]	; (5f88 <USB_Handler+0x10>)
{
    5f7a:	b510      	push	{r4, lr}
  if (usb_isr)
    5f7c:	681b      	ldr	r3, [r3, #0]
    5f7e:	2b00      	cmp	r3, #0
    5f80:	d000      	beq.n	5f84 <USB_Handler+0xc>
    usb_isr();
    5f82:	4798      	blx	r3
}
    5f84:	bd10      	pop	{r4, pc}
    5f86:	46c0      	nop			; (mov r8, r8)
    5f88:	200003ec 	.word	0x200003ec

00005f8c <Dummy_Handler>:
{
    5f8c:	b570      	push	{r4, r5, r6, lr}
  pinMode(21, 1);
    5f8e:	2101      	movs	r1, #1
    5f90:	2015      	movs	r0, #21
    5f92:	f001 fd27 	bl	79e4 <pinMode>
		digitalWrite(21, 1);
    5f96:	2515      	movs	r5, #21
{
    5f98:	240a      	movs	r4, #10
		delay(50);
    5f9a:	2632      	movs	r6, #50	; 0x32
		digitalWrite(21, 1);
    5f9c:	2101      	movs	r1, #1
    5f9e:	0028      	movs	r0, r5
    5fa0:	f001 fd6c 	bl	7a7c <digitalWrite>
		delay(50);
    5fa4:	0030      	movs	r0, r6
    5fa6:	f000 f84f 	bl	6048 <delay>
		digitalWrite(21, 0);
    5faa:	2100      	movs	r1, #0
    5fac:	0028      	movs	r0, r5
    5fae:	f001 fd65 	bl	7a7c <digitalWrite>
    5fb2:	3c01      	subs	r4, #1
		delay(50);	  
    5fb4:	0030      	movs	r0, r6
    5fb6:	f000 f847 	bl	6048 <delay>
	  for(int a=0;a<10;a++){
    5fba:	2c00      	cmp	r4, #0
    5fbc:	d1ee      	bne.n	5f9c <Dummy_Handler+0x10>
	  delay(950);
    5fbe:	4802      	ldr	r0, [pc, #8]	; (5fc8 <Dummy_Handler+0x3c>)
    5fc0:	f000 f842 	bl	6048 <delay>
  for (;;) {
    5fc4:	e7e8      	b.n	5f98 <Dummy_Handler+0xc>
    5fc6:	46c0      	nop			; (mov r8, r8)
    5fc8:	000003b6 	.word	0x000003b6

00005fcc <Reset_Handler>:
{
    5fcc:	b570      	push	{r4, r5, r6, lr}
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    5fce:	490f      	ldr	r1, [pc, #60]	; (600c <Reset_Handler+0x40>)
    5fd0:	4c0f      	ldr	r4, [pc, #60]	; (6010 <Reset_Handler+0x44>)
    5fd2:	42a1      	cmp	r1, r4
    5fd4:	d104      	bne.n	5fe0 <Reset_Handler+0x14>
  SystemInit();
    5fd6:	f000 f90f 	bl	61f8 <SystemInit>
  main();
    5fda:	f000 f851 	bl	6080 <main>
    5fde:	e7fe      	b.n	5fde <Reset_Handler+0x12>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    5fe0:	4d0c      	ldr	r5, [pc, #48]	; (6014 <Reset_Handler+0x48>)
    5fe2:	2300      	movs	r3, #0
    5fe4:	428d      	cmp	r5, r1
    5fe6:	d0f6      	beq.n	5fd6 <Reset_Handler+0xa>
    5fe8:	18ca      	adds	r2, r1, r3
    5fea:	18e8      	adds	r0, r5, r3
    for (; pDest < &__data_end__; pDest++, pSrc++)
    5fec:	42a2      	cmp	r2, r4
    5fee:	d305      	bcc.n	5ffc <Reset_Handler+0x30>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    5ff0:	4290      	cmp	r0, r2
    5ff2:	d0f0      	beq.n	5fd6 <Reset_Handler+0xa>
    5ff4:	4b08      	ldr	r3, [pc, #32]	; (6018 <Reset_Handler+0x4c>)
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    5ff6:	4909      	ldr	r1, [pc, #36]	; (601c <Reset_Handler+0x50>)
      *pDest = 0;
    5ff8:	2200      	movs	r2, #0
    5ffa:	e004      	b.n	6006 <Reset_Handler+0x3a>
      *pDest = *pSrc;
    5ffc:	6800      	ldr	r0, [r0, #0]
    5ffe:	3304      	adds	r3, #4
    6000:	6010      	str	r0, [r2, #0]
    6002:	e7f1      	b.n	5fe8 <Reset_Handler+0x1c>
      *pDest = 0;
    6004:	c304      	stmia	r3!, {r2}
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    6006:	428b      	cmp	r3, r1
    6008:	d3fc      	bcc.n	6004 <Reset_Handler+0x38>
    600a:	e7e4      	b.n	5fd6 <Reset_Handler+0xa>
    600c:	20000000 	.word	0x20000000
    6010:	20000280 	.word	0x20000280
    6014:	0000e32c 	.word	0x0000e32c
    6018:	20000280 	.word	0x20000280
    601c:	20000a2c 	.word	0x20000a2c

00006020 <SysTick_Handler>:
{
    6020:	b510      	push	{r4, lr}
  if (sysTickHook())
    6022:	f000 f82a 	bl	607a <sysTickHook>
    6026:	2800      	cmp	r0, #0
    6028:	d101      	bne.n	602e <SysTick_Handler+0xe>
  SysTick_DefaultHandler();
    602a:	f000 f81b 	bl	6064 <SysTick_DefaultHandler>
}
    602e:	bd10      	pop	{r4, pc}

00006030 <USB_SetHandler>:

void USB_SetHandler(void (*new_usb_isr)(void))
{
  usb_isr = new_usb_isr;
    6030:	4b01      	ldr	r3, [pc, #4]	; (6038 <USB_SetHandler+0x8>)
    6032:	6018      	str	r0, [r3, #0]
}
    6034:	4770      	bx	lr
    6036:	46c0      	nop			; (mov r8, r8)
    6038:	200003ec 	.word	0x200003ec

0000603c <millis>:
static volatile uint32_t _ulTickCount=0 ;

unsigned long millis( void )
{
// todo: ensure no interrupts
  return _ulTickCount ;
    603c:	4b01      	ldr	r3, [pc, #4]	; (6044 <millis+0x8>)
    603e:	6818      	ldr	r0, [r3, #0]
}
    6040:	4770      	bx	lr
    6042:	46c0      	nop			; (mov r8, r8)
    6044:	200003f0 	.word	0x200003f0

00006048 <delay>:
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}

void delay( unsigned long ms )
{
    6048:	b570      	push	{r4, r5, r6, lr}
    604a:	1e04      	subs	r4, r0, #0
  if ( ms == 0 )
    604c:	d007      	beq.n	605e <delay+0x16>
  {
    return ;
  }

  uint32_t start = _ulTickCount ;
    604e:	4d04      	ldr	r5, [pc, #16]	; (6060 <delay+0x18>)
    6050:	682e      	ldr	r6, [r5, #0]

  do
  {
    yield() ;
    6052:	f000 f811 	bl	6078 <yield>
  } while ( _ulTickCount - start < ms ) ;
    6056:	682b      	ldr	r3, [r5, #0]
    6058:	1b9b      	subs	r3, r3, r6
    605a:	429c      	cmp	r4, r3
    605c:	d8f9      	bhi.n	6052 <delay+0xa>
}
    605e:	bd70      	pop	{r4, r5, r6, pc}
    6060:	200003f0 	.word	0x200003f0

00006064 <SysTick_DefaultHandler>:

#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
    6064:	b510      	push	{r4, lr}
  // Increment tick count each ms
  _ulTickCount++;
    6066:	4a03      	ldr	r2, [pc, #12]	; (6074 <SysTick_DefaultHandler+0x10>)
    6068:	6813      	ldr	r3, [r2, #0]
    606a:	3301      	adds	r3, #1
    606c:	6013      	str	r3, [r2, #0]
  tickReset();
    606e:	f000 f887 	bl	6180 <tickReset>
}
    6072:	bd10      	pop	{r4, pc}
    6074:	200003f0 	.word	0x200003f0

00006078 <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
    6078:	4770      	bx	lr

0000607a <sysTickHook>:
 * handler provided by Arduino.
 */
static int __false() {
	// Return false
	return 0;
}
    607a:	2000      	movs	r0, #0
    607c:	4770      	bx	lr

0000607e <_Z11initVariantv>:
#include "Arduino.h"

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    607e:	4770      	bx	lr

00006080 <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
    6080:	b510      	push	{r4, lr}
  init();
    6082:	f001 fb9d 	bl	77c0 <init>

  __libc_init_array();
    6086:	f005 f9e7 	bl	b458 <__libc_init_array>

  initVariant();
    608a:	f7ff fff8 	bl	607e <_Z11initVariantv>

  delay(1);
    608e:	2001      	movs	r0, #1
    6090:	f7ff ffda 	bl	6048 <delay>
#if defined(USBCON)
  USBDevice.init();
    6094:	4c08      	ldr	r4, [pc, #32]	; (60b8 <main+0x38>)
    6096:	0020      	movs	r0, r4
    6098:	f000 fe6c 	bl	6d74 <_ZN14USBDeviceClass4initEv>
  USBDevice.attach();
    609c:	0020      	movs	r0, r4
    609e:	f000 fec9 	bl	6e34 <_ZN14USBDeviceClass6attachEv>
#endif

  setup();
    60a2:	f7fe fb0f 	bl	46c4 <setup>

  for (;;)
  {
    loop();
    60a6:	f7fe f983 	bl	43b0 <loop>
    if (serialEventRun) serialEventRun();
    60aa:	4b04      	ldr	r3, [pc, #16]	; (60bc <main+0x3c>)
    60ac:	2b00      	cmp	r3, #0
    60ae:	d0fa      	beq.n	60a6 <main+0x26>
    60b0:	e000      	b.n	60b4 <main+0x34>
    60b2:	bf00      	nop
    60b4:	e7f7      	b.n	60a6 <main+0x26>
    60b6:	46c0      	nop			; (mov r8, r8)
    60b8:	20000410 	.word	0x20000410
    60bc:	00000000 	.word	0x00000000

000060c0 <_Znwj>:
    60c0:	b510      	push	{r4, lr}
    60c2:	f005 f9ed 	bl	b4a0 <malloc>
    60c6:	bd10      	pop	{r4, pc}

000060c8 <_ZdlPv>:
    60c8:	b510      	push	{r4, lr}
    60ca:	f005 f9f3 	bl	b4b4 <free>
    60ce:	bd10      	pop	{r4, pc}

000060d0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    60d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    60d2:	0006      	movs	r6, r0
    60d4:	000d      	movs	r5, r1
    60d6:	000c      	movs	r4, r1
    60d8:	188b      	adds	r3, r1, r2
    60da:	9301      	str	r3, [sp, #4]
  size_t n = 0;
  while (size--) {
    60dc:	9b01      	ldr	r3, [sp, #4]
    60de:	1b67      	subs	r7, r4, r5
    60e0:	429c      	cmp	r4, r3
    60e2:	d007      	beq.n	60f4 <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
    60e4:	6833      	ldr	r3, [r6, #0]
    60e6:	7821      	ldrb	r1, [r4, #0]
    60e8:	681b      	ldr	r3, [r3, #0]
    60ea:	0030      	movs	r0, r6
    60ec:	4798      	blx	r3
    60ee:	3401      	adds	r4, #1
    60f0:	2800      	cmp	r0, #0
    60f2:	d1f3      	bne.n	60dc <_ZN5Print5writeEPKhj+0xc>
    else break;
  }
  return n;
}
    60f4:	0038      	movs	r0, r7
    60f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000060f8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    60f8:	b570      	push	{r4, r5, r6, lr}
    60fa:	0005      	movs	r5, r0
    60fc:	000c      	movs	r4, r1
      if (str == NULL) return 0;
    60fe:	1e08      	subs	r0, r1, #0
    6100:	d007      	beq.n	6112 <_ZN5Print5writeEPKc+0x1a>
      return write((const uint8_t *)str, strlen(str));
    6102:	f005 ff75 	bl	bff0 <strlen>
    6106:	682b      	ldr	r3, [r5, #0]
    6108:	0002      	movs	r2, r0
    610a:	685b      	ldr	r3, [r3, #4]
    610c:	0021      	movs	r1, r4
    610e:	0028      	movs	r0, r5
    6110:	4798      	blx	r3
    }
    6112:	bd70      	pop	{r4, r5, r6, pc}

00006114 <_ZN5Print5printERK6String>:
{
  return print(reinterpret_cast<const char *>(ifsh));
}

size_t Print::print(const String &s)
{
    6114:	b510      	push	{r4, lr}
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    6116:	6803      	ldr	r3, [r0, #0]
    6118:	688a      	ldr	r2, [r1, #8]
    611a:	685b      	ldr	r3, [r3, #4]
    611c:	6809      	ldr	r1, [r1, #0]
    611e:	4798      	blx	r3
  return write(s.c_str(), s.length());
}
    6120:	bd10      	pop	{r4, pc}

00006122 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
    6122:	b510      	push	{r4, lr}
  return write(str);
    6124:	f7ff ffe8 	bl	60f8 <_ZN5Print5writeEPKc>
}
    6128:	bd10      	pop	{r4, pc}
	...

0000612c <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    612c:	b510      	push	{r4, lr}
  return write("\r\n");
    612e:	4902      	ldr	r1, [pc, #8]	; (6138 <_ZN5Print7printlnEv+0xc>)
    6130:	f7ff ffe2 	bl	60f8 <_ZN5Print5writeEPKc>
}
    6134:	bd10      	pop	{r4, pc}
    6136:	46c0      	nop			; (mov r8, r8)
    6138:	0000db7c 	.word	0x0000db7c

0000613c <_ZN5Print7printlnERK6String>:

size_t Print::println(const String &s)
{
    613c:	b570      	push	{r4, r5, r6, lr}
    613e:	0005      	movs	r5, r0
  size_t n = print(s);
    6140:	f7ff ffe8 	bl	6114 <_ZN5Print5printERK6String>
    6144:	0004      	movs	r4, r0
  n += println();
    6146:	0028      	movs	r0, r5
    6148:	f7ff fff0 	bl	612c <_ZN5Print7printlnEv>
    614c:	1820      	adds	r0, r4, r0
  return n;
}
    614e:	bd70      	pop	{r4, r5, r6, pc}

00006150 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    6150:	b570      	push	{r4, r5, r6, lr}
    6152:	0004      	movs	r4, r0
  return write(str);
    6154:	f7ff ffd0 	bl	60f8 <_ZN5Print5writeEPKc>
    6158:	0005      	movs	r5, r0
  size_t n = print(c);
  n += println();
    615a:	0020      	movs	r0, r4
    615c:	f7ff ffe6 	bl	612c <_ZN5Print7printlnEv>
    6160:	1940      	adds	r0, r0, r5
  return n;
}
    6162:	bd70      	pop	{r4, r5, r6, pc}

00006164 <initiateReset>:
}

static int ticks = -1;

void initiateReset(int _ticks) {
	ticks = _ticks;
    6164:	4b01      	ldr	r3, [pc, #4]	; (616c <initiateReset+0x8>)
    6166:	6018      	str	r0, [r3, #0]
}
    6168:	4770      	bx	lr
    616a:	46c0      	nop			; (mov r8, r8)
    616c:	20000004 	.word	0x20000004

00006170 <cancelReset>:

void cancelReset() {
	ticks = -1;
    6170:	2201      	movs	r2, #1
    6172:	4b02      	ldr	r3, [pc, #8]	; (617c <cancelReset+0xc>)
    6174:	4252      	negs	r2, r2
    6176:	601a      	str	r2, [r3, #0]
}
    6178:	4770      	bx	lr
    617a:	46c0      	nop			; (mov r8, r8)
    617c:	20000004 	.word	0x20000004

00006180 <tickReset>:

void tickReset() {
	if (ticks == -1)
    6180:	4a16      	ldr	r2, [pc, #88]	; (61dc <tickReset+0x5c>)
void tickReset() {
    6182:	b510      	push	{r4, lr}
	if (ticks == -1)
    6184:	6813      	ldr	r3, [r2, #0]
    6186:	1c59      	adds	r1, r3, #1
    6188:	d027      	beq.n	61da <tickReset+0x5a>
		return;
	ticks--;
    618a:	3b01      	subs	r3, #1
    618c:	6013      	str	r3, [r2, #0]
	if (ticks == 0)
    618e:	2b00      	cmp	r3, #0
    6190:	d123      	bne.n	61da <tickReset+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
    6192:	b672      	cpsid	i
	if (APP_START < (0x200 + 4)) {
    6194:	4b12      	ldr	r3, [pc, #72]	; (61e0 <tickReset+0x60>)
    6196:	4a13      	ldr	r2, [pc, #76]	; (61e4 <tickReset+0x64>)
    6198:	3304      	adds	r3, #4
    619a:	4293      	cmp	r3, r2
    619c:	d808      	bhi.n	61b0 <tickReset+0x30>
  __ASM volatile ("dsb 0xF":::"memory");
    619e:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
    61a2:	4a11      	ldr	r2, [pc, #68]	; (61e8 <tickReset+0x68>)
    61a4:	4b11      	ldr	r3, [pc, #68]	; (61ec <tickReset+0x6c>)
    61a6:	60da      	str	r2, [r3, #12]
    61a8:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    61ac:	46c0      	nop			; (mov r8, r8)
    61ae:	e7fd      	b.n	61ac <tickReset+0x2c>
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    61b0:	4a0f      	ldr	r2, [pc, #60]	; (61f0 <tickReset+0x70>)
	while (!nvmReady())
    61b2:	2101      	movs	r1, #1
    61b4:	0010      	movs	r0, r2
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    61b6:	7d14      	ldrb	r4, [r2, #20]
	while (!nvmReady())
    61b8:	420c      	tst	r4, r1
    61ba:	d0fc      	beq.n	61b6 <tickReset+0x36>
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
    61bc:	2120      	movs	r1, #32
    61be:	8b14      	ldrh	r4, [r2, #24]
    61c0:	31ff      	adds	r1, #255	; 0xff
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
    61c2:	089b      	lsrs	r3, r3, #2
    61c4:	005b      	lsls	r3, r3, #1
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
    61c6:	4321      	orrs	r1, r4
    61c8:	8311      	strh	r1, [r2, #24]
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
    61ca:	61d3      	str	r3, [r2, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
    61cc:	4b09      	ldr	r3, [pc, #36]	; (61f4 <tickReset+0x74>)
    61ce:	8013      	strh	r3, [r2, #0]
	while (!nvmReady())
    61d0:	2301      	movs	r3, #1
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    61d2:	7d02      	ldrb	r2, [r0, #20]
	while (!nvmReady())
    61d4:	421a      	tst	r2, r3
    61d6:	d0fc      	beq.n	61d2 <tickReset+0x52>
    61d8:	e7e1      	b.n	619e <tickReset+0x1e>
		banzai();
}
    61da:	bd10      	pop	{r4, pc}
    61dc:	20000004 	.word	0x20000004
    61e0:	00002000 	.word	0x00002000
    61e4:	00000203 	.word	0x00000203
    61e8:	05fa0004 	.word	0x05fa0004
    61ec:	e000ed00 	.word	0xe000ed00
    61f0:	41004000 	.word	0x41004000
    61f4:	ffffa502 	.word	0xffffa502

000061f8 <SystemInit>:
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
    61f8:	221e      	movs	r2, #30
{
    61fa:	b570      	push	{r4, r5, r6, lr}
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
    61fc:	4846      	ldr	r0, [pc, #280]	; (6318 <SystemInit+0x120>)

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
    61fe:	4947      	ldr	r1, [pc, #284]	; (631c <SystemInit+0x124>)
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
    6200:	6843      	ldr	r3, [r0, #4]
    6202:	4393      	bics	r3, r2
    6204:	3a1c      	subs	r2, #28
    6206:	4313      	orrs	r3, r2
    6208:	6043      	str	r3, [r0, #4]
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
    620a:	2308      	movs	r3, #8
    620c:	698c      	ldr	r4, [r1, #24]
    620e:	4323      	orrs	r3, r4
    6210:	618b      	str	r3, [r1, #24]
#else // has crystal

  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
    6212:	4c43      	ldr	r4, [pc, #268]	; (6320 <SystemInit+0x128>)
    6214:	4b43      	ldr	r3, [pc, #268]	; (6324 <SystemInit+0x12c>)
    6216:	829c      	strh	r4, [r3, #20]
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
    6218:	8a9c      	ldrh	r4, [r3, #20]
    621a:	4314      	orrs	r4, r2
    621c:	829c      	strh	r4, [r3, #20]

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
    621e:	68dc      	ldr	r4, [r3, #12]
    6220:	4214      	tst	r4, r2
    6222:	d0fc      	beq.n	621e <SystemInit+0x26>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
    6224:	2401      	movs	r4, #1
    6226:	4a40      	ldr	r2, [pc, #256]	; (6328 <SystemInit+0x130>)
    6228:	7014      	strb	r4, [r2, #0]

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
    622a:	7815      	ldrb	r5, [r2, #0]
    622c:	4225      	tst	r5, r4
    622e:	d003      	beq.n	6238 <SystemInit+0x40>
    6230:	7855      	ldrb	r5, [r2, #1]
    6232:	b26d      	sxtb	r5, r5
    6234:	2d00      	cmp	r5, #0
    6236:	dbf8      	blt.n	622a <SystemInit+0x32>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
    6238:	2401      	movs	r4, #1
    623a:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    623c:	7854      	ldrb	r4, [r2, #1]
    623e:	b264      	sxtb	r4, r4
    6240:	2c00      	cmp	r4, #0
    6242:	dbfb      	blt.n	623c <SystemInit+0x44>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC32K ) | // Generic Clock Generator 1
    6244:	4c39      	ldr	r4, [pc, #228]	; (632c <SystemInit+0x134>)
    6246:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
#endif
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    6248:	7854      	ldrb	r4, [r2, #1]
    624a:	b264      	sxtb	r4, r4
    624c:	2c00      	cmp	r4, #0
    624e:	dbfb      	blt.n	6248 <SystemInit+0x50>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
    6250:	2482      	movs	r4, #130	; 0x82
    6252:	01e4      	lsls	r4, r4, #7
    6254:	8054      	strh	r4, [r2, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    6256:	7854      	ldrb	r4, [r2, #1]
    6258:	b264      	sxtb	r4, r4
    625a:	2c00      	cmp	r4, #0
    625c:	dbfb      	blt.n	6256 <SystemInit+0x5e>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    625e:	2402      	movs	r4, #2
    6260:	849c      	strh	r4, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    6262:	340e      	adds	r4, #14
    6264:	68dd      	ldr	r5, [r3, #12]
    6266:	4225      	tst	r5, r4
    6268:	d0fc      	beq.n	6264 <SystemInit+0x6c>
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
    626a:	4c31      	ldr	r4, [pc, #196]	; (6330 <SystemInit+0x138>)
    626c:	62dc      	str	r4, [r3, #44]	; 0x2c
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK + VARIANT_MAINOSC/2) / VARIANT_MAINOSC ) ; // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    626e:	2410      	movs	r4, #16
    6270:	68dd      	ldr	r5, [r3, #12]
    6272:	4225      	tst	r5, r4
    6274:	d0fc      	beq.n	6270 <SystemInit+0x78>
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;

#else   // has crystal

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
    6276:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
    6278:	4c2e      	ldr	r4, [pc, #184]	; (6334 <SystemInit+0x13c>)
    627a:	432c      	orrs	r4, r5
    627c:	849c      	strh	r4, [r3, #36]	; 0x24
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    627e:	2410      	movs	r4, #16
    6280:	68dd      	ldr	r5, [r3, #12]
    6282:	4225      	tst	r5, r4
    6284:	d0fc      	beq.n	6280 <SystemInit+0x88>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
    6286:	2402      	movs	r4, #2
    6288:	8c9d      	ldrh	r5, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
    628a:	2680      	movs	r6, #128	; 0x80
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
    628c:	432c      	orrs	r4, r5
    628e:	849c      	strh	r4, [r3, #36]	; 0x24
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
    6290:	2440      	movs	r4, #64	; 0x40
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
    6292:	68dd      	ldr	r5, [r3, #12]
    6294:	4235      	tst	r5, r6
    6296:	d0fc      	beq.n	6292 <SystemInit+0x9a>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
    6298:	68dd      	ldr	r5, [r3, #12]
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
    629a:	4225      	tst	r5, r4
    629c:	d0f9      	beq.n	6292 <SystemInit+0x9a>
    /* Wait for locks flags */
  }

#endif

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    629e:	2410      	movs	r4, #16
    62a0:	68dd      	ldr	r5, [r3, #12]
    62a2:	4225      	tst	r5, r4
    62a4:	d0fc      	beq.n	62a0 <SystemInit+0xa8>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
    62a6:	2400      	movs	r4, #0
    62a8:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    62aa:	7854      	ldrb	r4, [r2, #1]
    62ac:	b264      	sxtb	r4, r4
    62ae:	2c00      	cmp	r4, #0
    62b0:	dbfb      	blt.n	62aa <SystemInit+0xb2>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
    62b2:	4c21      	ldr	r4, [pc, #132]	; (6338 <SystemInit+0x140>)
    62b4:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    62b6:	7854      	ldrb	r4, [r2, #1]
    62b8:	b264      	sxtb	r4, r4
    62ba:	2c00      	cmp	r4, #0
    62bc:	dbfb      	blt.n	62b6 <SystemInit+0xbe>
  }

  /* ----------------------------------------------------------------------------------------------
   * 6) Modify PRESCaler value of OSC8M to have 8MHz
   */
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
    62be:	6a1c      	ldr	r4, [r3, #32]
    62c0:	4d1e      	ldr	r5, [pc, #120]	; (633c <SystemInit+0x144>)
    62c2:	402c      	ands	r4, r5
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
    62c4:	2580      	movs	r5, #128	; 0x80
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
    62c6:	621c      	str	r4, [r3, #32]
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
    62c8:	6a1c      	ldr	r4, [r3, #32]
    62ca:	43ac      	bics	r4, r5
    62cc:	621c      	str	r4, [r3, #32]

  /* ----------------------------------------------------------------------------------------------
   * 7) Put OSC8M as source for Generic Clock Generator 3
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) ; // Generic Clock Generator 3
    62ce:	2303      	movs	r3, #3
    62d0:	6093      	str	r3, [r2, #8]

  /* Write Generic Clock Generator 3 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) | // Generic Clock Generator 3
    62d2:	4b1b      	ldr	r3, [pc, #108]	; (6340 <SystemInit+0x148>)
    62d4:	6053      	str	r3, [r2, #4]
                      GCLK_GENCTRL_SRC_OSC8M | // Selected source is RC OSC 8MHz (already enabled at reset)
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    62d6:	7853      	ldrb	r3, [r2, #1]
    62d8:	b25b      	sxtb	r3, r3
    62da:	2b00      	cmp	r3, #0
    62dc:	dbfb      	blt.n	62d6 <SystemInit+0xde>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
    62de:	2300      	movs	r3, #0

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
    62e0:	24ff      	movs	r4, #255	; 0xff
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
    62e2:	720b      	strb	r3, [r1, #8]
  SystemCoreClock=VARIANT_MCK ;
    62e4:	4a17      	ldr	r2, [pc, #92]	; (6344 <SystemInit+0x14c>)
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
    62e6:	724b      	strb	r3, [r1, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
    62e8:	728b      	strb	r3, [r1, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
    62ea:	72cb      	strb	r3, [r1, #11]
  SystemCoreClock=VARIANT_MCK ;
    62ec:	4b16      	ldr	r3, [pc, #88]	; (6348 <SystemInit+0x150>)
    62ee:	601a      	str	r2, [r3, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
    62f0:	4b16      	ldr	r3, [pc, #88]	; (634c <SystemInit+0x154>)
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
    62f2:	4a17      	ldr	r2, [pc, #92]	; (6350 <SystemInit+0x158>)
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
    62f4:	681b      	ldr	r3, [r3, #0]
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
    62f6:	6811      	ldr	r1, [r2, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
    62f8:	069a      	lsls	r2, r3, #26
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
    62fa:	015b      	lsls	r3, r3, #5
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
    62fc:	0ec9      	lsrs	r1, r1, #27
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
    62fe:	4023      	ands	r3, r4
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
    6300:	0f52      	lsrs	r2, r2, #29

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
    6302:	0212      	lsls	r2, r2, #8
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
    6304:	430b      	orrs	r3, r1
  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
    6306:	4313      	orrs	r3, r2
    6308:	4a12      	ldr	r2, [pc, #72]	; (6354 <SystemInit+0x15c>)
    630a:	8513      	strh	r3, [r2, #40]	; 0x28

  /*
   * 9) Disable automatic NVM write operations
   */
  NVMCTRL->CTRLB.bit.MANW = 1;
    630c:	2380      	movs	r3, #128	; 0x80
    630e:	6842      	ldr	r2, [r0, #4]
    6310:	4313      	orrs	r3, r2
    6312:	6043      	str	r3, [r0, #4]
}
    6314:	bd70      	pop	{r4, r5, r6, pc}
    6316:	46c0      	nop			; (mov r8, r8)
    6318:	41004000 	.word	0x41004000
    631c:	40000400 	.word	0x40000400
    6320:	0000060c 	.word	0x0000060c
    6324:	40000800 	.word	0x40000800
    6328:	40000c00 	.word	0x40000c00
    632c:	00010501 	.word	0x00010501
    6330:	7dff05b9 	.word	0x7dff05b9
    6334:	00000a04 	.word	0x00000a04
    6338:	00030700 	.word	0x00030700
    633c:	fffffcff 	.word	0xfffffcff
    6340:	00010603 	.word	0x00010603
    6344:	02dc6c00 	.word	0x02dc6c00
    6348:	20000084 	.word	0x20000084
    634c:	00806024 	.word	0x00806024
    6350:	00806020 	.word	0x00806020
    6354:	42004000 	.word	0x42004000

00006358 <_ZN4UartcvbEv>:
    size_t write(const uint8_t data);
    using Print::write; // pull in write(str) and write(buf, size) from Print

    void IrqHandler();

    operator bool() { return true; }
    6358:	2001      	movs	r0, #1
    635a:	4770      	bx	lr

0000635c <_ZN4Uart5beginEm>:
  uc_pinRTS = _pinRTS;
  uc_pinCTS = _pinCTS;
}

void Uart::begin(unsigned long baudrate)
{
    635c:	b510      	push	{r4, lr}
  begin(baudrate, SERIAL_8N1);
    635e:	6803      	ldr	r3, [r0, #0]
    6360:	4a01      	ldr	r2, [pc, #4]	; (6368 <_ZN4Uart5beginEm+0xc>)
    6362:	6a1b      	ldr	r3, [r3, #32]
    6364:	4798      	blx	r3
}
    6366:	bd10      	pop	{r4, pc}
    6368:	00000413 	.word	0x00000413

0000636c <_ZN4Uart4peekEv>:
}

template <int N>
int RingBufferN<N>::peek()
{
  if(_iTail == _iHead)
    636c:	0003      	movs	r3, r0
    636e:	33fc      	adds	r3, #252	; 0xfc
    6370:	69d9      	ldr	r1, [r3, #28]
    6372:	699a      	ldr	r2, [r3, #24]
    6374:	4291      	cmp	r1, r2
    6376:	d003      	beq.n	6380 <_ZN4Uart4peekEv+0x14>
    return -1;

  return _aucBuffer[_iTail];
    6378:	69db      	ldr	r3, [r3, #28]
    637a:	18c0      	adds	r0, r0, r3
    637c:	7d00      	ldrb	r0, [r0, #20]
}

int Uart::peek()
{
  return rxBuffer.peek();
}
    637e:	4770      	bx	lr
    return -1;
    6380:	2001      	movs	r0, #1
    6382:	4240      	negs	r0, r0
  return rxBuffer.peek();
    6384:	e7fb      	b.n	637e <_ZN4Uart4peekEv+0x12>

00006386 <_ZN4Uart3endEv>:
{
    6386:	b510      	push	{r4, lr}
    6388:	0004      	movs	r4, r0
  sercom->resetUART();
    638a:	6900      	ldr	r0, [r0, #16]
    638c:	f001 fedc 	bl	8148 <_ZN6SERCOM9resetUARTEv>
  _iHead = 0;
    6390:	0022      	movs	r2, r4
    6392:	2300      	movs	r3, #0
    6394:	32fc      	adds	r2, #252	; 0xfc
    6396:	6193      	str	r3, [r2, #24]
  _iTail = 0;
    6398:	61d3      	str	r3, [r2, #28]
  _iHead = 0;
    639a:	2286      	movs	r2, #134	; 0x86
    639c:	0092      	lsls	r2, r2, #2
    639e:	18a4      	adds	r4, r4, r2
    63a0:	6063      	str	r3, [r4, #4]
  _iTail = 0;
    63a2:	60a3      	str	r3, [r4, #8]
}
    63a4:	bd10      	pop	{r4, pc}

000063a6 <_ZN4Uart11enableRXPinEv>:
  return 1;
}


void Uart::enableRXPin(void)
{
    63a6:	b510      	push	{r4, lr}
	sercom->enableUSARTRX();
    63a8:	6900      	ldr	r0, [r0, #16]
    63aa:	f001 ff17 	bl	81dc <_ZN6SERCOM13enableUSARTRXEv>
}
    63ae:	bd10      	pop	{r4, pc}

000063b0 <_ZN4Uart12disableRXPinEv>:

void Uart::disableRXPin(void)
{
    63b0:	b510      	push	{r4, lr}
	sercom->disableUSARTRX();
    63b2:	6900      	ldr	r0, [r0, #16]
    63b4:	f001 ff1a 	bl	81ec <_ZN6SERCOM14disableUSARTRXEv>
}
    63b8:	bd10      	pop	{r4, pc}

000063ba <_ZN4Uart16extractNbStopBitEt>:


SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
  switch(config & HARDSER_STOP_BIT_MASK)
    63ba:	20f0      	movs	r0, #240	; 0xf0
    63bc:	4001      	ands	r1, r0
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
    63be:	3930      	subs	r1, #48	; 0x30
    63c0:	4248      	negs	r0, r1
    63c2:	4148      	adcs	r0, r1

    case HARDSER_STOP_BIT_2:
      return SERCOM_STOP_BITS_2;
  }
}
    63c4:	4770      	bx	lr

000063c6 <_ZN4Uart15extractCharSizeEt>:

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    63c6:	23f0      	movs	r3, #240	; 0xf0
    63c8:	011b      	lsls	r3, r3, #4
    63ca:	4019      	ands	r1, r3
    63cc:	2380      	movs	r3, #128	; 0x80
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
    63ce:	2006      	movs	r0, #6
  switch(config & HARDSER_DATA_MASK)
    63d0:	009b      	lsls	r3, r3, #2
    63d2:	4299      	cmp	r1, r3
    63d4:	d00a      	beq.n	63ec <_ZN4Uart15extractCharSizeEt+0x26>
    63d6:	3301      	adds	r3, #1
    63d8:	33ff      	adds	r3, #255	; 0xff

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
    63da:	3001      	adds	r0, #1
  switch(config & HARDSER_DATA_MASK)
    63dc:	4299      	cmp	r1, r3
    63de:	d005      	beq.n	63ec <_ZN4Uart15extractCharSizeEt+0x26>
    63e0:	2380      	movs	r3, #128	; 0x80
      return UART_CHAR_SIZE_5_BITS;
    63e2:	3802      	subs	r0, #2
  switch(config & HARDSER_DATA_MASK)
    63e4:	005b      	lsls	r3, r3, #1
    63e6:	4299      	cmp	r1, r3
    63e8:	d000      	beq.n	63ec <_ZN4Uart15extractCharSizeEt+0x26>

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
    63ea:	2000      	movs	r0, #0

  }
}
    63ec:	4770      	bx	lr

000063ee <_ZN4Uart13extractParityEt>:

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
    63ee:	200f      	movs	r0, #15
    63f0:	4001      	ands	r1, r0
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
    63f2:	2000      	movs	r0, #0
  switch(config & HARDSER_PARITY_MASK)
    63f4:	2901      	cmp	r1, #1
    63f6:	d003      	beq.n	6400 <_ZN4Uart13extractParityEt+0x12>
      return SERCOM_NO_PARITY;
    63f8:	3902      	subs	r1, #2
    63fa:	1e48      	subs	r0, r1, #1
    63fc:	4181      	sbcs	r1, r0
    63fe:	1c48      	adds	r0, r1, #1

    case HARDSER_PARITY_ODD:
      return SERCOM_ODD_PARITY;
  }
}
    6400:	4770      	bx	lr
	...

00006404 <_ZN4Uart5beginEmt>:
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    6404:	2389      	movs	r3, #137	; 0x89
{
    6406:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    6408:	2618      	movs	r6, #24
{
    640a:	b085      	sub	sp, #20
    640c:	9102      	str	r1, [sp, #8]
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    640e:	009b      	lsls	r3, r3, #2
{
    6410:	0004      	movs	r4, r0
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    6412:	5cc0      	ldrb	r0, [r0, r3]
    6414:	0033      	movs	r3, r6
    6416:	2108      	movs	r1, #8
    6418:	4343      	muls	r3, r0
    641a:	4d32      	ldr	r5, [pc, #200]	; (64e4 <_ZN4Uart5beginEmt+0xe0>)
{
    641c:	0017      	movs	r7, r2
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    641e:	18eb      	adds	r3, r5, r3
    6420:	5659      	ldrsb	r1, [r3, r1]
    6422:	f001 fb6f 	bl	7b04 <pinPeripheral>
  pinPeripheral(uc_pinTX, g_APinDescription[uc_pinTX].ulPinType);
    6426:	4b30      	ldr	r3, [pc, #192]	; (64e8 <_ZN4Uart5beginEmt+0xe4>)
    6428:	2108      	movs	r1, #8
    642a:	5ce0      	ldrb	r0, [r4, r3]
    642c:	0033      	movs	r3, r6
    642e:	4343      	muls	r3, r0
    6430:	18eb      	adds	r3, r5, r3
    6432:	5659      	ldrsb	r1, [r3, r1]
    6434:	f001 fb66 	bl	7b04 <pinPeripheral>
  if (uc_padTX == UART_TX_RTS_CTS_PAD_0_2_3) { 
    6438:	4b2c      	ldr	r3, [pc, #176]	; (64ec <_ZN4Uart5beginEmt+0xe8>)
    643a:	5ce2      	ldrb	r2, [r4, r3]
    643c:	9303      	str	r3, [sp, #12]
    643e:	2a02      	cmp	r2, #2
    6440:	d109      	bne.n	6456 <_ZN4Uart5beginEmt+0x52>
    if (uc_pinCTS != NO_CTS_PIN) {
    6442:	3311      	adds	r3, #17
    6444:	5ce0      	ldrb	r0, [r4, r3]
    6446:	28ff      	cmp	r0, #255	; 0xff
    6448:	d005      	beq.n	6456 <_ZN4Uart5beginEmt+0x52>
      pinPeripheral(uc_pinCTS, g_APinDescription[uc_pinCTS].ulPinType);
    644a:	2108      	movs	r1, #8
    644c:	4346      	muls	r6, r0
    644e:	19ae      	adds	r6, r5, r6
    6450:	5671      	ldrsb	r1, [r6, r1]
    6452:	f001 fb57 	bl	7b04 <pinPeripheral>
  if (uc_pinRTS != NO_RTS_PIN) {
    6456:	268a      	movs	r6, #138	; 0x8a
    6458:	00b6      	lsls	r6, r6, #2
    645a:	5da0      	ldrb	r0, [r4, r6]
    645c:	28ff      	cmp	r0, #255	; 0xff
    645e:	d019      	beq.n	6494 <_ZN4Uart5beginEmt+0x90>
    pinMode(uc_pinRTS, OUTPUT);
    6460:	2101      	movs	r1, #1
    6462:	f001 fabf 	bl	79e4 <pinMode>
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    6466:	2218      	movs	r2, #24
    6468:	5da3      	ldrb	r3, [r4, r6]
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    646a:	4921      	ldr	r1, [pc, #132]	; (64f0 <_ZN4Uart5beginEmt+0xec>)
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    646c:	435a      	muls	r2, r3
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    646e:	56ab      	ldrsb	r3, [r5, r2]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    6470:	18ad      	adds	r5, r5, r2
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    6472:	01db      	lsls	r3, r3, #7
    6474:	1858      	adds	r0, r3, r1
    6476:	218b      	movs	r1, #139	; 0x8b
    6478:	0089      	lsls	r1, r1, #2
    647a:	5060      	str	r0, [r4, r1]
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    647c:	491d      	ldr	r1, [pc, #116]	; (64f4 <_ZN4Uart5beginEmt+0xf0>)
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    647e:	2201      	movs	r2, #1
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    6480:	185b      	adds	r3, r3, r1
    6482:	218c      	movs	r1, #140	; 0x8c
    6484:	0089      	lsls	r1, r1, #2
    6486:	5063      	str	r3, [r4, r1]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    6488:	6869      	ldr	r1, [r5, #4]
    648a:	408a      	lsls	r2, r1
    648c:	218d      	movs	r1, #141	; 0x8d
    648e:	0089      	lsls	r1, r1, #2
    6490:	5062      	str	r2, [r4, r1]
    *pul_outclrRTS = ul_pinMaskRTS;
    6492:	601a      	str	r2, [r3, #0]
  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
    6494:	2201      	movs	r2, #1
    6496:	9b02      	ldr	r3, [sp, #8]
    6498:	0011      	movs	r1, r2
    649a:	6920      	ldr	r0, [r4, #16]
    649c:	f001 ff42 	bl	8324 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    64a0:	0039      	movs	r1, r7
    64a2:	0020      	movs	r0, r4
    64a4:	f7ff ff8f 	bl	63c6 <_ZN4Uart15extractCharSizeEt>
    64a8:	0039      	movs	r1, r7
    64aa:	0005      	movs	r5, r0
    64ac:	0020      	movs	r0, r4
    64ae:	f7ff ff9e 	bl	63ee <_ZN4Uart13extractParityEt>
    64b2:	0039      	movs	r1, r7
    64b4:	0006      	movs	r6, r0
    64b6:	0020      	movs	r0, r4
    64b8:	f7ff ff7f 	bl	63ba <_ZN4Uart16extractNbStopBitEt>
    64bc:	0033      	movs	r3, r6
    64be:	9000      	str	r0, [sp, #0]
    64c0:	0029      	movs	r1, r5
    64c2:	6920      	ldr	r0, [r4, #16]
    64c4:	2201      	movs	r2, #1
    64c6:	f001 fe13 	bl	80f0 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
    64ca:	4b0b      	ldr	r3, [pc, #44]	; (64f8 <_ZN4Uart5beginEmt+0xf4>)
    64cc:	6920      	ldr	r0, [r4, #16]
    64ce:	5ce2      	ldrb	r2, [r4, r3]
    64d0:	9b03      	ldr	r3, [sp, #12]
    64d2:	5ce1      	ldrb	r1, [r4, r3]
    64d4:	f001 fe26 	bl	8124 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>
  sercom->enableUART();
    64d8:	6920      	ldr	r0, [r4, #16]
    64da:	f001 fe41 	bl	8160 <_ZN6SERCOM10enableUARTEv>
}
    64de:	b005      	add	sp, #20
    64e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    64e2:	46c0      	nop			; (mov r8, r8)
    64e4:	0000dc20 	.word	0x0000dc20
    64e8:	00000225 	.word	0x00000225
    64ec:	00000227 	.word	0x00000227
    64f0:	41004418 	.word	0x41004418
    64f4:	41004414 	.word	0x41004414
    64f8:	00000226 	.word	0x00000226

000064fc <_ZN11RingBufferNILi256EEC1Ev>:
    memset( _aucBuffer, 0, N ) ;
    64fc:	2280      	movs	r2, #128	; 0x80
RingBufferN<N>::RingBufferN( void )
    64fe:	b510      	push	{r4, lr}
    6500:	0004      	movs	r4, r0
    memset( _aucBuffer, 0, N ) ;
    6502:	0052      	lsls	r2, r2, #1
    6504:	2100      	movs	r1, #0
    6506:	f005 f80c 	bl	b522 <memset>
  _iHead = 0;
    650a:	0023      	movs	r3, r4
    650c:	2200      	movs	r2, #0
    650e:	33fc      	adds	r3, #252	; 0xfc
    6510:	605a      	str	r2, [r3, #4]
}
    6512:	0020      	movs	r0, r4
  _iTail = 0;
    6514:	609a      	str	r2, [r3, #8]
}
    6516:	bd10      	pop	{r4, pc}

00006518 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    6518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    651a:	001d      	movs	r5, r3
    651c:	ab08      	add	r3, sp, #32
    651e:	781b      	ldrb	r3, [r3, #0]
    6520:	0004      	movs	r4, r0
    6522:	9300      	str	r3, [sp, #0]
    6524:	ab09      	add	r3, sp, #36	; 0x24
    6526:	781b      	ldrb	r3, [r3, #0]
    6528:	0016      	movs	r6, r2
    652a:	9301      	str	r3, [sp, #4]
    Print() : write_error(0) {}
    652c:	2300      	movs	r3, #0
    652e:	6043      	str	r3, [r0, #4]
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    6530:	23fa      	movs	r3, #250	; 0xfa
    6532:	009b      	lsls	r3, r3, #2
    6534:	6083      	str	r3, [r0, #8]
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    6536:	4b11      	ldr	r3, [pc, #68]	; (657c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x64>)
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    6538:	000f      	movs	r7, r1
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    653a:	3308      	adds	r3, #8
    653c:	6003      	str	r3, [r0, #0]
    653e:	3014      	adds	r0, #20
    6540:	f7ff ffdc 	bl	64fc <_ZN11RingBufferNILi256EEC1Ev>
    6544:	0020      	movs	r0, r4
    6546:	301d      	adds	r0, #29
    6548:	30ff      	adds	r0, #255	; 0xff
    654a:	f7ff ffd7 	bl	64fc <_ZN11RingBufferNILi256EEC1Ev>
  uc_pinRX = _pinRX;
    654e:	2389      	movs	r3, #137	; 0x89
  uc_padRX = _padRX ;
    6550:	466a      	mov	r2, sp
  uc_pinRX = _pinRX;
    6552:	009b      	lsls	r3, r3, #2
  sercom = _s;
    6554:	6127      	str	r7, [r4, #16]
  uc_pinRX = _pinRX;
    6556:	54e6      	strb	r6, [r4, r3]
  uc_pinTX = _pinTX;
    6558:	4b09      	ldr	r3, [pc, #36]	; (6580 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x68>)
  uc_padRX = _padRX ;
    655a:	7812      	ldrb	r2, [r2, #0]
  uc_pinTX = _pinTX;
    655c:	54e5      	strb	r5, [r4, r3]
  uc_padRX = _padRX ;
    655e:	4b09      	ldr	r3, [pc, #36]	; (6584 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x6c>)
}
    6560:	0020      	movs	r0, r4
  uc_padRX = _padRX ;
    6562:	54e2      	strb	r2, [r4, r3]
  uc_padTX = _padTX;
    6564:	466a      	mov	r2, sp
    6566:	4b08      	ldr	r3, [pc, #32]	; (6588 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x70>)
    6568:	7912      	ldrb	r2, [r2, #4]
    656a:	54e2      	strb	r2, [r4, r3]
  uc_pinRTS = _pinRTS;
    656c:	228a      	movs	r2, #138	; 0x8a
    656e:	3b29      	subs	r3, #41	; 0x29
    6570:	3bff      	subs	r3, #255	; 0xff
    6572:	0092      	lsls	r2, r2, #2
    6574:	54a3      	strb	r3, [r4, r2]
  uc_pinCTS = _pinCTS;
    6576:	3210      	adds	r2, #16
    6578:	54a3      	strb	r3, [r4, r2]
}
    657a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    657c:	0000db80 	.word	0x0000db80
    6580:	00000225 	.word	0x00000225
    6584:	00000226 	.word	0x00000226
    6588:	00000227 	.word	0x00000227

0000658c <_ZN11RingBufferNILi256EE9availableEv>:
  int delta = _iHead - _iTail;
    658c:	0003      	movs	r3, r0
    658e:	33fc      	adds	r3, #252	; 0xfc
    6590:	6858      	ldr	r0, [r3, #4]
    6592:	689b      	ldr	r3, [r3, #8]
    6594:	1ac0      	subs	r0, r0, r3
  if(delta < 0)
    6596:	d501      	bpl.n	659c <_ZN11RingBufferNILi256EE9availableEv+0x10>
    return N + delta;
    6598:	3001      	adds	r0, #1
    659a:	30ff      	adds	r0, #255	; 0xff
}
    659c:	4770      	bx	lr

0000659e <_ZN4Uart5flushEv>:
{
    659e:	b510      	push	{r4, lr}
    65a0:	0004      	movs	r4, r0
  while(txBuffer.available()); // wait until TX buffer is empty
    65a2:	0020      	movs	r0, r4
    65a4:	301d      	adds	r0, #29
    65a6:	30ff      	adds	r0, #255	; 0xff
    65a8:	f7ff fff0 	bl	658c <_ZN11RingBufferNILi256EE9availableEv>
    65ac:	2800      	cmp	r0, #0
    65ae:	d1f8      	bne.n	65a2 <_ZN4Uart5flushEv+0x4>
  sercom->flushUART();
    65b0:	6920      	ldr	r0, [r4, #16]
    65b2:	f001 fdde 	bl	8172 <_ZN6SERCOM9flushUARTEv>
}
    65b6:	bd10      	pop	{r4, pc}

000065b8 <_ZN4Uart9availableEv>:
{
    65b8:	b510      	push	{r4, lr}
  return rxBuffer.available();
    65ba:	3014      	adds	r0, #20
    65bc:	f7ff ffe6 	bl	658c <_ZN11RingBufferNILi256EE9availableEv>
}
    65c0:	bd10      	pop	{r4, pc}

000065c2 <_ZN11RingBufferNILi256EE17availableForStoreEv>:
  if (_iHead >= _iTail)
    65c2:	0003      	movs	r3, r0
    65c4:	33fc      	adds	r3, #252	; 0xfc
    65c6:	6859      	ldr	r1, [r3, #4]
    65c8:	689a      	ldr	r2, [r3, #8]
    65ca:	4291      	cmp	r1, r2
    65cc:	db04      	blt.n	65d8 <_ZN11RingBufferNILi256EE17availableForStoreEv+0x16>
    return N - 1 - _iHead + _iTail;
    65ce:	685a      	ldr	r2, [r3, #4]
    65d0:	6898      	ldr	r0, [r3, #8]
    65d2:	1a80      	subs	r0, r0, r2
    65d4:	30ff      	adds	r0, #255	; 0xff
}
    65d6:	4770      	bx	lr
    return _iTail - _iHead - 1;
    65d8:	6898      	ldr	r0, [r3, #8]
    65da:	685b      	ldr	r3, [r3, #4]
    65dc:	1ac0      	subs	r0, r0, r3
    65de:	3801      	subs	r0, #1
    65e0:	e7f9      	b.n	65d6 <_ZN11RingBufferNILi256EE17availableForStoreEv+0x14>

000065e2 <_ZN4Uart17availableForWriteEv>:
{
    65e2:	b510      	push	{r4, lr}
  return txBuffer.availableForStore();
    65e4:	301d      	adds	r0, #29
    65e6:	30ff      	adds	r0, #255	; 0xff
    65e8:	f7ff ffeb 	bl	65c2 <_ZN11RingBufferNILi256EE17availableForStoreEv>
}
    65ec:	bd10      	pop	{r4, pc}

000065ee <_ZN4Uart10IrqHandlerEv>:
{
    65ee:	b510      	push	{r4, lr}
    65f0:	0004      	movs	r4, r0
  if (sercom->availableDataUART()) {
    65f2:	6900      	ldr	r0, [r0, #16]
    65f4:	f001 fdc9 	bl	818a <_ZN6SERCOM17availableDataUARTEv>
    65f8:	2800      	cmp	r0, #0
    65fa:	d020      	beq.n	663e <_ZN4Uart10IrqHandlerEv+0x50>
    rxBuffer.store_char(sercom->readDataUART());
    65fc:	6920      	ldr	r0, [r4, #16]
    65fe:	f001 fdd9 	bl	81b4 <_ZN6SERCOM12readDataUARTEv>
  int i = nextIndex(_iHead);
    6602:	0022      	movs	r2, r4
    6604:	32fc      	adds	r2, #252	; 0xfc
    6606:	6993      	ldr	r3, [r2, #24]
  if ( i != _iTail )
    6608:	69d1      	ldr	r1, [r2, #28]
}

template <int N>
int RingBufferN<N>::nextIndex(int index)
{
  return (uint32_t)(index + 1) % N;
    660a:	3301      	adds	r3, #1
    660c:	b2db      	uxtb	r3, r3
  if ( i != _iTail )
    660e:	428b      	cmp	r3, r1
    6610:	d003      	beq.n	661a <_ZN4Uart10IrqHandlerEv+0x2c>
    _aucBuffer[_iHead] = c ;
    6612:	6991      	ldr	r1, [r2, #24]
    6614:	1861      	adds	r1, r4, r1
    6616:	7508      	strb	r0, [r1, #20]
    _iHead = i ;
    6618:	6193      	str	r3, [r2, #24]
    if (uc_pinRTS != NO_RTS_PIN) {
    661a:	238a      	movs	r3, #138	; 0x8a
    661c:	009b      	lsls	r3, r3, #2
    661e:	5ce3      	ldrb	r3, [r4, r3]
    6620:	2bff      	cmp	r3, #255	; 0xff
    6622:	d00c      	beq.n	663e <_ZN4Uart10IrqHandlerEv+0x50>
    rxBuffer.store_char(sercom->readDataUART());
    6624:	0020      	movs	r0, r4
    6626:	3014      	adds	r0, #20
      if (rxBuffer.availableForStore() < RTS_RX_THRESHOLD) {
    6628:	f7ff ffcb 	bl	65c2 <_ZN11RingBufferNILi256EE17availableForStoreEv>
    662c:	2809      	cmp	r0, #9
    662e:	dc06      	bgt.n	663e <_ZN4Uart10IrqHandlerEv+0x50>
        *pul_outsetRTS = ul_pinMaskRTS;
    6630:	238b      	movs	r3, #139	; 0x8b
    6632:	228d      	movs	r2, #141	; 0x8d
    6634:	009b      	lsls	r3, r3, #2
    6636:	0092      	lsls	r2, r2, #2
    6638:	58e3      	ldr	r3, [r4, r3]
    663a:	58a2      	ldr	r2, [r4, r2]
    663c:	601a      	str	r2, [r3, #0]
  if (sercom->isDataRegisterEmptyUART()) {
    663e:	6920      	ldr	r0, [r4, #16]
    6640:	f001 fdb3 	bl	81aa <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    6644:	2800      	cmp	r0, #0
    6646:	d01a      	beq.n	667e <_ZN4Uart10IrqHandlerEv+0x90>
    if (txBuffer.available()) {
    6648:	0020      	movs	r0, r4
    664a:	301d      	adds	r0, #29
    664c:	30ff      	adds	r0, #255	; 0xff
    664e:	f7ff ff9d 	bl	658c <_ZN11RingBufferNILi256EE9availableEv>
    6652:	2800      	cmp	r0, #0
    6654:	d022      	beq.n	669c <_ZN4Uart10IrqHandlerEv+0xae>
  if(_iTail == _iHead)
    6656:	2386      	movs	r3, #134	; 0x86
    6658:	009b      	lsls	r3, r3, #2
    665a:	18e3      	adds	r3, r4, r3
    665c:	6899      	ldr	r1, [r3, #8]
    665e:	685a      	ldr	r2, [r3, #4]
    6660:	4291      	cmp	r1, r2
    6662:	d018      	beq.n	6696 <_ZN4Uart10IrqHandlerEv+0xa8>
  uint8_t value = _aucBuffer[_iTail];
    6664:	218e      	movs	r1, #142	; 0x8e
    6666:	689a      	ldr	r2, [r3, #8]
    6668:	0049      	lsls	r1, r1, #1
    666a:	18a2      	adds	r2, r4, r2
    666c:	5c51      	ldrb	r1, [r2, r1]
  _iTail = nextIndex(_iTail);
    666e:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(index + 1) % N;
    6670:	3201      	adds	r2, #1
    6672:	b2d2      	uxtb	r2, r2
  _iTail = nextIndex(_iTail);
    6674:	609a      	str	r2, [r3, #8]
      sercom->writeDataUART(data);
    6676:	b2c9      	uxtb	r1, r1
    6678:	6920      	ldr	r0, [r4, #16]
    667a:	f001 fd9f 	bl	81bc <_ZN6SERCOM13writeDataUARTEh>
  if (sercom->isUARTError()) {
    667e:	6920      	ldr	r0, [r4, #16]
    6680:	f001 fd88 	bl	8194 <_ZN6SERCOM11isUARTErrorEv>
    6684:	2800      	cmp	r0, #0
    6686:	d005      	beq.n	6694 <_ZN4Uart10IrqHandlerEv+0xa6>
    sercom->acknowledgeUARTError();
    6688:	6920      	ldr	r0, [r4, #16]
    668a:	f001 fd87 	bl	819c <_ZN6SERCOM20acknowledgeUARTErrorEv>
    sercom->clearStatusUART();
    668e:	6920      	ldr	r0, [r4, #16]
    6690:	f001 fd77 	bl	8182 <_ZN6SERCOM15clearStatusUARTEv>
}
    6694:	bd10      	pop	{r4, pc}
    return -1;
    6696:	2101      	movs	r1, #1
    6698:	4249      	negs	r1, r1
    669a:	e7ec      	b.n	6676 <_ZN4Uart10IrqHandlerEv+0x88>
      sercom->disableDataRegisterEmptyInterruptUART();
    669c:	6920      	ldr	r0, [r4, #16]
    669e:	f001 fd99 	bl	81d4 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>
    66a2:	e7ec      	b.n	667e <_ZN4Uart10IrqHandlerEv+0x90>

000066a4 <_ZN4Uart5writeEh>:
{
    66a4:	b570      	push	{r4, r5, r6, lr}
    66a6:	0004      	movs	r4, r0
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    66a8:	6900      	ldr	r0, [r0, #16]
{
    66aa:	000d      	movs	r5, r1
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    66ac:	f001 fd7d 	bl	81aa <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    66b0:	2800      	cmp	r0, #0
    66b2:	d124      	bne.n	66fe <_ZN4Uart5writeEh+0x5a>
  return (uint32_t)(index + 1) % N;
    66b4:	26ff      	movs	r6, #255	; 0xff
}

template <int N>
bool RingBufferN<N>::isFull()
{
  return (nextIndex(_iHead) == _iTail);
    66b6:	2386      	movs	r3, #134	; 0x86
    66b8:	009b      	lsls	r3, r3, #2
    66ba:	18e3      	adds	r3, r4, r3
    66bc:	685a      	ldr	r2, [r3, #4]
    66be:	6899      	ldr	r1, [r3, #8]
  return (uint32_t)(index + 1) % N;
    66c0:	3201      	adds	r2, #1
    66c2:	4032      	ands	r2, r6
    while(txBuffer.isFull()) {
    66c4:	428a      	cmp	r2, r1
    66c6:	d12f      	bne.n	6728 <_ZN4Uart5writeEh+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    66c8:	f3ef 8310 	mrs	r3, PRIMASK
      if (interruptsEnabled) {
    66cc:	07db      	lsls	r3, r3, #31
    66ce:	d40d      	bmi.n	66ec <_ZN4Uart5writeEh+0x48>
        uint32_t exceptionNumber = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk);
    66d0:	4b1e      	ldr	r3, [pc, #120]	; (674c <_ZN4Uart5writeEh+0xa8>)
    66d2:	685b      	ldr	r3, [r3, #4]
    66d4:	05db      	lsls	r3, r3, #23
    66d6:	0ddb      	lsrs	r3, r3, #23
        if (exceptionNumber == 0 ||
    66d8:	d0ed      	beq.n	66b6 <_ZN4Uart5writeEh+0x12>
              NVIC_GetPriority((IRQn_Type)(exceptionNumber - 16)) > SERCOM_NVIC_PRIORITY) {
    66da:	3b10      	subs	r3, #16
    66dc:	b25b      	sxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
    66de:	2b00      	cmp	r3, #0
    66e0:	db19      	blt.n	6716 <_ZN4Uart5writeEh+0x72>
    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    66e2:	089b      	lsrs	r3, r3, #2
    66e4:	33c0      	adds	r3, #192	; 0xc0
    66e6:	4a1a      	ldr	r2, [pc, #104]	; (6750 <_ZN4Uart5writeEh+0xac>)
    66e8:	009b      	lsls	r3, r3, #2
    66ea:	589b      	ldr	r3, [r3, r2]
      if (sercom->isDataRegisterEmptyUART()) {
    66ec:	6920      	ldr	r0, [r4, #16]
    66ee:	f001 fd5c 	bl	81aa <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    66f2:	2800      	cmp	r0, #0
    66f4:	d0df      	beq.n	66b6 <_ZN4Uart5writeEh+0x12>
        IrqHandler();
    66f6:	0020      	movs	r0, r4
    66f8:	f7ff ff79 	bl	65ee <_ZN4Uart10IrqHandlerEv>
    66fc:	e7db      	b.n	66b6 <_ZN4Uart5writeEh+0x12>
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    66fe:	0020      	movs	r0, r4
    6700:	301d      	adds	r0, #29
    6702:	30ff      	adds	r0, #255	; 0xff
    6704:	f7ff ff42 	bl	658c <_ZN11RingBufferNILi256EE9availableEv>
    6708:	2800      	cmp	r0, #0
    670a:	d1d3      	bne.n	66b4 <_ZN4Uart5writeEh+0x10>
    sercom->writeDataUART(data);
    670c:	0029      	movs	r1, r5
    670e:	6920      	ldr	r0, [r4, #16]
    6710:	f001 fd54 	bl	81bc <_ZN6SERCOM13writeDataUARTEh>
  return 1;
    6714:	e017      	b.n	6746 <_ZN4Uart5writeEh+0xa2>
    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    6716:	220f      	movs	r2, #15
    6718:	4013      	ands	r3, r2
    671a:	3b08      	subs	r3, #8
    671c:	089b      	lsrs	r3, r3, #2
    671e:	4a0d      	ldr	r2, [pc, #52]	; (6754 <_ZN4Uart5writeEh+0xb0>)
    6720:	009b      	lsls	r3, r3, #2
    6722:	189b      	adds	r3, r3, r2
    6724:	681b      	ldr	r3, [r3, #0]
    6726:	e7e1      	b.n	66ec <_ZN4Uart5writeEh+0x48>
  int i = nextIndex(_iHead);
    6728:	685a      	ldr	r2, [r3, #4]
  return (uint32_t)(index + 1) % N;
    672a:	3201      	adds	r2, #1
    672c:	4016      	ands	r6, r2
  if ( i != _iTail )
    672e:	689a      	ldr	r2, [r3, #8]
    6730:	4296      	cmp	r6, r2
    6732:	d005      	beq.n	6740 <_ZN4Uart5writeEh+0x9c>
    _aucBuffer[_iHead] = c ;
    6734:	218e      	movs	r1, #142	; 0x8e
    6736:	685a      	ldr	r2, [r3, #4]
    6738:	0049      	lsls	r1, r1, #1
    673a:	18a2      	adds	r2, r4, r2
    673c:	5455      	strb	r5, [r2, r1]
    _iHead = i ;
    673e:	605e      	str	r6, [r3, #4]
    sercom->enableDataRegisterEmptyInterruptUART();
    6740:	6920      	ldr	r0, [r4, #16]
    6742:	f001 fd43 	bl	81cc <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>
}
    6746:	2001      	movs	r0, #1
    6748:	bd70      	pop	{r4, r5, r6, pc}
    674a:	46c0      	nop			; (mov r8, r8)
    674c:	e000ed00 	.word	0xe000ed00
    6750:	e000e100 	.word	0xe000e100
    6754:	e000ed1c 	.word	0xe000ed1c

00006758 <_ZN4Uart4readEv>:
  if(_iTail == _iHead)
    6758:	0003      	movs	r3, r0
    675a:	33fc      	adds	r3, #252	; 0xfc
    675c:	69d9      	ldr	r1, [r3, #28]
    675e:	699a      	ldr	r2, [r3, #24]
{
    6760:	b570      	push	{r4, r5, r6, lr}
    6762:	0004      	movs	r4, r0
    6764:	4291      	cmp	r1, r2
    6766:	d01a      	beq.n	679e <_ZN4Uart4readEv+0x46>
  uint8_t value = _aucBuffer[_iTail];
    6768:	69da      	ldr	r2, [r3, #28]
    676a:	1882      	adds	r2, r0, r2
    676c:	7d15      	ldrb	r5, [r2, #20]
  _iTail = nextIndex(_iTail);
    676e:	69da      	ldr	r2, [r3, #28]
  return (uint32_t)(index + 1) % N;
    6770:	3201      	adds	r2, #1
    6772:	b2d2      	uxtb	r2, r2
  _iTail = nextIndex(_iTail);
    6774:	61da      	str	r2, [r3, #28]
  if (uc_pinRTS != NO_RTS_PIN) {
    6776:	238a      	movs	r3, #138	; 0x8a
    6778:	009b      	lsls	r3, r3, #2
    677a:	5ce3      	ldrb	r3, [r4, r3]
    677c:	2bff      	cmp	r3, #255	; 0xff
    677e:	d00c      	beq.n	679a <_ZN4Uart4readEv+0x42>
  int c = rxBuffer.read_char();
    6780:	0020      	movs	r0, r4
    6782:	3014      	adds	r0, #20
    if (rxBuffer.availableForStore() > RTS_RX_THRESHOLD) {
    6784:	f7ff ff1d 	bl	65c2 <_ZN11RingBufferNILi256EE17availableForStoreEv>
    6788:	280a      	cmp	r0, #10
    678a:	dd06      	ble.n	679a <_ZN4Uart4readEv+0x42>
      *pul_outclrRTS = ul_pinMaskRTS;
    678c:	238c      	movs	r3, #140	; 0x8c
    678e:	228d      	movs	r2, #141	; 0x8d
    6790:	009b      	lsls	r3, r3, #2
    6792:	0092      	lsls	r2, r2, #2
    6794:	58e3      	ldr	r3, [r4, r3]
    6796:	58a2      	ldr	r2, [r4, r2]
    6798:	601a      	str	r2, [r3, #0]
}
    679a:	0028      	movs	r0, r5
    679c:	bd70      	pop	{r4, r5, r6, pc}
    return -1;
    679e:	2501      	movs	r5, #1
    67a0:	426d      	negs	r5, r5
    67a2:	e7e8      	b.n	6776 <_ZN4Uart4readEv+0x1e>

000067a4 <_ZN7Serial_17availableForWriteEv>:
int Serial_::availableForWrite(void)
{
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
}
    67a4:	203f      	movs	r0, #63	; 0x3f
    67a6:	4770      	bx	lr

000067a8 <_ZN7Serial_5writeEh>:
		setWriteError();
		return 0;
	}
}

size_t Serial_::write(uint8_t c) {
    67a8:	b513      	push	{r0, r1, r4, lr}
    67aa:	466b      	mov	r3, sp
	return write(&c, 1);
    67ac:	6802      	ldr	r2, [r0, #0]
size_t Serial_::write(uint8_t c) {
    67ae:	71d9      	strb	r1, [r3, #7]
    67b0:	3307      	adds	r3, #7
	return write(&c, 1);
    67b2:	6854      	ldr	r4, [r2, #4]
    67b4:	0019      	movs	r1, r3
    67b6:	2201      	movs	r2, #1
    67b8:	47a0      	blx	r4
}
    67ba:	bd16      	pop	{r1, r2, r4, pc}

000067bc <_ZN7Serial_9availableEv>:
{
    67bc:	b510      	push	{r4, lr}
	return usb.available(CDC_ENDPOINT_OUT);
    67be:	2102      	movs	r1, #2
    67c0:	6900      	ldr	r0, [r0, #16]
    67c2:	f000 fc29 	bl	7018 <_ZN14USBDeviceClass9availableEm>
}
    67c6:	bd10      	pop	{r4, pc}

000067c8 <_ZN7Serial_5flushEv>:
{
    67c8:	b510      	push	{r4, lr}
	usb.flush(CDC_ENDPOINT_IN);
    67ca:	2103      	movs	r1, #3
    67cc:	6900      	ldr	r0, [r0, #16]
    67ce:	f000 fc39 	bl	7044 <_ZN14USBDeviceClass5flushEm>
}
    67d2:	bd10      	pop	{r4, pc}

000067d4 <_ZN7Serial_5writeEPKhj>:
{
    67d4:	b510      	push	{r4, lr}
    67d6:	0013      	movs	r3, r2
    67d8:	0004      	movs	r4, r0
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
    67da:	000a      	movs	r2, r1
    67dc:	6900      	ldr	r0, [r0, #16]
    67de:	2103      	movs	r1, #3
    67e0:	f000 fd1c 	bl	721c <_ZN14USBDeviceClass4sendEmPKvm>
	if (r > 0) {
    67e4:	2800      	cmp	r0, #0
    67e6:	d101      	bne.n	67ec <_ZN7Serial_5writeEPKhj+0x18>
    void setWriteError(int err = 1) { write_error = err; }
    67e8:	2301      	movs	r3, #1
    67ea:	6063      	str	r3, [r4, #4]
}
    67ec:	bd10      	pop	{r4, pc}
	...

000067f0 <_ZN7Serial_4peekEv>:
{
    67f0:	b510      	push	{r4, lr}
	if (_serialPeek != -1)
    67f2:	4c05      	ldr	r4, [pc, #20]	; (6808 <_ZN7Serial_4peekEv+0x18>)
    67f4:	6823      	ldr	r3, [r4, #0]
    67f6:	1c5a      	adds	r2, r3, #1
    67f8:	d104      	bne.n	6804 <_ZN7Serial_4peekEv+0x14>
	_serialPeek = read();
    67fa:	6803      	ldr	r3, [r0, #0]
    67fc:	695b      	ldr	r3, [r3, #20]
    67fe:	4798      	blx	r3
    6800:	0003      	movs	r3, r0
    6802:	6020      	str	r0, [r4, #0]
}
    6804:	0018      	movs	r0, r3
    6806:	bd10      	pop	{r4, pc}
    6808:	20000058 	.word	0x20000058

0000680c <_ZN7Serial_4readEv>:
	if (_serialPeek != -1) {
    680c:	4b07      	ldr	r3, [pc, #28]	; (682c <_ZN7Serial_4readEv+0x20>)
{
    680e:	0002      	movs	r2, r0
	if (_serialPeek != -1) {
    6810:	6818      	ldr	r0, [r3, #0]
{
    6812:	b510      	push	{r4, lr}
	if (_serialPeek != -1) {
    6814:	1c41      	adds	r1, r0, #1
    6816:	d003      	beq.n	6820 <_ZN7Serial_4readEv+0x14>
		_serialPeek = -1;
    6818:	2201      	movs	r2, #1
    681a:	4252      	negs	r2, r2
    681c:	601a      	str	r2, [r3, #0]
}
    681e:	bd10      	pop	{r4, pc}
	return usb.recv(CDC_ENDPOINT_OUT);
    6820:	2102      	movs	r1, #2
    6822:	6910      	ldr	r0, [r2, #16]
    6824:	f000 fcec 	bl	7200 <_ZN14USBDeviceClass4recvEm>
    6828:	e7f9      	b.n	681e <_ZN7Serial_4readEv+0x12>
    682a:	46c0      	nop			; (mov r8, r8)
    682c:	20000058 	.word	0x20000058

00006830 <_Z16CDC_GetInterfacePh>:
{
    6830:	b510      	push	{r4, lr}
	interfaceNum[0] += 2;	// uses 2
    6832:	7803      	ldrb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    6834:	2242      	movs	r2, #66	; 0x42
	interfaceNum[0] += 2;	// uses 2
    6836:	3302      	adds	r3, #2
    6838:	7003      	strb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    683a:	4902      	ldr	r1, [pc, #8]	; (6844 <_Z16CDC_GetInterfacePh+0x14>)
    683c:	4802      	ldr	r0, [pc, #8]	; (6848 <_Z16CDC_GetInterfacePh+0x18>)
    683e:	f000 fd8d 	bl	735c <_ZN14USBDeviceClass11sendControlEPKvm>
}
    6842:	bd10      	pop	{r4, pc}
    6844:	20000014 	.word	0x20000014
    6848:	20000410 	.word	0x20000410

0000684c <_Z9CDC_SetupR8USBSetup>:
{
    684c:	b510      	push	{r4, lr}
	uint8_t requestType = setup.bmRequestType;
    684e:	7801      	ldrb	r1, [r0, #0]
{
    6850:	0003      	movs	r3, r0
	uint8_t r = setup.bRequest;
    6852:	7842      	ldrb	r2, [r0, #1]
	return false;
    6854:	2000      	movs	r0, #0
	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
    6856:	29a1      	cmp	r1, #161	; 0xa1
    6858:	d108      	bne.n	686c <_Z9CDC_SetupR8USBSetup+0x20>
		if (r == CDC_GET_LINE_CODING)
    685a:	2a21      	cmp	r2, #33	; 0x21
    685c:	d105      	bne.n	686a <_Z9CDC_SetupR8USBSetup+0x1e>
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
    685e:	3a1a      	subs	r2, #26
    6860:	4916      	ldr	r1, [pc, #88]	; (68bc <_Z9CDC_SetupR8USBSetup+0x70>)
    6862:	4817      	ldr	r0, [pc, #92]	; (68c0 <_Z9CDC_SetupR8USBSetup+0x74>)
    6864:	f000 fd7a 	bl	735c <_ZN14USBDeviceClass11sendControlEPKvm>
			return true;
    6868:	2001      	movs	r0, #1
}
    686a:	bd10      	pop	{r4, pc}
	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
    686c:	2921      	cmp	r1, #33	; 0x21
    686e:	d1fc      	bne.n	686a <_Z9CDC_SetupR8USBSetup+0x1e>
		if (r == CDC_SET_LINE_CODING)
    6870:	2a20      	cmp	r2, #32
    6872:	d111      	bne.n	6898 <_Z9CDC_SetupR8USBSetup+0x4c>
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
    6874:	3a19      	subs	r2, #25
    6876:	4911      	ldr	r1, [pc, #68]	; (68bc <_Z9CDC_SetupR8USBSetup+0x70>)
    6878:	4811      	ldr	r0, [pc, #68]	; (68c0 <_Z9CDC_SetupR8USBSetup+0x74>)
    687a:	f000 fc27 	bl	70cc <_ZN14USBDeviceClass11recvControlEPvm>
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & 0x01) == 0)
    687e:	2296      	movs	r2, #150	; 0x96
    6880:	4b0e      	ldr	r3, [pc, #56]	; (68bc <_Z9CDC_SetupR8USBSetup+0x70>)
    6882:	00d2      	lsls	r2, r2, #3
    6884:	6819      	ldr	r1, [r3, #0]
    6886:	4291      	cmp	r1, r2
    6888:	d103      	bne.n	6892 <_Z9CDC_SetupR8USBSetup+0x46>
    688a:	2401      	movs	r4, #1
    688c:	79d8      	ldrb	r0, [r3, #7]
    688e:	4004      	ands	r4, r0
    6890:	d00e      	beq.n	68b0 <_Z9CDC_SetupR8USBSetup+0x64>
				cancelReset();
    6892:	f7ff fc6d 	bl	6170 <cancelReset>
    6896:	e00e      	b.n	68b6 <_Z9CDC_SetupR8USBSetup+0x6a>
		if (r == CDC_SET_CONTROL_LINE_STATE)
    6898:	2a22      	cmp	r2, #34	; 0x22
    689a:	d103      	bne.n	68a4 <_Z9CDC_SetupR8USBSetup+0x58>
			_usbLineInfo.lineState = setup.wValueL;
    689c:	789a      	ldrb	r2, [r3, #2]
    689e:	4b07      	ldr	r3, [pc, #28]	; (68bc <_Z9CDC_SetupR8USBSetup+0x70>)
    68a0:	71da      	strb	r2, [r3, #7]
    68a2:	e7ec      	b.n	687e <_Z9CDC_SetupR8USBSetup+0x32>
		if (CDC_SEND_BREAK == r)
    68a4:	2a23      	cmp	r2, #35	; 0x23
    68a6:	d1e0      	bne.n	686a <_Z9CDC_SetupR8USBSetup+0x1e>
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
    68a8:	885a      	ldrh	r2, [r3, #2]
    68aa:	4b06      	ldr	r3, [pc, #24]	; (68c4 <_Z9CDC_SetupR8USBSetup+0x78>)
    68ac:	601a      	str	r2, [r3, #0]
			return false;
    68ae:	e7dc      	b.n	686a <_Z9CDC_SetupR8USBSetup+0x1e>
				initiateReset(250);
    68b0:	20fa      	movs	r0, #250	; 0xfa
    68b2:	f7ff fc57 	bl	6164 <initiateReset>
			return false;
    68b6:	2000      	movs	r0, #0
    68b8:	e7d7      	b.n	686a <_Z9CDC_SetupR8USBSetup+0x1e>
    68ba:	46c0      	nop			; (mov r8, r8)
    68bc:	2000000c 	.word	0x2000000c
    68c0:	20000410 	.word	0x20000410
    68c4:	20000008 	.word	0x20000008

000068c8 <_ZN7Serial_5beginEm>:
}
    68c8:	4770      	bx	lr
	...

000068cc <_GLOBAL__sub_I__Z17_CDC_GetInterfacev>:
    68cc:	22fa      	movs	r2, #250	; 0xfa
    Print() : write_error(0) {}
    68ce:	2100      	movs	r1, #0
    68d0:	4b05      	ldr	r3, [pc, #20]	; (68e8 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x1c>)
    68d2:	0092      	lsls	r2, r2, #2
    68d4:	609a      	str	r2, [r3, #8]
//	Serial over CDC (Serial1 is the physical port)

class Serial_ : public Stream
{
public:
	Serial_(USBDeviceClass &_usb) : usb(_usb), stalled(false) { }
    68d6:	4a05      	ldr	r2, [pc, #20]	; (68ec <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x20>)
    68d8:	6059      	str	r1, [r3, #4]
    68da:	3208      	adds	r2, #8
    68dc:	601a      	str	r2, [r3, #0]
    68de:	4a04      	ldr	r2, [pc, #16]	; (68f0 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x24>)
    68e0:	7619      	strb	r1, [r3, #24]
    68e2:	611a      	str	r2, [r3, #16]

bool Serial_::rts() {
	return _usbLineInfo.lineState & 0x2;
}

Serial_ SerialUSB(USBDevice);
    68e4:	4770      	bx	lr
    68e6:	46c0      	nop			; (mov r8, r8)
    68e8:	200003f4 	.word	0x200003f4
    68ec:	0000dbb4 	.word	0x0000dbb4
    68f0:	20000410 	.word	0x20000410

000068f4 <_ZL5utox8mPc>:
	packMessages(false);

	return true;
}

static void utox8(uint32_t val, char* s) {
    68f4:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < 8; i++) {
		int d = val & 0XF;
    68f6:	250f      	movs	r5, #15
    68f8:	1dcb      	adds	r3, r1, #7
    68fa:	3901      	subs	r1, #1
    68fc:	0002      	movs	r2, r0
    68fe:	402a      	ands	r2, r5
		val = (val >> 4);

		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    6900:	0014      	movs	r4, r2
		val = (val >> 4);
    6902:	0900      	lsrs	r0, r0, #4
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    6904:	3430      	adds	r4, #48	; 0x30
    6906:	2a09      	cmp	r2, #9
    6908:	dd01      	ble.n	690e <_ZL5utox8mPc+0x1a>
    690a:	3237      	adds	r2, #55	; 0x37
    690c:	0014      	movs	r4, r2
    690e:	701c      	strb	r4, [r3, #0]
    6910:	3b01      	subs	r3, #1
	for (int i = 0; i < 8; i++) {
    6912:	428b      	cmp	r3, r1
    6914:	d1f2      	bne.n	68fc <_ZL5utox8mPc+0x8>
	}
}
    6916:	bd30      	pop	{r4, r5, pc}

00006918 <_ZN14USBDeviceClass6initEPEmm.part.5>:
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
		initEP(i, EndPoints[i]);
	}
}

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
    6918:	b570      	push	{r4, r5, r6, lr}
	{
		if (epHandlers[ep] == NULL) {
			epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
		}
	}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0)))
    691a:	2982      	cmp	r1, #130	; 0x82
    691c:	d11f      	bne.n	695e <_ZN14USBDeviceClass6initEPEmm.part.5+0x46>
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    691e:	b2c3      	uxtb	r3, r0
    6920:	4d2c      	ldr	r5, [pc, #176]	; (69d4 <_ZN14USBDeviceClass6initEPEmm.part.5+0xbc>)
    6922:	015a      	lsls	r2, r3, #5
    6924:	18aa      	adds	r2, r5, r2
    6926:	6991      	ldr	r1, [r2, #24]
    6928:	4c2b      	ldr	r4, [pc, #172]	; (69d8 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc0>)
	{
		usbd.epBank1SetSize(ep, 64);
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    692a:	0180      	lsls	r0, r0, #6
    692c:	400c      	ands	r4, r1
    692e:	21c0      	movs	r1, #192	; 0xc0
    6930:	0589      	lsls	r1, r1, #22
    6932:	4321      	orrs	r1, r4
    6934:	6191      	str	r1, [r2, #24]
    6936:	4929      	ldr	r1, [pc, #164]	; (69dc <_ZN14USBDeviceClass6initEPEmm.part.5+0xc4>)
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    6938:	3308      	adds	r3, #8
    693a:	1808      	adds	r0, r1, r0
    693c:	2180      	movs	r1, #128	; 0x80
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    693e:	6150      	str	r0, [r2, #20]
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    6940:	682a      	ldr	r2, [r5, #0]
    6942:	015b      	lsls	r3, r3, #5
    6944:	18d0      	adds	r0, r2, r3
    6946:	7904      	ldrb	r4, [r0, #4]
    6948:	4249      	negs	r1, r1
    694a:	4321      	orrs	r1, r4
    694c:	7101      	strb	r1, [r0, #4]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    694e:	2070      	movs	r0, #112	; 0x70
    6950:	5c99      	ldrb	r1, [r3, r2]
    6952:	4381      	bics	r1, r0
    6954:	0008      	movs	r0, r1
    6956:	2130      	movs	r1, #48	; 0x30
    6958:	4301      	orrs	r1, r0
    695a:	5499      	strb	r1, [r3, r2]
		usbd.epBank0SetByteCount(ep, 0);

		// NAK on endpoint OUT, the bank is full.
		usbd.epBank0SetReady(ep);
	}
}
    695c:	bd70      	pop	{r4, r5, r6, pc}
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
    695e:	2900      	cmp	r1, #0
    6960:	d1fc      	bne.n	695c <_ZN14USBDeviceClass6initEPEmm.part.5+0x44>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    6962:	24c0      	movs	r4, #192	; 0xc0
    6964:	b2c1      	uxtb	r1, r0
    6966:	4e1b      	ldr	r6, [pc, #108]	; (69d4 <_ZN14USBDeviceClass6initEPEmm.part.5+0xbc>)
    6968:	014b      	lsls	r3, r1, #5
    696a:	18f3      	adds	r3, r6, r3
    696c:	689a      	ldr	r2, [r3, #8]
    696e:	4d1a      	ldr	r5, [pc, #104]	; (69d8 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc0>)
    6970:	05a4      	lsls	r4, r4, #22
    6972:	402a      	ands	r2, r5
    6974:	4322      	orrs	r2, r4
    6976:	609a      	str	r2, [r3, #8]
		usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    6978:	4a19      	ldr	r2, [pc, #100]	; (69e0 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc8>)
    697a:	0180      	lsls	r0, r0, #6
    697c:	1810      	adds	r0, r2, r0
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    697e:	000a      	movs	r2, r1
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    6980:	6058      	str	r0, [r3, #4]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    6982:	6830      	ldr	r0, [r6, #0]
    6984:	2607      	movs	r6, #7
    6986:	3208      	adds	r2, #8
    6988:	0152      	lsls	r2, r2, #5
    698a:	5c11      	ldrb	r1, [r2, r0]
    698c:	43b1      	bics	r1, r6
    698e:	000e      	movs	r6, r1
    6990:	2101      	movs	r1, #1
    6992:	4331      	orrs	r1, r6
    6994:	5411      	strb	r1, [r2, r0]
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    6996:	6999      	ldr	r1, [r3, #24]
    6998:	400d      	ands	r5, r1
    699a:	432c      	orrs	r4, r5
    699c:	619c      	str	r4, [r3, #24]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    699e:	2470      	movs	r4, #112	; 0x70
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    69a0:	490e      	ldr	r1, [pc, #56]	; (69dc <_ZN14USBDeviceClass6initEPEmm.part.5+0xc4>)
    69a2:	6159      	str	r1, [r3, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    69a4:	5c11      	ldrb	r1, [r2, r0]
    69a6:	43a1      	bics	r1, r4
    69a8:	000c      	movs	r4, r1
    69aa:	2110      	movs	r1, #16
    69ac:	4321      	orrs	r1, r4
    69ae:	5411      	strb	r1, [r2, r0]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    69b0:	6899      	ldr	r1, [r3, #8]
    69b2:	4c0c      	ldr	r4, [pc, #48]	; (69e4 <_ZN14USBDeviceClass6initEPEmm.part.5+0xcc>)
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
    69b4:	1882      	adds	r2, r0, r2
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    69b6:	400c      	ands	r4, r1
    69b8:	2180      	movs	r1, #128	; 0x80
    69ba:	0349      	lsls	r1, r1, #13
    69bc:	4321      	orrs	r1, r4
    69be:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    69c0:	6899      	ldr	r1, [r3, #8]
    69c2:	0b89      	lsrs	r1, r1, #14
    69c4:	0389      	lsls	r1, r1, #14
    69c6:	6099      	str	r1, [r3, #8]
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
    69c8:	2340      	movs	r3, #64	; 0x40
    69ca:	7951      	ldrb	r1, [r2, #5]
    69cc:	430b      	orrs	r3, r1
    69ce:	7153      	strb	r3, [r2, #5]
    69d0:	e7c4      	b.n	695c <_ZN14USBDeviceClass6initEPEmm.part.5+0x44>
    69d2:	46c0      	nop			; (mov r8, r8)
    69d4:	200008c8 	.word	0x200008c8
    69d8:	8fffffff 	.word	0x8fffffff
    69dc:	2000043c 	.word	0x2000043c
    69e0:	200005fc 	.word	0x200005fc
    69e4:	f0003fff 	.word	0xf0003fff

000069e8 <_ZN20USBDevice_SAMD21G18x5resetEv>:

	// Endpoints descriptors table
	__attribute__((__aligned__(4)))	UsbDeviceDescriptor EP[USB_EPT_NUM];
};

void USBDevice_SAMD21G18x::reset() {
    69e8:	b570      	push	{r4, r5, r6, lr}
	usb.CTRLA.bit.SWRST = 1;
    69ea:	0004      	movs	r4, r0
    69ec:	2301      	movs	r3, #1
    69ee:	cc20      	ldmia	r4!, {r5}
	memset(EP, 0, sizeof(EP));
    69f0:	2100      	movs	r1, #0
	usb.CTRLA.bit.SWRST = 1;
    69f2:	782a      	ldrb	r2, [r5, #0]
	memset(EP, 0, sizeof(EP));
    69f4:	0020      	movs	r0, r4
	usb.CTRLA.bit.SWRST = 1;
    69f6:	4313      	orrs	r3, r2
	memset(EP, 0, sizeof(EP));
    69f8:	2280      	movs	r2, #128	; 0x80
	usb.CTRLA.bit.SWRST = 1;
    69fa:	702b      	strb	r3, [r5, #0]
	memset(EP, 0, sizeof(EP));
    69fc:	0052      	lsls	r2, r2, #1
    69fe:	f004 fd90 	bl	b522 <memset>
	while (usb.SYNCBUSY.bit.SWRST) {}
    6a02:	78ab      	ldrb	r3, [r5, #2]
    6a04:	07db      	lsls	r3, r3, #31
    6a06:	d4fc      	bmi.n	6a02 <_ZN20USBDevice_SAMD21G18x5resetEv+0x1a>
	usb.DESCADD.reg = (uint32_t)(&EP);
    6a08:	626c      	str	r4, [r5, #36]	; 0x24
}
    6a0a:	bd70      	pop	{r4, r5, r6, pc}

00006a0c <_ZN20USBDevice_SAMD21G18x9calibrateEv>:
	// Load Pad Calibration data from non-volatile memory
	uint32_t *pad_transn_p = (uint32_t *) USB_FUSES_TRANSN_ADDR;
	uint32_t *pad_transp_p = (uint32_t *) USB_FUSES_TRANSP_ADDR;
	uint32_t *pad_trim_p   = (uint32_t *) USB_FUSES_TRIM_ADDR;

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    6a0c:	221f      	movs	r2, #31
    6a0e:	4b14      	ldr	r3, [pc, #80]	; (6a60 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x54>)
void USBDevice_SAMD21G18x::calibrate() {
    6a10:	b570      	push	{r4, r5, r6, lr}
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    6a12:	681b      	ldr	r3, [r3, #0]
    6a14:	0b59      	lsrs	r1, r3, #13
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    6a16:	0c9c      	lsrs	r4, r3, #18
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    6a18:	019b      	lsls	r3, r3, #6
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    6a1a:	4011      	ands	r1, r2
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    6a1c:	0f5b      	lsrs	r3, r3, #29
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    6a1e:	4022      	ands	r2, r4

	if (pad_transn == 0x1F)  // maximum value (31)
    6a20:	291f      	cmp	r1, #31
    6a22:	d100      	bne.n	6a26 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x1a>
		pad_transn = 5;
    6a24:	391a      	subs	r1, #26
	if (pad_transp == 0x1F)  // maximum value (31)
    6a26:	2a1f      	cmp	r2, #31
    6a28:	d100      	bne.n	6a2c <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x20>
		pad_transp = 29;
    6a2a:	3a02      	subs	r2, #2
	if (pad_trim == 0x7)     // maximum value (7)
    6a2c:	2b07      	cmp	r3, #7
    6a2e:	d100      	bne.n	6a32 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x26>
		pad_trim = 3;
    6a30:	3b04      	subs	r3, #4

	usb.PADCAL.bit.TRANSN = pad_transn;
    6a32:	251f      	movs	r5, #31
    6a34:	6800      	ldr	r0, [r0, #0]
    6a36:	018e      	lsls	r6, r1, #6
    6a38:	8d04      	ldrh	r4, [r0, #40]	; 0x28
    6a3a:	490a      	ldr	r1, [pc, #40]	; (6a64 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x58>)
	usb.PADCAL.bit.TRANSP = pad_transp;
    6a3c:	402a      	ands	r2, r5
	usb.PADCAL.bit.TRANSN = pad_transn;
    6a3e:	4021      	ands	r1, r4
    6a40:	4331      	orrs	r1, r6
    6a42:	8501      	strh	r1, [r0, #40]	; 0x28
	usb.PADCAL.bit.TRANSP = pad_transp;
    6a44:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    6a46:	0014      	movs	r4, r2
    6a48:	000a      	movs	r2, r1
    6a4a:	43aa      	bics	r2, r5
    6a4c:	4322      	orrs	r2, r4
    6a4e:	8502      	strh	r2, [r0, #40]	; 0x28
	usb.PADCAL.bit.TRIM   = pad_trim;
    6a50:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    6a52:	0319      	lsls	r1, r3, #12
    6a54:	4b04      	ldr	r3, [pc, #16]	; (6a68 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x5c>)
    6a56:	4013      	ands	r3, r2
    6a58:	430b      	orrs	r3, r1
    6a5a:	8503      	strh	r3, [r0, #40]	; 0x28
}
    6a5c:	bd70      	pop	{r4, r5, r6, pc}
    6a5e:	46c0      	nop			; (mov r8, r8)
    6a60:	00806024 	.word	0x00806024
    6a64:	fffff83f 	.word	0xfffff83f
    6a68:	ffff8fff 	.word	0xffff8fff

00006a6c <_ZN7__GuardC1Ev>:
    6a6c:	f3ef 8310 	mrs	r3, PRIMASK
 * TODO: Move into a separate header file and make an API out of it
 */

class __Guard {
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
    6a70:	6003      	str	r3, [r0, #0]
    6a72:	2301      	movs	r3, #1
    6a74:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    6a76:	b672      	cpsid	i
		__disable_irq();
	}
    6a78:	4770      	bx	lr

00006a7a <_ZN7__GuardD1Ev>:
	~__Guard() {
		if (primask == 0) {
    6a7a:	6803      	ldr	r3, [r0, #0]
    6a7c:	2b00      	cmp	r3, #0
    6a7e:	d102      	bne.n	6a86 <_ZN7__GuardD1Ev+0xc>
  __ASM volatile ("cpsie i" : : : "memory");
    6a80:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
    6a82:	f3bf 8f6f 	isb	sy
			__enable_irq();
			// http://infocenter.arm.com/help/topic/com.arm.doc.dai0321a/BIHBFEIB.html
			__ISB();
		}
	}
    6a86:	4770      	bx	lr

00006a88 <_ZNK26DoubleBufferedEPOutHandler9availableEv>:
			release();
		}
	}

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
    6a88:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (current == 0) {
    6a8a:	6905      	ldr	r5, [r0, #16]
	virtual uint32_t available() const {
    6a8c:	0004      	movs	r4, r0
			bool ready = false;
			synchronized {
    6a8e:	4668      	mov	r0, sp
		if (current == 0) {
    6a90:	2d00      	cmp	r5, #0
    6a92:	d114      	bne.n	6abe <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x36>
			synchronized {
    6a94:	f7ff ffea 	bl	6a6c <_ZN7__GuardC1Ev>
    6a98:	9b01      	ldr	r3, [sp, #4]
				ready = ready0;
    6a9a:	1d62      	adds	r2, r4, #5
			synchronized {
    6a9c:	3b01      	subs	r3, #1
    6a9e:	d302      	bcc.n	6aa6 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x1e>
				ready = ready0;
    6aa0:	7fd5      	ldrb	r5, [r2, #31]
    6aa2:	b2ed      	uxtb	r5, r5
    6aa4:	e7fa      	b.n	6a9c <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x14>
			synchronized {
    6aa6:	4668      	mov	r0, sp
    6aa8:	9301      	str	r3, [sp, #4]
    6aaa:	f7ff ffe6 	bl	6a7a <_ZN7__GuardD1Ev>
			}
			return ready ? (last0 - first0) : 0;
    6aae:	2d00      	cmp	r5, #0
    6ab0:	d101      	bne.n	6ab6 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2e>
    6ab2:	2000      	movs	r0, #0
			synchronized {
				ready = ready1;
			}
			return ready ? (last1 - first1) : 0;
		}
	}
    6ab4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
			return ready ? (last0 - first0) : 0;
    6ab6:	6a20      	ldr	r0, [r4, #32]
    6ab8:	69e3      	ldr	r3, [r4, #28]
			return ready ? (last1 - first1) : 0;
    6aba:	1ac0      	subs	r0, r0, r3
    6abc:	e7fa      	b.n	6ab4 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2c>
			synchronized {
    6abe:	f7ff ffd5 	bl	6a6c <_ZN7__GuardC1Ev>
				ready = ready1;
    6ac2:	0022      	movs	r2, r4
			bool ready = false;
    6ac4:	2500      	movs	r5, #0
    6ac6:	9b01      	ldr	r3, [sp, #4]
				ready = ready1;
    6ac8:	3234      	adds	r2, #52	; 0x34
			synchronized {
    6aca:	3b01      	subs	r3, #1
    6acc:	d302      	bcc.n	6ad4 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x4c>
				ready = ready1;
    6ace:	7815      	ldrb	r5, [r2, #0]
    6ad0:	b2ed      	uxtb	r5, r5
			synchronized {
    6ad2:	e7fa      	b.n	6aca <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x42>
    6ad4:	4668      	mov	r0, sp
    6ad6:	9301      	str	r3, [sp, #4]
    6ad8:	f7ff ffcf 	bl	6a7a <_ZN7__GuardD1Ev>
			return ready ? (last1 - first1) : 0;
    6adc:	2d00      	cmp	r5, #0
    6ade:	d0e8      	beq.n	6ab2 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2a>
    6ae0:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6ae2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6ae4:	e7e9      	b.n	6aba <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x32>
	...

00006ae8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>:

	void release() {
    6ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    6aea:	2501      	movs	r5, #1
		// Release OUT EP
		usbd.epBank0EnableTransferComplete(ep);
    6aec:	6846      	ldr	r6, [r0, #4]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    6aee:	7a03      	ldrb	r3, [r0, #8]
    6af0:	6831      	ldr	r1, [r6, #0]
    6af2:	015a      	lsls	r2, r3, #5
    6af4:	188c      	adds	r4, r1, r2
    6af6:	34ff      	adds	r4, #255	; 0xff
    6af8:	7aa7      	ldrb	r7, [r4, #10]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    6afa:	18b2      	adds	r2, r6, r2
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    6afc:	433d      	orrs	r5, r7
    6afe:	72a5      	strb	r5, [r4, #10]
		usbd.epBank0SetMultiPacketSize(ep, size);
    6b00:	68c4      	ldr	r4, [r0, #12]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    6b02:	4d09      	ldr	r5, [pc, #36]	; (6b28 <_ZN26DoubleBufferedEPOutHandler7releaseEv+0x40>)
    6b04:	6890      	ldr	r0, [r2, #8]
    6b06:	04a4      	lsls	r4, r4, #18
    6b08:	4028      	ands	r0, r5
    6b0a:	0924      	lsrs	r4, r4, #4
    6b0c:	4320      	orrs	r0, r4
    6b0e:	6090      	str	r0, [r2, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    6b10:	6890      	ldr	r0, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    6b12:	3308      	adds	r3, #8
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    6b14:	0b80      	lsrs	r0, r0, #14
    6b16:	0380      	lsls	r0, r0, #14
    6b18:	6090      	str	r0, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    6b1a:	2240      	movs	r2, #64	; 0x40
    6b1c:	015b      	lsls	r3, r3, #5
    6b1e:	18cb      	adds	r3, r1, r3
    6b20:	7919      	ldrb	r1, [r3, #4]
    6b22:	430a      	orrs	r2, r1
    6b24:	711a      	strb	r2, [r3, #4]
		usbd.epBank0SetByteCount(ep, 0);
		usbd.epBank0ResetReady(ep);
	}
    6b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6b28:	f0003fff 	.word	0xf0003fff

00006b2c <_ZN26DoubleBufferedEPOutHandler4recvEPvm>:
	virtual uint32_t recv(void *_data, uint32_t len)
    6b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if (current == 0) {
    6b2e:	6903      	ldr	r3, [r0, #16]
	virtual uint32_t recv(void *_data, uint32_t len)
    6b30:	0004      	movs	r4, r0
    6b32:	000e      	movs	r6, r1
    6b34:	0017      	movs	r7, r2
			synchronized {
    6b36:	4668      	mov	r0, sp
		if (current == 0) {
    6b38:	2b00      	cmp	r3, #0
    6b3a:	d13d      	bne.n	6bb8 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x8c>
			synchronized {
    6b3c:	f7ff ff96 	bl	6a6c <_ZN7__GuardC1Ev>
    6b40:	9b01      	ldr	r3, [sp, #4]
				if (!ready0) {
    6b42:	1d61      	adds	r1, r4, #5
    6b44:	3b01      	subs	r3, #1
			synchronized {
    6b46:	1c5a      	adds	r2, r3, #1
    6b48:	d00c      	beq.n	6b64 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x38>
				if (!ready0) {
    6b4a:	7fcd      	ldrb	r5, [r1, #31]
    6b4c:	1e5a      	subs	r2, r3, #1
    6b4e:	b2ed      	uxtb	r5, r5
    6b50:	2d00      	cmp	r5, #0
    6b52:	d105      	bne.n	6b60 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x34>
				synchronized {
    6b54:	4668      	mov	r0, sp
    6b56:	9301      	str	r3, [sp, #4]
    6b58:	f7ff ff8f 	bl	6a7a <_ZN7__GuardD1Ev>
	}
    6b5c:	0028      	movs	r0, r5
    6b5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6b60:	0013      	movs	r3, r2
    6b62:	e7f0      	b.n	6b46 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1a>
			synchronized {
    6b64:	4668      	mov	r0, sp
    6b66:	9301      	str	r3, [sp, #4]
			for (i=0; i<len && first0 < last0; i++) {
    6b68:	2500      	movs	r5, #0
			synchronized {
    6b6a:	f7ff ff86 	bl	6a7a <_ZN7__GuardD1Ev>
    6b6e:	69e3      	ldr	r3, [r4, #28]
			for (i=0; i<len && first0 < last0; i++) {
    6b70:	42af      	cmp	r7, r5
    6b72:	d002      	beq.n	6b7a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x4e>
    6b74:	6a22      	ldr	r2, [r4, #32]
    6b76:	4293      	cmp	r3, r2
    6b78:	d357      	bcc.n	6c2a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xfe>
			if (first0 == last0) {
    6b7a:	6a22      	ldr	r2, [r4, #32]
    6b7c:	4293      	cmp	r3, r2
    6b7e:	d1ed      	bne.n	6b5c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x30>
				first0 = 0;
    6b80:	2300      	movs	r3, #0
    6b82:	61e3      	str	r3, [r4, #28]
				current = 1;
    6b84:	3301      	adds	r3, #1
    6b86:	6123      	str	r3, [r4, #16]
				synchronized {
    6b88:	4668      	mov	r0, sp
    6b8a:	f7ff ff6f 	bl	6a6c <_ZN7__GuardC1Ev>
					if (notify) {
    6b8e:	0022      	movs	r2, r4
					ready0 = false;
    6b90:	2100      	movs	r1, #0
    6b92:	9b01      	ldr	r3, [sp, #4]
    6b94:	1d67      	adds	r7, r4, #5
    6b96:	3b01      	subs	r3, #1
					if (notify) {
    6b98:	3235      	adds	r2, #53	; 0x35
				synchronized {
    6b9a:	1c58      	adds	r0, r3, #1
    6b9c:	d0da      	beq.n	6b54 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
					ready0 = false;
    6b9e:	77f9      	strb	r1, [r7, #31]
					if (notify) {
    6ba0:	7810      	ldrb	r0, [r2, #0]
    6ba2:	1e5e      	subs	r6, r3, #1
    6ba4:	2800      	cmp	r0, #0
    6ba6:	d005      	beq.n	6bb4 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x88>
						notify = false;
    6ba8:	7011      	strb	r1, [r2, #0]
						release();
    6baa:	0020      	movs	r0, r4
    6bac:	9301      	str	r3, [sp, #4]
    6bae:	f7ff ff9b 	bl	6ae8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    6bb2:	e7ec      	b.n	6b8e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x62>
					if (notify) {
    6bb4:	0033      	movs	r3, r6
    6bb6:	e7f0      	b.n	6b9a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x6e>
			synchronized {
    6bb8:	f7ff ff58 	bl	6a6c <_ZN7__GuardC1Ev>
				if (!ready1) {
    6bbc:	0021      	movs	r1, r4
    6bbe:	9b01      	ldr	r3, [sp, #4]
    6bc0:	3134      	adds	r1, #52	; 0x34
    6bc2:	3b01      	subs	r3, #1
			synchronized {
    6bc4:	1c5a      	adds	r2, r3, #1
    6bc6:	d006      	beq.n	6bd6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xaa>
				if (!ready1) {
    6bc8:	780d      	ldrb	r5, [r1, #0]
    6bca:	1e5a      	subs	r2, r3, #1
    6bcc:	b2ed      	uxtb	r5, r5
    6bce:	2d00      	cmp	r5, #0
    6bd0:	d0c0      	beq.n	6b54 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
    6bd2:	0013      	movs	r3, r2
    6bd4:	e7f6      	b.n	6bc4 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x98>
			synchronized {
    6bd6:	4668      	mov	r0, sp
    6bd8:	9301      	str	r3, [sp, #4]
			for (i=0; i<len && first1 < last1; i++) {
    6bda:	2500      	movs	r5, #0
			synchronized {
    6bdc:	f7ff ff4d 	bl	6a7a <_ZN7__GuardD1Ev>
    6be0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			for (i=0; i<len && first1 < last1; i++) {
    6be2:	42bd      	cmp	r5, r7
    6be4:	d002      	beq.n	6bec <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xc0>
    6be6:	6b22      	ldr	r2, [r4, #48]	; 0x30
    6be8:	4293      	cmp	r3, r2
    6bea:	d326      	bcc.n	6c3a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x10e>
			if (first1 == last1) {
    6bec:	6b22      	ldr	r2, [r4, #48]	; 0x30
    6bee:	4293      	cmp	r3, r2
    6bf0:	d1b4      	bne.n	6b5c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x30>
				first1 = 0;
    6bf2:	2300      	movs	r3, #0
				synchronized {
    6bf4:	4668      	mov	r0, sp
				first1 = 0;
    6bf6:	62e3      	str	r3, [r4, #44]	; 0x2c
				current = 0;
    6bf8:	6123      	str	r3, [r4, #16]
				synchronized {
    6bfa:	f7ff ff37 	bl	6a6c <_ZN7__GuardC1Ev>
					ready1 = false;
    6bfe:	0027      	movs	r7, r4
					if (notify) {
    6c00:	0022      	movs	r2, r4
					ready1 = false;
    6c02:	2100      	movs	r1, #0
    6c04:	9b01      	ldr	r3, [sp, #4]
    6c06:	3734      	adds	r7, #52	; 0x34
    6c08:	3b01      	subs	r3, #1
					if (notify) {
    6c0a:	3235      	adds	r2, #53	; 0x35
				synchronized {
    6c0c:	1c58      	adds	r0, r3, #1
    6c0e:	d0a1      	beq.n	6b54 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
					ready1 = false;
    6c10:	7039      	strb	r1, [r7, #0]
					if (notify) {
    6c12:	7810      	ldrb	r0, [r2, #0]
    6c14:	1e5e      	subs	r6, r3, #1
    6c16:	2800      	cmp	r0, #0
    6c18:	d005      	beq.n	6c26 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xfa>
						notify = false;
    6c1a:	7011      	strb	r1, [r2, #0]
						release();
    6c1c:	0020      	movs	r0, r4
    6c1e:	9301      	str	r3, [sp, #4]
    6c20:	f7ff ff62 	bl	6ae8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    6c24:	e7eb      	b.n	6bfe <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xd2>
    6c26:	0033      	movs	r3, r6
    6c28:	e7f0      	b.n	6c0c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xe0>
				data[i] = data0[first0++];
    6c2a:	1c5a      	adds	r2, r3, #1
    6c2c:	61e2      	str	r2, [r4, #28]
    6c2e:	69a2      	ldr	r2, [r4, #24]
    6c30:	18d3      	adds	r3, r2, r3
    6c32:	781b      	ldrb	r3, [r3, #0]
    6c34:	5573      	strb	r3, [r6, r5]
			for (i=0; i<len && first0 < last0; i++) {
    6c36:	3501      	adds	r5, #1
    6c38:	e799      	b.n	6b6e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x42>
				data[i] = data1[first1++];
    6c3a:	1c5a      	adds	r2, r3, #1
    6c3c:	62e2      	str	r2, [r4, #44]	; 0x2c
    6c3e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    6c40:	18d3      	adds	r3, r2, r3
    6c42:	781b      	ldrb	r3, [r3, #0]
    6c44:	5573      	strb	r3, [r6, r5]
			for (i=0; i<len && first1 < last1; i++) {
    6c46:	3501      	adds	r5, #1
    6c48:	e7ca      	b.n	6be0 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xb4>

00006c4a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv>:
	virtual void handleEndpoint()
    6c4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    6c4c:	7a02      	ldrb	r2, [r0, #8]
		if (usbd.epBank0IsTransferComplete(ep))
    6c4e:	6843      	ldr	r3, [r0, #4]
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    6c50:	0011      	movs	r1, r2
	virtual void handleEndpoint()
    6c52:	0004      	movs	r4, r0
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    6c54:	3108      	adds	r1, #8
    6c56:	6818      	ldr	r0, [r3, #0]
    6c58:	0149      	lsls	r1, r1, #5
    6c5a:	1841      	adds	r1, r0, r1
    6c5c:	79c8      	ldrb	r0, [r1, #7]
		if (usbd.epBank0IsTransferComplete(ep))
    6c5e:	07c0      	lsls	r0, r0, #31
    6c60:	d527      	bpl.n	6cb2 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    6c62:	2501      	movs	r5, #1
    6c64:	0152      	lsls	r2, r2, #5
    6c66:	71cd      	strb	r5, [r1, #7]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    6c68:	189b      	adds	r3, r3, r2
    6c6a:	689a      	ldr	r2, [r3, #8]
			if (incoming == 0) {
    6c6c:	6961      	ldr	r1, [r4, #20]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    6c6e:	0492      	lsls	r2, r2, #18
    6c70:	0c92      	lsrs	r2, r2, #18
			if (incoming == 0) {
    6c72:	2900      	cmp	r1, #0
    6c74:	d121      	bne.n	6cba <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x70>
				last0 = usbd.epBank0ByteCount(ep);
    6c76:	6222      	str	r2, [r4, #32]
				if (last0 != 0) {
    6c78:	6a22      	ldr	r2, [r4, #32]
    6c7a:	2a00      	cmp	r2, #0
    6c7c:	d03e      	beq.n	6cfc <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb2>
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    6c7e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					incoming = 1;
    6c80:	6165      	str	r5, [r4, #20]
					synchronized {
    6c82:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    6c84:	605a      	str	r2, [r3, #4]
					synchronized {
    6c86:	f7ff fef1 	bl	6a6c <_ZN7__GuardC1Ev>
						if (ready1) {
    6c8a:	0027      	movs	r7, r4
    6c8c:	0021      	movs	r1, r4
    6c8e:	9b01      	ldr	r3, [sp, #4]
						ready0 = true;
    6c90:	1d66      	adds	r6, r4, #5
    6c92:	3b01      	subs	r3, #1
						if (ready1) {
    6c94:	3734      	adds	r7, #52	; 0x34
    6c96:	3135      	adds	r1, #53	; 0x35
					synchronized {
    6c98:	1c5a      	adds	r2, r3, #1
    6c9a:	d02b      	beq.n	6cf4 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xaa>
						ready0 = true;
    6c9c:	77f5      	strb	r5, [r6, #31]
						if (ready1) {
    6c9e:	783a      	ldrb	r2, [r7, #0]
    6ca0:	1e58      	subs	r0, r3, #1
    6ca2:	b2d2      	uxtb	r2, r2
    6ca4:	2a00      	cmp	r2, #0
    6ca6:	d005      	beq.n	6cb4 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x6a>
    6ca8:	9301      	str	r3, [sp, #4]
							return;
    6caa:	4668      	mov	r0, sp
							notify = true;
    6cac:	700d      	strb	r5, [r1, #0]
							return;
    6cae:	f7ff fee4 	bl	6a7a <_ZN7__GuardD1Ev>
	}
    6cb2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
						notify = false;
    6cb4:	700a      	strb	r2, [r1, #0]
					synchronized {
    6cb6:	0003      	movs	r3, r0
    6cb8:	e7ee      	b.n	6c98 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x4e>
				last1 = usbd.epBank0ByteCount(ep);
    6cba:	6322      	str	r2, [r4, #48]	; 0x30
				if (last1 != 0) {
    6cbc:	6b22      	ldr	r2, [r4, #48]	; 0x30
    6cbe:	2a00      	cmp	r2, #0
    6cc0:	d01c      	beq.n	6cfc <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb2>
					incoming = 0;
    6cc2:	2200      	movs	r2, #0
    6cc4:	6162      	str	r2, [r4, #20]
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    6cc6:	69a2      	ldr	r2, [r4, #24]
					synchronized {
    6cc8:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    6cca:	605a      	str	r2, [r3, #4]
					synchronized {
    6ccc:	f7ff fece 	bl	6a6c <_ZN7__GuardC1Ev>
						ready1 = true;
    6cd0:	0026      	movs	r6, r4
    6cd2:	0021      	movs	r1, r4
    6cd4:	9b01      	ldr	r3, [sp, #4]
    6cd6:	3634      	adds	r6, #52	; 0x34
    6cd8:	3b01      	subs	r3, #1
						if (ready0) {
    6cda:	1d67      	adds	r7, r4, #5
    6cdc:	3135      	adds	r1, #53	; 0x35
					synchronized {
    6cde:	1c5a      	adds	r2, r3, #1
    6ce0:	d008      	beq.n	6cf4 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xaa>
						ready1 = true;
    6ce2:	7035      	strb	r5, [r6, #0]
						if (ready0) {
    6ce4:	7ffa      	ldrb	r2, [r7, #31]
    6ce6:	1e58      	subs	r0, r3, #1
    6ce8:	b2d2      	uxtb	r2, r2
    6cea:	2a00      	cmp	r2, #0
    6cec:	d1dc      	bne.n	6ca8 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x5e>
						notify = false;
    6cee:	700a      	strb	r2, [r1, #0]
					synchronized {
    6cf0:	0003      	movs	r3, r0
    6cf2:	e7f4      	b.n	6cde <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x94>
    6cf4:	4668      	mov	r0, sp
    6cf6:	9301      	str	r3, [sp, #4]
    6cf8:	f7ff febf 	bl	6a7a <_ZN7__GuardD1Ev>
			release();
    6cfc:	0020      	movs	r0, r4
    6cfe:	f7ff fef3 	bl	6ae8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    6d02:	e7d6      	b.n	6cb2 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>

00006d04 <_ZN14USBDeviceClass14SendInterfacesEPm>:
{
    6d04:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t interfaces = 0;
    6d06:	466b      	mov	r3, sp
    6d08:	1ddc      	adds	r4, r3, #7
    6d0a:	2300      	movs	r3, #0
{
    6d0c:	000d      	movs	r5, r1
	total[0] += CDC_GetInterface(&interfaces);
    6d0e:	0020      	movs	r0, r4
	uint8_t interfaces = 0;
    6d10:	7023      	strb	r3, [r4, #0]
	total[0] += CDC_GetInterface(&interfaces);
    6d12:	f7ff fd8d 	bl	6830 <_Z16CDC_GetInterfacePh>
    6d16:	682b      	ldr	r3, [r5, #0]
    6d18:	1818      	adds	r0, r3, r0
    6d1a:	6028      	str	r0, [r5, #0]
	total[0] += PluggableUSB().getInterface(&interfaces);
    6d1c:	f001 fb9c 	bl	8458 <_Z12PluggableUSBv>
    6d20:	0021      	movs	r1, r4
    6d22:	f001 fb55 	bl	83d0 <_ZN13PluggableUSB_12getInterfaceEPh>
    6d26:	682b      	ldr	r3, [r5, #0]
    6d28:	1818      	adds	r0, r3, r0
    6d2a:	6028      	str	r0, [r5, #0]
	return interfaces;
    6d2c:	7820      	ldrb	r0, [r4, #0]
}
    6d2e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00006d30 <_ZN14USBDeviceClass14handleEndpointEh>:
	if (ep == CDC_ENDPOINT_IN)
    6d30:	2903      	cmp	r1, #3
    6d32:	d10e      	bne.n	6d52 <_ZN14USBDeviceClass14handleEndpointEh+0x22>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    6d34:	2280      	movs	r2, #128	; 0x80
    6d36:	4b0e      	ldr	r3, [pc, #56]	; (6d70 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
    6d38:	3162      	adds	r1, #98	; 0x62
    6d3a:	681b      	ldr	r3, [r3, #0]
    6d3c:	31ff      	adds	r1, #255	; 0xff
    6d3e:	5c58      	ldrb	r0, [r3, r1]
    6d40:	4252      	negs	r2, r2
    6d42:	4302      	orrs	r2, r0
    6d44:	545a      	strb	r2, [r3, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    6d46:	2268      	movs	r2, #104	; 0x68
    6d48:	3963      	subs	r1, #99	; 0x63
    6d4a:	39ff      	subs	r1, #255	; 0xff
    6d4c:	32ff      	adds	r2, #255	; 0xff
    6d4e:	5499      	strb	r1, [r3, r2]
}
    6d50:	4770      	bx	lr
	if (ep == CDC_ENDPOINT_ACM)
    6d52:	2901      	cmp	r1, #1
    6d54:	d1fc      	bne.n	6d50 <_ZN14USBDeviceClass14handleEndpointEh+0x20>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    6d56:	2280      	movs	r2, #128	; 0x80
    6d58:	4b05      	ldr	r3, [pc, #20]	; (6d70 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
    6d5a:	3124      	adds	r1, #36	; 0x24
    6d5c:	681b      	ldr	r3, [r3, #0]
    6d5e:	31ff      	adds	r1, #255	; 0xff
    6d60:	5c58      	ldrb	r0, [r3, r1]
    6d62:	4252      	negs	r2, r2
    6d64:	4302      	orrs	r2, r0
    6d66:	545a      	strb	r2, [r3, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    6d68:	3923      	subs	r1, #35	; 0x23
    6d6a:	39ff      	subs	r1, #255	; 0xff
    6d6c:	2228      	movs	r2, #40	; 0x28
    6d6e:	e7ed      	b.n	6d4c <_ZN14USBDeviceClass14handleEndpointEh+0x1c>
    6d70:	200008c8 	.word	0x200008c8

00006d74 <_ZN14USBDeviceClass4initEv>:
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    6d74:	2320      	movs	r3, #32
{
    6d76:	b570      	push	{r4, r5, r6, lr}
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    6d78:	4a25      	ldr	r2, [pc, #148]	; (6e10 <_ZN14USBDeviceClass4initEv+0x9c>)
{
    6d7a:	0004      	movs	r4, r0
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    6d7c:	69d1      	ldr	r1, [r2, #28]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    6d7e:	200f      	movs	r0, #15
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    6d80:	430b      	orrs	r3, r1
    6d82:	61d3      	str	r3, [r2, #28]
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
    6d84:	2201      	movs	r2, #1
    6d86:	4923      	ldr	r1, [pc, #140]	; (6e14 <_ZN14USBDeviceClass4initEv+0xa0>)
    6d88:	780b      	ldrb	r3, [r1, #0]
    6d8a:	4313      	orrs	r3, r2
    6d8c:	700b      	strb	r3, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    6d8e:	4b22      	ldr	r3, [pc, #136]	; (6e18 <_ZN14USBDeviceClass4initEv+0xa4>)
    6d90:	7819      	ldrb	r1, [r3, #0]
    6d92:	4381      	bics	r1, r0
    6d94:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
    6d96:	2106      	movs	r1, #6
    6d98:	781d      	ldrb	r5, [r3, #0]
    6d9a:	4329      	orrs	r1, r5
    6d9c:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].bit.PMUXEN = 1;
    6d9e:	491f      	ldr	r1, [pc, #124]	; (6e1c <_ZN14USBDeviceClass4initEv+0xa8>)
    6da0:	780d      	ldrb	r5, [r1, #0]
    6da2:	432a      	orrs	r2, r5
    6da4:	700a      	strb	r2, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg &= ~(0xF << (4 * (PIN_PA25G_USB_DP & 0x01u)));
    6da6:	781a      	ldrb	r2, [r3, #0]
    6da8:	4002      	ands	r2, r0
    6daa:	701a      	strb	r2, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg |= MUX_PA25G_USB_DP << (4 * (PIN_PA25G_USB_DP & 0x01u));
    6dac:	2260      	movs	r2, #96	; 0x60
    6dae:	7819      	ldrb	r1, [r3, #0]
    6db0:	430a      	orrs	r2, r1
    6db2:	701a      	strb	r2, [r3, #0]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(6)     | // Generic Clock Multiplexer 6
    6db4:	4b1a      	ldr	r3, [pc, #104]	; (6e20 <_ZN14USBDeviceClass4initEv+0xac>)
    6db6:	4a1b      	ldr	r2, [pc, #108]	; (6e24 <_ZN14USBDeviceClass4initEv+0xb0>)
    6db8:	805a      	strh	r2, [r3, #2]
	while (GCLK->STATUS.bit.SYNCBUSY)
    6dba:	785a      	ldrb	r2, [r3, #1]
    6dbc:	09d2      	lsrs	r2, r2, #7
    6dbe:	d1fc      	bne.n	6dba <_ZN14USBDeviceClass4initEv+0x46>
	USB_SetHandler(&UDD_Handler);
    6dc0:	4819      	ldr	r0, [pc, #100]	; (6e28 <_ZN14USBDeviceClass4initEv+0xb4>)
    6dc2:	f7ff f935 	bl	6030 <USB_SetHandler>
	usbd.reset();
    6dc6:	4d19      	ldr	r5, [pc, #100]	; (6e2c <_ZN14USBDeviceClass4initEv+0xb8>)
    6dc8:	0028      	movs	r0, r5
    6dca:	f7ff fe0d 	bl	69e8 <_ZN20USBDevice_SAMD21G18x5resetEv>
	usbd.calibrate();
    6dce:	0028      	movs	r0, r5
    6dd0:	f7ff fe1c 	bl	6a0c <_ZN20USBDevice_SAMD21G18x9calibrateEv>
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    6dd4:	217f      	movs	r1, #127	; 0x7f
    6dd6:	682b      	ldr	r3, [r5, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    6dd8:	20c1      	movs	r0, #193	; 0xc1
    6dda:	781a      	ldrb	r2, [r3, #0]
    6ddc:	0080      	lsls	r0, r0, #2
    6dde:	400a      	ands	r2, r1
    6de0:	701a      	strb	r2, [r3, #0]
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    6de2:	2204      	movs	r2, #4
    6de4:	7819      	ldrb	r1, [r3, #0]
    6de6:	430a      	orrs	r2, r1
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    6de8:	210c      	movs	r1, #12
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    6dea:	701a      	strb	r2, [r3, #0]
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    6dec:	891a      	ldrh	r2, [r3, #8]
    6dee:	438a      	bics	r2, r1
    6df0:	490f      	ldr	r1, [pc, #60]	; (6e30 <_ZN14USBDeviceClass4initEv+0xbc>)
    6df2:	811a      	strh	r2, [r3, #8]
    6df4:	580a      	ldr	r2, [r1, r0]
    6df6:	0212      	lsls	r2, r2, #8
    6df8:	0a12      	lsrs	r2, r2, #8
    6dfa:	500a      	str	r2, [r1, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    6dfc:	2280      	movs	r2, #128	; 0x80
    6dfe:	600a      	str	r2, [r1, #0]
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
    6e00:	7819      	ldrb	r1, [r3, #0]
    6e02:	3a7e      	subs	r2, #126	; 0x7e
    6e04:	430a      	orrs	r2, r1
    6e06:	701a      	strb	r2, [r3, #0]
	initialized = true;
    6e08:	2301      	movs	r3, #1
    6e0a:	7023      	strb	r3, [r4, #0]
}
    6e0c:	bd70      	pop	{r4, r5, r6, pc}
    6e0e:	46c0      	nop			; (mov r8, r8)
    6e10:	40000400 	.word	0x40000400
    6e14:	41004458 	.word	0x41004458
    6e18:	4100443c 	.word	0x4100443c
    6e1c:	41004459 	.word	0x41004459
    6e20:	40000c00 	.word	0x40000c00
    6e24:	00004006 	.word	0x00004006
    6e28:	000077a1 	.word	0x000077a1
    6e2c:	200008c8 	.word	0x200008c8
    6e30:	e000e100 	.word	0xe000e100

00006e34 <_ZN14USBDeviceClass6attachEv>:
	if (!initialized)
    6e34:	7800      	ldrb	r0, [r0, #0]
    6e36:	2800      	cmp	r0, #0
    6e38:	d010      	beq.n	6e5c <_ZN14USBDeviceClass6attachEv+0x28>
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
    6e3a:	2101      	movs	r1, #1
    6e3c:	4b08      	ldr	r3, [pc, #32]	; (6e60 <_ZN14USBDeviceClass6attachEv+0x2c>)
    6e3e:	681b      	ldr	r3, [r3, #0]
    6e40:	891a      	ldrh	r2, [r3, #8]
    6e42:	438a      	bics	r2, r1
    6e44:	811a      	strh	r2, [r3, #8]
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
    6e46:	2208      	movs	r2, #8
    6e48:	8b19      	ldrh	r1, [r3, #24]
    6e4a:	430a      	orrs	r2, r1
    6e4c:	831a      	strh	r2, [r3, #24]
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
    6e4e:	2204      	movs	r2, #4
    6e50:	8b19      	ldrh	r1, [r3, #24]
    6e52:	430a      	orrs	r2, r1
    6e54:	831a      	strh	r2, [r3, #24]
	_usbConfiguration = 0;
    6e56:	2200      	movs	r2, #0
    6e58:	4b02      	ldr	r3, [pc, #8]	; (6e64 <_ZN14USBDeviceClass6attachEv+0x30>)
    6e5a:	601a      	str	r2, [r3, #0]
}
    6e5c:	4770      	bx	lr
    6e5e:	46c0      	nop			; (mov r8, r8)
    6e60:	200008c8 	.word	0x200008c8
    6e64:	200008c0 	.word	0x200008c0

00006e68 <_ZN14USBDeviceClass10setAddressEm>:
{
    6e68:	b510      	push	{r4, lr}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    6e6a:	4a0f      	ldr	r2, [pc, #60]	; (6ea8 <_ZN14USBDeviceClass10setAddressEm+0x40>)
    6e6c:	6993      	ldr	r3, [r2, #24]
    6e6e:	0b9b      	lsrs	r3, r3, #14
    6e70:	039b      	lsls	r3, r3, #14
    6e72:	6193      	str	r3, [r2, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    6e74:	6813      	ldr	r3, [r2, #0]
    6e76:	2202      	movs	r2, #2
    6e78:	33ff      	adds	r3, #255	; 0xff
    6e7a:	721a      	strb	r2, [r3, #8]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    6e7c:	7998      	ldrb	r0, [r3, #6]
    6e7e:	3a82      	subs	r2, #130	; 0x82
    6e80:	4302      	orrs	r2, r0
    6e82:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    6e84:	7a1a      	ldrb	r2, [r3, #8]
	while (!usbd.epBank1IsTransferComplete(0)) {}
    6e86:	0792      	lsls	r2, r2, #30
    6e88:	d5fc      	bpl.n	6e84 <_ZN14USBDeviceClass10setAddressEm+0x1c>
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    6e8a:	247f      	movs	r4, #127	; 0x7f
    6e8c:	4a07      	ldr	r2, [pc, #28]	; (6eac <_ZN14USBDeviceClass10setAddressEm+0x44>)
    6e8e:	4021      	ands	r1, r4
    6e90:	7a93      	ldrb	r3, [r2, #10]
    6e92:	0008      	movs	r0, r1
    6e94:	43a3      	bics	r3, r4
    6e96:	0019      	movs	r1, r3
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    6e98:	2380      	movs	r3, #128	; 0x80
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    6e9a:	4301      	orrs	r1, r0
    6e9c:	7291      	strb	r1, [r2, #10]
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    6e9e:	7a91      	ldrb	r1, [r2, #10]
    6ea0:	425b      	negs	r3, r3
    6ea2:	430b      	orrs	r3, r1
    6ea4:	7293      	strb	r3, [r2, #10]
}
    6ea6:	bd10      	pop	{r4, pc}
    6ea8:	200008c8 	.word	0x200008c8
    6eac:	41005000 	.word	0x41005000

00006eb0 <_ZN14USBDeviceClass6detachEv>:
	if (!initialized)
    6eb0:	7800      	ldrb	r0, [r0, #0]
    6eb2:	2800      	cmp	r0, #0
    6eb4:	d005      	beq.n	6ec2 <_ZN14USBDeviceClass6detachEv+0x12>
	inline void detach() { usb.CTRLB.bit.DETACH = 1; }
    6eb6:	4b03      	ldr	r3, [pc, #12]	; (6ec4 <_ZN14USBDeviceClass6detachEv+0x14>)
    6eb8:	681a      	ldr	r2, [r3, #0]
    6eba:	2301      	movs	r3, #1
    6ebc:	8911      	ldrh	r1, [r2, #8]
    6ebe:	430b      	orrs	r3, r1
    6ec0:	8113      	strh	r3, [r2, #8]
}
    6ec2:	4770      	bx	lr
    6ec4:	200008c8 	.word	0x200008c8

00006ec8 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>:
{
    6ec8:	b510      	push	{r4, lr}
	if (CDC_ACM_INTERFACE == i)
    6eca:	790b      	ldrb	r3, [r1, #4]
{
    6ecc:	000c      	movs	r4, r1
	if (CDC_ACM_INTERFACE == i)
    6ece:	2b00      	cmp	r3, #0
    6ed0:	d10c      	bne.n	6eec <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x24>
		if (CDC_Setup(setup) == false) {
    6ed2:	0008      	movs	r0, r1
    6ed4:	f7ff fcba 	bl	684c <_Z9CDC_SetupR8USBSetup>
    6ed8:	2800      	cmp	r0, #0
    6eda:	d001      	beq.n	6ee0 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x18>
		return true;
    6edc:	2001      	movs	r0, #1
}
    6ede:	bd10      	pop	{r4, pc}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    6ee0:	4a09      	ldr	r2, [pc, #36]	; (6f08 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x40>)
    6ee2:	6993      	ldr	r3, [r2, #24]
    6ee4:	0b9b      	lsrs	r3, r3, #14
    6ee6:	039b      	lsls	r3, r3, #14
    6ee8:	6193      	str	r3, [r2, #24]
    6eea:	e7f7      	b.n	6edc <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x14>
	bool ret = PluggableUSB().setup(setup);
    6eec:	f001 fab4 	bl	8458 <_Z12PluggableUSBv>
    6ef0:	0021      	movs	r1, r4
    6ef2:	f001 faa0 	bl	8436 <_ZN13PluggableUSB_5setupER8USBSetup>
	if ( ret == false) {
    6ef6:	2800      	cmp	r0, #0
    6ef8:	d1f0      	bne.n	6edc <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x14>
    6efa:	4a03      	ldr	r2, [pc, #12]	; (6f08 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x40>)
    6efc:	6993      	ldr	r3, [r2, #24]
    6efe:	0b9b      	lsrs	r3, r3, #14
    6f00:	039b      	lsls	r3, r3, #14
    6f02:	6193      	str	r3, [r2, #24]
    6f04:	e7eb      	b.n	6ede <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x16>
    6f06:	46c0      	nop			; (mov r8, r8)
    6f08:	200008c8 	.word	0x200008c8

00006f0c <_ZN14USBDeviceClass6initEPEmm>:
{
    6f0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6f0e:	000d      	movs	r5, r1
	if (config == (USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0)))
    6f10:	2a83      	cmp	r2, #131	; 0x83
    6f12:	d119      	bne.n	6f48 <_ZN14USBDeviceClass6initEPEmm+0x3c>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    6f14:	b2cb      	uxtb	r3, r1
    6f16:	4c32      	ldr	r4, [pc, #200]	; (6fe0 <_ZN14USBDeviceClass6initEPEmm+0xd4>)
    6f18:	015a      	lsls	r2, r3, #5
    6f1a:	18a2      	adds	r2, r4, r2
    6f1c:	6991      	ldr	r1, [r2, #24]
    6f1e:	4831      	ldr	r0, [pc, #196]	; (6fe4 <_ZN14USBDeviceClass6initEPEmm+0xd8>)
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    6f20:	01ad      	lsls	r5, r5, #6
    6f22:	4008      	ands	r0, r1
    6f24:	21c0      	movs	r1, #192	; 0xc0
    6f26:	0589      	lsls	r1, r1, #22
    6f28:	4301      	orrs	r1, r0
    6f2a:	6191      	str	r1, [r2, #24]
    6f2c:	492e      	ldr	r1, [pc, #184]	; (6fe8 <_ZN14USBDeviceClass6initEPEmm+0xdc>)
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    6f2e:	6820      	ldr	r0, [r4, #0]
    6f30:	194d      	adds	r5, r1, r5
    6f32:	2170      	movs	r1, #112	; 0x70
    6f34:	3308      	adds	r3, #8
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    6f36:	6155      	str	r5, [r2, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    6f38:	015b      	lsls	r3, r3, #5
    6f3a:	5c1a      	ldrb	r2, [r3, r0]
    6f3c:	438a      	bics	r2, r1
    6f3e:	0011      	movs	r1, r2
    6f40:	2240      	movs	r2, #64	; 0x40
    6f42:	430a      	orrs	r2, r1
    6f44:	541a      	strb	r2, [r3, r0]
}
    6f46:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
    6f48:	2a02      	cmp	r2, #2
    6f4a:	d144      	bne.n	6fd6 <_ZN14USBDeviceClass6initEPEmm+0xca>
		if (epHandlers[ep] == NULL) {
    6f4c:	008b      	lsls	r3, r1, #2
    6f4e:	9301      	str	r3, [sp, #4]
    6f50:	4b26      	ldr	r3, [pc, #152]	; (6fec <_ZN14USBDeviceClass6initEPEmm+0xe0>)
    6f52:	008a      	lsls	r2, r1, #2
    6f54:	58d6      	ldr	r6, [r2, r3]
    6f56:	2e00      	cmp	r6, #0
    6f58:	d1f5      	bne.n	6f46 <_ZN14USBDeviceClass6initEPEmm+0x3a>
			epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
    6f5a:	2038      	movs	r0, #56	; 0x38
    6f5c:	f7ff f8b0 	bl	60c0 <_Znwj>
		notify(false)
    6f60:	4b23      	ldr	r3, [pc, #140]	; (6ff0 <_ZN14USBDeviceClass6initEPEmm+0xe4>)
    6f62:	4f1f      	ldr	r7, [pc, #124]	; (6fe0 <_ZN14USBDeviceClass6initEPEmm+0xd4>)
    6f64:	6003      	str	r3, [r0, #0]
    6f66:	2380      	movs	r3, #128	; 0x80
    6f68:	005b      	lsls	r3, r3, #1
    6f6a:	60c3      	str	r3, [r0, #12]
    6f6c:	1d43      	adds	r3, r0, #5
    6f6e:	6206      	str	r6, [r0, #32]
    6f70:	6085      	str	r5, [r0, #8]
    6f72:	6106      	str	r6, [r0, #16]
    6f74:	6146      	str	r6, [r0, #20]
    6f76:	61c6      	str	r6, [r0, #28]
    6f78:	0004      	movs	r4, r0
    6f7a:	6047      	str	r7, [r0, #4]
    6f7c:	77de      	strb	r6, [r3, #31]
    6f7e:	62c6      	str	r6, [r0, #44]	; 0x2c
    6f80:	6306      	str	r6, [r0, #48]	; 0x30
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    6f82:	2080      	movs	r0, #128	; 0x80
		notify(false)
    6f84:	332f      	adds	r3, #47	; 0x2f
    6f86:	701e      	strb	r6, [r3, #0]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    6f88:	0040      	lsls	r0, r0, #1
		notify(false)
    6f8a:	705e      	strb	r6, [r3, #1]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    6f8c:	f004 fa88 	bl	b4a0 <malloc>
    6f90:	0006      	movs	r6, r0
    6f92:	61a0      	str	r0, [r4, #24]
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    6f94:	2080      	movs	r0, #128	; 0x80
    6f96:	0040      	lsls	r0, r0, #1
    6f98:	f004 fa82 	bl	b4a0 <malloc>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    6f9c:	b2ed      	uxtb	r5, r5
    6f9e:	016b      	lsls	r3, r5, #5
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    6fa0:	62a0      	str	r0, [r4, #40]	; 0x28
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    6fa2:	18fb      	adds	r3, r7, r3
    6fa4:	689a      	ldr	r2, [r3, #8]
    6fa6:	490f      	ldr	r1, [pc, #60]	; (6fe4 <_ZN14USBDeviceClass6initEPEmm+0xd8>)
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    6fa8:	2007      	movs	r0, #7
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    6faa:	4011      	ands	r1, r2
    6fac:	22c0      	movs	r2, #192	; 0xc0
    6fae:	0592      	lsls	r2, r2, #22
    6fb0:	430a      	orrs	r2, r1
    6fb2:	609a      	str	r2, [r3, #8]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    6fb4:	683a      	ldr	r2, [r7, #0]
    6fb6:	3508      	adds	r5, #8
    6fb8:	016d      	lsls	r5, r5, #5
    6fba:	5ca9      	ldrb	r1, [r5, r2]
    6fbc:	4381      	bics	r1, r0
    6fbe:	0008      	movs	r0, r1
    6fc0:	2103      	movs	r1, #3
    6fc2:	4301      	orrs	r1, r0
    6fc4:	54a9      	strb	r1, [r5, r2]
		release();
    6fc6:	0020      	movs	r0, r4
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    6fc8:	605e      	str	r6, [r3, #4]
		release();
    6fca:	f7ff fd8d 	bl	6ae8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    6fce:	4b07      	ldr	r3, [pc, #28]	; (6fec <_ZN14USBDeviceClass6initEPEmm+0xe0>)
    6fd0:	9a01      	ldr	r2, [sp, #4]
    6fd2:	50d4      	str	r4, [r2, r3]
    6fd4:	e7b7      	b.n	6f46 <_ZN14USBDeviceClass6initEPEmm+0x3a>
    6fd6:	0011      	movs	r1, r2
    6fd8:	0028      	movs	r0, r5
    6fda:	f7ff fc9d 	bl	6918 <_ZN14USBDeviceClass6initEPEmm.part.5>
}
    6fde:	e7b2      	b.n	6f46 <_ZN14USBDeviceClass6initEPEmm+0x3a>
    6fe0:	200008c8 	.word	0x200008c8
    6fe4:	8fffffff 	.word	0x8fffffff
    6fe8:	2000043c 	.word	0x2000043c
    6fec:	20000414 	.word	0x20000414
    6ff0:	0000dbe0 	.word	0x0000dbe0

00006ff4 <_ZN14USBDeviceClass13initEndpointsEv>:
void USBDeviceClass::initEndpoints() {
    6ff4:	b570      	push	{r4, r5, r6, lr}
    6ff6:	0005      	movs	r5, r0
    6ff8:	2401      	movs	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    6ffa:	4b06      	ldr	r3, [pc, #24]	; (7014 <_ZN14USBDeviceClass13initEndpointsEv+0x20>)
    6ffc:	00a2      	lsls	r2, r4, #2
    6ffe:	58d2      	ldr	r2, [r2, r3]
    7000:	2a00      	cmp	r2, #0
    7002:	d005      	beq.n	7010 <_ZN14USBDeviceClass13initEndpointsEv+0x1c>
		initEP(i, EndPoints[i]);
    7004:	0021      	movs	r1, r4
    7006:	0028      	movs	r0, r5
    7008:	f7ff ff80 	bl	6f0c <_ZN14USBDeviceClass6initEPEmm>
    700c:	3401      	adds	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    700e:	e7f4      	b.n	6ffa <_ZN14USBDeviceClass13initEndpointsEv+0x6>
}
    7010:	bd70      	pop	{r4, r5, r6, pc}
    7012:	46c0      	nop			; (mov r8, r8)
    7014:	2000005c 	.word	0x2000005c

00007018 <_ZN14USBDeviceClass9availableEm>:
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
	if (epHandlers[ep]) {
    7018:	4b08      	ldr	r3, [pc, #32]	; (703c <_ZN14USBDeviceClass9availableEm+0x24>)
    701a:	008a      	lsls	r2, r1, #2
    701c:	58d0      	ldr	r0, [r2, r3]
{
    701e:	b510      	push	{r4, lr}
	if (epHandlers[ep]) {
    7020:	2800      	cmp	r0, #0
    7022:	d003      	beq.n	702c <_ZN14USBDeviceClass9availableEm+0x14>
		return epHandlers[ep]->available();
    7024:	6803      	ldr	r3, [r0, #0]
    7026:	689b      	ldr	r3, [r3, #8]
    7028:	4798      	blx	r3
	} else {
		return usbd.epBank0ByteCount(ep);
	}
}
    702a:	bd10      	pop	{r4, pc}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    702c:	b2c9      	uxtb	r1, r1
    702e:	4b04      	ldr	r3, [pc, #16]	; (7040 <_ZN14USBDeviceClass9availableEm+0x28>)
    7030:	0149      	lsls	r1, r1, #5
    7032:	1859      	adds	r1, r3, r1
    7034:	6888      	ldr	r0, [r1, #8]
    7036:	0480      	lsls	r0, r0, #18
    7038:	0c80      	lsrs	r0, r0, #18
		return usbd.epBank0ByteCount(ep);
    703a:	e7f6      	b.n	702a <_ZN14USBDeviceClass9availableEm+0x12>
    703c:	20000414 	.word	0x20000414
    7040:	200008c8 	.word	0x200008c8

00007044 <_ZN14USBDeviceClass5flushEm>:
{
    7044:	b510      	push	{r4, lr}
    7046:	000c      	movs	r4, r1
	if (available(ep)) {
    7048:	f7ff ffe6 	bl	7018 <_ZN14USBDeviceClass9availableEm>
    704c:	2800      	cmp	r0, #0
    704e:	d00c      	beq.n	706a <_ZN14USBDeviceClass5flushEm+0x26>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    7050:	4b06      	ldr	r3, [pc, #24]	; (706c <_ZN14USBDeviceClass5flushEm+0x28>)
    7052:	b2e4      	uxtb	r4, r4
    7054:	681b      	ldr	r3, [r3, #0]
    7056:	3408      	adds	r4, #8
    7058:	0164      	lsls	r4, r4, #5
    705a:	191c      	adds	r4, r3, r4
    705c:	2380      	movs	r3, #128	; 0x80
    705e:	7962      	ldrb	r2, [r4, #5]
    7060:	425b      	negs	r3, r3
    7062:	4313      	orrs	r3, r2
    7064:	7163      	strb	r3, [r4, #5]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    7066:	2302      	movs	r3, #2
    7068:	71e3      	strb	r3, [r4, #7]
}
    706a:	bd10      	pop	{r4, pc}
    706c:	200008c8 	.word	0x200008c8

00007070 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>:
		return c;
	}
}

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
    7070:	b570      	push	{r4, r5, r6, lr}
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    7072:	4b13      	ldr	r3, [pc, #76]	; (70c0 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x50>)
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    7074:	b2cc      	uxtb	r4, r1
    7076:	4a13      	ldr	r2, [pc, #76]	; (70c4 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x54>)
    7078:	0160      	lsls	r0, r4, #5
    707a:	0189      	lsls	r1, r1, #6
    707c:	1859      	adds	r1, r3, r1
    707e:	1813      	adds	r3, r2, r0
    7080:	6059      	str	r1, [r3, #4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    7082:	6899      	ldr	r1, [r3, #8]
    7084:	4d10      	ldr	r5, [pc, #64]	; (70c8 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x58>)
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    7086:	3408      	adds	r4, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    7088:	400d      	ands	r5, r1
    708a:	2180      	movs	r1, #128	; 0x80
    708c:	0289      	lsls	r1, r1, #10
    708e:	4329      	orrs	r1, r5
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    7090:	2540      	movs	r5, #64	; 0x40
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    7092:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    7094:	6899      	ldr	r1, [r3, #8]
    7096:	0b89      	lsrs	r1, r1, #14
    7098:	0389      	lsls	r1, r1, #14
    709a:	6099      	str	r1, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    709c:	6811      	ldr	r1, [r2, #0]
    709e:	0163      	lsls	r3, r4, #5
    70a0:	18cb      	adds	r3, r1, r3
    70a2:	791e      	ldrb	r6, [r3, #4]
    70a4:	4335      	orrs	r5, r6
    70a6:	711d      	strb	r5, [r3, #4]
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
    70a8:	799d      	ldrb	r5, [r3, #6]
	usbd.epBank0SetByteCount(ep, 0);

	usbd.epBank0ResetReady(ep);

	// Wait OUT
	while (!usbd.epBank0IsReady(ep)) {}
    70aa:	066d      	lsls	r5, r5, #25
    70ac:	d5fc      	bpl.n	70a8 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x38>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    70ae:	0164      	lsls	r4, r4, #5
    70b0:	1909      	adds	r1, r1, r4
    70b2:	79cb      	ldrb	r3, [r1, #7]
	while (!usbd.epBank0IsTransferComplete(ep)) {}
    70b4:	07db      	lsls	r3, r3, #31
    70b6:	d5fc      	bpl.n	70b2 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x42>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    70b8:	1812      	adds	r2, r2, r0
    70ba:	6890      	ldr	r0, [r2, #8]
	return usbd.epBank0ByteCount(ep);
    70bc:	b2c0      	uxtb	r0, r0
}
    70be:	bd70      	pop	{r4, r5, r6, pc}
    70c0:	200005fc 	.word	0x200005fc
    70c4:	200008c8 	.word	0x200008c8
    70c8:	f0003fff 	.word	0xf0003fff

000070cc <_ZN14USBDeviceClass11recvControlEPvm>:
{
    70cc:	b570      	push	{r4, r5, r6, lr}
    70ce:	0014      	movs	r4, r2
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    70d0:	2240      	movs	r2, #64	; 0x40
    70d2:	4b0b      	ldr	r3, [pc, #44]	; (7100 <_ZN14USBDeviceClass11recvControlEPvm+0x34>)
    70d4:	000d      	movs	r5, r1
    70d6:	681b      	ldr	r3, [r3, #0]
    70d8:	33ff      	adds	r3, #255	; 0xff
    70da:	7959      	ldrb	r1, [r3, #5]
    70dc:	430a      	orrs	r2, r1
    70de:	715a      	strb	r2, [r3, #5]
	uint32_t read = armRecvCtrlOUT(0);
    70e0:	2100      	movs	r1, #0
    70e2:	f7ff ffc5 	bl	7070 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>
    70e6:	42a0      	cmp	r0, r4
    70e8:	d900      	bls.n	70ec <_ZN14USBDeviceClass11recvControlEPvm+0x20>
    70ea:	0020      	movs	r0, r4
	for (uint32_t i=0; i<len; i++) {
    70ec:	2300      	movs	r3, #0
		data[i] = buffer[i];
    70ee:	4905      	ldr	r1, [pc, #20]	; (7104 <_ZN14USBDeviceClass11recvControlEPvm+0x38>)
	for (uint32_t i=0; i<len; i++) {
    70f0:	42a3      	cmp	r3, r4
    70f2:	d003      	beq.n	70fc <_ZN14USBDeviceClass11recvControlEPvm+0x30>
		data[i] = buffer[i];
    70f4:	5c5a      	ldrb	r2, [r3, r1]
    70f6:	54ea      	strb	r2, [r5, r3]
	for (uint32_t i=0; i<len; i++) {
    70f8:	3301      	adds	r3, #1
    70fa:	e7f9      	b.n	70f0 <_ZN14USBDeviceClass11recvControlEPvm+0x24>
}
    70fc:	bd70      	pop	{r4, r5, r6, pc}
    70fe:	46c0      	nop			; (mov r8, r8)
    7100:	200008c8 	.word	0x200008c8
    7104:	200005fc 	.word	0x200005fc

00007108 <_ZN14USBDeviceClass7armRecvEm>:

uint8_t USBDeviceClass::armRecv(uint32_t ep)
{
    7108:	b510      	push	{r4, lr}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    710a:	b2c9      	uxtb	r1, r1
    710c:	480b      	ldr	r0, [pc, #44]	; (713c <_ZN14USBDeviceClass7armRecvEm+0x34>)
    710e:	0149      	lsls	r1, r1, #5
    7110:	1842      	adds	r2, r0, r1
    7112:	6893      	ldr	r3, [r2, #8]
    7114:	049b      	lsls	r3, r3, #18
    7116:	0c9b      	lsrs	r3, r3, #18
	uint16_t count = usbd.epBank0ByteCount(ep);
	if (count >= 64) {
    7118:	2b3f      	cmp	r3, #63	; 0x3f
    711a:	dd0b      	ble.n	7134 <_ZN14USBDeviceClass7armRecvEm+0x2c>
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    711c:	6894      	ldr	r4, [r2, #8]
		usbd.epBank0SetByteCount(ep, count - 64);
    711e:	3b40      	subs	r3, #64	; 0x40
    7120:	049b      	lsls	r3, r3, #18
    7122:	0ba4      	lsrs	r4, r4, #14
    7124:	0c9b      	lsrs	r3, r3, #18
    7126:	03a4      	lsls	r4, r4, #14
    7128:	4323      	orrs	r3, r4
    712a:	6093      	str	r3, [r2, #8]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    712c:	1841      	adds	r1, r0, r1
    712e:	6888      	ldr	r0, [r1, #8]
	} else {
		usbd.epBank0SetByteCount(ep, 0);
	}
	return usbd.epBank0ByteCount(ep);
    7130:	b2c0      	uxtb	r0, r0
}
    7132:	bd10      	pop	{r4, pc}
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    7134:	6893      	ldr	r3, [r2, #8]
    7136:	0b9b      	lsrs	r3, r3, #14
    7138:	039b      	lsls	r3, r3, #14
    713a:	e7f6      	b.n	712a <_ZN14USBDeviceClass7armRecvEm+0x22>
    713c:	200008c8 	.word	0x200008c8

00007140 <_ZN14USBDeviceClass4recvEmPvm>:
{
    7140:	b5f0      	push	{r4, r5, r6, r7, lr}
    7142:	001c      	movs	r4, r3
	if (!_usbConfiguration)
    7144:	4b2a      	ldr	r3, [pc, #168]	; (71f0 <_ZN14USBDeviceClass4recvEmPvm+0xb0>)
{
    7146:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    7148:	681b      	ldr	r3, [r3, #0]
{
    714a:	0006      	movs	r6, r0
    714c:	000d      	movs	r5, r1
    714e:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
    7150:	2b00      	cmp	r3, #0
    7152:	d04a      	beq.n	71ea <_ZN14USBDeviceClass4recvEmPvm+0xaa>
	if (epHandlers[ep]) {
    7154:	4b27      	ldr	r3, [pc, #156]	; (71f4 <_ZN14USBDeviceClass4recvEmPvm+0xb4>)
    7156:	008a      	lsls	r2, r1, #2
    7158:	58d0      	ldr	r0, [r2, r3]
    715a:	2800      	cmp	r0, #0
    715c:	d008      	beq.n	7170 <_ZN14USBDeviceClass4recvEmPvm+0x30>
		return epHandlers[ep]->recv(_data, len);
    715e:	6803      	ldr	r3, [r0, #0]
    7160:	0022      	movs	r2, r4
    7162:	685b      	ldr	r3, [r3, #4]
    7164:	9901      	ldr	r1, [sp, #4]
    7166:	4798      	blx	r3
    7168:	0004      	movs	r4, r0
}
    716a:	0020      	movs	r0, r4
    716c:	b005      	add	sp, #20
    716e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (available(ep) < len)
    7170:	0030      	movs	r0, r6
    7172:	f7ff ff51 	bl	7018 <_ZN14USBDeviceClass9availableEm>
    7176:	4284      	cmp	r4, r0
    7178:	d904      	bls.n	7184 <_ZN14USBDeviceClass4recvEmPvm+0x44>
		len = available(ep);
    717a:	0029      	movs	r1, r5
    717c:	0030      	movs	r0, r6
    717e:	f7ff ff4b 	bl	7018 <_ZN14USBDeviceClass9availableEm>
    7182:	0004      	movs	r4, r0
	armRecv(ep);
    7184:	0029      	movs	r1, r5
    7186:	0030      	movs	r0, r6
    7188:	f7ff ffbe 	bl	7108 <_ZN14USBDeviceClass7armRecvEm>
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    718c:	2101      	movs	r1, #1
    718e:	b2eb      	uxtb	r3, r5
    7190:	4f19      	ldr	r7, [pc, #100]	; (71f8 <_ZN14USBDeviceClass4recvEmPvm+0xb8>)
    7192:	9303      	str	r3, [sp, #12]
    7194:	015b      	lsls	r3, r3, #5
    7196:	9302      	str	r3, [sp, #8]
    7198:	9a02      	ldr	r2, [sp, #8]
    719a:	683b      	ldr	r3, [r7, #0]
	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
    719c:	9801      	ldr	r0, [sp, #4]
    719e:	189b      	adds	r3, r3, r2
    71a0:	33ff      	adds	r3, #255	; 0xff
    71a2:	7a5a      	ldrb	r2, [r3, #9]
    71a4:	430a      	orrs	r2, r1
    71a6:	4915      	ldr	r1, [pc, #84]	; (71fc <_ZN14USBDeviceClass4recvEmPvm+0xbc>)
    71a8:	725a      	strb	r2, [r3, #9]
    71aa:	01ab      	lsls	r3, r5, #6
    71ac:	18c9      	adds	r1, r1, r3
    71ae:	0022      	movs	r2, r4
    71b0:	f004 f99c 	bl	b4ec <memcpy>
	if (len && !available(ep)) {
    71b4:	2c00      	cmp	r4, #0
    71b6:	d0d8      	beq.n	716a <_ZN14USBDeviceClass4recvEmPvm+0x2a>
    71b8:	0029      	movs	r1, r5
    71ba:	0030      	movs	r0, r6
    71bc:	f7ff ff2c 	bl	7018 <_ZN14USBDeviceClass9availableEm>
    71c0:	2800      	cmp	r0, #0
    71c2:	d1d2      	bne.n	716a <_ZN14USBDeviceClass4recvEmPvm+0x2a>
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    71c4:	2140      	movs	r1, #64	; 0x40
    71c6:	9b03      	ldr	r3, [sp, #12]
    71c8:	683a      	ldr	r2, [r7, #0]
    71ca:	3308      	adds	r3, #8
    71cc:	015b      	lsls	r3, r3, #5
    71ce:	18d3      	adds	r3, r2, r3
    71d0:	7918      	ldrb	r0, [r3, #4]
    71d2:	4301      	orrs	r1, r0
    71d4:	7119      	strb	r1, [r3, #4]
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    71d6:	2101      	movs	r1, #1
    71d8:	71d9      	strb	r1, [r3, #7]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    71da:	2101      	movs	r1, #1
    71dc:	9b02      	ldr	r3, [sp, #8]
    71de:	18d3      	adds	r3, r2, r3
    71e0:	33ff      	adds	r3, #255	; 0xff
    71e2:	7a9a      	ldrb	r2, [r3, #10]
    71e4:	430a      	orrs	r2, r1
    71e6:	729a      	strb	r2, [r3, #10]
    71e8:	e7bf      	b.n	716a <_ZN14USBDeviceClass4recvEmPvm+0x2a>
		return -1;
    71ea:	2401      	movs	r4, #1
    71ec:	4264      	negs	r4, r4
    71ee:	e7bc      	b.n	716a <_ZN14USBDeviceClass4recvEmPvm+0x2a>
    71f0:	200008c0 	.word	0x200008c0
    71f4:	20000414 	.word	0x20000414
    71f8:	200008c8 	.word	0x200008c8
    71fc:	200005fc 	.word	0x200005fc

00007200 <_ZN14USBDeviceClass4recvEm>:
{
    7200:	b513      	push	{r0, r1, r4, lr}
	if (recv(ep, &c, 1) != 1) {
    7202:	466b      	mov	r3, sp
    7204:	1ddc      	adds	r4, r3, #7
    7206:	0022      	movs	r2, r4
    7208:	2301      	movs	r3, #1
    720a:	f7ff ff99 	bl	7140 <_ZN14USBDeviceClass4recvEmPvm>
    720e:	2801      	cmp	r0, #1
    7210:	d101      	bne.n	7216 <_ZN14USBDeviceClass4recvEm+0x16>
		return c;
    7212:	7820      	ldrb	r0, [r4, #0]
}
    7214:	bd16      	pop	{r1, r2, r4, pc}
		return -1;
    7216:	2001      	movs	r0, #1
    7218:	4240      	negs	r0, r0
    721a:	e7fb      	b.n	7214 <_ZN14USBDeviceClass4recvEm+0x14>

0000721c <_ZN14USBDeviceClass4sendEmPKvm>:
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
    721c:	b5f0      	push	{r4, r5, r6, r7, lr}
    721e:	001e      	movs	r6, r3
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
    7220:	4b35      	ldr	r3, [pc, #212]	; (72f8 <_ZN14USBDeviceClass4sendEmPKvm+0xdc>)
{
    7222:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    7224:	681b      	ldr	r3, [r3, #0]
{
    7226:	000f      	movs	r7, r1
    7228:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
    722a:	2b00      	cmp	r3, #0
    722c:	d035      	beq.n	729a <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
		return -1;
	if (len > 16384)
    722e:	2380      	movs	r3, #128	; 0x80
    7230:	01db      	lsls	r3, r3, #7
    7232:	429e      	cmp	r6, r3
    7234:	d831      	bhi.n	729a <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    7236:	2500      	movs	r5, #0
		} else {
			length = len;
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    7238:	4a30      	ldr	r2, [pc, #192]	; (72fc <_ZN14USBDeviceClass4sendEmPKvm+0xe0>)
    723a:	018b      	lsls	r3, r1, #6
    723c:	18d3      	adds	r3, r2, r3
    723e:	9302      	str	r3, [sp, #8]
	while (len != 0)
    7240:	2e00      	cmp	r6, #0
    7242:	d02c      	beq.n	729e <_ZN14USBDeviceClass4sendEmPKvm+0x82>
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
    7244:	4b2e      	ldr	r3, [pc, #184]	; (7300 <_ZN14USBDeviceClass4sendEmPKvm+0xe4>)
    7246:	681b      	ldr	r3, [r3, #0]
    7248:	9303      	str	r3, [sp, #12]
    724a:	23ff      	movs	r3, #255	; 0xff
    724c:	403b      	ands	r3, r7
    724e:	001c      	movs	r4, r3
    7250:	9300      	str	r3, [sp, #0]
    7252:	3408      	adds	r4, #8
    7254:	9b03      	ldr	r3, [sp, #12]
    7256:	0164      	lsls	r4, r4, #5
    7258:	191c      	adds	r4, r3, r4
    725a:	79a3      	ldrb	r3, [r4, #6]
    725c:	09db      	lsrs	r3, r3, #7
		if (usbd.epBank1IsReady(ep)) {
    725e:	d021      	beq.n	72a4 <_ZN14USBDeviceClass4sendEmPKvm+0x88>
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
    7260:	4b28      	ldr	r3, [pc, #160]	; (7304 <_ZN14USBDeviceClass4sendEmPKvm+0xe8>)
    7262:	4929      	ldr	r1, [pc, #164]	; (7308 <_ZN14USBDeviceClass4sendEmPKvm+0xec>)
    7264:	6818      	ldr	r0, [r3, #0]
    7266:	f001 f92f 	bl	84c8 <__udivsi3>
    726a:	4b28      	ldr	r3, [pc, #160]	; (730c <_ZN14USBDeviceClass4sendEmPKvm+0xf0>)
    726c:	2117      	movs	r1, #23
    726e:	4358      	muls	r0, r3
    7270:	f001 f92a 	bl	84c8 <__udivsi3>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    7274:	4b26      	ldr	r3, [pc, #152]	; (7310 <_ZN14USBDeviceClass4sendEmPKvm+0xf4>)
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    7276:	79e2      	ldrb	r2, [r4, #7]
			while (!usbd.epBank1IsTransferComplete(ep)) {
    7278:	0792      	lsls	r2, r2, #30
    727a:	d413      	bmi.n	72a4 <_ZN14USBDeviceClass4sendEmPKvm+0x88>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    727c:	5dda      	ldrb	r2, [r3, r7]
    727e:	2a00      	cmp	r2, #0
    7280:	d101      	bne.n	7286 <_ZN14USBDeviceClass4sendEmPKvm+0x6a>
    7282:	3801      	subs	r0, #1
    7284:	d2f7      	bcs.n	7276 <_ZN14USBDeviceClass4sendEmPKvm+0x5a>
					LastTransmitTimedOut[ep] = 1;
    7286:	2201      	movs	r2, #1
    7288:	55da      	strb	r2, [r3, r7]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    728a:	9b00      	ldr	r3, [sp, #0]
    728c:	015a      	lsls	r2, r3, #5
    728e:	4b1c      	ldr	r3, [pc, #112]	; (7300 <_ZN14USBDeviceClass4sendEmPKvm+0xe4>)
    7290:	189b      	adds	r3, r3, r2
    7292:	699a      	ldr	r2, [r3, #24]
    7294:	0b92      	lsrs	r2, r2, #14
    7296:	0392      	lsls	r2, r2, #14
    7298:	619a      	str	r2, [r3, #24]
					return -1;
    729a:	2501      	movs	r5, #1
    729c:	426d      	negs	r5, r5
		written += length;
		len -= length;
		data = (char *)data + length;
	}
	return written;
}
    729e:	0028      	movs	r0, r5
    72a0:	b005      	add	sp, #20
    72a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LastTransmitTimedOut[ep] = 0;
    72a4:	2200      	movs	r2, #0
    72a6:	4b1a      	ldr	r3, [pc, #104]	; (7310 <_ZN14USBDeviceClass4sendEmPKvm+0xf4>)
    72a8:	0034      	movs	r4, r6
    72aa:	55da      	strb	r2, [r3, r7]
    72ac:	2e3f      	cmp	r6, #63	; 0x3f
    72ae:	d900      	bls.n	72b2 <_ZN14USBDeviceClass4sendEmPKvm+0x96>
    72b0:	243f      	movs	r4, #63	; 0x3f
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    72b2:	0022      	movs	r2, r4
    72b4:	9901      	ldr	r1, [sp, #4]
    72b6:	9802      	ldr	r0, [sp, #8]
    72b8:	f004 f918 	bl	b4ec <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    72bc:	9b00      	ldr	r3, [sp, #0]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    72be:	04a1      	lsls	r1, r4, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    72c0:	015a      	lsls	r2, r3, #5
    72c2:	4b0f      	ldr	r3, [pc, #60]	; (7300 <_ZN14USBDeviceClass4sendEmPKvm+0xe4>)
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    72c4:	0c89      	lsrs	r1, r1, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    72c6:	189b      	adds	r3, r3, r2
    72c8:	9a02      	ldr	r2, [sp, #8]
		written += length;
    72ca:	192d      	adds	r5, r5, r4
    72cc:	615a      	str	r2, [r3, #20]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    72ce:	699a      	ldr	r2, [r3, #24]
		len -= length;
    72d0:	1b36      	subs	r6, r6, r4
    72d2:	0b92      	lsrs	r2, r2, #14
    72d4:	0392      	lsls	r2, r2, #14
    72d6:	430a      	orrs	r2, r1
    72d8:	619a      	str	r2, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    72da:	9b00      	ldr	r3, [sp, #0]
    72dc:	9a03      	ldr	r2, [sp, #12]
    72de:	3308      	adds	r3, #8
    72e0:	015b      	lsls	r3, r3, #5
    72e2:	18d3      	adds	r3, r2, r3
    72e4:	2202      	movs	r2, #2
    72e6:	71da      	strb	r2, [r3, #7]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    72e8:	7959      	ldrb	r1, [r3, #5]
    72ea:	3a82      	subs	r2, #130	; 0x82
    72ec:	430a      	orrs	r2, r1
    72ee:	715a      	strb	r2, [r3, #5]
		data = (char *)data + length;
    72f0:	9b01      	ldr	r3, [sp, #4]
    72f2:	191b      	adds	r3, r3, r4
    72f4:	9301      	str	r3, [sp, #4]
	while (len != 0)
    72f6:	e7a3      	b.n	7240 <_ZN14USBDeviceClass4sendEmPKvm+0x24>
    72f8:	200008c0 	.word	0x200008c0
    72fc:	2000043c 	.word	0x2000043c
    7300:	200008c8 	.word	0x200008c8
    7304:	20000084 	.word	0x20000084
    7308:	000f4240 	.word	0x000f4240
    730c:	00011170 	.word	0x00011170
    7310:	20000431 	.word	0x20000431

00007314 <_ZN14USBDeviceClass7armSendEmPKvm>:

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
    7314:	b570      	push	{r4, r5, r6, lr}
    7316:	000d      	movs	r5, r1
    7318:	001c      	movs	r4, r3
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    731a:	4e0d      	ldr	r6, [pc, #52]	; (7350 <_ZN14USBDeviceClass7armSendEmPKvm+0x3c>)
    731c:	01ab      	lsls	r3, r5, #6
    731e:	18f6      	adds	r6, r6, r3
{
    7320:	0011      	movs	r1, r2
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    7322:	0030      	movs	r0, r6
    7324:	0022      	movs	r2, r4
    7326:	f004 f8e1 	bl	b4ec <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    732a:	b2ed      	uxtb	r5, r5
    732c:	4909      	ldr	r1, [pc, #36]	; (7354 <_ZN14USBDeviceClass7armSendEmPKvm+0x40>)
    732e:	016d      	lsls	r5, r5, #5
    7330:	194d      	adds	r5, r1, r5
    7332:	616e      	str	r6, [r5, #20]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    7334:	69ab      	ldr	r3, [r5, #24]
    7336:	4a08      	ldr	r2, [pc, #32]	; (7358 <_ZN14USBDeviceClass7armSendEmPKvm+0x44>)
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
	usbd.epBank1SetMultiPacketSize(ep, 0);
	usbd.epBank1SetByteCount(ep, len);

	return len;
}
    7338:	0020      	movs	r0, r4
    733a:	4013      	ands	r3, r2
    733c:	61ab      	str	r3, [r5, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    733e:	69ab      	ldr	r3, [r5, #24]
    7340:	04a2      	lsls	r2, r4, #18
    7342:	0b9b      	lsrs	r3, r3, #14
    7344:	0c92      	lsrs	r2, r2, #18
    7346:	039b      	lsls	r3, r3, #14
    7348:	4313      	orrs	r3, r2
    734a:	61ab      	str	r3, [r5, #24]
    734c:	bd70      	pop	{r4, r5, r6, pc}
    734e:	46c0      	nop			; (mov r8, r8)
    7350:	2000043c 	.word	0x2000043c
    7354:	200008c8 	.word	0x200008c8
    7358:	f0003fff 	.word	0xf0003fff

0000735c <_ZN14USBDeviceClass11sendControlEPKvm>:

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    735c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    735e:	4b10      	ldr	r3, [pc, #64]	; (73a0 <_ZN14USBDeviceClass11sendControlEPKvm+0x44>)
{
    7360:	9001      	str	r0, [sp, #4]
	if (_dry_run == true)
    7362:	781b      	ldrb	r3, [r3, #0]
{
    7364:	000f      	movs	r7, r1
    7366:	0015      	movs	r5, r2
	if (_dry_run == true)
    7368:	2b00      	cmp	r3, #0
    736a:	d10c      	bne.n	7386 <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		return length;

	if (_pack_message == true) {
    736c:	4b0d      	ldr	r3, [pc, #52]	; (73a4 <_ZN14USBDeviceClass11sendControlEPKvm+0x48>)
    736e:	0016      	movs	r6, r2
    7370:	781c      	ldrb	r4, [r3, #0]
    7372:	2c00      	cmp	r4, #0
    7374:	d009      	beq.n	738a <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
		memcpy(&_pack_buffer[_pack_size], data, len);
    7376:	4e0c      	ldr	r6, [pc, #48]	; (73a8 <_ZN14USBDeviceClass11sendControlEPKvm+0x4c>)
    7378:	480c      	ldr	r0, [pc, #48]	; (73ac <_ZN14USBDeviceClass11sendControlEPKvm+0x50>)
    737a:	8834      	ldrh	r4, [r6, #0]
    737c:	1900      	adds	r0, r0, r4
		_pack_size += len;
    737e:	1964      	adds	r4, r4, r5
		memcpy(&_pack_buffer[_pack_size], data, len);
    7380:	f004 f8b4 	bl	b4ec <memcpy>
		_pack_size += len;
    7384:	8034      	strh	r4, [r6, #0]
		pos += sent;
		len -= sent;
 	}

	return length;
}
    7386:	0028      	movs	r0, r5
    7388:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 	while (len > 0)
    738a:	2e00      	cmp	r6, #0
    738c:	d0fb      	beq.n	7386 <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		sent = armSend(EP0, data + pos, len);
    738e:	193a      	adds	r2, r7, r4
    7390:	0033      	movs	r3, r6
    7392:	2100      	movs	r1, #0
    7394:	9801      	ldr	r0, [sp, #4]
    7396:	f7ff ffbd 	bl	7314 <_ZN14USBDeviceClass7armSendEmPKvm>
		pos += sent;
    739a:	1824      	adds	r4, r4, r0
		len -= sent;
    739c:	1a36      	subs	r6, r6, r0
 	while (len > 0)
    739e:	e7f4      	b.n	738a <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
    73a0:	200007bc 	.word	0x200007bc
    73a4:	200008bd 	.word	0x200008bd
    73a8:	200008be 	.word	0x200008be
    73ac:	200007bd 	.word	0x200007bd

000073b0 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>:
{
    73b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return false;
    73b2:	2000      	movs	r0, #0
{
    73b4:	af00      	add	r7, sp, #0
    73b6:	000e      	movs	r6, r1
    73b8:	0015      	movs	r5, r2
	if (maxlen < 2)
    73ba:	2a01      	cmp	r2, #1
    73bc:	dd26      	ble.n	740c <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x5c>
	uint8_t buffer[maxlen];
    73be:	1dd3      	adds	r3, r2, #7
    73c0:	466a      	mov	r2, sp
    73c2:	08db      	lsrs	r3, r3, #3
    73c4:	00db      	lsls	r3, r3, #3
    73c6:	1ad3      	subs	r3, r2, r3
    73c8:	469d      	mov	sp, r3
	buffer[0] = strlen((const char*)string) * 2 + 2;
    73ca:	0008      	movs	r0, r1
    73cc:	f004 fe10 	bl	bff0 <strlen>
	uint8_t buffer[maxlen];
    73d0:	466c      	mov	r4, sp
	buffer[1] = 0x03;
    73d2:	2303      	movs	r3, #3
		buffer[i] = 0;
    73d4:	2100      	movs	r1, #0
	buffer[0] = strlen((const char*)string) * 2 + 2;
    73d6:	3001      	adds	r0, #1
    73d8:	0040      	lsls	r0, r0, #1
    73da:	7020      	strb	r0, [r4, #0]
	buffer[1] = 0x03;
    73dc:	7063      	strb	r3, [r4, #1]
    73de:	1e5a      	subs	r2, r3, #1
    73e0:	b2d2      	uxtb	r2, r2
	for (i = 2; i < maxlen && *string; i++) {
    73e2:	4295      	cmp	r5, r2
    73e4:	dd0b      	ble.n	73fe <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
    73e6:	7830      	ldrb	r0, [r6, #0]
    73e8:	2800      	cmp	r0, #0
    73ea:	d008      	beq.n	73fe <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
		buffer[i++] = *string++;
    73ec:	3601      	adds	r6, #1
    73ee:	54a0      	strb	r0, [r4, r2]
		if (i == maxlen) break;
    73f0:	429d      	cmp	r5, r3
    73f2:	d003      	beq.n	73fc <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4c>
		buffer[i] = 0;
    73f4:	54e1      	strb	r1, [r4, r3]
    73f6:	3302      	adds	r3, #2
    73f8:	b2db      	uxtb	r3, r3
	for (i = 2; i < maxlen && *string; i++) {
    73fa:	e7f0      	b.n	73de <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x2e>
    73fc:	002a      	movs	r2, r5
	return USBDevice.sendControl(buffer, i);
    73fe:	0021      	movs	r1, r4
    7400:	4803      	ldr	r0, [pc, #12]	; (7410 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x60>)
    7402:	f7ff ffab 	bl	735c <_ZN14USBDeviceClass11sendControlEPKvm>
    7406:	1e43      	subs	r3, r0, #1
    7408:	4198      	sbcs	r0, r3
    740a:	b2c0      	uxtb	r0, r0
}
    740c:	46bd      	mov	sp, r7
    740e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7410:	20000410 	.word	0x20000410

00007414 <_ZN14USBDeviceClass17sendConfigurationEm>:
{
    7414:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t total = 0;
    7416:	2700      	movs	r7, #0
	_dry_run = true;
    7418:	2601      	movs	r6, #1
{
    741a:	b087      	sub	sp, #28
	_dry_run = true;
    741c:	4b1e      	ldr	r3, [pc, #120]	; (7498 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
{
    741e:	9100      	str	r1, [sp, #0]
	uint8_t interfaces = SendInterfaces(&total);
    7420:	a902      	add	r1, sp, #8
	_dry_run = true;
    7422:	701e      	strb	r6, [r3, #0]
{
    7424:	0005      	movs	r5, r0
	uint32_t total = 0;
    7426:	9702      	str	r7, [sp, #8]
	uint8_t interfaces = SendInterfaces(&total);
    7428:	f7ff fc6c 	bl	6d04 <_ZN14USBDeviceClass14SendInterfacesEPm>
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    742c:	ac03      	add	r4, sp, #12
	uint8_t interfaces = SendInterfaces(&total);
    742e:	9001      	str	r0, [sp, #4]
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    7430:	2209      	movs	r2, #9
    7432:	0039      	movs	r1, r7
    7434:	0020      	movs	r0, r4
    7436:	f004 f874 	bl	b522 <memset>
    743a:	2309      	movs	r3, #9
    743c:	7023      	strb	r3, [r4, #0]
    743e:	2302      	movs	r3, #2
    7440:	7063      	strb	r3, [r4, #1]
    7442:	339e      	adds	r3, #158	; 0x9e
    7444:	71e3      	strb	r3, [r4, #7]
    7446:	335a      	adds	r3, #90	; 0x5a
    7448:	7223      	strb	r3, [r4, #8]
    744a:	9b02      	ldr	r3, [sp, #8]
    744c:	7166      	strb	r6, [r4, #5]
    744e:	3309      	adds	r3, #9
    7450:	8063      	strh	r3, [r4, #2]
    7452:	466b      	mov	r3, sp
    7454:	791b      	ldrb	r3, [r3, #4]
    7456:	7123      	strb	r3, [r4, #4]
	_dry_run = false;
    7458:	4b0f      	ldr	r3, [pc, #60]	; (7498 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
    745a:	701f      	strb	r7, [r3, #0]
	if (maxlen == sizeof(ConfigDescriptor)) {
    745c:	9b00      	ldr	r3, [sp, #0]
    745e:	2b09      	cmp	r3, #9
    7460:	d107      	bne.n	7472 <_ZN14USBDeviceClass17sendConfigurationEm+0x5e>
		sendControl(&config, sizeof(ConfigDescriptor));
    7462:	001a      	movs	r2, r3
    7464:	0021      	movs	r1, r4
		sendControl(_pack_buffer, _pack_size);
    7466:	0028      	movs	r0, r5
    7468:	f7ff ff78 	bl	735c <_ZN14USBDeviceClass11sendControlEPKvm>
}
    746c:	2001      	movs	r0, #1
    746e:	b007      	add	sp, #28
    7470:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_pack_message = true;
    7472:	4b0a      	ldr	r3, [pc, #40]	; (749c <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
	sendControl(&config, sizeof(ConfigDescriptor));
    7474:	2209      	movs	r2, #9
		_pack_message = true;
    7476:	701e      	strb	r6, [r3, #0]
		_pack_size = 0;
    7478:	4e09      	ldr	r6, [pc, #36]	; (74a0 <_ZN14USBDeviceClass17sendConfigurationEm+0x8c>)
	sendControl(&config, sizeof(ConfigDescriptor));
    747a:	0021      	movs	r1, r4
    747c:	0028      	movs	r0, r5
	total = 0;
    747e:	9702      	str	r7, [sp, #8]
		_pack_size = 0;
    7480:	8037      	strh	r7, [r6, #0]
	sendControl(&config, sizeof(ConfigDescriptor));
    7482:	f7ff ff6b 	bl	735c <_ZN14USBDeviceClass11sendControlEPKvm>
	SendInterfaces(&total);
    7486:	a902      	add	r1, sp, #8
    7488:	0028      	movs	r0, r5
    748a:	f7ff fc3b 	bl	6d04 <_ZN14USBDeviceClass14SendInterfacesEPm>
		_pack_message = false;
    748e:	4b03      	ldr	r3, [pc, #12]	; (749c <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
		sendControl(_pack_buffer, _pack_size);
    7490:	8832      	ldrh	r2, [r6, #0]
		_pack_message = false;
    7492:	701f      	strb	r7, [r3, #0]
		sendControl(_pack_buffer, _pack_size);
    7494:	4903      	ldr	r1, [pc, #12]	; (74a4 <_ZN14USBDeviceClass17sendConfigurationEm+0x90>)
    7496:	e7e6      	b.n	7466 <_ZN14USBDeviceClass17sendConfigurationEm+0x52>
    7498:	200007bc 	.word	0x200007bc
    749c:	200008bd 	.word	0x200008bd
    74a0:	200008be 	.word	0x200008be
    74a4:	200007bd 	.word	0x200007bd

000074a8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>:
{
    74a8:	b570      	push	{r4, r5, r6, lr}
	uint8_t t = setup.wValueH;
    74aa:	78ce      	ldrb	r6, [r1, #3]
{
    74ac:	b092      	sub	sp, #72	; 0x48
    74ae:	0005      	movs	r5, r0
    74b0:	000c      	movs	r4, r1
	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
    74b2:	2e02      	cmp	r6, #2
    74b4:	d108      	bne.n	74c8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x20>
		return USBDevice.sendConfiguration(setup.wLength);
    74b6:	88c9      	ldrh	r1, [r1, #6]
    74b8:	482b      	ldr	r0, [pc, #172]	; (7568 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc0>)
    74ba:	f7ff ffab 	bl	7414 <_ZN14USBDeviceClass17sendConfigurationEm>
    74be:	1e43      	subs	r3, r0, #1
    74c0:	4198      	sbcs	r0, r3
    74c2:	b2c0      	uxtb	r0, r0
}
    74c4:	b012      	add	sp, #72	; 0x48
    74c6:	bd70      	pop	{r4, r5, r6, pc}
	ret = PluggableUSB().getDescriptor(setup);
    74c8:	f000 ffc6 	bl	8458 <_Z12PluggableUSBv>
    74cc:	0021      	movs	r1, r4
    74ce:	f000 ff93 	bl	83f8 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
	if (ret != 0) {
    74d2:	2800      	cmp	r0, #0
    74d4:	d003      	beq.n	74de <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x36>
		return (ret > 0 ? true : false);
    74d6:	17c3      	asrs	r3, r0, #31
    74d8:	1a18      	subs	r0, r3, r0
    74da:	0fc0      	lsrs	r0, r0, #31
    74dc:	e7f2      	b.n	74c4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
    74de:	2e01      	cmp	r6, #1
    74e0:	d10b      	bne.n	74fa <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x52>
		if (setup.wLength == 8)
    74e2:	88e2      	ldrh	r2, [r4, #6]
    74e4:	4921      	ldr	r1, [pc, #132]	; (756c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc4>)
		if (*desc_addr > setup.wLength) {
    74e6:	2a11      	cmp	r2, #17
    74e8:	dc10      	bgt.n	750c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x64>
			desc_length = setup.wLength;
    74ea:	b2d2      	uxtb	r2, r2
	if (desc_length == 0) {
    74ec:	2a00      	cmp	r2, #0
    74ee:	d00d      	beq.n	750c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x64>
	sendControl(desc_addr, desc_length);
    74f0:	0028      	movs	r0, r5
    74f2:	f7ff ff33 	bl	735c <_ZN14USBDeviceClass11sendControlEPKvm>
	return true;
    74f6:	2001      	movs	r0, #1
    74f8:	e7e4      	b.n	74c4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    74fa:	2e03      	cmp	r6, #3
    74fc:	d1e2      	bne.n	74c4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
		if (setup.wValueL == 0) {
    74fe:	78a3      	ldrb	r3, [r4, #2]
    7500:	2b00      	cmp	r3, #0
    7502:	d105      	bne.n	7510 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x68>
		if (*desc_addr > setup.wLength) {
    7504:	88e2      	ldrh	r2, [r4, #6]
    7506:	491a      	ldr	r1, [pc, #104]	; (7570 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc8>)
    7508:	2a03      	cmp	r2, #3
    750a:	ddee      	ble.n	74ea <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x42>
		desc_length = *desc_addr;
    750c:	780a      	ldrb	r2, [r1, #0]
    750e:	e7ef      	b.n	74f0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x48>
		else if (setup.wValueL == IPRODUCT) {
    7510:	2b02      	cmp	r3, #2
    7512:	d105      	bne.n	7520 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x78>
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
    7514:	79a2      	ldrb	r2, [r4, #6]
    7516:	4917      	ldr	r1, [pc, #92]	; (7574 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xcc>)
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    7518:	0028      	movs	r0, r5
    751a:	f7ff ff49 	bl	73b0 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    751e:	e7d1      	b.n	74c4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
		else if (setup.wValueL == IMANUFACTURER) {
    7520:	2b01      	cmp	r3, #1
    7522:	d102      	bne.n	752a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x82>
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    7524:	79a2      	ldrb	r2, [r4, #6]
    7526:	4914      	ldr	r1, [pc, #80]	; (7578 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd0>)
    7528:	e7f6      	b.n	7518 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
		else if (setup.wValueL == ISERIAL) {
    752a:	2b03      	cmp	r3, #3
    752c:	d1ca      	bne.n	74c4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
			utox8(SERIAL_NUMBER_WORD_0, &name[0]);
    752e:	4b13      	ldr	r3, [pc, #76]	; (757c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd4>)
    7530:	a901      	add	r1, sp, #4
    7532:	6818      	ldr	r0, [r3, #0]
    7534:	f7ff f9de 	bl	68f4 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_1, &name[8]);
    7538:	4b11      	ldr	r3, [pc, #68]	; (7580 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd8>)
    753a:	a903      	add	r1, sp, #12
    753c:	6818      	ldr	r0, [r3, #0]
    753e:	f7ff f9d9 	bl	68f4 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_2, &name[16]);
    7542:	4b10      	ldr	r3, [pc, #64]	; (7584 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xdc>)
    7544:	a905      	add	r1, sp, #20
    7546:	6818      	ldr	r0, [r3, #0]
    7548:	f7ff f9d4 	bl	68f4 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_3, &name[24]);
    754c:	4b0e      	ldr	r3, [pc, #56]	; (7588 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xe0>)
    754e:	a907      	add	r1, sp, #28
    7550:	6818      	ldr	r0, [r3, #0]
    7552:	f7ff f9cf 	bl	68f4 <_ZL5utox8mPc>
			PluggableUSB().getShortName(&name[32]);
    7556:	f000 ff7f 	bl	8458 <_Z12PluggableUSBv>
    755a:	a909      	add	r1, sp, #36	; 0x24
    755c:	f000 ff5c 	bl	8418 <_ZN13PluggableUSB_12getShortNameEPc>
			return sendStringDescriptor((uint8_t*)name, setup.wLength);
    7560:	79a2      	ldrb	r2, [r4, #6]
    7562:	a901      	add	r1, sp, #4
    7564:	e7d8      	b.n	7518 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
    7566:	46c0      	nop			; (mov r8, r8)
    7568:	20000410 	.word	0x20000410
    756c:	0000dc0c 	.word	0x0000dc0c
    7570:	0000dbfc 	.word	0x0000dbfc
    7574:	0000dbec 	.word	0x0000dbec
    7578:	0000dc00 	.word	0x0000dc00
    757c:	0080a00c 	.word	0x0080a00c
    7580:	0080a040 	.word	0x0080a040
    7584:	0080a044 	.word	0x0080a044
    7588:	0080a048 	.word	0x0080a048

0000758c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>:
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
}

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    758c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    758e:	0006      	movs	r6, r0
	switch (setup.bRequest) {
    7590:	7848      	ldrb	r0, [r1, #1]
{
    7592:	000d      	movs	r5, r1
	switch (setup.bRequest) {
    7594:	280b      	cmp	r0, #11
    7596:	d811      	bhi.n	75bc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
    7598:	f000 ff82 	bl	84a0 <__gnu_thumb1_case_uqi>
    759c:	2e101d06 	.word	0x2e101d06
    75a0:	70484310 	.word	0x70484310
    75a4:	6c694f4c 	.word	0x6c694f4c
	case GET_STATUS:
		if (setup.bmRequestType == 0)  // device
    75a8:	7809      	ldrb	r1, [r1, #0]
    75aa:	aa01      	add	r2, sp, #4
    75ac:	2900      	cmp	r1, #0
    75ae:	d107      	bne.n	75c0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x34>
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
			armSend(0, buff, 2);
    75b0:	2302      	movs	r3, #2
			uint8_t buff[] = { 0, 0 };
    75b2:	7011      	strb	r1, [r2, #0]
    75b4:	7051      	strb	r1, [r2, #1]
			armSend(0, buff, 2);
    75b6:	0030      	movs	r0, r6
    75b8:	f7ff feac 	bl	7314 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    75bc:	2001      	movs	r0, #1
		return true;

	default:
		return true;
	}
}
    75be:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
			uint8_t buff[] = { 0, 0 };
    75c0:	2300      	movs	r3, #0
    75c2:	7013      	strb	r3, [r2, #0]
    75c4:	7053      	strb	r3, [r2, #1]
			if (isEndpointHalt == 1)
    75c6:	4b2e      	ldr	r3, [pc, #184]	; (7680 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
			if (isRemoteWakeUpEnabled == 1)
    75c8:	781b      	ldrb	r3, [r3, #0]
    75ca:	2b01      	cmp	r3, #1
    75cc:	d100      	bne.n	75d0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x44>
				buff[0] = 1;
    75ce:	7013      	strb	r3, [r2, #0]
			armSend(0, buff, 2);
    75d0:	2302      	movs	r3, #2
		armSend(0, (void*)&_usbSetInterface, 1);
    75d2:	2100      	movs	r1, #0
    75d4:	e7ef      	b.n	75b6 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    75d6:	788a      	ldrb	r2, [r1, #2]
    75d8:	2300      	movs	r3, #0
    75da:	2a01      	cmp	r2, #1
    75dc:	d104      	bne.n	75e8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x5c>
			uint8_t buff[] = { 0, 0 };
    75de:	aa01      	add	r2, sp, #4
    75e0:	7013      	strb	r3, [r2, #0]
    75e2:	7053      	strb	r3, [r2, #1]
			if (isRemoteWakeUpEnabled == 1)
    75e4:	4b27      	ldr	r3, [pc, #156]	; (7684 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
    75e6:	e7ef      	b.n	75c8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x3c>
			isEndpointHalt = 0;
    75e8:	4a25      	ldr	r2, [pc, #148]	; (7680 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    75ea:	7013      	strb	r3, [r2, #0]
    75ec:	4a26      	ldr	r2, [pc, #152]	; (7688 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    75ee:	6993      	ldr	r3, [r2, #24]
    75f0:	0b9b      	lsrs	r3, r3, #14
    75f2:	039b      	lsls	r3, r3, #14
    75f4:	6193      	str	r3, [r2, #24]
    75f6:	e7e1      	b.n	75bc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    75f8:	788c      	ldrb	r4, [r1, #2]
    75fa:	2c01      	cmp	r4, #1
    75fc:	d106      	bne.n	760c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x80>
			uint8_t buff[] = { 0 };
    75fe:	2100      	movs	r1, #0
			isRemoteWakeUpEnabled = 1;
    7600:	4b20      	ldr	r3, [pc, #128]	; (7684 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
			uint8_t buff[] = { 0 };
    7602:	aa01      	add	r2, sp, #4
			isRemoteWakeUpEnabled = 1;
    7604:	701c      	strb	r4, [r3, #0]
			uint8_t buff[] = { 0 };
    7606:	7011      	strb	r1, [r2, #0]
			armSend(0, buff, 1);
    7608:	0023      	movs	r3, r4
    760a:	e7d4      	b.n	75b6 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 0) // ENDPOINTHALT
    760c:	2c00      	cmp	r4, #0
    760e:	d108      	bne.n	7622 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x96>
			isEndpointHalt = 1;
    7610:	2001      	movs	r0, #1
    7612:	4b1b      	ldr	r3, [pc, #108]	; (7680 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    7614:	4a1c      	ldr	r2, [pc, #112]	; (7688 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    7616:	7018      	strb	r0, [r3, #0]
    7618:	6993      	ldr	r3, [r2, #24]
    761a:	0b9b      	lsrs	r3, r3, #14
    761c:	039b      	lsls	r3, r3, #14
    761e:	6193      	str	r3, [r2, #24]
			return true;
    7620:	e7cd      	b.n	75be <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		setAddress(setup.wValueL);
    7622:	78a9      	ldrb	r1, [r5, #2]
    7624:	0030      	movs	r0, r6
    7626:	f7ff fc1f 	bl	6e68 <_ZN14USBDeviceClass10setAddressEm>
    762a:	e7c7      	b.n	75bc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		return sendDescriptor(setup);
    762c:	0030      	movs	r0, r6
    762e:	f7ff ff3b 	bl	74a8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>
    7632:	e7c4      	b.n	75be <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		armSend(0, (void*)&_usbConfiguration, 1);
    7634:	2301      	movs	r3, #1
    7636:	4a15      	ldr	r2, [pc, #84]	; (768c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    7638:	e7cb      	b.n	75d2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    763a:	780b      	ldrb	r3, [r1, #0]
			return false;
    763c:	2000      	movs	r0, #0
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    763e:	06db      	lsls	r3, r3, #27
    7640:	d1bd      	bne.n	75be <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
			initEndpoints();
    7642:	0030      	movs	r0, r6
    7644:	f7ff fcd6 	bl	6ff4 <_ZN14USBDeviceClass13initEndpointsEv>
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    7648:	202a      	movs	r0, #42	; 0x2a
    764a:	2102      	movs	r1, #2
			_usbConfiguration = setup.wValueL;
    764c:	78aa      	ldrb	r2, [r5, #2]
    764e:	4b0f      	ldr	r3, [pc, #60]	; (768c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    7650:	30ff      	adds	r0, #255	; 0xff
    7652:	601a      	str	r2, [r3, #0]
    7654:	4a0c      	ldr	r2, [pc, #48]	; (7688 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    7656:	6813      	ldr	r3, [r2, #0]
    7658:	5c1c      	ldrb	r4, [r3, r0]
    765a:	4321      	orrs	r1, r4
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    765c:	244a      	movs	r4, #74	; 0x4a
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    765e:	5419      	strb	r1, [r3, r0]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    7660:	34ff      	adds	r4, #255	; 0xff
    7662:	5d19      	ldrb	r1, [r3, r4]
    7664:	3829      	subs	r0, #41	; 0x29
    7666:	38ff      	subs	r0, #255	; 0xff
    7668:	4301      	orrs	r1, r0
    766a:	5519      	strb	r1, [r3, r4]
    766c:	e7d4      	b.n	7618 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x8c>
		armSend(0, (void*)&_usbSetInterface, 1);
    766e:	2301      	movs	r3, #1
    7670:	4a07      	ldr	r2, [pc, #28]	; (7690 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    7672:	e7ae      	b.n	75d2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		_usbSetInterface = setup.wValueL;
    7674:	788a      	ldrb	r2, [r1, #2]
    7676:	4b06      	ldr	r3, [pc, #24]	; (7690 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    7678:	601a      	str	r2, [r3, #0]
    767a:	e7b7      	b.n	75ec <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x60>
		return false;
    767c:	2000      	movs	r0, #0
    767e:	e79e      	b.n	75be <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
    7680:	20000430 	.word	0x20000430
    7684:	20000438 	.word	0x20000438
    7688:	200008c8 	.word	0x200008c8
    768c:	200008c0 	.word	0x200008c0
    7690:	200008c4 	.word	0x200008c4

00007694 <_ZN14USBDeviceClass10ISRHandlerEv>:

void USBDeviceClass::ISRHandler()
{

	if (_pack_message == true) {
    7694:	4b3c      	ldr	r3, [pc, #240]	; (7788 <_ZN14USBDeviceClass10ISRHandlerEv+0xf4>)
{
    7696:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (_pack_message == true) {
    7698:	781c      	ldrb	r4, [r3, #0]
{
    769a:	0007      	movs	r7, r0
	if (_pack_message == true) {
    769c:	2c00      	cmp	r4, #0
    769e:	d15e      	bne.n	775e <_ZN14USBDeviceClass10ISRHandlerEv+0xca>
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
    76a0:	4e3a      	ldr	r6, [pc, #232]	; (778c <_ZN14USBDeviceClass10ISRHandlerEv+0xf8>)
    76a2:	6833      	ldr	r3, [r6, #0]
    76a4:	8b9b      	ldrh	r3, [r3, #28]
		return;
	}
	// End-Of-Reset
	if (usbd.isEndOfResetInterrupt())
    76a6:	071b      	lsls	r3, r3, #28
    76a8:	d50e      	bpl.n	76c8 <_ZN14USBDeviceClass10ISRHandlerEv+0x34>
    76aa:	0021      	movs	r1, r4
    76ac:	0020      	movs	r0, r4
    76ae:	f7ff f933 	bl	6918 <_ZN14USBDeviceClass6initEPEmm.part.5>
	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
    76b2:	6832      	ldr	r2, [r6, #0]
    76b4:	2310      	movs	r3, #16
    76b6:	0011      	movs	r1, r2
    76b8:	31ff      	adds	r1, #255	; 0xff
    76ba:	7a88      	ldrb	r0, [r1, #10]
    76bc:	4303      	orrs	r3, r0
    76be:	728b      	strb	r3, [r1, #10]
		initEP(0, USB_ENDPOINT_TYPE_CONTROL);

		// Enable Setup-Received interrupt
		usbd.epBank0EnableSetupReceived(0);

		_usbConfiguration = 0;
    76c0:	4b33      	ldr	r3, [pc, #204]	; (7790 <_ZN14USBDeviceClass10ISRHandlerEv+0xfc>)
    76c2:	601c      	str	r4, [r3, #0]
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
    76c4:	2308      	movs	r3, #8
    76c6:	8393      	strh	r3, [r2, #28]
	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
    76c8:	6833      	ldr	r3, [r6, #0]
    76ca:	8b9a      	ldrh	r2, [r3, #28]

		usbd.ackEndOfResetInterrupt();
	}

	// Start-Of-Frame
	if (usbd.isStartOfFrameInterrupt())
    76cc:	0752      	lsls	r2, r2, #29
    76ce:	d501      	bpl.n	76d4 <_ZN14USBDeviceClass10ISRHandlerEv+0x40>
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
    76d0:	2204      	movs	r2, #4
    76d2:	839a      	strh	r2, [r3, #28]
	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
    76d4:	33ff      	adds	r3, #255	; 0xff
    76d6:	7a1a      	ldrb	r2, [r3, #8]
		}
#endif
	}

	// Endpoint 0 Received Setup interrupt
	if (usbd.epBank0IsSetupReceived(0))
    76d8:	06d2      	lsls	r2, r2, #27
    76da:	d520      	bpl.n	771e <_ZN14USBDeviceClass10ISRHandlerEv+0x8a>
	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
    76dc:	2210      	movs	r2, #16
    76de:	721a      	strb	r2, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    76e0:	7959      	ldrb	r1, [r3, #5]
    76e2:	3230      	adds	r2, #48	; 0x30
    76e4:	430a      	orrs	r2, r1
    76e6:	715a      	strb	r2, [r3, #5]
		/* Clear the Bank 0 ready flag on Control OUT */
		// The RAM Buffer is empty: we can receive data
		usbd.epBank0ResetReady(0);

		bool ok;
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    76e8:	2360      	movs	r3, #96	; 0x60
    76ea:	492a      	ldr	r1, [pc, #168]	; (7794 <_ZN14USBDeviceClass10ISRHandlerEv+0x100>)
			// Standard Requests
			ok = handleStandardSetup(*setup);
    76ec:	0038      	movs	r0, r7
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    76ee:	780a      	ldrb	r2, [r1, #0]
    76f0:	421a      	tst	r2, r3
    76f2:	d135      	bne.n	7760 <_ZN14USBDeviceClass10ISRHandlerEv+0xcc>
			ok = handleStandardSetup(*setup);
    76f4:	f7ff ff4a 	bl	758c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>
		} else {
			// Class Interface Requests
			ok = handleClassInterfaceSetup(*setup);
		}

		if (ok) {
    76f8:	2800      	cmp	r0, #0
    76fa:	d034      	beq.n	7766 <_ZN14USBDeviceClass10ISRHandlerEv+0xd2>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    76fc:	2280      	movs	r2, #128	; 0x80
    76fe:	6833      	ldr	r3, [r6, #0]
    7700:	4252      	negs	r2, r2
    7702:	33ff      	adds	r3, #255	; 0xff
    7704:	7999      	ldrb	r1, [r3, #6]
    7706:	430a      	orrs	r2, r1
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    7708:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
    770a:	6833      	ldr	r3, [r6, #0]
    770c:	33ff      	adds	r3, #255	; 0xff
    770e:	7a1a      	ldrb	r2, [r3, #8]
			usbd.epBank1SetReady(0);
		} else {
			stall(0);
		}

		if (usbd.epBank1IsStalled(0))
    7710:	0652      	lsls	r2, r2, #25
    7712:	d504      	bpl.n	771e <_ZN14USBDeviceClass10ISRHandlerEv+0x8a>
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
    7714:	2240      	movs	r2, #64	; 0x40
    7716:	721a      	strb	r2, [r3, #8]
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    7718:	7a59      	ldrb	r1, [r3, #9]
    771a:	430a      	orrs	r2, r1
    771c:	725a      	strb	r2, [r3, #9]
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }
    771e:	6833      	ldr	r3, [r6, #0]
		}

	} // end Received Setup handler

	uint8_t i=0;
	uint8_t ept_int = usbd.epInterruptSummary() & 0xFE; // Remove endpoint number 0 (setup)
    7720:	2500      	movs	r5, #0
    7722:	8c1c      	ldrh	r4, [r3, #32]
    7724:	2301      	movs	r3, #1
    7726:	439c      	bics	r4, r3
    7728:	b2e4      	uxtb	r4, r4
	while (ept_int != 0)
	{
		// Check if endpoint has a pending interrupt
		if ((ept_int & (1 << i)) != 0)
    772a:	9301      	str	r3, [sp, #4]
    772c:	b2e9      	uxtb	r1, r5
	while (ept_int != 0)
    772e:	2c00      	cmp	r4, #0
    7730:	d015      	beq.n	775e <_ZN14USBDeviceClass10ISRHandlerEv+0xca>
		if ((ept_int & (1 << i)) != 0)
    7732:	0023      	movs	r3, r4
    7734:	412b      	asrs	r3, r5
    7736:	9a01      	ldr	r2, [sp, #4]
    7738:	4213      	tst	r3, r2
    773a:	d00d      	beq.n	7758 <_ZN14USBDeviceClass10ISRHandlerEv+0xc4>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    773c:	002b      	movs	r3, r5
    773e:	6832      	ldr	r2, [r6, #0]
    7740:	3308      	adds	r3, #8
    7742:	015b      	lsls	r3, r3, #5
    7744:	18d3      	adds	r3, r2, r3
    7746:	79da      	ldrb	r2, [r3, #7]
		{
			// Endpoint Transfer Complete (0/1) Interrupt
			if (usbd.epBank0IsTransferComplete(i) ||
    7748:	07d2      	lsls	r2, r2, #31
    774a:	d413      	bmi.n	7774 <_ZN14USBDeviceClass10ISRHandlerEv+0xe0>
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    774c:	79db      	ldrb	r3, [r3, #7]
    774e:	079b      	lsls	r3, r3, #30
    7750:	d410      	bmi.n	7774 <_ZN14USBDeviceClass10ISRHandlerEv+0xe0>
					epHandlers[i]->handleEndpoint();
				} else {
					handleEndpoint(i);
				}
			}
			ept_int &= ~(1 << i);
    7752:	9b01      	ldr	r3, [sp, #4]
    7754:	40ab      	lsls	r3, r5
    7756:	439c      	bics	r4, r3
    7758:	3501      	adds	r5, #1
		}
		i++;
		if (i > USB_EPT_NUM)
    775a:	2d09      	cmp	r5, #9
    775c:	d1e6      	bne.n	772c <_ZN14USBDeviceClass10ISRHandlerEv+0x98>
			break;  // fire exit
	}
}
    775e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			ok = handleClassInterfaceSetup(*setup);
    7760:	f7ff fbb2 	bl	6ec8 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>
    7764:	e7c8      	b.n	76f8 <_ZN14USBDeviceClass10ISRHandlerEv+0x64>
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    7766:	2220      	movs	r2, #32
    7768:	4b0b      	ldr	r3, [pc, #44]	; (7798 <_ZN14USBDeviceClass10ISRHandlerEv+0x104>)
    776a:	e7cd      	b.n	7708 <_ZN14USBDeviceClass10ISRHandlerEv+0x74>
					epHandlers[i]->handleEndpoint();
    776c:	6803      	ldr	r3, [r0, #0]
    776e:	681b      	ldr	r3, [r3, #0]
    7770:	4798      	blx	r3
    7772:	e7ee      	b.n	7752 <_ZN14USBDeviceClass10ISRHandlerEv+0xbe>
				if (epHandlers[i]) {
    7774:	4b09      	ldr	r3, [pc, #36]	; (779c <_ZN14USBDeviceClass10ISRHandlerEv+0x108>)
    7776:	00aa      	lsls	r2, r5, #2
    7778:	58d0      	ldr	r0, [r2, r3]
    777a:	2800      	cmp	r0, #0
    777c:	d1f6      	bne.n	776c <_ZN14USBDeviceClass10ISRHandlerEv+0xd8>
					handleEndpoint(i);
    777e:	0038      	movs	r0, r7
    7780:	f7ff fad6 	bl	6d30 <_ZN14USBDeviceClass14handleEndpointEh>
    7784:	e7e5      	b.n	7752 <_ZN14USBDeviceClass10ISRHandlerEv+0xbe>
    7786:	46c0      	nop			; (mov r8, r8)
    7788:	200008bd 	.word	0x200008bd
    778c:	200008c8 	.word	0x200008c8
    7790:	200008c0 	.word	0x200008c0
    7794:	200005fc 	.word	0x200005fc
    7798:	410050ff 	.word	0x410050ff
    779c:	20000414 	.word	0x20000414

000077a0 <UDD_Handler>:
extern "C" void UDD_Handler(void) {
    77a0:	b510      	push	{r4, lr}
	USBDevice.ISRHandler();
    77a2:	4802      	ldr	r0, [pc, #8]	; (77ac <UDD_Handler+0xc>)
    77a4:	f7ff ff76 	bl	7694 <_ZN14USBDeviceClass10ISRHandlerEv>
}
    77a8:	bd10      	pop	{r4, pc}
    77aa:	46c0      	nop			; (mov r8, r8)
    77ac:	20000410 	.word	0x20000410

000077b0 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv>:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
    77b0:	4a01      	ldr	r2, [pc, #4]	; (77b8 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0x8>)
    77b2:	4b02      	ldr	r3, [pc, #8]	; (77bc <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0xc>)
    77b4:	601a      	str	r2, [r3, #0]
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    77b6:	4770      	bx	lr
    77b8:	41005000 	.word	0x41005000
    77bc:	200008c8 	.word	0x200008c8

000077c0 <init>:
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
  // Set Systick to 1ms interval, common to all Cortex-M variants
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    77c0:	21fa      	movs	r1, #250	; 0xfa
    77c2:	4b2d      	ldr	r3, [pc, #180]	; (7878 <init+0xb8>)
{
    77c4:	b510      	push	{r4, lr}
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    77c6:	6818      	ldr	r0, [r3, #0]
    77c8:	0089      	lsls	r1, r1, #2
    77ca:	f000 fe7d 	bl	84c8 <__udivsi3>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    77ce:	4b2b      	ldr	r3, [pc, #172]	; (787c <init+0xbc>)
    77d0:	3801      	subs	r0, #1
    77d2:	4298      	cmp	r0, r3
    77d4:	d84f      	bhi.n	7876 <init+0xb6>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    77d6:	492a      	ldr	r1, [pc, #168]	; (7880 <init+0xc0>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    77d8:	4a2a      	ldr	r2, [pc, #168]	; (7884 <init+0xc4>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    77da:	6048      	str	r0, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    77dc:	20c0      	movs	r0, #192	; 0xc0
    77de:	6a13      	ldr	r3, [r2, #32]
    77e0:	0600      	lsls	r0, r0, #24
    77e2:	021b      	lsls	r3, r3, #8
    77e4:	0a1b      	lsrs	r3, r3, #8
    77e6:	4303      	orrs	r3, r0
    77e8:	6213      	str	r3, [r2, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    77ea:	2300      	movs	r3, #0
    77ec:	608b      	str	r3, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    77ee:	3307      	adds	r3, #7
    77f0:	600b      	str	r3, [r1, #0]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    77f2:	2180      	movs	r1, #128	; 0x80
    77f4:	6a13      	ldr	r3, [r2, #32]
    77f6:	0609      	lsls	r1, r1, #24
    77f8:	021b      	lsls	r3, r3, #8
    77fa:	0a1b      	lsrs	r3, r3, #8
    77fc:	430b      	orrs	r3, r1
    77fe:	6213      	str	r3, [r2, #32]
//
//  // Clock EIC for I/O interrupts
//  PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    7800:	22fc      	movs	r2, #252	; 0xfc
    7802:	4b21      	ldr	r3, [pc, #132]	; (7888 <init+0xc8>)
    7804:	6a19      	ldr	r1, [r3, #32]
    7806:	430a      	orrs	r2, r1
    7808:	621a      	str	r2, [r3, #32]

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    780a:	22fc      	movs	r2, #252	; 0xfc
    780c:	6a19      	ldr	r1, [r3, #32]
    780e:	0192      	lsls	r2, r2, #6
    7810:	430a      	orrs	r2, r1
    7812:	621a      	str	r2, [r3, #32]

  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
    7814:	22a0      	movs	r2, #160	; 0xa0
    7816:	6a19      	ldr	r1, [r3, #32]
    7818:	02d2      	lsls	r2, r2, #11
    781a:	430a      	orrs	r2, r1
    781c:	621a      	str	r2, [r3, #32]
//    pinMode( ul, INPUT ) ; // Don't do this if low power is needed.
  }

  // Initialize Analog Controller
  // Setting clock
  while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    781e:	4b1b      	ldr	r3, [pc, #108]	; (788c <init+0xcc>)
    7820:	001c      	movs	r4, r3
    7822:	785a      	ldrb	r2, [r3, #1]
    7824:	b252      	sxtb	r2, r2
    7826:	2a00      	cmp	r2, #0
    7828:	dbfb      	blt.n	7822 <init+0x62>

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_ADC ) | // Generic Clock ADC
    782a:	4a19      	ldr	r2, [pc, #100]	; (7890 <init+0xd0>)
    782c:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    782e:	4b19      	ldr	r3, [pc, #100]	; (7894 <init+0xd4>)
    7830:	001a      	movs	r2, r3
    7832:	7e59      	ldrb	r1, [r3, #25]
    7834:	09c9      	lsrs	r1, r1, #7
    7836:	2901      	cmp	r1, #1
    7838:	d0fb      	beq.n	7832 <init+0x72>

  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |    // Divide Clock by 512.
    783a:	21e4      	movs	r1, #228	; 0xe4
    783c:	00c9      	lsls	r1, r1, #3
    783e:	8099      	strh	r1, [r3, #4]
                   ADC_CTRLB_RESSEL_10BIT;         // 10 bits resolution as default

  ADC->SAMPCTRL.reg = 0x3f;                        // Set max Sampling Time Length
    7840:	213f      	movs	r1, #63	; 0x3f
    7842:	70d9      	strb	r1, [r3, #3]

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    7844:	7e53      	ldrb	r3, [r2, #25]
    7846:	09db      	lsrs	r3, r3, #7
    7848:	2b01      	cmp	r3, #1
    784a:	d0fb      	beq.n	7844 <init+0x84>

  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    784c:	23c0      	movs	r3, #192	; 0xc0

  // Averaging (see datasheet table in AVGCTRL register description)
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    784e:	2000      	movs	r0, #0
  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    7850:	015b      	lsls	r3, r3, #5
    7852:	6113      	str	r3, [r2, #16]
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    7854:	7090      	strb	r0, [r2, #2]
                     ADC_AVGCTRL_ADJRES(0x0ul);   // Adjusting result by 0

  analogReference( AR_DEFAULT ) ; // Analog Reference is AREF pin (3.3v)
    7856:	f000 f82d 	bl	78b4 <analogReference>

  // Initialize DAC
  // Setting clock
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
    785a:	7863      	ldrb	r3, [r4, #1]
    785c:	b25b      	sxtb	r3, r3
    785e:	2b00      	cmp	r3, #0
    7860:	dbfb      	blt.n	785a <init+0x9a>
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    7862:	4b0d      	ldr	r3, [pc, #52]	; (7898 <init+0xd8>)
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    7864:	4a0d      	ldr	r2, [pc, #52]	; (789c <init+0xdc>)
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    7866:	8063      	strh	r3, [r4, #2]
  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    7868:	79d3      	ldrb	r3, [r2, #7]
    786a:	09db      	lsrs	r3, r3, #7
    786c:	2b01      	cmp	r3, #1
    786e:	d0fb      	beq.n	7868 <init+0xa8>
  DAC->CTRLB.reg = DAC_CTRLB_REFSEL_AVCC | // Using the 3.3V reference
    7870:	2341      	movs	r3, #65	; 0x41
    7872:	7053      	strb	r3, [r2, #1]
                   DAC_CTRLB_EOEN ;        // External Output Enable (Vout)
}
    7874:	bd10      	pop	{r4, pc}
    7876:	e7fe      	b.n	7876 <init+0xb6>
    7878:	20000084 	.word	0x20000084
    787c:	00ffffff 	.word	0x00ffffff
    7880:	e000e010 	.word	0xe000e010
    7884:	e000ed00 	.word	0xe000ed00
    7888:	40000400 	.word	0x40000400
    788c:	40000c00 	.word	0x40000c00
    7890:	0000401e 	.word	0x0000401e
    7894:	42004000 	.word	0x42004000
    7898:	00004021 	.word	0x00004021
    789c:	42004800 	.word	0x42004800

000078a0 <mapResolution>:
  _writeResolution = res;
}

static inline uint32_t mapResolution(uint32_t value, uint32_t from, uint32_t to)
{
  if (from == to) {
    78a0:	4291      	cmp	r1, r2
    78a2:	d002      	beq.n	78aa <mapResolution+0xa>
    return value;
  }
  if (from > to) {
    78a4:	d902      	bls.n	78ac <mapResolution+0xc>
    return value >> (from-to);
    78a6:	1a8a      	subs	r2, r1, r2
    78a8:	40d0      	lsrs	r0, r2
  }
  return value << (to-from);
}
    78aa:	4770      	bx	lr
  return value << (to-from);
    78ac:	1a52      	subs	r2, r2, r1
    78ae:	4090      	lsls	r0, r2
    78b0:	e7fb      	b.n	78aa <mapResolution+0xa>
	...

000078b4 <analogReference>:
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    78b4:	4a16      	ldr	r2, [pc, #88]	; (7910 <analogReference+0x5c>)
 * External Reference should be between 1v and VDDANA-0.6v=2.7v
 *
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
    78b6:	b500      	push	{lr}
    78b8:	0013      	movs	r3, r2
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    78ba:	7e51      	ldrb	r1, [r2, #25]
    78bc:	09c9      	lsrs	r1, r1, #7
    78be:	2901      	cmp	r1, #1
    78c0:	d0fb      	beq.n	78ba <analogReference+0x6>
  syncADC();
  switch (mode)
    78c2:	3801      	subs	r0, #1
    78c4:	2804      	cmp	r0, #4
    78c6:	d816      	bhi.n	78f6 <analogReference+0x42>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
      break;

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    78c8:	6919      	ldr	r1, [r3, #16]
    78ca:	4a12      	ldr	r2, [pc, #72]	; (7914 <analogReference+0x60>)
    78cc:	400a      	ands	r2, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    78ce:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    78d0:	611a      	str	r2, [r3, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    78d2:	785a      	ldrb	r2, [r3, #1]
    78d4:	438a      	bics	r2, r1
  switch (mode)
    78d6:	f000 fde3 	bl	84a0 <__gnu_thumb1_case_uqi>
    78da:	0803      	.short	0x0803
    78dc:	0b06      	.short	0x0b06
    78de:	03          	.byte	0x03
    78df:	00          	.byte	0x00
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; // 1/1.48 VDDANA = 1/1.48* 3V3 = 2.2297
    78e0:	0011      	movs	r1, r2
    78e2:	2201      	movs	r2, #1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    78e4:	430a      	orrs	r2, r1
    78e6:	705a      	strb	r2, [r3, #1]
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
      break;
  }
}
    78e8:	bd00      	pop	{pc}
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;
    78ea:	0011      	movs	r1, r2
    78ec:	2203      	movs	r2, #3
    78ee:	e7f9      	b.n	78e4 <analogReference+0x30>
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    78f0:	0011      	movs	r1, r2
    78f2:	2202      	movs	r2, #2
    78f4:	e7f6      	b.n	78e4 <analogReference+0x30>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    78f6:	23f0      	movs	r3, #240	; 0xf0
    78f8:	6911      	ldr	r1, [r2, #16]
    78fa:	051b      	lsls	r3, r3, #20
    78fc:	430b      	orrs	r3, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    78fe:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    7900:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    7902:	7853      	ldrb	r3, [r2, #1]
    7904:	438b      	bics	r3, r1
    7906:	0019      	movs	r1, r3
    7908:	2302      	movs	r3, #2
    790a:	430b      	orrs	r3, r1
    790c:	7053      	strb	r3, [r2, #1]
}
    790e:	e7eb      	b.n	78e8 <analogReference+0x34>
    7910:	42004000 	.word	0x42004000
    7914:	f0ffffff 	.word	0xf0ffffff

00007918 <analogRead>:

uint32_t analogRead(uint32_t pin)
{
    7918:	b510      	push	{r4, lr}
    791a:	0004      	movs	r4, r0
  uint32_t valueRead = 0;

  if (pin < A0) {
    791c:	280e      	cmp	r0, #14
    791e:	d800      	bhi.n	7922 <analogRead+0xa>
    pin += A0;
    7920:	340f      	adds	r4, #15
  }

  pinPeripheral(pin, PIO_ANALOG);
    7922:	2101      	movs	r1, #1
    7924:	0020      	movs	r0, r4
    7926:	f000 f8ed 	bl	7b04 <pinPeripheral>

  if (pin == A0) { // Disable DAC, if analogWrite(A0,dval) used previously the DAC is enabled
    792a:	2c0f      	cmp	r4, #15
    792c:	d10d      	bne.n	794a <analogRead+0x32>
  while (DAC->STATUS.bit.SYNCBUSY == 1)
    792e:	4b28      	ldr	r3, [pc, #160]	; (79d0 <analogRead+0xb8>)
    7930:	0019      	movs	r1, r3
    7932:	79da      	ldrb	r2, [r3, #7]
    7934:	09d2      	lsrs	r2, r2, #7
    7936:	2a01      	cmp	r2, #1
    7938:	d0fb      	beq.n	7932 <analogRead+0x1a>
    syncDAC();
    DAC->CTRLA.bit.ENABLE = 0x00; // Disable DAC
    793a:	2002      	movs	r0, #2
    793c:	781a      	ldrb	r2, [r3, #0]
    793e:	4382      	bics	r2, r0
    7940:	701a      	strb	r2, [r3, #0]
  while (DAC->STATUS.bit.SYNCBUSY == 1)
    7942:	79cb      	ldrb	r3, [r1, #7]
    7944:	09db      	lsrs	r3, r3, #7
    7946:	2b01      	cmp	r3, #1
    7948:	d0fb      	beq.n	7942 <analogRead+0x2a>
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    794a:	4922      	ldr	r1, [pc, #136]	; (79d4 <analogRead+0xbc>)
    794c:	000b      	movs	r3, r1
    794e:	7e4a      	ldrb	r2, [r1, #25]
    7950:	09d2      	lsrs	r2, r2, #7
    7952:	2a01      	cmp	r2, #1
    7954:	d0fb      	beq.n	794e <analogRead+0x36>
    //DAC->CTRLB.bit.EOEN = 0x00; // The DAC output is turned off.
    syncDAC();
  }

  syncADC();
  ADC->INPUTCTRL.bit.MUXPOS = g_APinDescription[pin].ulADCChannelNumber; // Selection for the positive ADC input
    7956:	2218      	movs	r2, #24
    7958:	4362      	muls	r2, r4
    795a:	4c1f      	ldr	r4, [pc, #124]	; (79d8 <analogRead+0xc0>)
    795c:	18a4      	adds	r4, r4, r2
    795e:	7c20      	ldrb	r0, [r4, #16]
    7960:	241f      	movs	r4, #31
    7962:	690a      	ldr	r2, [r1, #16]
    7964:	4020      	ands	r0, r4
    7966:	43a2      	bics	r2, r4
    7968:	4302      	orrs	r2, r0
    796a:	610a      	str	r2, [r1, #16]
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    796c:	7e5a      	ldrb	r2, [r3, #25]
    796e:	09d2      	lsrs	r2, r2, #7
    7970:	2a01      	cmp	r2, #1
    7972:	d0fb      	beq.n	796c <analogRead+0x54>
   *
   * Before enabling the ADC, the asynchronous clock source must be selected and enabled, and the ADC reference must be
   * configured. The first conversion after the reference is changed must not be used.
   */
  syncADC();
  ADC->CTRLA.bit.ENABLE = 0x01;             // Enable ADC
    7974:	2202      	movs	r2, #2
    7976:	7819      	ldrb	r1, [r3, #0]
    7978:	430a      	orrs	r2, r1
    797a:	701a      	strb	r2, [r3, #0]
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    797c:	7e5a      	ldrb	r2, [r3, #25]
    797e:	09d2      	lsrs	r2, r2, #7
    7980:	2a01      	cmp	r2, #1
    7982:	d0fb      	beq.n	797c <analogRead+0x64>

  // Start conversion
  syncADC();
  ADC->SWTRIG.bit.START = 1;
    7984:	2202      	movs	r2, #2
    7986:	7b19      	ldrb	r1, [r3, #12]
    7988:	430a      	orrs	r2, r1
    798a:	731a      	strb	r2, [r3, #12]

  // Clear the Data Ready flag
  ADC->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    798c:	2201      	movs	r2, #1
    798e:	761a      	strb	r2, [r3, #24]
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    7990:	7e5a      	ldrb	r2, [r3, #25]
    7992:	09d2      	lsrs	r2, r2, #7
    7994:	2a01      	cmp	r2, #1
    7996:	d0fb      	beq.n	7990 <analogRead+0x78>

  // Start conversion again, since The first conversion after the reference is changed must not be used.
  syncADC();
  ADC->SWTRIG.bit.START = 1;
    7998:	2202      	movs	r2, #2
    799a:	7b19      	ldrb	r1, [r3, #12]
    799c:	430a      	orrs	r2, r1
    799e:	731a      	strb	r2, [r3, #12]

  // Store the value
  while (ADC->INTFLAG.bit.RESRDY == 0);   // Waiting for conversion to complete
    79a0:	7e1a      	ldrb	r2, [r3, #24]
    79a2:	07d2      	lsls	r2, r2, #31
    79a4:	d5fc      	bpl.n	79a0 <analogRead+0x88>
  valueRead = ADC->RESULT.reg;
    79a6:	8b58      	ldrh	r0, [r3, #26]
    79a8:	b280      	uxth	r0, r0
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    79aa:	7e5a      	ldrb	r2, [r3, #25]
    79ac:	09d2      	lsrs	r2, r2, #7
    79ae:	2a01      	cmp	r2, #1
    79b0:	d0fb      	beq.n	79aa <analogRead+0x92>

  syncADC();
  ADC->CTRLA.bit.ENABLE = 0x00;             // Disable ADC
    79b2:	2102      	movs	r1, #2
    79b4:	781a      	ldrb	r2, [r3, #0]
    79b6:	438a      	bics	r2, r1
    79b8:	701a      	strb	r2, [r3, #0]
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    79ba:	7e5a      	ldrb	r2, [r3, #25]
    79bc:	09d2      	lsrs	r2, r2, #7
    79be:	2a01      	cmp	r2, #1
    79c0:	d0fb      	beq.n	79ba <analogRead+0xa2>
  syncADC();

  return mapResolution(valueRead, _ADCResolution, _readResolution);
    79c2:	4b06      	ldr	r3, [pc, #24]	; (79dc <analogRead+0xc4>)
    79c4:	681a      	ldr	r2, [r3, #0]
    79c6:	4b06      	ldr	r3, [pc, #24]	; (79e0 <analogRead+0xc8>)
    79c8:	6819      	ldr	r1, [r3, #0]
    79ca:	f7ff ff69 	bl	78a0 <mapResolution>
}
    79ce:	bd10      	pop	{r4, pc}
    79d0:	42004800 	.word	0x42004800
    79d4:	42004000 	.word	0x42004000
    79d8:	0000dc20 	.word	0x0000dc20
    79dc:	2000008c 	.word	0x2000008c
    79e0:	20000088 	.word	0x20000088

000079e4 <pinMode>:
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    79e4:	2318      	movs	r3, #24
{
    79e6:	b530      	push	{r4, r5, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    79e8:	001d      	movs	r5, r3
{
    79ea:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    79ec:	4345      	muls	r5, r0
    79ee:	2008      	movs	r0, #8
    79f0:	4a20      	ldr	r2, [pc, #128]	; (7a74 <pinMode+0x90>)
    79f2:	1955      	adds	r5, r2, r5
    79f4:	5628      	ldrsb	r0, [r5, r0]
    79f6:	3001      	adds	r0, #1
    79f8:	d014      	beq.n	7a24 <pinMode+0x40>
  {
    return ;
  }

  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
    79fa:	2903      	cmp	r1, #3
    79fc:	d812      	bhi.n	7a24 <pinMode+0x40>
    79fe:	0008      	movs	r0, r1
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    break ;

    case INPUT_PULLDOWN:
      // Set pin to input mode with pull-down resistor enabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    7a00:	4363      	muls	r3, r4
    7a02:	56d1      	ldrsb	r1, [r2, r3]
    7a04:	18d3      	adds	r3, r2, r3
  switch ( ulMode )
    7a06:	f000 fd4b 	bl	84a0 <__gnu_thumb1_case_uqi>
    7a0a:	2802      	.short	0x2802
    7a0c:	1b0e      	.short	0x1b0e
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    7a0e:	6858      	ldr	r0, [r3, #4]
    7a10:	01cb      	lsls	r3, r1, #7
    7a12:	2102      	movs	r1, #2
    7a14:	4a18      	ldr	r2, [pc, #96]	; (7a78 <pinMode+0x94>)
    7a16:	189b      	adds	r3, r3, r2
    7a18:	181a      	adds	r2, r3, r0
    7a1a:	3240      	adds	r2, #64	; 0x40
    7a1c:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    7a1e:	2201      	movs	r2, #1
    7a20:	4082      	lsls	r2, r0
    7a22:	605a      	str	r2, [r3, #4]

    default:
      // do nothing
    break ;
  }
}
    7a24:	bd30      	pop	{r4, r5, pc}
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    7a26:	6858      	ldr	r0, [r3, #4]
    7a28:	01cb      	lsls	r3, r1, #7
    7a2a:	2106      	movs	r1, #6
    7a2c:	4a12      	ldr	r2, [pc, #72]	; (7a78 <pinMode+0x94>)
    7a2e:	189b      	adds	r3, r3, r2
    7a30:	181a      	adds	r2, r3, r0
    7a32:	3240      	adds	r2, #64	; 0x40
    7a34:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    7a36:	2201      	movs	r2, #1
    7a38:	4082      	lsls	r2, r0
    7a3a:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    7a3c:	619a      	str	r2, [r3, #24]
    break ;
    7a3e:	e7f1      	b.n	7a24 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    7a40:	6858      	ldr	r0, [r3, #4]
    7a42:	01cb      	lsls	r3, r1, #7
    7a44:	2106      	movs	r1, #6
    7a46:	4a0c      	ldr	r2, [pc, #48]	; (7a78 <pinMode+0x94>)
    7a48:	189b      	adds	r3, r3, r2
    7a4a:	181a      	adds	r2, r3, r0
    7a4c:	3240      	adds	r2, #64	; 0x40
    7a4e:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    7a50:	2201      	movs	r2, #1
    7a52:	4082      	lsls	r2, r0
    7a54:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    7a56:	615a      	str	r2, [r3, #20]
    break ;
    7a58:	e7e4      	b.n	7a24 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    7a5a:	6858      	ldr	r0, [r3, #4]
    7a5c:	01cb      	lsls	r3, r1, #7
    7a5e:	2102      	movs	r1, #2
    7a60:	4a05      	ldr	r2, [pc, #20]	; (7a78 <pinMode+0x94>)
    7a62:	189b      	adds	r3, r3, r2
    7a64:	181a      	adds	r2, r3, r0
    7a66:	3240      	adds	r2, #64	; 0x40
    7a68:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    7a6a:	2201      	movs	r2, #1
    7a6c:	4082      	lsls	r2, r0
    7a6e:	609a      	str	r2, [r3, #8]
    break ;
    7a70:	e7d8      	b.n	7a24 <pinMode+0x40>
    7a72:	46c0      	nop			; (mov r8, r8)
    7a74:	0000dc20 	.word	0x0000dc20
    7a78:	41004400 	.word	0x41004400

00007a7c <digitalWrite>:

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    7a7c:	2318      	movs	r3, #24
{
    7a7e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    7a80:	2408      	movs	r4, #8
    7a82:	4358      	muls	r0, r3
    7a84:	4a11      	ldr	r2, [pc, #68]	; (7acc <digitalWrite+0x50>)
    7a86:	1813      	adds	r3, r2, r0
    7a88:	571c      	ldrsb	r4, [r3, r4]
    7a8a:	3401      	adds	r4, #1
    7a8c:	d01b      	beq.n	7ac6 <digitalWrite+0x4a>
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
  uint32_t pin = g_APinDescription[ulPin].ulPin;
  uint32_t pinMask = (1ul << pin);
    7a8e:	2601      	movs	r6, #1
    7a90:	0035      	movs	r5, r6
  uint32_t pin = g_APinDescription[ulPin].ulPin;
    7a92:	685f      	ldr	r7, [r3, #4]

  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    7a94:	5683      	ldrsb	r3, [r0, r2]
  uint32_t pinMask = (1ul << pin);
    7a96:	40bd      	lsls	r5, r7
  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    7a98:	4a0d      	ldr	r2, [pc, #52]	; (7ad0 <digitalWrite+0x54>)
    7a9a:	01db      	lsls	r3, r3, #7
    7a9c:	189a      	adds	r2, r3, r2
    7a9e:	6890      	ldr	r0, [r2, #8]
    7aa0:	4228      	tst	r0, r5
    7aa2:	d10b      	bne.n	7abc <digitalWrite+0x40>
    // the pin is not an output, disable pull-up if val is LOW, otherwise enable pull-up
    PORT->Group[port].PINCFG[pin].bit.PULLEN = ((ulVal == LOW) ? 0 : 1) ;
    7aa4:	000c      	movs	r4, r1
    7aa6:	1e60      	subs	r0, r4, #1
    7aa8:	4184      	sbcs	r4, r0
    7aaa:	19d2      	adds	r2, r2, r7
    7aac:	3240      	adds	r2, #64	; 0x40
    7aae:	7810      	ldrb	r0, [r2, #0]
    7ab0:	4034      	ands	r4, r6
    7ab2:	3603      	adds	r6, #3
    7ab4:	00a4      	lsls	r4, r4, #2
    7ab6:	43b0      	bics	r0, r6
    7ab8:	4320      	orrs	r0, r4
    7aba:	7010      	strb	r0, [r2, #0]
  }

  switch ( ulVal )
  {
    case LOW:
      PORT->Group[port].OUTCLR.reg = pinMask;
    7abc:	4a04      	ldr	r2, [pc, #16]	; (7ad0 <digitalWrite+0x54>)
    7abe:	189b      	adds	r3, r3, r2
  switch ( ulVal )
    7ac0:	2900      	cmp	r1, #0
    7ac2:	d101      	bne.n	7ac8 <digitalWrite+0x4c>
      PORT->Group[port].OUTCLR.reg = pinMask;
    7ac4:	615d      	str	r5, [r3, #20]
      PORT->Group[port].OUTSET.reg = pinMask;
    break ;
  }

  return ;
}
    7ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PORT->Group[port].OUTSET.reg = pinMask;
    7ac8:	619d      	str	r5, [r3, #24]
    break ;
    7aca:	e7fc      	b.n	7ac6 <digitalWrite+0x4a>
    7acc:	0000dc20 	.word	0x0000dc20
    7ad0:	41004400 	.word	0x41004400

00007ad4 <digitalRead>:

int digitalRead( uint32_t ulPin )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    7ad4:	2318      	movs	r3, #24
{
    7ad6:	b510      	push	{r4, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    7ad8:	2408      	movs	r4, #8
    7ada:	4358      	muls	r0, r3
    7adc:	4907      	ldr	r1, [pc, #28]	; (7afc <digitalRead+0x28>)
    7ade:	2300      	movs	r3, #0
    7ae0:	180a      	adds	r2, r1, r0
    7ae2:	5714      	ldrsb	r4, [r2, r4]
    7ae4:	3401      	adds	r4, #1
    7ae6:	d006      	beq.n	7af6 <digitalRead+0x22>
  {
    return LOW ;
  }

  if ( (PORT->Group[g_APinDescription[ulPin].ulPort].IN.reg & (1ul << g_APinDescription[ulPin].ulPin)) != 0 )
    7ae8:	5643      	ldrsb	r3, [r0, r1]
    7aea:	4905      	ldr	r1, [pc, #20]	; (7b00 <digitalRead+0x2c>)
    7aec:	01db      	lsls	r3, r3, #7
    7aee:	185b      	adds	r3, r3, r1
    7af0:	6a1b      	ldr	r3, [r3, #32]
    7af2:	6852      	ldr	r2, [r2, #4]
    7af4:	40d3      	lsrs	r3, r2
    7af6:	2001      	movs	r0, #1
  {
    return HIGH ;
  }

  return LOW ;
}
    7af8:	4018      	ands	r0, r3
    7afa:	bd10      	pop	{r4, pc}
    7afc:	0000dc20 	.word	0x0000dc20
    7b00:	41004400 	.word	0x41004400

00007b04 <pinPeripheral>:

#include "Arduino.h"
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
    7b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7b06:	0003      	movs	r3, r0
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    7b08:	2018      	movs	r0, #24
    7b0a:	4358      	muls	r0, r3
    7b0c:	4a2a      	ldr	r2, [pc, #168]	; (7bb8 <pinPeripheral+0xb4>)
    7b0e:	1810      	adds	r0, r2, r0
    7b10:	7a00      	ldrb	r0, [r0, #8]
    7b12:	b240      	sxtb	r0, r0
  {
    return -1 ;
    7b14:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    7b16:	3001      	adds	r0, #1
    7b18:	d013      	beq.n	7b42 <pinPeripheral+0x3e>
  }

  switch ( ulPeripheral )
    7b1a:	1c48      	adds	r0, r1, #1
    case PIO_NOT_A_PIN:
      return -1l ;
    break ;
  }

  return 0l ;
    7b1c:	2400      	movs	r4, #0
  switch ( ulPeripheral )
    7b1e:	280c      	cmp	r0, #12
    7b20:	d80f      	bhi.n	7b42 <pinPeripheral+0x3e>
    7b22:	f000 fcbd 	bl	84a0 <__gnu_thumb1_case_uqi>
    7b26:	1c45      	.short	0x1c45
    7b28:	1c1c1c1c 	.word	0x1c1c1c1c
    7b2c:	071c1c1c 	.word	0x071c1c1c
    7b30:	0707      	.short	0x0707
    7b32:	07          	.byte	0x07
    7b33:	00          	.byte	0x00
      if ( ulPeripheral == PIO_INPUT )
    7b34:	2909      	cmp	r1, #9
    7b36:	d106      	bne.n	7b46 <pinPeripheral+0x42>
        pinMode( ulPin, INPUT ) ;
    7b38:	2100      	movs	r1, #0
          pinMode( ulPin, INPUT_PULLUP ) ;
    7b3a:	0018      	movs	r0, r3
    7b3c:	f7ff ff52 	bl	79e4 <pinMode>
  return 0l ;
    7b40:	2400      	movs	r4, #0
}
    7b42:	0020      	movs	r0, r4
    7b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ( ulPeripheral == PIO_INPUT_PULLUP )
    7b46:	290a      	cmp	r1, #10
    7b48:	d101      	bne.n	7b4e <pinPeripheral+0x4a>
          pinMode( ulPin, INPUT_PULLUP ) ;
    7b4a:	3908      	subs	r1, #8
    7b4c:	e7f5      	b.n	7b3a <pinPeripheral+0x36>
  return 0l ;
    7b4e:	2400      	movs	r4, #0
          if ( ulPeripheral == PIO_OUTPUT )
    7b50:	290b      	cmp	r1, #11
    7b52:	d1f6      	bne.n	7b42 <pinPeripheral+0x3e>
            pinMode( ulPin, OUTPUT ) ;
    7b54:	390a      	subs	r1, #10
    7b56:	0018      	movs	r0, r3
    7b58:	f7ff ff44 	bl	79e4 <pinMode>
    7b5c:	e7f1      	b.n	7b42 <pinPeripheral+0x3e>
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    7b5e:	2018      	movs	r0, #24
    7b60:	4343      	muls	r3, r0
    7b62:	18d0      	adds	r0, r2, r3
    7b64:	6846      	ldr	r6, [r0, #4]
    7b66:	2501      	movs	r5, #1
    7b68:	0034      	movs	r4, r6
    7b6a:	56d2      	ldrsb	r2, [r2, r3]
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    7b6c:	4813      	ldr	r0, [pc, #76]	; (7bbc <pinPeripheral+0xb8>)
    7b6e:	01d2      	lsls	r2, r2, #7
    7b70:	1812      	adds	r2, r2, r0
    7b72:	0873      	lsrs	r3, r6, #1
    7b74:	18d3      	adds	r3, r2, r3
    7b76:	3330      	adds	r3, #48	; 0x30
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    7b78:	402c      	ands	r4, r5
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    7b7a:	7818      	ldrb	r0, [r3, #0]
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    7b7c:	2c00      	cmp	r4, #0
    7b7e:	d00b      	beq.n	7b98 <pinPeripheral+0x94>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    7b80:	240f      	movs	r4, #15
    7b82:	0109      	lsls	r1, r1, #4
    7b84:	4020      	ands	r0, r4
    7b86:	4301      	orrs	r1, r0
    7b88:	b2c9      	uxtb	r1, r1
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    7b8a:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    7b8c:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    7b8e:	3240      	adds	r2, #64	; 0x40
    7b90:	7813      	ldrb	r3, [r2, #0]
    7b92:	431d      	orrs	r5, r3
    7b94:	7015      	strb	r5, [r2, #0]
    7b96:	e7d3      	b.n	7b40 <pinPeripheral+0x3c>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    7b98:	270f      	movs	r7, #15
    7b9a:	43b8      	bics	r0, r7
    7b9c:	4301      	orrs	r1, r0
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    7b9e:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    7ba0:	b2c9      	uxtb	r1, r1
    7ba2:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    7ba4:	0013      	movs	r3, r2
    7ba6:	3340      	adds	r3, #64	; 0x40
    7ba8:	781a      	ldrb	r2, [r3, #0]
    7baa:	4315      	orrs	r5, r2
    7bac:	701d      	strb	r5, [r3, #0]
    7bae:	e7c8      	b.n	7b42 <pinPeripheral+0x3e>
      return -1l ;
    7bb0:	2401      	movs	r4, #1
    7bb2:	4264      	negs	r4, r4
    7bb4:	e7c5      	b.n	7b42 <pinPeripheral+0x3e>
    7bb6:	46c0      	nop			; (mov r8, r8)
    7bb8:	0000dc20 	.word	0x0000dc20
    7bbc:	41004400 	.word	0x41004400

00007bc0 <_Z3maplllll>:

  return random(diff) + howsmall;
}

extern long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    7bc0:	b510      	push	{r4, lr}
    7bc2:	001c      	movs	r4, r3
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    7bc4:	1a43      	subs	r3, r0, r1
    7bc6:	9802      	ldr	r0, [sp, #8]
    7bc8:	1a51      	subs	r1, r2, r1
    7bca:	1b00      	subs	r0, r0, r4
    7bcc:	4358      	muls	r0, r3
    7bce:	f000 fd05 	bl	85dc <__divsi3>
    7bd2:	1900      	adds	r0, r0, r4
}
    7bd4:	bd10      	pop	{r4, pc}

00007bd6 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
    7bd6:	b510      	push	{r4, lr}
    7bd8:	0004      	movs	r4, r0
{
	free(buffer);
    7bda:	6800      	ldr	r0, [r0, #0]
    7bdc:	f003 fc6a 	bl	b4b4 <free>
}
    7be0:	0020      	movs	r0, r4
    7be2:	bd10      	pop	{r4, pc}

00007be4 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    7be4:	b510      	push	{r4, lr}
    7be6:	0004      	movs	r4, r0
	if (buffer) free(buffer);
    7be8:	6800      	ldr	r0, [r0, #0]
    7bea:	2800      	cmp	r0, #0
    7bec:	d001      	beq.n	7bf2 <_ZN6String10invalidateEv+0xe>
    7bee:	f003 fc61 	bl	b4b4 <free>
	buffer = NULL;
    7bf2:	2300      	movs	r3, #0
    7bf4:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
    7bf6:	60a3      	str	r3, [r4, #8]
    7bf8:	6063      	str	r3, [r4, #4]
}
    7bfa:	bd10      	pop	{r4, pc}

00007bfc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    7bfc:	b570      	push	{r4, r5, r6, lr}
    7bfe:	0004      	movs	r4, r0
    7c00:	000d      	movs	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    7c02:	6800      	ldr	r0, [r0, #0]
    7c04:	3101      	adds	r1, #1
    7c06:	f004 f9ad 	bl	bf64 <realloc>
    7c0a:	1e03      	subs	r3, r0, #0
	if (newbuffer) {
    7c0c:	d001      	beq.n	7c12 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
		return 1;
    7c0e:	2001      	movs	r0, #1
		capacity = maxStrLen;
    7c10:	c428      	stmia	r4!, {r3, r5}
	}
	return 0;
}
    7c12:	bd70      	pop	{r4, r5, r6, pc}

00007c14 <_ZN6String7reserveEj>:
	if (buffer && capacity >= size) return 1;
    7c14:	6803      	ldr	r3, [r0, #0]
{
    7c16:	b510      	push	{r4, lr}
    7c18:	0004      	movs	r4, r0
	if (buffer && capacity >= size) return 1;
    7c1a:	2b00      	cmp	r3, #0
    7c1c:	d004      	beq.n	7c28 <_ZN6String7reserveEj+0x14>
    7c1e:	6843      	ldr	r3, [r0, #4]
    7c20:	428b      	cmp	r3, r1
    7c22:	d301      	bcc.n	7c28 <_ZN6String7reserveEj+0x14>
		if (len == 0) buffer[0] = 0;
    7c24:	2001      	movs	r0, #1
}
    7c26:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
    7c28:	0020      	movs	r0, r4
    7c2a:	f7ff ffe7 	bl	7bfc <_ZN6String12changeBufferEj>
    7c2e:	2800      	cmp	r0, #0
    7c30:	d0f9      	beq.n	7c26 <_ZN6String7reserveEj+0x12>
		if (len == 0) buffer[0] = 0;
    7c32:	68a3      	ldr	r3, [r4, #8]
    7c34:	2b00      	cmp	r3, #0
    7c36:	d1f5      	bne.n	7c24 <_ZN6String7reserveEj+0x10>
    7c38:	6822      	ldr	r2, [r4, #0]
    7c3a:	7013      	strb	r3, [r2, #0]
    7c3c:	e7f2      	b.n	7c24 <_ZN6String7reserveEj+0x10>

00007c3e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    7c3e:	b570      	push	{r4, r5, r6, lr}
    7c40:	000e      	movs	r6, r1
	if (!reserve(length)) {
    7c42:	0011      	movs	r1, r2
{
    7c44:	0004      	movs	r4, r0
    7c46:	0015      	movs	r5, r2
	if (!reserve(length)) {
    7c48:	f7ff ffe4 	bl	7c14 <_ZN6String7reserveEj>
    7c4c:	2800      	cmp	r0, #0
    7c4e:	d104      	bne.n	7c5a <_ZN6String4copyEPKcj+0x1c>
		invalidate();
    7c50:	0020      	movs	r0, r4
    7c52:	f7ff ffc7 	bl	7be4 <_ZN6String10invalidateEv>
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    7c56:	0020      	movs	r0, r4
    7c58:	bd70      	pop	{r4, r5, r6, pc}
	len = length;
    7c5a:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    7c5c:	0031      	movs	r1, r6
    7c5e:	6820      	ldr	r0, [r4, #0]
    7c60:	f004 f9be 	bl	bfe0 <strcpy>
	return *this;
    7c64:	e7f7      	b.n	7c56 <_ZN6String4copyEPKcj+0x18>

00007c66 <_ZN6StringC1EPKc>:
	buffer = NULL;
    7c66:	2300      	movs	r3, #0
String::String(const char *cstr)
    7c68:	b570      	push	{r4, r5, r6, lr}
    7c6a:	0004      	movs	r4, r0
    7c6c:	000d      	movs	r5, r1
	buffer = NULL;
    7c6e:	6003      	str	r3, [r0, #0]
	capacity = 0;
    7c70:	6043      	str	r3, [r0, #4]
	len = 0;
    7c72:	6083      	str	r3, [r0, #8]
	if (cstr) copy(cstr, strlen(cstr));
    7c74:	4299      	cmp	r1, r3
    7c76:	d007      	beq.n	7c88 <_ZN6StringC1EPKc+0x22>
    7c78:	0008      	movs	r0, r1
    7c7a:	f004 f9b9 	bl	bff0 <strlen>
    7c7e:	0029      	movs	r1, r5
    7c80:	0002      	movs	r2, r0
    7c82:	0020      	movs	r0, r4
    7c84:	f7ff ffdb 	bl	7c3e <_ZN6String4copyEPKcj>
}
    7c88:	0020      	movs	r0, r4
    7c8a:	bd70      	pop	{r4, r5, r6, pc}

00007c8c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    7c8c:	b570      	push	{r4, r5, r6, lr}
    7c8e:	0004      	movs	r4, r0
    7c90:	1e0d      	subs	r5, r1, #0
	if (cstr) copy(cstr, strlen(cstr));
    7c92:	d009      	beq.n	7ca8 <_ZN6StringaSEPKc+0x1c>
    7c94:	0008      	movs	r0, r1
    7c96:	f004 f9ab 	bl	bff0 <strlen>
    7c9a:	0029      	movs	r1, r5
    7c9c:	0002      	movs	r2, r0
    7c9e:	0020      	movs	r0, r4
    7ca0:	f7ff ffcd 	bl	7c3e <_ZN6String4copyEPKcj>
	else invalidate();
	
	return *this;
}
    7ca4:	0020      	movs	r0, r4
    7ca6:	bd70      	pop	{r4, r5, r6, pc}
	else invalidate();
    7ca8:	f7ff ff9c 	bl	7be4 <_ZN6String10invalidateEv>
    7cac:	e7fa      	b.n	7ca4 <_ZN6StringaSEPKc+0x18>

00007cae <_ZN6StringC1Ec>:
	buffer = NULL;
    7cae:	2300      	movs	r3, #0
String::String(char c)
    7cb0:	b513      	push	{r0, r1, r4, lr}
    7cb2:	0004      	movs	r4, r0
	buf[0] = c;
    7cb4:	aa01      	add	r2, sp, #4
    7cb6:	7011      	strb	r1, [r2, #0]
	buffer = NULL;
    7cb8:	6003      	str	r3, [r0, #0]
	capacity = 0;
    7cba:	6043      	str	r3, [r0, #4]
	len = 0;
    7cbc:	6083      	str	r3, [r0, #8]
	*this = buf;
    7cbe:	0011      	movs	r1, r2
	buf[1] = 0;
    7cc0:	7053      	strb	r3, [r2, #1]
	*this = buf;
    7cc2:	f7ff ffe3 	bl	7c8c <_ZN6StringaSEPKc>
}
    7cc6:	0020      	movs	r0, r4
    7cc8:	bd16      	pop	{r1, r2, r4, pc}

00007cca <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
    7cca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    7ccc:	0004      	movs	r4, r0
	buffer = NULL;
    7cce:	2300      	movs	r3, #0
String::String(unsigned char value, unsigned char base)
    7cd0:	0008      	movs	r0, r1
	buffer = NULL;
    7cd2:	6023      	str	r3, [r4, #0]
	capacity = 0;
    7cd4:	6063      	str	r3, [r4, #4]
	len = 0;
    7cd6:	60a3      	str	r3, [r4, #8]
	utoa(value, buf, base);
    7cd8:	a901      	add	r1, sp, #4
    7cda:	f000 fa03 	bl	80e4 <utoa>
	*this = buf;
    7cde:	a901      	add	r1, sp, #4
    7ce0:	0020      	movs	r0, r4
    7ce2:	f7ff ffd3 	bl	7c8c <_ZN6StringaSEPKc>
}
    7ce6:	0020      	movs	r0, r4
    7ce8:	b004      	add	sp, #16
    7cea:	bd10      	pop	{r4, pc}

00007cec <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
    7cec:	b510      	push	{r4, lr}
	buffer = NULL;
    7cee:	2300      	movs	r3, #0
String::String(int value, unsigned char base)
    7cf0:	0004      	movs	r4, r0
    7cf2:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
    7cf4:	6023      	str	r3, [r4, #0]
	capacity = 0;
    7cf6:	6063      	str	r3, [r4, #4]
	len = 0;
    7cf8:	60a3      	str	r3, [r4, #8]
String::String(int value, unsigned char base)
    7cfa:	0008      	movs	r0, r1
	itoa(value, buf, base);
    7cfc:	a901      	add	r1, sp, #4
    7cfe:	f000 f9bb 	bl	8078 <itoa>
	*this = buf;
    7d02:	a901      	add	r1, sp, #4
    7d04:	0020      	movs	r0, r4
    7d06:	f7ff ffc1 	bl	7c8c <_ZN6StringaSEPKc>
}
    7d0a:	0020      	movs	r0, r4
    7d0c:	b00a      	add	sp, #40	; 0x28
    7d0e:	bd10      	pop	{r4, pc}

00007d10 <_ZN6StringC1Emh>:
String::String(unsigned long value, unsigned char base)
    7d10:	b510      	push	{r4, lr}
	buffer = NULL;
    7d12:	2300      	movs	r3, #0
String::String(unsigned long value, unsigned char base)
    7d14:	0004      	movs	r4, r0
    7d16:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
    7d18:	6023      	str	r3, [r4, #0]
	capacity = 0;
    7d1a:	6063      	str	r3, [r4, #4]
	len = 0;
    7d1c:	60a3      	str	r3, [r4, #8]
String::String(unsigned long value, unsigned char base)
    7d1e:	0008      	movs	r0, r1
	ultoa(value, buf, base);
    7d20:	a901      	add	r1, sp, #4
    7d22:	f000 f9ad 	bl	8080 <ultoa>
	*this = buf;
    7d26:	a901      	add	r1, sp, #4
    7d28:	0020      	movs	r0, r4
    7d2a:	f7ff ffaf 	bl	7c8c <_ZN6StringaSEPKc>
}
    7d2e:	0020      	movs	r0, r4
    7d30:	b00a      	add	sp, #40	; 0x28
    7d32:	bd10      	pop	{r4, pc}

00007d34 <_ZN6StringC1Efh>:
	buffer = NULL;
    7d34:	2300      	movs	r3, #0
String::String(float value, unsigned char decimalPlaces)
    7d36:	b570      	push	{r4, r5, r6, lr}
    7d38:	0016      	movs	r6, r2
    7d3a:	b08c      	sub	sp, #48	; 0x30
    7d3c:	0004      	movs	r4, r0
	buffer = NULL;
    7d3e:	6003      	str	r3, [r0, #0]
	capacity = 0;
    7d40:	6043      	str	r3, [r0, #4]
	len = 0;
    7d42:	6083      	str	r3, [r0, #8]
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
    7d44:	1c95      	adds	r5, r2, #2
    7d46:	1c08      	adds	r0, r1, #0
    7d48:	f003 fa7e 	bl	b248 <__aeabi_f2d>
    7d4c:	b26d      	sxtb	r5, r5
    7d4e:	ab03      	add	r3, sp, #12
    7d50:	9300      	str	r3, [sp, #0]
    7d52:	002a      	movs	r2, r5
    7d54:	0033      	movs	r3, r6
    7d56:	f000 f939 	bl	7fcc <dtostrf>
    7d5a:	0001      	movs	r1, r0
    7d5c:	0020      	movs	r0, r4
    7d5e:	f7ff ff95 	bl	7c8c <_ZN6StringaSEPKc>
}
    7d62:	0020      	movs	r0, r4
    7d64:	b00c      	add	sp, #48	; 0x30
    7d66:	bd70      	pop	{r4, r5, r6, pc}

00007d68 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
    7d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7d6a:	0004      	movs	r4, r0
    7d6c:	1e0f      	subs	r7, r1, #0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
    7d6e:	d102      	bne.n	7d76 <_ZN6String6concatEPKcj+0xe>
    7d70:	2600      	movs	r6, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
    7d72:	0030      	movs	r0, r6
    7d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (length == 0) return 1;
    7d76:	2601      	movs	r6, #1
    7d78:	2a00      	cmp	r2, #0
    7d7a:	d0fa      	beq.n	7d72 <_ZN6String6concatEPKcj+0xa>
	unsigned int newlen = len + length;
    7d7c:	6883      	ldr	r3, [r0, #8]
    7d7e:	18d5      	adds	r5, r2, r3
	if (!reserve(newlen)) return 0;
    7d80:	0029      	movs	r1, r5
    7d82:	f7ff ff47 	bl	7c14 <_ZN6String7reserveEj>
    7d86:	2800      	cmp	r0, #0
    7d88:	d0f2      	beq.n	7d70 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
    7d8a:	6823      	ldr	r3, [r4, #0]
    7d8c:	68a2      	ldr	r2, [r4, #8]
    7d8e:	0039      	movs	r1, r7
    7d90:	1898      	adds	r0, r3, r2
    7d92:	f004 f925 	bl	bfe0 <strcpy>
	len = newlen;
    7d96:	60a5      	str	r5, [r4, #8]
	return 1;
    7d98:	e7eb      	b.n	7d72 <_ZN6String6concatEPKcj+0xa>

00007d9a <_ZN6String6concatEc>:
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}

unsigned char String::concat(char c)
{
    7d9a:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    7d9c:	2200      	movs	r2, #0
	buf[0] = c;
    7d9e:	ab01      	add	r3, sp, #4
    7da0:	7019      	strb	r1, [r3, #0]
	buf[1] = 0;
    7da2:	705a      	strb	r2, [r3, #1]
	return concat(buf, 1);
    7da4:	0019      	movs	r1, r3
    7da6:	3201      	adds	r2, #1
    7da8:	f7ff ffde 	bl	7d68 <_ZN6String6concatEPKcj>
}
    7dac:	bd0e      	pop	{r1, r2, r3, pc}

00007dae <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    7dae:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    7db0:	688a      	ldr	r2, [r1, #8]
    7db2:	6809      	ldr	r1, [r1, #0]
{
    7db4:	0004      	movs	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    7db6:	f7ff ffd7 	bl	7d68 <_ZN6String6concatEPKcj>
    7dba:	2800      	cmp	r0, #0
    7dbc:	d102      	bne.n	7dc4 <_ZplRK15StringSumHelperRK6String+0x16>
    7dbe:	0020      	movs	r0, r4
    7dc0:	f7ff ff10 	bl	7be4 <_ZN6String10invalidateEv>
	return a;
}
    7dc4:	0020      	movs	r0, r4
    7dc6:	bd10      	pop	{r4, pc}

00007dc8 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    7dc8:	b570      	push	{r4, r5, r6, lr}
    7dca:	0004      	movs	r4, r0
    7dcc:	1e0d      	subs	r5, r1, #0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    7dce:	d009      	beq.n	7de4 <_ZplRK15StringSumHelperPKc+0x1c>
    7dd0:	0008      	movs	r0, r1
    7dd2:	f004 f90d 	bl	bff0 <strlen>
    7dd6:	0029      	movs	r1, r5
    7dd8:	0002      	movs	r2, r0
    7dda:	0020      	movs	r0, r4
    7ddc:	f7ff ffc4 	bl	7d68 <_ZN6String6concatEPKcj>
    7de0:	2800      	cmp	r0, #0
    7de2:	d102      	bne.n	7dea <_ZplRK15StringSumHelperPKc+0x22>
    7de4:	0020      	movs	r0, r4
    7de6:	f7ff fefd 	bl	7be4 <_ZN6String10invalidateEv>
	return a;
}
    7dea:	0020      	movs	r0, r4
    7dec:	bd70      	pop	{r4, r5, r6, pc}
	...

00007df0 <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
    7df0:	6883      	ldr	r3, [r0, #8]
    7df2:	428b      	cmp	r3, r1
    7df4:	d903      	bls.n	7dfe <_ZN6StringixEj+0xe>
    7df6:	6803      	ldr	r3, [r0, #0]
		dummy_writable_char = 0;
		return dummy_writable_char;
	}
	return buffer[index];
    7df8:	1858      	adds	r0, r3, r1
	if (index >= len || !buffer) {
    7dfa:	2b00      	cmp	r3, #0
    7dfc:	d102      	bne.n	7e04 <_ZN6StringixEj+0x14>
		dummy_writable_char = 0;
    7dfe:	2300      	movs	r3, #0
    7e00:	4801      	ldr	r0, [pc, #4]	; (7e08 <_ZN6StringixEj+0x18>)
    7e02:	7003      	strb	r3, [r0, #0]
}
    7e04:	4770      	bx	lr
    7e06:	46c0      	nop			; (mov r8, r8)
    7e08:	200009cc 	.word	0x200009cc

00007e0c <_ZN8SPIClass4initEv>:
  config(DEFAULT_SPI_SETTINGS);
}

void SPIClass::init()
{
  if (initialized)
    7e0c:	7a43      	ldrb	r3, [r0, #9]
    7e0e:	2b00      	cmp	r3, #0
    7e10:	d104      	bne.n	7e1c <_ZN8SPIClass4initEv+0x10>
    return;
  interruptMode = SPI_IMODE_NONE;
    7e12:	7283      	strb	r3, [r0, #10]
  interruptSave = 0;
    7e14:	72c3      	strb	r3, [r0, #11]
  interruptMask = 0;
    7e16:	60c3      	str	r3, [r0, #12]
  initialized = true;
    7e18:	3301      	adds	r3, #1
    7e1a:	7243      	strb	r3, [r0, #9]
}
    7e1c:	4770      	bx	lr

00007e1e <_ZN8SPIClass6configE11SPISettings>:

void SPIClass::config(SPISettings settings)
{
    7e1e:	b530      	push	{r4, r5, lr}
    7e20:	0004      	movs	r4, r0
    7e22:	b085      	sub	sp, #20
    7e24:	ad02      	add	r5, sp, #8
  _p_sercom->disableSPI();
    7e26:	6800      	ldr	r0, [r0, #0]
{
    7e28:	9102      	str	r1, [sp, #8]
    7e2a:	9203      	str	r2, [sp, #12]
  _p_sercom->disableSPI();
    7e2c:	f000 fa11 	bl	8252 <_ZN6SERCOM10disableSPIEv>

  _p_sercom->initSPI(_padTx, _padRx, SPI_CHAR_SIZE_8_BITS, settings.bitOrder);
    7e30:	796b      	ldrb	r3, [r5, #5]
    7e32:	7a22      	ldrb	r2, [r4, #8]
    7e34:	79e1      	ldrb	r1, [r4, #7]
    7e36:	9300      	str	r3, [sp, #0]
    7e38:	6820      	ldr	r0, [r4, #0]
    7e3a:	2300      	movs	r3, #0
    7e3c:	f000 faa4 	bl	8388 <_ZN6SERCOM7initSPIE14SercomSpiTXPad11SercomRXPad17SercomSpiCharSize15SercomDataOrder>
  _p_sercom->initSPIClock(settings.dataMode, settings.clockFreq);
    7e40:	7929      	ldrb	r1, [r5, #4]
    7e42:	9a02      	ldr	r2, [sp, #8]
    7e44:	6820      	ldr	r0, [r4, #0]
    7e46:	f000 f9d9 	bl	81fc <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem>

  _p_sercom->enableSPI();
    7e4a:	6820      	ldr	r0, [r4, #0]
    7e4c:	f000 f9f8 	bl	8240 <_ZN6SERCOM9enableSPIEv>
}
    7e50:	b005      	add	sp, #20
    7e52:	bd30      	pop	{r4, r5, pc}

00007e54 <_ZN8SPIClass5beginEv>:
{
    7e54:	b570      	push	{r4, r5, r6, lr}
  pinPeripheral(_uc_pinMiso, g_APinDescription[_uc_pinMiso].ulPinType);
    7e56:	2618      	movs	r6, #24
{
    7e58:	0004      	movs	r4, r0
  init();
    7e5a:	f7ff ffd7 	bl	7e0c <_ZN8SPIClass4initEv>
  pinPeripheral(_uc_pinMiso, g_APinDescription[_uc_pinMiso].ulPinType);
    7e5e:	0033      	movs	r3, r6
    7e60:	2108      	movs	r1, #8
    7e62:	7920      	ldrb	r0, [r4, #4]
    7e64:	4d0d      	ldr	r5, [pc, #52]	; (7e9c <_ZN8SPIClass5beginEv+0x48>)
    7e66:	4343      	muls	r3, r0
    7e68:	18eb      	adds	r3, r5, r3
    7e6a:	5659      	ldrsb	r1, [r3, r1]
    7e6c:	f7ff fe4a 	bl	7b04 <pinPeripheral>
  pinPeripheral(_uc_pinSCK, g_APinDescription[_uc_pinSCK].ulPinType);
    7e70:	0033      	movs	r3, r6
    7e72:	2108      	movs	r1, #8
    7e74:	79a0      	ldrb	r0, [r4, #6]
    7e76:	4343      	muls	r3, r0
    7e78:	18eb      	adds	r3, r5, r3
    7e7a:	5659      	ldrsb	r1, [r3, r1]
    7e7c:	f7ff fe42 	bl	7b04 <pinPeripheral>
  pinPeripheral(_uc_pinMosi, g_APinDescription[_uc_pinMosi].ulPinType);
    7e80:	2108      	movs	r1, #8
    7e82:	7960      	ldrb	r0, [r4, #5]
    7e84:	4346      	muls	r6, r0
    7e86:	19ad      	adds	r5, r5, r6
    7e88:	5669      	ldrsb	r1, [r5, r1]
    7e8a:	f7ff fe3b 	bl	7b04 <pinPeripheral>
  config(DEFAULT_SPI_SETTINGS);
    7e8e:	4b04      	ldr	r3, [pc, #16]	; (7ea0 <_ZN8SPIClass5beginEv+0x4c>)
    7e90:	0020      	movs	r0, r4
    7e92:	cb06      	ldmia	r3!, {r1, r2}
    7e94:	f7ff ffc3 	bl	7e1e <_ZN8SPIClass6configE11SPISettings>
}
    7e98:	bd70      	pop	{r4, r5, r6, pc}
    7e9a:	46c0      	nop			; (mov r8, r8)
    7e9c:	0000dc20 	.word	0x0000dc20
    7ea0:	200009f0 	.word	0x200009f0

00007ea4 <_ZN8SPIClass16beginTransactionE11SPISettings>:
  if (irestore)
    interrupts();
}

void SPIClass::beginTransaction(SPISettings settings)
{
    7ea4:	b507      	push	{r0, r1, r2, lr}
  if (interruptMode != SPI_IMODE_NONE)
    7ea6:	7a83      	ldrb	r3, [r0, #10]
{
    7ea8:	9100      	str	r1, [sp, #0]
    7eaa:	9201      	str	r2, [sp, #4]
  if (interruptMode != SPI_IMODE_NONE)
    7eac:	2b00      	cmp	r3, #0
    7eae:	d007      	beq.n	7ec0 <_ZN8SPIClass16beginTransactionE11SPISettings+0x1c>
  {
    if (interruptMode & SPI_IMODE_GLOBAL)
    7eb0:	079a      	lsls	r2, r3, #30
    7eb2:	d50a      	bpl.n	7eca <_ZN8SPIClass16beginTransactionE11SPISettings+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    7eb4:	f3ef 8210 	mrs	r2, PRIMASK
  return (__get_PRIMASK() ? 0 : 1);
    7eb8:	4253      	negs	r3, r2
    7eba:	4153      	adcs	r3, r2
    {
      interruptSave = interruptsStatus();
    7ebc:	72c3      	strb	r3, [r0, #11]
  __ASM volatile ("cpsid i" : : : "memory");
    7ebe:	b672      	cpsid	i
    }
    else if (interruptMode & SPI_IMODE_EXTINT)
      EIC->INTENCLR.reg = EIC_INTENCLR_EXTINT(interruptMask);
  }

  config(settings);
    7ec0:	9900      	ldr	r1, [sp, #0]
    7ec2:	9a01      	ldr	r2, [sp, #4]
    7ec4:	f7ff ffab 	bl	7e1e <_ZN8SPIClass6configE11SPISettings>
}
    7ec8:	bd07      	pop	{r0, r1, r2, pc}
    else if (interruptMode & SPI_IMODE_EXTINT)
    7eca:	07db      	lsls	r3, r3, #31
    7ecc:	d5f8      	bpl.n	7ec0 <_ZN8SPIClass16beginTransactionE11SPISettings+0x1c>
      EIC->INTENCLR.reg = EIC_INTENCLR_EXTINT(interruptMask);
    7ece:	8983      	ldrh	r3, [r0, #12]
    7ed0:	4a01      	ldr	r2, [pc, #4]	; (7ed8 <_ZN8SPIClass16beginTransactionE11SPISettings+0x34>)
    7ed2:	6093      	str	r3, [r2, #8]
    7ed4:	e7f4      	b.n	7ec0 <_ZN8SPIClass16beginTransactionE11SPISettings+0x1c>
    7ed6:	46c0      	nop			; (mov r8, r8)
    7ed8:	40001800 	.word	0x40001800

00007edc <_ZN8SPIClass14endTransactionEv>:

void SPIClass::endTransaction(void)
{
  if (interruptMode != SPI_IMODE_NONE)
    7edc:	7a83      	ldrb	r3, [r0, #10]
    7ede:	2b00      	cmp	r3, #0
    7ee0:	d005      	beq.n	7eee <_ZN8SPIClass14endTransactionEv+0x12>
  {
    if (interruptMode & SPI_IMODE_GLOBAL)
    7ee2:	079a      	lsls	r2, r3, #30
    7ee4:	d504      	bpl.n	7ef0 <_ZN8SPIClass14endTransactionEv+0x14>
    {
      if (interruptSave)
    7ee6:	7ac3      	ldrb	r3, [r0, #11]
    7ee8:	2b00      	cmp	r3, #0
    7eea:	d000      	beq.n	7eee <_ZN8SPIClass14endTransactionEv+0x12>
  __ASM volatile ("cpsie i" : : : "memory");
    7eec:	b662      	cpsie	i
        interrupts();
    }
    else if (interruptMode & SPI_IMODE_EXTINT)
      EIC->INTENSET.reg = EIC_INTENSET_EXTINT(interruptMask);
  }
}
    7eee:	4770      	bx	lr
    else if (interruptMode & SPI_IMODE_EXTINT)
    7ef0:	07db      	lsls	r3, r3, #31
    7ef2:	d5fc      	bpl.n	7eee <_ZN8SPIClass14endTransactionEv+0x12>
      EIC->INTENSET.reg = EIC_INTENSET_EXTINT(interruptMask);
    7ef4:	68c3      	ldr	r3, [r0, #12]
    7ef6:	4a02      	ldr	r2, [pc, #8]	; (7f00 <_ZN8SPIClass14endTransactionEv+0x24>)
    7ef8:	b29b      	uxth	r3, r3
    7efa:	60d3      	str	r3, [r2, #12]
}
    7efc:	e7f7      	b.n	7eee <_ZN8SPIClass14endTransactionEv+0x12>
    7efe:	46c0      	nop			; (mov r8, r8)
    7f00:	40001800 	.word	0x40001800

00007f04 <_ZN8SPIClass8transferEh>:
    _p_sercom->setBaudrateSPI(div);
  }
}

byte SPIClass::transfer(uint8_t data)
{
    7f04:	b510      	push	{r4, lr}
  return _p_sercom->transferDataSPI(data);
    7f06:	6800      	ldr	r0, [r0, #0]
    7f08:	f000 f9ac 	bl	8264 <_ZN6SERCOM15transferDataSPIEh>
}
    7f0c:	bd10      	pop	{r4, pc}
	...

00007f10 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad>:
  void init_MightInline(uint32_t clock, BitOrder bitOrder, uint8_t dataMode) {
    init_AlwaysInline(clock, bitOrder, dataMode);
  }

  void init_AlwaysInline(uint32_t clock, BitOrder bitOrder, uint8_t dataMode) __attribute__((__always_inline__)) {
    this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? F_CPU / SPI_MIN_CLOCK_DIVIDER : clock);
    7f10:	4b0f      	ldr	r3, [pc, #60]	; (7f50 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x40>)
    7f12:	4a10      	ldr	r2, [pc, #64]	; (7f54 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x44>)
  _p_sercom = p_sercom;
    7f14:	4910      	ldr	r1, [pc, #64]	; (7f58 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x48>)
    7f16:	601a      	str	r2, [r3, #0]

    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    7f18:	2200      	movs	r2, #0
    7f1a:	715a      	strb	r2, [r3, #5]

    switch (dataMode)
    {
      case SPI_MODE0:
        this->dataMode = SERCOM_SPI_MODE_0; break;
    7f1c:	711a      	strb	r2, [r3, #4]
  initialized = false;
    7f1e:	4b0f      	ldr	r3, [pc, #60]	; (7f5c <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x4c>)
  _p_sercom = p_sercom;
    7f20:	480f      	ldr	r0, [pc, #60]	; (7f60 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x50>)
    7f22:	6019      	str	r1, [r3, #0]
  _uc_pinMiso = uc_pinMISO;
    7f24:	210a      	movs	r1, #10
    7f26:	7119      	strb	r1, [r3, #4]
  _uc_pinSCK = uc_pinSCK;
    7f28:	3901      	subs	r1, #1
    7f2a:	7199      	strb	r1, [r3, #6]
  _uc_pinMosi = uc_pinMOSI;
    7f2c:	3901      	subs	r1, #1
    7f2e:	7159      	strb	r1, [r3, #5]
  _padRx=PadRx;
    7f30:	3905      	subs	r1, #5
  initialized = false;
    7f32:	725a      	strb	r2, [r3, #9]
  _padTx=PadTx;
    7f34:	71da      	strb	r2, [r3, #7]
  _padRx=PadRx;
    7f36:	7219      	strb	r1, [r3, #8]
  initialized = false;
    7f38:	4b0a      	ldr	r3, [pc, #40]	; (7f64 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x54>)
  _p_sercom = p_sercom;
    7f3a:	6018      	str	r0, [r3, #0]
  _uc_pinMiso = uc_pinMISO;
    7f3c:	201d      	movs	r0, #29
    7f3e:	7118      	strb	r0, [r3, #4]
  _uc_pinSCK = uc_pinSCK;
    7f40:	3802      	subs	r0, #2
    7f42:	7198      	strb	r0, [r3, #6]
  _uc_pinMosi = uc_pinMOSI;
    7f44:	3801      	subs	r0, #1
  initialized = false;
    7f46:	725a      	strb	r2, [r3, #9]
  _uc_pinMosi = uc_pinMOSI;
    7f48:	7158      	strb	r0, [r3, #5]
  _padTx=PadTx;
    7f4a:	71da      	strb	r2, [r3, #7]
  _padRx=PadRx;
    7f4c:	7219      	strb	r1, [r3, #8]
    #define PAD_SPI_RX           SERCOM_RX_PAD_0
  #endif // PERIPH_SPI
  SPIClass SPI (&PERIPH_SPI,  PIN_SPI_MISO,  PIN_SPI_SCK,  PIN_SPI_MOSI,  PAD_SPI_TX,  PAD_SPI_RX);
#endif
#if SPI_INTERFACES_COUNT > 1
  SPIClass SPI1(&PERIPH_SPI1, PIN_SPI1_MISO, PIN_SPI1_SCK, PIN_SPI1_MOSI, PAD_SPI1_TX, PAD_SPI1_RX);
    7f4e:	4770      	bx	lr
    7f50:	200009f0 	.word	0x200009f0
    7f54:	003d0900 	.word	0x003d0900
    7f58:	200009fc 	.word	0x200009fc
    7f5c:	200009d0 	.word	0x200009d0
    7f60:	20000a00 	.word	0x20000a00
    7f64:	200009e0 	.word	0x200009e0

00007f68 <_GLOBAL__sub_I_g_APinDescription>:
SERCOM sercom0(SERCOM0);
SERCOM sercom1(SERCOM1);
SERCOM sercom2(SERCOM2);
SERCOM sercom3(SERCOM3);
SERCOM sercom4(SERCOM4);
SERCOM sercom5(SERCOM5);
    7f68:	b510      	push	{r4, lr}
SERCOM sercom0(SERCOM0);
    7f6a:	490c      	ldr	r1, [pc, #48]	; (7f9c <_GLOBAL__sub_I_g_APinDescription+0x34>)
    7f6c:	480c      	ldr	r0, [pc, #48]	; (7fa0 <_GLOBAL__sub_I_g_APinDescription+0x38>)
    7f6e:	f000 f8bd 	bl	80ec <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1(SERCOM1);
    7f72:	490c      	ldr	r1, [pc, #48]	; (7fa4 <_GLOBAL__sub_I_g_APinDescription+0x3c>)
    7f74:	480c      	ldr	r0, [pc, #48]	; (7fa8 <_GLOBAL__sub_I_g_APinDescription+0x40>)
    7f76:	f000 f8b9 	bl	80ec <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2(SERCOM2);
    7f7a:	490c      	ldr	r1, [pc, #48]	; (7fac <_GLOBAL__sub_I_g_APinDescription+0x44>)
    7f7c:	480c      	ldr	r0, [pc, #48]	; (7fb0 <_GLOBAL__sub_I_g_APinDescription+0x48>)
    7f7e:	f000 f8b5 	bl	80ec <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3(SERCOM3);
    7f82:	490c      	ldr	r1, [pc, #48]	; (7fb4 <_GLOBAL__sub_I_g_APinDescription+0x4c>)
    7f84:	480c      	ldr	r0, [pc, #48]	; (7fb8 <_GLOBAL__sub_I_g_APinDescription+0x50>)
    7f86:	f000 f8b1 	bl	80ec <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom4(SERCOM4);
    7f8a:	490c      	ldr	r1, [pc, #48]	; (7fbc <_GLOBAL__sub_I_g_APinDescription+0x54>)
    7f8c:	480c      	ldr	r0, [pc, #48]	; (7fc0 <_GLOBAL__sub_I_g_APinDescription+0x58>)
    7f8e:	f000 f8ad 	bl	80ec <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom5(SERCOM5);
    7f92:	490c      	ldr	r1, [pc, #48]	; (7fc4 <_GLOBAL__sub_I_g_APinDescription+0x5c>)
    7f94:	480c      	ldr	r0, [pc, #48]	; (7fc8 <_GLOBAL__sub_I_g_APinDescription+0x60>)
    7f96:	f000 f8a9 	bl	80ec <_ZN6SERCOMC1EP6Sercom>
    7f9a:	bd10      	pop	{r4, pc}
    7f9c:	42000800 	.word	0x42000800
    7fa0:	200009f8 	.word	0x200009f8
    7fa4:	42000c00 	.word	0x42000c00
    7fa8:	200009fc 	.word	0x200009fc
    7fac:	42001000 	.word	0x42001000
    7fb0:	20000a00 	.word	0x20000a00
    7fb4:	42001400 	.word	0x42001400
    7fb8:	20000a04 	.word	0x20000a04
    7fbc:	42001800 	.word	0x42001800
    7fc0:	20000a08 	.word	0x20000a08
    7fc4:	42001c00 	.word	0x42001c00
    7fc8:	20000a0c 	.word	0x20000a0c

00007fcc <dtostrf>:
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <stdio.h>

char *dtostrf (double val, signed char width, unsigned char prec, char *sout) {
    7fcc:	b530      	push	{r4, r5, lr}
    7fce:	0004      	movs	r4, r0
    7fd0:	b087      	sub	sp, #28
    7fd2:	000d      	movs	r5, r1
  asm(".global _printf_float");

  char fmt[20];
  sprintf(fmt, "%%%d.%df", width, prec);
    7fd4:	4906      	ldr	r1, [pc, #24]	; (7ff0 <dtostrf+0x24>)
    7fd6:	a801      	add	r0, sp, #4
    7fd8:	f003 ffe0 	bl	bf9c <siprintf>
  sprintf(sout, fmt, val);
    7fdc:	0022      	movs	r2, r4
    7fde:	002b      	movs	r3, r5
    7fe0:	a901      	add	r1, sp, #4
    7fe2:	980a      	ldr	r0, [sp, #40]	; 0x28
    7fe4:	f003 ffda 	bl	bf9c <siprintf>
  return sout;
}
    7fe8:	980a      	ldr	r0, [sp, #40]	; 0x28
    7fea:	b007      	add	sp, #28
    7fec:	bd30      	pop	{r4, r5, pc}
    7fee:	46c0      	nop			; (mov r8, r8)
    7ff0:	0000df80 	.word	0x0000df80

00007ff4 <ltoa>:
{
  return ltoa( value, string, radix ) ;
}

extern char* ltoa( long value, char *string, int radix )
{
    7ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ff6:	b08d      	sub	sp, #52	; 0x34
    7ff8:	1e0e      	subs	r6, r1, #0
    7ffa:	9200      	str	r2, [sp, #0]
  long i;
  unsigned long v;
  int sign;
  char *sp;

  if ( string == NULL )
    7ffc:	d02d      	beq.n	805a <ltoa+0x66>
  {
    return 0 ;
  }

  if (radix > 36 || radix <= 1)
    7ffe:	0013      	movs	r3, r2
    8000:	3b02      	subs	r3, #2
    8002:	2b22      	cmp	r3, #34	; 0x22
    8004:	d833      	bhi.n	806e <ltoa+0x7a>
  {
    return 0 ;
  }

  sign = (radix == 10 && value < 0);
    8006:	2a0a      	cmp	r2, #10
    8008:	d133      	bne.n	8072 <ltoa+0x7e>
    800a:	2800      	cmp	r0, #0
    800c:	da31      	bge.n	8072 <ltoa+0x7e>
    800e:	2301      	movs	r3, #1
  if (sign)
  {
    v = -value;
    8010:	4244      	negs	r4, r0
  }
  else
  {
    v = (unsigned long)value;
    8012:	9301      	str	r3, [sp, #4]
    8014:	af03      	add	r7, sp, #12
    8016:	e00e      	b.n	8036 <ltoa+0x42>
  }

  while (v || tp == tmp)
  {
    i = v % radix;
    8018:	0020      	movs	r0, r4
    801a:	9900      	ldr	r1, [sp, #0]
    801c:	f000 fada 	bl	85d4 <__aeabi_uidivmod>
    v = v / radix;
    8020:	0020      	movs	r0, r4
    i = v % radix;
    8022:	000d      	movs	r5, r1
    v = v / radix;
    8024:	9900      	ldr	r1, [sp, #0]
    8026:	f000 fa4f 	bl	84c8 <__udivsi3>
    802a:	0004      	movs	r4, r0
    if (i < 10)
    802c:	2d09      	cmp	r5, #9
    802e:	d817      	bhi.n	8060 <ltoa+0x6c>
      *tp++ = i+'0';
    8030:	3530      	adds	r5, #48	; 0x30
    else
      *tp++ = i + 'a' - 10;
    8032:	703d      	strb	r5, [r7, #0]
    8034:	3701      	adds	r7, #1
    8036:	003a      	movs	r2, r7
  while (v || tp == tmp)
    8038:	2c00      	cmp	r4, #0
    803a:	d1ed      	bne.n	8018 <ltoa+0x24>
    803c:	ab03      	add	r3, sp, #12
    803e:	42bb      	cmp	r3, r7
    8040:	d0ea      	beq.n	8018 <ltoa+0x24>
  }

  sp = string;

  if (sign)
    8042:	9901      	ldr	r1, [sp, #4]
    8044:	0033      	movs	r3, r6
    8046:	2900      	cmp	r1, #0
    8048:	d002      	beq.n	8050 <ltoa+0x5c>
    *sp++ = '-';
    804a:	212d      	movs	r1, #45	; 0x2d
    804c:	1c73      	adds	r3, r6, #1
    804e:	7031      	strb	r1, [r6, #0]
  while (tp > tmp)
    8050:	a903      	add	r1, sp, #12
    8052:	428a      	cmp	r2, r1
    8054:	d806      	bhi.n	8064 <ltoa+0x70>
    *sp++ = *--tp;
  *sp = 0;
    8056:	2200      	movs	r2, #0
    8058:	701a      	strb	r2, [r3, #0]

  return string;
}
    805a:	0030      	movs	r0, r6
    805c:	b00d      	add	sp, #52	; 0x34
    805e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *tp++ = i + 'a' - 10;
    8060:	3557      	adds	r5, #87	; 0x57
    8062:	e7e6      	b.n	8032 <ltoa+0x3e>
    *sp++ = *--tp;
    8064:	3a01      	subs	r2, #1
    8066:	7811      	ldrb	r1, [r2, #0]
    8068:	7019      	strb	r1, [r3, #0]
    806a:	3301      	adds	r3, #1
    806c:	e7f0      	b.n	8050 <ltoa+0x5c>
    return 0 ;
    806e:	2600      	movs	r6, #0
    8070:	e7f3      	b.n	805a <ltoa+0x66>
    v = (unsigned long)value;
    8072:	0004      	movs	r4, r0
    8074:	2300      	movs	r3, #0
    8076:	e7cc      	b.n	8012 <ltoa+0x1e>

00008078 <itoa>:
{
    8078:	b510      	push	{r4, lr}
  return ltoa( value, string, radix ) ;
    807a:	f7ff ffbb 	bl	7ff4 <ltoa>
}
    807e:	bd10      	pop	{r4, pc}

00008080 <ultoa>:
{
  return ultoa( value, string, radix ) ;
}

extern char* ultoa( unsigned long value, char *string, int radix )
{
    8080:	b5f0      	push	{r4, r5, r6, r7, lr}
    8082:	b08d      	sub	sp, #52	; 0x34
    8084:	0007      	movs	r7, r0
    8086:	1e0e      	subs	r6, r1, #0
    8088:	9201      	str	r2, [sp, #4]
  char *tp = tmp;
  long i;
  unsigned long v = value;
  char *sp;

  if ( string == NULL )
    808a:	d021      	beq.n	80d0 <ultoa+0x50>
  {
    return 0;
  }

  if (radix > 36 || radix <= 1)
    808c:	0013      	movs	r3, r2
    808e:	3b02      	subs	r3, #2
    8090:	ad03      	add	r5, sp, #12
    8092:	2b22      	cmp	r3, #34	; 0x22
    8094:	d910      	bls.n	80b8 <ultoa+0x38>
    return 0;
    8096:	2600      	movs	r6, #0
    8098:	e01a      	b.n	80d0 <ultoa+0x50>
    return 0;
  }

  while (v || tp == tmp)
  {
    i = v % radix;
    809a:	0038      	movs	r0, r7
    809c:	9901      	ldr	r1, [sp, #4]
    809e:	f000 fa99 	bl	85d4 <__aeabi_uidivmod>
    v = v / radix;
    80a2:	0038      	movs	r0, r7
    i = v % radix;
    80a4:	000c      	movs	r4, r1
    v = v / radix;
    80a6:	9901      	ldr	r1, [sp, #4]
    80a8:	f000 fa0e 	bl	84c8 <__udivsi3>
    80ac:	0007      	movs	r7, r0
    if (i < 10)
    80ae:	2c09      	cmp	r4, #9
    80b0:	d811      	bhi.n	80d6 <ultoa+0x56>
      *tp++ = i+'0';
    80b2:	3430      	adds	r4, #48	; 0x30
    else
      *tp++ = i + 'a' - 10;
    80b4:	702c      	strb	r4, [r5, #0]
    80b6:	3501      	adds	r5, #1
    80b8:	002b      	movs	r3, r5
  while (v || tp == tmp)
    80ba:	2f00      	cmp	r7, #0
    80bc:	d1ed      	bne.n	809a <ultoa+0x1a>
    80be:	aa03      	add	r2, sp, #12
    80c0:	42aa      	cmp	r2, r5
    80c2:	d0ea      	beq.n	809a <ultoa+0x1a>
    80c4:	0032      	movs	r2, r6
  }

  sp = string;


  while (tp > tmp)
    80c6:	a903      	add	r1, sp, #12
    80c8:	428b      	cmp	r3, r1
    80ca:	d806      	bhi.n	80da <ultoa+0x5a>
    *sp++ = *--tp;
  *sp = 0;
    80cc:	2300      	movs	r3, #0
    80ce:	7013      	strb	r3, [r2, #0]

  return string;
}
    80d0:	0030      	movs	r0, r6
    80d2:	b00d      	add	sp, #52	; 0x34
    80d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *tp++ = i + 'a' - 10;
    80d6:	3457      	adds	r4, #87	; 0x57
    80d8:	e7ec      	b.n	80b4 <ultoa+0x34>
    *sp++ = *--tp;
    80da:	3b01      	subs	r3, #1
    80dc:	7819      	ldrb	r1, [r3, #0]
    80de:	7011      	strb	r1, [r2, #0]
    80e0:	3201      	adds	r2, #1
    80e2:	e7f0      	b.n	80c6 <ultoa+0x46>

000080e4 <utoa>:
{
    80e4:	b510      	push	{r4, lr}
  return ultoa( value, string, radix ) ;
    80e6:	f7ff ffcb 	bl	8080 <ultoa>
}
    80ea:	bd10      	pop	{r4, pc}

000080ec <_ZN6SERCOMC1EP6Sercom>:
#define WIRE_RISE_TIME_NANOSECONDS 125
#endif

SERCOM::SERCOM(Sercom* s)
{
  sercom = s;
    80ec:	6001      	str	r1, [r0, #0]
}
    80ee:	4770      	bx	lr

000080f0 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
  }
}
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    80f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    80f2:	ac05      	add	r4, sp, #20
    80f4:	7825      	ldrb	r5, [r4, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    80f6:	6804      	ldr	r4, [r0, #0]
    80f8:	1e98      	subs	r0, r3, #2
    80fa:	1e47      	subs	r7, r0, #1
    80fc:	41b8      	sbcs	r0, r7
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    80fe:	6826      	ldr	r6, [r4, #0]
    8100:	0792      	lsls	r2, r2, #30
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    8102:	0600      	lsls	r0, r0, #24
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    8104:	4332      	orrs	r2, r6
    8106:	4302      	orrs	r2, r0

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    8108:	2007      	movs	r0, #7
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    810a:	6022      	str	r2, [r4, #0]
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    810c:	4001      	ands	r1, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    810e:	01ad      	lsls	r5, r5, #6
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    8110:	6862      	ldr	r2, [r4, #4]
    8112:	4329      	orrs	r1, r5
    8114:	2000      	movs	r0, #0
    8116:	2b02      	cmp	r3, #2
    8118:	d000      	beq.n	811c <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x2c>
    811a:	0358      	lsls	r0, r3, #13
    811c:	4311      	orrs	r1, r2
    811e:	4301      	orrs	r1, r0
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    8120:	6061      	str	r1, [r4, #4]
}
    8122:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008124 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
    8124:	b510      	push	{r4, lr}
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
                SERCOM_USART_CTRLA_RXPO(rxPad);
    8126:	24c0      	movs	r4, #192	; 0xc0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    8128:	6803      	ldr	r3, [r0, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
    812a:	03a4      	lsls	r4, r4, #14
    812c:	6818      	ldr	r0, [r3, #0]
    812e:	0512      	lsls	r2, r2, #20
    8130:	4022      	ands	r2, r4
    8132:	4302      	orrs	r2, r0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    8134:	20c0      	movs	r0, #192	; 0xc0
    8136:	0409      	lsls	r1, r1, #16
    8138:	0280      	lsls	r0, r0, #10
    813a:	4001      	ands	r1, r0
                SERCOM_USART_CTRLA_RXPO(rxPad);
    813c:	4311      	orrs	r1, r2
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    813e:	6019      	str	r1, [r3, #0]

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
    8140:	685a      	ldr	r2, [r3, #4]
    8142:	4310      	orrs	r0, r2
    8144:	6058      	str	r0, [r3, #4]
}
    8146:	bd10      	pop	{r4, pc}

00008148 <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    8148:	2201      	movs	r2, #1
    814a:	6803      	ldr	r3, [r0, #0]
    814c:	6819      	ldr	r1, [r3, #0]
    814e:	430a      	orrs	r2, r1
    8150:	601a      	str	r2, [r3, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    8152:	681a      	ldr	r2, [r3, #0]
    8154:	07d2      	lsls	r2, r2, #31
    8156:	d4fc      	bmi.n	8152 <_ZN6SERCOM9resetUARTEv+0xa>
    8158:	69da      	ldr	r2, [r3, #28]
    815a:	07d2      	lsls	r2, r2, #31
    815c:	d4f9      	bmi.n	8152 <_ZN6SERCOM9resetUARTEv+0xa>
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
    815e:	4770      	bx	lr

00008160 <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
    8160:	2202      	movs	r2, #2
    8162:	6803      	ldr	r3, [r0, #0]
    8164:	6819      	ldr	r1, [r3, #0]
    8166:	430a      	orrs	r2, r1
    8168:	601a      	str	r2, [r3, #0]

  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
    816a:	69da      	ldr	r2, [r3, #28]
    816c:	0792      	lsls	r2, r2, #30
    816e:	d4fc      	bmi.n	816a <_ZN6SERCOM10enableUARTEv+0xa>
}
    8170:	4770      	bx	lr

00008172 <_ZN6SERCOM9flushUARTEv>:
}

bool SERCOM::isDataRegisterEmptyUART()
{
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    8172:	6803      	ldr	r3, [r0, #0]
    8174:	7e1a      	ldrb	r2, [r3, #24]
  if(isDataRegisterEmptyUART())
    8176:	07d2      	lsls	r2, r2, #31
    8178:	d402      	bmi.n	8180 <_ZN6SERCOM9flushUARTEv+0xe>
  while(!sercom->USART.INTFLAG.bit.TXC);
    817a:	7e1a      	ldrb	r2, [r3, #24]
    817c:	0792      	lsls	r2, r2, #30
    817e:	d5fc      	bpl.n	817a <_ZN6SERCOM9flushUARTEv+0x8>
}
    8180:	4770      	bx	lr

00008182 <_ZN6SERCOM15clearStatusUARTEv>:
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
    8182:	2200      	movs	r2, #0
    8184:	6803      	ldr	r3, [r0, #0]
    8186:	835a      	strh	r2, [r3, #26]
}
    8188:	4770      	bx	lr

0000818a <_ZN6SERCOM17availableDataUARTEv>:
  return sercom->USART.INTFLAG.bit.RXC;
    818a:	6803      	ldr	r3, [r0, #0]
    818c:	7e18      	ldrb	r0, [r3, #24]
    818e:	0740      	lsls	r0, r0, #29
    8190:	0fc0      	lsrs	r0, r0, #31
}
    8192:	4770      	bx	lr

00008194 <_ZN6SERCOM11isUARTErrorEv>:
  return sercom->USART.INTFLAG.bit.ERROR;
    8194:	6803      	ldr	r3, [r0, #0]
    8196:	7e18      	ldrb	r0, [r3, #24]
    8198:	09c0      	lsrs	r0, r0, #7
}
    819a:	4770      	bx	lr

0000819c <_ZN6SERCOM20acknowledgeUARTErrorEv>:
  sercom->USART.INTFLAG.bit.ERROR = 1;
    819c:	2380      	movs	r3, #128	; 0x80
    819e:	6802      	ldr	r2, [r0, #0]
    81a0:	425b      	negs	r3, r3
    81a2:	7e11      	ldrb	r1, [r2, #24]
    81a4:	430b      	orrs	r3, r1
    81a6:	7613      	strb	r3, [r2, #24]
}
    81a8:	4770      	bx	lr

000081aa <_ZN6SERCOM23isDataRegisterEmptyUARTEv>:
  return sercom->USART.INTFLAG.bit.DRE;
    81aa:	6803      	ldr	r3, [r0, #0]
    81ac:	7e18      	ldrb	r0, [r3, #24]
    81ae:	07c0      	lsls	r0, r0, #31
    81b0:	0fc0      	lsrs	r0, r0, #31
}
    81b2:	4770      	bx	lr

000081b4 <_ZN6SERCOM12readDataUARTEv>:

uint8_t SERCOM::readDataUART()
{
  return sercom->USART.DATA.bit.DATA;
    81b4:	6803      	ldr	r3, [r0, #0]
    81b6:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    81b8:	b2c0      	uxtb	r0, r0
}
    81ba:	4770      	bx	lr

000081bc <_ZN6SERCOM13writeDataUARTEh>:
  return sercom->USART.INTFLAG.bit.DRE;
    81bc:	6803      	ldr	r3, [r0, #0]
    81be:	7e1a      	ldrb	r2, [r3, #24]

int SERCOM::writeDataUART(uint8_t data)
{
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    81c0:	07d2      	lsls	r2, r2, #31
    81c2:	d5fc      	bpl.n	81be <_ZN6SERCOM13writeDataUARTEh+0x2>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    81c4:	b289      	uxth	r1, r1
  return 1;
}
    81c6:	2001      	movs	r0, #1
  sercom->USART.DATA.reg = (uint16_t)data;
    81c8:	8519      	strh	r1, [r3, #40]	; 0x28
}
    81ca:	4770      	bx	lr

000081cc <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::enableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    81cc:	2201      	movs	r2, #1
    81ce:	6803      	ldr	r3, [r0, #0]
    81d0:	759a      	strb	r2, [r3, #22]
}
    81d2:	4770      	bx	lr

000081d4 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::disableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
    81d4:	2201      	movs	r2, #1
    81d6:	6803      	ldr	r3, [r0, #0]
    81d8:	751a      	strb	r2, [r3, #20]
}
    81da:	4770      	bx	lr

000081dc <_ZN6SERCOM13enableUSARTRXEv>:

void SERCOM::enableUSARTRX()
{
	sercom->USART.CTRLB.bit.RXEN = 1;
    81dc:	2380      	movs	r3, #128	; 0x80
    81de:	6802      	ldr	r2, [r0, #0]
    81e0:	029b      	lsls	r3, r3, #10
    81e2:	6851      	ldr	r1, [r2, #4]
    81e4:	430b      	orrs	r3, r1
    81e6:	6053      	str	r3, [r2, #4]
}
    81e8:	4770      	bx	lr
	...

000081ec <_ZN6SERCOM14disableUSARTRXEv>:

void SERCOM::disableUSARTRX()
{
	sercom->USART.CTRLB.bit.RXEN = 0;
    81ec:	6802      	ldr	r2, [r0, #0]
    81ee:	4902      	ldr	r1, [pc, #8]	; (81f8 <_ZN6SERCOM14disableUSARTRXEv+0xc>)
    81f0:	6853      	ldr	r3, [r2, #4]
    81f2:	400b      	ands	r3, r1
    81f4:	6053      	str	r3, [r2, #4]
}
    81f6:	4770      	bx	lr
    81f8:	fffdffff 	.word	0xfffdffff

000081fc <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem>:


}

void SERCOM::initSPIClock(SercomSpiClockMode clockMode, uint32_t baudrate)
{
    81fc:	b570      	push	{r4, r5, r6, lr}
  if((clockMode & (0x1ul)) == 0 )
    cpha = 0;
  else
    cpha = 1;

  if((clockMode & (0x2ul)) == 0)
    81fe:	2501      	movs	r5, #1
    cpol = 0;
  else
    cpol = 1;

  //Setting the CTRLA register
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    8200:	6804      	ldr	r4, [r0, #0]
  if((clockMode & (0x2ul)) == 0)
    8202:	084b      	lsrs	r3, r1, #1
    8204:	402b      	ands	r3, r5
    cpha = 0;
    8206:	4029      	ands	r1, r5
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    8208:	6820      	ldr	r0, [r4, #0]
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    820a:	0709      	lsls	r1, r1, #28
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    820c:	075b      	lsls	r3, r3, #29
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    820e:	430b      	orrs	r3, r1
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    8210:	4303      	orrs	r3, r0
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    8212:	6023      	str	r3, [r4, #0]
//	return sercom->SPI.INTFLAG.bit.RXC;
//}

uint8_t SERCOM::calculateBaudrateSynchronous(uint32_t baudrate)
{
  return SERCOM_FREQ_REF / (2 * baudrate) - 1;
    8214:	0051      	lsls	r1, r2, #1
    8216:	4803      	ldr	r0, [pc, #12]	; (8224 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem+0x28>)
    8218:	f000 f956 	bl	84c8 <__udivsi3>
    821c:	3801      	subs	r0, #1
    821e:	b2c0      	uxtb	r0, r0
  sercom->SPI.BAUD.reg = calculateBaudrateSynchronous(baudrate);
    8220:	7320      	strb	r0, [r4, #12]
}
    8222:	bd70      	pop	{r4, r5, r6, pc}
    8224:	02dc6c00 	.word	0x02dc6c00

00008228 <_ZN6SERCOM8resetSPIEv>:
  sercom->SPI.CTRLA.bit.SWRST = 1;
    8228:	2201      	movs	r2, #1
    822a:	6803      	ldr	r3, [r0, #0]
    822c:	6819      	ldr	r1, [r3, #0]
    822e:	430a      	orrs	r2, r1
    8230:	601a      	str	r2, [r3, #0]
  while(sercom->SPI.CTRLA.bit.SWRST || sercom->SPI.SYNCBUSY.bit.SWRST);
    8232:	681a      	ldr	r2, [r3, #0]
    8234:	07d2      	lsls	r2, r2, #31
    8236:	d4fc      	bmi.n	8232 <_ZN6SERCOM8resetSPIEv+0xa>
    8238:	69da      	ldr	r2, [r3, #28]
    823a:	07d2      	lsls	r2, r2, #31
    823c:	d4f9      	bmi.n	8232 <_ZN6SERCOM8resetSPIEv+0xa>
}
    823e:	4770      	bx	lr

00008240 <_ZN6SERCOM9enableSPIEv>:
  sercom->SPI.CTRLA.bit.ENABLE = 1;
    8240:	2202      	movs	r2, #2
    8242:	6803      	ldr	r3, [r0, #0]
    8244:	6819      	ldr	r1, [r3, #0]
    8246:	430a      	orrs	r2, r1
    8248:	601a      	str	r2, [r3, #0]
  while(sercom->SPI.SYNCBUSY.bit.ENABLE)
    824a:	69da      	ldr	r2, [r3, #28]
    824c:	0792      	lsls	r2, r2, #30
    824e:	d4fc      	bmi.n	824a <_ZN6SERCOM9enableSPIEv+0xa>
}
    8250:	4770      	bx	lr

00008252 <_ZN6SERCOM10disableSPIEv>:
  while(sercom->SPI.SYNCBUSY.bit.ENABLE)
    8252:	6803      	ldr	r3, [r0, #0]
    8254:	69da      	ldr	r2, [r3, #28]
    8256:	0792      	lsls	r2, r2, #30
    8258:	d4fc      	bmi.n	8254 <_ZN6SERCOM10disableSPIEv+0x2>
  sercom->SPI.CTRLA.bit.ENABLE = 0;
    825a:	2102      	movs	r1, #2
    825c:	681a      	ldr	r2, [r3, #0]
    825e:	438a      	bics	r2, r1
    8260:	601a      	str	r2, [r3, #0]
}
    8262:	4770      	bx	lr

00008264 <_ZN6SERCOM15transferDataSPIEh>:
  sercom->SPI.DATA.bit.DATA = data; // Writing data into Data register
    8264:	6802      	ldr	r2, [r0, #0]
    8266:	6a93      	ldr	r3, [r2, #40]	; 0x28
    8268:	0a5b      	lsrs	r3, r3, #9
    826a:	025b      	lsls	r3, r3, #9
    826c:	4319      	orrs	r1, r3
    826e:	6291      	str	r1, [r2, #40]	; 0x28
  while( sercom->SPI.INTFLAG.bit.RXC == 0 )
    8270:	7e13      	ldrb	r3, [r2, #24]
    8272:	075b      	lsls	r3, r3, #29
    8274:	d5fc      	bpl.n	8270 <_ZN6SERCOM15transferDataSPIEh+0xc>
  return sercom->SPI.DATA.bit.DATA;  // Reading data
    8276:	6a90      	ldr	r0, [r2, #40]	; 0x28
    8278:	b2c0      	uxtb	r0, r0
}
    827a:	4770      	bx	lr

0000827c <_ZN6SERCOM13initClockNVICEv>:
void SERCOM::initClockNVIC( void )
{
  uint8_t clockId = 0;
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later

  if(sercom == SERCOM0)
    827c:	6803      	ldr	r3, [r0, #0]
    827e:	4a21      	ldr	r2, [pc, #132]	; (8304 <_ZN6SERCOM13initClockNVICEv+0x88>)
{
    8280:	b530      	push	{r4, r5, lr}
  if(sercom == SERCOM0)
    8282:	4293      	cmp	r3, r2
    8284:	d011      	beq.n	82aa <_ZN6SERCOM13initClockNVICEv+0x2e>
  {
    clockId = GCM_SERCOM0_CORE;
    IdNvic = SERCOM0_IRQn;
  }
  else if(sercom == SERCOM1)
    8286:	4a20      	ldr	r2, [pc, #128]	; (8308 <_ZN6SERCOM13initClockNVICEv+0x8c>)
    8288:	4293      	cmp	r3, r2
    828a:	d02f      	beq.n	82ec <_ZN6SERCOM13initClockNVICEv+0x70>
  {
    clockId = GCM_SERCOM1_CORE;
    IdNvic = SERCOM1_IRQn;
  }
  else if(sercom == SERCOM2)
    828c:	4a1f      	ldr	r2, [pc, #124]	; (830c <_ZN6SERCOM13initClockNVICEv+0x90>)
    828e:	4293      	cmp	r3, r2
    8290:	d02f      	beq.n	82f2 <_ZN6SERCOM13initClockNVICEv+0x76>
  {
    clockId = GCM_SERCOM2_CORE;
    IdNvic = SERCOM2_IRQn;
  }
  else if(sercom == SERCOM3)
    8292:	4a1f      	ldr	r2, [pc, #124]	; (8310 <_ZN6SERCOM13initClockNVICEv+0x94>)
    8294:	4293      	cmp	r3, r2
    8296:	d02f      	beq.n	82f8 <_ZN6SERCOM13initClockNVICEv+0x7c>
  {
    clockId = GCM_SERCOM3_CORE;
    IdNvic = SERCOM3_IRQn;
  }
  #if defined(SERCOM4)
  else if(sercom == SERCOM4)
    8298:	4a1e      	ldr	r2, [pc, #120]	; (8314 <_ZN6SERCOM13initClockNVICEv+0x98>)
    829a:	4293      	cmp	r3, r2
    829c:	d02f      	beq.n	82fe <_ZN6SERCOM13initClockNVICEv+0x82>
    clockId = GCM_SERCOM4_CORE;
    IdNvic = SERCOM4_IRQn;
  }
  #endif // SERCOM4
  #if defined(SERCOM5)
  else if(sercom == SERCOM5)
    829e:	4a1e      	ldr	r2, [pc, #120]	; (8318 <_ZN6SERCOM13initClockNVICEv+0x9c>)
    82a0:	4293      	cmp	r3, r2
    82a2:	d122      	bne.n	82ea <_ZN6SERCOM13initClockNVICEv+0x6e>
  {
    clockId = GCM_SERCOM5_CORE;
    IdNvic = SERCOM5_IRQn;
    82a4:	230e      	movs	r3, #14
    clockId = GCM_SERCOM5_CORE;
    82a6:	2219      	movs	r2, #25
    82a8:	e001      	b.n	82ae <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM0_IRQn;
    82aa:	2309      	movs	r3, #9
    clockId = GCM_SERCOM0_CORE;
    82ac:	2214      	movs	r2, #20
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    82ae:	2101      	movs	r1, #1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    82b0:	2503      	movs	r5, #3
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    82b2:	4099      	lsls	r1, r3
    82b4:	4819      	ldr	r0, [pc, #100]	; (831c <_ZN6SERCOM13initClockNVICEv+0xa0>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    82b6:	24c0      	movs	r4, #192	; 0xc0
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    82b8:	6001      	str	r1, [r0, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    82ba:	0899      	lsrs	r1, r3, #2
    82bc:	402b      	ands	r3, r5
    82be:	40ab      	lsls	r3, r5
    82c0:	35fc      	adds	r5, #252	; 0xfc
    82c2:	409d      	lsls	r5, r3
    82c4:	0089      	lsls	r1, r1, #2
    82c6:	1809      	adds	r1, r1, r0
    82c8:	00a4      	lsls	r4, r4, #2
    82ca:	5908      	ldr	r0, [r1, r4]
    82cc:	43a8      	bics	r0, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    82ce:	25c0      	movs	r5, #192	; 0xc0
    82d0:	409d      	lsls	r5, r3
    82d2:	002b      	movs	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    82d4:	4303      	orrs	r3, r0
    82d6:	510b      	str	r3, [r1, r4]
  NVIC_EnableIRQ(IdNvic);
  NVIC_SetPriority (IdNvic, SERCOM_NVIC_PRIORITY);  /* set Priority */

  //Setting clock
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
                      GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
    82d8:	2380      	movs	r3, #128	; 0x80
    82da:	01db      	lsls	r3, r3, #7
    82dc:	431a      	orrs	r2, r3
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
    82de:	4b10      	ldr	r3, [pc, #64]	; (8320 <_ZN6SERCOM13initClockNVICEv+0xa4>)
    82e0:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    82e2:	785a      	ldrb	r2, [r3, #1]
    82e4:	b252      	sxtb	r2, r2
    82e6:	2a00      	cmp	r2, #0
    82e8:	dbfb      	blt.n	82e2 <_ZN6SERCOM13initClockNVICEv+0x66>
  {
    /* Wait for synchronization */
  }
}
    82ea:	bd30      	pop	{r4, r5, pc}
    IdNvic = SERCOM1_IRQn;
    82ec:	230a      	movs	r3, #10
    clockId = GCM_SERCOM1_CORE;
    82ee:	2215      	movs	r2, #21
    82f0:	e7dd      	b.n	82ae <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM2_IRQn;
    82f2:	230b      	movs	r3, #11
    clockId = GCM_SERCOM2_CORE;
    82f4:	2216      	movs	r2, #22
    82f6:	e7da      	b.n	82ae <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM3_IRQn;
    82f8:	230c      	movs	r3, #12
    clockId = GCM_SERCOM3_CORE;
    82fa:	2217      	movs	r2, #23
    82fc:	e7d7      	b.n	82ae <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM4_IRQn;
    82fe:	230d      	movs	r3, #13
    clockId = GCM_SERCOM4_CORE;
    8300:	2218      	movs	r2, #24
    8302:	e7d4      	b.n	82ae <_ZN6SERCOM13initClockNVICEv+0x32>
    8304:	42000800 	.word	0x42000800
    8308:	42000c00 	.word	0x42000c00
    830c:	42001000 	.word	0x42001000
    8310:	42001400 	.word	0x42001400
    8314:	42001800 	.word	0x42001800
    8318:	42001c00 	.word	0x42001c00
    831c:	e000e100 	.word	0xe000e100
    8320:	40000c00 	.word	0x40000c00

00008324 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
{
    8324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8326:	0004      	movs	r4, r0
    8328:	0016      	movs	r6, r2
    832a:	000f      	movs	r7, r1
    832c:	001d      	movs	r5, r3
  initClockNVIC();
    832e:	f7ff ffa5 	bl	827c <_ZN6SERCOM13initClockNVICEv>
  resetUART();
    8332:	0020      	movs	r0, r4
    8334:	f7ff ff08 	bl	8148 <_ZN6SERCOM9resetUARTEv>
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    8338:	221c      	movs	r2, #28
    833a:	00bb      	lsls	r3, r7, #2
    833c:	4013      	ands	r3, r2
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    833e:	0772      	lsls	r2, r6, #29
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    8340:	6824      	ldr	r4, [r4, #0]
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    8342:	0c12      	lsrs	r2, r2, #16
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    8344:	4313      	orrs	r3, r2
    8346:	6023      	str	r3, [r4, #0]
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC |  //Received complete
    8348:	2384      	movs	r3, #132	; 0x84
    834a:	75a3      	strb	r3, [r4, #22]
  if ( mode == UART_INT_CLOCK )
    834c:	2f01      	cmp	r7, #1
    834e:	d118      	bne.n	8382 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x5e>
      sampleRateValue = 16;
    8350:	2110      	movs	r1, #16
    if (sampleRate == SAMPLE_RATE_x16) {
    8352:	2e01      	cmp	r6, #1
    8354:	d000      	beq.n	8358 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x34>
      sampleRateValue = 8;
    8356:	3908      	subs	r1, #8
    uint32_t baudTimes8 = (SystemCoreClock * 8) / (sampleRateValue * baudrate);
    8358:	4b0a      	ldr	r3, [pc, #40]	; (8384 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x60>)
    835a:	4369      	muls	r1, r5
    835c:	6818      	ldr	r0, [r3, #0]
    835e:	00c0      	lsls	r0, r0, #3
    8360:	f000 f8b2 	bl	84c8 <__udivsi3>
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    8364:	2207      	movs	r2, #7
    8366:	89a3      	ldrh	r3, [r4, #12]
    8368:	4002      	ands	r2, r0
    836a:	04db      	lsls	r3, r3, #19
    836c:	0352      	lsls	r2, r2, #13
    836e:	0cdb      	lsrs	r3, r3, #19
    8370:	4313      	orrs	r3, r2
    8372:	81a3      	strh	r3, [r4, #12]
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    8374:	0403      	lsls	r3, r0, #16
    8376:	89a0      	ldrh	r0, [r4, #12]
    8378:	0cdb      	lsrs	r3, r3, #19
    837a:	0b40      	lsrs	r0, r0, #13
    837c:	0340      	lsls	r0, r0, #13
    837e:	4318      	orrs	r0, r3
    8380:	81a0      	strh	r0, [r4, #12]
}
    8382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8384:	20000084 	.word	0x20000084

00008388 <_ZN6SERCOM7initSPIE14SercomSpiTXPad11SercomRXPad17SercomSpiCharSize15SercomDataOrder>:
{
    8388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    838a:	0007      	movs	r7, r0
    838c:	9301      	str	r3, [sp, #4]
    838e:	ab08      	add	r3, sp, #32
    8390:	781e      	ldrb	r6, [r3, #0]
    8392:	000d      	movs	r5, r1
    8394:	0014      	movs	r4, r2
  resetSPI();
    8396:	f7ff ff47 	bl	8228 <_ZN6SERCOM8resetSPIEv>
  initClockNVIC();
    839a:	0038      	movs	r0, r7
    839c:	f7ff ff6e 	bl	827c <_ZN6SERCOM13initClockNVICEv>
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    83a0:	22c0      	movs	r2, #192	; 0xc0
    83a2:	0524      	lsls	r4, r4, #20
    83a4:	0392      	lsls	r2, r2, #14
    83a6:	4014      	ands	r4, r2
                          dataOrder << SERCOM_SPI_CTRLA_DORD_Pos;
    83a8:	07b2      	lsls	r2, r6, #30
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    83aa:	260c      	movs	r6, #12
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    83ac:	2107      	movs	r1, #7
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    83ae:	4316      	orrs	r6, r2
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    83b0:	9a01      	ldr	r2, [sp, #4]
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    83b2:	4334      	orrs	r4, r6
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    83b4:	400a      	ands	r2, r1
                          SERCOM_SPI_CTRLA_DOPO(mosi) |
    83b6:	26c0      	movs	r6, #192	; 0xc0
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    83b8:	0011      	movs	r1, r2
    83ba:	2280      	movs	r2, #128	; 0x80
                          SERCOM_SPI_CTRLA_DOPO(mosi) |
    83bc:	02b6      	lsls	r6, r6, #10
    83be:	042d      	lsls	r5, r5, #16
  sercom->SPI.CTRLA.reg =	SERCOM_SPI_CTRLA_MODE_SPI_MASTER |
    83c0:	683b      	ldr	r3, [r7, #0]
                          SERCOM_SPI_CTRLA_DOPO(mosi) |
    83c2:	4035      	ands	r5, r6
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    83c4:	0292      	lsls	r2, r2, #10
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    83c6:	4325      	orrs	r5, r4
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    83c8:	430a      	orrs	r2, r1
  sercom->SPI.CTRLA.reg =	SERCOM_SPI_CTRLA_MODE_SPI_MASTER |
    83ca:	601d      	str	r5, [r3, #0]
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    83cc:	605a      	str	r2, [r3, #4]
}
    83ce:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

000083d0 <_ZN13PluggableUSB_12getInterfaceEPh>:
#ifdef PLUGGABLE_USB_ENABLED

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
    83d0:	b570      	push	{r4, r5, r6, lr}
    83d2:	000e      	movs	r6, r1
	int sent = 0;
    83d4:	2500      	movs	r5, #0
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    83d6:	6844      	ldr	r4, [r0, #4]
    83d8:	2c00      	cmp	r4, #0
    83da:	d00b      	beq.n	83f4 <_ZN13PluggableUSB_12getInterfaceEPh+0x24>
		int res = node->getInterface(interfaceCount);
    83dc:	6823      	ldr	r3, [r4, #0]
    83de:	0031      	movs	r1, r6
    83e0:	685b      	ldr	r3, [r3, #4]
    83e2:	0020      	movs	r0, r4
    83e4:	4798      	blx	r3
		if (res < 0)
    83e6:	2800      	cmp	r0, #0
    83e8:	db02      	blt.n	83f0 <_ZN13PluggableUSB_12getInterfaceEPh+0x20>
			return -1;
		sent += res;
    83ea:	182d      	adds	r5, r5, r0
	for (node = rootNode; node; node = node->next) {
    83ec:	68e4      	ldr	r4, [r4, #12]
    83ee:	e7f3      	b.n	83d8 <_ZN13PluggableUSB_12getInterfaceEPh+0x8>
			return -1;
    83f0:	2501      	movs	r5, #1
    83f2:	426d      	negs	r5, r5
	}
	return sent;
}
    83f4:	0028      	movs	r0, r5
    83f6:	bd70      	pop	{r4, r5, r6, pc}

000083f8 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
    83f8:	b570      	push	{r4, r5, r6, lr}
    83fa:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    83fc:	6844      	ldr	r4, [r0, #4]
    83fe:	2c00      	cmp	r4, #0
    8400:	d008      	beq.n	8414 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1c>
		int ret = node->getDescriptor(setup);
    8402:	6823      	ldr	r3, [r4, #0]
    8404:	0029      	movs	r1, r5
    8406:	689b      	ldr	r3, [r3, #8]
    8408:	0020      	movs	r0, r4
    840a:	4798      	blx	r3
		// ret!=0 -> request has been processed
		if (ret)
    840c:	2800      	cmp	r0, #0
    840e:	d102      	bne.n	8416 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    8410:	68e4      	ldr	r4, [r4, #12]
    8412:	e7f4      	b.n	83fe <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x6>
			return ret;
	}
	return 0;
    8414:	0020      	movs	r0, r4
}
    8416:	bd70      	pop	{r4, r5, r6, pc}

00008418 <_ZN13PluggableUSB_12getShortNameEPc>:

void PluggableUSB_::getShortName(char *iSerialNum)
{
    8418:	b570      	push	{r4, r5, r6, lr}
    841a:	000d      	movs	r5, r1
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    841c:	6844      	ldr	r4, [r0, #4]
    841e:	2c00      	cmp	r4, #0
    8420:	d007      	beq.n	8432 <_ZN13PluggableUSB_12getShortNameEPc+0x1a>
               iSerialNum += node->getShortName(iSerialNum);
    8422:	6823      	ldr	r3, [r4, #0]
    8424:	0029      	movs	r1, r5
    8426:	0020      	movs	r0, r4
    8428:	68db      	ldr	r3, [r3, #12]
    842a:	4798      	blx	r3
       for (node = rootNode; node; node = node->next) {
    842c:	68e4      	ldr	r4, [r4, #12]
               iSerialNum += node->getShortName(iSerialNum);
    842e:	182d      	adds	r5, r5, r0
       for (node = rootNode; node; node = node->next) {
    8430:	e7f5      	b.n	841e <_ZN13PluggableUSB_12getShortNameEPc+0x6>
       }
       *iSerialNum = 0;
    8432:	702c      	strb	r4, [r5, #0]
}
    8434:	bd70      	pop	{r4, r5, r6, pc}

00008436 <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
    8436:	b570      	push	{r4, r5, r6, lr}
    8438:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    843a:	6844      	ldr	r4, [r0, #4]
    843c:	2c00      	cmp	r4, #0
    843e:	d008      	beq.n	8452 <_ZN13PluggableUSB_5setupER8USBSetup+0x1c>
		if (node->setup(setup)) {
    8440:	6823      	ldr	r3, [r4, #0]
    8442:	0029      	movs	r1, r5
    8444:	681b      	ldr	r3, [r3, #0]
    8446:	0020      	movs	r0, r4
    8448:	4798      	blx	r3
    844a:	2800      	cmp	r0, #0
    844c:	d102      	bne.n	8454 <_ZN13PluggableUSB_5setupER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    844e:	68e4      	ldr	r4, [r4, #12]
    8450:	e7f4      	b.n	843c <_ZN13PluggableUSB_5setupER8USBSetup+0x6>
			return true;
		}
	}
	return false;
    8452:	0020      	movs	r0, r4
}
    8454:	bd70      	pop	{r4, r5, r6, pc}
	...

00008458 <_Z12PluggableUSBv>:
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    8458:	2101      	movs	r1, #1
    845a:	4a06      	ldr	r2, [pc, #24]	; (8474 <_Z12PluggableUSBv+0x1c>)
{
    845c:	b510      	push	{r4, lr}
	static PluggableUSB_ obj;
    845e:	6813      	ldr	r3, [r2, #0]
    8460:	4805      	ldr	r0, [pc, #20]	; (8478 <_Z12PluggableUSBv+0x20>)
    8462:	400b      	ands	r3, r1
    8464:	d105      	bne.n	8472 <_Z12PluggableUSBv+0x1a>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    8466:	2402      	movs	r4, #2
    8468:	7004      	strb	r4, [r0, #0]
    846a:	1924      	adds	r4, r4, r4
    846c:	7044      	strb	r4, [r0, #1]
    846e:	6043      	str	r3, [r0, #4]
	static PluggableUSB_ obj;
    8470:	6011      	str	r1, [r2, #0]
}
    8472:	bd10      	pop	{r4, pc}
    8474:	20000a10 	.word	0x20000a10
    8478:	20000a14 	.word	0x20000a14

0000847c <__aeabi_atexit>:
    847c:	000b      	movs	r3, r1
    847e:	b510      	push	{r4, lr}
    8480:	0001      	movs	r1, r0
    8482:	0018      	movs	r0, r3
    8484:	f002 ffda 	bl	b43c <__cxa_atexit>
    8488:	bd10      	pop	{r4, pc}
	...

0000848c <__gnu_thumb1_case_sqi>:
    848c:	b402      	push	{r1}
    848e:	4671      	mov	r1, lr
    8490:	0849      	lsrs	r1, r1, #1
    8492:	0049      	lsls	r1, r1, #1
    8494:	5609      	ldrsb	r1, [r1, r0]
    8496:	0049      	lsls	r1, r1, #1
    8498:	448e      	add	lr, r1
    849a:	bc02      	pop	{r1}
    849c:	4770      	bx	lr
    849e:	46c0      	nop			; (mov r8, r8)

000084a0 <__gnu_thumb1_case_uqi>:
    84a0:	b402      	push	{r1}
    84a2:	4671      	mov	r1, lr
    84a4:	0849      	lsrs	r1, r1, #1
    84a6:	0049      	lsls	r1, r1, #1
    84a8:	5c09      	ldrb	r1, [r1, r0]
    84aa:	0049      	lsls	r1, r1, #1
    84ac:	448e      	add	lr, r1
    84ae:	bc02      	pop	{r1}
    84b0:	4770      	bx	lr
    84b2:	46c0      	nop			; (mov r8, r8)

000084b4 <__gnu_thumb1_case_uhi>:
    84b4:	b403      	push	{r0, r1}
    84b6:	4671      	mov	r1, lr
    84b8:	0849      	lsrs	r1, r1, #1
    84ba:	0040      	lsls	r0, r0, #1
    84bc:	0049      	lsls	r1, r1, #1
    84be:	5a09      	ldrh	r1, [r1, r0]
    84c0:	0049      	lsls	r1, r1, #1
    84c2:	448e      	add	lr, r1
    84c4:	bc03      	pop	{r0, r1}
    84c6:	4770      	bx	lr

000084c8 <__udivsi3>:
    84c8:	2200      	movs	r2, #0
    84ca:	0843      	lsrs	r3, r0, #1
    84cc:	428b      	cmp	r3, r1
    84ce:	d374      	bcc.n	85ba <__udivsi3+0xf2>
    84d0:	0903      	lsrs	r3, r0, #4
    84d2:	428b      	cmp	r3, r1
    84d4:	d35f      	bcc.n	8596 <__udivsi3+0xce>
    84d6:	0a03      	lsrs	r3, r0, #8
    84d8:	428b      	cmp	r3, r1
    84da:	d344      	bcc.n	8566 <__udivsi3+0x9e>
    84dc:	0b03      	lsrs	r3, r0, #12
    84de:	428b      	cmp	r3, r1
    84e0:	d328      	bcc.n	8534 <__udivsi3+0x6c>
    84e2:	0c03      	lsrs	r3, r0, #16
    84e4:	428b      	cmp	r3, r1
    84e6:	d30d      	bcc.n	8504 <__udivsi3+0x3c>
    84e8:	22ff      	movs	r2, #255	; 0xff
    84ea:	0209      	lsls	r1, r1, #8
    84ec:	ba12      	rev	r2, r2
    84ee:	0c03      	lsrs	r3, r0, #16
    84f0:	428b      	cmp	r3, r1
    84f2:	d302      	bcc.n	84fa <__udivsi3+0x32>
    84f4:	1212      	asrs	r2, r2, #8
    84f6:	0209      	lsls	r1, r1, #8
    84f8:	d065      	beq.n	85c6 <__udivsi3+0xfe>
    84fa:	0b03      	lsrs	r3, r0, #12
    84fc:	428b      	cmp	r3, r1
    84fe:	d319      	bcc.n	8534 <__udivsi3+0x6c>
    8500:	e000      	b.n	8504 <__udivsi3+0x3c>
    8502:	0a09      	lsrs	r1, r1, #8
    8504:	0bc3      	lsrs	r3, r0, #15
    8506:	428b      	cmp	r3, r1
    8508:	d301      	bcc.n	850e <__udivsi3+0x46>
    850a:	03cb      	lsls	r3, r1, #15
    850c:	1ac0      	subs	r0, r0, r3
    850e:	4152      	adcs	r2, r2
    8510:	0b83      	lsrs	r3, r0, #14
    8512:	428b      	cmp	r3, r1
    8514:	d301      	bcc.n	851a <__udivsi3+0x52>
    8516:	038b      	lsls	r3, r1, #14
    8518:	1ac0      	subs	r0, r0, r3
    851a:	4152      	adcs	r2, r2
    851c:	0b43      	lsrs	r3, r0, #13
    851e:	428b      	cmp	r3, r1
    8520:	d301      	bcc.n	8526 <__udivsi3+0x5e>
    8522:	034b      	lsls	r3, r1, #13
    8524:	1ac0      	subs	r0, r0, r3
    8526:	4152      	adcs	r2, r2
    8528:	0b03      	lsrs	r3, r0, #12
    852a:	428b      	cmp	r3, r1
    852c:	d301      	bcc.n	8532 <__udivsi3+0x6a>
    852e:	030b      	lsls	r3, r1, #12
    8530:	1ac0      	subs	r0, r0, r3
    8532:	4152      	adcs	r2, r2
    8534:	0ac3      	lsrs	r3, r0, #11
    8536:	428b      	cmp	r3, r1
    8538:	d301      	bcc.n	853e <__udivsi3+0x76>
    853a:	02cb      	lsls	r3, r1, #11
    853c:	1ac0      	subs	r0, r0, r3
    853e:	4152      	adcs	r2, r2
    8540:	0a83      	lsrs	r3, r0, #10
    8542:	428b      	cmp	r3, r1
    8544:	d301      	bcc.n	854a <__udivsi3+0x82>
    8546:	028b      	lsls	r3, r1, #10
    8548:	1ac0      	subs	r0, r0, r3
    854a:	4152      	adcs	r2, r2
    854c:	0a43      	lsrs	r3, r0, #9
    854e:	428b      	cmp	r3, r1
    8550:	d301      	bcc.n	8556 <__udivsi3+0x8e>
    8552:	024b      	lsls	r3, r1, #9
    8554:	1ac0      	subs	r0, r0, r3
    8556:	4152      	adcs	r2, r2
    8558:	0a03      	lsrs	r3, r0, #8
    855a:	428b      	cmp	r3, r1
    855c:	d301      	bcc.n	8562 <__udivsi3+0x9a>
    855e:	020b      	lsls	r3, r1, #8
    8560:	1ac0      	subs	r0, r0, r3
    8562:	4152      	adcs	r2, r2
    8564:	d2cd      	bcs.n	8502 <__udivsi3+0x3a>
    8566:	09c3      	lsrs	r3, r0, #7
    8568:	428b      	cmp	r3, r1
    856a:	d301      	bcc.n	8570 <__udivsi3+0xa8>
    856c:	01cb      	lsls	r3, r1, #7
    856e:	1ac0      	subs	r0, r0, r3
    8570:	4152      	adcs	r2, r2
    8572:	0983      	lsrs	r3, r0, #6
    8574:	428b      	cmp	r3, r1
    8576:	d301      	bcc.n	857c <__udivsi3+0xb4>
    8578:	018b      	lsls	r3, r1, #6
    857a:	1ac0      	subs	r0, r0, r3
    857c:	4152      	adcs	r2, r2
    857e:	0943      	lsrs	r3, r0, #5
    8580:	428b      	cmp	r3, r1
    8582:	d301      	bcc.n	8588 <__udivsi3+0xc0>
    8584:	014b      	lsls	r3, r1, #5
    8586:	1ac0      	subs	r0, r0, r3
    8588:	4152      	adcs	r2, r2
    858a:	0903      	lsrs	r3, r0, #4
    858c:	428b      	cmp	r3, r1
    858e:	d301      	bcc.n	8594 <__udivsi3+0xcc>
    8590:	010b      	lsls	r3, r1, #4
    8592:	1ac0      	subs	r0, r0, r3
    8594:	4152      	adcs	r2, r2
    8596:	08c3      	lsrs	r3, r0, #3
    8598:	428b      	cmp	r3, r1
    859a:	d301      	bcc.n	85a0 <__udivsi3+0xd8>
    859c:	00cb      	lsls	r3, r1, #3
    859e:	1ac0      	subs	r0, r0, r3
    85a0:	4152      	adcs	r2, r2
    85a2:	0883      	lsrs	r3, r0, #2
    85a4:	428b      	cmp	r3, r1
    85a6:	d301      	bcc.n	85ac <__udivsi3+0xe4>
    85a8:	008b      	lsls	r3, r1, #2
    85aa:	1ac0      	subs	r0, r0, r3
    85ac:	4152      	adcs	r2, r2
    85ae:	0843      	lsrs	r3, r0, #1
    85b0:	428b      	cmp	r3, r1
    85b2:	d301      	bcc.n	85b8 <__udivsi3+0xf0>
    85b4:	004b      	lsls	r3, r1, #1
    85b6:	1ac0      	subs	r0, r0, r3
    85b8:	4152      	adcs	r2, r2
    85ba:	1a41      	subs	r1, r0, r1
    85bc:	d200      	bcs.n	85c0 <__udivsi3+0xf8>
    85be:	4601      	mov	r1, r0
    85c0:	4152      	adcs	r2, r2
    85c2:	4610      	mov	r0, r2
    85c4:	4770      	bx	lr
    85c6:	e7ff      	b.n	85c8 <__udivsi3+0x100>
    85c8:	b501      	push	{r0, lr}
    85ca:	2000      	movs	r0, #0
    85cc:	f000 f8f0 	bl	87b0 <__aeabi_idiv0>
    85d0:	bd02      	pop	{r1, pc}
    85d2:	46c0      	nop			; (mov r8, r8)

000085d4 <__aeabi_uidivmod>:
    85d4:	2900      	cmp	r1, #0
    85d6:	d0f7      	beq.n	85c8 <__udivsi3+0x100>
    85d8:	e776      	b.n	84c8 <__udivsi3>
    85da:	4770      	bx	lr

000085dc <__divsi3>:
    85dc:	4603      	mov	r3, r0
    85de:	430b      	orrs	r3, r1
    85e0:	d47f      	bmi.n	86e2 <__divsi3+0x106>
    85e2:	2200      	movs	r2, #0
    85e4:	0843      	lsrs	r3, r0, #1
    85e6:	428b      	cmp	r3, r1
    85e8:	d374      	bcc.n	86d4 <__divsi3+0xf8>
    85ea:	0903      	lsrs	r3, r0, #4
    85ec:	428b      	cmp	r3, r1
    85ee:	d35f      	bcc.n	86b0 <__divsi3+0xd4>
    85f0:	0a03      	lsrs	r3, r0, #8
    85f2:	428b      	cmp	r3, r1
    85f4:	d344      	bcc.n	8680 <__divsi3+0xa4>
    85f6:	0b03      	lsrs	r3, r0, #12
    85f8:	428b      	cmp	r3, r1
    85fa:	d328      	bcc.n	864e <__divsi3+0x72>
    85fc:	0c03      	lsrs	r3, r0, #16
    85fe:	428b      	cmp	r3, r1
    8600:	d30d      	bcc.n	861e <__divsi3+0x42>
    8602:	22ff      	movs	r2, #255	; 0xff
    8604:	0209      	lsls	r1, r1, #8
    8606:	ba12      	rev	r2, r2
    8608:	0c03      	lsrs	r3, r0, #16
    860a:	428b      	cmp	r3, r1
    860c:	d302      	bcc.n	8614 <__divsi3+0x38>
    860e:	1212      	asrs	r2, r2, #8
    8610:	0209      	lsls	r1, r1, #8
    8612:	d065      	beq.n	86e0 <__divsi3+0x104>
    8614:	0b03      	lsrs	r3, r0, #12
    8616:	428b      	cmp	r3, r1
    8618:	d319      	bcc.n	864e <__divsi3+0x72>
    861a:	e000      	b.n	861e <__divsi3+0x42>
    861c:	0a09      	lsrs	r1, r1, #8
    861e:	0bc3      	lsrs	r3, r0, #15
    8620:	428b      	cmp	r3, r1
    8622:	d301      	bcc.n	8628 <__divsi3+0x4c>
    8624:	03cb      	lsls	r3, r1, #15
    8626:	1ac0      	subs	r0, r0, r3
    8628:	4152      	adcs	r2, r2
    862a:	0b83      	lsrs	r3, r0, #14
    862c:	428b      	cmp	r3, r1
    862e:	d301      	bcc.n	8634 <__divsi3+0x58>
    8630:	038b      	lsls	r3, r1, #14
    8632:	1ac0      	subs	r0, r0, r3
    8634:	4152      	adcs	r2, r2
    8636:	0b43      	lsrs	r3, r0, #13
    8638:	428b      	cmp	r3, r1
    863a:	d301      	bcc.n	8640 <__divsi3+0x64>
    863c:	034b      	lsls	r3, r1, #13
    863e:	1ac0      	subs	r0, r0, r3
    8640:	4152      	adcs	r2, r2
    8642:	0b03      	lsrs	r3, r0, #12
    8644:	428b      	cmp	r3, r1
    8646:	d301      	bcc.n	864c <__divsi3+0x70>
    8648:	030b      	lsls	r3, r1, #12
    864a:	1ac0      	subs	r0, r0, r3
    864c:	4152      	adcs	r2, r2
    864e:	0ac3      	lsrs	r3, r0, #11
    8650:	428b      	cmp	r3, r1
    8652:	d301      	bcc.n	8658 <__divsi3+0x7c>
    8654:	02cb      	lsls	r3, r1, #11
    8656:	1ac0      	subs	r0, r0, r3
    8658:	4152      	adcs	r2, r2
    865a:	0a83      	lsrs	r3, r0, #10
    865c:	428b      	cmp	r3, r1
    865e:	d301      	bcc.n	8664 <__divsi3+0x88>
    8660:	028b      	lsls	r3, r1, #10
    8662:	1ac0      	subs	r0, r0, r3
    8664:	4152      	adcs	r2, r2
    8666:	0a43      	lsrs	r3, r0, #9
    8668:	428b      	cmp	r3, r1
    866a:	d301      	bcc.n	8670 <__divsi3+0x94>
    866c:	024b      	lsls	r3, r1, #9
    866e:	1ac0      	subs	r0, r0, r3
    8670:	4152      	adcs	r2, r2
    8672:	0a03      	lsrs	r3, r0, #8
    8674:	428b      	cmp	r3, r1
    8676:	d301      	bcc.n	867c <__divsi3+0xa0>
    8678:	020b      	lsls	r3, r1, #8
    867a:	1ac0      	subs	r0, r0, r3
    867c:	4152      	adcs	r2, r2
    867e:	d2cd      	bcs.n	861c <__divsi3+0x40>
    8680:	09c3      	lsrs	r3, r0, #7
    8682:	428b      	cmp	r3, r1
    8684:	d301      	bcc.n	868a <__divsi3+0xae>
    8686:	01cb      	lsls	r3, r1, #7
    8688:	1ac0      	subs	r0, r0, r3
    868a:	4152      	adcs	r2, r2
    868c:	0983      	lsrs	r3, r0, #6
    868e:	428b      	cmp	r3, r1
    8690:	d301      	bcc.n	8696 <__divsi3+0xba>
    8692:	018b      	lsls	r3, r1, #6
    8694:	1ac0      	subs	r0, r0, r3
    8696:	4152      	adcs	r2, r2
    8698:	0943      	lsrs	r3, r0, #5
    869a:	428b      	cmp	r3, r1
    869c:	d301      	bcc.n	86a2 <__divsi3+0xc6>
    869e:	014b      	lsls	r3, r1, #5
    86a0:	1ac0      	subs	r0, r0, r3
    86a2:	4152      	adcs	r2, r2
    86a4:	0903      	lsrs	r3, r0, #4
    86a6:	428b      	cmp	r3, r1
    86a8:	d301      	bcc.n	86ae <__divsi3+0xd2>
    86aa:	010b      	lsls	r3, r1, #4
    86ac:	1ac0      	subs	r0, r0, r3
    86ae:	4152      	adcs	r2, r2
    86b0:	08c3      	lsrs	r3, r0, #3
    86b2:	428b      	cmp	r3, r1
    86b4:	d301      	bcc.n	86ba <__divsi3+0xde>
    86b6:	00cb      	lsls	r3, r1, #3
    86b8:	1ac0      	subs	r0, r0, r3
    86ba:	4152      	adcs	r2, r2
    86bc:	0883      	lsrs	r3, r0, #2
    86be:	428b      	cmp	r3, r1
    86c0:	d301      	bcc.n	86c6 <__divsi3+0xea>
    86c2:	008b      	lsls	r3, r1, #2
    86c4:	1ac0      	subs	r0, r0, r3
    86c6:	4152      	adcs	r2, r2
    86c8:	0843      	lsrs	r3, r0, #1
    86ca:	428b      	cmp	r3, r1
    86cc:	d301      	bcc.n	86d2 <__divsi3+0xf6>
    86ce:	004b      	lsls	r3, r1, #1
    86d0:	1ac0      	subs	r0, r0, r3
    86d2:	4152      	adcs	r2, r2
    86d4:	1a41      	subs	r1, r0, r1
    86d6:	d200      	bcs.n	86da <__divsi3+0xfe>
    86d8:	4601      	mov	r1, r0
    86da:	4152      	adcs	r2, r2
    86dc:	4610      	mov	r0, r2
    86de:	4770      	bx	lr
    86e0:	e05d      	b.n	879e <__divsi3+0x1c2>
    86e2:	0fca      	lsrs	r2, r1, #31
    86e4:	d000      	beq.n	86e8 <__divsi3+0x10c>
    86e6:	4249      	negs	r1, r1
    86e8:	1003      	asrs	r3, r0, #32
    86ea:	d300      	bcc.n	86ee <__divsi3+0x112>
    86ec:	4240      	negs	r0, r0
    86ee:	4053      	eors	r3, r2
    86f0:	2200      	movs	r2, #0
    86f2:	469c      	mov	ip, r3
    86f4:	0903      	lsrs	r3, r0, #4
    86f6:	428b      	cmp	r3, r1
    86f8:	d32d      	bcc.n	8756 <__divsi3+0x17a>
    86fa:	0a03      	lsrs	r3, r0, #8
    86fc:	428b      	cmp	r3, r1
    86fe:	d312      	bcc.n	8726 <__divsi3+0x14a>
    8700:	22fc      	movs	r2, #252	; 0xfc
    8702:	0189      	lsls	r1, r1, #6
    8704:	ba12      	rev	r2, r2
    8706:	0a03      	lsrs	r3, r0, #8
    8708:	428b      	cmp	r3, r1
    870a:	d30c      	bcc.n	8726 <__divsi3+0x14a>
    870c:	0189      	lsls	r1, r1, #6
    870e:	1192      	asrs	r2, r2, #6
    8710:	428b      	cmp	r3, r1
    8712:	d308      	bcc.n	8726 <__divsi3+0x14a>
    8714:	0189      	lsls	r1, r1, #6
    8716:	1192      	asrs	r2, r2, #6
    8718:	428b      	cmp	r3, r1
    871a:	d304      	bcc.n	8726 <__divsi3+0x14a>
    871c:	0189      	lsls	r1, r1, #6
    871e:	d03a      	beq.n	8796 <__divsi3+0x1ba>
    8720:	1192      	asrs	r2, r2, #6
    8722:	e000      	b.n	8726 <__divsi3+0x14a>
    8724:	0989      	lsrs	r1, r1, #6
    8726:	09c3      	lsrs	r3, r0, #7
    8728:	428b      	cmp	r3, r1
    872a:	d301      	bcc.n	8730 <__divsi3+0x154>
    872c:	01cb      	lsls	r3, r1, #7
    872e:	1ac0      	subs	r0, r0, r3
    8730:	4152      	adcs	r2, r2
    8732:	0983      	lsrs	r3, r0, #6
    8734:	428b      	cmp	r3, r1
    8736:	d301      	bcc.n	873c <__divsi3+0x160>
    8738:	018b      	lsls	r3, r1, #6
    873a:	1ac0      	subs	r0, r0, r3
    873c:	4152      	adcs	r2, r2
    873e:	0943      	lsrs	r3, r0, #5
    8740:	428b      	cmp	r3, r1
    8742:	d301      	bcc.n	8748 <__divsi3+0x16c>
    8744:	014b      	lsls	r3, r1, #5
    8746:	1ac0      	subs	r0, r0, r3
    8748:	4152      	adcs	r2, r2
    874a:	0903      	lsrs	r3, r0, #4
    874c:	428b      	cmp	r3, r1
    874e:	d301      	bcc.n	8754 <__divsi3+0x178>
    8750:	010b      	lsls	r3, r1, #4
    8752:	1ac0      	subs	r0, r0, r3
    8754:	4152      	adcs	r2, r2
    8756:	08c3      	lsrs	r3, r0, #3
    8758:	428b      	cmp	r3, r1
    875a:	d301      	bcc.n	8760 <__divsi3+0x184>
    875c:	00cb      	lsls	r3, r1, #3
    875e:	1ac0      	subs	r0, r0, r3
    8760:	4152      	adcs	r2, r2
    8762:	0883      	lsrs	r3, r0, #2
    8764:	428b      	cmp	r3, r1
    8766:	d301      	bcc.n	876c <__divsi3+0x190>
    8768:	008b      	lsls	r3, r1, #2
    876a:	1ac0      	subs	r0, r0, r3
    876c:	4152      	adcs	r2, r2
    876e:	d2d9      	bcs.n	8724 <__divsi3+0x148>
    8770:	0843      	lsrs	r3, r0, #1
    8772:	428b      	cmp	r3, r1
    8774:	d301      	bcc.n	877a <__divsi3+0x19e>
    8776:	004b      	lsls	r3, r1, #1
    8778:	1ac0      	subs	r0, r0, r3
    877a:	4152      	adcs	r2, r2
    877c:	1a41      	subs	r1, r0, r1
    877e:	d200      	bcs.n	8782 <__divsi3+0x1a6>
    8780:	4601      	mov	r1, r0
    8782:	4663      	mov	r3, ip
    8784:	4152      	adcs	r2, r2
    8786:	105b      	asrs	r3, r3, #1
    8788:	4610      	mov	r0, r2
    878a:	d301      	bcc.n	8790 <__divsi3+0x1b4>
    878c:	4240      	negs	r0, r0
    878e:	2b00      	cmp	r3, #0
    8790:	d500      	bpl.n	8794 <__divsi3+0x1b8>
    8792:	4249      	negs	r1, r1
    8794:	4770      	bx	lr
    8796:	4663      	mov	r3, ip
    8798:	105b      	asrs	r3, r3, #1
    879a:	d300      	bcc.n	879e <__divsi3+0x1c2>
    879c:	4240      	negs	r0, r0
    879e:	b501      	push	{r0, lr}
    87a0:	2000      	movs	r0, #0
    87a2:	f000 f805 	bl	87b0 <__aeabi_idiv0>
    87a6:	bd02      	pop	{r1, pc}

000087a8 <__aeabi_idivmod>:
    87a8:	2900      	cmp	r1, #0
    87aa:	d0f8      	beq.n	879e <__divsi3+0x1c2>
    87ac:	e716      	b.n	85dc <__divsi3>
    87ae:	4770      	bx	lr

000087b0 <__aeabi_idiv0>:
    87b0:	4770      	bx	lr
    87b2:	46c0      	nop			; (mov r8, r8)

000087b4 <__aeabi_cdrcmple>:
    87b4:	4684      	mov	ip, r0
    87b6:	1c10      	adds	r0, r2, #0
    87b8:	4662      	mov	r2, ip
    87ba:	468c      	mov	ip, r1
    87bc:	1c19      	adds	r1, r3, #0
    87be:	4663      	mov	r3, ip
    87c0:	e000      	b.n	87c4 <__aeabi_cdcmpeq>
    87c2:	46c0      	nop			; (mov r8, r8)

000087c4 <__aeabi_cdcmpeq>:
    87c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    87c6:	f001 fe79 	bl	a4bc <__ledf2>
    87ca:	2800      	cmp	r0, #0
    87cc:	d401      	bmi.n	87d2 <__aeabi_cdcmpeq+0xe>
    87ce:	2100      	movs	r1, #0
    87d0:	42c8      	cmn	r0, r1
    87d2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000087d4 <__aeabi_dcmpeq>:
    87d4:	b510      	push	{r4, lr}
    87d6:	f001 fdd3 	bl	a380 <__eqdf2>
    87da:	4240      	negs	r0, r0
    87dc:	3001      	adds	r0, #1
    87de:	bd10      	pop	{r4, pc}

000087e0 <__aeabi_dcmplt>:
    87e0:	b510      	push	{r4, lr}
    87e2:	f001 fe6b 	bl	a4bc <__ledf2>
    87e6:	2800      	cmp	r0, #0
    87e8:	db01      	blt.n	87ee <__aeabi_dcmplt+0xe>
    87ea:	2000      	movs	r0, #0
    87ec:	bd10      	pop	{r4, pc}
    87ee:	2001      	movs	r0, #1
    87f0:	bd10      	pop	{r4, pc}
    87f2:	46c0      	nop			; (mov r8, r8)

000087f4 <__aeabi_dcmple>:
    87f4:	b510      	push	{r4, lr}
    87f6:	f001 fe61 	bl	a4bc <__ledf2>
    87fa:	2800      	cmp	r0, #0
    87fc:	dd01      	ble.n	8802 <__aeabi_dcmple+0xe>
    87fe:	2000      	movs	r0, #0
    8800:	bd10      	pop	{r4, pc}
    8802:	2001      	movs	r0, #1
    8804:	bd10      	pop	{r4, pc}
    8806:	46c0      	nop			; (mov r8, r8)

00008808 <__aeabi_dcmpgt>:
    8808:	b510      	push	{r4, lr}
    880a:	f001 fdf3 	bl	a3f4 <__gedf2>
    880e:	2800      	cmp	r0, #0
    8810:	dc01      	bgt.n	8816 <__aeabi_dcmpgt+0xe>
    8812:	2000      	movs	r0, #0
    8814:	bd10      	pop	{r4, pc}
    8816:	2001      	movs	r0, #1
    8818:	bd10      	pop	{r4, pc}
    881a:	46c0      	nop			; (mov r8, r8)

0000881c <__aeabi_dcmpge>:
    881c:	b510      	push	{r4, lr}
    881e:	f001 fde9 	bl	a3f4 <__gedf2>
    8822:	2800      	cmp	r0, #0
    8824:	da01      	bge.n	882a <__aeabi_dcmpge+0xe>
    8826:	2000      	movs	r0, #0
    8828:	bd10      	pop	{r4, pc}
    882a:	2001      	movs	r0, #1
    882c:	bd10      	pop	{r4, pc}
    882e:	46c0      	nop			; (mov r8, r8)

00008830 <__aeabi_cfrcmple>:
    8830:	4684      	mov	ip, r0
    8832:	1c08      	adds	r0, r1, #0
    8834:	4661      	mov	r1, ip
    8836:	e7ff      	b.n	8838 <__aeabi_cfcmpeq>

00008838 <__aeabi_cfcmpeq>:
    8838:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    883a:	f000 fba9 	bl	8f90 <__lesf2>
    883e:	2800      	cmp	r0, #0
    8840:	d401      	bmi.n	8846 <__aeabi_cfcmpeq+0xe>
    8842:	2100      	movs	r1, #0
    8844:	42c8      	cmn	r0, r1
    8846:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00008848 <__aeabi_fcmpeq>:
    8848:	b510      	push	{r4, lr}
    884a:	f000 fb3b 	bl	8ec4 <__eqsf2>
    884e:	4240      	negs	r0, r0
    8850:	3001      	adds	r0, #1
    8852:	bd10      	pop	{r4, pc}

00008854 <__aeabi_fcmplt>:
    8854:	b510      	push	{r4, lr}
    8856:	f000 fb9b 	bl	8f90 <__lesf2>
    885a:	2800      	cmp	r0, #0
    885c:	db01      	blt.n	8862 <__aeabi_fcmplt+0xe>
    885e:	2000      	movs	r0, #0
    8860:	bd10      	pop	{r4, pc}
    8862:	2001      	movs	r0, #1
    8864:	bd10      	pop	{r4, pc}
    8866:	46c0      	nop			; (mov r8, r8)

00008868 <__aeabi_fcmple>:
    8868:	b510      	push	{r4, lr}
    886a:	f000 fb91 	bl	8f90 <__lesf2>
    886e:	2800      	cmp	r0, #0
    8870:	dd01      	ble.n	8876 <__aeabi_fcmple+0xe>
    8872:	2000      	movs	r0, #0
    8874:	bd10      	pop	{r4, pc}
    8876:	2001      	movs	r0, #1
    8878:	bd10      	pop	{r4, pc}
    887a:	46c0      	nop			; (mov r8, r8)

0000887c <__aeabi_fcmpgt>:
    887c:	b510      	push	{r4, lr}
    887e:	f000 fb47 	bl	8f10 <__gesf2>
    8882:	2800      	cmp	r0, #0
    8884:	dc01      	bgt.n	888a <__aeabi_fcmpgt+0xe>
    8886:	2000      	movs	r0, #0
    8888:	bd10      	pop	{r4, pc}
    888a:	2001      	movs	r0, #1
    888c:	bd10      	pop	{r4, pc}
    888e:	46c0      	nop			; (mov r8, r8)

00008890 <__aeabi_fcmpge>:
    8890:	b510      	push	{r4, lr}
    8892:	f000 fb3d 	bl	8f10 <__gesf2>
    8896:	2800      	cmp	r0, #0
    8898:	da01      	bge.n	889e <__aeabi_fcmpge+0xe>
    889a:	2000      	movs	r0, #0
    889c:	bd10      	pop	{r4, pc}
    889e:	2001      	movs	r0, #1
    88a0:	bd10      	pop	{r4, pc}
    88a2:	46c0      	nop			; (mov r8, r8)

000088a4 <__aeabi_f2uiz>:
    88a4:	219e      	movs	r1, #158	; 0x9e
    88a6:	b510      	push	{r4, lr}
    88a8:	05c9      	lsls	r1, r1, #23
    88aa:	1c04      	adds	r4, r0, #0
    88ac:	f7ff fff0 	bl	8890 <__aeabi_fcmpge>
    88b0:	2800      	cmp	r0, #0
    88b2:	d103      	bne.n	88bc <__aeabi_f2uiz+0x18>
    88b4:	1c20      	adds	r0, r4, #0
    88b6:	f000 fe69 	bl	958c <__aeabi_f2iz>
    88ba:	bd10      	pop	{r4, pc}
    88bc:	219e      	movs	r1, #158	; 0x9e
    88be:	1c20      	adds	r0, r4, #0
    88c0:	05c9      	lsls	r1, r1, #23
    88c2:	f000 fcc7 	bl	9254 <__aeabi_fsub>
    88c6:	f000 fe61 	bl	958c <__aeabi_f2iz>
    88ca:	2380      	movs	r3, #128	; 0x80
    88cc:	061b      	lsls	r3, r3, #24
    88ce:	469c      	mov	ip, r3
    88d0:	4460      	add	r0, ip
    88d2:	e7f2      	b.n	88ba <__aeabi_f2uiz+0x16>

000088d4 <__aeabi_d2uiz>:
    88d4:	b570      	push	{r4, r5, r6, lr}
    88d6:	2200      	movs	r2, #0
    88d8:	4b0c      	ldr	r3, [pc, #48]	; (890c <__aeabi_d2uiz+0x38>)
    88da:	0004      	movs	r4, r0
    88dc:	000d      	movs	r5, r1
    88de:	f7ff ff9d 	bl	881c <__aeabi_dcmpge>
    88e2:	2800      	cmp	r0, #0
    88e4:	d104      	bne.n	88f0 <__aeabi_d2uiz+0x1c>
    88e6:	0020      	movs	r0, r4
    88e8:	0029      	movs	r1, r5
    88ea:	f002 fbff 	bl	b0ec <__aeabi_d2iz>
    88ee:	bd70      	pop	{r4, r5, r6, pc}
    88f0:	4b06      	ldr	r3, [pc, #24]	; (890c <__aeabi_d2uiz+0x38>)
    88f2:	2200      	movs	r2, #0
    88f4:	0020      	movs	r0, r4
    88f6:	0029      	movs	r1, r5
    88f8:	f002 f8c2 	bl	aa80 <__aeabi_dsub>
    88fc:	f002 fbf6 	bl	b0ec <__aeabi_d2iz>
    8900:	2380      	movs	r3, #128	; 0x80
    8902:	061b      	lsls	r3, r3, #24
    8904:	469c      	mov	ip, r3
    8906:	4460      	add	r0, ip
    8908:	e7f1      	b.n	88ee <__aeabi_d2uiz+0x1a>
    890a:	46c0      	nop			; (mov r8, r8)
    890c:	41e00000 	.word	0x41e00000

00008910 <__aeabi_fadd>:
    8910:	b5f0      	push	{r4, r5, r6, r7, lr}
    8912:	46c6      	mov	lr, r8
    8914:	024e      	lsls	r6, r1, #9
    8916:	0247      	lsls	r7, r0, #9
    8918:	0a76      	lsrs	r6, r6, #9
    891a:	0a7b      	lsrs	r3, r7, #9
    891c:	0044      	lsls	r4, r0, #1
    891e:	0fc5      	lsrs	r5, r0, #31
    8920:	00f7      	lsls	r7, r6, #3
    8922:	0048      	lsls	r0, r1, #1
    8924:	4698      	mov	r8, r3
    8926:	b500      	push	{lr}
    8928:	0e24      	lsrs	r4, r4, #24
    892a:	002a      	movs	r2, r5
    892c:	00db      	lsls	r3, r3, #3
    892e:	0e00      	lsrs	r0, r0, #24
    8930:	0fc9      	lsrs	r1, r1, #31
    8932:	46bc      	mov	ip, r7
    8934:	428d      	cmp	r5, r1
    8936:	d067      	beq.n	8a08 <__aeabi_fadd+0xf8>
    8938:	1a22      	subs	r2, r4, r0
    893a:	2a00      	cmp	r2, #0
    893c:	dc00      	bgt.n	8940 <__aeabi_fadd+0x30>
    893e:	e0a5      	b.n	8a8c <__aeabi_fadd+0x17c>
    8940:	2800      	cmp	r0, #0
    8942:	d13a      	bne.n	89ba <__aeabi_fadd+0xaa>
    8944:	2f00      	cmp	r7, #0
    8946:	d100      	bne.n	894a <__aeabi_fadd+0x3a>
    8948:	e093      	b.n	8a72 <__aeabi_fadd+0x162>
    894a:	1e51      	subs	r1, r2, #1
    894c:	2900      	cmp	r1, #0
    894e:	d000      	beq.n	8952 <__aeabi_fadd+0x42>
    8950:	e0bc      	b.n	8acc <__aeabi_fadd+0x1bc>
    8952:	2401      	movs	r4, #1
    8954:	1bdb      	subs	r3, r3, r7
    8956:	015a      	lsls	r2, r3, #5
    8958:	d546      	bpl.n	89e8 <__aeabi_fadd+0xd8>
    895a:	019b      	lsls	r3, r3, #6
    895c:	099e      	lsrs	r6, r3, #6
    895e:	0030      	movs	r0, r6
    8960:	f002 fd4e 	bl	b400 <__clzsi2>
    8964:	3805      	subs	r0, #5
    8966:	4086      	lsls	r6, r0
    8968:	4284      	cmp	r4, r0
    896a:	dd00      	ble.n	896e <__aeabi_fadd+0x5e>
    896c:	e09d      	b.n	8aaa <__aeabi_fadd+0x19a>
    896e:	1b04      	subs	r4, r0, r4
    8970:	0032      	movs	r2, r6
    8972:	2020      	movs	r0, #32
    8974:	3401      	adds	r4, #1
    8976:	40e2      	lsrs	r2, r4
    8978:	1b04      	subs	r4, r0, r4
    897a:	40a6      	lsls	r6, r4
    897c:	0033      	movs	r3, r6
    897e:	1e5e      	subs	r6, r3, #1
    8980:	41b3      	sbcs	r3, r6
    8982:	2400      	movs	r4, #0
    8984:	4313      	orrs	r3, r2
    8986:	075a      	lsls	r2, r3, #29
    8988:	d004      	beq.n	8994 <__aeabi_fadd+0x84>
    898a:	220f      	movs	r2, #15
    898c:	401a      	ands	r2, r3
    898e:	2a04      	cmp	r2, #4
    8990:	d000      	beq.n	8994 <__aeabi_fadd+0x84>
    8992:	3304      	adds	r3, #4
    8994:	015a      	lsls	r2, r3, #5
    8996:	d529      	bpl.n	89ec <__aeabi_fadd+0xdc>
    8998:	3401      	adds	r4, #1
    899a:	2cff      	cmp	r4, #255	; 0xff
    899c:	d100      	bne.n	89a0 <__aeabi_fadd+0x90>
    899e:	e081      	b.n	8aa4 <__aeabi_fadd+0x194>
    89a0:	002a      	movs	r2, r5
    89a2:	019b      	lsls	r3, r3, #6
    89a4:	0a5b      	lsrs	r3, r3, #9
    89a6:	b2e4      	uxtb	r4, r4
    89a8:	025b      	lsls	r3, r3, #9
    89aa:	05e4      	lsls	r4, r4, #23
    89ac:	0a58      	lsrs	r0, r3, #9
    89ae:	07d2      	lsls	r2, r2, #31
    89b0:	4320      	orrs	r0, r4
    89b2:	4310      	orrs	r0, r2
    89b4:	bc04      	pop	{r2}
    89b6:	4690      	mov	r8, r2
    89b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    89ba:	2cff      	cmp	r4, #255	; 0xff
    89bc:	d0e3      	beq.n	8986 <__aeabi_fadd+0x76>
    89be:	2180      	movs	r1, #128	; 0x80
    89c0:	0038      	movs	r0, r7
    89c2:	04c9      	lsls	r1, r1, #19
    89c4:	4308      	orrs	r0, r1
    89c6:	4684      	mov	ip, r0
    89c8:	2a1b      	cmp	r2, #27
    89ca:	dd00      	ble.n	89ce <__aeabi_fadd+0xbe>
    89cc:	e082      	b.n	8ad4 <__aeabi_fadd+0x1c4>
    89ce:	2020      	movs	r0, #32
    89d0:	4661      	mov	r1, ip
    89d2:	40d1      	lsrs	r1, r2
    89d4:	1a82      	subs	r2, r0, r2
    89d6:	4660      	mov	r0, ip
    89d8:	4090      	lsls	r0, r2
    89da:	0002      	movs	r2, r0
    89dc:	1e50      	subs	r0, r2, #1
    89de:	4182      	sbcs	r2, r0
    89e0:	430a      	orrs	r2, r1
    89e2:	1a9b      	subs	r3, r3, r2
    89e4:	015a      	lsls	r2, r3, #5
    89e6:	d4b8      	bmi.n	895a <__aeabi_fadd+0x4a>
    89e8:	075a      	lsls	r2, r3, #29
    89ea:	d1ce      	bne.n	898a <__aeabi_fadd+0x7a>
    89ec:	08de      	lsrs	r6, r3, #3
    89ee:	002a      	movs	r2, r5
    89f0:	2cff      	cmp	r4, #255	; 0xff
    89f2:	d13a      	bne.n	8a6a <__aeabi_fadd+0x15a>
    89f4:	2e00      	cmp	r6, #0
    89f6:	d100      	bne.n	89fa <__aeabi_fadd+0xea>
    89f8:	e0ae      	b.n	8b58 <__aeabi_fadd+0x248>
    89fa:	2380      	movs	r3, #128	; 0x80
    89fc:	03db      	lsls	r3, r3, #15
    89fe:	4333      	orrs	r3, r6
    8a00:	025b      	lsls	r3, r3, #9
    8a02:	0a5b      	lsrs	r3, r3, #9
    8a04:	24ff      	movs	r4, #255	; 0xff
    8a06:	e7cf      	b.n	89a8 <__aeabi_fadd+0x98>
    8a08:	1a21      	subs	r1, r4, r0
    8a0a:	2900      	cmp	r1, #0
    8a0c:	dd52      	ble.n	8ab4 <__aeabi_fadd+0x1a4>
    8a0e:	2800      	cmp	r0, #0
    8a10:	d031      	beq.n	8a76 <__aeabi_fadd+0x166>
    8a12:	2cff      	cmp	r4, #255	; 0xff
    8a14:	d0b7      	beq.n	8986 <__aeabi_fadd+0x76>
    8a16:	2080      	movs	r0, #128	; 0x80
    8a18:	003e      	movs	r6, r7
    8a1a:	04c0      	lsls	r0, r0, #19
    8a1c:	4306      	orrs	r6, r0
    8a1e:	46b4      	mov	ip, r6
    8a20:	291b      	cmp	r1, #27
    8a22:	dd00      	ble.n	8a26 <__aeabi_fadd+0x116>
    8a24:	e0aa      	b.n	8b7c <__aeabi_fadd+0x26c>
    8a26:	2620      	movs	r6, #32
    8a28:	4660      	mov	r0, ip
    8a2a:	40c8      	lsrs	r0, r1
    8a2c:	1a71      	subs	r1, r6, r1
    8a2e:	4666      	mov	r6, ip
    8a30:	408e      	lsls	r6, r1
    8a32:	0031      	movs	r1, r6
    8a34:	1e4e      	subs	r6, r1, #1
    8a36:	41b1      	sbcs	r1, r6
    8a38:	4301      	orrs	r1, r0
    8a3a:	185b      	adds	r3, r3, r1
    8a3c:	0159      	lsls	r1, r3, #5
    8a3e:	d5d3      	bpl.n	89e8 <__aeabi_fadd+0xd8>
    8a40:	3401      	adds	r4, #1
    8a42:	2cff      	cmp	r4, #255	; 0xff
    8a44:	d100      	bne.n	8a48 <__aeabi_fadd+0x138>
    8a46:	e087      	b.n	8b58 <__aeabi_fadd+0x248>
    8a48:	2201      	movs	r2, #1
    8a4a:	4978      	ldr	r1, [pc, #480]	; (8c2c <__aeabi_fadd+0x31c>)
    8a4c:	401a      	ands	r2, r3
    8a4e:	085b      	lsrs	r3, r3, #1
    8a50:	400b      	ands	r3, r1
    8a52:	4313      	orrs	r3, r2
    8a54:	e797      	b.n	8986 <__aeabi_fadd+0x76>
    8a56:	2c00      	cmp	r4, #0
    8a58:	d000      	beq.n	8a5c <__aeabi_fadd+0x14c>
    8a5a:	e0a7      	b.n	8bac <__aeabi_fadd+0x29c>
    8a5c:	2b00      	cmp	r3, #0
    8a5e:	d000      	beq.n	8a62 <__aeabi_fadd+0x152>
    8a60:	e0b6      	b.n	8bd0 <__aeabi_fadd+0x2c0>
    8a62:	1e3b      	subs	r3, r7, #0
    8a64:	d162      	bne.n	8b2c <__aeabi_fadd+0x21c>
    8a66:	2600      	movs	r6, #0
    8a68:	2200      	movs	r2, #0
    8a6a:	0273      	lsls	r3, r6, #9
    8a6c:	0a5b      	lsrs	r3, r3, #9
    8a6e:	b2e4      	uxtb	r4, r4
    8a70:	e79a      	b.n	89a8 <__aeabi_fadd+0x98>
    8a72:	0014      	movs	r4, r2
    8a74:	e787      	b.n	8986 <__aeabi_fadd+0x76>
    8a76:	2f00      	cmp	r7, #0
    8a78:	d04d      	beq.n	8b16 <__aeabi_fadd+0x206>
    8a7a:	1e48      	subs	r0, r1, #1
    8a7c:	2800      	cmp	r0, #0
    8a7e:	d157      	bne.n	8b30 <__aeabi_fadd+0x220>
    8a80:	4463      	add	r3, ip
    8a82:	2401      	movs	r4, #1
    8a84:	015a      	lsls	r2, r3, #5
    8a86:	d5af      	bpl.n	89e8 <__aeabi_fadd+0xd8>
    8a88:	2402      	movs	r4, #2
    8a8a:	e7dd      	b.n	8a48 <__aeabi_fadd+0x138>
    8a8c:	2a00      	cmp	r2, #0
    8a8e:	d124      	bne.n	8ada <__aeabi_fadd+0x1ca>
    8a90:	1c62      	adds	r2, r4, #1
    8a92:	b2d2      	uxtb	r2, r2
    8a94:	2a01      	cmp	r2, #1
    8a96:	ddde      	ble.n	8a56 <__aeabi_fadd+0x146>
    8a98:	1bde      	subs	r6, r3, r7
    8a9a:	0172      	lsls	r2, r6, #5
    8a9c:	d535      	bpl.n	8b0a <__aeabi_fadd+0x1fa>
    8a9e:	1afe      	subs	r6, r7, r3
    8aa0:	000d      	movs	r5, r1
    8aa2:	e75c      	b.n	895e <__aeabi_fadd+0x4e>
    8aa4:	002a      	movs	r2, r5
    8aa6:	2300      	movs	r3, #0
    8aa8:	e77e      	b.n	89a8 <__aeabi_fadd+0x98>
    8aaa:	0033      	movs	r3, r6
    8aac:	4a60      	ldr	r2, [pc, #384]	; (8c30 <__aeabi_fadd+0x320>)
    8aae:	1a24      	subs	r4, r4, r0
    8ab0:	4013      	ands	r3, r2
    8ab2:	e768      	b.n	8986 <__aeabi_fadd+0x76>
    8ab4:	2900      	cmp	r1, #0
    8ab6:	d163      	bne.n	8b80 <__aeabi_fadd+0x270>
    8ab8:	1c61      	adds	r1, r4, #1
    8aba:	b2c8      	uxtb	r0, r1
    8abc:	2801      	cmp	r0, #1
    8abe:	dd4e      	ble.n	8b5e <__aeabi_fadd+0x24e>
    8ac0:	29ff      	cmp	r1, #255	; 0xff
    8ac2:	d049      	beq.n	8b58 <__aeabi_fadd+0x248>
    8ac4:	4463      	add	r3, ip
    8ac6:	085b      	lsrs	r3, r3, #1
    8ac8:	000c      	movs	r4, r1
    8aca:	e75c      	b.n	8986 <__aeabi_fadd+0x76>
    8acc:	2aff      	cmp	r2, #255	; 0xff
    8ace:	d041      	beq.n	8b54 <__aeabi_fadd+0x244>
    8ad0:	000a      	movs	r2, r1
    8ad2:	e779      	b.n	89c8 <__aeabi_fadd+0xb8>
    8ad4:	2201      	movs	r2, #1
    8ad6:	1a9b      	subs	r3, r3, r2
    8ad8:	e784      	b.n	89e4 <__aeabi_fadd+0xd4>
    8ada:	2c00      	cmp	r4, #0
    8adc:	d01d      	beq.n	8b1a <__aeabi_fadd+0x20a>
    8ade:	28ff      	cmp	r0, #255	; 0xff
    8ae0:	d022      	beq.n	8b28 <__aeabi_fadd+0x218>
    8ae2:	2480      	movs	r4, #128	; 0x80
    8ae4:	04e4      	lsls	r4, r4, #19
    8ae6:	4252      	negs	r2, r2
    8ae8:	4323      	orrs	r3, r4
    8aea:	2a1b      	cmp	r2, #27
    8aec:	dd00      	ble.n	8af0 <__aeabi_fadd+0x1e0>
    8aee:	e08a      	b.n	8c06 <__aeabi_fadd+0x2f6>
    8af0:	001c      	movs	r4, r3
    8af2:	2520      	movs	r5, #32
    8af4:	40d4      	lsrs	r4, r2
    8af6:	1aaa      	subs	r2, r5, r2
    8af8:	4093      	lsls	r3, r2
    8afa:	1e5a      	subs	r2, r3, #1
    8afc:	4193      	sbcs	r3, r2
    8afe:	4323      	orrs	r3, r4
    8b00:	4662      	mov	r2, ip
    8b02:	0004      	movs	r4, r0
    8b04:	1ad3      	subs	r3, r2, r3
    8b06:	000d      	movs	r5, r1
    8b08:	e725      	b.n	8956 <__aeabi_fadd+0x46>
    8b0a:	2e00      	cmp	r6, #0
    8b0c:	d000      	beq.n	8b10 <__aeabi_fadd+0x200>
    8b0e:	e726      	b.n	895e <__aeabi_fadd+0x4e>
    8b10:	2200      	movs	r2, #0
    8b12:	2400      	movs	r4, #0
    8b14:	e7a9      	b.n	8a6a <__aeabi_fadd+0x15a>
    8b16:	000c      	movs	r4, r1
    8b18:	e735      	b.n	8986 <__aeabi_fadd+0x76>
    8b1a:	2b00      	cmp	r3, #0
    8b1c:	d04d      	beq.n	8bba <__aeabi_fadd+0x2aa>
    8b1e:	43d2      	mvns	r2, r2
    8b20:	2a00      	cmp	r2, #0
    8b22:	d0ed      	beq.n	8b00 <__aeabi_fadd+0x1f0>
    8b24:	28ff      	cmp	r0, #255	; 0xff
    8b26:	d1e0      	bne.n	8aea <__aeabi_fadd+0x1da>
    8b28:	4663      	mov	r3, ip
    8b2a:	24ff      	movs	r4, #255	; 0xff
    8b2c:	000d      	movs	r5, r1
    8b2e:	e72a      	b.n	8986 <__aeabi_fadd+0x76>
    8b30:	29ff      	cmp	r1, #255	; 0xff
    8b32:	d00f      	beq.n	8b54 <__aeabi_fadd+0x244>
    8b34:	0001      	movs	r1, r0
    8b36:	e773      	b.n	8a20 <__aeabi_fadd+0x110>
    8b38:	2b00      	cmp	r3, #0
    8b3a:	d061      	beq.n	8c00 <__aeabi_fadd+0x2f0>
    8b3c:	24ff      	movs	r4, #255	; 0xff
    8b3e:	2f00      	cmp	r7, #0
    8b40:	d100      	bne.n	8b44 <__aeabi_fadd+0x234>
    8b42:	e720      	b.n	8986 <__aeabi_fadd+0x76>
    8b44:	2280      	movs	r2, #128	; 0x80
    8b46:	4641      	mov	r1, r8
    8b48:	03d2      	lsls	r2, r2, #15
    8b4a:	4211      	tst	r1, r2
    8b4c:	d002      	beq.n	8b54 <__aeabi_fadd+0x244>
    8b4e:	4216      	tst	r6, r2
    8b50:	d100      	bne.n	8b54 <__aeabi_fadd+0x244>
    8b52:	003b      	movs	r3, r7
    8b54:	24ff      	movs	r4, #255	; 0xff
    8b56:	e716      	b.n	8986 <__aeabi_fadd+0x76>
    8b58:	24ff      	movs	r4, #255	; 0xff
    8b5a:	2300      	movs	r3, #0
    8b5c:	e724      	b.n	89a8 <__aeabi_fadd+0x98>
    8b5e:	2c00      	cmp	r4, #0
    8b60:	d1ea      	bne.n	8b38 <__aeabi_fadd+0x228>
    8b62:	2b00      	cmp	r3, #0
    8b64:	d058      	beq.n	8c18 <__aeabi_fadd+0x308>
    8b66:	2f00      	cmp	r7, #0
    8b68:	d100      	bne.n	8b6c <__aeabi_fadd+0x25c>
    8b6a:	e70c      	b.n	8986 <__aeabi_fadd+0x76>
    8b6c:	4463      	add	r3, ip
    8b6e:	015a      	lsls	r2, r3, #5
    8b70:	d400      	bmi.n	8b74 <__aeabi_fadd+0x264>
    8b72:	e739      	b.n	89e8 <__aeabi_fadd+0xd8>
    8b74:	4a2e      	ldr	r2, [pc, #184]	; (8c30 <__aeabi_fadd+0x320>)
    8b76:	000c      	movs	r4, r1
    8b78:	4013      	ands	r3, r2
    8b7a:	e704      	b.n	8986 <__aeabi_fadd+0x76>
    8b7c:	2101      	movs	r1, #1
    8b7e:	e75c      	b.n	8a3a <__aeabi_fadd+0x12a>
    8b80:	2c00      	cmp	r4, #0
    8b82:	d11e      	bne.n	8bc2 <__aeabi_fadd+0x2b2>
    8b84:	2b00      	cmp	r3, #0
    8b86:	d040      	beq.n	8c0a <__aeabi_fadd+0x2fa>
    8b88:	43c9      	mvns	r1, r1
    8b8a:	2900      	cmp	r1, #0
    8b8c:	d00b      	beq.n	8ba6 <__aeabi_fadd+0x296>
    8b8e:	28ff      	cmp	r0, #255	; 0xff
    8b90:	d036      	beq.n	8c00 <__aeabi_fadd+0x2f0>
    8b92:	291b      	cmp	r1, #27
    8b94:	dc47      	bgt.n	8c26 <__aeabi_fadd+0x316>
    8b96:	001c      	movs	r4, r3
    8b98:	2620      	movs	r6, #32
    8b9a:	40cc      	lsrs	r4, r1
    8b9c:	1a71      	subs	r1, r6, r1
    8b9e:	408b      	lsls	r3, r1
    8ba0:	1e59      	subs	r1, r3, #1
    8ba2:	418b      	sbcs	r3, r1
    8ba4:	4323      	orrs	r3, r4
    8ba6:	4463      	add	r3, ip
    8ba8:	0004      	movs	r4, r0
    8baa:	e747      	b.n	8a3c <__aeabi_fadd+0x12c>
    8bac:	2b00      	cmp	r3, #0
    8bae:	d118      	bne.n	8be2 <__aeabi_fadd+0x2d2>
    8bb0:	1e3b      	subs	r3, r7, #0
    8bb2:	d02d      	beq.n	8c10 <__aeabi_fadd+0x300>
    8bb4:	000d      	movs	r5, r1
    8bb6:	24ff      	movs	r4, #255	; 0xff
    8bb8:	e6e5      	b.n	8986 <__aeabi_fadd+0x76>
    8bba:	003b      	movs	r3, r7
    8bbc:	0004      	movs	r4, r0
    8bbe:	000d      	movs	r5, r1
    8bc0:	e6e1      	b.n	8986 <__aeabi_fadd+0x76>
    8bc2:	28ff      	cmp	r0, #255	; 0xff
    8bc4:	d01c      	beq.n	8c00 <__aeabi_fadd+0x2f0>
    8bc6:	2480      	movs	r4, #128	; 0x80
    8bc8:	04e4      	lsls	r4, r4, #19
    8bca:	4249      	negs	r1, r1
    8bcc:	4323      	orrs	r3, r4
    8bce:	e7e0      	b.n	8b92 <__aeabi_fadd+0x282>
    8bd0:	2f00      	cmp	r7, #0
    8bd2:	d100      	bne.n	8bd6 <__aeabi_fadd+0x2c6>
    8bd4:	e6d7      	b.n	8986 <__aeabi_fadd+0x76>
    8bd6:	1bde      	subs	r6, r3, r7
    8bd8:	0172      	lsls	r2, r6, #5
    8bda:	d51f      	bpl.n	8c1c <__aeabi_fadd+0x30c>
    8bdc:	1afb      	subs	r3, r7, r3
    8bde:	000d      	movs	r5, r1
    8be0:	e6d1      	b.n	8986 <__aeabi_fadd+0x76>
    8be2:	24ff      	movs	r4, #255	; 0xff
    8be4:	2f00      	cmp	r7, #0
    8be6:	d100      	bne.n	8bea <__aeabi_fadd+0x2da>
    8be8:	e6cd      	b.n	8986 <__aeabi_fadd+0x76>
    8bea:	2280      	movs	r2, #128	; 0x80
    8bec:	4640      	mov	r0, r8
    8bee:	03d2      	lsls	r2, r2, #15
    8bf0:	4210      	tst	r0, r2
    8bf2:	d0af      	beq.n	8b54 <__aeabi_fadd+0x244>
    8bf4:	4216      	tst	r6, r2
    8bf6:	d1ad      	bne.n	8b54 <__aeabi_fadd+0x244>
    8bf8:	003b      	movs	r3, r7
    8bfa:	000d      	movs	r5, r1
    8bfc:	24ff      	movs	r4, #255	; 0xff
    8bfe:	e6c2      	b.n	8986 <__aeabi_fadd+0x76>
    8c00:	4663      	mov	r3, ip
    8c02:	24ff      	movs	r4, #255	; 0xff
    8c04:	e6bf      	b.n	8986 <__aeabi_fadd+0x76>
    8c06:	2301      	movs	r3, #1
    8c08:	e77a      	b.n	8b00 <__aeabi_fadd+0x1f0>
    8c0a:	003b      	movs	r3, r7
    8c0c:	0004      	movs	r4, r0
    8c0e:	e6ba      	b.n	8986 <__aeabi_fadd+0x76>
    8c10:	2680      	movs	r6, #128	; 0x80
    8c12:	2200      	movs	r2, #0
    8c14:	03f6      	lsls	r6, r6, #15
    8c16:	e6f0      	b.n	89fa <__aeabi_fadd+0xea>
    8c18:	003b      	movs	r3, r7
    8c1a:	e6b4      	b.n	8986 <__aeabi_fadd+0x76>
    8c1c:	1e33      	subs	r3, r6, #0
    8c1e:	d000      	beq.n	8c22 <__aeabi_fadd+0x312>
    8c20:	e6e2      	b.n	89e8 <__aeabi_fadd+0xd8>
    8c22:	2200      	movs	r2, #0
    8c24:	e721      	b.n	8a6a <__aeabi_fadd+0x15a>
    8c26:	2301      	movs	r3, #1
    8c28:	e7bd      	b.n	8ba6 <__aeabi_fadd+0x296>
    8c2a:	46c0      	nop			; (mov r8, r8)
    8c2c:	7dffffff 	.word	0x7dffffff
    8c30:	fbffffff 	.word	0xfbffffff

00008c34 <__aeabi_fdiv>:
    8c34:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c36:	4657      	mov	r7, sl
    8c38:	464e      	mov	r6, r9
    8c3a:	46de      	mov	lr, fp
    8c3c:	4645      	mov	r5, r8
    8c3e:	b5e0      	push	{r5, r6, r7, lr}
    8c40:	0244      	lsls	r4, r0, #9
    8c42:	0043      	lsls	r3, r0, #1
    8c44:	0fc6      	lsrs	r6, r0, #31
    8c46:	b083      	sub	sp, #12
    8c48:	1c0f      	adds	r7, r1, #0
    8c4a:	0a64      	lsrs	r4, r4, #9
    8c4c:	0e1b      	lsrs	r3, r3, #24
    8c4e:	46b2      	mov	sl, r6
    8c50:	d053      	beq.n	8cfa <__aeabi_fdiv+0xc6>
    8c52:	2bff      	cmp	r3, #255	; 0xff
    8c54:	d027      	beq.n	8ca6 <__aeabi_fdiv+0x72>
    8c56:	2280      	movs	r2, #128	; 0x80
    8c58:	00e4      	lsls	r4, r4, #3
    8c5a:	04d2      	lsls	r2, r2, #19
    8c5c:	4314      	orrs	r4, r2
    8c5e:	227f      	movs	r2, #127	; 0x7f
    8c60:	4252      	negs	r2, r2
    8c62:	4690      	mov	r8, r2
    8c64:	4498      	add	r8, r3
    8c66:	2300      	movs	r3, #0
    8c68:	4699      	mov	r9, r3
    8c6a:	469b      	mov	fp, r3
    8c6c:	027d      	lsls	r5, r7, #9
    8c6e:	0078      	lsls	r0, r7, #1
    8c70:	0ffb      	lsrs	r3, r7, #31
    8c72:	0a6d      	lsrs	r5, r5, #9
    8c74:	0e00      	lsrs	r0, r0, #24
    8c76:	9300      	str	r3, [sp, #0]
    8c78:	d024      	beq.n	8cc4 <__aeabi_fdiv+0x90>
    8c7a:	28ff      	cmp	r0, #255	; 0xff
    8c7c:	d046      	beq.n	8d0c <__aeabi_fdiv+0xd8>
    8c7e:	2380      	movs	r3, #128	; 0x80
    8c80:	2100      	movs	r1, #0
    8c82:	00ed      	lsls	r5, r5, #3
    8c84:	04db      	lsls	r3, r3, #19
    8c86:	431d      	orrs	r5, r3
    8c88:	387f      	subs	r0, #127	; 0x7f
    8c8a:	4647      	mov	r7, r8
    8c8c:	1a38      	subs	r0, r7, r0
    8c8e:	464f      	mov	r7, r9
    8c90:	430f      	orrs	r7, r1
    8c92:	00bf      	lsls	r7, r7, #2
    8c94:	46b9      	mov	r9, r7
    8c96:	0033      	movs	r3, r6
    8c98:	9a00      	ldr	r2, [sp, #0]
    8c9a:	4f87      	ldr	r7, [pc, #540]	; (8eb8 <__aeabi_fdiv+0x284>)
    8c9c:	4053      	eors	r3, r2
    8c9e:	464a      	mov	r2, r9
    8ca0:	58ba      	ldr	r2, [r7, r2]
    8ca2:	9301      	str	r3, [sp, #4]
    8ca4:	4697      	mov	pc, r2
    8ca6:	2c00      	cmp	r4, #0
    8ca8:	d14e      	bne.n	8d48 <__aeabi_fdiv+0x114>
    8caa:	2308      	movs	r3, #8
    8cac:	4699      	mov	r9, r3
    8cae:	33f7      	adds	r3, #247	; 0xf7
    8cb0:	4698      	mov	r8, r3
    8cb2:	3bfd      	subs	r3, #253	; 0xfd
    8cb4:	469b      	mov	fp, r3
    8cb6:	027d      	lsls	r5, r7, #9
    8cb8:	0078      	lsls	r0, r7, #1
    8cba:	0ffb      	lsrs	r3, r7, #31
    8cbc:	0a6d      	lsrs	r5, r5, #9
    8cbe:	0e00      	lsrs	r0, r0, #24
    8cc0:	9300      	str	r3, [sp, #0]
    8cc2:	d1da      	bne.n	8c7a <__aeabi_fdiv+0x46>
    8cc4:	2d00      	cmp	r5, #0
    8cc6:	d126      	bne.n	8d16 <__aeabi_fdiv+0xe2>
    8cc8:	2000      	movs	r0, #0
    8cca:	2101      	movs	r1, #1
    8ccc:	0033      	movs	r3, r6
    8cce:	9a00      	ldr	r2, [sp, #0]
    8cd0:	4f7a      	ldr	r7, [pc, #488]	; (8ebc <__aeabi_fdiv+0x288>)
    8cd2:	4053      	eors	r3, r2
    8cd4:	4642      	mov	r2, r8
    8cd6:	1a10      	subs	r0, r2, r0
    8cd8:	464a      	mov	r2, r9
    8cda:	430a      	orrs	r2, r1
    8cdc:	0092      	lsls	r2, r2, #2
    8cde:	58ba      	ldr	r2, [r7, r2]
    8ce0:	001d      	movs	r5, r3
    8ce2:	4697      	mov	pc, r2
    8ce4:	9b00      	ldr	r3, [sp, #0]
    8ce6:	002c      	movs	r4, r5
    8ce8:	469a      	mov	sl, r3
    8cea:	468b      	mov	fp, r1
    8cec:	465b      	mov	r3, fp
    8cee:	2b02      	cmp	r3, #2
    8cf0:	d131      	bne.n	8d56 <__aeabi_fdiv+0x122>
    8cf2:	4653      	mov	r3, sl
    8cf4:	21ff      	movs	r1, #255	; 0xff
    8cf6:	2400      	movs	r4, #0
    8cf8:	e038      	b.n	8d6c <__aeabi_fdiv+0x138>
    8cfa:	2c00      	cmp	r4, #0
    8cfc:	d117      	bne.n	8d2e <__aeabi_fdiv+0xfa>
    8cfe:	2304      	movs	r3, #4
    8d00:	4699      	mov	r9, r3
    8d02:	2300      	movs	r3, #0
    8d04:	4698      	mov	r8, r3
    8d06:	3301      	adds	r3, #1
    8d08:	469b      	mov	fp, r3
    8d0a:	e7af      	b.n	8c6c <__aeabi_fdiv+0x38>
    8d0c:	20ff      	movs	r0, #255	; 0xff
    8d0e:	2d00      	cmp	r5, #0
    8d10:	d10b      	bne.n	8d2a <__aeabi_fdiv+0xf6>
    8d12:	2102      	movs	r1, #2
    8d14:	e7da      	b.n	8ccc <__aeabi_fdiv+0x98>
    8d16:	0028      	movs	r0, r5
    8d18:	f002 fb72 	bl	b400 <__clzsi2>
    8d1c:	1f43      	subs	r3, r0, #5
    8d1e:	409d      	lsls	r5, r3
    8d20:	2376      	movs	r3, #118	; 0x76
    8d22:	425b      	negs	r3, r3
    8d24:	1a18      	subs	r0, r3, r0
    8d26:	2100      	movs	r1, #0
    8d28:	e7af      	b.n	8c8a <__aeabi_fdiv+0x56>
    8d2a:	2103      	movs	r1, #3
    8d2c:	e7ad      	b.n	8c8a <__aeabi_fdiv+0x56>
    8d2e:	0020      	movs	r0, r4
    8d30:	f002 fb66 	bl	b400 <__clzsi2>
    8d34:	1f43      	subs	r3, r0, #5
    8d36:	409c      	lsls	r4, r3
    8d38:	2376      	movs	r3, #118	; 0x76
    8d3a:	425b      	negs	r3, r3
    8d3c:	1a1b      	subs	r3, r3, r0
    8d3e:	4698      	mov	r8, r3
    8d40:	2300      	movs	r3, #0
    8d42:	4699      	mov	r9, r3
    8d44:	469b      	mov	fp, r3
    8d46:	e791      	b.n	8c6c <__aeabi_fdiv+0x38>
    8d48:	230c      	movs	r3, #12
    8d4a:	4699      	mov	r9, r3
    8d4c:	33f3      	adds	r3, #243	; 0xf3
    8d4e:	4698      	mov	r8, r3
    8d50:	3bfc      	subs	r3, #252	; 0xfc
    8d52:	469b      	mov	fp, r3
    8d54:	e78a      	b.n	8c6c <__aeabi_fdiv+0x38>
    8d56:	2b03      	cmp	r3, #3
    8d58:	d100      	bne.n	8d5c <__aeabi_fdiv+0x128>
    8d5a:	e0a5      	b.n	8ea8 <__aeabi_fdiv+0x274>
    8d5c:	4655      	mov	r5, sl
    8d5e:	2b01      	cmp	r3, #1
    8d60:	d000      	beq.n	8d64 <__aeabi_fdiv+0x130>
    8d62:	e081      	b.n	8e68 <__aeabi_fdiv+0x234>
    8d64:	2301      	movs	r3, #1
    8d66:	2100      	movs	r1, #0
    8d68:	2400      	movs	r4, #0
    8d6a:	402b      	ands	r3, r5
    8d6c:	0264      	lsls	r4, r4, #9
    8d6e:	05c9      	lsls	r1, r1, #23
    8d70:	0a60      	lsrs	r0, r4, #9
    8d72:	07db      	lsls	r3, r3, #31
    8d74:	4308      	orrs	r0, r1
    8d76:	4318      	orrs	r0, r3
    8d78:	b003      	add	sp, #12
    8d7a:	bc3c      	pop	{r2, r3, r4, r5}
    8d7c:	4690      	mov	r8, r2
    8d7e:	4699      	mov	r9, r3
    8d80:	46a2      	mov	sl, r4
    8d82:	46ab      	mov	fp, r5
    8d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8d86:	2480      	movs	r4, #128	; 0x80
    8d88:	2300      	movs	r3, #0
    8d8a:	03e4      	lsls	r4, r4, #15
    8d8c:	21ff      	movs	r1, #255	; 0xff
    8d8e:	e7ed      	b.n	8d6c <__aeabi_fdiv+0x138>
    8d90:	21ff      	movs	r1, #255	; 0xff
    8d92:	2400      	movs	r4, #0
    8d94:	e7ea      	b.n	8d6c <__aeabi_fdiv+0x138>
    8d96:	2301      	movs	r3, #1
    8d98:	1a59      	subs	r1, r3, r1
    8d9a:	291b      	cmp	r1, #27
    8d9c:	dd66      	ble.n	8e6c <__aeabi_fdiv+0x238>
    8d9e:	9a01      	ldr	r2, [sp, #4]
    8da0:	4013      	ands	r3, r2
    8da2:	2100      	movs	r1, #0
    8da4:	2400      	movs	r4, #0
    8da6:	e7e1      	b.n	8d6c <__aeabi_fdiv+0x138>
    8da8:	2380      	movs	r3, #128	; 0x80
    8daa:	03db      	lsls	r3, r3, #15
    8dac:	421c      	tst	r4, r3
    8dae:	d038      	beq.n	8e22 <__aeabi_fdiv+0x1ee>
    8db0:	421d      	tst	r5, r3
    8db2:	d051      	beq.n	8e58 <__aeabi_fdiv+0x224>
    8db4:	431c      	orrs	r4, r3
    8db6:	0264      	lsls	r4, r4, #9
    8db8:	0a64      	lsrs	r4, r4, #9
    8dba:	0033      	movs	r3, r6
    8dbc:	21ff      	movs	r1, #255	; 0xff
    8dbe:	e7d5      	b.n	8d6c <__aeabi_fdiv+0x138>
    8dc0:	0163      	lsls	r3, r4, #5
    8dc2:	016c      	lsls	r4, r5, #5
    8dc4:	42a3      	cmp	r3, r4
    8dc6:	d23b      	bcs.n	8e40 <__aeabi_fdiv+0x20c>
    8dc8:	261b      	movs	r6, #27
    8dca:	2100      	movs	r1, #0
    8dcc:	3801      	subs	r0, #1
    8dce:	2501      	movs	r5, #1
    8dd0:	001f      	movs	r7, r3
    8dd2:	0049      	lsls	r1, r1, #1
    8dd4:	005b      	lsls	r3, r3, #1
    8dd6:	2f00      	cmp	r7, #0
    8dd8:	db01      	blt.n	8dde <__aeabi_fdiv+0x1aa>
    8dda:	429c      	cmp	r4, r3
    8ddc:	d801      	bhi.n	8de2 <__aeabi_fdiv+0x1ae>
    8dde:	1b1b      	subs	r3, r3, r4
    8de0:	4329      	orrs	r1, r5
    8de2:	3e01      	subs	r6, #1
    8de4:	2e00      	cmp	r6, #0
    8de6:	d1f3      	bne.n	8dd0 <__aeabi_fdiv+0x19c>
    8de8:	001c      	movs	r4, r3
    8dea:	1e63      	subs	r3, r4, #1
    8dec:	419c      	sbcs	r4, r3
    8dee:	430c      	orrs	r4, r1
    8df0:	0001      	movs	r1, r0
    8df2:	317f      	adds	r1, #127	; 0x7f
    8df4:	2900      	cmp	r1, #0
    8df6:	ddce      	ble.n	8d96 <__aeabi_fdiv+0x162>
    8df8:	0763      	lsls	r3, r4, #29
    8dfa:	d004      	beq.n	8e06 <__aeabi_fdiv+0x1d2>
    8dfc:	230f      	movs	r3, #15
    8dfe:	4023      	ands	r3, r4
    8e00:	2b04      	cmp	r3, #4
    8e02:	d000      	beq.n	8e06 <__aeabi_fdiv+0x1d2>
    8e04:	3404      	adds	r4, #4
    8e06:	0123      	lsls	r3, r4, #4
    8e08:	d503      	bpl.n	8e12 <__aeabi_fdiv+0x1de>
    8e0a:	0001      	movs	r1, r0
    8e0c:	4b2c      	ldr	r3, [pc, #176]	; (8ec0 <__aeabi_fdiv+0x28c>)
    8e0e:	3180      	adds	r1, #128	; 0x80
    8e10:	401c      	ands	r4, r3
    8e12:	29fe      	cmp	r1, #254	; 0xfe
    8e14:	dd0d      	ble.n	8e32 <__aeabi_fdiv+0x1fe>
    8e16:	2301      	movs	r3, #1
    8e18:	9a01      	ldr	r2, [sp, #4]
    8e1a:	21ff      	movs	r1, #255	; 0xff
    8e1c:	4013      	ands	r3, r2
    8e1e:	2400      	movs	r4, #0
    8e20:	e7a4      	b.n	8d6c <__aeabi_fdiv+0x138>
    8e22:	2380      	movs	r3, #128	; 0x80
    8e24:	03db      	lsls	r3, r3, #15
    8e26:	431c      	orrs	r4, r3
    8e28:	0264      	lsls	r4, r4, #9
    8e2a:	0a64      	lsrs	r4, r4, #9
    8e2c:	0033      	movs	r3, r6
    8e2e:	21ff      	movs	r1, #255	; 0xff
    8e30:	e79c      	b.n	8d6c <__aeabi_fdiv+0x138>
    8e32:	2301      	movs	r3, #1
    8e34:	9a01      	ldr	r2, [sp, #4]
    8e36:	01a4      	lsls	r4, r4, #6
    8e38:	0a64      	lsrs	r4, r4, #9
    8e3a:	b2c9      	uxtb	r1, r1
    8e3c:	4013      	ands	r3, r2
    8e3e:	e795      	b.n	8d6c <__aeabi_fdiv+0x138>
    8e40:	1b1b      	subs	r3, r3, r4
    8e42:	261a      	movs	r6, #26
    8e44:	2101      	movs	r1, #1
    8e46:	e7c2      	b.n	8dce <__aeabi_fdiv+0x19a>
    8e48:	9b00      	ldr	r3, [sp, #0]
    8e4a:	468b      	mov	fp, r1
    8e4c:	469a      	mov	sl, r3
    8e4e:	2400      	movs	r4, #0
    8e50:	e74c      	b.n	8cec <__aeabi_fdiv+0xb8>
    8e52:	0263      	lsls	r3, r4, #9
    8e54:	d5e5      	bpl.n	8e22 <__aeabi_fdiv+0x1ee>
    8e56:	2500      	movs	r5, #0
    8e58:	2480      	movs	r4, #128	; 0x80
    8e5a:	03e4      	lsls	r4, r4, #15
    8e5c:	432c      	orrs	r4, r5
    8e5e:	0264      	lsls	r4, r4, #9
    8e60:	0a64      	lsrs	r4, r4, #9
    8e62:	9b00      	ldr	r3, [sp, #0]
    8e64:	21ff      	movs	r1, #255	; 0xff
    8e66:	e781      	b.n	8d6c <__aeabi_fdiv+0x138>
    8e68:	9501      	str	r5, [sp, #4]
    8e6a:	e7c1      	b.n	8df0 <__aeabi_fdiv+0x1bc>
    8e6c:	0023      	movs	r3, r4
    8e6e:	2020      	movs	r0, #32
    8e70:	40cb      	lsrs	r3, r1
    8e72:	1a41      	subs	r1, r0, r1
    8e74:	408c      	lsls	r4, r1
    8e76:	1e61      	subs	r1, r4, #1
    8e78:	418c      	sbcs	r4, r1
    8e7a:	431c      	orrs	r4, r3
    8e7c:	0763      	lsls	r3, r4, #29
    8e7e:	d004      	beq.n	8e8a <__aeabi_fdiv+0x256>
    8e80:	230f      	movs	r3, #15
    8e82:	4023      	ands	r3, r4
    8e84:	2b04      	cmp	r3, #4
    8e86:	d000      	beq.n	8e8a <__aeabi_fdiv+0x256>
    8e88:	3404      	adds	r4, #4
    8e8a:	0163      	lsls	r3, r4, #5
    8e8c:	d505      	bpl.n	8e9a <__aeabi_fdiv+0x266>
    8e8e:	2301      	movs	r3, #1
    8e90:	9a01      	ldr	r2, [sp, #4]
    8e92:	2101      	movs	r1, #1
    8e94:	4013      	ands	r3, r2
    8e96:	2400      	movs	r4, #0
    8e98:	e768      	b.n	8d6c <__aeabi_fdiv+0x138>
    8e9a:	2301      	movs	r3, #1
    8e9c:	9a01      	ldr	r2, [sp, #4]
    8e9e:	01a4      	lsls	r4, r4, #6
    8ea0:	0a64      	lsrs	r4, r4, #9
    8ea2:	4013      	ands	r3, r2
    8ea4:	2100      	movs	r1, #0
    8ea6:	e761      	b.n	8d6c <__aeabi_fdiv+0x138>
    8ea8:	2380      	movs	r3, #128	; 0x80
    8eaa:	03db      	lsls	r3, r3, #15
    8eac:	431c      	orrs	r4, r3
    8eae:	0264      	lsls	r4, r4, #9
    8eb0:	0a64      	lsrs	r4, r4, #9
    8eb2:	4653      	mov	r3, sl
    8eb4:	21ff      	movs	r1, #255	; 0xff
    8eb6:	e759      	b.n	8d6c <__aeabi_fdiv+0x138>
    8eb8:	0000df8c 	.word	0x0000df8c
    8ebc:	0000dfcc 	.word	0x0000dfcc
    8ec0:	f7ffffff 	.word	0xf7ffffff

00008ec4 <__eqsf2>:
    8ec4:	b570      	push	{r4, r5, r6, lr}
    8ec6:	0042      	lsls	r2, r0, #1
    8ec8:	0245      	lsls	r5, r0, #9
    8eca:	024e      	lsls	r6, r1, #9
    8ecc:	004c      	lsls	r4, r1, #1
    8ece:	0fc3      	lsrs	r3, r0, #31
    8ed0:	0a6d      	lsrs	r5, r5, #9
    8ed2:	0e12      	lsrs	r2, r2, #24
    8ed4:	0a76      	lsrs	r6, r6, #9
    8ed6:	0e24      	lsrs	r4, r4, #24
    8ed8:	0fc9      	lsrs	r1, r1, #31
    8eda:	2001      	movs	r0, #1
    8edc:	2aff      	cmp	r2, #255	; 0xff
    8ede:	d006      	beq.n	8eee <__eqsf2+0x2a>
    8ee0:	2cff      	cmp	r4, #255	; 0xff
    8ee2:	d003      	beq.n	8eec <__eqsf2+0x28>
    8ee4:	42a2      	cmp	r2, r4
    8ee6:	d101      	bne.n	8eec <__eqsf2+0x28>
    8ee8:	42b5      	cmp	r5, r6
    8eea:	d006      	beq.n	8efa <__eqsf2+0x36>
    8eec:	bd70      	pop	{r4, r5, r6, pc}
    8eee:	2d00      	cmp	r5, #0
    8ef0:	d1fc      	bne.n	8eec <__eqsf2+0x28>
    8ef2:	2cff      	cmp	r4, #255	; 0xff
    8ef4:	d1fa      	bne.n	8eec <__eqsf2+0x28>
    8ef6:	2e00      	cmp	r6, #0
    8ef8:	d1f8      	bne.n	8eec <__eqsf2+0x28>
    8efa:	428b      	cmp	r3, r1
    8efc:	d006      	beq.n	8f0c <__eqsf2+0x48>
    8efe:	2001      	movs	r0, #1
    8f00:	2a00      	cmp	r2, #0
    8f02:	d1f3      	bne.n	8eec <__eqsf2+0x28>
    8f04:	0028      	movs	r0, r5
    8f06:	1e45      	subs	r5, r0, #1
    8f08:	41a8      	sbcs	r0, r5
    8f0a:	e7ef      	b.n	8eec <__eqsf2+0x28>
    8f0c:	2000      	movs	r0, #0
    8f0e:	e7ed      	b.n	8eec <__eqsf2+0x28>

00008f10 <__gesf2>:
    8f10:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f12:	0042      	lsls	r2, r0, #1
    8f14:	0245      	lsls	r5, r0, #9
    8f16:	024c      	lsls	r4, r1, #9
    8f18:	0fc3      	lsrs	r3, r0, #31
    8f1a:	0048      	lsls	r0, r1, #1
    8f1c:	0a6d      	lsrs	r5, r5, #9
    8f1e:	0e12      	lsrs	r2, r2, #24
    8f20:	0a64      	lsrs	r4, r4, #9
    8f22:	0e00      	lsrs	r0, r0, #24
    8f24:	0fc9      	lsrs	r1, r1, #31
    8f26:	2aff      	cmp	r2, #255	; 0xff
    8f28:	d01e      	beq.n	8f68 <__gesf2+0x58>
    8f2a:	28ff      	cmp	r0, #255	; 0xff
    8f2c:	d021      	beq.n	8f72 <__gesf2+0x62>
    8f2e:	2a00      	cmp	r2, #0
    8f30:	d10a      	bne.n	8f48 <__gesf2+0x38>
    8f32:	426e      	negs	r6, r5
    8f34:	416e      	adcs	r6, r5
    8f36:	b2f6      	uxtb	r6, r6
    8f38:	2800      	cmp	r0, #0
    8f3a:	d10f      	bne.n	8f5c <__gesf2+0x4c>
    8f3c:	2c00      	cmp	r4, #0
    8f3e:	d10d      	bne.n	8f5c <__gesf2+0x4c>
    8f40:	2000      	movs	r0, #0
    8f42:	2d00      	cmp	r5, #0
    8f44:	d009      	beq.n	8f5a <__gesf2+0x4a>
    8f46:	e005      	b.n	8f54 <__gesf2+0x44>
    8f48:	2800      	cmp	r0, #0
    8f4a:	d101      	bne.n	8f50 <__gesf2+0x40>
    8f4c:	2c00      	cmp	r4, #0
    8f4e:	d001      	beq.n	8f54 <__gesf2+0x44>
    8f50:	428b      	cmp	r3, r1
    8f52:	d011      	beq.n	8f78 <__gesf2+0x68>
    8f54:	2101      	movs	r1, #1
    8f56:	4258      	negs	r0, r3
    8f58:	4308      	orrs	r0, r1
    8f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8f5c:	2e00      	cmp	r6, #0
    8f5e:	d0f7      	beq.n	8f50 <__gesf2+0x40>
    8f60:	2001      	movs	r0, #1
    8f62:	3901      	subs	r1, #1
    8f64:	4308      	orrs	r0, r1
    8f66:	e7f8      	b.n	8f5a <__gesf2+0x4a>
    8f68:	2d00      	cmp	r5, #0
    8f6a:	d0de      	beq.n	8f2a <__gesf2+0x1a>
    8f6c:	2002      	movs	r0, #2
    8f6e:	4240      	negs	r0, r0
    8f70:	e7f3      	b.n	8f5a <__gesf2+0x4a>
    8f72:	2c00      	cmp	r4, #0
    8f74:	d0db      	beq.n	8f2e <__gesf2+0x1e>
    8f76:	e7f9      	b.n	8f6c <__gesf2+0x5c>
    8f78:	4282      	cmp	r2, r0
    8f7a:	dceb      	bgt.n	8f54 <__gesf2+0x44>
    8f7c:	db04      	blt.n	8f88 <__gesf2+0x78>
    8f7e:	42a5      	cmp	r5, r4
    8f80:	d8e8      	bhi.n	8f54 <__gesf2+0x44>
    8f82:	2000      	movs	r0, #0
    8f84:	42a5      	cmp	r5, r4
    8f86:	d2e8      	bcs.n	8f5a <__gesf2+0x4a>
    8f88:	2101      	movs	r1, #1
    8f8a:	1e58      	subs	r0, r3, #1
    8f8c:	4308      	orrs	r0, r1
    8f8e:	e7e4      	b.n	8f5a <__gesf2+0x4a>

00008f90 <__lesf2>:
    8f90:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f92:	0042      	lsls	r2, r0, #1
    8f94:	024d      	lsls	r5, r1, #9
    8f96:	004c      	lsls	r4, r1, #1
    8f98:	0246      	lsls	r6, r0, #9
    8f9a:	0a76      	lsrs	r6, r6, #9
    8f9c:	0e12      	lsrs	r2, r2, #24
    8f9e:	0fc3      	lsrs	r3, r0, #31
    8fa0:	0a6d      	lsrs	r5, r5, #9
    8fa2:	0e24      	lsrs	r4, r4, #24
    8fa4:	0fc9      	lsrs	r1, r1, #31
    8fa6:	2aff      	cmp	r2, #255	; 0xff
    8fa8:	d016      	beq.n	8fd8 <__lesf2+0x48>
    8faa:	2cff      	cmp	r4, #255	; 0xff
    8fac:	d018      	beq.n	8fe0 <__lesf2+0x50>
    8fae:	2a00      	cmp	r2, #0
    8fb0:	d10a      	bne.n	8fc8 <__lesf2+0x38>
    8fb2:	4270      	negs	r0, r6
    8fb4:	4170      	adcs	r0, r6
    8fb6:	b2c0      	uxtb	r0, r0
    8fb8:	2c00      	cmp	r4, #0
    8fba:	d015      	beq.n	8fe8 <__lesf2+0x58>
    8fbc:	2800      	cmp	r0, #0
    8fbe:	d005      	beq.n	8fcc <__lesf2+0x3c>
    8fc0:	2001      	movs	r0, #1
    8fc2:	3901      	subs	r1, #1
    8fc4:	4308      	orrs	r0, r1
    8fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8fc8:	2c00      	cmp	r4, #0
    8fca:	d013      	beq.n	8ff4 <__lesf2+0x64>
    8fcc:	4299      	cmp	r1, r3
    8fce:	d014      	beq.n	8ffa <__lesf2+0x6a>
    8fd0:	2001      	movs	r0, #1
    8fd2:	425b      	negs	r3, r3
    8fd4:	4318      	orrs	r0, r3
    8fd6:	e7f6      	b.n	8fc6 <__lesf2+0x36>
    8fd8:	2002      	movs	r0, #2
    8fda:	2e00      	cmp	r6, #0
    8fdc:	d1f3      	bne.n	8fc6 <__lesf2+0x36>
    8fde:	e7e4      	b.n	8faa <__lesf2+0x1a>
    8fe0:	2002      	movs	r0, #2
    8fe2:	2d00      	cmp	r5, #0
    8fe4:	d1ef      	bne.n	8fc6 <__lesf2+0x36>
    8fe6:	e7e2      	b.n	8fae <__lesf2+0x1e>
    8fe8:	2d00      	cmp	r5, #0
    8fea:	d1e7      	bne.n	8fbc <__lesf2+0x2c>
    8fec:	2000      	movs	r0, #0
    8fee:	2e00      	cmp	r6, #0
    8ff0:	d0e9      	beq.n	8fc6 <__lesf2+0x36>
    8ff2:	e7ed      	b.n	8fd0 <__lesf2+0x40>
    8ff4:	2d00      	cmp	r5, #0
    8ff6:	d1e9      	bne.n	8fcc <__lesf2+0x3c>
    8ff8:	e7ea      	b.n	8fd0 <__lesf2+0x40>
    8ffa:	42a2      	cmp	r2, r4
    8ffc:	dc06      	bgt.n	900c <__lesf2+0x7c>
    8ffe:	dbdf      	blt.n	8fc0 <__lesf2+0x30>
    9000:	42ae      	cmp	r6, r5
    9002:	d803      	bhi.n	900c <__lesf2+0x7c>
    9004:	2000      	movs	r0, #0
    9006:	42ae      	cmp	r6, r5
    9008:	d3da      	bcc.n	8fc0 <__lesf2+0x30>
    900a:	e7dc      	b.n	8fc6 <__lesf2+0x36>
    900c:	2001      	movs	r0, #1
    900e:	4249      	negs	r1, r1
    9010:	4308      	orrs	r0, r1
    9012:	e7d8      	b.n	8fc6 <__lesf2+0x36>

00009014 <__aeabi_fmul>:
    9014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9016:	4657      	mov	r7, sl
    9018:	464e      	mov	r6, r9
    901a:	4645      	mov	r5, r8
    901c:	46de      	mov	lr, fp
    901e:	b5e0      	push	{r5, r6, r7, lr}
    9020:	0247      	lsls	r7, r0, #9
    9022:	0046      	lsls	r6, r0, #1
    9024:	4688      	mov	r8, r1
    9026:	0a7f      	lsrs	r7, r7, #9
    9028:	0e36      	lsrs	r6, r6, #24
    902a:	0fc4      	lsrs	r4, r0, #31
    902c:	2e00      	cmp	r6, #0
    902e:	d047      	beq.n	90c0 <__aeabi_fmul+0xac>
    9030:	2eff      	cmp	r6, #255	; 0xff
    9032:	d024      	beq.n	907e <__aeabi_fmul+0x6a>
    9034:	00fb      	lsls	r3, r7, #3
    9036:	2780      	movs	r7, #128	; 0x80
    9038:	04ff      	lsls	r7, r7, #19
    903a:	431f      	orrs	r7, r3
    903c:	2300      	movs	r3, #0
    903e:	4699      	mov	r9, r3
    9040:	469a      	mov	sl, r3
    9042:	3e7f      	subs	r6, #127	; 0x7f
    9044:	4643      	mov	r3, r8
    9046:	025d      	lsls	r5, r3, #9
    9048:	0058      	lsls	r0, r3, #1
    904a:	0fdb      	lsrs	r3, r3, #31
    904c:	0a6d      	lsrs	r5, r5, #9
    904e:	0e00      	lsrs	r0, r0, #24
    9050:	4698      	mov	r8, r3
    9052:	d043      	beq.n	90dc <__aeabi_fmul+0xc8>
    9054:	28ff      	cmp	r0, #255	; 0xff
    9056:	d03b      	beq.n	90d0 <__aeabi_fmul+0xbc>
    9058:	00eb      	lsls	r3, r5, #3
    905a:	2580      	movs	r5, #128	; 0x80
    905c:	2200      	movs	r2, #0
    905e:	04ed      	lsls	r5, r5, #19
    9060:	431d      	orrs	r5, r3
    9062:	387f      	subs	r0, #127	; 0x7f
    9064:	1836      	adds	r6, r6, r0
    9066:	1c73      	adds	r3, r6, #1
    9068:	4641      	mov	r1, r8
    906a:	469b      	mov	fp, r3
    906c:	464b      	mov	r3, r9
    906e:	4061      	eors	r1, r4
    9070:	4313      	orrs	r3, r2
    9072:	2b0f      	cmp	r3, #15
    9074:	d864      	bhi.n	9140 <__aeabi_fmul+0x12c>
    9076:	4875      	ldr	r0, [pc, #468]	; (924c <__aeabi_fmul+0x238>)
    9078:	009b      	lsls	r3, r3, #2
    907a:	58c3      	ldr	r3, [r0, r3]
    907c:	469f      	mov	pc, r3
    907e:	2f00      	cmp	r7, #0
    9080:	d142      	bne.n	9108 <__aeabi_fmul+0xf4>
    9082:	2308      	movs	r3, #8
    9084:	4699      	mov	r9, r3
    9086:	3b06      	subs	r3, #6
    9088:	26ff      	movs	r6, #255	; 0xff
    908a:	469a      	mov	sl, r3
    908c:	e7da      	b.n	9044 <__aeabi_fmul+0x30>
    908e:	4641      	mov	r1, r8
    9090:	2a02      	cmp	r2, #2
    9092:	d028      	beq.n	90e6 <__aeabi_fmul+0xd2>
    9094:	2a03      	cmp	r2, #3
    9096:	d100      	bne.n	909a <__aeabi_fmul+0x86>
    9098:	e0ce      	b.n	9238 <__aeabi_fmul+0x224>
    909a:	2a01      	cmp	r2, #1
    909c:	d000      	beq.n	90a0 <__aeabi_fmul+0x8c>
    909e:	e0ac      	b.n	91fa <__aeabi_fmul+0x1e6>
    90a0:	4011      	ands	r1, r2
    90a2:	2000      	movs	r0, #0
    90a4:	2200      	movs	r2, #0
    90a6:	b2cc      	uxtb	r4, r1
    90a8:	0240      	lsls	r0, r0, #9
    90aa:	05d2      	lsls	r2, r2, #23
    90ac:	0a40      	lsrs	r0, r0, #9
    90ae:	07e4      	lsls	r4, r4, #31
    90b0:	4310      	orrs	r0, r2
    90b2:	4320      	orrs	r0, r4
    90b4:	bc3c      	pop	{r2, r3, r4, r5}
    90b6:	4690      	mov	r8, r2
    90b8:	4699      	mov	r9, r3
    90ba:	46a2      	mov	sl, r4
    90bc:	46ab      	mov	fp, r5
    90be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    90c0:	2f00      	cmp	r7, #0
    90c2:	d115      	bne.n	90f0 <__aeabi_fmul+0xdc>
    90c4:	2304      	movs	r3, #4
    90c6:	4699      	mov	r9, r3
    90c8:	3b03      	subs	r3, #3
    90ca:	2600      	movs	r6, #0
    90cc:	469a      	mov	sl, r3
    90ce:	e7b9      	b.n	9044 <__aeabi_fmul+0x30>
    90d0:	20ff      	movs	r0, #255	; 0xff
    90d2:	2202      	movs	r2, #2
    90d4:	2d00      	cmp	r5, #0
    90d6:	d0c5      	beq.n	9064 <__aeabi_fmul+0x50>
    90d8:	2203      	movs	r2, #3
    90da:	e7c3      	b.n	9064 <__aeabi_fmul+0x50>
    90dc:	2d00      	cmp	r5, #0
    90de:	d119      	bne.n	9114 <__aeabi_fmul+0x100>
    90e0:	2000      	movs	r0, #0
    90e2:	2201      	movs	r2, #1
    90e4:	e7be      	b.n	9064 <__aeabi_fmul+0x50>
    90e6:	2401      	movs	r4, #1
    90e8:	22ff      	movs	r2, #255	; 0xff
    90ea:	400c      	ands	r4, r1
    90ec:	2000      	movs	r0, #0
    90ee:	e7db      	b.n	90a8 <__aeabi_fmul+0x94>
    90f0:	0038      	movs	r0, r7
    90f2:	f002 f985 	bl	b400 <__clzsi2>
    90f6:	2676      	movs	r6, #118	; 0x76
    90f8:	1f43      	subs	r3, r0, #5
    90fa:	409f      	lsls	r7, r3
    90fc:	2300      	movs	r3, #0
    90fe:	4276      	negs	r6, r6
    9100:	1a36      	subs	r6, r6, r0
    9102:	4699      	mov	r9, r3
    9104:	469a      	mov	sl, r3
    9106:	e79d      	b.n	9044 <__aeabi_fmul+0x30>
    9108:	230c      	movs	r3, #12
    910a:	4699      	mov	r9, r3
    910c:	3b09      	subs	r3, #9
    910e:	26ff      	movs	r6, #255	; 0xff
    9110:	469a      	mov	sl, r3
    9112:	e797      	b.n	9044 <__aeabi_fmul+0x30>
    9114:	0028      	movs	r0, r5
    9116:	f002 f973 	bl	b400 <__clzsi2>
    911a:	1f43      	subs	r3, r0, #5
    911c:	409d      	lsls	r5, r3
    911e:	2376      	movs	r3, #118	; 0x76
    9120:	425b      	negs	r3, r3
    9122:	1a18      	subs	r0, r3, r0
    9124:	2200      	movs	r2, #0
    9126:	e79d      	b.n	9064 <__aeabi_fmul+0x50>
    9128:	2080      	movs	r0, #128	; 0x80
    912a:	2400      	movs	r4, #0
    912c:	03c0      	lsls	r0, r0, #15
    912e:	22ff      	movs	r2, #255	; 0xff
    9130:	e7ba      	b.n	90a8 <__aeabi_fmul+0x94>
    9132:	003d      	movs	r5, r7
    9134:	4652      	mov	r2, sl
    9136:	e7ab      	b.n	9090 <__aeabi_fmul+0x7c>
    9138:	003d      	movs	r5, r7
    913a:	0021      	movs	r1, r4
    913c:	4652      	mov	r2, sl
    913e:	e7a7      	b.n	9090 <__aeabi_fmul+0x7c>
    9140:	0c3b      	lsrs	r3, r7, #16
    9142:	469c      	mov	ip, r3
    9144:	042a      	lsls	r2, r5, #16
    9146:	0c12      	lsrs	r2, r2, #16
    9148:	0c2b      	lsrs	r3, r5, #16
    914a:	0014      	movs	r4, r2
    914c:	4660      	mov	r0, ip
    914e:	4665      	mov	r5, ip
    9150:	043f      	lsls	r7, r7, #16
    9152:	0c3f      	lsrs	r7, r7, #16
    9154:	437c      	muls	r4, r7
    9156:	4342      	muls	r2, r0
    9158:	435d      	muls	r5, r3
    915a:	437b      	muls	r3, r7
    915c:	0c27      	lsrs	r7, r4, #16
    915e:	189b      	adds	r3, r3, r2
    9160:	18ff      	adds	r7, r7, r3
    9162:	42ba      	cmp	r2, r7
    9164:	d903      	bls.n	916e <__aeabi_fmul+0x15a>
    9166:	2380      	movs	r3, #128	; 0x80
    9168:	025b      	lsls	r3, r3, #9
    916a:	469c      	mov	ip, r3
    916c:	4465      	add	r5, ip
    916e:	0424      	lsls	r4, r4, #16
    9170:	043a      	lsls	r2, r7, #16
    9172:	0c24      	lsrs	r4, r4, #16
    9174:	1912      	adds	r2, r2, r4
    9176:	0193      	lsls	r3, r2, #6
    9178:	1e5c      	subs	r4, r3, #1
    917a:	41a3      	sbcs	r3, r4
    917c:	0c3f      	lsrs	r7, r7, #16
    917e:	0e92      	lsrs	r2, r2, #26
    9180:	197d      	adds	r5, r7, r5
    9182:	431a      	orrs	r2, r3
    9184:	01ad      	lsls	r5, r5, #6
    9186:	4315      	orrs	r5, r2
    9188:	012b      	lsls	r3, r5, #4
    918a:	d504      	bpl.n	9196 <__aeabi_fmul+0x182>
    918c:	2301      	movs	r3, #1
    918e:	465e      	mov	r6, fp
    9190:	086a      	lsrs	r2, r5, #1
    9192:	401d      	ands	r5, r3
    9194:	4315      	orrs	r5, r2
    9196:	0032      	movs	r2, r6
    9198:	327f      	adds	r2, #127	; 0x7f
    919a:	2a00      	cmp	r2, #0
    919c:	dd25      	ble.n	91ea <__aeabi_fmul+0x1d6>
    919e:	076b      	lsls	r3, r5, #29
    91a0:	d004      	beq.n	91ac <__aeabi_fmul+0x198>
    91a2:	230f      	movs	r3, #15
    91a4:	402b      	ands	r3, r5
    91a6:	2b04      	cmp	r3, #4
    91a8:	d000      	beq.n	91ac <__aeabi_fmul+0x198>
    91aa:	3504      	adds	r5, #4
    91ac:	012b      	lsls	r3, r5, #4
    91ae:	d503      	bpl.n	91b8 <__aeabi_fmul+0x1a4>
    91b0:	0032      	movs	r2, r6
    91b2:	4b27      	ldr	r3, [pc, #156]	; (9250 <__aeabi_fmul+0x23c>)
    91b4:	3280      	adds	r2, #128	; 0x80
    91b6:	401d      	ands	r5, r3
    91b8:	2afe      	cmp	r2, #254	; 0xfe
    91ba:	dc94      	bgt.n	90e6 <__aeabi_fmul+0xd2>
    91bc:	2401      	movs	r4, #1
    91be:	01a8      	lsls	r0, r5, #6
    91c0:	0a40      	lsrs	r0, r0, #9
    91c2:	b2d2      	uxtb	r2, r2
    91c4:	400c      	ands	r4, r1
    91c6:	e76f      	b.n	90a8 <__aeabi_fmul+0x94>
    91c8:	2080      	movs	r0, #128	; 0x80
    91ca:	03c0      	lsls	r0, r0, #15
    91cc:	4207      	tst	r7, r0
    91ce:	d007      	beq.n	91e0 <__aeabi_fmul+0x1cc>
    91d0:	4205      	tst	r5, r0
    91d2:	d105      	bne.n	91e0 <__aeabi_fmul+0x1cc>
    91d4:	4328      	orrs	r0, r5
    91d6:	0240      	lsls	r0, r0, #9
    91d8:	0a40      	lsrs	r0, r0, #9
    91da:	4644      	mov	r4, r8
    91dc:	22ff      	movs	r2, #255	; 0xff
    91de:	e763      	b.n	90a8 <__aeabi_fmul+0x94>
    91e0:	4338      	orrs	r0, r7
    91e2:	0240      	lsls	r0, r0, #9
    91e4:	0a40      	lsrs	r0, r0, #9
    91e6:	22ff      	movs	r2, #255	; 0xff
    91e8:	e75e      	b.n	90a8 <__aeabi_fmul+0x94>
    91ea:	2401      	movs	r4, #1
    91ec:	1aa3      	subs	r3, r4, r2
    91ee:	2b1b      	cmp	r3, #27
    91f0:	dd05      	ble.n	91fe <__aeabi_fmul+0x1ea>
    91f2:	400c      	ands	r4, r1
    91f4:	2200      	movs	r2, #0
    91f6:	2000      	movs	r0, #0
    91f8:	e756      	b.n	90a8 <__aeabi_fmul+0x94>
    91fa:	465e      	mov	r6, fp
    91fc:	e7cb      	b.n	9196 <__aeabi_fmul+0x182>
    91fe:	002a      	movs	r2, r5
    9200:	2020      	movs	r0, #32
    9202:	40da      	lsrs	r2, r3
    9204:	1ac3      	subs	r3, r0, r3
    9206:	409d      	lsls	r5, r3
    9208:	002b      	movs	r3, r5
    920a:	1e5d      	subs	r5, r3, #1
    920c:	41ab      	sbcs	r3, r5
    920e:	4313      	orrs	r3, r2
    9210:	075a      	lsls	r2, r3, #29
    9212:	d004      	beq.n	921e <__aeabi_fmul+0x20a>
    9214:	220f      	movs	r2, #15
    9216:	401a      	ands	r2, r3
    9218:	2a04      	cmp	r2, #4
    921a:	d000      	beq.n	921e <__aeabi_fmul+0x20a>
    921c:	3304      	adds	r3, #4
    921e:	015a      	lsls	r2, r3, #5
    9220:	d504      	bpl.n	922c <__aeabi_fmul+0x218>
    9222:	2401      	movs	r4, #1
    9224:	2201      	movs	r2, #1
    9226:	400c      	ands	r4, r1
    9228:	2000      	movs	r0, #0
    922a:	e73d      	b.n	90a8 <__aeabi_fmul+0x94>
    922c:	2401      	movs	r4, #1
    922e:	019b      	lsls	r3, r3, #6
    9230:	0a58      	lsrs	r0, r3, #9
    9232:	400c      	ands	r4, r1
    9234:	2200      	movs	r2, #0
    9236:	e737      	b.n	90a8 <__aeabi_fmul+0x94>
    9238:	2080      	movs	r0, #128	; 0x80
    923a:	2401      	movs	r4, #1
    923c:	03c0      	lsls	r0, r0, #15
    923e:	4328      	orrs	r0, r5
    9240:	0240      	lsls	r0, r0, #9
    9242:	0a40      	lsrs	r0, r0, #9
    9244:	400c      	ands	r4, r1
    9246:	22ff      	movs	r2, #255	; 0xff
    9248:	e72e      	b.n	90a8 <__aeabi_fmul+0x94>
    924a:	46c0      	nop			; (mov r8, r8)
    924c:	0000e00c 	.word	0x0000e00c
    9250:	f7ffffff 	.word	0xf7ffffff

00009254 <__aeabi_fsub>:
    9254:	b5f0      	push	{r4, r5, r6, r7, lr}
    9256:	464f      	mov	r7, r9
    9258:	46d6      	mov	lr, sl
    925a:	4646      	mov	r6, r8
    925c:	0044      	lsls	r4, r0, #1
    925e:	b5c0      	push	{r6, r7, lr}
    9260:	0fc2      	lsrs	r2, r0, #31
    9262:	0247      	lsls	r7, r0, #9
    9264:	0248      	lsls	r0, r1, #9
    9266:	0a40      	lsrs	r0, r0, #9
    9268:	4684      	mov	ip, r0
    926a:	4666      	mov	r6, ip
    926c:	0a7b      	lsrs	r3, r7, #9
    926e:	0048      	lsls	r0, r1, #1
    9270:	0fc9      	lsrs	r1, r1, #31
    9272:	469a      	mov	sl, r3
    9274:	0e24      	lsrs	r4, r4, #24
    9276:	0015      	movs	r5, r2
    9278:	00db      	lsls	r3, r3, #3
    927a:	0e00      	lsrs	r0, r0, #24
    927c:	4689      	mov	r9, r1
    927e:	00f6      	lsls	r6, r6, #3
    9280:	28ff      	cmp	r0, #255	; 0xff
    9282:	d100      	bne.n	9286 <__aeabi_fsub+0x32>
    9284:	e08f      	b.n	93a6 <__aeabi_fsub+0x152>
    9286:	2101      	movs	r1, #1
    9288:	464f      	mov	r7, r9
    928a:	404f      	eors	r7, r1
    928c:	0039      	movs	r1, r7
    928e:	4291      	cmp	r1, r2
    9290:	d066      	beq.n	9360 <__aeabi_fsub+0x10c>
    9292:	1a22      	subs	r2, r4, r0
    9294:	2a00      	cmp	r2, #0
    9296:	dc00      	bgt.n	929a <__aeabi_fsub+0x46>
    9298:	e09d      	b.n	93d6 <__aeabi_fsub+0x182>
    929a:	2800      	cmp	r0, #0
    929c:	d13d      	bne.n	931a <__aeabi_fsub+0xc6>
    929e:	2e00      	cmp	r6, #0
    92a0:	d100      	bne.n	92a4 <__aeabi_fsub+0x50>
    92a2:	e08b      	b.n	93bc <__aeabi_fsub+0x168>
    92a4:	1e51      	subs	r1, r2, #1
    92a6:	2900      	cmp	r1, #0
    92a8:	d000      	beq.n	92ac <__aeabi_fsub+0x58>
    92aa:	e0b5      	b.n	9418 <__aeabi_fsub+0x1c4>
    92ac:	2401      	movs	r4, #1
    92ae:	1b9b      	subs	r3, r3, r6
    92b0:	015a      	lsls	r2, r3, #5
    92b2:	d544      	bpl.n	933e <__aeabi_fsub+0xea>
    92b4:	019b      	lsls	r3, r3, #6
    92b6:	099f      	lsrs	r7, r3, #6
    92b8:	0038      	movs	r0, r7
    92ba:	f002 f8a1 	bl	b400 <__clzsi2>
    92be:	3805      	subs	r0, #5
    92c0:	4087      	lsls	r7, r0
    92c2:	4284      	cmp	r4, r0
    92c4:	dd00      	ble.n	92c8 <__aeabi_fsub+0x74>
    92c6:	e096      	b.n	93f6 <__aeabi_fsub+0x1a2>
    92c8:	1b04      	subs	r4, r0, r4
    92ca:	003a      	movs	r2, r7
    92cc:	2020      	movs	r0, #32
    92ce:	3401      	adds	r4, #1
    92d0:	40e2      	lsrs	r2, r4
    92d2:	1b04      	subs	r4, r0, r4
    92d4:	40a7      	lsls	r7, r4
    92d6:	003b      	movs	r3, r7
    92d8:	1e5f      	subs	r7, r3, #1
    92da:	41bb      	sbcs	r3, r7
    92dc:	2400      	movs	r4, #0
    92de:	4313      	orrs	r3, r2
    92e0:	075a      	lsls	r2, r3, #29
    92e2:	d004      	beq.n	92ee <__aeabi_fsub+0x9a>
    92e4:	220f      	movs	r2, #15
    92e6:	401a      	ands	r2, r3
    92e8:	2a04      	cmp	r2, #4
    92ea:	d000      	beq.n	92ee <__aeabi_fsub+0x9a>
    92ec:	3304      	adds	r3, #4
    92ee:	015a      	lsls	r2, r3, #5
    92f0:	d527      	bpl.n	9342 <__aeabi_fsub+0xee>
    92f2:	3401      	adds	r4, #1
    92f4:	2cff      	cmp	r4, #255	; 0xff
    92f6:	d100      	bne.n	92fa <__aeabi_fsub+0xa6>
    92f8:	e079      	b.n	93ee <__aeabi_fsub+0x19a>
    92fa:	2201      	movs	r2, #1
    92fc:	019b      	lsls	r3, r3, #6
    92fe:	0a5b      	lsrs	r3, r3, #9
    9300:	b2e4      	uxtb	r4, r4
    9302:	402a      	ands	r2, r5
    9304:	025b      	lsls	r3, r3, #9
    9306:	05e4      	lsls	r4, r4, #23
    9308:	0a58      	lsrs	r0, r3, #9
    930a:	07d2      	lsls	r2, r2, #31
    930c:	4320      	orrs	r0, r4
    930e:	4310      	orrs	r0, r2
    9310:	bc1c      	pop	{r2, r3, r4}
    9312:	4690      	mov	r8, r2
    9314:	4699      	mov	r9, r3
    9316:	46a2      	mov	sl, r4
    9318:	bdf0      	pop	{r4, r5, r6, r7, pc}
    931a:	2cff      	cmp	r4, #255	; 0xff
    931c:	d0e0      	beq.n	92e0 <__aeabi_fsub+0x8c>
    931e:	2180      	movs	r1, #128	; 0x80
    9320:	04c9      	lsls	r1, r1, #19
    9322:	430e      	orrs	r6, r1
    9324:	2a1b      	cmp	r2, #27
    9326:	dc7b      	bgt.n	9420 <__aeabi_fsub+0x1cc>
    9328:	0031      	movs	r1, r6
    932a:	2020      	movs	r0, #32
    932c:	40d1      	lsrs	r1, r2
    932e:	1a82      	subs	r2, r0, r2
    9330:	4096      	lsls	r6, r2
    9332:	1e72      	subs	r2, r6, #1
    9334:	4196      	sbcs	r6, r2
    9336:	430e      	orrs	r6, r1
    9338:	1b9b      	subs	r3, r3, r6
    933a:	015a      	lsls	r2, r3, #5
    933c:	d4ba      	bmi.n	92b4 <__aeabi_fsub+0x60>
    933e:	075a      	lsls	r2, r3, #29
    9340:	d1d0      	bne.n	92e4 <__aeabi_fsub+0x90>
    9342:	2201      	movs	r2, #1
    9344:	08df      	lsrs	r7, r3, #3
    9346:	402a      	ands	r2, r5
    9348:	2cff      	cmp	r4, #255	; 0xff
    934a:	d133      	bne.n	93b4 <__aeabi_fsub+0x160>
    934c:	2f00      	cmp	r7, #0
    934e:	d100      	bne.n	9352 <__aeabi_fsub+0xfe>
    9350:	e0a8      	b.n	94a4 <__aeabi_fsub+0x250>
    9352:	2380      	movs	r3, #128	; 0x80
    9354:	03db      	lsls	r3, r3, #15
    9356:	433b      	orrs	r3, r7
    9358:	025b      	lsls	r3, r3, #9
    935a:	0a5b      	lsrs	r3, r3, #9
    935c:	24ff      	movs	r4, #255	; 0xff
    935e:	e7d1      	b.n	9304 <__aeabi_fsub+0xb0>
    9360:	1a21      	subs	r1, r4, r0
    9362:	2900      	cmp	r1, #0
    9364:	dd4c      	ble.n	9400 <__aeabi_fsub+0x1ac>
    9366:	2800      	cmp	r0, #0
    9368:	d02a      	beq.n	93c0 <__aeabi_fsub+0x16c>
    936a:	2cff      	cmp	r4, #255	; 0xff
    936c:	d0b8      	beq.n	92e0 <__aeabi_fsub+0x8c>
    936e:	2080      	movs	r0, #128	; 0x80
    9370:	04c0      	lsls	r0, r0, #19
    9372:	4306      	orrs	r6, r0
    9374:	291b      	cmp	r1, #27
    9376:	dd00      	ble.n	937a <__aeabi_fsub+0x126>
    9378:	e0af      	b.n	94da <__aeabi_fsub+0x286>
    937a:	0030      	movs	r0, r6
    937c:	2720      	movs	r7, #32
    937e:	40c8      	lsrs	r0, r1
    9380:	1a79      	subs	r1, r7, r1
    9382:	408e      	lsls	r6, r1
    9384:	1e71      	subs	r1, r6, #1
    9386:	418e      	sbcs	r6, r1
    9388:	4306      	orrs	r6, r0
    938a:	199b      	adds	r3, r3, r6
    938c:	0159      	lsls	r1, r3, #5
    938e:	d5d6      	bpl.n	933e <__aeabi_fsub+0xea>
    9390:	3401      	adds	r4, #1
    9392:	2cff      	cmp	r4, #255	; 0xff
    9394:	d100      	bne.n	9398 <__aeabi_fsub+0x144>
    9396:	e085      	b.n	94a4 <__aeabi_fsub+0x250>
    9398:	2201      	movs	r2, #1
    939a:	497a      	ldr	r1, [pc, #488]	; (9584 <__aeabi_fsub+0x330>)
    939c:	401a      	ands	r2, r3
    939e:	085b      	lsrs	r3, r3, #1
    93a0:	400b      	ands	r3, r1
    93a2:	4313      	orrs	r3, r2
    93a4:	e79c      	b.n	92e0 <__aeabi_fsub+0x8c>
    93a6:	2e00      	cmp	r6, #0
    93a8:	d000      	beq.n	93ac <__aeabi_fsub+0x158>
    93aa:	e770      	b.n	928e <__aeabi_fsub+0x3a>
    93ac:	e76b      	b.n	9286 <__aeabi_fsub+0x32>
    93ae:	1e3b      	subs	r3, r7, #0
    93b0:	d1c5      	bne.n	933e <__aeabi_fsub+0xea>
    93b2:	2200      	movs	r2, #0
    93b4:	027b      	lsls	r3, r7, #9
    93b6:	0a5b      	lsrs	r3, r3, #9
    93b8:	b2e4      	uxtb	r4, r4
    93ba:	e7a3      	b.n	9304 <__aeabi_fsub+0xb0>
    93bc:	0014      	movs	r4, r2
    93be:	e78f      	b.n	92e0 <__aeabi_fsub+0x8c>
    93c0:	2e00      	cmp	r6, #0
    93c2:	d04d      	beq.n	9460 <__aeabi_fsub+0x20c>
    93c4:	1e48      	subs	r0, r1, #1
    93c6:	2800      	cmp	r0, #0
    93c8:	d157      	bne.n	947a <__aeabi_fsub+0x226>
    93ca:	199b      	adds	r3, r3, r6
    93cc:	2401      	movs	r4, #1
    93ce:	015a      	lsls	r2, r3, #5
    93d0:	d5b5      	bpl.n	933e <__aeabi_fsub+0xea>
    93d2:	2402      	movs	r4, #2
    93d4:	e7e0      	b.n	9398 <__aeabi_fsub+0x144>
    93d6:	2a00      	cmp	r2, #0
    93d8:	d125      	bne.n	9426 <__aeabi_fsub+0x1d2>
    93da:	1c62      	adds	r2, r4, #1
    93dc:	b2d2      	uxtb	r2, r2
    93de:	2a01      	cmp	r2, #1
    93e0:	dd72      	ble.n	94c8 <__aeabi_fsub+0x274>
    93e2:	1b9f      	subs	r7, r3, r6
    93e4:	017a      	lsls	r2, r7, #5
    93e6:	d535      	bpl.n	9454 <__aeabi_fsub+0x200>
    93e8:	1af7      	subs	r7, r6, r3
    93ea:	000d      	movs	r5, r1
    93ec:	e764      	b.n	92b8 <__aeabi_fsub+0x64>
    93ee:	2201      	movs	r2, #1
    93f0:	2300      	movs	r3, #0
    93f2:	402a      	ands	r2, r5
    93f4:	e786      	b.n	9304 <__aeabi_fsub+0xb0>
    93f6:	003b      	movs	r3, r7
    93f8:	4a63      	ldr	r2, [pc, #396]	; (9588 <__aeabi_fsub+0x334>)
    93fa:	1a24      	subs	r4, r4, r0
    93fc:	4013      	ands	r3, r2
    93fe:	e76f      	b.n	92e0 <__aeabi_fsub+0x8c>
    9400:	2900      	cmp	r1, #0
    9402:	d16c      	bne.n	94de <__aeabi_fsub+0x28a>
    9404:	1c61      	adds	r1, r4, #1
    9406:	b2c8      	uxtb	r0, r1
    9408:	2801      	cmp	r0, #1
    940a:	dd4e      	ble.n	94aa <__aeabi_fsub+0x256>
    940c:	29ff      	cmp	r1, #255	; 0xff
    940e:	d049      	beq.n	94a4 <__aeabi_fsub+0x250>
    9410:	199b      	adds	r3, r3, r6
    9412:	085b      	lsrs	r3, r3, #1
    9414:	000c      	movs	r4, r1
    9416:	e763      	b.n	92e0 <__aeabi_fsub+0x8c>
    9418:	2aff      	cmp	r2, #255	; 0xff
    941a:	d041      	beq.n	94a0 <__aeabi_fsub+0x24c>
    941c:	000a      	movs	r2, r1
    941e:	e781      	b.n	9324 <__aeabi_fsub+0xd0>
    9420:	2601      	movs	r6, #1
    9422:	1b9b      	subs	r3, r3, r6
    9424:	e789      	b.n	933a <__aeabi_fsub+0xe6>
    9426:	2c00      	cmp	r4, #0
    9428:	d01c      	beq.n	9464 <__aeabi_fsub+0x210>
    942a:	28ff      	cmp	r0, #255	; 0xff
    942c:	d021      	beq.n	9472 <__aeabi_fsub+0x21e>
    942e:	2480      	movs	r4, #128	; 0x80
    9430:	04e4      	lsls	r4, r4, #19
    9432:	4252      	negs	r2, r2
    9434:	4323      	orrs	r3, r4
    9436:	2a1b      	cmp	r2, #27
    9438:	dd00      	ble.n	943c <__aeabi_fsub+0x1e8>
    943a:	e096      	b.n	956a <__aeabi_fsub+0x316>
    943c:	001c      	movs	r4, r3
    943e:	2520      	movs	r5, #32
    9440:	40d4      	lsrs	r4, r2
    9442:	1aaa      	subs	r2, r5, r2
    9444:	4093      	lsls	r3, r2
    9446:	1e5a      	subs	r2, r3, #1
    9448:	4193      	sbcs	r3, r2
    944a:	4323      	orrs	r3, r4
    944c:	1af3      	subs	r3, r6, r3
    944e:	0004      	movs	r4, r0
    9450:	000d      	movs	r5, r1
    9452:	e72d      	b.n	92b0 <__aeabi_fsub+0x5c>
    9454:	2f00      	cmp	r7, #0
    9456:	d000      	beq.n	945a <__aeabi_fsub+0x206>
    9458:	e72e      	b.n	92b8 <__aeabi_fsub+0x64>
    945a:	2200      	movs	r2, #0
    945c:	2400      	movs	r4, #0
    945e:	e7a9      	b.n	93b4 <__aeabi_fsub+0x160>
    9460:	000c      	movs	r4, r1
    9462:	e73d      	b.n	92e0 <__aeabi_fsub+0x8c>
    9464:	2b00      	cmp	r3, #0
    9466:	d058      	beq.n	951a <__aeabi_fsub+0x2c6>
    9468:	43d2      	mvns	r2, r2
    946a:	2a00      	cmp	r2, #0
    946c:	d0ee      	beq.n	944c <__aeabi_fsub+0x1f8>
    946e:	28ff      	cmp	r0, #255	; 0xff
    9470:	d1e1      	bne.n	9436 <__aeabi_fsub+0x1e2>
    9472:	0033      	movs	r3, r6
    9474:	24ff      	movs	r4, #255	; 0xff
    9476:	000d      	movs	r5, r1
    9478:	e732      	b.n	92e0 <__aeabi_fsub+0x8c>
    947a:	29ff      	cmp	r1, #255	; 0xff
    947c:	d010      	beq.n	94a0 <__aeabi_fsub+0x24c>
    947e:	0001      	movs	r1, r0
    9480:	e778      	b.n	9374 <__aeabi_fsub+0x120>
    9482:	2b00      	cmp	r3, #0
    9484:	d06e      	beq.n	9564 <__aeabi_fsub+0x310>
    9486:	24ff      	movs	r4, #255	; 0xff
    9488:	2e00      	cmp	r6, #0
    948a:	d100      	bne.n	948e <__aeabi_fsub+0x23a>
    948c:	e728      	b.n	92e0 <__aeabi_fsub+0x8c>
    948e:	2280      	movs	r2, #128	; 0x80
    9490:	4651      	mov	r1, sl
    9492:	03d2      	lsls	r2, r2, #15
    9494:	4211      	tst	r1, r2
    9496:	d003      	beq.n	94a0 <__aeabi_fsub+0x24c>
    9498:	4661      	mov	r1, ip
    949a:	4211      	tst	r1, r2
    949c:	d100      	bne.n	94a0 <__aeabi_fsub+0x24c>
    949e:	0033      	movs	r3, r6
    94a0:	24ff      	movs	r4, #255	; 0xff
    94a2:	e71d      	b.n	92e0 <__aeabi_fsub+0x8c>
    94a4:	24ff      	movs	r4, #255	; 0xff
    94a6:	2300      	movs	r3, #0
    94a8:	e72c      	b.n	9304 <__aeabi_fsub+0xb0>
    94aa:	2c00      	cmp	r4, #0
    94ac:	d1e9      	bne.n	9482 <__aeabi_fsub+0x22e>
    94ae:	2b00      	cmp	r3, #0
    94b0:	d063      	beq.n	957a <__aeabi_fsub+0x326>
    94b2:	2e00      	cmp	r6, #0
    94b4:	d100      	bne.n	94b8 <__aeabi_fsub+0x264>
    94b6:	e713      	b.n	92e0 <__aeabi_fsub+0x8c>
    94b8:	199b      	adds	r3, r3, r6
    94ba:	015a      	lsls	r2, r3, #5
    94bc:	d400      	bmi.n	94c0 <__aeabi_fsub+0x26c>
    94be:	e73e      	b.n	933e <__aeabi_fsub+0xea>
    94c0:	4a31      	ldr	r2, [pc, #196]	; (9588 <__aeabi_fsub+0x334>)
    94c2:	000c      	movs	r4, r1
    94c4:	4013      	ands	r3, r2
    94c6:	e70b      	b.n	92e0 <__aeabi_fsub+0x8c>
    94c8:	2c00      	cmp	r4, #0
    94ca:	d11e      	bne.n	950a <__aeabi_fsub+0x2b6>
    94cc:	2b00      	cmp	r3, #0
    94ce:	d12f      	bne.n	9530 <__aeabi_fsub+0x2dc>
    94d0:	2e00      	cmp	r6, #0
    94d2:	d04f      	beq.n	9574 <__aeabi_fsub+0x320>
    94d4:	0033      	movs	r3, r6
    94d6:	000d      	movs	r5, r1
    94d8:	e702      	b.n	92e0 <__aeabi_fsub+0x8c>
    94da:	2601      	movs	r6, #1
    94dc:	e755      	b.n	938a <__aeabi_fsub+0x136>
    94de:	2c00      	cmp	r4, #0
    94e0:	d11f      	bne.n	9522 <__aeabi_fsub+0x2ce>
    94e2:	2b00      	cmp	r3, #0
    94e4:	d043      	beq.n	956e <__aeabi_fsub+0x31a>
    94e6:	43c9      	mvns	r1, r1
    94e8:	2900      	cmp	r1, #0
    94ea:	d00b      	beq.n	9504 <__aeabi_fsub+0x2b0>
    94ec:	28ff      	cmp	r0, #255	; 0xff
    94ee:	d039      	beq.n	9564 <__aeabi_fsub+0x310>
    94f0:	291b      	cmp	r1, #27
    94f2:	dc44      	bgt.n	957e <__aeabi_fsub+0x32a>
    94f4:	001c      	movs	r4, r3
    94f6:	2720      	movs	r7, #32
    94f8:	40cc      	lsrs	r4, r1
    94fa:	1a79      	subs	r1, r7, r1
    94fc:	408b      	lsls	r3, r1
    94fe:	1e59      	subs	r1, r3, #1
    9500:	418b      	sbcs	r3, r1
    9502:	4323      	orrs	r3, r4
    9504:	199b      	adds	r3, r3, r6
    9506:	0004      	movs	r4, r0
    9508:	e740      	b.n	938c <__aeabi_fsub+0x138>
    950a:	2b00      	cmp	r3, #0
    950c:	d11a      	bne.n	9544 <__aeabi_fsub+0x2f0>
    950e:	2e00      	cmp	r6, #0
    9510:	d124      	bne.n	955c <__aeabi_fsub+0x308>
    9512:	2780      	movs	r7, #128	; 0x80
    9514:	2200      	movs	r2, #0
    9516:	03ff      	lsls	r7, r7, #15
    9518:	e71b      	b.n	9352 <__aeabi_fsub+0xfe>
    951a:	0033      	movs	r3, r6
    951c:	0004      	movs	r4, r0
    951e:	000d      	movs	r5, r1
    9520:	e6de      	b.n	92e0 <__aeabi_fsub+0x8c>
    9522:	28ff      	cmp	r0, #255	; 0xff
    9524:	d01e      	beq.n	9564 <__aeabi_fsub+0x310>
    9526:	2480      	movs	r4, #128	; 0x80
    9528:	04e4      	lsls	r4, r4, #19
    952a:	4249      	negs	r1, r1
    952c:	4323      	orrs	r3, r4
    952e:	e7df      	b.n	94f0 <__aeabi_fsub+0x29c>
    9530:	2e00      	cmp	r6, #0
    9532:	d100      	bne.n	9536 <__aeabi_fsub+0x2e2>
    9534:	e6d4      	b.n	92e0 <__aeabi_fsub+0x8c>
    9536:	1b9f      	subs	r7, r3, r6
    9538:	017a      	lsls	r2, r7, #5
    953a:	d400      	bmi.n	953e <__aeabi_fsub+0x2ea>
    953c:	e737      	b.n	93ae <__aeabi_fsub+0x15a>
    953e:	1af3      	subs	r3, r6, r3
    9540:	000d      	movs	r5, r1
    9542:	e6cd      	b.n	92e0 <__aeabi_fsub+0x8c>
    9544:	24ff      	movs	r4, #255	; 0xff
    9546:	2e00      	cmp	r6, #0
    9548:	d100      	bne.n	954c <__aeabi_fsub+0x2f8>
    954a:	e6c9      	b.n	92e0 <__aeabi_fsub+0x8c>
    954c:	2280      	movs	r2, #128	; 0x80
    954e:	4650      	mov	r0, sl
    9550:	03d2      	lsls	r2, r2, #15
    9552:	4210      	tst	r0, r2
    9554:	d0a4      	beq.n	94a0 <__aeabi_fsub+0x24c>
    9556:	4660      	mov	r0, ip
    9558:	4210      	tst	r0, r2
    955a:	d1a1      	bne.n	94a0 <__aeabi_fsub+0x24c>
    955c:	0033      	movs	r3, r6
    955e:	000d      	movs	r5, r1
    9560:	24ff      	movs	r4, #255	; 0xff
    9562:	e6bd      	b.n	92e0 <__aeabi_fsub+0x8c>
    9564:	0033      	movs	r3, r6
    9566:	24ff      	movs	r4, #255	; 0xff
    9568:	e6ba      	b.n	92e0 <__aeabi_fsub+0x8c>
    956a:	2301      	movs	r3, #1
    956c:	e76e      	b.n	944c <__aeabi_fsub+0x1f8>
    956e:	0033      	movs	r3, r6
    9570:	0004      	movs	r4, r0
    9572:	e6b5      	b.n	92e0 <__aeabi_fsub+0x8c>
    9574:	2700      	movs	r7, #0
    9576:	2200      	movs	r2, #0
    9578:	e71c      	b.n	93b4 <__aeabi_fsub+0x160>
    957a:	0033      	movs	r3, r6
    957c:	e6b0      	b.n	92e0 <__aeabi_fsub+0x8c>
    957e:	2301      	movs	r3, #1
    9580:	e7c0      	b.n	9504 <__aeabi_fsub+0x2b0>
    9582:	46c0      	nop			; (mov r8, r8)
    9584:	7dffffff 	.word	0x7dffffff
    9588:	fbffffff 	.word	0xfbffffff

0000958c <__aeabi_f2iz>:
    958c:	0241      	lsls	r1, r0, #9
    958e:	0043      	lsls	r3, r0, #1
    9590:	0fc2      	lsrs	r2, r0, #31
    9592:	0a49      	lsrs	r1, r1, #9
    9594:	0e1b      	lsrs	r3, r3, #24
    9596:	2000      	movs	r0, #0
    9598:	2b7e      	cmp	r3, #126	; 0x7e
    959a:	dd0d      	ble.n	95b8 <__aeabi_f2iz+0x2c>
    959c:	2b9d      	cmp	r3, #157	; 0x9d
    959e:	dc0c      	bgt.n	95ba <__aeabi_f2iz+0x2e>
    95a0:	2080      	movs	r0, #128	; 0x80
    95a2:	0400      	lsls	r0, r0, #16
    95a4:	4301      	orrs	r1, r0
    95a6:	2b95      	cmp	r3, #149	; 0x95
    95a8:	dc0a      	bgt.n	95c0 <__aeabi_f2iz+0x34>
    95aa:	2096      	movs	r0, #150	; 0x96
    95ac:	1ac3      	subs	r3, r0, r3
    95ae:	40d9      	lsrs	r1, r3
    95b0:	4248      	negs	r0, r1
    95b2:	2a00      	cmp	r2, #0
    95b4:	d100      	bne.n	95b8 <__aeabi_f2iz+0x2c>
    95b6:	0008      	movs	r0, r1
    95b8:	4770      	bx	lr
    95ba:	4b03      	ldr	r3, [pc, #12]	; (95c8 <__aeabi_f2iz+0x3c>)
    95bc:	18d0      	adds	r0, r2, r3
    95be:	e7fb      	b.n	95b8 <__aeabi_f2iz+0x2c>
    95c0:	3b96      	subs	r3, #150	; 0x96
    95c2:	4099      	lsls	r1, r3
    95c4:	e7f4      	b.n	95b0 <__aeabi_f2iz+0x24>
    95c6:	46c0      	nop			; (mov r8, r8)
    95c8:	7fffffff 	.word	0x7fffffff

000095cc <__aeabi_i2f>:
    95cc:	b570      	push	{r4, r5, r6, lr}
    95ce:	2800      	cmp	r0, #0
    95d0:	d030      	beq.n	9634 <__aeabi_i2f+0x68>
    95d2:	17c3      	asrs	r3, r0, #31
    95d4:	18c4      	adds	r4, r0, r3
    95d6:	405c      	eors	r4, r3
    95d8:	0fc5      	lsrs	r5, r0, #31
    95da:	0020      	movs	r0, r4
    95dc:	f001 ff10 	bl	b400 <__clzsi2>
    95e0:	239e      	movs	r3, #158	; 0x9e
    95e2:	1a1b      	subs	r3, r3, r0
    95e4:	2b96      	cmp	r3, #150	; 0x96
    95e6:	dc0d      	bgt.n	9604 <__aeabi_i2f+0x38>
    95e8:	2296      	movs	r2, #150	; 0x96
    95ea:	1ad2      	subs	r2, r2, r3
    95ec:	4094      	lsls	r4, r2
    95ee:	002a      	movs	r2, r5
    95f0:	0264      	lsls	r4, r4, #9
    95f2:	0a64      	lsrs	r4, r4, #9
    95f4:	b2db      	uxtb	r3, r3
    95f6:	0264      	lsls	r4, r4, #9
    95f8:	05db      	lsls	r3, r3, #23
    95fa:	0a60      	lsrs	r0, r4, #9
    95fc:	07d2      	lsls	r2, r2, #31
    95fe:	4318      	orrs	r0, r3
    9600:	4310      	orrs	r0, r2
    9602:	bd70      	pop	{r4, r5, r6, pc}
    9604:	2b99      	cmp	r3, #153	; 0x99
    9606:	dc19      	bgt.n	963c <__aeabi_i2f+0x70>
    9608:	2299      	movs	r2, #153	; 0x99
    960a:	1ad2      	subs	r2, r2, r3
    960c:	2a00      	cmp	r2, #0
    960e:	dd29      	ble.n	9664 <__aeabi_i2f+0x98>
    9610:	4094      	lsls	r4, r2
    9612:	0022      	movs	r2, r4
    9614:	4c14      	ldr	r4, [pc, #80]	; (9668 <__aeabi_i2f+0x9c>)
    9616:	4014      	ands	r4, r2
    9618:	0751      	lsls	r1, r2, #29
    961a:	d004      	beq.n	9626 <__aeabi_i2f+0x5a>
    961c:	210f      	movs	r1, #15
    961e:	400a      	ands	r2, r1
    9620:	2a04      	cmp	r2, #4
    9622:	d000      	beq.n	9626 <__aeabi_i2f+0x5a>
    9624:	3404      	adds	r4, #4
    9626:	0162      	lsls	r2, r4, #5
    9628:	d413      	bmi.n	9652 <__aeabi_i2f+0x86>
    962a:	01a4      	lsls	r4, r4, #6
    962c:	0a64      	lsrs	r4, r4, #9
    962e:	b2db      	uxtb	r3, r3
    9630:	002a      	movs	r2, r5
    9632:	e7e0      	b.n	95f6 <__aeabi_i2f+0x2a>
    9634:	2200      	movs	r2, #0
    9636:	2300      	movs	r3, #0
    9638:	2400      	movs	r4, #0
    963a:	e7dc      	b.n	95f6 <__aeabi_i2f+0x2a>
    963c:	2205      	movs	r2, #5
    963e:	0021      	movs	r1, r4
    9640:	1a12      	subs	r2, r2, r0
    9642:	40d1      	lsrs	r1, r2
    9644:	22b9      	movs	r2, #185	; 0xb9
    9646:	1ad2      	subs	r2, r2, r3
    9648:	4094      	lsls	r4, r2
    964a:	1e62      	subs	r2, r4, #1
    964c:	4194      	sbcs	r4, r2
    964e:	430c      	orrs	r4, r1
    9650:	e7da      	b.n	9608 <__aeabi_i2f+0x3c>
    9652:	4b05      	ldr	r3, [pc, #20]	; (9668 <__aeabi_i2f+0x9c>)
    9654:	002a      	movs	r2, r5
    9656:	401c      	ands	r4, r3
    9658:	239f      	movs	r3, #159	; 0x9f
    965a:	01a4      	lsls	r4, r4, #6
    965c:	1a1b      	subs	r3, r3, r0
    965e:	0a64      	lsrs	r4, r4, #9
    9660:	b2db      	uxtb	r3, r3
    9662:	e7c8      	b.n	95f6 <__aeabi_i2f+0x2a>
    9664:	0022      	movs	r2, r4
    9666:	e7d5      	b.n	9614 <__aeabi_i2f+0x48>
    9668:	fbffffff 	.word	0xfbffffff

0000966c <__aeabi_ui2f>:
    966c:	b510      	push	{r4, lr}
    966e:	1e04      	subs	r4, r0, #0
    9670:	d027      	beq.n	96c2 <__aeabi_ui2f+0x56>
    9672:	f001 fec5 	bl	b400 <__clzsi2>
    9676:	239e      	movs	r3, #158	; 0x9e
    9678:	1a1b      	subs	r3, r3, r0
    967a:	2b96      	cmp	r3, #150	; 0x96
    967c:	dc0a      	bgt.n	9694 <__aeabi_ui2f+0x28>
    967e:	2296      	movs	r2, #150	; 0x96
    9680:	1ad2      	subs	r2, r2, r3
    9682:	4094      	lsls	r4, r2
    9684:	0264      	lsls	r4, r4, #9
    9686:	0a64      	lsrs	r4, r4, #9
    9688:	b2db      	uxtb	r3, r3
    968a:	0264      	lsls	r4, r4, #9
    968c:	05db      	lsls	r3, r3, #23
    968e:	0a60      	lsrs	r0, r4, #9
    9690:	4318      	orrs	r0, r3
    9692:	bd10      	pop	{r4, pc}
    9694:	2b99      	cmp	r3, #153	; 0x99
    9696:	dc17      	bgt.n	96c8 <__aeabi_ui2f+0x5c>
    9698:	2299      	movs	r2, #153	; 0x99
    969a:	1ad2      	subs	r2, r2, r3
    969c:	2a00      	cmp	r2, #0
    969e:	dd27      	ble.n	96f0 <__aeabi_ui2f+0x84>
    96a0:	4094      	lsls	r4, r2
    96a2:	0022      	movs	r2, r4
    96a4:	4c13      	ldr	r4, [pc, #76]	; (96f4 <__aeabi_ui2f+0x88>)
    96a6:	4014      	ands	r4, r2
    96a8:	0751      	lsls	r1, r2, #29
    96aa:	d004      	beq.n	96b6 <__aeabi_ui2f+0x4a>
    96ac:	210f      	movs	r1, #15
    96ae:	400a      	ands	r2, r1
    96b0:	2a04      	cmp	r2, #4
    96b2:	d000      	beq.n	96b6 <__aeabi_ui2f+0x4a>
    96b4:	3404      	adds	r4, #4
    96b6:	0162      	lsls	r2, r4, #5
    96b8:	d412      	bmi.n	96e0 <__aeabi_ui2f+0x74>
    96ba:	01a4      	lsls	r4, r4, #6
    96bc:	0a64      	lsrs	r4, r4, #9
    96be:	b2db      	uxtb	r3, r3
    96c0:	e7e3      	b.n	968a <__aeabi_ui2f+0x1e>
    96c2:	2300      	movs	r3, #0
    96c4:	2400      	movs	r4, #0
    96c6:	e7e0      	b.n	968a <__aeabi_ui2f+0x1e>
    96c8:	22b9      	movs	r2, #185	; 0xb9
    96ca:	0021      	movs	r1, r4
    96cc:	1ad2      	subs	r2, r2, r3
    96ce:	4091      	lsls	r1, r2
    96d0:	000a      	movs	r2, r1
    96d2:	1e51      	subs	r1, r2, #1
    96d4:	418a      	sbcs	r2, r1
    96d6:	2105      	movs	r1, #5
    96d8:	1a09      	subs	r1, r1, r0
    96da:	40cc      	lsrs	r4, r1
    96dc:	4314      	orrs	r4, r2
    96de:	e7db      	b.n	9698 <__aeabi_ui2f+0x2c>
    96e0:	4b04      	ldr	r3, [pc, #16]	; (96f4 <__aeabi_ui2f+0x88>)
    96e2:	401c      	ands	r4, r3
    96e4:	239f      	movs	r3, #159	; 0x9f
    96e6:	01a4      	lsls	r4, r4, #6
    96e8:	1a1b      	subs	r3, r3, r0
    96ea:	0a64      	lsrs	r4, r4, #9
    96ec:	b2db      	uxtb	r3, r3
    96ee:	e7cc      	b.n	968a <__aeabi_ui2f+0x1e>
    96f0:	0022      	movs	r2, r4
    96f2:	e7d7      	b.n	96a4 <__aeabi_ui2f+0x38>
    96f4:	fbffffff 	.word	0xfbffffff

000096f8 <__aeabi_dadd>:
    96f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    96fa:	4645      	mov	r5, r8
    96fc:	46de      	mov	lr, fp
    96fe:	4657      	mov	r7, sl
    9700:	464e      	mov	r6, r9
    9702:	030c      	lsls	r4, r1, #12
    9704:	b5e0      	push	{r5, r6, r7, lr}
    9706:	004e      	lsls	r6, r1, #1
    9708:	0fc9      	lsrs	r1, r1, #31
    970a:	4688      	mov	r8, r1
    970c:	000d      	movs	r5, r1
    970e:	0a61      	lsrs	r1, r4, #9
    9710:	0f44      	lsrs	r4, r0, #29
    9712:	430c      	orrs	r4, r1
    9714:	00c7      	lsls	r7, r0, #3
    9716:	0319      	lsls	r1, r3, #12
    9718:	0058      	lsls	r0, r3, #1
    971a:	0fdb      	lsrs	r3, r3, #31
    971c:	469b      	mov	fp, r3
    971e:	0a4b      	lsrs	r3, r1, #9
    9720:	0f51      	lsrs	r1, r2, #29
    9722:	430b      	orrs	r3, r1
    9724:	0d76      	lsrs	r6, r6, #21
    9726:	0d40      	lsrs	r0, r0, #21
    9728:	0019      	movs	r1, r3
    972a:	00d2      	lsls	r2, r2, #3
    972c:	45d8      	cmp	r8, fp
    972e:	d100      	bne.n	9732 <__aeabi_dadd+0x3a>
    9730:	e0ae      	b.n	9890 <__aeabi_dadd+0x198>
    9732:	1a35      	subs	r5, r6, r0
    9734:	2d00      	cmp	r5, #0
    9736:	dc00      	bgt.n	973a <__aeabi_dadd+0x42>
    9738:	e0f6      	b.n	9928 <__aeabi_dadd+0x230>
    973a:	2800      	cmp	r0, #0
    973c:	d10f      	bne.n	975e <__aeabi_dadd+0x66>
    973e:	4313      	orrs	r3, r2
    9740:	d100      	bne.n	9744 <__aeabi_dadd+0x4c>
    9742:	e0db      	b.n	98fc <__aeabi_dadd+0x204>
    9744:	1e6b      	subs	r3, r5, #1
    9746:	2b00      	cmp	r3, #0
    9748:	d000      	beq.n	974c <__aeabi_dadd+0x54>
    974a:	e137      	b.n	99bc <__aeabi_dadd+0x2c4>
    974c:	1aba      	subs	r2, r7, r2
    974e:	4297      	cmp	r7, r2
    9750:	41bf      	sbcs	r7, r7
    9752:	1a64      	subs	r4, r4, r1
    9754:	427f      	negs	r7, r7
    9756:	1be4      	subs	r4, r4, r7
    9758:	2601      	movs	r6, #1
    975a:	0017      	movs	r7, r2
    975c:	e024      	b.n	97a8 <__aeabi_dadd+0xb0>
    975e:	4bc6      	ldr	r3, [pc, #792]	; (9a78 <__aeabi_dadd+0x380>)
    9760:	429e      	cmp	r6, r3
    9762:	d04d      	beq.n	9800 <__aeabi_dadd+0x108>
    9764:	2380      	movs	r3, #128	; 0x80
    9766:	041b      	lsls	r3, r3, #16
    9768:	4319      	orrs	r1, r3
    976a:	2d38      	cmp	r5, #56	; 0x38
    976c:	dd00      	ble.n	9770 <__aeabi_dadd+0x78>
    976e:	e107      	b.n	9980 <__aeabi_dadd+0x288>
    9770:	2d1f      	cmp	r5, #31
    9772:	dd00      	ble.n	9776 <__aeabi_dadd+0x7e>
    9774:	e138      	b.n	99e8 <__aeabi_dadd+0x2f0>
    9776:	2020      	movs	r0, #32
    9778:	1b43      	subs	r3, r0, r5
    977a:	469a      	mov	sl, r3
    977c:	000b      	movs	r3, r1
    977e:	4650      	mov	r0, sl
    9780:	4083      	lsls	r3, r0
    9782:	4699      	mov	r9, r3
    9784:	0013      	movs	r3, r2
    9786:	4648      	mov	r0, r9
    9788:	40eb      	lsrs	r3, r5
    978a:	4318      	orrs	r0, r3
    978c:	0003      	movs	r3, r0
    978e:	4650      	mov	r0, sl
    9790:	4082      	lsls	r2, r0
    9792:	1e50      	subs	r0, r2, #1
    9794:	4182      	sbcs	r2, r0
    9796:	40e9      	lsrs	r1, r5
    9798:	431a      	orrs	r2, r3
    979a:	1aba      	subs	r2, r7, r2
    979c:	1a61      	subs	r1, r4, r1
    979e:	4297      	cmp	r7, r2
    97a0:	41a4      	sbcs	r4, r4
    97a2:	0017      	movs	r7, r2
    97a4:	4264      	negs	r4, r4
    97a6:	1b0c      	subs	r4, r1, r4
    97a8:	0223      	lsls	r3, r4, #8
    97aa:	d562      	bpl.n	9872 <__aeabi_dadd+0x17a>
    97ac:	0264      	lsls	r4, r4, #9
    97ae:	0a65      	lsrs	r5, r4, #9
    97b0:	2d00      	cmp	r5, #0
    97b2:	d100      	bne.n	97b6 <__aeabi_dadd+0xbe>
    97b4:	e0df      	b.n	9976 <__aeabi_dadd+0x27e>
    97b6:	0028      	movs	r0, r5
    97b8:	f001 fe22 	bl	b400 <__clzsi2>
    97bc:	0003      	movs	r3, r0
    97be:	3b08      	subs	r3, #8
    97c0:	2b1f      	cmp	r3, #31
    97c2:	dd00      	ble.n	97c6 <__aeabi_dadd+0xce>
    97c4:	e0d2      	b.n	996c <__aeabi_dadd+0x274>
    97c6:	2220      	movs	r2, #32
    97c8:	003c      	movs	r4, r7
    97ca:	1ad2      	subs	r2, r2, r3
    97cc:	409d      	lsls	r5, r3
    97ce:	40d4      	lsrs	r4, r2
    97d0:	409f      	lsls	r7, r3
    97d2:	4325      	orrs	r5, r4
    97d4:	429e      	cmp	r6, r3
    97d6:	dd00      	ble.n	97da <__aeabi_dadd+0xe2>
    97d8:	e0c4      	b.n	9964 <__aeabi_dadd+0x26c>
    97da:	1b9e      	subs	r6, r3, r6
    97dc:	1c73      	adds	r3, r6, #1
    97de:	2b1f      	cmp	r3, #31
    97e0:	dd00      	ble.n	97e4 <__aeabi_dadd+0xec>
    97e2:	e0f1      	b.n	99c8 <__aeabi_dadd+0x2d0>
    97e4:	2220      	movs	r2, #32
    97e6:	0038      	movs	r0, r7
    97e8:	0029      	movs	r1, r5
    97ea:	1ad2      	subs	r2, r2, r3
    97ec:	40d8      	lsrs	r0, r3
    97ee:	4091      	lsls	r1, r2
    97f0:	4097      	lsls	r7, r2
    97f2:	002c      	movs	r4, r5
    97f4:	4301      	orrs	r1, r0
    97f6:	1e78      	subs	r0, r7, #1
    97f8:	4187      	sbcs	r7, r0
    97fa:	40dc      	lsrs	r4, r3
    97fc:	2600      	movs	r6, #0
    97fe:	430f      	orrs	r7, r1
    9800:	077b      	lsls	r3, r7, #29
    9802:	d009      	beq.n	9818 <__aeabi_dadd+0x120>
    9804:	230f      	movs	r3, #15
    9806:	403b      	ands	r3, r7
    9808:	2b04      	cmp	r3, #4
    980a:	d005      	beq.n	9818 <__aeabi_dadd+0x120>
    980c:	1d3b      	adds	r3, r7, #4
    980e:	42bb      	cmp	r3, r7
    9810:	41bf      	sbcs	r7, r7
    9812:	427f      	negs	r7, r7
    9814:	19e4      	adds	r4, r4, r7
    9816:	001f      	movs	r7, r3
    9818:	0223      	lsls	r3, r4, #8
    981a:	d52c      	bpl.n	9876 <__aeabi_dadd+0x17e>
    981c:	4b96      	ldr	r3, [pc, #600]	; (9a78 <__aeabi_dadd+0x380>)
    981e:	3601      	adds	r6, #1
    9820:	429e      	cmp	r6, r3
    9822:	d100      	bne.n	9826 <__aeabi_dadd+0x12e>
    9824:	e09a      	b.n	995c <__aeabi_dadd+0x264>
    9826:	4645      	mov	r5, r8
    9828:	4b94      	ldr	r3, [pc, #592]	; (9a7c <__aeabi_dadd+0x384>)
    982a:	08ff      	lsrs	r7, r7, #3
    982c:	401c      	ands	r4, r3
    982e:	0760      	lsls	r0, r4, #29
    9830:	0576      	lsls	r6, r6, #21
    9832:	0264      	lsls	r4, r4, #9
    9834:	4307      	orrs	r7, r0
    9836:	0b24      	lsrs	r4, r4, #12
    9838:	0d76      	lsrs	r6, r6, #21
    983a:	2100      	movs	r1, #0
    983c:	0324      	lsls	r4, r4, #12
    983e:	0b23      	lsrs	r3, r4, #12
    9840:	0d0c      	lsrs	r4, r1, #20
    9842:	4a8f      	ldr	r2, [pc, #572]	; (9a80 <__aeabi_dadd+0x388>)
    9844:	0524      	lsls	r4, r4, #20
    9846:	431c      	orrs	r4, r3
    9848:	4014      	ands	r4, r2
    984a:	0533      	lsls	r3, r6, #20
    984c:	4323      	orrs	r3, r4
    984e:	005b      	lsls	r3, r3, #1
    9850:	07ed      	lsls	r5, r5, #31
    9852:	085b      	lsrs	r3, r3, #1
    9854:	432b      	orrs	r3, r5
    9856:	0038      	movs	r0, r7
    9858:	0019      	movs	r1, r3
    985a:	bc3c      	pop	{r2, r3, r4, r5}
    985c:	4690      	mov	r8, r2
    985e:	4699      	mov	r9, r3
    9860:	46a2      	mov	sl, r4
    9862:	46ab      	mov	fp, r5
    9864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9866:	4664      	mov	r4, ip
    9868:	4304      	orrs	r4, r0
    986a:	d100      	bne.n	986e <__aeabi_dadd+0x176>
    986c:	e211      	b.n	9c92 <__aeabi_dadd+0x59a>
    986e:	0004      	movs	r4, r0
    9870:	4667      	mov	r7, ip
    9872:	077b      	lsls	r3, r7, #29
    9874:	d1c6      	bne.n	9804 <__aeabi_dadd+0x10c>
    9876:	4645      	mov	r5, r8
    9878:	0760      	lsls	r0, r4, #29
    987a:	08ff      	lsrs	r7, r7, #3
    987c:	4307      	orrs	r7, r0
    987e:	08e4      	lsrs	r4, r4, #3
    9880:	4b7d      	ldr	r3, [pc, #500]	; (9a78 <__aeabi_dadd+0x380>)
    9882:	429e      	cmp	r6, r3
    9884:	d030      	beq.n	98e8 <__aeabi_dadd+0x1f0>
    9886:	0324      	lsls	r4, r4, #12
    9888:	0576      	lsls	r6, r6, #21
    988a:	0b24      	lsrs	r4, r4, #12
    988c:	0d76      	lsrs	r6, r6, #21
    988e:	e7d4      	b.n	983a <__aeabi_dadd+0x142>
    9890:	1a33      	subs	r3, r6, r0
    9892:	469a      	mov	sl, r3
    9894:	2b00      	cmp	r3, #0
    9896:	dd78      	ble.n	998a <__aeabi_dadd+0x292>
    9898:	2800      	cmp	r0, #0
    989a:	d031      	beq.n	9900 <__aeabi_dadd+0x208>
    989c:	4876      	ldr	r0, [pc, #472]	; (9a78 <__aeabi_dadd+0x380>)
    989e:	4286      	cmp	r6, r0
    98a0:	d0ae      	beq.n	9800 <__aeabi_dadd+0x108>
    98a2:	2080      	movs	r0, #128	; 0x80
    98a4:	0400      	lsls	r0, r0, #16
    98a6:	4301      	orrs	r1, r0
    98a8:	4653      	mov	r3, sl
    98aa:	2b38      	cmp	r3, #56	; 0x38
    98ac:	dc00      	bgt.n	98b0 <__aeabi_dadd+0x1b8>
    98ae:	e0e9      	b.n	9a84 <__aeabi_dadd+0x38c>
    98b0:	430a      	orrs	r2, r1
    98b2:	1e51      	subs	r1, r2, #1
    98b4:	418a      	sbcs	r2, r1
    98b6:	2100      	movs	r1, #0
    98b8:	19d2      	adds	r2, r2, r7
    98ba:	42ba      	cmp	r2, r7
    98bc:	41bf      	sbcs	r7, r7
    98be:	1909      	adds	r1, r1, r4
    98c0:	427c      	negs	r4, r7
    98c2:	0017      	movs	r7, r2
    98c4:	190c      	adds	r4, r1, r4
    98c6:	0223      	lsls	r3, r4, #8
    98c8:	d5d3      	bpl.n	9872 <__aeabi_dadd+0x17a>
    98ca:	4b6b      	ldr	r3, [pc, #428]	; (9a78 <__aeabi_dadd+0x380>)
    98cc:	3601      	adds	r6, #1
    98ce:	429e      	cmp	r6, r3
    98d0:	d100      	bne.n	98d4 <__aeabi_dadd+0x1dc>
    98d2:	e13a      	b.n	9b4a <__aeabi_dadd+0x452>
    98d4:	2001      	movs	r0, #1
    98d6:	4b69      	ldr	r3, [pc, #420]	; (9a7c <__aeabi_dadd+0x384>)
    98d8:	401c      	ands	r4, r3
    98da:	087b      	lsrs	r3, r7, #1
    98dc:	4007      	ands	r7, r0
    98de:	431f      	orrs	r7, r3
    98e0:	07e0      	lsls	r0, r4, #31
    98e2:	4307      	orrs	r7, r0
    98e4:	0864      	lsrs	r4, r4, #1
    98e6:	e78b      	b.n	9800 <__aeabi_dadd+0x108>
    98e8:	0023      	movs	r3, r4
    98ea:	433b      	orrs	r3, r7
    98ec:	d100      	bne.n	98f0 <__aeabi_dadd+0x1f8>
    98ee:	e1cb      	b.n	9c88 <__aeabi_dadd+0x590>
    98f0:	2280      	movs	r2, #128	; 0x80
    98f2:	0312      	lsls	r2, r2, #12
    98f4:	4314      	orrs	r4, r2
    98f6:	0324      	lsls	r4, r4, #12
    98f8:	0b24      	lsrs	r4, r4, #12
    98fa:	e79e      	b.n	983a <__aeabi_dadd+0x142>
    98fc:	002e      	movs	r6, r5
    98fe:	e77f      	b.n	9800 <__aeabi_dadd+0x108>
    9900:	0008      	movs	r0, r1
    9902:	4310      	orrs	r0, r2
    9904:	d100      	bne.n	9908 <__aeabi_dadd+0x210>
    9906:	e0b4      	b.n	9a72 <__aeabi_dadd+0x37a>
    9908:	1e58      	subs	r0, r3, #1
    990a:	2800      	cmp	r0, #0
    990c:	d000      	beq.n	9910 <__aeabi_dadd+0x218>
    990e:	e0de      	b.n	9ace <__aeabi_dadd+0x3d6>
    9910:	18ba      	adds	r2, r7, r2
    9912:	42ba      	cmp	r2, r7
    9914:	419b      	sbcs	r3, r3
    9916:	1864      	adds	r4, r4, r1
    9918:	425b      	negs	r3, r3
    991a:	18e4      	adds	r4, r4, r3
    991c:	0017      	movs	r7, r2
    991e:	2601      	movs	r6, #1
    9920:	0223      	lsls	r3, r4, #8
    9922:	d5a6      	bpl.n	9872 <__aeabi_dadd+0x17a>
    9924:	2602      	movs	r6, #2
    9926:	e7d5      	b.n	98d4 <__aeabi_dadd+0x1dc>
    9928:	2d00      	cmp	r5, #0
    992a:	d16e      	bne.n	9a0a <__aeabi_dadd+0x312>
    992c:	1c70      	adds	r0, r6, #1
    992e:	0540      	lsls	r0, r0, #21
    9930:	0d40      	lsrs	r0, r0, #21
    9932:	2801      	cmp	r0, #1
    9934:	dc00      	bgt.n	9938 <__aeabi_dadd+0x240>
    9936:	e0f9      	b.n	9b2c <__aeabi_dadd+0x434>
    9938:	1ab8      	subs	r0, r7, r2
    993a:	4684      	mov	ip, r0
    993c:	4287      	cmp	r7, r0
    993e:	4180      	sbcs	r0, r0
    9940:	1ae5      	subs	r5, r4, r3
    9942:	4240      	negs	r0, r0
    9944:	1a2d      	subs	r5, r5, r0
    9946:	0228      	lsls	r0, r5, #8
    9948:	d400      	bmi.n	994c <__aeabi_dadd+0x254>
    994a:	e089      	b.n	9a60 <__aeabi_dadd+0x368>
    994c:	1bd7      	subs	r7, r2, r7
    994e:	42ba      	cmp	r2, r7
    9950:	4192      	sbcs	r2, r2
    9952:	1b1c      	subs	r4, r3, r4
    9954:	4252      	negs	r2, r2
    9956:	1aa5      	subs	r5, r4, r2
    9958:	46d8      	mov	r8, fp
    995a:	e729      	b.n	97b0 <__aeabi_dadd+0xb8>
    995c:	4645      	mov	r5, r8
    995e:	2400      	movs	r4, #0
    9960:	2700      	movs	r7, #0
    9962:	e76a      	b.n	983a <__aeabi_dadd+0x142>
    9964:	4c45      	ldr	r4, [pc, #276]	; (9a7c <__aeabi_dadd+0x384>)
    9966:	1af6      	subs	r6, r6, r3
    9968:	402c      	ands	r4, r5
    996a:	e749      	b.n	9800 <__aeabi_dadd+0x108>
    996c:	003d      	movs	r5, r7
    996e:	3828      	subs	r0, #40	; 0x28
    9970:	4085      	lsls	r5, r0
    9972:	2700      	movs	r7, #0
    9974:	e72e      	b.n	97d4 <__aeabi_dadd+0xdc>
    9976:	0038      	movs	r0, r7
    9978:	f001 fd42 	bl	b400 <__clzsi2>
    997c:	3020      	adds	r0, #32
    997e:	e71d      	b.n	97bc <__aeabi_dadd+0xc4>
    9980:	430a      	orrs	r2, r1
    9982:	1e51      	subs	r1, r2, #1
    9984:	418a      	sbcs	r2, r1
    9986:	2100      	movs	r1, #0
    9988:	e707      	b.n	979a <__aeabi_dadd+0xa2>
    998a:	2b00      	cmp	r3, #0
    998c:	d000      	beq.n	9990 <__aeabi_dadd+0x298>
    998e:	e0f3      	b.n	9b78 <__aeabi_dadd+0x480>
    9990:	1c70      	adds	r0, r6, #1
    9992:	0543      	lsls	r3, r0, #21
    9994:	0d5b      	lsrs	r3, r3, #21
    9996:	2b01      	cmp	r3, #1
    9998:	dc00      	bgt.n	999c <__aeabi_dadd+0x2a4>
    999a:	e0ad      	b.n	9af8 <__aeabi_dadd+0x400>
    999c:	4b36      	ldr	r3, [pc, #216]	; (9a78 <__aeabi_dadd+0x380>)
    999e:	4298      	cmp	r0, r3
    99a0:	d100      	bne.n	99a4 <__aeabi_dadd+0x2ac>
    99a2:	e0d1      	b.n	9b48 <__aeabi_dadd+0x450>
    99a4:	18ba      	adds	r2, r7, r2
    99a6:	42ba      	cmp	r2, r7
    99a8:	41bf      	sbcs	r7, r7
    99aa:	1864      	adds	r4, r4, r1
    99ac:	427f      	negs	r7, r7
    99ae:	19e4      	adds	r4, r4, r7
    99b0:	07e7      	lsls	r7, r4, #31
    99b2:	0852      	lsrs	r2, r2, #1
    99b4:	4317      	orrs	r7, r2
    99b6:	0864      	lsrs	r4, r4, #1
    99b8:	0006      	movs	r6, r0
    99ba:	e721      	b.n	9800 <__aeabi_dadd+0x108>
    99bc:	482e      	ldr	r0, [pc, #184]	; (9a78 <__aeabi_dadd+0x380>)
    99be:	4285      	cmp	r5, r0
    99c0:	d100      	bne.n	99c4 <__aeabi_dadd+0x2cc>
    99c2:	e093      	b.n	9aec <__aeabi_dadd+0x3f4>
    99c4:	001d      	movs	r5, r3
    99c6:	e6d0      	b.n	976a <__aeabi_dadd+0x72>
    99c8:	0029      	movs	r1, r5
    99ca:	3e1f      	subs	r6, #31
    99cc:	40f1      	lsrs	r1, r6
    99ce:	2b20      	cmp	r3, #32
    99d0:	d100      	bne.n	99d4 <__aeabi_dadd+0x2dc>
    99d2:	e08d      	b.n	9af0 <__aeabi_dadd+0x3f8>
    99d4:	2240      	movs	r2, #64	; 0x40
    99d6:	1ad3      	subs	r3, r2, r3
    99d8:	409d      	lsls	r5, r3
    99da:	432f      	orrs	r7, r5
    99dc:	1e7d      	subs	r5, r7, #1
    99de:	41af      	sbcs	r7, r5
    99e0:	2400      	movs	r4, #0
    99e2:	430f      	orrs	r7, r1
    99e4:	2600      	movs	r6, #0
    99e6:	e744      	b.n	9872 <__aeabi_dadd+0x17a>
    99e8:	002b      	movs	r3, r5
    99ea:	0008      	movs	r0, r1
    99ec:	3b20      	subs	r3, #32
    99ee:	40d8      	lsrs	r0, r3
    99f0:	0003      	movs	r3, r0
    99f2:	2d20      	cmp	r5, #32
    99f4:	d100      	bne.n	99f8 <__aeabi_dadd+0x300>
    99f6:	e07d      	b.n	9af4 <__aeabi_dadd+0x3fc>
    99f8:	2040      	movs	r0, #64	; 0x40
    99fa:	1b45      	subs	r5, r0, r5
    99fc:	40a9      	lsls	r1, r5
    99fe:	430a      	orrs	r2, r1
    9a00:	1e51      	subs	r1, r2, #1
    9a02:	418a      	sbcs	r2, r1
    9a04:	2100      	movs	r1, #0
    9a06:	431a      	orrs	r2, r3
    9a08:	e6c7      	b.n	979a <__aeabi_dadd+0xa2>
    9a0a:	2e00      	cmp	r6, #0
    9a0c:	d050      	beq.n	9ab0 <__aeabi_dadd+0x3b8>
    9a0e:	4e1a      	ldr	r6, [pc, #104]	; (9a78 <__aeabi_dadd+0x380>)
    9a10:	42b0      	cmp	r0, r6
    9a12:	d057      	beq.n	9ac4 <__aeabi_dadd+0x3cc>
    9a14:	2680      	movs	r6, #128	; 0x80
    9a16:	426b      	negs	r3, r5
    9a18:	4699      	mov	r9, r3
    9a1a:	0436      	lsls	r6, r6, #16
    9a1c:	4334      	orrs	r4, r6
    9a1e:	464b      	mov	r3, r9
    9a20:	2b38      	cmp	r3, #56	; 0x38
    9a22:	dd00      	ble.n	9a26 <__aeabi_dadd+0x32e>
    9a24:	e0d6      	b.n	9bd4 <__aeabi_dadd+0x4dc>
    9a26:	2b1f      	cmp	r3, #31
    9a28:	dd00      	ble.n	9a2c <__aeabi_dadd+0x334>
    9a2a:	e135      	b.n	9c98 <__aeabi_dadd+0x5a0>
    9a2c:	2620      	movs	r6, #32
    9a2e:	1af5      	subs	r5, r6, r3
    9a30:	0026      	movs	r6, r4
    9a32:	40ae      	lsls	r6, r5
    9a34:	46b2      	mov	sl, r6
    9a36:	003e      	movs	r6, r7
    9a38:	40de      	lsrs	r6, r3
    9a3a:	46ac      	mov	ip, r5
    9a3c:	0035      	movs	r5, r6
    9a3e:	4656      	mov	r6, sl
    9a40:	432e      	orrs	r6, r5
    9a42:	4665      	mov	r5, ip
    9a44:	40af      	lsls	r7, r5
    9a46:	1e7d      	subs	r5, r7, #1
    9a48:	41af      	sbcs	r7, r5
    9a4a:	40dc      	lsrs	r4, r3
    9a4c:	4337      	orrs	r7, r6
    9a4e:	1bd7      	subs	r7, r2, r7
    9a50:	42ba      	cmp	r2, r7
    9a52:	4192      	sbcs	r2, r2
    9a54:	1b0c      	subs	r4, r1, r4
    9a56:	4252      	negs	r2, r2
    9a58:	1aa4      	subs	r4, r4, r2
    9a5a:	0006      	movs	r6, r0
    9a5c:	46d8      	mov	r8, fp
    9a5e:	e6a3      	b.n	97a8 <__aeabi_dadd+0xb0>
    9a60:	4664      	mov	r4, ip
    9a62:	4667      	mov	r7, ip
    9a64:	432c      	orrs	r4, r5
    9a66:	d000      	beq.n	9a6a <__aeabi_dadd+0x372>
    9a68:	e6a2      	b.n	97b0 <__aeabi_dadd+0xb8>
    9a6a:	2500      	movs	r5, #0
    9a6c:	2600      	movs	r6, #0
    9a6e:	2700      	movs	r7, #0
    9a70:	e706      	b.n	9880 <__aeabi_dadd+0x188>
    9a72:	001e      	movs	r6, r3
    9a74:	e6c4      	b.n	9800 <__aeabi_dadd+0x108>
    9a76:	46c0      	nop			; (mov r8, r8)
    9a78:	000007ff 	.word	0x000007ff
    9a7c:	ff7fffff 	.word	0xff7fffff
    9a80:	800fffff 	.word	0x800fffff
    9a84:	2b1f      	cmp	r3, #31
    9a86:	dc63      	bgt.n	9b50 <__aeabi_dadd+0x458>
    9a88:	2020      	movs	r0, #32
    9a8a:	1ac3      	subs	r3, r0, r3
    9a8c:	0008      	movs	r0, r1
    9a8e:	4098      	lsls	r0, r3
    9a90:	469c      	mov	ip, r3
    9a92:	4683      	mov	fp, r0
    9a94:	4653      	mov	r3, sl
    9a96:	0010      	movs	r0, r2
    9a98:	40d8      	lsrs	r0, r3
    9a9a:	0003      	movs	r3, r0
    9a9c:	4658      	mov	r0, fp
    9a9e:	4318      	orrs	r0, r3
    9aa0:	4663      	mov	r3, ip
    9aa2:	409a      	lsls	r2, r3
    9aa4:	1e53      	subs	r3, r2, #1
    9aa6:	419a      	sbcs	r2, r3
    9aa8:	4653      	mov	r3, sl
    9aaa:	4302      	orrs	r2, r0
    9aac:	40d9      	lsrs	r1, r3
    9aae:	e703      	b.n	98b8 <__aeabi_dadd+0x1c0>
    9ab0:	0026      	movs	r6, r4
    9ab2:	433e      	orrs	r6, r7
    9ab4:	d006      	beq.n	9ac4 <__aeabi_dadd+0x3cc>
    9ab6:	43eb      	mvns	r3, r5
    9ab8:	4699      	mov	r9, r3
    9aba:	2b00      	cmp	r3, #0
    9abc:	d0c7      	beq.n	9a4e <__aeabi_dadd+0x356>
    9abe:	4e94      	ldr	r6, [pc, #592]	; (9d10 <__aeabi_dadd+0x618>)
    9ac0:	42b0      	cmp	r0, r6
    9ac2:	d1ac      	bne.n	9a1e <__aeabi_dadd+0x326>
    9ac4:	000c      	movs	r4, r1
    9ac6:	0017      	movs	r7, r2
    9ac8:	0006      	movs	r6, r0
    9aca:	46d8      	mov	r8, fp
    9acc:	e698      	b.n	9800 <__aeabi_dadd+0x108>
    9ace:	4b90      	ldr	r3, [pc, #576]	; (9d10 <__aeabi_dadd+0x618>)
    9ad0:	459a      	cmp	sl, r3
    9ad2:	d00b      	beq.n	9aec <__aeabi_dadd+0x3f4>
    9ad4:	4682      	mov	sl, r0
    9ad6:	e6e7      	b.n	98a8 <__aeabi_dadd+0x1b0>
    9ad8:	2800      	cmp	r0, #0
    9ada:	d000      	beq.n	9ade <__aeabi_dadd+0x3e6>
    9adc:	e09e      	b.n	9c1c <__aeabi_dadd+0x524>
    9ade:	0018      	movs	r0, r3
    9ae0:	4310      	orrs	r0, r2
    9ae2:	d100      	bne.n	9ae6 <__aeabi_dadd+0x3ee>
    9ae4:	e0e9      	b.n	9cba <__aeabi_dadd+0x5c2>
    9ae6:	001c      	movs	r4, r3
    9ae8:	0017      	movs	r7, r2
    9aea:	46d8      	mov	r8, fp
    9aec:	4e88      	ldr	r6, [pc, #544]	; (9d10 <__aeabi_dadd+0x618>)
    9aee:	e687      	b.n	9800 <__aeabi_dadd+0x108>
    9af0:	2500      	movs	r5, #0
    9af2:	e772      	b.n	99da <__aeabi_dadd+0x2e2>
    9af4:	2100      	movs	r1, #0
    9af6:	e782      	b.n	99fe <__aeabi_dadd+0x306>
    9af8:	0023      	movs	r3, r4
    9afa:	433b      	orrs	r3, r7
    9afc:	2e00      	cmp	r6, #0
    9afe:	d000      	beq.n	9b02 <__aeabi_dadd+0x40a>
    9b00:	e0ab      	b.n	9c5a <__aeabi_dadd+0x562>
    9b02:	2b00      	cmp	r3, #0
    9b04:	d100      	bne.n	9b08 <__aeabi_dadd+0x410>
    9b06:	e0e7      	b.n	9cd8 <__aeabi_dadd+0x5e0>
    9b08:	000b      	movs	r3, r1
    9b0a:	4313      	orrs	r3, r2
    9b0c:	d100      	bne.n	9b10 <__aeabi_dadd+0x418>
    9b0e:	e677      	b.n	9800 <__aeabi_dadd+0x108>
    9b10:	18ba      	adds	r2, r7, r2
    9b12:	42ba      	cmp	r2, r7
    9b14:	41bf      	sbcs	r7, r7
    9b16:	1864      	adds	r4, r4, r1
    9b18:	427f      	negs	r7, r7
    9b1a:	19e4      	adds	r4, r4, r7
    9b1c:	0223      	lsls	r3, r4, #8
    9b1e:	d400      	bmi.n	9b22 <__aeabi_dadd+0x42a>
    9b20:	e0f2      	b.n	9d08 <__aeabi_dadd+0x610>
    9b22:	4b7c      	ldr	r3, [pc, #496]	; (9d14 <__aeabi_dadd+0x61c>)
    9b24:	0017      	movs	r7, r2
    9b26:	401c      	ands	r4, r3
    9b28:	0006      	movs	r6, r0
    9b2a:	e669      	b.n	9800 <__aeabi_dadd+0x108>
    9b2c:	0020      	movs	r0, r4
    9b2e:	4338      	orrs	r0, r7
    9b30:	2e00      	cmp	r6, #0
    9b32:	d1d1      	bne.n	9ad8 <__aeabi_dadd+0x3e0>
    9b34:	2800      	cmp	r0, #0
    9b36:	d15b      	bne.n	9bf0 <__aeabi_dadd+0x4f8>
    9b38:	001c      	movs	r4, r3
    9b3a:	4314      	orrs	r4, r2
    9b3c:	d100      	bne.n	9b40 <__aeabi_dadd+0x448>
    9b3e:	e0a8      	b.n	9c92 <__aeabi_dadd+0x59a>
    9b40:	001c      	movs	r4, r3
    9b42:	0017      	movs	r7, r2
    9b44:	46d8      	mov	r8, fp
    9b46:	e65b      	b.n	9800 <__aeabi_dadd+0x108>
    9b48:	0006      	movs	r6, r0
    9b4a:	2400      	movs	r4, #0
    9b4c:	2700      	movs	r7, #0
    9b4e:	e697      	b.n	9880 <__aeabi_dadd+0x188>
    9b50:	4650      	mov	r0, sl
    9b52:	000b      	movs	r3, r1
    9b54:	3820      	subs	r0, #32
    9b56:	40c3      	lsrs	r3, r0
    9b58:	4699      	mov	r9, r3
    9b5a:	4653      	mov	r3, sl
    9b5c:	2b20      	cmp	r3, #32
    9b5e:	d100      	bne.n	9b62 <__aeabi_dadd+0x46a>
    9b60:	e095      	b.n	9c8e <__aeabi_dadd+0x596>
    9b62:	2340      	movs	r3, #64	; 0x40
    9b64:	4650      	mov	r0, sl
    9b66:	1a1b      	subs	r3, r3, r0
    9b68:	4099      	lsls	r1, r3
    9b6a:	430a      	orrs	r2, r1
    9b6c:	1e51      	subs	r1, r2, #1
    9b6e:	418a      	sbcs	r2, r1
    9b70:	464b      	mov	r3, r9
    9b72:	2100      	movs	r1, #0
    9b74:	431a      	orrs	r2, r3
    9b76:	e69f      	b.n	98b8 <__aeabi_dadd+0x1c0>
    9b78:	2e00      	cmp	r6, #0
    9b7a:	d130      	bne.n	9bde <__aeabi_dadd+0x4e6>
    9b7c:	0026      	movs	r6, r4
    9b7e:	433e      	orrs	r6, r7
    9b80:	d067      	beq.n	9c52 <__aeabi_dadd+0x55a>
    9b82:	43db      	mvns	r3, r3
    9b84:	469a      	mov	sl, r3
    9b86:	2b00      	cmp	r3, #0
    9b88:	d01c      	beq.n	9bc4 <__aeabi_dadd+0x4cc>
    9b8a:	4e61      	ldr	r6, [pc, #388]	; (9d10 <__aeabi_dadd+0x618>)
    9b8c:	42b0      	cmp	r0, r6
    9b8e:	d060      	beq.n	9c52 <__aeabi_dadd+0x55a>
    9b90:	4653      	mov	r3, sl
    9b92:	2b38      	cmp	r3, #56	; 0x38
    9b94:	dd00      	ble.n	9b98 <__aeabi_dadd+0x4a0>
    9b96:	e096      	b.n	9cc6 <__aeabi_dadd+0x5ce>
    9b98:	2b1f      	cmp	r3, #31
    9b9a:	dd00      	ble.n	9b9e <__aeabi_dadd+0x4a6>
    9b9c:	e09f      	b.n	9cde <__aeabi_dadd+0x5e6>
    9b9e:	2620      	movs	r6, #32
    9ba0:	1af3      	subs	r3, r6, r3
    9ba2:	0026      	movs	r6, r4
    9ba4:	409e      	lsls	r6, r3
    9ba6:	469c      	mov	ip, r3
    9ba8:	46b3      	mov	fp, r6
    9baa:	4653      	mov	r3, sl
    9bac:	003e      	movs	r6, r7
    9bae:	40de      	lsrs	r6, r3
    9bb0:	0033      	movs	r3, r6
    9bb2:	465e      	mov	r6, fp
    9bb4:	431e      	orrs	r6, r3
    9bb6:	4663      	mov	r3, ip
    9bb8:	409f      	lsls	r7, r3
    9bba:	1e7b      	subs	r3, r7, #1
    9bbc:	419f      	sbcs	r7, r3
    9bbe:	4653      	mov	r3, sl
    9bc0:	40dc      	lsrs	r4, r3
    9bc2:	4337      	orrs	r7, r6
    9bc4:	18bf      	adds	r7, r7, r2
    9bc6:	4297      	cmp	r7, r2
    9bc8:	4192      	sbcs	r2, r2
    9bca:	1864      	adds	r4, r4, r1
    9bcc:	4252      	negs	r2, r2
    9bce:	18a4      	adds	r4, r4, r2
    9bd0:	0006      	movs	r6, r0
    9bd2:	e678      	b.n	98c6 <__aeabi_dadd+0x1ce>
    9bd4:	4327      	orrs	r7, r4
    9bd6:	1e7c      	subs	r4, r7, #1
    9bd8:	41a7      	sbcs	r7, r4
    9bda:	2400      	movs	r4, #0
    9bdc:	e737      	b.n	9a4e <__aeabi_dadd+0x356>
    9bde:	4e4c      	ldr	r6, [pc, #304]	; (9d10 <__aeabi_dadd+0x618>)
    9be0:	42b0      	cmp	r0, r6
    9be2:	d036      	beq.n	9c52 <__aeabi_dadd+0x55a>
    9be4:	2680      	movs	r6, #128	; 0x80
    9be6:	425b      	negs	r3, r3
    9be8:	0436      	lsls	r6, r6, #16
    9bea:	469a      	mov	sl, r3
    9bec:	4334      	orrs	r4, r6
    9bee:	e7cf      	b.n	9b90 <__aeabi_dadd+0x498>
    9bf0:	0018      	movs	r0, r3
    9bf2:	4310      	orrs	r0, r2
    9bf4:	d100      	bne.n	9bf8 <__aeabi_dadd+0x500>
    9bf6:	e603      	b.n	9800 <__aeabi_dadd+0x108>
    9bf8:	1ab8      	subs	r0, r7, r2
    9bfa:	4684      	mov	ip, r0
    9bfc:	4567      	cmp	r7, ip
    9bfe:	41ad      	sbcs	r5, r5
    9c00:	1ae0      	subs	r0, r4, r3
    9c02:	426d      	negs	r5, r5
    9c04:	1b40      	subs	r0, r0, r5
    9c06:	0205      	lsls	r5, r0, #8
    9c08:	d400      	bmi.n	9c0c <__aeabi_dadd+0x514>
    9c0a:	e62c      	b.n	9866 <__aeabi_dadd+0x16e>
    9c0c:	1bd7      	subs	r7, r2, r7
    9c0e:	42ba      	cmp	r2, r7
    9c10:	4192      	sbcs	r2, r2
    9c12:	1b1c      	subs	r4, r3, r4
    9c14:	4252      	negs	r2, r2
    9c16:	1aa4      	subs	r4, r4, r2
    9c18:	46d8      	mov	r8, fp
    9c1a:	e5f1      	b.n	9800 <__aeabi_dadd+0x108>
    9c1c:	0018      	movs	r0, r3
    9c1e:	4310      	orrs	r0, r2
    9c20:	d100      	bne.n	9c24 <__aeabi_dadd+0x52c>
    9c22:	e763      	b.n	9aec <__aeabi_dadd+0x3f4>
    9c24:	08f8      	lsrs	r0, r7, #3
    9c26:	0767      	lsls	r7, r4, #29
    9c28:	4307      	orrs	r7, r0
    9c2a:	2080      	movs	r0, #128	; 0x80
    9c2c:	08e4      	lsrs	r4, r4, #3
    9c2e:	0300      	lsls	r0, r0, #12
    9c30:	4204      	tst	r4, r0
    9c32:	d008      	beq.n	9c46 <__aeabi_dadd+0x54e>
    9c34:	08dd      	lsrs	r5, r3, #3
    9c36:	4205      	tst	r5, r0
    9c38:	d105      	bne.n	9c46 <__aeabi_dadd+0x54e>
    9c3a:	08d2      	lsrs	r2, r2, #3
    9c3c:	0759      	lsls	r1, r3, #29
    9c3e:	4311      	orrs	r1, r2
    9c40:	000f      	movs	r7, r1
    9c42:	002c      	movs	r4, r5
    9c44:	46d8      	mov	r8, fp
    9c46:	0f7b      	lsrs	r3, r7, #29
    9c48:	00e4      	lsls	r4, r4, #3
    9c4a:	431c      	orrs	r4, r3
    9c4c:	00ff      	lsls	r7, r7, #3
    9c4e:	4e30      	ldr	r6, [pc, #192]	; (9d10 <__aeabi_dadd+0x618>)
    9c50:	e5d6      	b.n	9800 <__aeabi_dadd+0x108>
    9c52:	000c      	movs	r4, r1
    9c54:	0017      	movs	r7, r2
    9c56:	0006      	movs	r6, r0
    9c58:	e5d2      	b.n	9800 <__aeabi_dadd+0x108>
    9c5a:	2b00      	cmp	r3, #0
    9c5c:	d038      	beq.n	9cd0 <__aeabi_dadd+0x5d8>
    9c5e:	000b      	movs	r3, r1
    9c60:	4313      	orrs	r3, r2
    9c62:	d100      	bne.n	9c66 <__aeabi_dadd+0x56e>
    9c64:	e742      	b.n	9aec <__aeabi_dadd+0x3f4>
    9c66:	08f8      	lsrs	r0, r7, #3
    9c68:	0767      	lsls	r7, r4, #29
    9c6a:	4307      	orrs	r7, r0
    9c6c:	2080      	movs	r0, #128	; 0x80
    9c6e:	08e4      	lsrs	r4, r4, #3
    9c70:	0300      	lsls	r0, r0, #12
    9c72:	4204      	tst	r4, r0
    9c74:	d0e7      	beq.n	9c46 <__aeabi_dadd+0x54e>
    9c76:	08cb      	lsrs	r3, r1, #3
    9c78:	4203      	tst	r3, r0
    9c7a:	d1e4      	bne.n	9c46 <__aeabi_dadd+0x54e>
    9c7c:	08d2      	lsrs	r2, r2, #3
    9c7e:	0749      	lsls	r1, r1, #29
    9c80:	4311      	orrs	r1, r2
    9c82:	000f      	movs	r7, r1
    9c84:	001c      	movs	r4, r3
    9c86:	e7de      	b.n	9c46 <__aeabi_dadd+0x54e>
    9c88:	2700      	movs	r7, #0
    9c8a:	2400      	movs	r4, #0
    9c8c:	e5d5      	b.n	983a <__aeabi_dadd+0x142>
    9c8e:	2100      	movs	r1, #0
    9c90:	e76b      	b.n	9b6a <__aeabi_dadd+0x472>
    9c92:	2500      	movs	r5, #0
    9c94:	2700      	movs	r7, #0
    9c96:	e5f3      	b.n	9880 <__aeabi_dadd+0x188>
    9c98:	464e      	mov	r6, r9
    9c9a:	0025      	movs	r5, r4
    9c9c:	3e20      	subs	r6, #32
    9c9e:	40f5      	lsrs	r5, r6
    9ca0:	464b      	mov	r3, r9
    9ca2:	002e      	movs	r6, r5
    9ca4:	2b20      	cmp	r3, #32
    9ca6:	d02d      	beq.n	9d04 <__aeabi_dadd+0x60c>
    9ca8:	2540      	movs	r5, #64	; 0x40
    9caa:	1aed      	subs	r5, r5, r3
    9cac:	40ac      	lsls	r4, r5
    9cae:	4327      	orrs	r7, r4
    9cb0:	1e7c      	subs	r4, r7, #1
    9cb2:	41a7      	sbcs	r7, r4
    9cb4:	2400      	movs	r4, #0
    9cb6:	4337      	orrs	r7, r6
    9cb8:	e6c9      	b.n	9a4e <__aeabi_dadd+0x356>
    9cba:	2480      	movs	r4, #128	; 0x80
    9cbc:	2500      	movs	r5, #0
    9cbe:	0324      	lsls	r4, r4, #12
    9cc0:	4e13      	ldr	r6, [pc, #76]	; (9d10 <__aeabi_dadd+0x618>)
    9cc2:	2700      	movs	r7, #0
    9cc4:	e5dc      	b.n	9880 <__aeabi_dadd+0x188>
    9cc6:	4327      	orrs	r7, r4
    9cc8:	1e7c      	subs	r4, r7, #1
    9cca:	41a7      	sbcs	r7, r4
    9ccc:	2400      	movs	r4, #0
    9cce:	e779      	b.n	9bc4 <__aeabi_dadd+0x4cc>
    9cd0:	000c      	movs	r4, r1
    9cd2:	0017      	movs	r7, r2
    9cd4:	4e0e      	ldr	r6, [pc, #56]	; (9d10 <__aeabi_dadd+0x618>)
    9cd6:	e593      	b.n	9800 <__aeabi_dadd+0x108>
    9cd8:	000c      	movs	r4, r1
    9cda:	0017      	movs	r7, r2
    9cdc:	e590      	b.n	9800 <__aeabi_dadd+0x108>
    9cde:	4656      	mov	r6, sl
    9ce0:	0023      	movs	r3, r4
    9ce2:	3e20      	subs	r6, #32
    9ce4:	40f3      	lsrs	r3, r6
    9ce6:	4699      	mov	r9, r3
    9ce8:	4653      	mov	r3, sl
    9cea:	2b20      	cmp	r3, #32
    9cec:	d00e      	beq.n	9d0c <__aeabi_dadd+0x614>
    9cee:	2340      	movs	r3, #64	; 0x40
    9cf0:	4656      	mov	r6, sl
    9cf2:	1b9b      	subs	r3, r3, r6
    9cf4:	409c      	lsls	r4, r3
    9cf6:	4327      	orrs	r7, r4
    9cf8:	1e7c      	subs	r4, r7, #1
    9cfa:	41a7      	sbcs	r7, r4
    9cfc:	464b      	mov	r3, r9
    9cfe:	2400      	movs	r4, #0
    9d00:	431f      	orrs	r7, r3
    9d02:	e75f      	b.n	9bc4 <__aeabi_dadd+0x4cc>
    9d04:	2400      	movs	r4, #0
    9d06:	e7d2      	b.n	9cae <__aeabi_dadd+0x5b6>
    9d08:	0017      	movs	r7, r2
    9d0a:	e5b2      	b.n	9872 <__aeabi_dadd+0x17a>
    9d0c:	2400      	movs	r4, #0
    9d0e:	e7f2      	b.n	9cf6 <__aeabi_dadd+0x5fe>
    9d10:	000007ff 	.word	0x000007ff
    9d14:	ff7fffff 	.word	0xff7fffff

00009d18 <__aeabi_ddiv>:
    9d18:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d1a:	4657      	mov	r7, sl
    9d1c:	4645      	mov	r5, r8
    9d1e:	46de      	mov	lr, fp
    9d20:	464e      	mov	r6, r9
    9d22:	b5e0      	push	{r5, r6, r7, lr}
    9d24:	004c      	lsls	r4, r1, #1
    9d26:	030e      	lsls	r6, r1, #12
    9d28:	b087      	sub	sp, #28
    9d2a:	4683      	mov	fp, r0
    9d2c:	4692      	mov	sl, r2
    9d2e:	001d      	movs	r5, r3
    9d30:	4680      	mov	r8, r0
    9d32:	0b36      	lsrs	r6, r6, #12
    9d34:	0d64      	lsrs	r4, r4, #21
    9d36:	0fcf      	lsrs	r7, r1, #31
    9d38:	2c00      	cmp	r4, #0
    9d3a:	d04f      	beq.n	9ddc <__aeabi_ddiv+0xc4>
    9d3c:	4b6f      	ldr	r3, [pc, #444]	; (9efc <__aeabi_ddiv+0x1e4>)
    9d3e:	429c      	cmp	r4, r3
    9d40:	d035      	beq.n	9dae <__aeabi_ddiv+0x96>
    9d42:	2380      	movs	r3, #128	; 0x80
    9d44:	0f42      	lsrs	r2, r0, #29
    9d46:	041b      	lsls	r3, r3, #16
    9d48:	00f6      	lsls	r6, r6, #3
    9d4a:	4313      	orrs	r3, r2
    9d4c:	4333      	orrs	r3, r6
    9d4e:	4699      	mov	r9, r3
    9d50:	00c3      	lsls	r3, r0, #3
    9d52:	4698      	mov	r8, r3
    9d54:	4b6a      	ldr	r3, [pc, #424]	; (9f00 <__aeabi_ddiv+0x1e8>)
    9d56:	2600      	movs	r6, #0
    9d58:	469c      	mov	ip, r3
    9d5a:	2300      	movs	r3, #0
    9d5c:	4464      	add	r4, ip
    9d5e:	9303      	str	r3, [sp, #12]
    9d60:	032b      	lsls	r3, r5, #12
    9d62:	0b1b      	lsrs	r3, r3, #12
    9d64:	469b      	mov	fp, r3
    9d66:	006b      	lsls	r3, r5, #1
    9d68:	0fed      	lsrs	r5, r5, #31
    9d6a:	4650      	mov	r0, sl
    9d6c:	0d5b      	lsrs	r3, r3, #21
    9d6e:	9501      	str	r5, [sp, #4]
    9d70:	d05e      	beq.n	9e30 <__aeabi_ddiv+0x118>
    9d72:	4a62      	ldr	r2, [pc, #392]	; (9efc <__aeabi_ddiv+0x1e4>)
    9d74:	4293      	cmp	r3, r2
    9d76:	d053      	beq.n	9e20 <__aeabi_ddiv+0x108>
    9d78:	465a      	mov	r2, fp
    9d7a:	00d1      	lsls	r1, r2, #3
    9d7c:	2280      	movs	r2, #128	; 0x80
    9d7e:	0f40      	lsrs	r0, r0, #29
    9d80:	0412      	lsls	r2, r2, #16
    9d82:	4302      	orrs	r2, r0
    9d84:	430a      	orrs	r2, r1
    9d86:	4693      	mov	fp, r2
    9d88:	4652      	mov	r2, sl
    9d8a:	00d1      	lsls	r1, r2, #3
    9d8c:	4a5c      	ldr	r2, [pc, #368]	; (9f00 <__aeabi_ddiv+0x1e8>)
    9d8e:	4694      	mov	ip, r2
    9d90:	2200      	movs	r2, #0
    9d92:	4463      	add	r3, ip
    9d94:	0038      	movs	r0, r7
    9d96:	4068      	eors	r0, r5
    9d98:	4684      	mov	ip, r0
    9d9a:	9002      	str	r0, [sp, #8]
    9d9c:	1ae4      	subs	r4, r4, r3
    9d9e:	4316      	orrs	r6, r2
    9da0:	2e0f      	cmp	r6, #15
    9da2:	d900      	bls.n	9da6 <__aeabi_ddiv+0x8e>
    9da4:	e0b4      	b.n	9f10 <__aeabi_ddiv+0x1f8>
    9da6:	4b57      	ldr	r3, [pc, #348]	; (9f04 <__aeabi_ddiv+0x1ec>)
    9da8:	00b6      	lsls	r6, r6, #2
    9daa:	599b      	ldr	r3, [r3, r6]
    9dac:	469f      	mov	pc, r3
    9dae:	0003      	movs	r3, r0
    9db0:	4333      	orrs	r3, r6
    9db2:	4699      	mov	r9, r3
    9db4:	d16c      	bne.n	9e90 <__aeabi_ddiv+0x178>
    9db6:	2300      	movs	r3, #0
    9db8:	4698      	mov	r8, r3
    9dba:	3302      	adds	r3, #2
    9dbc:	2608      	movs	r6, #8
    9dbe:	9303      	str	r3, [sp, #12]
    9dc0:	e7ce      	b.n	9d60 <__aeabi_ddiv+0x48>
    9dc2:	46cb      	mov	fp, r9
    9dc4:	4641      	mov	r1, r8
    9dc6:	9a03      	ldr	r2, [sp, #12]
    9dc8:	9701      	str	r7, [sp, #4]
    9dca:	2a02      	cmp	r2, #2
    9dcc:	d165      	bne.n	9e9a <__aeabi_ddiv+0x182>
    9dce:	9b01      	ldr	r3, [sp, #4]
    9dd0:	4c4a      	ldr	r4, [pc, #296]	; (9efc <__aeabi_ddiv+0x1e4>)
    9dd2:	469c      	mov	ip, r3
    9dd4:	2300      	movs	r3, #0
    9dd6:	2200      	movs	r2, #0
    9dd8:	4698      	mov	r8, r3
    9dda:	e06b      	b.n	9eb4 <__aeabi_ddiv+0x19c>
    9ddc:	0003      	movs	r3, r0
    9dde:	4333      	orrs	r3, r6
    9de0:	4699      	mov	r9, r3
    9de2:	d04e      	beq.n	9e82 <__aeabi_ddiv+0x16a>
    9de4:	2e00      	cmp	r6, #0
    9de6:	d100      	bne.n	9dea <__aeabi_ddiv+0xd2>
    9de8:	e1bc      	b.n	a164 <__aeabi_ddiv+0x44c>
    9dea:	0030      	movs	r0, r6
    9dec:	f001 fb08 	bl	b400 <__clzsi2>
    9df0:	0003      	movs	r3, r0
    9df2:	3b0b      	subs	r3, #11
    9df4:	2b1c      	cmp	r3, #28
    9df6:	dd00      	ble.n	9dfa <__aeabi_ddiv+0xe2>
    9df8:	e1ac      	b.n	a154 <__aeabi_ddiv+0x43c>
    9dfa:	221d      	movs	r2, #29
    9dfc:	1ad3      	subs	r3, r2, r3
    9dfe:	465a      	mov	r2, fp
    9e00:	0001      	movs	r1, r0
    9e02:	40da      	lsrs	r2, r3
    9e04:	3908      	subs	r1, #8
    9e06:	408e      	lsls	r6, r1
    9e08:	0013      	movs	r3, r2
    9e0a:	4333      	orrs	r3, r6
    9e0c:	4699      	mov	r9, r3
    9e0e:	465b      	mov	r3, fp
    9e10:	408b      	lsls	r3, r1
    9e12:	4698      	mov	r8, r3
    9e14:	2300      	movs	r3, #0
    9e16:	4c3c      	ldr	r4, [pc, #240]	; (9f08 <__aeabi_ddiv+0x1f0>)
    9e18:	2600      	movs	r6, #0
    9e1a:	1a24      	subs	r4, r4, r0
    9e1c:	9303      	str	r3, [sp, #12]
    9e1e:	e79f      	b.n	9d60 <__aeabi_ddiv+0x48>
    9e20:	4651      	mov	r1, sl
    9e22:	465a      	mov	r2, fp
    9e24:	4311      	orrs	r1, r2
    9e26:	d129      	bne.n	9e7c <__aeabi_ddiv+0x164>
    9e28:	2200      	movs	r2, #0
    9e2a:	4693      	mov	fp, r2
    9e2c:	3202      	adds	r2, #2
    9e2e:	e7b1      	b.n	9d94 <__aeabi_ddiv+0x7c>
    9e30:	4659      	mov	r1, fp
    9e32:	4301      	orrs	r1, r0
    9e34:	d01e      	beq.n	9e74 <__aeabi_ddiv+0x15c>
    9e36:	465b      	mov	r3, fp
    9e38:	2b00      	cmp	r3, #0
    9e3a:	d100      	bne.n	9e3e <__aeabi_ddiv+0x126>
    9e3c:	e19e      	b.n	a17c <__aeabi_ddiv+0x464>
    9e3e:	4658      	mov	r0, fp
    9e40:	f001 fade 	bl	b400 <__clzsi2>
    9e44:	0003      	movs	r3, r0
    9e46:	3b0b      	subs	r3, #11
    9e48:	2b1c      	cmp	r3, #28
    9e4a:	dd00      	ble.n	9e4e <__aeabi_ddiv+0x136>
    9e4c:	e18f      	b.n	a16e <__aeabi_ddiv+0x456>
    9e4e:	0002      	movs	r2, r0
    9e50:	4659      	mov	r1, fp
    9e52:	3a08      	subs	r2, #8
    9e54:	4091      	lsls	r1, r2
    9e56:	468b      	mov	fp, r1
    9e58:	211d      	movs	r1, #29
    9e5a:	1acb      	subs	r3, r1, r3
    9e5c:	4651      	mov	r1, sl
    9e5e:	40d9      	lsrs	r1, r3
    9e60:	000b      	movs	r3, r1
    9e62:	4659      	mov	r1, fp
    9e64:	430b      	orrs	r3, r1
    9e66:	4651      	mov	r1, sl
    9e68:	469b      	mov	fp, r3
    9e6a:	4091      	lsls	r1, r2
    9e6c:	4b26      	ldr	r3, [pc, #152]	; (9f08 <__aeabi_ddiv+0x1f0>)
    9e6e:	2200      	movs	r2, #0
    9e70:	1a1b      	subs	r3, r3, r0
    9e72:	e78f      	b.n	9d94 <__aeabi_ddiv+0x7c>
    9e74:	2300      	movs	r3, #0
    9e76:	2201      	movs	r2, #1
    9e78:	469b      	mov	fp, r3
    9e7a:	e78b      	b.n	9d94 <__aeabi_ddiv+0x7c>
    9e7c:	4651      	mov	r1, sl
    9e7e:	2203      	movs	r2, #3
    9e80:	e788      	b.n	9d94 <__aeabi_ddiv+0x7c>
    9e82:	2300      	movs	r3, #0
    9e84:	4698      	mov	r8, r3
    9e86:	3301      	adds	r3, #1
    9e88:	2604      	movs	r6, #4
    9e8a:	2400      	movs	r4, #0
    9e8c:	9303      	str	r3, [sp, #12]
    9e8e:	e767      	b.n	9d60 <__aeabi_ddiv+0x48>
    9e90:	2303      	movs	r3, #3
    9e92:	46b1      	mov	r9, r6
    9e94:	9303      	str	r3, [sp, #12]
    9e96:	260c      	movs	r6, #12
    9e98:	e762      	b.n	9d60 <__aeabi_ddiv+0x48>
    9e9a:	2a03      	cmp	r2, #3
    9e9c:	d100      	bne.n	9ea0 <__aeabi_ddiv+0x188>
    9e9e:	e25c      	b.n	a35a <__aeabi_ddiv+0x642>
    9ea0:	9b01      	ldr	r3, [sp, #4]
    9ea2:	2a01      	cmp	r2, #1
    9ea4:	d000      	beq.n	9ea8 <__aeabi_ddiv+0x190>
    9ea6:	e1e4      	b.n	a272 <__aeabi_ddiv+0x55a>
    9ea8:	4013      	ands	r3, r2
    9eaa:	469c      	mov	ip, r3
    9eac:	2300      	movs	r3, #0
    9eae:	2400      	movs	r4, #0
    9eb0:	2200      	movs	r2, #0
    9eb2:	4698      	mov	r8, r3
    9eb4:	2100      	movs	r1, #0
    9eb6:	0312      	lsls	r2, r2, #12
    9eb8:	0b13      	lsrs	r3, r2, #12
    9eba:	0d0a      	lsrs	r2, r1, #20
    9ebc:	0512      	lsls	r2, r2, #20
    9ebe:	431a      	orrs	r2, r3
    9ec0:	0523      	lsls	r3, r4, #20
    9ec2:	4c12      	ldr	r4, [pc, #72]	; (9f0c <__aeabi_ddiv+0x1f4>)
    9ec4:	4640      	mov	r0, r8
    9ec6:	4022      	ands	r2, r4
    9ec8:	4313      	orrs	r3, r2
    9eca:	4662      	mov	r2, ip
    9ecc:	005b      	lsls	r3, r3, #1
    9ece:	07d2      	lsls	r2, r2, #31
    9ed0:	085b      	lsrs	r3, r3, #1
    9ed2:	4313      	orrs	r3, r2
    9ed4:	0019      	movs	r1, r3
    9ed6:	b007      	add	sp, #28
    9ed8:	bc3c      	pop	{r2, r3, r4, r5}
    9eda:	4690      	mov	r8, r2
    9edc:	4699      	mov	r9, r3
    9ede:	46a2      	mov	sl, r4
    9ee0:	46ab      	mov	fp, r5
    9ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9ee4:	2300      	movs	r3, #0
    9ee6:	2280      	movs	r2, #128	; 0x80
    9ee8:	469c      	mov	ip, r3
    9eea:	0312      	lsls	r2, r2, #12
    9eec:	4698      	mov	r8, r3
    9eee:	4c03      	ldr	r4, [pc, #12]	; (9efc <__aeabi_ddiv+0x1e4>)
    9ef0:	e7e0      	b.n	9eb4 <__aeabi_ddiv+0x19c>
    9ef2:	2300      	movs	r3, #0
    9ef4:	4c01      	ldr	r4, [pc, #4]	; (9efc <__aeabi_ddiv+0x1e4>)
    9ef6:	2200      	movs	r2, #0
    9ef8:	4698      	mov	r8, r3
    9efa:	e7db      	b.n	9eb4 <__aeabi_ddiv+0x19c>
    9efc:	000007ff 	.word	0x000007ff
    9f00:	fffffc01 	.word	0xfffffc01
    9f04:	0000e04c 	.word	0x0000e04c
    9f08:	fffffc0d 	.word	0xfffffc0d
    9f0c:	800fffff 	.word	0x800fffff
    9f10:	45d9      	cmp	r9, fp
    9f12:	d900      	bls.n	9f16 <__aeabi_ddiv+0x1fe>
    9f14:	e139      	b.n	a18a <__aeabi_ddiv+0x472>
    9f16:	d100      	bne.n	9f1a <__aeabi_ddiv+0x202>
    9f18:	e134      	b.n	a184 <__aeabi_ddiv+0x46c>
    9f1a:	2300      	movs	r3, #0
    9f1c:	4646      	mov	r6, r8
    9f1e:	464d      	mov	r5, r9
    9f20:	469a      	mov	sl, r3
    9f22:	3c01      	subs	r4, #1
    9f24:	465b      	mov	r3, fp
    9f26:	0e0a      	lsrs	r2, r1, #24
    9f28:	021b      	lsls	r3, r3, #8
    9f2a:	431a      	orrs	r2, r3
    9f2c:	020b      	lsls	r3, r1, #8
    9f2e:	0c17      	lsrs	r7, r2, #16
    9f30:	9303      	str	r3, [sp, #12]
    9f32:	0413      	lsls	r3, r2, #16
    9f34:	0c1b      	lsrs	r3, r3, #16
    9f36:	0039      	movs	r1, r7
    9f38:	0028      	movs	r0, r5
    9f3a:	4690      	mov	r8, r2
    9f3c:	9301      	str	r3, [sp, #4]
    9f3e:	f7fe fac3 	bl	84c8 <__udivsi3>
    9f42:	0002      	movs	r2, r0
    9f44:	9b01      	ldr	r3, [sp, #4]
    9f46:	4683      	mov	fp, r0
    9f48:	435a      	muls	r2, r3
    9f4a:	0028      	movs	r0, r5
    9f4c:	0039      	movs	r1, r7
    9f4e:	4691      	mov	r9, r2
    9f50:	f7fe fb40 	bl	85d4 <__aeabi_uidivmod>
    9f54:	0c35      	lsrs	r5, r6, #16
    9f56:	0409      	lsls	r1, r1, #16
    9f58:	430d      	orrs	r5, r1
    9f5a:	45a9      	cmp	r9, r5
    9f5c:	d90d      	bls.n	9f7a <__aeabi_ddiv+0x262>
    9f5e:	465b      	mov	r3, fp
    9f60:	4445      	add	r5, r8
    9f62:	3b01      	subs	r3, #1
    9f64:	45a8      	cmp	r8, r5
    9f66:	d900      	bls.n	9f6a <__aeabi_ddiv+0x252>
    9f68:	e13a      	b.n	a1e0 <__aeabi_ddiv+0x4c8>
    9f6a:	45a9      	cmp	r9, r5
    9f6c:	d800      	bhi.n	9f70 <__aeabi_ddiv+0x258>
    9f6e:	e137      	b.n	a1e0 <__aeabi_ddiv+0x4c8>
    9f70:	2302      	movs	r3, #2
    9f72:	425b      	negs	r3, r3
    9f74:	469c      	mov	ip, r3
    9f76:	4445      	add	r5, r8
    9f78:	44e3      	add	fp, ip
    9f7a:	464b      	mov	r3, r9
    9f7c:	1aeb      	subs	r3, r5, r3
    9f7e:	0039      	movs	r1, r7
    9f80:	0018      	movs	r0, r3
    9f82:	9304      	str	r3, [sp, #16]
    9f84:	f7fe faa0 	bl	84c8 <__udivsi3>
    9f88:	9b01      	ldr	r3, [sp, #4]
    9f8a:	0005      	movs	r5, r0
    9f8c:	4343      	muls	r3, r0
    9f8e:	0039      	movs	r1, r7
    9f90:	9804      	ldr	r0, [sp, #16]
    9f92:	4699      	mov	r9, r3
    9f94:	f7fe fb1e 	bl	85d4 <__aeabi_uidivmod>
    9f98:	0433      	lsls	r3, r6, #16
    9f9a:	0409      	lsls	r1, r1, #16
    9f9c:	0c1b      	lsrs	r3, r3, #16
    9f9e:	430b      	orrs	r3, r1
    9fa0:	4599      	cmp	r9, r3
    9fa2:	d909      	bls.n	9fb8 <__aeabi_ddiv+0x2a0>
    9fa4:	4443      	add	r3, r8
    9fa6:	1e6a      	subs	r2, r5, #1
    9fa8:	4598      	cmp	r8, r3
    9faa:	d900      	bls.n	9fae <__aeabi_ddiv+0x296>
    9fac:	e11a      	b.n	a1e4 <__aeabi_ddiv+0x4cc>
    9fae:	4599      	cmp	r9, r3
    9fb0:	d800      	bhi.n	9fb4 <__aeabi_ddiv+0x29c>
    9fb2:	e117      	b.n	a1e4 <__aeabi_ddiv+0x4cc>
    9fb4:	3d02      	subs	r5, #2
    9fb6:	4443      	add	r3, r8
    9fb8:	464a      	mov	r2, r9
    9fba:	1a9b      	subs	r3, r3, r2
    9fbc:	465a      	mov	r2, fp
    9fbe:	0412      	lsls	r2, r2, #16
    9fc0:	432a      	orrs	r2, r5
    9fc2:	9903      	ldr	r1, [sp, #12]
    9fc4:	4693      	mov	fp, r2
    9fc6:	0c10      	lsrs	r0, r2, #16
    9fc8:	0c0a      	lsrs	r2, r1, #16
    9fca:	4691      	mov	r9, r2
    9fcc:	0409      	lsls	r1, r1, #16
    9fce:	465a      	mov	r2, fp
    9fd0:	0c09      	lsrs	r1, r1, #16
    9fd2:	464e      	mov	r6, r9
    9fd4:	000d      	movs	r5, r1
    9fd6:	0412      	lsls	r2, r2, #16
    9fd8:	0c12      	lsrs	r2, r2, #16
    9fda:	4345      	muls	r5, r0
    9fdc:	9105      	str	r1, [sp, #20]
    9fde:	4351      	muls	r1, r2
    9fe0:	4372      	muls	r2, r6
    9fe2:	4370      	muls	r0, r6
    9fe4:	1952      	adds	r2, r2, r5
    9fe6:	0c0e      	lsrs	r6, r1, #16
    9fe8:	18b2      	adds	r2, r6, r2
    9fea:	4295      	cmp	r5, r2
    9fec:	d903      	bls.n	9ff6 <__aeabi_ddiv+0x2de>
    9fee:	2580      	movs	r5, #128	; 0x80
    9ff0:	026d      	lsls	r5, r5, #9
    9ff2:	46ac      	mov	ip, r5
    9ff4:	4460      	add	r0, ip
    9ff6:	0c15      	lsrs	r5, r2, #16
    9ff8:	0409      	lsls	r1, r1, #16
    9ffa:	0412      	lsls	r2, r2, #16
    9ffc:	0c09      	lsrs	r1, r1, #16
    9ffe:	1828      	adds	r0, r5, r0
    a000:	1852      	adds	r2, r2, r1
    a002:	4283      	cmp	r3, r0
    a004:	d200      	bcs.n	a008 <__aeabi_ddiv+0x2f0>
    a006:	e0ce      	b.n	a1a6 <__aeabi_ddiv+0x48e>
    a008:	d100      	bne.n	a00c <__aeabi_ddiv+0x2f4>
    a00a:	e0c8      	b.n	a19e <__aeabi_ddiv+0x486>
    a00c:	1a1d      	subs	r5, r3, r0
    a00e:	4653      	mov	r3, sl
    a010:	1a9e      	subs	r6, r3, r2
    a012:	45b2      	cmp	sl, r6
    a014:	4192      	sbcs	r2, r2
    a016:	4252      	negs	r2, r2
    a018:	1aab      	subs	r3, r5, r2
    a01a:	469a      	mov	sl, r3
    a01c:	4598      	cmp	r8, r3
    a01e:	d100      	bne.n	a022 <__aeabi_ddiv+0x30a>
    a020:	e117      	b.n	a252 <__aeabi_ddiv+0x53a>
    a022:	0039      	movs	r1, r7
    a024:	0018      	movs	r0, r3
    a026:	f7fe fa4f 	bl	84c8 <__udivsi3>
    a02a:	9b01      	ldr	r3, [sp, #4]
    a02c:	0005      	movs	r5, r0
    a02e:	4343      	muls	r3, r0
    a030:	0039      	movs	r1, r7
    a032:	4650      	mov	r0, sl
    a034:	9304      	str	r3, [sp, #16]
    a036:	f7fe facd 	bl	85d4 <__aeabi_uidivmod>
    a03a:	9804      	ldr	r0, [sp, #16]
    a03c:	040b      	lsls	r3, r1, #16
    a03e:	0c31      	lsrs	r1, r6, #16
    a040:	4319      	orrs	r1, r3
    a042:	4288      	cmp	r0, r1
    a044:	d909      	bls.n	a05a <__aeabi_ddiv+0x342>
    a046:	4441      	add	r1, r8
    a048:	1e6b      	subs	r3, r5, #1
    a04a:	4588      	cmp	r8, r1
    a04c:	d900      	bls.n	a050 <__aeabi_ddiv+0x338>
    a04e:	e107      	b.n	a260 <__aeabi_ddiv+0x548>
    a050:	4288      	cmp	r0, r1
    a052:	d800      	bhi.n	a056 <__aeabi_ddiv+0x33e>
    a054:	e104      	b.n	a260 <__aeabi_ddiv+0x548>
    a056:	3d02      	subs	r5, #2
    a058:	4441      	add	r1, r8
    a05a:	9b04      	ldr	r3, [sp, #16]
    a05c:	1acb      	subs	r3, r1, r3
    a05e:	0018      	movs	r0, r3
    a060:	0039      	movs	r1, r7
    a062:	9304      	str	r3, [sp, #16]
    a064:	f7fe fa30 	bl	84c8 <__udivsi3>
    a068:	9b01      	ldr	r3, [sp, #4]
    a06a:	4682      	mov	sl, r0
    a06c:	4343      	muls	r3, r0
    a06e:	0039      	movs	r1, r7
    a070:	9804      	ldr	r0, [sp, #16]
    a072:	9301      	str	r3, [sp, #4]
    a074:	f7fe faae 	bl	85d4 <__aeabi_uidivmod>
    a078:	9801      	ldr	r0, [sp, #4]
    a07a:	040b      	lsls	r3, r1, #16
    a07c:	0431      	lsls	r1, r6, #16
    a07e:	0c09      	lsrs	r1, r1, #16
    a080:	4319      	orrs	r1, r3
    a082:	4288      	cmp	r0, r1
    a084:	d90d      	bls.n	a0a2 <__aeabi_ddiv+0x38a>
    a086:	4653      	mov	r3, sl
    a088:	4441      	add	r1, r8
    a08a:	3b01      	subs	r3, #1
    a08c:	4588      	cmp	r8, r1
    a08e:	d900      	bls.n	a092 <__aeabi_ddiv+0x37a>
    a090:	e0e8      	b.n	a264 <__aeabi_ddiv+0x54c>
    a092:	4288      	cmp	r0, r1
    a094:	d800      	bhi.n	a098 <__aeabi_ddiv+0x380>
    a096:	e0e5      	b.n	a264 <__aeabi_ddiv+0x54c>
    a098:	2302      	movs	r3, #2
    a09a:	425b      	negs	r3, r3
    a09c:	469c      	mov	ip, r3
    a09e:	4441      	add	r1, r8
    a0a0:	44e2      	add	sl, ip
    a0a2:	9b01      	ldr	r3, [sp, #4]
    a0a4:	042d      	lsls	r5, r5, #16
    a0a6:	1ace      	subs	r6, r1, r3
    a0a8:	4651      	mov	r1, sl
    a0aa:	4329      	orrs	r1, r5
    a0ac:	9d05      	ldr	r5, [sp, #20]
    a0ae:	464f      	mov	r7, r9
    a0b0:	002a      	movs	r2, r5
    a0b2:	040b      	lsls	r3, r1, #16
    a0b4:	0c08      	lsrs	r0, r1, #16
    a0b6:	0c1b      	lsrs	r3, r3, #16
    a0b8:	435a      	muls	r2, r3
    a0ba:	4345      	muls	r5, r0
    a0bc:	437b      	muls	r3, r7
    a0be:	4378      	muls	r0, r7
    a0c0:	195b      	adds	r3, r3, r5
    a0c2:	0c17      	lsrs	r7, r2, #16
    a0c4:	18fb      	adds	r3, r7, r3
    a0c6:	429d      	cmp	r5, r3
    a0c8:	d903      	bls.n	a0d2 <__aeabi_ddiv+0x3ba>
    a0ca:	2580      	movs	r5, #128	; 0x80
    a0cc:	026d      	lsls	r5, r5, #9
    a0ce:	46ac      	mov	ip, r5
    a0d0:	4460      	add	r0, ip
    a0d2:	0c1d      	lsrs	r5, r3, #16
    a0d4:	0412      	lsls	r2, r2, #16
    a0d6:	041b      	lsls	r3, r3, #16
    a0d8:	0c12      	lsrs	r2, r2, #16
    a0da:	1828      	adds	r0, r5, r0
    a0dc:	189b      	adds	r3, r3, r2
    a0de:	4286      	cmp	r6, r0
    a0e0:	d200      	bcs.n	a0e4 <__aeabi_ddiv+0x3cc>
    a0e2:	e093      	b.n	a20c <__aeabi_ddiv+0x4f4>
    a0e4:	d100      	bne.n	a0e8 <__aeabi_ddiv+0x3d0>
    a0e6:	e08e      	b.n	a206 <__aeabi_ddiv+0x4ee>
    a0e8:	2301      	movs	r3, #1
    a0ea:	4319      	orrs	r1, r3
    a0ec:	4ba0      	ldr	r3, [pc, #640]	; (a370 <__aeabi_ddiv+0x658>)
    a0ee:	18e3      	adds	r3, r4, r3
    a0f0:	2b00      	cmp	r3, #0
    a0f2:	dc00      	bgt.n	a0f6 <__aeabi_ddiv+0x3de>
    a0f4:	e099      	b.n	a22a <__aeabi_ddiv+0x512>
    a0f6:	074a      	lsls	r2, r1, #29
    a0f8:	d000      	beq.n	a0fc <__aeabi_ddiv+0x3e4>
    a0fa:	e09e      	b.n	a23a <__aeabi_ddiv+0x522>
    a0fc:	465a      	mov	r2, fp
    a0fe:	01d2      	lsls	r2, r2, #7
    a100:	d506      	bpl.n	a110 <__aeabi_ddiv+0x3f8>
    a102:	465a      	mov	r2, fp
    a104:	4b9b      	ldr	r3, [pc, #620]	; (a374 <__aeabi_ddiv+0x65c>)
    a106:	401a      	ands	r2, r3
    a108:	2380      	movs	r3, #128	; 0x80
    a10a:	4693      	mov	fp, r2
    a10c:	00db      	lsls	r3, r3, #3
    a10e:	18e3      	adds	r3, r4, r3
    a110:	4a99      	ldr	r2, [pc, #612]	; (a378 <__aeabi_ddiv+0x660>)
    a112:	4293      	cmp	r3, r2
    a114:	dd68      	ble.n	a1e8 <__aeabi_ddiv+0x4d0>
    a116:	2301      	movs	r3, #1
    a118:	9a02      	ldr	r2, [sp, #8]
    a11a:	4c98      	ldr	r4, [pc, #608]	; (a37c <__aeabi_ddiv+0x664>)
    a11c:	401a      	ands	r2, r3
    a11e:	2300      	movs	r3, #0
    a120:	4694      	mov	ip, r2
    a122:	4698      	mov	r8, r3
    a124:	2200      	movs	r2, #0
    a126:	e6c5      	b.n	9eb4 <__aeabi_ddiv+0x19c>
    a128:	2280      	movs	r2, #128	; 0x80
    a12a:	464b      	mov	r3, r9
    a12c:	0312      	lsls	r2, r2, #12
    a12e:	4213      	tst	r3, r2
    a130:	d00a      	beq.n	a148 <__aeabi_ddiv+0x430>
    a132:	465b      	mov	r3, fp
    a134:	4213      	tst	r3, r2
    a136:	d106      	bne.n	a146 <__aeabi_ddiv+0x42e>
    a138:	431a      	orrs	r2, r3
    a13a:	0312      	lsls	r2, r2, #12
    a13c:	0b12      	lsrs	r2, r2, #12
    a13e:	46ac      	mov	ip, r5
    a140:	4688      	mov	r8, r1
    a142:	4c8e      	ldr	r4, [pc, #568]	; (a37c <__aeabi_ddiv+0x664>)
    a144:	e6b6      	b.n	9eb4 <__aeabi_ddiv+0x19c>
    a146:	464b      	mov	r3, r9
    a148:	431a      	orrs	r2, r3
    a14a:	0312      	lsls	r2, r2, #12
    a14c:	0b12      	lsrs	r2, r2, #12
    a14e:	46bc      	mov	ip, r7
    a150:	4c8a      	ldr	r4, [pc, #552]	; (a37c <__aeabi_ddiv+0x664>)
    a152:	e6af      	b.n	9eb4 <__aeabi_ddiv+0x19c>
    a154:	0003      	movs	r3, r0
    a156:	465a      	mov	r2, fp
    a158:	3b28      	subs	r3, #40	; 0x28
    a15a:	409a      	lsls	r2, r3
    a15c:	2300      	movs	r3, #0
    a15e:	4691      	mov	r9, r2
    a160:	4698      	mov	r8, r3
    a162:	e657      	b.n	9e14 <__aeabi_ddiv+0xfc>
    a164:	4658      	mov	r0, fp
    a166:	f001 f94b 	bl	b400 <__clzsi2>
    a16a:	3020      	adds	r0, #32
    a16c:	e640      	b.n	9df0 <__aeabi_ddiv+0xd8>
    a16e:	0003      	movs	r3, r0
    a170:	4652      	mov	r2, sl
    a172:	3b28      	subs	r3, #40	; 0x28
    a174:	409a      	lsls	r2, r3
    a176:	2100      	movs	r1, #0
    a178:	4693      	mov	fp, r2
    a17a:	e677      	b.n	9e6c <__aeabi_ddiv+0x154>
    a17c:	f001 f940 	bl	b400 <__clzsi2>
    a180:	3020      	adds	r0, #32
    a182:	e65f      	b.n	9e44 <__aeabi_ddiv+0x12c>
    a184:	4588      	cmp	r8, r1
    a186:	d200      	bcs.n	a18a <__aeabi_ddiv+0x472>
    a188:	e6c7      	b.n	9f1a <__aeabi_ddiv+0x202>
    a18a:	464b      	mov	r3, r9
    a18c:	07de      	lsls	r6, r3, #31
    a18e:	085d      	lsrs	r5, r3, #1
    a190:	4643      	mov	r3, r8
    a192:	085b      	lsrs	r3, r3, #1
    a194:	431e      	orrs	r6, r3
    a196:	4643      	mov	r3, r8
    a198:	07db      	lsls	r3, r3, #31
    a19a:	469a      	mov	sl, r3
    a19c:	e6c2      	b.n	9f24 <__aeabi_ddiv+0x20c>
    a19e:	2500      	movs	r5, #0
    a1a0:	4592      	cmp	sl, r2
    a1a2:	d300      	bcc.n	a1a6 <__aeabi_ddiv+0x48e>
    a1a4:	e733      	b.n	a00e <__aeabi_ddiv+0x2f6>
    a1a6:	9e03      	ldr	r6, [sp, #12]
    a1a8:	4659      	mov	r1, fp
    a1aa:	46b4      	mov	ip, r6
    a1ac:	44e2      	add	sl, ip
    a1ae:	45b2      	cmp	sl, r6
    a1b0:	41ad      	sbcs	r5, r5
    a1b2:	426d      	negs	r5, r5
    a1b4:	4445      	add	r5, r8
    a1b6:	18eb      	adds	r3, r5, r3
    a1b8:	3901      	subs	r1, #1
    a1ba:	4598      	cmp	r8, r3
    a1bc:	d207      	bcs.n	a1ce <__aeabi_ddiv+0x4b6>
    a1be:	4298      	cmp	r0, r3
    a1c0:	d900      	bls.n	a1c4 <__aeabi_ddiv+0x4ac>
    a1c2:	e07f      	b.n	a2c4 <__aeabi_ddiv+0x5ac>
    a1c4:	d100      	bne.n	a1c8 <__aeabi_ddiv+0x4b0>
    a1c6:	e0bc      	b.n	a342 <__aeabi_ddiv+0x62a>
    a1c8:	1a1d      	subs	r5, r3, r0
    a1ca:	468b      	mov	fp, r1
    a1cc:	e71f      	b.n	a00e <__aeabi_ddiv+0x2f6>
    a1ce:	4598      	cmp	r8, r3
    a1d0:	d1fa      	bne.n	a1c8 <__aeabi_ddiv+0x4b0>
    a1d2:	9d03      	ldr	r5, [sp, #12]
    a1d4:	4555      	cmp	r5, sl
    a1d6:	d9f2      	bls.n	a1be <__aeabi_ddiv+0x4a6>
    a1d8:	4643      	mov	r3, r8
    a1da:	468b      	mov	fp, r1
    a1dc:	1a1d      	subs	r5, r3, r0
    a1de:	e716      	b.n	a00e <__aeabi_ddiv+0x2f6>
    a1e0:	469b      	mov	fp, r3
    a1e2:	e6ca      	b.n	9f7a <__aeabi_ddiv+0x262>
    a1e4:	0015      	movs	r5, r2
    a1e6:	e6e7      	b.n	9fb8 <__aeabi_ddiv+0x2a0>
    a1e8:	465a      	mov	r2, fp
    a1ea:	08c9      	lsrs	r1, r1, #3
    a1ec:	0752      	lsls	r2, r2, #29
    a1ee:	430a      	orrs	r2, r1
    a1f0:	055b      	lsls	r3, r3, #21
    a1f2:	4690      	mov	r8, r2
    a1f4:	0d5c      	lsrs	r4, r3, #21
    a1f6:	465a      	mov	r2, fp
    a1f8:	2301      	movs	r3, #1
    a1fa:	9902      	ldr	r1, [sp, #8]
    a1fc:	0252      	lsls	r2, r2, #9
    a1fe:	4019      	ands	r1, r3
    a200:	0b12      	lsrs	r2, r2, #12
    a202:	468c      	mov	ip, r1
    a204:	e656      	b.n	9eb4 <__aeabi_ddiv+0x19c>
    a206:	2b00      	cmp	r3, #0
    a208:	d100      	bne.n	a20c <__aeabi_ddiv+0x4f4>
    a20a:	e76f      	b.n	a0ec <__aeabi_ddiv+0x3d4>
    a20c:	4446      	add	r6, r8
    a20e:	1e4a      	subs	r2, r1, #1
    a210:	45b0      	cmp	r8, r6
    a212:	d929      	bls.n	a268 <__aeabi_ddiv+0x550>
    a214:	0011      	movs	r1, r2
    a216:	4286      	cmp	r6, r0
    a218:	d000      	beq.n	a21c <__aeabi_ddiv+0x504>
    a21a:	e765      	b.n	a0e8 <__aeabi_ddiv+0x3d0>
    a21c:	9a03      	ldr	r2, [sp, #12]
    a21e:	4293      	cmp	r3, r2
    a220:	d000      	beq.n	a224 <__aeabi_ddiv+0x50c>
    a222:	e761      	b.n	a0e8 <__aeabi_ddiv+0x3d0>
    a224:	e762      	b.n	a0ec <__aeabi_ddiv+0x3d4>
    a226:	2101      	movs	r1, #1
    a228:	4249      	negs	r1, r1
    a22a:	2001      	movs	r0, #1
    a22c:	1ac2      	subs	r2, r0, r3
    a22e:	2a38      	cmp	r2, #56	; 0x38
    a230:	dd21      	ble.n	a276 <__aeabi_ddiv+0x55e>
    a232:	9b02      	ldr	r3, [sp, #8]
    a234:	4003      	ands	r3, r0
    a236:	469c      	mov	ip, r3
    a238:	e638      	b.n	9eac <__aeabi_ddiv+0x194>
    a23a:	220f      	movs	r2, #15
    a23c:	400a      	ands	r2, r1
    a23e:	2a04      	cmp	r2, #4
    a240:	d100      	bne.n	a244 <__aeabi_ddiv+0x52c>
    a242:	e75b      	b.n	a0fc <__aeabi_ddiv+0x3e4>
    a244:	000a      	movs	r2, r1
    a246:	1d11      	adds	r1, r2, #4
    a248:	4291      	cmp	r1, r2
    a24a:	4192      	sbcs	r2, r2
    a24c:	4252      	negs	r2, r2
    a24e:	4493      	add	fp, r2
    a250:	e754      	b.n	a0fc <__aeabi_ddiv+0x3e4>
    a252:	4b47      	ldr	r3, [pc, #284]	; (a370 <__aeabi_ddiv+0x658>)
    a254:	18e3      	adds	r3, r4, r3
    a256:	2b00      	cmp	r3, #0
    a258:	dde5      	ble.n	a226 <__aeabi_ddiv+0x50e>
    a25a:	2201      	movs	r2, #1
    a25c:	4252      	negs	r2, r2
    a25e:	e7f2      	b.n	a246 <__aeabi_ddiv+0x52e>
    a260:	001d      	movs	r5, r3
    a262:	e6fa      	b.n	a05a <__aeabi_ddiv+0x342>
    a264:	469a      	mov	sl, r3
    a266:	e71c      	b.n	a0a2 <__aeabi_ddiv+0x38a>
    a268:	42b0      	cmp	r0, r6
    a26a:	d839      	bhi.n	a2e0 <__aeabi_ddiv+0x5c8>
    a26c:	d06e      	beq.n	a34c <__aeabi_ddiv+0x634>
    a26e:	0011      	movs	r1, r2
    a270:	e73a      	b.n	a0e8 <__aeabi_ddiv+0x3d0>
    a272:	9302      	str	r3, [sp, #8]
    a274:	e73a      	b.n	a0ec <__aeabi_ddiv+0x3d4>
    a276:	2a1f      	cmp	r2, #31
    a278:	dc3c      	bgt.n	a2f4 <__aeabi_ddiv+0x5dc>
    a27a:	2320      	movs	r3, #32
    a27c:	1a9b      	subs	r3, r3, r2
    a27e:	000c      	movs	r4, r1
    a280:	4658      	mov	r0, fp
    a282:	4099      	lsls	r1, r3
    a284:	4098      	lsls	r0, r3
    a286:	1e4b      	subs	r3, r1, #1
    a288:	4199      	sbcs	r1, r3
    a28a:	465b      	mov	r3, fp
    a28c:	40d4      	lsrs	r4, r2
    a28e:	40d3      	lsrs	r3, r2
    a290:	4320      	orrs	r0, r4
    a292:	4308      	orrs	r0, r1
    a294:	001a      	movs	r2, r3
    a296:	0743      	lsls	r3, r0, #29
    a298:	d009      	beq.n	a2ae <__aeabi_ddiv+0x596>
    a29a:	230f      	movs	r3, #15
    a29c:	4003      	ands	r3, r0
    a29e:	2b04      	cmp	r3, #4
    a2a0:	d005      	beq.n	a2ae <__aeabi_ddiv+0x596>
    a2a2:	0001      	movs	r1, r0
    a2a4:	1d08      	adds	r0, r1, #4
    a2a6:	4288      	cmp	r0, r1
    a2a8:	419b      	sbcs	r3, r3
    a2aa:	425b      	negs	r3, r3
    a2ac:	18d2      	adds	r2, r2, r3
    a2ae:	0213      	lsls	r3, r2, #8
    a2b0:	d53a      	bpl.n	a328 <__aeabi_ddiv+0x610>
    a2b2:	2301      	movs	r3, #1
    a2b4:	9a02      	ldr	r2, [sp, #8]
    a2b6:	2401      	movs	r4, #1
    a2b8:	401a      	ands	r2, r3
    a2ba:	2300      	movs	r3, #0
    a2bc:	4694      	mov	ip, r2
    a2be:	4698      	mov	r8, r3
    a2c0:	2200      	movs	r2, #0
    a2c2:	e5f7      	b.n	9eb4 <__aeabi_ddiv+0x19c>
    a2c4:	2102      	movs	r1, #2
    a2c6:	4249      	negs	r1, r1
    a2c8:	468c      	mov	ip, r1
    a2ca:	9d03      	ldr	r5, [sp, #12]
    a2cc:	44e3      	add	fp, ip
    a2ce:	46ac      	mov	ip, r5
    a2d0:	44e2      	add	sl, ip
    a2d2:	45aa      	cmp	sl, r5
    a2d4:	41ad      	sbcs	r5, r5
    a2d6:	426d      	negs	r5, r5
    a2d8:	4445      	add	r5, r8
    a2da:	18ed      	adds	r5, r5, r3
    a2dc:	1a2d      	subs	r5, r5, r0
    a2de:	e696      	b.n	a00e <__aeabi_ddiv+0x2f6>
    a2e0:	1e8a      	subs	r2, r1, #2
    a2e2:	9903      	ldr	r1, [sp, #12]
    a2e4:	004d      	lsls	r5, r1, #1
    a2e6:	428d      	cmp	r5, r1
    a2e8:	4189      	sbcs	r1, r1
    a2ea:	4249      	negs	r1, r1
    a2ec:	4441      	add	r1, r8
    a2ee:	1876      	adds	r6, r6, r1
    a2f0:	9503      	str	r5, [sp, #12]
    a2f2:	e78f      	b.n	a214 <__aeabi_ddiv+0x4fc>
    a2f4:	201f      	movs	r0, #31
    a2f6:	4240      	negs	r0, r0
    a2f8:	1ac3      	subs	r3, r0, r3
    a2fa:	4658      	mov	r0, fp
    a2fc:	40d8      	lsrs	r0, r3
    a2fe:	0003      	movs	r3, r0
    a300:	2a20      	cmp	r2, #32
    a302:	d028      	beq.n	a356 <__aeabi_ddiv+0x63e>
    a304:	2040      	movs	r0, #64	; 0x40
    a306:	465d      	mov	r5, fp
    a308:	1a82      	subs	r2, r0, r2
    a30a:	4095      	lsls	r5, r2
    a30c:	4329      	orrs	r1, r5
    a30e:	1e4a      	subs	r2, r1, #1
    a310:	4191      	sbcs	r1, r2
    a312:	4319      	orrs	r1, r3
    a314:	2307      	movs	r3, #7
    a316:	2200      	movs	r2, #0
    a318:	400b      	ands	r3, r1
    a31a:	d009      	beq.n	a330 <__aeabi_ddiv+0x618>
    a31c:	230f      	movs	r3, #15
    a31e:	2200      	movs	r2, #0
    a320:	400b      	ands	r3, r1
    a322:	0008      	movs	r0, r1
    a324:	2b04      	cmp	r3, #4
    a326:	d1bd      	bne.n	a2a4 <__aeabi_ddiv+0x58c>
    a328:	0001      	movs	r1, r0
    a32a:	0753      	lsls	r3, r2, #29
    a32c:	0252      	lsls	r2, r2, #9
    a32e:	0b12      	lsrs	r2, r2, #12
    a330:	08c9      	lsrs	r1, r1, #3
    a332:	4319      	orrs	r1, r3
    a334:	2301      	movs	r3, #1
    a336:	4688      	mov	r8, r1
    a338:	9902      	ldr	r1, [sp, #8]
    a33a:	2400      	movs	r4, #0
    a33c:	4019      	ands	r1, r3
    a33e:	468c      	mov	ip, r1
    a340:	e5b8      	b.n	9eb4 <__aeabi_ddiv+0x19c>
    a342:	4552      	cmp	r2, sl
    a344:	d8be      	bhi.n	a2c4 <__aeabi_ddiv+0x5ac>
    a346:	468b      	mov	fp, r1
    a348:	2500      	movs	r5, #0
    a34a:	e660      	b.n	a00e <__aeabi_ddiv+0x2f6>
    a34c:	9d03      	ldr	r5, [sp, #12]
    a34e:	429d      	cmp	r5, r3
    a350:	d3c6      	bcc.n	a2e0 <__aeabi_ddiv+0x5c8>
    a352:	0011      	movs	r1, r2
    a354:	e762      	b.n	a21c <__aeabi_ddiv+0x504>
    a356:	2500      	movs	r5, #0
    a358:	e7d8      	b.n	a30c <__aeabi_ddiv+0x5f4>
    a35a:	2280      	movs	r2, #128	; 0x80
    a35c:	465b      	mov	r3, fp
    a35e:	0312      	lsls	r2, r2, #12
    a360:	431a      	orrs	r2, r3
    a362:	9b01      	ldr	r3, [sp, #4]
    a364:	0312      	lsls	r2, r2, #12
    a366:	0b12      	lsrs	r2, r2, #12
    a368:	469c      	mov	ip, r3
    a36a:	4688      	mov	r8, r1
    a36c:	4c03      	ldr	r4, [pc, #12]	; (a37c <__aeabi_ddiv+0x664>)
    a36e:	e5a1      	b.n	9eb4 <__aeabi_ddiv+0x19c>
    a370:	000003ff 	.word	0x000003ff
    a374:	feffffff 	.word	0xfeffffff
    a378:	000007fe 	.word	0x000007fe
    a37c:	000007ff 	.word	0x000007ff

0000a380 <__eqdf2>:
    a380:	b5f0      	push	{r4, r5, r6, r7, lr}
    a382:	464f      	mov	r7, r9
    a384:	4646      	mov	r6, r8
    a386:	46d6      	mov	lr, sl
    a388:	005c      	lsls	r4, r3, #1
    a38a:	b5c0      	push	{r6, r7, lr}
    a38c:	031f      	lsls	r7, r3, #12
    a38e:	0fdb      	lsrs	r3, r3, #31
    a390:	469a      	mov	sl, r3
    a392:	4b17      	ldr	r3, [pc, #92]	; (a3f0 <__eqdf2+0x70>)
    a394:	030e      	lsls	r6, r1, #12
    a396:	004d      	lsls	r5, r1, #1
    a398:	4684      	mov	ip, r0
    a39a:	4680      	mov	r8, r0
    a39c:	0b36      	lsrs	r6, r6, #12
    a39e:	0d6d      	lsrs	r5, r5, #21
    a3a0:	0fc9      	lsrs	r1, r1, #31
    a3a2:	4691      	mov	r9, r2
    a3a4:	0b3f      	lsrs	r7, r7, #12
    a3a6:	0d64      	lsrs	r4, r4, #21
    a3a8:	2001      	movs	r0, #1
    a3aa:	429d      	cmp	r5, r3
    a3ac:	d008      	beq.n	a3c0 <__eqdf2+0x40>
    a3ae:	429c      	cmp	r4, r3
    a3b0:	d001      	beq.n	a3b6 <__eqdf2+0x36>
    a3b2:	42a5      	cmp	r5, r4
    a3b4:	d00b      	beq.n	a3ce <__eqdf2+0x4e>
    a3b6:	bc1c      	pop	{r2, r3, r4}
    a3b8:	4690      	mov	r8, r2
    a3ba:	4699      	mov	r9, r3
    a3bc:	46a2      	mov	sl, r4
    a3be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a3c0:	4663      	mov	r3, ip
    a3c2:	4333      	orrs	r3, r6
    a3c4:	d1f7      	bne.n	a3b6 <__eqdf2+0x36>
    a3c6:	42ac      	cmp	r4, r5
    a3c8:	d1f5      	bne.n	a3b6 <__eqdf2+0x36>
    a3ca:	433a      	orrs	r2, r7
    a3cc:	d1f3      	bne.n	a3b6 <__eqdf2+0x36>
    a3ce:	2001      	movs	r0, #1
    a3d0:	42be      	cmp	r6, r7
    a3d2:	d1f0      	bne.n	a3b6 <__eqdf2+0x36>
    a3d4:	45c8      	cmp	r8, r9
    a3d6:	d1ee      	bne.n	a3b6 <__eqdf2+0x36>
    a3d8:	4551      	cmp	r1, sl
    a3da:	d007      	beq.n	a3ec <__eqdf2+0x6c>
    a3dc:	2d00      	cmp	r5, #0
    a3de:	d1ea      	bne.n	a3b6 <__eqdf2+0x36>
    a3e0:	4663      	mov	r3, ip
    a3e2:	431e      	orrs	r6, r3
    a3e4:	0030      	movs	r0, r6
    a3e6:	1e46      	subs	r6, r0, #1
    a3e8:	41b0      	sbcs	r0, r6
    a3ea:	e7e4      	b.n	a3b6 <__eqdf2+0x36>
    a3ec:	2000      	movs	r0, #0
    a3ee:	e7e2      	b.n	a3b6 <__eqdf2+0x36>
    a3f0:	000007ff 	.word	0x000007ff

0000a3f4 <__gedf2>:
    a3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a3f6:	4645      	mov	r5, r8
    a3f8:	46de      	mov	lr, fp
    a3fa:	4657      	mov	r7, sl
    a3fc:	464e      	mov	r6, r9
    a3fe:	b5e0      	push	{r5, r6, r7, lr}
    a400:	031f      	lsls	r7, r3, #12
    a402:	0b3d      	lsrs	r5, r7, #12
    a404:	4f2c      	ldr	r7, [pc, #176]	; (a4b8 <__gedf2+0xc4>)
    a406:	030e      	lsls	r6, r1, #12
    a408:	004c      	lsls	r4, r1, #1
    a40a:	46ab      	mov	fp, r5
    a40c:	005d      	lsls	r5, r3, #1
    a40e:	4684      	mov	ip, r0
    a410:	0b36      	lsrs	r6, r6, #12
    a412:	0d64      	lsrs	r4, r4, #21
    a414:	0fc9      	lsrs	r1, r1, #31
    a416:	4690      	mov	r8, r2
    a418:	0d6d      	lsrs	r5, r5, #21
    a41a:	0fdb      	lsrs	r3, r3, #31
    a41c:	42bc      	cmp	r4, r7
    a41e:	d02a      	beq.n	a476 <__gedf2+0x82>
    a420:	4f25      	ldr	r7, [pc, #148]	; (a4b8 <__gedf2+0xc4>)
    a422:	42bd      	cmp	r5, r7
    a424:	d02d      	beq.n	a482 <__gedf2+0x8e>
    a426:	2c00      	cmp	r4, #0
    a428:	d10f      	bne.n	a44a <__gedf2+0x56>
    a42a:	4330      	orrs	r0, r6
    a42c:	0007      	movs	r7, r0
    a42e:	4681      	mov	r9, r0
    a430:	4278      	negs	r0, r7
    a432:	4178      	adcs	r0, r7
    a434:	b2c0      	uxtb	r0, r0
    a436:	2d00      	cmp	r5, #0
    a438:	d117      	bne.n	a46a <__gedf2+0x76>
    a43a:	465f      	mov	r7, fp
    a43c:	433a      	orrs	r2, r7
    a43e:	d114      	bne.n	a46a <__gedf2+0x76>
    a440:	464b      	mov	r3, r9
    a442:	2000      	movs	r0, #0
    a444:	2b00      	cmp	r3, #0
    a446:	d00a      	beq.n	a45e <__gedf2+0x6a>
    a448:	e006      	b.n	a458 <__gedf2+0x64>
    a44a:	2d00      	cmp	r5, #0
    a44c:	d102      	bne.n	a454 <__gedf2+0x60>
    a44e:	4658      	mov	r0, fp
    a450:	4302      	orrs	r2, r0
    a452:	d001      	beq.n	a458 <__gedf2+0x64>
    a454:	4299      	cmp	r1, r3
    a456:	d018      	beq.n	a48a <__gedf2+0x96>
    a458:	4248      	negs	r0, r1
    a45a:	2101      	movs	r1, #1
    a45c:	4308      	orrs	r0, r1
    a45e:	bc3c      	pop	{r2, r3, r4, r5}
    a460:	4690      	mov	r8, r2
    a462:	4699      	mov	r9, r3
    a464:	46a2      	mov	sl, r4
    a466:	46ab      	mov	fp, r5
    a468:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a46a:	2800      	cmp	r0, #0
    a46c:	d0f2      	beq.n	a454 <__gedf2+0x60>
    a46e:	2001      	movs	r0, #1
    a470:	3b01      	subs	r3, #1
    a472:	4318      	orrs	r0, r3
    a474:	e7f3      	b.n	a45e <__gedf2+0x6a>
    a476:	0037      	movs	r7, r6
    a478:	4307      	orrs	r7, r0
    a47a:	d0d1      	beq.n	a420 <__gedf2+0x2c>
    a47c:	2002      	movs	r0, #2
    a47e:	4240      	negs	r0, r0
    a480:	e7ed      	b.n	a45e <__gedf2+0x6a>
    a482:	465f      	mov	r7, fp
    a484:	4317      	orrs	r7, r2
    a486:	d0ce      	beq.n	a426 <__gedf2+0x32>
    a488:	e7f8      	b.n	a47c <__gedf2+0x88>
    a48a:	42ac      	cmp	r4, r5
    a48c:	dce4      	bgt.n	a458 <__gedf2+0x64>
    a48e:	da03      	bge.n	a498 <__gedf2+0xa4>
    a490:	1e48      	subs	r0, r1, #1
    a492:	2101      	movs	r1, #1
    a494:	4308      	orrs	r0, r1
    a496:	e7e2      	b.n	a45e <__gedf2+0x6a>
    a498:	455e      	cmp	r6, fp
    a49a:	d8dd      	bhi.n	a458 <__gedf2+0x64>
    a49c:	d006      	beq.n	a4ac <__gedf2+0xb8>
    a49e:	2000      	movs	r0, #0
    a4a0:	455e      	cmp	r6, fp
    a4a2:	d2dc      	bcs.n	a45e <__gedf2+0x6a>
    a4a4:	2301      	movs	r3, #1
    a4a6:	1e48      	subs	r0, r1, #1
    a4a8:	4318      	orrs	r0, r3
    a4aa:	e7d8      	b.n	a45e <__gedf2+0x6a>
    a4ac:	45c4      	cmp	ip, r8
    a4ae:	d8d3      	bhi.n	a458 <__gedf2+0x64>
    a4b0:	2000      	movs	r0, #0
    a4b2:	45c4      	cmp	ip, r8
    a4b4:	d3f6      	bcc.n	a4a4 <__gedf2+0xb0>
    a4b6:	e7d2      	b.n	a45e <__gedf2+0x6a>
    a4b8:	000007ff 	.word	0x000007ff

0000a4bc <__ledf2>:
    a4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a4be:	464e      	mov	r6, r9
    a4c0:	4645      	mov	r5, r8
    a4c2:	46de      	mov	lr, fp
    a4c4:	4657      	mov	r7, sl
    a4c6:	005c      	lsls	r4, r3, #1
    a4c8:	b5e0      	push	{r5, r6, r7, lr}
    a4ca:	031f      	lsls	r7, r3, #12
    a4cc:	0fdb      	lsrs	r3, r3, #31
    a4ce:	4699      	mov	r9, r3
    a4d0:	4b2a      	ldr	r3, [pc, #168]	; (a57c <__ledf2+0xc0>)
    a4d2:	030e      	lsls	r6, r1, #12
    a4d4:	004d      	lsls	r5, r1, #1
    a4d6:	0fc9      	lsrs	r1, r1, #31
    a4d8:	4684      	mov	ip, r0
    a4da:	0b36      	lsrs	r6, r6, #12
    a4dc:	0d6d      	lsrs	r5, r5, #21
    a4de:	468b      	mov	fp, r1
    a4e0:	4690      	mov	r8, r2
    a4e2:	0b3f      	lsrs	r7, r7, #12
    a4e4:	0d64      	lsrs	r4, r4, #21
    a4e6:	429d      	cmp	r5, r3
    a4e8:	d020      	beq.n	a52c <__ledf2+0x70>
    a4ea:	4b24      	ldr	r3, [pc, #144]	; (a57c <__ledf2+0xc0>)
    a4ec:	429c      	cmp	r4, r3
    a4ee:	d022      	beq.n	a536 <__ledf2+0x7a>
    a4f0:	2d00      	cmp	r5, #0
    a4f2:	d112      	bne.n	a51a <__ledf2+0x5e>
    a4f4:	4330      	orrs	r0, r6
    a4f6:	4243      	negs	r3, r0
    a4f8:	4143      	adcs	r3, r0
    a4fa:	b2db      	uxtb	r3, r3
    a4fc:	2c00      	cmp	r4, #0
    a4fe:	d01f      	beq.n	a540 <__ledf2+0x84>
    a500:	2b00      	cmp	r3, #0
    a502:	d00c      	beq.n	a51e <__ledf2+0x62>
    a504:	464b      	mov	r3, r9
    a506:	2001      	movs	r0, #1
    a508:	3b01      	subs	r3, #1
    a50a:	4303      	orrs	r3, r0
    a50c:	0018      	movs	r0, r3
    a50e:	bc3c      	pop	{r2, r3, r4, r5}
    a510:	4690      	mov	r8, r2
    a512:	4699      	mov	r9, r3
    a514:	46a2      	mov	sl, r4
    a516:	46ab      	mov	fp, r5
    a518:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a51a:	2c00      	cmp	r4, #0
    a51c:	d016      	beq.n	a54c <__ledf2+0x90>
    a51e:	45cb      	cmp	fp, r9
    a520:	d017      	beq.n	a552 <__ledf2+0x96>
    a522:	465b      	mov	r3, fp
    a524:	4259      	negs	r1, r3
    a526:	2301      	movs	r3, #1
    a528:	430b      	orrs	r3, r1
    a52a:	e7ef      	b.n	a50c <__ledf2+0x50>
    a52c:	0031      	movs	r1, r6
    a52e:	2302      	movs	r3, #2
    a530:	4301      	orrs	r1, r0
    a532:	d1eb      	bne.n	a50c <__ledf2+0x50>
    a534:	e7d9      	b.n	a4ea <__ledf2+0x2e>
    a536:	0039      	movs	r1, r7
    a538:	2302      	movs	r3, #2
    a53a:	4311      	orrs	r1, r2
    a53c:	d1e6      	bne.n	a50c <__ledf2+0x50>
    a53e:	e7d7      	b.n	a4f0 <__ledf2+0x34>
    a540:	433a      	orrs	r2, r7
    a542:	d1dd      	bne.n	a500 <__ledf2+0x44>
    a544:	2300      	movs	r3, #0
    a546:	2800      	cmp	r0, #0
    a548:	d0e0      	beq.n	a50c <__ledf2+0x50>
    a54a:	e7ea      	b.n	a522 <__ledf2+0x66>
    a54c:	433a      	orrs	r2, r7
    a54e:	d1e6      	bne.n	a51e <__ledf2+0x62>
    a550:	e7e7      	b.n	a522 <__ledf2+0x66>
    a552:	42a5      	cmp	r5, r4
    a554:	dce5      	bgt.n	a522 <__ledf2+0x66>
    a556:	db05      	blt.n	a564 <__ledf2+0xa8>
    a558:	42be      	cmp	r6, r7
    a55a:	d8e2      	bhi.n	a522 <__ledf2+0x66>
    a55c:	d007      	beq.n	a56e <__ledf2+0xb2>
    a55e:	2300      	movs	r3, #0
    a560:	42be      	cmp	r6, r7
    a562:	d2d3      	bcs.n	a50c <__ledf2+0x50>
    a564:	4659      	mov	r1, fp
    a566:	2301      	movs	r3, #1
    a568:	3901      	subs	r1, #1
    a56a:	430b      	orrs	r3, r1
    a56c:	e7ce      	b.n	a50c <__ledf2+0x50>
    a56e:	45c4      	cmp	ip, r8
    a570:	d8d7      	bhi.n	a522 <__ledf2+0x66>
    a572:	2300      	movs	r3, #0
    a574:	45c4      	cmp	ip, r8
    a576:	d3f5      	bcc.n	a564 <__ledf2+0xa8>
    a578:	e7c8      	b.n	a50c <__ledf2+0x50>
    a57a:	46c0      	nop			; (mov r8, r8)
    a57c:	000007ff 	.word	0x000007ff

0000a580 <__aeabi_dmul>:
    a580:	b5f0      	push	{r4, r5, r6, r7, lr}
    a582:	4657      	mov	r7, sl
    a584:	4645      	mov	r5, r8
    a586:	46de      	mov	lr, fp
    a588:	464e      	mov	r6, r9
    a58a:	b5e0      	push	{r5, r6, r7, lr}
    a58c:	030c      	lsls	r4, r1, #12
    a58e:	4698      	mov	r8, r3
    a590:	004e      	lsls	r6, r1, #1
    a592:	0b23      	lsrs	r3, r4, #12
    a594:	b087      	sub	sp, #28
    a596:	0007      	movs	r7, r0
    a598:	4692      	mov	sl, r2
    a59a:	469b      	mov	fp, r3
    a59c:	0d76      	lsrs	r6, r6, #21
    a59e:	0fcd      	lsrs	r5, r1, #31
    a5a0:	2e00      	cmp	r6, #0
    a5a2:	d06b      	beq.n	a67c <__aeabi_dmul+0xfc>
    a5a4:	4b6d      	ldr	r3, [pc, #436]	; (a75c <__aeabi_dmul+0x1dc>)
    a5a6:	429e      	cmp	r6, r3
    a5a8:	d035      	beq.n	a616 <__aeabi_dmul+0x96>
    a5aa:	2480      	movs	r4, #128	; 0x80
    a5ac:	465b      	mov	r3, fp
    a5ae:	0f42      	lsrs	r2, r0, #29
    a5b0:	0424      	lsls	r4, r4, #16
    a5b2:	00db      	lsls	r3, r3, #3
    a5b4:	4314      	orrs	r4, r2
    a5b6:	431c      	orrs	r4, r3
    a5b8:	00c3      	lsls	r3, r0, #3
    a5ba:	4699      	mov	r9, r3
    a5bc:	4b68      	ldr	r3, [pc, #416]	; (a760 <__aeabi_dmul+0x1e0>)
    a5be:	46a3      	mov	fp, r4
    a5c0:	469c      	mov	ip, r3
    a5c2:	2300      	movs	r3, #0
    a5c4:	2700      	movs	r7, #0
    a5c6:	4466      	add	r6, ip
    a5c8:	9302      	str	r3, [sp, #8]
    a5ca:	4643      	mov	r3, r8
    a5cc:	031c      	lsls	r4, r3, #12
    a5ce:	005a      	lsls	r2, r3, #1
    a5d0:	0fdb      	lsrs	r3, r3, #31
    a5d2:	4650      	mov	r0, sl
    a5d4:	0b24      	lsrs	r4, r4, #12
    a5d6:	0d52      	lsrs	r2, r2, #21
    a5d8:	4698      	mov	r8, r3
    a5da:	d100      	bne.n	a5de <__aeabi_dmul+0x5e>
    a5dc:	e076      	b.n	a6cc <__aeabi_dmul+0x14c>
    a5de:	4b5f      	ldr	r3, [pc, #380]	; (a75c <__aeabi_dmul+0x1dc>)
    a5e0:	429a      	cmp	r2, r3
    a5e2:	d06d      	beq.n	a6c0 <__aeabi_dmul+0x140>
    a5e4:	2380      	movs	r3, #128	; 0x80
    a5e6:	0f41      	lsrs	r1, r0, #29
    a5e8:	041b      	lsls	r3, r3, #16
    a5ea:	430b      	orrs	r3, r1
    a5ec:	495c      	ldr	r1, [pc, #368]	; (a760 <__aeabi_dmul+0x1e0>)
    a5ee:	00e4      	lsls	r4, r4, #3
    a5f0:	468c      	mov	ip, r1
    a5f2:	431c      	orrs	r4, r3
    a5f4:	00c3      	lsls	r3, r0, #3
    a5f6:	2000      	movs	r0, #0
    a5f8:	4462      	add	r2, ip
    a5fa:	4641      	mov	r1, r8
    a5fc:	18b6      	adds	r6, r6, r2
    a5fe:	4069      	eors	r1, r5
    a600:	1c72      	adds	r2, r6, #1
    a602:	9101      	str	r1, [sp, #4]
    a604:	4694      	mov	ip, r2
    a606:	4307      	orrs	r7, r0
    a608:	2f0f      	cmp	r7, #15
    a60a:	d900      	bls.n	a60e <__aeabi_dmul+0x8e>
    a60c:	e0b0      	b.n	a770 <__aeabi_dmul+0x1f0>
    a60e:	4a55      	ldr	r2, [pc, #340]	; (a764 <__aeabi_dmul+0x1e4>)
    a610:	00bf      	lsls	r7, r7, #2
    a612:	59d2      	ldr	r2, [r2, r7]
    a614:	4697      	mov	pc, r2
    a616:	465b      	mov	r3, fp
    a618:	4303      	orrs	r3, r0
    a61a:	4699      	mov	r9, r3
    a61c:	d000      	beq.n	a620 <__aeabi_dmul+0xa0>
    a61e:	e087      	b.n	a730 <__aeabi_dmul+0x1b0>
    a620:	2300      	movs	r3, #0
    a622:	469b      	mov	fp, r3
    a624:	3302      	adds	r3, #2
    a626:	2708      	movs	r7, #8
    a628:	9302      	str	r3, [sp, #8]
    a62a:	e7ce      	b.n	a5ca <__aeabi_dmul+0x4a>
    a62c:	4642      	mov	r2, r8
    a62e:	9201      	str	r2, [sp, #4]
    a630:	2802      	cmp	r0, #2
    a632:	d067      	beq.n	a704 <__aeabi_dmul+0x184>
    a634:	2803      	cmp	r0, #3
    a636:	d100      	bne.n	a63a <__aeabi_dmul+0xba>
    a638:	e20e      	b.n	aa58 <__aeabi_dmul+0x4d8>
    a63a:	2801      	cmp	r0, #1
    a63c:	d000      	beq.n	a640 <__aeabi_dmul+0xc0>
    a63e:	e162      	b.n	a906 <__aeabi_dmul+0x386>
    a640:	2300      	movs	r3, #0
    a642:	2400      	movs	r4, #0
    a644:	2200      	movs	r2, #0
    a646:	4699      	mov	r9, r3
    a648:	9901      	ldr	r1, [sp, #4]
    a64a:	4001      	ands	r1, r0
    a64c:	b2cd      	uxtb	r5, r1
    a64e:	2100      	movs	r1, #0
    a650:	0312      	lsls	r2, r2, #12
    a652:	0d0b      	lsrs	r3, r1, #20
    a654:	0b12      	lsrs	r2, r2, #12
    a656:	051b      	lsls	r3, r3, #20
    a658:	4313      	orrs	r3, r2
    a65a:	4a43      	ldr	r2, [pc, #268]	; (a768 <__aeabi_dmul+0x1e8>)
    a65c:	0524      	lsls	r4, r4, #20
    a65e:	4013      	ands	r3, r2
    a660:	431c      	orrs	r4, r3
    a662:	0064      	lsls	r4, r4, #1
    a664:	07ed      	lsls	r5, r5, #31
    a666:	0864      	lsrs	r4, r4, #1
    a668:	432c      	orrs	r4, r5
    a66a:	4648      	mov	r0, r9
    a66c:	0021      	movs	r1, r4
    a66e:	b007      	add	sp, #28
    a670:	bc3c      	pop	{r2, r3, r4, r5}
    a672:	4690      	mov	r8, r2
    a674:	4699      	mov	r9, r3
    a676:	46a2      	mov	sl, r4
    a678:	46ab      	mov	fp, r5
    a67a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a67c:	4303      	orrs	r3, r0
    a67e:	4699      	mov	r9, r3
    a680:	d04f      	beq.n	a722 <__aeabi_dmul+0x1a2>
    a682:	465b      	mov	r3, fp
    a684:	2b00      	cmp	r3, #0
    a686:	d100      	bne.n	a68a <__aeabi_dmul+0x10a>
    a688:	e189      	b.n	a99e <__aeabi_dmul+0x41e>
    a68a:	4658      	mov	r0, fp
    a68c:	f000 feb8 	bl	b400 <__clzsi2>
    a690:	0003      	movs	r3, r0
    a692:	3b0b      	subs	r3, #11
    a694:	2b1c      	cmp	r3, #28
    a696:	dd00      	ble.n	a69a <__aeabi_dmul+0x11a>
    a698:	e17a      	b.n	a990 <__aeabi_dmul+0x410>
    a69a:	221d      	movs	r2, #29
    a69c:	1ad3      	subs	r3, r2, r3
    a69e:	003a      	movs	r2, r7
    a6a0:	0001      	movs	r1, r0
    a6a2:	465c      	mov	r4, fp
    a6a4:	40da      	lsrs	r2, r3
    a6a6:	3908      	subs	r1, #8
    a6a8:	408c      	lsls	r4, r1
    a6aa:	0013      	movs	r3, r2
    a6ac:	408f      	lsls	r7, r1
    a6ae:	4323      	orrs	r3, r4
    a6b0:	469b      	mov	fp, r3
    a6b2:	46b9      	mov	r9, r7
    a6b4:	2300      	movs	r3, #0
    a6b6:	4e2d      	ldr	r6, [pc, #180]	; (a76c <__aeabi_dmul+0x1ec>)
    a6b8:	2700      	movs	r7, #0
    a6ba:	1a36      	subs	r6, r6, r0
    a6bc:	9302      	str	r3, [sp, #8]
    a6be:	e784      	b.n	a5ca <__aeabi_dmul+0x4a>
    a6c0:	4653      	mov	r3, sl
    a6c2:	4323      	orrs	r3, r4
    a6c4:	d12a      	bne.n	a71c <__aeabi_dmul+0x19c>
    a6c6:	2400      	movs	r4, #0
    a6c8:	2002      	movs	r0, #2
    a6ca:	e796      	b.n	a5fa <__aeabi_dmul+0x7a>
    a6cc:	4653      	mov	r3, sl
    a6ce:	4323      	orrs	r3, r4
    a6d0:	d020      	beq.n	a714 <__aeabi_dmul+0x194>
    a6d2:	2c00      	cmp	r4, #0
    a6d4:	d100      	bne.n	a6d8 <__aeabi_dmul+0x158>
    a6d6:	e157      	b.n	a988 <__aeabi_dmul+0x408>
    a6d8:	0020      	movs	r0, r4
    a6da:	f000 fe91 	bl	b400 <__clzsi2>
    a6de:	0003      	movs	r3, r0
    a6e0:	3b0b      	subs	r3, #11
    a6e2:	2b1c      	cmp	r3, #28
    a6e4:	dd00      	ble.n	a6e8 <__aeabi_dmul+0x168>
    a6e6:	e149      	b.n	a97c <__aeabi_dmul+0x3fc>
    a6e8:	211d      	movs	r1, #29
    a6ea:	1acb      	subs	r3, r1, r3
    a6ec:	4651      	mov	r1, sl
    a6ee:	0002      	movs	r2, r0
    a6f0:	40d9      	lsrs	r1, r3
    a6f2:	4653      	mov	r3, sl
    a6f4:	3a08      	subs	r2, #8
    a6f6:	4094      	lsls	r4, r2
    a6f8:	4093      	lsls	r3, r2
    a6fa:	430c      	orrs	r4, r1
    a6fc:	4a1b      	ldr	r2, [pc, #108]	; (a76c <__aeabi_dmul+0x1ec>)
    a6fe:	1a12      	subs	r2, r2, r0
    a700:	2000      	movs	r0, #0
    a702:	e77a      	b.n	a5fa <__aeabi_dmul+0x7a>
    a704:	2501      	movs	r5, #1
    a706:	9b01      	ldr	r3, [sp, #4]
    a708:	4c14      	ldr	r4, [pc, #80]	; (a75c <__aeabi_dmul+0x1dc>)
    a70a:	401d      	ands	r5, r3
    a70c:	2300      	movs	r3, #0
    a70e:	2200      	movs	r2, #0
    a710:	4699      	mov	r9, r3
    a712:	e79c      	b.n	a64e <__aeabi_dmul+0xce>
    a714:	2400      	movs	r4, #0
    a716:	2200      	movs	r2, #0
    a718:	2001      	movs	r0, #1
    a71a:	e76e      	b.n	a5fa <__aeabi_dmul+0x7a>
    a71c:	4653      	mov	r3, sl
    a71e:	2003      	movs	r0, #3
    a720:	e76b      	b.n	a5fa <__aeabi_dmul+0x7a>
    a722:	2300      	movs	r3, #0
    a724:	469b      	mov	fp, r3
    a726:	3301      	adds	r3, #1
    a728:	2704      	movs	r7, #4
    a72a:	2600      	movs	r6, #0
    a72c:	9302      	str	r3, [sp, #8]
    a72e:	e74c      	b.n	a5ca <__aeabi_dmul+0x4a>
    a730:	2303      	movs	r3, #3
    a732:	4681      	mov	r9, r0
    a734:	270c      	movs	r7, #12
    a736:	9302      	str	r3, [sp, #8]
    a738:	e747      	b.n	a5ca <__aeabi_dmul+0x4a>
    a73a:	2280      	movs	r2, #128	; 0x80
    a73c:	2300      	movs	r3, #0
    a73e:	2500      	movs	r5, #0
    a740:	0312      	lsls	r2, r2, #12
    a742:	4699      	mov	r9, r3
    a744:	4c05      	ldr	r4, [pc, #20]	; (a75c <__aeabi_dmul+0x1dc>)
    a746:	e782      	b.n	a64e <__aeabi_dmul+0xce>
    a748:	465c      	mov	r4, fp
    a74a:	464b      	mov	r3, r9
    a74c:	9802      	ldr	r0, [sp, #8]
    a74e:	e76f      	b.n	a630 <__aeabi_dmul+0xb0>
    a750:	465c      	mov	r4, fp
    a752:	464b      	mov	r3, r9
    a754:	9501      	str	r5, [sp, #4]
    a756:	9802      	ldr	r0, [sp, #8]
    a758:	e76a      	b.n	a630 <__aeabi_dmul+0xb0>
    a75a:	46c0      	nop			; (mov r8, r8)
    a75c:	000007ff 	.word	0x000007ff
    a760:	fffffc01 	.word	0xfffffc01
    a764:	0000e08c 	.word	0x0000e08c
    a768:	800fffff 	.word	0x800fffff
    a76c:	fffffc0d 	.word	0xfffffc0d
    a770:	464a      	mov	r2, r9
    a772:	4649      	mov	r1, r9
    a774:	0c17      	lsrs	r7, r2, #16
    a776:	0c1a      	lsrs	r2, r3, #16
    a778:	041b      	lsls	r3, r3, #16
    a77a:	0c1b      	lsrs	r3, r3, #16
    a77c:	0408      	lsls	r0, r1, #16
    a77e:	0019      	movs	r1, r3
    a780:	0c00      	lsrs	r0, r0, #16
    a782:	4341      	muls	r1, r0
    a784:	0015      	movs	r5, r2
    a786:	4688      	mov	r8, r1
    a788:	0019      	movs	r1, r3
    a78a:	437d      	muls	r5, r7
    a78c:	4379      	muls	r1, r7
    a78e:	9503      	str	r5, [sp, #12]
    a790:	4689      	mov	r9, r1
    a792:	0029      	movs	r1, r5
    a794:	0015      	movs	r5, r2
    a796:	4345      	muls	r5, r0
    a798:	444d      	add	r5, r9
    a79a:	9502      	str	r5, [sp, #8]
    a79c:	4645      	mov	r5, r8
    a79e:	0c2d      	lsrs	r5, r5, #16
    a7a0:	46aa      	mov	sl, r5
    a7a2:	9d02      	ldr	r5, [sp, #8]
    a7a4:	4455      	add	r5, sl
    a7a6:	45a9      	cmp	r9, r5
    a7a8:	d906      	bls.n	a7b8 <__aeabi_dmul+0x238>
    a7aa:	468a      	mov	sl, r1
    a7ac:	2180      	movs	r1, #128	; 0x80
    a7ae:	0249      	lsls	r1, r1, #9
    a7b0:	4689      	mov	r9, r1
    a7b2:	44ca      	add	sl, r9
    a7b4:	4651      	mov	r1, sl
    a7b6:	9103      	str	r1, [sp, #12]
    a7b8:	0c29      	lsrs	r1, r5, #16
    a7ba:	9104      	str	r1, [sp, #16]
    a7bc:	4641      	mov	r1, r8
    a7be:	0409      	lsls	r1, r1, #16
    a7c0:	042d      	lsls	r5, r5, #16
    a7c2:	0c09      	lsrs	r1, r1, #16
    a7c4:	4688      	mov	r8, r1
    a7c6:	0029      	movs	r1, r5
    a7c8:	0c25      	lsrs	r5, r4, #16
    a7ca:	0424      	lsls	r4, r4, #16
    a7cc:	4441      	add	r1, r8
    a7ce:	0c24      	lsrs	r4, r4, #16
    a7d0:	9105      	str	r1, [sp, #20]
    a7d2:	0021      	movs	r1, r4
    a7d4:	4341      	muls	r1, r0
    a7d6:	4688      	mov	r8, r1
    a7d8:	0021      	movs	r1, r4
    a7da:	4379      	muls	r1, r7
    a7dc:	468a      	mov	sl, r1
    a7de:	4368      	muls	r0, r5
    a7e0:	4641      	mov	r1, r8
    a7e2:	4450      	add	r0, sl
    a7e4:	4681      	mov	r9, r0
    a7e6:	0c08      	lsrs	r0, r1, #16
    a7e8:	4448      	add	r0, r9
    a7ea:	436f      	muls	r7, r5
    a7ec:	4582      	cmp	sl, r0
    a7ee:	d903      	bls.n	a7f8 <__aeabi_dmul+0x278>
    a7f0:	2180      	movs	r1, #128	; 0x80
    a7f2:	0249      	lsls	r1, r1, #9
    a7f4:	4689      	mov	r9, r1
    a7f6:	444f      	add	r7, r9
    a7f8:	0c01      	lsrs	r1, r0, #16
    a7fa:	4689      	mov	r9, r1
    a7fc:	0039      	movs	r1, r7
    a7fe:	4449      	add	r1, r9
    a800:	9102      	str	r1, [sp, #8]
    a802:	4641      	mov	r1, r8
    a804:	040f      	lsls	r7, r1, #16
    a806:	9904      	ldr	r1, [sp, #16]
    a808:	0c3f      	lsrs	r7, r7, #16
    a80a:	4688      	mov	r8, r1
    a80c:	0400      	lsls	r0, r0, #16
    a80e:	19c0      	adds	r0, r0, r7
    a810:	4480      	add	r8, r0
    a812:	4641      	mov	r1, r8
    a814:	9104      	str	r1, [sp, #16]
    a816:	4659      	mov	r1, fp
    a818:	0c0f      	lsrs	r7, r1, #16
    a81a:	0409      	lsls	r1, r1, #16
    a81c:	0c09      	lsrs	r1, r1, #16
    a81e:	4688      	mov	r8, r1
    a820:	4359      	muls	r1, r3
    a822:	468a      	mov	sl, r1
    a824:	0039      	movs	r1, r7
    a826:	4351      	muls	r1, r2
    a828:	4689      	mov	r9, r1
    a82a:	4641      	mov	r1, r8
    a82c:	434a      	muls	r2, r1
    a82e:	4651      	mov	r1, sl
    a830:	0c09      	lsrs	r1, r1, #16
    a832:	468b      	mov	fp, r1
    a834:	437b      	muls	r3, r7
    a836:	18d2      	adds	r2, r2, r3
    a838:	445a      	add	r2, fp
    a83a:	4293      	cmp	r3, r2
    a83c:	d903      	bls.n	a846 <__aeabi_dmul+0x2c6>
    a83e:	2380      	movs	r3, #128	; 0x80
    a840:	025b      	lsls	r3, r3, #9
    a842:	469b      	mov	fp, r3
    a844:	44d9      	add	r9, fp
    a846:	4651      	mov	r1, sl
    a848:	0409      	lsls	r1, r1, #16
    a84a:	0c09      	lsrs	r1, r1, #16
    a84c:	468a      	mov	sl, r1
    a84e:	4641      	mov	r1, r8
    a850:	4361      	muls	r1, r4
    a852:	437c      	muls	r4, r7
    a854:	0c13      	lsrs	r3, r2, #16
    a856:	0412      	lsls	r2, r2, #16
    a858:	444b      	add	r3, r9
    a85a:	4452      	add	r2, sl
    a85c:	46a1      	mov	r9, r4
    a85e:	468a      	mov	sl, r1
    a860:	003c      	movs	r4, r7
    a862:	4641      	mov	r1, r8
    a864:	436c      	muls	r4, r5
    a866:	434d      	muls	r5, r1
    a868:	4651      	mov	r1, sl
    a86a:	444d      	add	r5, r9
    a86c:	0c0f      	lsrs	r7, r1, #16
    a86e:	197d      	adds	r5, r7, r5
    a870:	45a9      	cmp	r9, r5
    a872:	d903      	bls.n	a87c <__aeabi_dmul+0x2fc>
    a874:	2180      	movs	r1, #128	; 0x80
    a876:	0249      	lsls	r1, r1, #9
    a878:	4688      	mov	r8, r1
    a87a:	4444      	add	r4, r8
    a87c:	9f04      	ldr	r7, [sp, #16]
    a87e:	9903      	ldr	r1, [sp, #12]
    a880:	46b8      	mov	r8, r7
    a882:	4441      	add	r1, r8
    a884:	468b      	mov	fp, r1
    a886:	4583      	cmp	fp, r0
    a888:	4180      	sbcs	r0, r0
    a88a:	4241      	negs	r1, r0
    a88c:	4688      	mov	r8, r1
    a88e:	4651      	mov	r1, sl
    a890:	0408      	lsls	r0, r1, #16
    a892:	042f      	lsls	r7, r5, #16
    a894:	0c00      	lsrs	r0, r0, #16
    a896:	183f      	adds	r7, r7, r0
    a898:	4658      	mov	r0, fp
    a89a:	9902      	ldr	r1, [sp, #8]
    a89c:	1810      	adds	r0, r2, r0
    a89e:	4689      	mov	r9, r1
    a8a0:	4290      	cmp	r0, r2
    a8a2:	4192      	sbcs	r2, r2
    a8a4:	444f      	add	r7, r9
    a8a6:	46ba      	mov	sl, r7
    a8a8:	4252      	negs	r2, r2
    a8aa:	4699      	mov	r9, r3
    a8ac:	4693      	mov	fp, r2
    a8ae:	44c2      	add	sl, r8
    a8b0:	44d1      	add	r9, sl
    a8b2:	44cb      	add	fp, r9
    a8b4:	428f      	cmp	r7, r1
    a8b6:	41bf      	sbcs	r7, r7
    a8b8:	45c2      	cmp	sl, r8
    a8ba:	4189      	sbcs	r1, r1
    a8bc:	4599      	cmp	r9, r3
    a8be:	419b      	sbcs	r3, r3
    a8c0:	4593      	cmp	fp, r2
    a8c2:	4192      	sbcs	r2, r2
    a8c4:	427f      	negs	r7, r7
    a8c6:	4249      	negs	r1, r1
    a8c8:	0c2d      	lsrs	r5, r5, #16
    a8ca:	4252      	negs	r2, r2
    a8cc:	430f      	orrs	r7, r1
    a8ce:	425b      	negs	r3, r3
    a8d0:	4313      	orrs	r3, r2
    a8d2:	197f      	adds	r7, r7, r5
    a8d4:	18ff      	adds	r7, r7, r3
    a8d6:	465b      	mov	r3, fp
    a8d8:	193c      	adds	r4, r7, r4
    a8da:	0ddb      	lsrs	r3, r3, #23
    a8dc:	9a05      	ldr	r2, [sp, #20]
    a8de:	0264      	lsls	r4, r4, #9
    a8e0:	431c      	orrs	r4, r3
    a8e2:	0243      	lsls	r3, r0, #9
    a8e4:	4313      	orrs	r3, r2
    a8e6:	1e5d      	subs	r5, r3, #1
    a8e8:	41ab      	sbcs	r3, r5
    a8ea:	465a      	mov	r2, fp
    a8ec:	0dc0      	lsrs	r0, r0, #23
    a8ee:	4303      	orrs	r3, r0
    a8f0:	0252      	lsls	r2, r2, #9
    a8f2:	4313      	orrs	r3, r2
    a8f4:	01e2      	lsls	r2, r4, #7
    a8f6:	d556      	bpl.n	a9a6 <__aeabi_dmul+0x426>
    a8f8:	2001      	movs	r0, #1
    a8fa:	085a      	lsrs	r2, r3, #1
    a8fc:	4003      	ands	r3, r0
    a8fe:	4313      	orrs	r3, r2
    a900:	07e2      	lsls	r2, r4, #31
    a902:	4313      	orrs	r3, r2
    a904:	0864      	lsrs	r4, r4, #1
    a906:	485a      	ldr	r0, [pc, #360]	; (aa70 <__aeabi_dmul+0x4f0>)
    a908:	4460      	add	r0, ip
    a90a:	2800      	cmp	r0, #0
    a90c:	dd4d      	ble.n	a9aa <__aeabi_dmul+0x42a>
    a90e:	075a      	lsls	r2, r3, #29
    a910:	d009      	beq.n	a926 <__aeabi_dmul+0x3a6>
    a912:	220f      	movs	r2, #15
    a914:	401a      	ands	r2, r3
    a916:	2a04      	cmp	r2, #4
    a918:	d005      	beq.n	a926 <__aeabi_dmul+0x3a6>
    a91a:	1d1a      	adds	r2, r3, #4
    a91c:	429a      	cmp	r2, r3
    a91e:	419b      	sbcs	r3, r3
    a920:	425b      	negs	r3, r3
    a922:	18e4      	adds	r4, r4, r3
    a924:	0013      	movs	r3, r2
    a926:	01e2      	lsls	r2, r4, #7
    a928:	d504      	bpl.n	a934 <__aeabi_dmul+0x3b4>
    a92a:	2080      	movs	r0, #128	; 0x80
    a92c:	4a51      	ldr	r2, [pc, #324]	; (aa74 <__aeabi_dmul+0x4f4>)
    a92e:	00c0      	lsls	r0, r0, #3
    a930:	4014      	ands	r4, r2
    a932:	4460      	add	r0, ip
    a934:	4a50      	ldr	r2, [pc, #320]	; (aa78 <__aeabi_dmul+0x4f8>)
    a936:	4290      	cmp	r0, r2
    a938:	dd00      	ble.n	a93c <__aeabi_dmul+0x3bc>
    a93a:	e6e3      	b.n	a704 <__aeabi_dmul+0x184>
    a93c:	2501      	movs	r5, #1
    a93e:	08db      	lsrs	r3, r3, #3
    a940:	0762      	lsls	r2, r4, #29
    a942:	431a      	orrs	r2, r3
    a944:	0264      	lsls	r4, r4, #9
    a946:	9b01      	ldr	r3, [sp, #4]
    a948:	4691      	mov	r9, r2
    a94a:	0b22      	lsrs	r2, r4, #12
    a94c:	0544      	lsls	r4, r0, #21
    a94e:	0d64      	lsrs	r4, r4, #21
    a950:	401d      	ands	r5, r3
    a952:	e67c      	b.n	a64e <__aeabi_dmul+0xce>
    a954:	2280      	movs	r2, #128	; 0x80
    a956:	4659      	mov	r1, fp
    a958:	0312      	lsls	r2, r2, #12
    a95a:	4211      	tst	r1, r2
    a95c:	d008      	beq.n	a970 <__aeabi_dmul+0x3f0>
    a95e:	4214      	tst	r4, r2
    a960:	d106      	bne.n	a970 <__aeabi_dmul+0x3f0>
    a962:	4322      	orrs	r2, r4
    a964:	0312      	lsls	r2, r2, #12
    a966:	0b12      	lsrs	r2, r2, #12
    a968:	4645      	mov	r5, r8
    a96a:	4699      	mov	r9, r3
    a96c:	4c43      	ldr	r4, [pc, #268]	; (aa7c <__aeabi_dmul+0x4fc>)
    a96e:	e66e      	b.n	a64e <__aeabi_dmul+0xce>
    a970:	465b      	mov	r3, fp
    a972:	431a      	orrs	r2, r3
    a974:	0312      	lsls	r2, r2, #12
    a976:	0b12      	lsrs	r2, r2, #12
    a978:	4c40      	ldr	r4, [pc, #256]	; (aa7c <__aeabi_dmul+0x4fc>)
    a97a:	e668      	b.n	a64e <__aeabi_dmul+0xce>
    a97c:	0003      	movs	r3, r0
    a97e:	4654      	mov	r4, sl
    a980:	3b28      	subs	r3, #40	; 0x28
    a982:	409c      	lsls	r4, r3
    a984:	2300      	movs	r3, #0
    a986:	e6b9      	b.n	a6fc <__aeabi_dmul+0x17c>
    a988:	f000 fd3a 	bl	b400 <__clzsi2>
    a98c:	3020      	adds	r0, #32
    a98e:	e6a6      	b.n	a6de <__aeabi_dmul+0x15e>
    a990:	0003      	movs	r3, r0
    a992:	3b28      	subs	r3, #40	; 0x28
    a994:	409f      	lsls	r7, r3
    a996:	2300      	movs	r3, #0
    a998:	46bb      	mov	fp, r7
    a99a:	4699      	mov	r9, r3
    a99c:	e68a      	b.n	a6b4 <__aeabi_dmul+0x134>
    a99e:	f000 fd2f 	bl	b400 <__clzsi2>
    a9a2:	3020      	adds	r0, #32
    a9a4:	e674      	b.n	a690 <__aeabi_dmul+0x110>
    a9a6:	46b4      	mov	ip, r6
    a9a8:	e7ad      	b.n	a906 <__aeabi_dmul+0x386>
    a9aa:	2501      	movs	r5, #1
    a9ac:	1a2a      	subs	r2, r5, r0
    a9ae:	2a38      	cmp	r2, #56	; 0x38
    a9b0:	dd06      	ble.n	a9c0 <__aeabi_dmul+0x440>
    a9b2:	9b01      	ldr	r3, [sp, #4]
    a9b4:	2400      	movs	r4, #0
    a9b6:	401d      	ands	r5, r3
    a9b8:	2300      	movs	r3, #0
    a9ba:	2200      	movs	r2, #0
    a9bc:	4699      	mov	r9, r3
    a9be:	e646      	b.n	a64e <__aeabi_dmul+0xce>
    a9c0:	2a1f      	cmp	r2, #31
    a9c2:	dc21      	bgt.n	aa08 <__aeabi_dmul+0x488>
    a9c4:	2520      	movs	r5, #32
    a9c6:	0020      	movs	r0, r4
    a9c8:	1aad      	subs	r5, r5, r2
    a9ca:	001e      	movs	r6, r3
    a9cc:	40ab      	lsls	r3, r5
    a9ce:	40a8      	lsls	r0, r5
    a9d0:	40d6      	lsrs	r6, r2
    a9d2:	1e5d      	subs	r5, r3, #1
    a9d4:	41ab      	sbcs	r3, r5
    a9d6:	4330      	orrs	r0, r6
    a9d8:	4318      	orrs	r0, r3
    a9da:	40d4      	lsrs	r4, r2
    a9dc:	0743      	lsls	r3, r0, #29
    a9de:	d009      	beq.n	a9f4 <__aeabi_dmul+0x474>
    a9e0:	230f      	movs	r3, #15
    a9e2:	4003      	ands	r3, r0
    a9e4:	2b04      	cmp	r3, #4
    a9e6:	d005      	beq.n	a9f4 <__aeabi_dmul+0x474>
    a9e8:	0003      	movs	r3, r0
    a9ea:	1d18      	adds	r0, r3, #4
    a9ec:	4298      	cmp	r0, r3
    a9ee:	419b      	sbcs	r3, r3
    a9f0:	425b      	negs	r3, r3
    a9f2:	18e4      	adds	r4, r4, r3
    a9f4:	0223      	lsls	r3, r4, #8
    a9f6:	d521      	bpl.n	aa3c <__aeabi_dmul+0x4bc>
    a9f8:	2501      	movs	r5, #1
    a9fa:	9b01      	ldr	r3, [sp, #4]
    a9fc:	2401      	movs	r4, #1
    a9fe:	401d      	ands	r5, r3
    aa00:	2300      	movs	r3, #0
    aa02:	2200      	movs	r2, #0
    aa04:	4699      	mov	r9, r3
    aa06:	e622      	b.n	a64e <__aeabi_dmul+0xce>
    aa08:	251f      	movs	r5, #31
    aa0a:	0021      	movs	r1, r4
    aa0c:	426d      	negs	r5, r5
    aa0e:	1a28      	subs	r0, r5, r0
    aa10:	40c1      	lsrs	r1, r0
    aa12:	0008      	movs	r0, r1
    aa14:	2a20      	cmp	r2, #32
    aa16:	d01d      	beq.n	aa54 <__aeabi_dmul+0x4d4>
    aa18:	355f      	adds	r5, #95	; 0x5f
    aa1a:	1aaa      	subs	r2, r5, r2
    aa1c:	4094      	lsls	r4, r2
    aa1e:	4323      	orrs	r3, r4
    aa20:	1e5c      	subs	r4, r3, #1
    aa22:	41a3      	sbcs	r3, r4
    aa24:	2507      	movs	r5, #7
    aa26:	4303      	orrs	r3, r0
    aa28:	401d      	ands	r5, r3
    aa2a:	2200      	movs	r2, #0
    aa2c:	2d00      	cmp	r5, #0
    aa2e:	d009      	beq.n	aa44 <__aeabi_dmul+0x4c4>
    aa30:	220f      	movs	r2, #15
    aa32:	2400      	movs	r4, #0
    aa34:	401a      	ands	r2, r3
    aa36:	0018      	movs	r0, r3
    aa38:	2a04      	cmp	r2, #4
    aa3a:	d1d6      	bne.n	a9ea <__aeabi_dmul+0x46a>
    aa3c:	0003      	movs	r3, r0
    aa3e:	0765      	lsls	r5, r4, #29
    aa40:	0264      	lsls	r4, r4, #9
    aa42:	0b22      	lsrs	r2, r4, #12
    aa44:	08db      	lsrs	r3, r3, #3
    aa46:	432b      	orrs	r3, r5
    aa48:	2501      	movs	r5, #1
    aa4a:	4699      	mov	r9, r3
    aa4c:	9b01      	ldr	r3, [sp, #4]
    aa4e:	2400      	movs	r4, #0
    aa50:	401d      	ands	r5, r3
    aa52:	e5fc      	b.n	a64e <__aeabi_dmul+0xce>
    aa54:	2400      	movs	r4, #0
    aa56:	e7e2      	b.n	aa1e <__aeabi_dmul+0x49e>
    aa58:	2280      	movs	r2, #128	; 0x80
    aa5a:	2501      	movs	r5, #1
    aa5c:	0312      	lsls	r2, r2, #12
    aa5e:	4322      	orrs	r2, r4
    aa60:	9901      	ldr	r1, [sp, #4]
    aa62:	0312      	lsls	r2, r2, #12
    aa64:	0b12      	lsrs	r2, r2, #12
    aa66:	400d      	ands	r5, r1
    aa68:	4699      	mov	r9, r3
    aa6a:	4c04      	ldr	r4, [pc, #16]	; (aa7c <__aeabi_dmul+0x4fc>)
    aa6c:	e5ef      	b.n	a64e <__aeabi_dmul+0xce>
    aa6e:	46c0      	nop			; (mov r8, r8)
    aa70:	000003ff 	.word	0x000003ff
    aa74:	feffffff 	.word	0xfeffffff
    aa78:	000007fe 	.word	0x000007fe
    aa7c:	000007ff 	.word	0x000007ff

0000aa80 <__aeabi_dsub>:
    aa80:	b5f0      	push	{r4, r5, r6, r7, lr}
    aa82:	4646      	mov	r6, r8
    aa84:	46d6      	mov	lr, sl
    aa86:	464f      	mov	r7, r9
    aa88:	030c      	lsls	r4, r1, #12
    aa8a:	b5c0      	push	{r6, r7, lr}
    aa8c:	0fcd      	lsrs	r5, r1, #31
    aa8e:	004e      	lsls	r6, r1, #1
    aa90:	0a61      	lsrs	r1, r4, #9
    aa92:	0f44      	lsrs	r4, r0, #29
    aa94:	430c      	orrs	r4, r1
    aa96:	00c1      	lsls	r1, r0, #3
    aa98:	0058      	lsls	r0, r3, #1
    aa9a:	0d40      	lsrs	r0, r0, #21
    aa9c:	4684      	mov	ip, r0
    aa9e:	468a      	mov	sl, r1
    aaa0:	000f      	movs	r7, r1
    aaa2:	0319      	lsls	r1, r3, #12
    aaa4:	0f50      	lsrs	r0, r2, #29
    aaa6:	0a49      	lsrs	r1, r1, #9
    aaa8:	4301      	orrs	r1, r0
    aaaa:	48c6      	ldr	r0, [pc, #792]	; (adc4 <__aeabi_dsub+0x344>)
    aaac:	0d76      	lsrs	r6, r6, #21
    aaae:	46a8      	mov	r8, r5
    aab0:	0fdb      	lsrs	r3, r3, #31
    aab2:	00d2      	lsls	r2, r2, #3
    aab4:	4584      	cmp	ip, r0
    aab6:	d100      	bne.n	aaba <__aeabi_dsub+0x3a>
    aab8:	e0d8      	b.n	ac6c <__aeabi_dsub+0x1ec>
    aaba:	2001      	movs	r0, #1
    aabc:	4043      	eors	r3, r0
    aabe:	42ab      	cmp	r3, r5
    aac0:	d100      	bne.n	aac4 <__aeabi_dsub+0x44>
    aac2:	e0a6      	b.n	ac12 <__aeabi_dsub+0x192>
    aac4:	4660      	mov	r0, ip
    aac6:	1a35      	subs	r5, r6, r0
    aac8:	2d00      	cmp	r5, #0
    aaca:	dc00      	bgt.n	aace <__aeabi_dsub+0x4e>
    aacc:	e105      	b.n	acda <__aeabi_dsub+0x25a>
    aace:	2800      	cmp	r0, #0
    aad0:	d110      	bne.n	aaf4 <__aeabi_dsub+0x74>
    aad2:	000b      	movs	r3, r1
    aad4:	4313      	orrs	r3, r2
    aad6:	d100      	bne.n	aada <__aeabi_dsub+0x5a>
    aad8:	e0d7      	b.n	ac8a <__aeabi_dsub+0x20a>
    aada:	1e6b      	subs	r3, r5, #1
    aadc:	2b00      	cmp	r3, #0
    aade:	d000      	beq.n	aae2 <__aeabi_dsub+0x62>
    aae0:	e14b      	b.n	ad7a <__aeabi_dsub+0x2fa>
    aae2:	4653      	mov	r3, sl
    aae4:	1a9f      	subs	r7, r3, r2
    aae6:	45ba      	cmp	sl, r7
    aae8:	4180      	sbcs	r0, r0
    aaea:	1a64      	subs	r4, r4, r1
    aaec:	4240      	negs	r0, r0
    aaee:	1a24      	subs	r4, r4, r0
    aaf0:	2601      	movs	r6, #1
    aaf2:	e01e      	b.n	ab32 <__aeabi_dsub+0xb2>
    aaf4:	4bb3      	ldr	r3, [pc, #716]	; (adc4 <__aeabi_dsub+0x344>)
    aaf6:	429e      	cmp	r6, r3
    aaf8:	d048      	beq.n	ab8c <__aeabi_dsub+0x10c>
    aafa:	2380      	movs	r3, #128	; 0x80
    aafc:	041b      	lsls	r3, r3, #16
    aafe:	4319      	orrs	r1, r3
    ab00:	2d38      	cmp	r5, #56	; 0x38
    ab02:	dd00      	ble.n	ab06 <__aeabi_dsub+0x86>
    ab04:	e119      	b.n	ad3a <__aeabi_dsub+0x2ba>
    ab06:	2d1f      	cmp	r5, #31
    ab08:	dd00      	ble.n	ab0c <__aeabi_dsub+0x8c>
    ab0a:	e14c      	b.n	ada6 <__aeabi_dsub+0x326>
    ab0c:	2320      	movs	r3, #32
    ab0e:	000f      	movs	r7, r1
    ab10:	1b5b      	subs	r3, r3, r5
    ab12:	0010      	movs	r0, r2
    ab14:	409a      	lsls	r2, r3
    ab16:	409f      	lsls	r7, r3
    ab18:	40e8      	lsrs	r0, r5
    ab1a:	1e53      	subs	r3, r2, #1
    ab1c:	419a      	sbcs	r2, r3
    ab1e:	40e9      	lsrs	r1, r5
    ab20:	4307      	orrs	r7, r0
    ab22:	4317      	orrs	r7, r2
    ab24:	4653      	mov	r3, sl
    ab26:	1bdf      	subs	r7, r3, r7
    ab28:	1a61      	subs	r1, r4, r1
    ab2a:	45ba      	cmp	sl, r7
    ab2c:	41a4      	sbcs	r4, r4
    ab2e:	4264      	negs	r4, r4
    ab30:	1b0c      	subs	r4, r1, r4
    ab32:	0223      	lsls	r3, r4, #8
    ab34:	d400      	bmi.n	ab38 <__aeabi_dsub+0xb8>
    ab36:	e0c5      	b.n	acc4 <__aeabi_dsub+0x244>
    ab38:	0264      	lsls	r4, r4, #9
    ab3a:	0a65      	lsrs	r5, r4, #9
    ab3c:	2d00      	cmp	r5, #0
    ab3e:	d100      	bne.n	ab42 <__aeabi_dsub+0xc2>
    ab40:	e0f6      	b.n	ad30 <__aeabi_dsub+0x2b0>
    ab42:	0028      	movs	r0, r5
    ab44:	f000 fc5c 	bl	b400 <__clzsi2>
    ab48:	0003      	movs	r3, r0
    ab4a:	3b08      	subs	r3, #8
    ab4c:	2b1f      	cmp	r3, #31
    ab4e:	dd00      	ble.n	ab52 <__aeabi_dsub+0xd2>
    ab50:	e0e9      	b.n	ad26 <__aeabi_dsub+0x2a6>
    ab52:	2220      	movs	r2, #32
    ab54:	003c      	movs	r4, r7
    ab56:	1ad2      	subs	r2, r2, r3
    ab58:	409d      	lsls	r5, r3
    ab5a:	40d4      	lsrs	r4, r2
    ab5c:	409f      	lsls	r7, r3
    ab5e:	4325      	orrs	r5, r4
    ab60:	429e      	cmp	r6, r3
    ab62:	dd00      	ble.n	ab66 <__aeabi_dsub+0xe6>
    ab64:	e0db      	b.n	ad1e <__aeabi_dsub+0x29e>
    ab66:	1b9e      	subs	r6, r3, r6
    ab68:	1c73      	adds	r3, r6, #1
    ab6a:	2b1f      	cmp	r3, #31
    ab6c:	dd00      	ble.n	ab70 <__aeabi_dsub+0xf0>
    ab6e:	e10a      	b.n	ad86 <__aeabi_dsub+0x306>
    ab70:	2220      	movs	r2, #32
    ab72:	0038      	movs	r0, r7
    ab74:	1ad2      	subs	r2, r2, r3
    ab76:	0029      	movs	r1, r5
    ab78:	4097      	lsls	r7, r2
    ab7a:	002c      	movs	r4, r5
    ab7c:	4091      	lsls	r1, r2
    ab7e:	40d8      	lsrs	r0, r3
    ab80:	1e7a      	subs	r2, r7, #1
    ab82:	4197      	sbcs	r7, r2
    ab84:	40dc      	lsrs	r4, r3
    ab86:	2600      	movs	r6, #0
    ab88:	4301      	orrs	r1, r0
    ab8a:	430f      	orrs	r7, r1
    ab8c:	077b      	lsls	r3, r7, #29
    ab8e:	d009      	beq.n	aba4 <__aeabi_dsub+0x124>
    ab90:	230f      	movs	r3, #15
    ab92:	403b      	ands	r3, r7
    ab94:	2b04      	cmp	r3, #4
    ab96:	d005      	beq.n	aba4 <__aeabi_dsub+0x124>
    ab98:	1d3b      	adds	r3, r7, #4
    ab9a:	42bb      	cmp	r3, r7
    ab9c:	41bf      	sbcs	r7, r7
    ab9e:	427f      	negs	r7, r7
    aba0:	19e4      	adds	r4, r4, r7
    aba2:	001f      	movs	r7, r3
    aba4:	0223      	lsls	r3, r4, #8
    aba6:	d525      	bpl.n	abf4 <__aeabi_dsub+0x174>
    aba8:	4b86      	ldr	r3, [pc, #536]	; (adc4 <__aeabi_dsub+0x344>)
    abaa:	3601      	adds	r6, #1
    abac:	429e      	cmp	r6, r3
    abae:	d100      	bne.n	abb2 <__aeabi_dsub+0x132>
    abb0:	e0af      	b.n	ad12 <__aeabi_dsub+0x292>
    abb2:	4b85      	ldr	r3, [pc, #532]	; (adc8 <__aeabi_dsub+0x348>)
    abb4:	2501      	movs	r5, #1
    abb6:	401c      	ands	r4, r3
    abb8:	4643      	mov	r3, r8
    abba:	0762      	lsls	r2, r4, #29
    abbc:	08ff      	lsrs	r7, r7, #3
    abbe:	0264      	lsls	r4, r4, #9
    abc0:	0576      	lsls	r6, r6, #21
    abc2:	4317      	orrs	r7, r2
    abc4:	0b24      	lsrs	r4, r4, #12
    abc6:	0d76      	lsrs	r6, r6, #21
    abc8:	401d      	ands	r5, r3
    abca:	2100      	movs	r1, #0
    abcc:	0324      	lsls	r4, r4, #12
    abce:	0b23      	lsrs	r3, r4, #12
    abd0:	0d0c      	lsrs	r4, r1, #20
    abd2:	4a7e      	ldr	r2, [pc, #504]	; (adcc <__aeabi_dsub+0x34c>)
    abd4:	0524      	lsls	r4, r4, #20
    abd6:	431c      	orrs	r4, r3
    abd8:	4014      	ands	r4, r2
    abda:	0533      	lsls	r3, r6, #20
    abdc:	4323      	orrs	r3, r4
    abde:	005b      	lsls	r3, r3, #1
    abe0:	07ed      	lsls	r5, r5, #31
    abe2:	085b      	lsrs	r3, r3, #1
    abe4:	432b      	orrs	r3, r5
    abe6:	0038      	movs	r0, r7
    abe8:	0019      	movs	r1, r3
    abea:	bc1c      	pop	{r2, r3, r4}
    abec:	4690      	mov	r8, r2
    abee:	4699      	mov	r9, r3
    abf0:	46a2      	mov	sl, r4
    abf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    abf4:	2501      	movs	r5, #1
    abf6:	4643      	mov	r3, r8
    abf8:	0762      	lsls	r2, r4, #29
    abfa:	08ff      	lsrs	r7, r7, #3
    abfc:	4317      	orrs	r7, r2
    abfe:	08e4      	lsrs	r4, r4, #3
    ac00:	401d      	ands	r5, r3
    ac02:	4b70      	ldr	r3, [pc, #448]	; (adc4 <__aeabi_dsub+0x344>)
    ac04:	429e      	cmp	r6, r3
    ac06:	d036      	beq.n	ac76 <__aeabi_dsub+0x1f6>
    ac08:	0324      	lsls	r4, r4, #12
    ac0a:	0576      	lsls	r6, r6, #21
    ac0c:	0b24      	lsrs	r4, r4, #12
    ac0e:	0d76      	lsrs	r6, r6, #21
    ac10:	e7db      	b.n	abca <__aeabi_dsub+0x14a>
    ac12:	4663      	mov	r3, ip
    ac14:	1af3      	subs	r3, r6, r3
    ac16:	2b00      	cmp	r3, #0
    ac18:	dc00      	bgt.n	ac1c <__aeabi_dsub+0x19c>
    ac1a:	e094      	b.n	ad46 <__aeabi_dsub+0x2c6>
    ac1c:	4660      	mov	r0, ip
    ac1e:	2800      	cmp	r0, #0
    ac20:	d035      	beq.n	ac8e <__aeabi_dsub+0x20e>
    ac22:	4868      	ldr	r0, [pc, #416]	; (adc4 <__aeabi_dsub+0x344>)
    ac24:	4286      	cmp	r6, r0
    ac26:	d0b1      	beq.n	ab8c <__aeabi_dsub+0x10c>
    ac28:	2780      	movs	r7, #128	; 0x80
    ac2a:	043f      	lsls	r7, r7, #16
    ac2c:	4339      	orrs	r1, r7
    ac2e:	2b38      	cmp	r3, #56	; 0x38
    ac30:	dc00      	bgt.n	ac34 <__aeabi_dsub+0x1b4>
    ac32:	e0fd      	b.n	ae30 <__aeabi_dsub+0x3b0>
    ac34:	430a      	orrs	r2, r1
    ac36:	0017      	movs	r7, r2
    ac38:	2100      	movs	r1, #0
    ac3a:	1e7a      	subs	r2, r7, #1
    ac3c:	4197      	sbcs	r7, r2
    ac3e:	4457      	add	r7, sl
    ac40:	4557      	cmp	r7, sl
    ac42:	4180      	sbcs	r0, r0
    ac44:	1909      	adds	r1, r1, r4
    ac46:	4244      	negs	r4, r0
    ac48:	190c      	adds	r4, r1, r4
    ac4a:	0223      	lsls	r3, r4, #8
    ac4c:	d53a      	bpl.n	acc4 <__aeabi_dsub+0x244>
    ac4e:	4b5d      	ldr	r3, [pc, #372]	; (adc4 <__aeabi_dsub+0x344>)
    ac50:	3601      	adds	r6, #1
    ac52:	429e      	cmp	r6, r3
    ac54:	d100      	bne.n	ac58 <__aeabi_dsub+0x1d8>
    ac56:	e14b      	b.n	aef0 <__aeabi_dsub+0x470>
    ac58:	2201      	movs	r2, #1
    ac5a:	4b5b      	ldr	r3, [pc, #364]	; (adc8 <__aeabi_dsub+0x348>)
    ac5c:	401c      	ands	r4, r3
    ac5e:	087b      	lsrs	r3, r7, #1
    ac60:	4017      	ands	r7, r2
    ac62:	431f      	orrs	r7, r3
    ac64:	07e2      	lsls	r2, r4, #31
    ac66:	4317      	orrs	r7, r2
    ac68:	0864      	lsrs	r4, r4, #1
    ac6a:	e78f      	b.n	ab8c <__aeabi_dsub+0x10c>
    ac6c:	0008      	movs	r0, r1
    ac6e:	4310      	orrs	r0, r2
    ac70:	d000      	beq.n	ac74 <__aeabi_dsub+0x1f4>
    ac72:	e724      	b.n	aabe <__aeabi_dsub+0x3e>
    ac74:	e721      	b.n	aaba <__aeabi_dsub+0x3a>
    ac76:	0023      	movs	r3, r4
    ac78:	433b      	orrs	r3, r7
    ac7a:	d100      	bne.n	ac7e <__aeabi_dsub+0x1fe>
    ac7c:	e1b9      	b.n	aff2 <__aeabi_dsub+0x572>
    ac7e:	2280      	movs	r2, #128	; 0x80
    ac80:	0312      	lsls	r2, r2, #12
    ac82:	4314      	orrs	r4, r2
    ac84:	0324      	lsls	r4, r4, #12
    ac86:	0b24      	lsrs	r4, r4, #12
    ac88:	e79f      	b.n	abca <__aeabi_dsub+0x14a>
    ac8a:	002e      	movs	r6, r5
    ac8c:	e77e      	b.n	ab8c <__aeabi_dsub+0x10c>
    ac8e:	0008      	movs	r0, r1
    ac90:	4310      	orrs	r0, r2
    ac92:	d100      	bne.n	ac96 <__aeabi_dsub+0x216>
    ac94:	e0ca      	b.n	ae2c <__aeabi_dsub+0x3ac>
    ac96:	1e58      	subs	r0, r3, #1
    ac98:	4684      	mov	ip, r0
    ac9a:	2800      	cmp	r0, #0
    ac9c:	d000      	beq.n	aca0 <__aeabi_dsub+0x220>
    ac9e:	e0e7      	b.n	ae70 <__aeabi_dsub+0x3f0>
    aca0:	4452      	add	r2, sl
    aca2:	4552      	cmp	r2, sl
    aca4:	4180      	sbcs	r0, r0
    aca6:	1864      	adds	r4, r4, r1
    aca8:	4240      	negs	r0, r0
    acaa:	1824      	adds	r4, r4, r0
    acac:	0017      	movs	r7, r2
    acae:	2601      	movs	r6, #1
    acb0:	0223      	lsls	r3, r4, #8
    acb2:	d507      	bpl.n	acc4 <__aeabi_dsub+0x244>
    acb4:	2602      	movs	r6, #2
    acb6:	e7cf      	b.n	ac58 <__aeabi_dsub+0x1d8>
    acb8:	4664      	mov	r4, ip
    acba:	432c      	orrs	r4, r5
    acbc:	d100      	bne.n	acc0 <__aeabi_dsub+0x240>
    acbe:	e1b3      	b.n	b028 <__aeabi_dsub+0x5a8>
    acc0:	002c      	movs	r4, r5
    acc2:	4667      	mov	r7, ip
    acc4:	077b      	lsls	r3, r7, #29
    acc6:	d000      	beq.n	acca <__aeabi_dsub+0x24a>
    acc8:	e762      	b.n	ab90 <__aeabi_dsub+0x110>
    acca:	0763      	lsls	r3, r4, #29
    accc:	08ff      	lsrs	r7, r7, #3
    acce:	431f      	orrs	r7, r3
    acd0:	2501      	movs	r5, #1
    acd2:	4643      	mov	r3, r8
    acd4:	08e4      	lsrs	r4, r4, #3
    acd6:	401d      	ands	r5, r3
    acd8:	e793      	b.n	ac02 <__aeabi_dsub+0x182>
    acda:	2d00      	cmp	r5, #0
    acdc:	d178      	bne.n	add0 <__aeabi_dsub+0x350>
    acde:	1c75      	adds	r5, r6, #1
    ace0:	056d      	lsls	r5, r5, #21
    ace2:	0d6d      	lsrs	r5, r5, #21
    ace4:	2d01      	cmp	r5, #1
    ace6:	dc00      	bgt.n	acea <__aeabi_dsub+0x26a>
    ace8:	e0f2      	b.n	aed0 <__aeabi_dsub+0x450>
    acea:	4650      	mov	r0, sl
    acec:	1a80      	subs	r0, r0, r2
    acee:	4582      	cmp	sl, r0
    acf0:	41bf      	sbcs	r7, r7
    acf2:	1a65      	subs	r5, r4, r1
    acf4:	427f      	negs	r7, r7
    acf6:	1bed      	subs	r5, r5, r7
    acf8:	4684      	mov	ip, r0
    acfa:	0228      	lsls	r0, r5, #8
    acfc:	d400      	bmi.n	ad00 <__aeabi_dsub+0x280>
    acfe:	e08c      	b.n	ae1a <__aeabi_dsub+0x39a>
    ad00:	4650      	mov	r0, sl
    ad02:	1a17      	subs	r7, r2, r0
    ad04:	42ba      	cmp	r2, r7
    ad06:	4192      	sbcs	r2, r2
    ad08:	1b0c      	subs	r4, r1, r4
    ad0a:	4255      	negs	r5, r2
    ad0c:	1b65      	subs	r5, r4, r5
    ad0e:	4698      	mov	r8, r3
    ad10:	e714      	b.n	ab3c <__aeabi_dsub+0xbc>
    ad12:	2501      	movs	r5, #1
    ad14:	4643      	mov	r3, r8
    ad16:	2400      	movs	r4, #0
    ad18:	401d      	ands	r5, r3
    ad1a:	2700      	movs	r7, #0
    ad1c:	e755      	b.n	abca <__aeabi_dsub+0x14a>
    ad1e:	4c2a      	ldr	r4, [pc, #168]	; (adc8 <__aeabi_dsub+0x348>)
    ad20:	1af6      	subs	r6, r6, r3
    ad22:	402c      	ands	r4, r5
    ad24:	e732      	b.n	ab8c <__aeabi_dsub+0x10c>
    ad26:	003d      	movs	r5, r7
    ad28:	3828      	subs	r0, #40	; 0x28
    ad2a:	4085      	lsls	r5, r0
    ad2c:	2700      	movs	r7, #0
    ad2e:	e717      	b.n	ab60 <__aeabi_dsub+0xe0>
    ad30:	0038      	movs	r0, r7
    ad32:	f000 fb65 	bl	b400 <__clzsi2>
    ad36:	3020      	adds	r0, #32
    ad38:	e706      	b.n	ab48 <__aeabi_dsub+0xc8>
    ad3a:	430a      	orrs	r2, r1
    ad3c:	0017      	movs	r7, r2
    ad3e:	2100      	movs	r1, #0
    ad40:	1e7a      	subs	r2, r7, #1
    ad42:	4197      	sbcs	r7, r2
    ad44:	e6ee      	b.n	ab24 <__aeabi_dsub+0xa4>
    ad46:	2b00      	cmp	r3, #0
    ad48:	d000      	beq.n	ad4c <__aeabi_dsub+0x2cc>
    ad4a:	e0e5      	b.n	af18 <__aeabi_dsub+0x498>
    ad4c:	1c73      	adds	r3, r6, #1
    ad4e:	469c      	mov	ip, r3
    ad50:	055b      	lsls	r3, r3, #21
    ad52:	0d5b      	lsrs	r3, r3, #21
    ad54:	2b01      	cmp	r3, #1
    ad56:	dc00      	bgt.n	ad5a <__aeabi_dsub+0x2da>
    ad58:	e09f      	b.n	ae9a <__aeabi_dsub+0x41a>
    ad5a:	4b1a      	ldr	r3, [pc, #104]	; (adc4 <__aeabi_dsub+0x344>)
    ad5c:	459c      	cmp	ip, r3
    ad5e:	d100      	bne.n	ad62 <__aeabi_dsub+0x2e2>
    ad60:	e0c5      	b.n	aeee <__aeabi_dsub+0x46e>
    ad62:	4452      	add	r2, sl
    ad64:	4552      	cmp	r2, sl
    ad66:	4180      	sbcs	r0, r0
    ad68:	1864      	adds	r4, r4, r1
    ad6a:	4240      	negs	r0, r0
    ad6c:	1824      	adds	r4, r4, r0
    ad6e:	07e7      	lsls	r7, r4, #31
    ad70:	0852      	lsrs	r2, r2, #1
    ad72:	4317      	orrs	r7, r2
    ad74:	0864      	lsrs	r4, r4, #1
    ad76:	4666      	mov	r6, ip
    ad78:	e708      	b.n	ab8c <__aeabi_dsub+0x10c>
    ad7a:	4812      	ldr	r0, [pc, #72]	; (adc4 <__aeabi_dsub+0x344>)
    ad7c:	4285      	cmp	r5, r0
    ad7e:	d100      	bne.n	ad82 <__aeabi_dsub+0x302>
    ad80:	e085      	b.n	ae8e <__aeabi_dsub+0x40e>
    ad82:	001d      	movs	r5, r3
    ad84:	e6bc      	b.n	ab00 <__aeabi_dsub+0x80>
    ad86:	0029      	movs	r1, r5
    ad88:	3e1f      	subs	r6, #31
    ad8a:	40f1      	lsrs	r1, r6
    ad8c:	2b20      	cmp	r3, #32
    ad8e:	d100      	bne.n	ad92 <__aeabi_dsub+0x312>
    ad90:	e07f      	b.n	ae92 <__aeabi_dsub+0x412>
    ad92:	2240      	movs	r2, #64	; 0x40
    ad94:	1ad3      	subs	r3, r2, r3
    ad96:	409d      	lsls	r5, r3
    ad98:	432f      	orrs	r7, r5
    ad9a:	1e7d      	subs	r5, r7, #1
    ad9c:	41af      	sbcs	r7, r5
    ad9e:	2400      	movs	r4, #0
    ada0:	430f      	orrs	r7, r1
    ada2:	2600      	movs	r6, #0
    ada4:	e78e      	b.n	acc4 <__aeabi_dsub+0x244>
    ada6:	002b      	movs	r3, r5
    ada8:	000f      	movs	r7, r1
    adaa:	3b20      	subs	r3, #32
    adac:	40df      	lsrs	r7, r3
    adae:	2d20      	cmp	r5, #32
    adb0:	d071      	beq.n	ae96 <__aeabi_dsub+0x416>
    adb2:	2340      	movs	r3, #64	; 0x40
    adb4:	1b5d      	subs	r5, r3, r5
    adb6:	40a9      	lsls	r1, r5
    adb8:	430a      	orrs	r2, r1
    adba:	1e51      	subs	r1, r2, #1
    adbc:	418a      	sbcs	r2, r1
    adbe:	2100      	movs	r1, #0
    adc0:	4317      	orrs	r7, r2
    adc2:	e6af      	b.n	ab24 <__aeabi_dsub+0xa4>
    adc4:	000007ff 	.word	0x000007ff
    adc8:	ff7fffff 	.word	0xff7fffff
    adcc:	800fffff 	.word	0x800fffff
    add0:	2e00      	cmp	r6, #0
    add2:	d03e      	beq.n	ae52 <__aeabi_dsub+0x3d2>
    add4:	4eb3      	ldr	r6, [pc, #716]	; (b0a4 <__aeabi_dsub+0x624>)
    add6:	45b4      	cmp	ip, r6
    add8:	d045      	beq.n	ae66 <__aeabi_dsub+0x3e6>
    adda:	2680      	movs	r6, #128	; 0x80
    addc:	0436      	lsls	r6, r6, #16
    adde:	426d      	negs	r5, r5
    ade0:	4334      	orrs	r4, r6
    ade2:	2d38      	cmp	r5, #56	; 0x38
    ade4:	dd00      	ble.n	ade8 <__aeabi_dsub+0x368>
    ade6:	e0a8      	b.n	af3a <__aeabi_dsub+0x4ba>
    ade8:	2d1f      	cmp	r5, #31
    adea:	dd00      	ble.n	adee <__aeabi_dsub+0x36e>
    adec:	e11f      	b.n	b02e <__aeabi_dsub+0x5ae>
    adee:	2620      	movs	r6, #32
    adf0:	0027      	movs	r7, r4
    adf2:	4650      	mov	r0, sl
    adf4:	1b76      	subs	r6, r6, r5
    adf6:	40b7      	lsls	r7, r6
    adf8:	40e8      	lsrs	r0, r5
    adfa:	4307      	orrs	r7, r0
    adfc:	4650      	mov	r0, sl
    adfe:	40b0      	lsls	r0, r6
    ae00:	1e46      	subs	r6, r0, #1
    ae02:	41b0      	sbcs	r0, r6
    ae04:	40ec      	lsrs	r4, r5
    ae06:	4338      	orrs	r0, r7
    ae08:	1a17      	subs	r7, r2, r0
    ae0a:	42ba      	cmp	r2, r7
    ae0c:	4192      	sbcs	r2, r2
    ae0e:	1b0c      	subs	r4, r1, r4
    ae10:	4252      	negs	r2, r2
    ae12:	1aa4      	subs	r4, r4, r2
    ae14:	4666      	mov	r6, ip
    ae16:	4698      	mov	r8, r3
    ae18:	e68b      	b.n	ab32 <__aeabi_dsub+0xb2>
    ae1a:	4664      	mov	r4, ip
    ae1c:	4667      	mov	r7, ip
    ae1e:	432c      	orrs	r4, r5
    ae20:	d000      	beq.n	ae24 <__aeabi_dsub+0x3a4>
    ae22:	e68b      	b.n	ab3c <__aeabi_dsub+0xbc>
    ae24:	2500      	movs	r5, #0
    ae26:	2600      	movs	r6, #0
    ae28:	2700      	movs	r7, #0
    ae2a:	e6ea      	b.n	ac02 <__aeabi_dsub+0x182>
    ae2c:	001e      	movs	r6, r3
    ae2e:	e6ad      	b.n	ab8c <__aeabi_dsub+0x10c>
    ae30:	2b1f      	cmp	r3, #31
    ae32:	dc60      	bgt.n	aef6 <__aeabi_dsub+0x476>
    ae34:	2720      	movs	r7, #32
    ae36:	1af8      	subs	r0, r7, r3
    ae38:	000f      	movs	r7, r1
    ae3a:	4684      	mov	ip, r0
    ae3c:	4087      	lsls	r7, r0
    ae3e:	0010      	movs	r0, r2
    ae40:	40d8      	lsrs	r0, r3
    ae42:	4307      	orrs	r7, r0
    ae44:	4660      	mov	r0, ip
    ae46:	4082      	lsls	r2, r0
    ae48:	1e50      	subs	r0, r2, #1
    ae4a:	4182      	sbcs	r2, r0
    ae4c:	40d9      	lsrs	r1, r3
    ae4e:	4317      	orrs	r7, r2
    ae50:	e6f5      	b.n	ac3e <__aeabi_dsub+0x1be>
    ae52:	0026      	movs	r6, r4
    ae54:	4650      	mov	r0, sl
    ae56:	4306      	orrs	r6, r0
    ae58:	d005      	beq.n	ae66 <__aeabi_dsub+0x3e6>
    ae5a:	43ed      	mvns	r5, r5
    ae5c:	2d00      	cmp	r5, #0
    ae5e:	d0d3      	beq.n	ae08 <__aeabi_dsub+0x388>
    ae60:	4e90      	ldr	r6, [pc, #576]	; (b0a4 <__aeabi_dsub+0x624>)
    ae62:	45b4      	cmp	ip, r6
    ae64:	d1bd      	bne.n	ade2 <__aeabi_dsub+0x362>
    ae66:	000c      	movs	r4, r1
    ae68:	0017      	movs	r7, r2
    ae6a:	4666      	mov	r6, ip
    ae6c:	4698      	mov	r8, r3
    ae6e:	e68d      	b.n	ab8c <__aeabi_dsub+0x10c>
    ae70:	488c      	ldr	r0, [pc, #560]	; (b0a4 <__aeabi_dsub+0x624>)
    ae72:	4283      	cmp	r3, r0
    ae74:	d00b      	beq.n	ae8e <__aeabi_dsub+0x40e>
    ae76:	4663      	mov	r3, ip
    ae78:	e6d9      	b.n	ac2e <__aeabi_dsub+0x1ae>
    ae7a:	2d00      	cmp	r5, #0
    ae7c:	d000      	beq.n	ae80 <__aeabi_dsub+0x400>
    ae7e:	e096      	b.n	afae <__aeabi_dsub+0x52e>
    ae80:	0008      	movs	r0, r1
    ae82:	4310      	orrs	r0, r2
    ae84:	d100      	bne.n	ae88 <__aeabi_dsub+0x408>
    ae86:	e0e2      	b.n	b04e <__aeabi_dsub+0x5ce>
    ae88:	000c      	movs	r4, r1
    ae8a:	0017      	movs	r7, r2
    ae8c:	4698      	mov	r8, r3
    ae8e:	4e85      	ldr	r6, [pc, #532]	; (b0a4 <__aeabi_dsub+0x624>)
    ae90:	e67c      	b.n	ab8c <__aeabi_dsub+0x10c>
    ae92:	2500      	movs	r5, #0
    ae94:	e780      	b.n	ad98 <__aeabi_dsub+0x318>
    ae96:	2100      	movs	r1, #0
    ae98:	e78e      	b.n	adb8 <__aeabi_dsub+0x338>
    ae9a:	0023      	movs	r3, r4
    ae9c:	4650      	mov	r0, sl
    ae9e:	4303      	orrs	r3, r0
    aea0:	2e00      	cmp	r6, #0
    aea2:	d000      	beq.n	aea6 <__aeabi_dsub+0x426>
    aea4:	e0a8      	b.n	aff8 <__aeabi_dsub+0x578>
    aea6:	2b00      	cmp	r3, #0
    aea8:	d100      	bne.n	aeac <__aeabi_dsub+0x42c>
    aeaa:	e0de      	b.n	b06a <__aeabi_dsub+0x5ea>
    aeac:	000b      	movs	r3, r1
    aeae:	4313      	orrs	r3, r2
    aeb0:	d100      	bne.n	aeb4 <__aeabi_dsub+0x434>
    aeb2:	e66b      	b.n	ab8c <__aeabi_dsub+0x10c>
    aeb4:	4452      	add	r2, sl
    aeb6:	4552      	cmp	r2, sl
    aeb8:	4180      	sbcs	r0, r0
    aeba:	1864      	adds	r4, r4, r1
    aebc:	4240      	negs	r0, r0
    aebe:	1824      	adds	r4, r4, r0
    aec0:	0017      	movs	r7, r2
    aec2:	0223      	lsls	r3, r4, #8
    aec4:	d400      	bmi.n	aec8 <__aeabi_dsub+0x448>
    aec6:	e6fd      	b.n	acc4 <__aeabi_dsub+0x244>
    aec8:	4b77      	ldr	r3, [pc, #476]	; (b0a8 <__aeabi_dsub+0x628>)
    aeca:	4666      	mov	r6, ip
    aecc:	401c      	ands	r4, r3
    aece:	e65d      	b.n	ab8c <__aeabi_dsub+0x10c>
    aed0:	0025      	movs	r5, r4
    aed2:	4650      	mov	r0, sl
    aed4:	4305      	orrs	r5, r0
    aed6:	2e00      	cmp	r6, #0
    aed8:	d1cf      	bne.n	ae7a <__aeabi_dsub+0x3fa>
    aeda:	2d00      	cmp	r5, #0
    aedc:	d14f      	bne.n	af7e <__aeabi_dsub+0x4fe>
    aede:	000c      	movs	r4, r1
    aee0:	4314      	orrs	r4, r2
    aee2:	d100      	bne.n	aee6 <__aeabi_dsub+0x466>
    aee4:	e0a0      	b.n	b028 <__aeabi_dsub+0x5a8>
    aee6:	000c      	movs	r4, r1
    aee8:	0017      	movs	r7, r2
    aeea:	4698      	mov	r8, r3
    aeec:	e64e      	b.n	ab8c <__aeabi_dsub+0x10c>
    aeee:	4666      	mov	r6, ip
    aef0:	2400      	movs	r4, #0
    aef2:	2700      	movs	r7, #0
    aef4:	e685      	b.n	ac02 <__aeabi_dsub+0x182>
    aef6:	001f      	movs	r7, r3
    aef8:	0008      	movs	r0, r1
    aefa:	3f20      	subs	r7, #32
    aefc:	40f8      	lsrs	r0, r7
    aefe:	0007      	movs	r7, r0
    af00:	2b20      	cmp	r3, #32
    af02:	d100      	bne.n	af06 <__aeabi_dsub+0x486>
    af04:	e08e      	b.n	b024 <__aeabi_dsub+0x5a4>
    af06:	2040      	movs	r0, #64	; 0x40
    af08:	1ac3      	subs	r3, r0, r3
    af0a:	4099      	lsls	r1, r3
    af0c:	430a      	orrs	r2, r1
    af0e:	1e51      	subs	r1, r2, #1
    af10:	418a      	sbcs	r2, r1
    af12:	2100      	movs	r1, #0
    af14:	4317      	orrs	r7, r2
    af16:	e692      	b.n	ac3e <__aeabi_dsub+0x1be>
    af18:	2e00      	cmp	r6, #0
    af1a:	d114      	bne.n	af46 <__aeabi_dsub+0x4c6>
    af1c:	0026      	movs	r6, r4
    af1e:	4650      	mov	r0, sl
    af20:	4306      	orrs	r6, r0
    af22:	d062      	beq.n	afea <__aeabi_dsub+0x56a>
    af24:	43db      	mvns	r3, r3
    af26:	2b00      	cmp	r3, #0
    af28:	d15c      	bne.n	afe4 <__aeabi_dsub+0x564>
    af2a:	1887      	adds	r7, r0, r2
    af2c:	4297      	cmp	r7, r2
    af2e:	4192      	sbcs	r2, r2
    af30:	1864      	adds	r4, r4, r1
    af32:	4252      	negs	r2, r2
    af34:	18a4      	adds	r4, r4, r2
    af36:	4666      	mov	r6, ip
    af38:	e687      	b.n	ac4a <__aeabi_dsub+0x1ca>
    af3a:	4650      	mov	r0, sl
    af3c:	4320      	orrs	r0, r4
    af3e:	1e44      	subs	r4, r0, #1
    af40:	41a0      	sbcs	r0, r4
    af42:	2400      	movs	r4, #0
    af44:	e760      	b.n	ae08 <__aeabi_dsub+0x388>
    af46:	4e57      	ldr	r6, [pc, #348]	; (b0a4 <__aeabi_dsub+0x624>)
    af48:	45b4      	cmp	ip, r6
    af4a:	d04e      	beq.n	afea <__aeabi_dsub+0x56a>
    af4c:	2680      	movs	r6, #128	; 0x80
    af4e:	0436      	lsls	r6, r6, #16
    af50:	425b      	negs	r3, r3
    af52:	4334      	orrs	r4, r6
    af54:	2b38      	cmp	r3, #56	; 0x38
    af56:	dd00      	ble.n	af5a <__aeabi_dsub+0x4da>
    af58:	e07f      	b.n	b05a <__aeabi_dsub+0x5da>
    af5a:	2b1f      	cmp	r3, #31
    af5c:	dd00      	ble.n	af60 <__aeabi_dsub+0x4e0>
    af5e:	e08b      	b.n	b078 <__aeabi_dsub+0x5f8>
    af60:	2620      	movs	r6, #32
    af62:	0027      	movs	r7, r4
    af64:	4650      	mov	r0, sl
    af66:	1af6      	subs	r6, r6, r3
    af68:	40b7      	lsls	r7, r6
    af6a:	40d8      	lsrs	r0, r3
    af6c:	4307      	orrs	r7, r0
    af6e:	4650      	mov	r0, sl
    af70:	40b0      	lsls	r0, r6
    af72:	1e46      	subs	r6, r0, #1
    af74:	41b0      	sbcs	r0, r6
    af76:	4307      	orrs	r7, r0
    af78:	40dc      	lsrs	r4, r3
    af7a:	18bf      	adds	r7, r7, r2
    af7c:	e7d6      	b.n	af2c <__aeabi_dsub+0x4ac>
    af7e:	000d      	movs	r5, r1
    af80:	4315      	orrs	r5, r2
    af82:	d100      	bne.n	af86 <__aeabi_dsub+0x506>
    af84:	e602      	b.n	ab8c <__aeabi_dsub+0x10c>
    af86:	4650      	mov	r0, sl
    af88:	1a80      	subs	r0, r0, r2
    af8a:	4582      	cmp	sl, r0
    af8c:	41bf      	sbcs	r7, r7
    af8e:	1a65      	subs	r5, r4, r1
    af90:	427f      	negs	r7, r7
    af92:	1bed      	subs	r5, r5, r7
    af94:	4684      	mov	ip, r0
    af96:	0228      	lsls	r0, r5, #8
    af98:	d400      	bmi.n	af9c <__aeabi_dsub+0x51c>
    af9a:	e68d      	b.n	acb8 <__aeabi_dsub+0x238>
    af9c:	4650      	mov	r0, sl
    af9e:	1a17      	subs	r7, r2, r0
    afa0:	42ba      	cmp	r2, r7
    afa2:	4192      	sbcs	r2, r2
    afa4:	1b0c      	subs	r4, r1, r4
    afa6:	4252      	negs	r2, r2
    afa8:	1aa4      	subs	r4, r4, r2
    afaa:	4698      	mov	r8, r3
    afac:	e5ee      	b.n	ab8c <__aeabi_dsub+0x10c>
    afae:	000d      	movs	r5, r1
    afb0:	4315      	orrs	r5, r2
    afb2:	d100      	bne.n	afb6 <__aeabi_dsub+0x536>
    afb4:	e76b      	b.n	ae8e <__aeabi_dsub+0x40e>
    afb6:	4650      	mov	r0, sl
    afb8:	0767      	lsls	r7, r4, #29
    afba:	08c0      	lsrs	r0, r0, #3
    afbc:	4307      	orrs	r7, r0
    afbe:	2080      	movs	r0, #128	; 0x80
    afc0:	08e4      	lsrs	r4, r4, #3
    afc2:	0300      	lsls	r0, r0, #12
    afc4:	4204      	tst	r4, r0
    afc6:	d007      	beq.n	afd8 <__aeabi_dsub+0x558>
    afc8:	08cd      	lsrs	r5, r1, #3
    afca:	4205      	tst	r5, r0
    afcc:	d104      	bne.n	afd8 <__aeabi_dsub+0x558>
    afce:	002c      	movs	r4, r5
    afd0:	4698      	mov	r8, r3
    afd2:	08d7      	lsrs	r7, r2, #3
    afd4:	0749      	lsls	r1, r1, #29
    afd6:	430f      	orrs	r7, r1
    afd8:	0f7b      	lsrs	r3, r7, #29
    afda:	00e4      	lsls	r4, r4, #3
    afdc:	431c      	orrs	r4, r3
    afde:	00ff      	lsls	r7, r7, #3
    afe0:	4e30      	ldr	r6, [pc, #192]	; (b0a4 <__aeabi_dsub+0x624>)
    afe2:	e5d3      	b.n	ab8c <__aeabi_dsub+0x10c>
    afe4:	4e2f      	ldr	r6, [pc, #188]	; (b0a4 <__aeabi_dsub+0x624>)
    afe6:	45b4      	cmp	ip, r6
    afe8:	d1b4      	bne.n	af54 <__aeabi_dsub+0x4d4>
    afea:	000c      	movs	r4, r1
    afec:	0017      	movs	r7, r2
    afee:	4666      	mov	r6, ip
    aff0:	e5cc      	b.n	ab8c <__aeabi_dsub+0x10c>
    aff2:	2700      	movs	r7, #0
    aff4:	2400      	movs	r4, #0
    aff6:	e5e8      	b.n	abca <__aeabi_dsub+0x14a>
    aff8:	2b00      	cmp	r3, #0
    affa:	d039      	beq.n	b070 <__aeabi_dsub+0x5f0>
    affc:	000b      	movs	r3, r1
    affe:	4313      	orrs	r3, r2
    b000:	d100      	bne.n	b004 <__aeabi_dsub+0x584>
    b002:	e744      	b.n	ae8e <__aeabi_dsub+0x40e>
    b004:	08c0      	lsrs	r0, r0, #3
    b006:	0767      	lsls	r7, r4, #29
    b008:	4307      	orrs	r7, r0
    b00a:	2080      	movs	r0, #128	; 0x80
    b00c:	08e4      	lsrs	r4, r4, #3
    b00e:	0300      	lsls	r0, r0, #12
    b010:	4204      	tst	r4, r0
    b012:	d0e1      	beq.n	afd8 <__aeabi_dsub+0x558>
    b014:	08cb      	lsrs	r3, r1, #3
    b016:	4203      	tst	r3, r0
    b018:	d1de      	bne.n	afd8 <__aeabi_dsub+0x558>
    b01a:	08d7      	lsrs	r7, r2, #3
    b01c:	0749      	lsls	r1, r1, #29
    b01e:	430f      	orrs	r7, r1
    b020:	001c      	movs	r4, r3
    b022:	e7d9      	b.n	afd8 <__aeabi_dsub+0x558>
    b024:	2100      	movs	r1, #0
    b026:	e771      	b.n	af0c <__aeabi_dsub+0x48c>
    b028:	2500      	movs	r5, #0
    b02a:	2700      	movs	r7, #0
    b02c:	e5e9      	b.n	ac02 <__aeabi_dsub+0x182>
    b02e:	002e      	movs	r6, r5
    b030:	0027      	movs	r7, r4
    b032:	3e20      	subs	r6, #32
    b034:	40f7      	lsrs	r7, r6
    b036:	2d20      	cmp	r5, #32
    b038:	d02f      	beq.n	b09a <__aeabi_dsub+0x61a>
    b03a:	2640      	movs	r6, #64	; 0x40
    b03c:	1b75      	subs	r5, r6, r5
    b03e:	40ac      	lsls	r4, r5
    b040:	4650      	mov	r0, sl
    b042:	4320      	orrs	r0, r4
    b044:	1e44      	subs	r4, r0, #1
    b046:	41a0      	sbcs	r0, r4
    b048:	2400      	movs	r4, #0
    b04a:	4338      	orrs	r0, r7
    b04c:	e6dc      	b.n	ae08 <__aeabi_dsub+0x388>
    b04e:	2480      	movs	r4, #128	; 0x80
    b050:	2500      	movs	r5, #0
    b052:	0324      	lsls	r4, r4, #12
    b054:	4e13      	ldr	r6, [pc, #76]	; (b0a4 <__aeabi_dsub+0x624>)
    b056:	2700      	movs	r7, #0
    b058:	e5d3      	b.n	ac02 <__aeabi_dsub+0x182>
    b05a:	4650      	mov	r0, sl
    b05c:	4320      	orrs	r0, r4
    b05e:	0007      	movs	r7, r0
    b060:	1e78      	subs	r0, r7, #1
    b062:	4187      	sbcs	r7, r0
    b064:	2400      	movs	r4, #0
    b066:	18bf      	adds	r7, r7, r2
    b068:	e760      	b.n	af2c <__aeabi_dsub+0x4ac>
    b06a:	000c      	movs	r4, r1
    b06c:	0017      	movs	r7, r2
    b06e:	e58d      	b.n	ab8c <__aeabi_dsub+0x10c>
    b070:	000c      	movs	r4, r1
    b072:	0017      	movs	r7, r2
    b074:	4e0b      	ldr	r6, [pc, #44]	; (b0a4 <__aeabi_dsub+0x624>)
    b076:	e589      	b.n	ab8c <__aeabi_dsub+0x10c>
    b078:	001e      	movs	r6, r3
    b07a:	0027      	movs	r7, r4
    b07c:	3e20      	subs	r6, #32
    b07e:	40f7      	lsrs	r7, r6
    b080:	2b20      	cmp	r3, #32
    b082:	d00c      	beq.n	b09e <__aeabi_dsub+0x61e>
    b084:	2640      	movs	r6, #64	; 0x40
    b086:	1af3      	subs	r3, r6, r3
    b088:	409c      	lsls	r4, r3
    b08a:	4650      	mov	r0, sl
    b08c:	4320      	orrs	r0, r4
    b08e:	1e44      	subs	r4, r0, #1
    b090:	41a0      	sbcs	r0, r4
    b092:	4307      	orrs	r7, r0
    b094:	2400      	movs	r4, #0
    b096:	18bf      	adds	r7, r7, r2
    b098:	e748      	b.n	af2c <__aeabi_dsub+0x4ac>
    b09a:	2400      	movs	r4, #0
    b09c:	e7d0      	b.n	b040 <__aeabi_dsub+0x5c0>
    b09e:	2400      	movs	r4, #0
    b0a0:	e7f3      	b.n	b08a <__aeabi_dsub+0x60a>
    b0a2:	46c0      	nop			; (mov r8, r8)
    b0a4:	000007ff 	.word	0x000007ff
    b0a8:	ff7fffff 	.word	0xff7fffff

0000b0ac <__aeabi_dcmpun>:
    b0ac:	b570      	push	{r4, r5, r6, lr}
    b0ae:	4e0e      	ldr	r6, [pc, #56]	; (b0e8 <__aeabi_dcmpun+0x3c>)
    b0b0:	030d      	lsls	r5, r1, #12
    b0b2:	031c      	lsls	r4, r3, #12
    b0b4:	0049      	lsls	r1, r1, #1
    b0b6:	005b      	lsls	r3, r3, #1
    b0b8:	0b2d      	lsrs	r5, r5, #12
    b0ba:	0d49      	lsrs	r1, r1, #21
    b0bc:	0b24      	lsrs	r4, r4, #12
    b0be:	0d5b      	lsrs	r3, r3, #21
    b0c0:	42b1      	cmp	r1, r6
    b0c2:	d004      	beq.n	b0ce <__aeabi_dcmpun+0x22>
    b0c4:	4908      	ldr	r1, [pc, #32]	; (b0e8 <__aeabi_dcmpun+0x3c>)
    b0c6:	2000      	movs	r0, #0
    b0c8:	428b      	cmp	r3, r1
    b0ca:	d008      	beq.n	b0de <__aeabi_dcmpun+0x32>
    b0cc:	bd70      	pop	{r4, r5, r6, pc}
    b0ce:	4305      	orrs	r5, r0
    b0d0:	2001      	movs	r0, #1
    b0d2:	2d00      	cmp	r5, #0
    b0d4:	d1fa      	bne.n	b0cc <__aeabi_dcmpun+0x20>
    b0d6:	4904      	ldr	r1, [pc, #16]	; (b0e8 <__aeabi_dcmpun+0x3c>)
    b0d8:	2000      	movs	r0, #0
    b0da:	428b      	cmp	r3, r1
    b0dc:	d1f6      	bne.n	b0cc <__aeabi_dcmpun+0x20>
    b0de:	4314      	orrs	r4, r2
    b0e0:	0020      	movs	r0, r4
    b0e2:	1e44      	subs	r4, r0, #1
    b0e4:	41a0      	sbcs	r0, r4
    b0e6:	e7f1      	b.n	b0cc <__aeabi_dcmpun+0x20>
    b0e8:	000007ff 	.word	0x000007ff

0000b0ec <__aeabi_d2iz>:
    b0ec:	b530      	push	{r4, r5, lr}
    b0ee:	4d13      	ldr	r5, [pc, #76]	; (b13c <__aeabi_d2iz+0x50>)
    b0f0:	030a      	lsls	r2, r1, #12
    b0f2:	004b      	lsls	r3, r1, #1
    b0f4:	0b12      	lsrs	r2, r2, #12
    b0f6:	0d5b      	lsrs	r3, r3, #21
    b0f8:	0fc9      	lsrs	r1, r1, #31
    b0fa:	2400      	movs	r4, #0
    b0fc:	42ab      	cmp	r3, r5
    b0fe:	dd10      	ble.n	b122 <__aeabi_d2iz+0x36>
    b100:	4c0f      	ldr	r4, [pc, #60]	; (b140 <__aeabi_d2iz+0x54>)
    b102:	42a3      	cmp	r3, r4
    b104:	dc0f      	bgt.n	b126 <__aeabi_d2iz+0x3a>
    b106:	2480      	movs	r4, #128	; 0x80
    b108:	4d0e      	ldr	r5, [pc, #56]	; (b144 <__aeabi_d2iz+0x58>)
    b10a:	0364      	lsls	r4, r4, #13
    b10c:	4322      	orrs	r2, r4
    b10e:	1aed      	subs	r5, r5, r3
    b110:	2d1f      	cmp	r5, #31
    b112:	dd0b      	ble.n	b12c <__aeabi_d2iz+0x40>
    b114:	480c      	ldr	r0, [pc, #48]	; (b148 <__aeabi_d2iz+0x5c>)
    b116:	1ac3      	subs	r3, r0, r3
    b118:	40da      	lsrs	r2, r3
    b11a:	4254      	negs	r4, r2
    b11c:	2900      	cmp	r1, #0
    b11e:	d100      	bne.n	b122 <__aeabi_d2iz+0x36>
    b120:	0014      	movs	r4, r2
    b122:	0020      	movs	r0, r4
    b124:	bd30      	pop	{r4, r5, pc}
    b126:	4b09      	ldr	r3, [pc, #36]	; (b14c <__aeabi_d2iz+0x60>)
    b128:	18cc      	adds	r4, r1, r3
    b12a:	e7fa      	b.n	b122 <__aeabi_d2iz+0x36>
    b12c:	4c08      	ldr	r4, [pc, #32]	; (b150 <__aeabi_d2iz+0x64>)
    b12e:	40e8      	lsrs	r0, r5
    b130:	46a4      	mov	ip, r4
    b132:	4463      	add	r3, ip
    b134:	409a      	lsls	r2, r3
    b136:	4302      	orrs	r2, r0
    b138:	e7ef      	b.n	b11a <__aeabi_d2iz+0x2e>
    b13a:	46c0      	nop			; (mov r8, r8)
    b13c:	000003fe 	.word	0x000003fe
    b140:	0000041d 	.word	0x0000041d
    b144:	00000433 	.word	0x00000433
    b148:	00000413 	.word	0x00000413
    b14c:	7fffffff 	.word	0x7fffffff
    b150:	fffffbed 	.word	0xfffffbed

0000b154 <__aeabi_i2d>:
    b154:	b570      	push	{r4, r5, r6, lr}
    b156:	2800      	cmp	r0, #0
    b158:	d030      	beq.n	b1bc <__aeabi_i2d+0x68>
    b15a:	17c3      	asrs	r3, r0, #31
    b15c:	18c4      	adds	r4, r0, r3
    b15e:	405c      	eors	r4, r3
    b160:	0fc5      	lsrs	r5, r0, #31
    b162:	0020      	movs	r0, r4
    b164:	f000 f94c 	bl	b400 <__clzsi2>
    b168:	4b17      	ldr	r3, [pc, #92]	; (b1c8 <__aeabi_i2d+0x74>)
    b16a:	4a18      	ldr	r2, [pc, #96]	; (b1cc <__aeabi_i2d+0x78>)
    b16c:	1a1b      	subs	r3, r3, r0
    b16e:	1ad2      	subs	r2, r2, r3
    b170:	2a1f      	cmp	r2, #31
    b172:	dd18      	ble.n	b1a6 <__aeabi_i2d+0x52>
    b174:	4a16      	ldr	r2, [pc, #88]	; (b1d0 <__aeabi_i2d+0x7c>)
    b176:	1ad2      	subs	r2, r2, r3
    b178:	4094      	lsls	r4, r2
    b17a:	2200      	movs	r2, #0
    b17c:	0324      	lsls	r4, r4, #12
    b17e:	055b      	lsls	r3, r3, #21
    b180:	0b24      	lsrs	r4, r4, #12
    b182:	0d5b      	lsrs	r3, r3, #21
    b184:	2100      	movs	r1, #0
    b186:	0010      	movs	r0, r2
    b188:	0324      	lsls	r4, r4, #12
    b18a:	0d0a      	lsrs	r2, r1, #20
    b18c:	0b24      	lsrs	r4, r4, #12
    b18e:	0512      	lsls	r2, r2, #20
    b190:	4322      	orrs	r2, r4
    b192:	4c10      	ldr	r4, [pc, #64]	; (b1d4 <__aeabi_i2d+0x80>)
    b194:	051b      	lsls	r3, r3, #20
    b196:	4022      	ands	r2, r4
    b198:	4313      	orrs	r3, r2
    b19a:	005b      	lsls	r3, r3, #1
    b19c:	07ed      	lsls	r5, r5, #31
    b19e:	085b      	lsrs	r3, r3, #1
    b1a0:	432b      	orrs	r3, r5
    b1a2:	0019      	movs	r1, r3
    b1a4:	bd70      	pop	{r4, r5, r6, pc}
    b1a6:	0021      	movs	r1, r4
    b1a8:	4091      	lsls	r1, r2
    b1aa:	000a      	movs	r2, r1
    b1ac:	210b      	movs	r1, #11
    b1ae:	1a08      	subs	r0, r1, r0
    b1b0:	40c4      	lsrs	r4, r0
    b1b2:	055b      	lsls	r3, r3, #21
    b1b4:	0324      	lsls	r4, r4, #12
    b1b6:	0b24      	lsrs	r4, r4, #12
    b1b8:	0d5b      	lsrs	r3, r3, #21
    b1ba:	e7e3      	b.n	b184 <__aeabi_i2d+0x30>
    b1bc:	2500      	movs	r5, #0
    b1be:	2300      	movs	r3, #0
    b1c0:	2400      	movs	r4, #0
    b1c2:	2200      	movs	r2, #0
    b1c4:	e7de      	b.n	b184 <__aeabi_i2d+0x30>
    b1c6:	46c0      	nop			; (mov r8, r8)
    b1c8:	0000041e 	.word	0x0000041e
    b1cc:	00000433 	.word	0x00000433
    b1d0:	00000413 	.word	0x00000413
    b1d4:	800fffff 	.word	0x800fffff

0000b1d8 <__aeabi_ui2d>:
    b1d8:	b510      	push	{r4, lr}
    b1da:	1e04      	subs	r4, r0, #0
    b1dc:	d028      	beq.n	b230 <__aeabi_ui2d+0x58>
    b1de:	f000 f90f 	bl	b400 <__clzsi2>
    b1e2:	4b15      	ldr	r3, [pc, #84]	; (b238 <__aeabi_ui2d+0x60>)
    b1e4:	4a15      	ldr	r2, [pc, #84]	; (b23c <__aeabi_ui2d+0x64>)
    b1e6:	1a1b      	subs	r3, r3, r0
    b1e8:	1ad2      	subs	r2, r2, r3
    b1ea:	2a1f      	cmp	r2, #31
    b1ec:	dd15      	ble.n	b21a <__aeabi_ui2d+0x42>
    b1ee:	4a14      	ldr	r2, [pc, #80]	; (b240 <__aeabi_ui2d+0x68>)
    b1f0:	1ad2      	subs	r2, r2, r3
    b1f2:	4094      	lsls	r4, r2
    b1f4:	2200      	movs	r2, #0
    b1f6:	0324      	lsls	r4, r4, #12
    b1f8:	055b      	lsls	r3, r3, #21
    b1fa:	0b24      	lsrs	r4, r4, #12
    b1fc:	0d5b      	lsrs	r3, r3, #21
    b1fe:	2100      	movs	r1, #0
    b200:	0010      	movs	r0, r2
    b202:	0324      	lsls	r4, r4, #12
    b204:	0d0a      	lsrs	r2, r1, #20
    b206:	0b24      	lsrs	r4, r4, #12
    b208:	0512      	lsls	r2, r2, #20
    b20a:	4322      	orrs	r2, r4
    b20c:	4c0d      	ldr	r4, [pc, #52]	; (b244 <__aeabi_ui2d+0x6c>)
    b20e:	051b      	lsls	r3, r3, #20
    b210:	4022      	ands	r2, r4
    b212:	4313      	orrs	r3, r2
    b214:	005b      	lsls	r3, r3, #1
    b216:	0859      	lsrs	r1, r3, #1
    b218:	bd10      	pop	{r4, pc}
    b21a:	0021      	movs	r1, r4
    b21c:	4091      	lsls	r1, r2
    b21e:	000a      	movs	r2, r1
    b220:	210b      	movs	r1, #11
    b222:	1a08      	subs	r0, r1, r0
    b224:	40c4      	lsrs	r4, r0
    b226:	055b      	lsls	r3, r3, #21
    b228:	0324      	lsls	r4, r4, #12
    b22a:	0b24      	lsrs	r4, r4, #12
    b22c:	0d5b      	lsrs	r3, r3, #21
    b22e:	e7e6      	b.n	b1fe <__aeabi_ui2d+0x26>
    b230:	2300      	movs	r3, #0
    b232:	2400      	movs	r4, #0
    b234:	2200      	movs	r2, #0
    b236:	e7e2      	b.n	b1fe <__aeabi_ui2d+0x26>
    b238:	0000041e 	.word	0x0000041e
    b23c:	00000433 	.word	0x00000433
    b240:	00000413 	.word	0x00000413
    b244:	800fffff 	.word	0x800fffff

0000b248 <__aeabi_f2d>:
    b248:	0041      	lsls	r1, r0, #1
    b24a:	0e09      	lsrs	r1, r1, #24
    b24c:	1c4b      	adds	r3, r1, #1
    b24e:	b570      	push	{r4, r5, r6, lr}
    b250:	b2db      	uxtb	r3, r3
    b252:	0246      	lsls	r6, r0, #9
    b254:	0a75      	lsrs	r5, r6, #9
    b256:	0fc4      	lsrs	r4, r0, #31
    b258:	2b01      	cmp	r3, #1
    b25a:	dd14      	ble.n	b286 <__aeabi_f2d+0x3e>
    b25c:	23e0      	movs	r3, #224	; 0xe0
    b25e:	009b      	lsls	r3, r3, #2
    b260:	076d      	lsls	r5, r5, #29
    b262:	0b36      	lsrs	r6, r6, #12
    b264:	18cb      	adds	r3, r1, r3
    b266:	2100      	movs	r1, #0
    b268:	0d0a      	lsrs	r2, r1, #20
    b26a:	0028      	movs	r0, r5
    b26c:	0512      	lsls	r2, r2, #20
    b26e:	4d1c      	ldr	r5, [pc, #112]	; (b2e0 <__aeabi_f2d+0x98>)
    b270:	4332      	orrs	r2, r6
    b272:	055b      	lsls	r3, r3, #21
    b274:	402a      	ands	r2, r5
    b276:	085b      	lsrs	r3, r3, #1
    b278:	4313      	orrs	r3, r2
    b27a:	005b      	lsls	r3, r3, #1
    b27c:	07e4      	lsls	r4, r4, #31
    b27e:	085b      	lsrs	r3, r3, #1
    b280:	4323      	orrs	r3, r4
    b282:	0019      	movs	r1, r3
    b284:	bd70      	pop	{r4, r5, r6, pc}
    b286:	2900      	cmp	r1, #0
    b288:	d114      	bne.n	b2b4 <__aeabi_f2d+0x6c>
    b28a:	2d00      	cmp	r5, #0
    b28c:	d01e      	beq.n	b2cc <__aeabi_f2d+0x84>
    b28e:	0028      	movs	r0, r5
    b290:	f000 f8b6 	bl	b400 <__clzsi2>
    b294:	280a      	cmp	r0, #10
    b296:	dc1c      	bgt.n	b2d2 <__aeabi_f2d+0x8a>
    b298:	230b      	movs	r3, #11
    b29a:	002a      	movs	r2, r5
    b29c:	1a1b      	subs	r3, r3, r0
    b29e:	40da      	lsrs	r2, r3
    b2a0:	0003      	movs	r3, r0
    b2a2:	3315      	adds	r3, #21
    b2a4:	409d      	lsls	r5, r3
    b2a6:	4b0f      	ldr	r3, [pc, #60]	; (b2e4 <__aeabi_f2d+0x9c>)
    b2a8:	0312      	lsls	r2, r2, #12
    b2aa:	1a1b      	subs	r3, r3, r0
    b2ac:	055b      	lsls	r3, r3, #21
    b2ae:	0b16      	lsrs	r6, r2, #12
    b2b0:	0d5b      	lsrs	r3, r3, #21
    b2b2:	e7d8      	b.n	b266 <__aeabi_f2d+0x1e>
    b2b4:	2d00      	cmp	r5, #0
    b2b6:	d006      	beq.n	b2c6 <__aeabi_f2d+0x7e>
    b2b8:	0b32      	lsrs	r2, r6, #12
    b2ba:	2680      	movs	r6, #128	; 0x80
    b2bc:	0336      	lsls	r6, r6, #12
    b2be:	076d      	lsls	r5, r5, #29
    b2c0:	4316      	orrs	r6, r2
    b2c2:	4b09      	ldr	r3, [pc, #36]	; (b2e8 <__aeabi_f2d+0xa0>)
    b2c4:	e7cf      	b.n	b266 <__aeabi_f2d+0x1e>
    b2c6:	4b08      	ldr	r3, [pc, #32]	; (b2e8 <__aeabi_f2d+0xa0>)
    b2c8:	2600      	movs	r6, #0
    b2ca:	e7cc      	b.n	b266 <__aeabi_f2d+0x1e>
    b2cc:	2300      	movs	r3, #0
    b2ce:	2600      	movs	r6, #0
    b2d0:	e7c9      	b.n	b266 <__aeabi_f2d+0x1e>
    b2d2:	0003      	movs	r3, r0
    b2d4:	002a      	movs	r2, r5
    b2d6:	3b0b      	subs	r3, #11
    b2d8:	409a      	lsls	r2, r3
    b2da:	2500      	movs	r5, #0
    b2dc:	e7e3      	b.n	b2a6 <__aeabi_f2d+0x5e>
    b2de:	46c0      	nop			; (mov r8, r8)
    b2e0:	800fffff 	.word	0x800fffff
    b2e4:	00000389 	.word	0x00000389
    b2e8:	000007ff 	.word	0x000007ff

0000b2ec <__aeabi_d2f>:
    b2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    b2ee:	004c      	lsls	r4, r1, #1
    b2f0:	0d64      	lsrs	r4, r4, #21
    b2f2:	030b      	lsls	r3, r1, #12
    b2f4:	1c62      	adds	r2, r4, #1
    b2f6:	0f45      	lsrs	r5, r0, #29
    b2f8:	0a5b      	lsrs	r3, r3, #9
    b2fa:	0552      	lsls	r2, r2, #21
    b2fc:	432b      	orrs	r3, r5
    b2fe:	0fc9      	lsrs	r1, r1, #31
    b300:	00c5      	lsls	r5, r0, #3
    b302:	0d52      	lsrs	r2, r2, #21
    b304:	2a01      	cmp	r2, #1
    b306:	dd28      	ble.n	b35a <__aeabi_d2f+0x6e>
    b308:	4a3a      	ldr	r2, [pc, #232]	; (b3f4 <__aeabi_d2f+0x108>)
    b30a:	18a6      	adds	r6, r4, r2
    b30c:	2efe      	cmp	r6, #254	; 0xfe
    b30e:	dc1b      	bgt.n	b348 <__aeabi_d2f+0x5c>
    b310:	2e00      	cmp	r6, #0
    b312:	dd3e      	ble.n	b392 <__aeabi_d2f+0xa6>
    b314:	0180      	lsls	r0, r0, #6
    b316:	0002      	movs	r2, r0
    b318:	1e50      	subs	r0, r2, #1
    b31a:	4182      	sbcs	r2, r0
    b31c:	0f6d      	lsrs	r5, r5, #29
    b31e:	432a      	orrs	r2, r5
    b320:	00db      	lsls	r3, r3, #3
    b322:	4313      	orrs	r3, r2
    b324:	075a      	lsls	r2, r3, #29
    b326:	d004      	beq.n	b332 <__aeabi_d2f+0x46>
    b328:	220f      	movs	r2, #15
    b32a:	401a      	ands	r2, r3
    b32c:	2a04      	cmp	r2, #4
    b32e:	d000      	beq.n	b332 <__aeabi_d2f+0x46>
    b330:	3304      	adds	r3, #4
    b332:	2280      	movs	r2, #128	; 0x80
    b334:	04d2      	lsls	r2, r2, #19
    b336:	401a      	ands	r2, r3
    b338:	d05a      	beq.n	b3f0 <__aeabi_d2f+0x104>
    b33a:	3601      	adds	r6, #1
    b33c:	2eff      	cmp	r6, #255	; 0xff
    b33e:	d003      	beq.n	b348 <__aeabi_d2f+0x5c>
    b340:	019b      	lsls	r3, r3, #6
    b342:	0a5b      	lsrs	r3, r3, #9
    b344:	b2f4      	uxtb	r4, r6
    b346:	e001      	b.n	b34c <__aeabi_d2f+0x60>
    b348:	24ff      	movs	r4, #255	; 0xff
    b34a:	2300      	movs	r3, #0
    b34c:	0258      	lsls	r0, r3, #9
    b34e:	05e4      	lsls	r4, r4, #23
    b350:	0a40      	lsrs	r0, r0, #9
    b352:	07c9      	lsls	r1, r1, #31
    b354:	4320      	orrs	r0, r4
    b356:	4308      	orrs	r0, r1
    b358:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b35a:	2c00      	cmp	r4, #0
    b35c:	d007      	beq.n	b36e <__aeabi_d2f+0x82>
    b35e:	431d      	orrs	r5, r3
    b360:	d0f2      	beq.n	b348 <__aeabi_d2f+0x5c>
    b362:	2080      	movs	r0, #128	; 0x80
    b364:	00db      	lsls	r3, r3, #3
    b366:	0480      	lsls	r0, r0, #18
    b368:	4303      	orrs	r3, r0
    b36a:	26ff      	movs	r6, #255	; 0xff
    b36c:	e7da      	b.n	b324 <__aeabi_d2f+0x38>
    b36e:	432b      	orrs	r3, r5
    b370:	d003      	beq.n	b37a <__aeabi_d2f+0x8e>
    b372:	2305      	movs	r3, #5
    b374:	08db      	lsrs	r3, r3, #3
    b376:	2cff      	cmp	r4, #255	; 0xff
    b378:	d003      	beq.n	b382 <__aeabi_d2f+0x96>
    b37a:	025b      	lsls	r3, r3, #9
    b37c:	0a5b      	lsrs	r3, r3, #9
    b37e:	b2e4      	uxtb	r4, r4
    b380:	e7e4      	b.n	b34c <__aeabi_d2f+0x60>
    b382:	2b00      	cmp	r3, #0
    b384:	d032      	beq.n	b3ec <__aeabi_d2f+0x100>
    b386:	2080      	movs	r0, #128	; 0x80
    b388:	03c0      	lsls	r0, r0, #15
    b38a:	4303      	orrs	r3, r0
    b38c:	025b      	lsls	r3, r3, #9
    b38e:	0a5b      	lsrs	r3, r3, #9
    b390:	e7dc      	b.n	b34c <__aeabi_d2f+0x60>
    b392:	0032      	movs	r2, r6
    b394:	3217      	adds	r2, #23
    b396:	db14      	blt.n	b3c2 <__aeabi_d2f+0xd6>
    b398:	2280      	movs	r2, #128	; 0x80
    b39a:	271e      	movs	r7, #30
    b39c:	0412      	lsls	r2, r2, #16
    b39e:	4313      	orrs	r3, r2
    b3a0:	1bbf      	subs	r7, r7, r6
    b3a2:	2f1f      	cmp	r7, #31
    b3a4:	dc0f      	bgt.n	b3c6 <__aeabi_d2f+0xda>
    b3a6:	4a14      	ldr	r2, [pc, #80]	; (b3f8 <__aeabi_d2f+0x10c>)
    b3a8:	4694      	mov	ip, r2
    b3aa:	4464      	add	r4, ip
    b3ac:	002a      	movs	r2, r5
    b3ae:	40a5      	lsls	r5, r4
    b3b0:	002e      	movs	r6, r5
    b3b2:	40a3      	lsls	r3, r4
    b3b4:	1e75      	subs	r5, r6, #1
    b3b6:	41ae      	sbcs	r6, r5
    b3b8:	40fa      	lsrs	r2, r7
    b3ba:	4333      	orrs	r3, r6
    b3bc:	4313      	orrs	r3, r2
    b3be:	2600      	movs	r6, #0
    b3c0:	e7b0      	b.n	b324 <__aeabi_d2f+0x38>
    b3c2:	2400      	movs	r4, #0
    b3c4:	e7d5      	b.n	b372 <__aeabi_d2f+0x86>
    b3c6:	2202      	movs	r2, #2
    b3c8:	4252      	negs	r2, r2
    b3ca:	1b96      	subs	r6, r2, r6
    b3cc:	001a      	movs	r2, r3
    b3ce:	40f2      	lsrs	r2, r6
    b3d0:	2f20      	cmp	r7, #32
    b3d2:	d009      	beq.n	b3e8 <__aeabi_d2f+0xfc>
    b3d4:	4809      	ldr	r0, [pc, #36]	; (b3fc <__aeabi_d2f+0x110>)
    b3d6:	4684      	mov	ip, r0
    b3d8:	4464      	add	r4, ip
    b3da:	40a3      	lsls	r3, r4
    b3dc:	432b      	orrs	r3, r5
    b3de:	1e5d      	subs	r5, r3, #1
    b3e0:	41ab      	sbcs	r3, r5
    b3e2:	2600      	movs	r6, #0
    b3e4:	4313      	orrs	r3, r2
    b3e6:	e79d      	b.n	b324 <__aeabi_d2f+0x38>
    b3e8:	2300      	movs	r3, #0
    b3ea:	e7f7      	b.n	b3dc <__aeabi_d2f+0xf0>
    b3ec:	2300      	movs	r3, #0
    b3ee:	e7ad      	b.n	b34c <__aeabi_d2f+0x60>
    b3f0:	0034      	movs	r4, r6
    b3f2:	e7bf      	b.n	b374 <__aeabi_d2f+0x88>
    b3f4:	fffffc80 	.word	0xfffffc80
    b3f8:	fffffc82 	.word	0xfffffc82
    b3fc:	fffffca2 	.word	0xfffffca2

0000b400 <__clzsi2>:
    b400:	211c      	movs	r1, #28
    b402:	2301      	movs	r3, #1
    b404:	041b      	lsls	r3, r3, #16
    b406:	4298      	cmp	r0, r3
    b408:	d301      	bcc.n	b40e <__clzsi2+0xe>
    b40a:	0c00      	lsrs	r0, r0, #16
    b40c:	3910      	subs	r1, #16
    b40e:	0a1b      	lsrs	r3, r3, #8
    b410:	4298      	cmp	r0, r3
    b412:	d301      	bcc.n	b418 <__clzsi2+0x18>
    b414:	0a00      	lsrs	r0, r0, #8
    b416:	3908      	subs	r1, #8
    b418:	091b      	lsrs	r3, r3, #4
    b41a:	4298      	cmp	r0, r3
    b41c:	d301      	bcc.n	b422 <__clzsi2+0x22>
    b41e:	0900      	lsrs	r0, r0, #4
    b420:	3904      	subs	r1, #4
    b422:	a202      	add	r2, pc, #8	; (adr r2, b42c <__clzsi2+0x2c>)
    b424:	5c10      	ldrb	r0, [r2, r0]
    b426:	1840      	adds	r0, r0, r1
    b428:	4770      	bx	lr
    b42a:	46c0      	nop			; (mov r8, r8)
    b42c:	02020304 	.word	0x02020304
    b430:	01010101 	.word	0x01010101
	...

0000b43c <__cxa_atexit>:
    b43c:	b570      	push	{r4, r5, r6, lr}
    b43e:	4c05      	ldr	r4, [pc, #20]	; (b454 <__cxa_atexit+0x18>)
    b440:	0005      	movs	r5, r0
    b442:	0013      	movs	r3, r2
    b444:	1e20      	subs	r0, r4, #0
    b446:	d004      	beq.n	b452 <__cxa_atexit+0x16>
    b448:	000a      	movs	r2, r1
    b44a:	2002      	movs	r0, #2
    b44c:	0029      	movs	r1, r5
    b44e:	e000      	b.n	b452 <__cxa_atexit+0x16>
    b450:	bf00      	nop
    b452:	bd70      	pop	{r4, r5, r6, pc}
    b454:	00000000 	.word	0x00000000

0000b458 <__libc_init_array>:
    b458:	b570      	push	{r4, r5, r6, lr}
    b45a:	2600      	movs	r6, #0
    b45c:	4d0c      	ldr	r5, [pc, #48]	; (b490 <__libc_init_array+0x38>)
    b45e:	4c0d      	ldr	r4, [pc, #52]	; (b494 <__libc_init_array+0x3c>)
    b460:	1b64      	subs	r4, r4, r5
    b462:	10a4      	asrs	r4, r4, #2
    b464:	42a6      	cmp	r6, r4
    b466:	d109      	bne.n	b47c <__libc_init_array+0x24>
    b468:	2600      	movs	r6, #0
    b46a:	f002 f8ed 	bl	d648 <_init>
    b46e:	4d0a      	ldr	r5, [pc, #40]	; (b498 <__libc_init_array+0x40>)
    b470:	4c0a      	ldr	r4, [pc, #40]	; (b49c <__libc_init_array+0x44>)
    b472:	1b64      	subs	r4, r4, r5
    b474:	10a4      	asrs	r4, r4, #2
    b476:	42a6      	cmp	r6, r4
    b478:	d105      	bne.n	b486 <__libc_init_array+0x2e>
    b47a:	bd70      	pop	{r4, r5, r6, pc}
    b47c:	00b3      	lsls	r3, r6, #2
    b47e:	58eb      	ldr	r3, [r5, r3]
    b480:	4798      	blx	r3
    b482:	3601      	adds	r6, #1
    b484:	e7ee      	b.n	b464 <__libc_init_array+0xc>
    b486:	00b3      	lsls	r3, r6, #2
    b488:	58eb      	ldr	r3, [r5, r3]
    b48a:	4798      	blx	r3
    b48c:	3601      	adds	r6, #1
    b48e:	e7f2      	b.n	b476 <__libc_init_array+0x1e>
    b490:	20000260 	.word	0x20000260
    b494:	20000260 	.word	0x20000260
    b498:	20000260 	.word	0x20000260
    b49c:	20000278 	.word	0x20000278

0000b4a0 <malloc>:
    b4a0:	b510      	push	{r4, lr}
    b4a2:	4b03      	ldr	r3, [pc, #12]	; (b4b0 <malloc+0x10>)
    b4a4:	0001      	movs	r1, r0
    b4a6:	6818      	ldr	r0, [r3, #0]
    b4a8:	f000 f88e 	bl	b5c8 <_malloc_r>
    b4ac:	bd10      	pop	{r4, pc}
    b4ae:	46c0      	nop			; (mov r8, r8)
    b4b0:	20000090 	.word	0x20000090

0000b4b4 <free>:
    b4b4:	b510      	push	{r4, lr}
    b4b6:	4b03      	ldr	r3, [pc, #12]	; (b4c4 <free+0x10>)
    b4b8:	0001      	movs	r1, r0
    b4ba:	6818      	ldr	r0, [r3, #0]
    b4bc:	f000 f83a 	bl	b534 <_free_r>
    b4c0:	bd10      	pop	{r4, pc}
    b4c2:	46c0      	nop			; (mov r8, r8)
    b4c4:	20000090 	.word	0x20000090

0000b4c8 <__ascii_mbtowc>:
    b4c8:	b082      	sub	sp, #8
    b4ca:	2900      	cmp	r1, #0
    b4cc:	d100      	bne.n	b4d0 <__ascii_mbtowc+0x8>
    b4ce:	a901      	add	r1, sp, #4
    b4d0:	1e10      	subs	r0, r2, #0
    b4d2:	d006      	beq.n	b4e2 <__ascii_mbtowc+0x1a>
    b4d4:	2b00      	cmp	r3, #0
    b4d6:	d006      	beq.n	b4e6 <__ascii_mbtowc+0x1e>
    b4d8:	7813      	ldrb	r3, [r2, #0]
    b4da:	600b      	str	r3, [r1, #0]
    b4dc:	7810      	ldrb	r0, [r2, #0]
    b4de:	1e43      	subs	r3, r0, #1
    b4e0:	4198      	sbcs	r0, r3
    b4e2:	b002      	add	sp, #8
    b4e4:	4770      	bx	lr
    b4e6:	2002      	movs	r0, #2
    b4e8:	4240      	negs	r0, r0
    b4ea:	e7fa      	b.n	b4e2 <__ascii_mbtowc+0x1a>

0000b4ec <memcpy>:
    b4ec:	2300      	movs	r3, #0
    b4ee:	b510      	push	{r4, lr}
    b4f0:	429a      	cmp	r2, r3
    b4f2:	d100      	bne.n	b4f6 <memcpy+0xa>
    b4f4:	bd10      	pop	{r4, pc}
    b4f6:	5ccc      	ldrb	r4, [r1, r3]
    b4f8:	54c4      	strb	r4, [r0, r3]
    b4fa:	3301      	adds	r3, #1
    b4fc:	e7f8      	b.n	b4f0 <memcpy+0x4>

0000b4fe <memmove>:
    b4fe:	b510      	push	{r4, lr}
    b500:	4288      	cmp	r0, r1
    b502:	d902      	bls.n	b50a <memmove+0xc>
    b504:	188b      	adds	r3, r1, r2
    b506:	4298      	cmp	r0, r3
    b508:	d308      	bcc.n	b51c <memmove+0x1e>
    b50a:	2300      	movs	r3, #0
    b50c:	429a      	cmp	r2, r3
    b50e:	d007      	beq.n	b520 <memmove+0x22>
    b510:	5ccc      	ldrb	r4, [r1, r3]
    b512:	54c4      	strb	r4, [r0, r3]
    b514:	3301      	adds	r3, #1
    b516:	e7f9      	b.n	b50c <memmove+0xe>
    b518:	5c8b      	ldrb	r3, [r1, r2]
    b51a:	5483      	strb	r3, [r0, r2]
    b51c:	3a01      	subs	r2, #1
    b51e:	d2fb      	bcs.n	b518 <memmove+0x1a>
    b520:	bd10      	pop	{r4, pc}

0000b522 <memset>:
    b522:	0003      	movs	r3, r0
    b524:	1882      	adds	r2, r0, r2
    b526:	4293      	cmp	r3, r2
    b528:	d100      	bne.n	b52c <memset+0xa>
    b52a:	4770      	bx	lr
    b52c:	7019      	strb	r1, [r3, #0]
    b52e:	3301      	adds	r3, #1
    b530:	e7f9      	b.n	b526 <memset+0x4>
	...

0000b534 <_free_r>:
    b534:	b570      	push	{r4, r5, r6, lr}
    b536:	0005      	movs	r5, r0
    b538:	2900      	cmp	r1, #0
    b53a:	d010      	beq.n	b55e <_free_r+0x2a>
    b53c:	1f0c      	subs	r4, r1, #4
    b53e:	6823      	ldr	r3, [r4, #0]
    b540:	2b00      	cmp	r3, #0
    b542:	da00      	bge.n	b546 <_free_r+0x12>
    b544:	18e4      	adds	r4, r4, r3
    b546:	0028      	movs	r0, r5
    b548:	f001 fbe9 	bl	cd1e <__malloc_lock>
    b54c:	4a1d      	ldr	r2, [pc, #116]	; (b5c4 <_free_r+0x90>)
    b54e:	6813      	ldr	r3, [r2, #0]
    b550:	2b00      	cmp	r3, #0
    b552:	d105      	bne.n	b560 <_free_r+0x2c>
    b554:	6063      	str	r3, [r4, #4]
    b556:	6014      	str	r4, [r2, #0]
    b558:	0028      	movs	r0, r5
    b55a:	f001 fbe1 	bl	cd20 <__malloc_unlock>
    b55e:	bd70      	pop	{r4, r5, r6, pc}
    b560:	42a3      	cmp	r3, r4
    b562:	d909      	bls.n	b578 <_free_r+0x44>
    b564:	6821      	ldr	r1, [r4, #0]
    b566:	1860      	adds	r0, r4, r1
    b568:	4283      	cmp	r3, r0
    b56a:	d1f3      	bne.n	b554 <_free_r+0x20>
    b56c:	6818      	ldr	r0, [r3, #0]
    b56e:	685b      	ldr	r3, [r3, #4]
    b570:	1841      	adds	r1, r0, r1
    b572:	6021      	str	r1, [r4, #0]
    b574:	e7ee      	b.n	b554 <_free_r+0x20>
    b576:	0013      	movs	r3, r2
    b578:	685a      	ldr	r2, [r3, #4]
    b57a:	2a00      	cmp	r2, #0
    b57c:	d001      	beq.n	b582 <_free_r+0x4e>
    b57e:	42a2      	cmp	r2, r4
    b580:	d9f9      	bls.n	b576 <_free_r+0x42>
    b582:	6819      	ldr	r1, [r3, #0]
    b584:	1858      	adds	r0, r3, r1
    b586:	42a0      	cmp	r0, r4
    b588:	d10b      	bne.n	b5a2 <_free_r+0x6e>
    b58a:	6820      	ldr	r0, [r4, #0]
    b58c:	1809      	adds	r1, r1, r0
    b58e:	1858      	adds	r0, r3, r1
    b590:	6019      	str	r1, [r3, #0]
    b592:	4282      	cmp	r2, r0
    b594:	d1e0      	bne.n	b558 <_free_r+0x24>
    b596:	6810      	ldr	r0, [r2, #0]
    b598:	6852      	ldr	r2, [r2, #4]
    b59a:	1841      	adds	r1, r0, r1
    b59c:	6019      	str	r1, [r3, #0]
    b59e:	605a      	str	r2, [r3, #4]
    b5a0:	e7da      	b.n	b558 <_free_r+0x24>
    b5a2:	42a0      	cmp	r0, r4
    b5a4:	d902      	bls.n	b5ac <_free_r+0x78>
    b5a6:	230c      	movs	r3, #12
    b5a8:	602b      	str	r3, [r5, #0]
    b5aa:	e7d5      	b.n	b558 <_free_r+0x24>
    b5ac:	6821      	ldr	r1, [r4, #0]
    b5ae:	1860      	adds	r0, r4, r1
    b5b0:	4282      	cmp	r2, r0
    b5b2:	d103      	bne.n	b5bc <_free_r+0x88>
    b5b4:	6810      	ldr	r0, [r2, #0]
    b5b6:	6852      	ldr	r2, [r2, #4]
    b5b8:	1841      	adds	r1, r0, r1
    b5ba:	6021      	str	r1, [r4, #0]
    b5bc:	6062      	str	r2, [r4, #4]
    b5be:	605c      	str	r4, [r3, #4]
    b5c0:	e7ca      	b.n	b558 <_free_r+0x24>
    b5c2:	46c0      	nop			; (mov r8, r8)
    b5c4:	20000a1c 	.word	0x20000a1c

0000b5c8 <_malloc_r>:
    b5c8:	2303      	movs	r3, #3
    b5ca:	b570      	push	{r4, r5, r6, lr}
    b5cc:	1ccd      	adds	r5, r1, #3
    b5ce:	439d      	bics	r5, r3
    b5d0:	3508      	adds	r5, #8
    b5d2:	0006      	movs	r6, r0
    b5d4:	2d0c      	cmp	r5, #12
    b5d6:	d21e      	bcs.n	b616 <_malloc_r+0x4e>
    b5d8:	250c      	movs	r5, #12
    b5da:	42a9      	cmp	r1, r5
    b5dc:	d81d      	bhi.n	b61a <_malloc_r+0x52>
    b5de:	0030      	movs	r0, r6
    b5e0:	f001 fb9d 	bl	cd1e <__malloc_lock>
    b5e4:	4a25      	ldr	r2, [pc, #148]	; (b67c <_malloc_r+0xb4>)
    b5e6:	6814      	ldr	r4, [r2, #0]
    b5e8:	0021      	movs	r1, r4
    b5ea:	2900      	cmp	r1, #0
    b5ec:	d119      	bne.n	b622 <_malloc_r+0x5a>
    b5ee:	4c24      	ldr	r4, [pc, #144]	; (b680 <_malloc_r+0xb8>)
    b5f0:	6823      	ldr	r3, [r4, #0]
    b5f2:	2b00      	cmp	r3, #0
    b5f4:	d103      	bne.n	b5fe <_malloc_r+0x36>
    b5f6:	0030      	movs	r0, r6
    b5f8:	f000 fcbe 	bl	bf78 <_sbrk_r>
    b5fc:	6020      	str	r0, [r4, #0]
    b5fe:	0029      	movs	r1, r5
    b600:	0030      	movs	r0, r6
    b602:	f000 fcb9 	bl	bf78 <_sbrk_r>
    b606:	1c43      	adds	r3, r0, #1
    b608:	d12c      	bne.n	b664 <_malloc_r+0x9c>
    b60a:	230c      	movs	r3, #12
    b60c:	0030      	movs	r0, r6
    b60e:	6033      	str	r3, [r6, #0]
    b610:	f001 fb86 	bl	cd20 <__malloc_unlock>
    b614:	e003      	b.n	b61e <_malloc_r+0x56>
    b616:	2d00      	cmp	r5, #0
    b618:	dadf      	bge.n	b5da <_malloc_r+0x12>
    b61a:	230c      	movs	r3, #12
    b61c:	6033      	str	r3, [r6, #0]
    b61e:	2000      	movs	r0, #0
    b620:	bd70      	pop	{r4, r5, r6, pc}
    b622:	680b      	ldr	r3, [r1, #0]
    b624:	1b5b      	subs	r3, r3, r5
    b626:	d41a      	bmi.n	b65e <_malloc_r+0x96>
    b628:	2b0b      	cmp	r3, #11
    b62a:	d903      	bls.n	b634 <_malloc_r+0x6c>
    b62c:	600b      	str	r3, [r1, #0]
    b62e:	18cc      	adds	r4, r1, r3
    b630:	6025      	str	r5, [r4, #0]
    b632:	e003      	b.n	b63c <_malloc_r+0x74>
    b634:	428c      	cmp	r4, r1
    b636:	d10e      	bne.n	b656 <_malloc_r+0x8e>
    b638:	6863      	ldr	r3, [r4, #4]
    b63a:	6013      	str	r3, [r2, #0]
    b63c:	0030      	movs	r0, r6
    b63e:	f001 fb6f 	bl	cd20 <__malloc_unlock>
    b642:	0020      	movs	r0, r4
    b644:	2207      	movs	r2, #7
    b646:	300b      	adds	r0, #11
    b648:	1d23      	adds	r3, r4, #4
    b64a:	4390      	bics	r0, r2
    b64c:	1ac3      	subs	r3, r0, r3
    b64e:	d0e7      	beq.n	b620 <_malloc_r+0x58>
    b650:	425a      	negs	r2, r3
    b652:	50e2      	str	r2, [r4, r3]
    b654:	e7e4      	b.n	b620 <_malloc_r+0x58>
    b656:	684b      	ldr	r3, [r1, #4]
    b658:	6063      	str	r3, [r4, #4]
    b65a:	000c      	movs	r4, r1
    b65c:	e7ee      	b.n	b63c <_malloc_r+0x74>
    b65e:	000c      	movs	r4, r1
    b660:	6849      	ldr	r1, [r1, #4]
    b662:	e7c2      	b.n	b5ea <_malloc_r+0x22>
    b664:	2303      	movs	r3, #3
    b666:	1cc4      	adds	r4, r0, #3
    b668:	439c      	bics	r4, r3
    b66a:	42a0      	cmp	r0, r4
    b66c:	d0e0      	beq.n	b630 <_malloc_r+0x68>
    b66e:	1a21      	subs	r1, r4, r0
    b670:	0030      	movs	r0, r6
    b672:	f000 fc81 	bl	bf78 <_sbrk_r>
    b676:	1c43      	adds	r3, r0, #1
    b678:	d1da      	bne.n	b630 <_malloc_r+0x68>
    b67a:	e7c6      	b.n	b60a <_malloc_r+0x42>
    b67c:	20000a1c 	.word	0x20000a1c
    b680:	20000a20 	.word	0x20000a20

0000b684 <__cvt>:
    b684:	b5f0      	push	{r4, r5, r6, r7, lr}
    b686:	b08b      	sub	sp, #44	; 0x2c
    b688:	0014      	movs	r4, r2
    b68a:	1e1d      	subs	r5, r3, #0
    b68c:	9912      	ldr	r1, [sp, #72]	; 0x48
    b68e:	da53      	bge.n	b738 <__cvt+0xb4>
    b690:	2480      	movs	r4, #128	; 0x80
    b692:	0624      	lsls	r4, r4, #24
    b694:	191b      	adds	r3, r3, r4
    b696:	001d      	movs	r5, r3
    b698:	0014      	movs	r4, r2
    b69a:	232d      	movs	r3, #45	; 0x2d
    b69c:	700b      	strb	r3, [r1, #0]
    b69e:	2320      	movs	r3, #32
    b6a0:	9e14      	ldr	r6, [sp, #80]	; 0x50
    b6a2:	2203      	movs	r2, #3
    b6a4:	439e      	bics	r6, r3
    b6a6:	2e46      	cmp	r6, #70	; 0x46
    b6a8:	d007      	beq.n	b6ba <__cvt+0x36>
    b6aa:	0033      	movs	r3, r6
    b6ac:	3b45      	subs	r3, #69	; 0x45
    b6ae:	4259      	negs	r1, r3
    b6b0:	414b      	adcs	r3, r1
    b6b2:	9910      	ldr	r1, [sp, #64]	; 0x40
    b6b4:	3a01      	subs	r2, #1
    b6b6:	18cb      	adds	r3, r1, r3
    b6b8:	9310      	str	r3, [sp, #64]	; 0x40
    b6ba:	ab09      	add	r3, sp, #36	; 0x24
    b6bc:	9304      	str	r3, [sp, #16]
    b6be:	ab08      	add	r3, sp, #32
    b6c0:	9303      	str	r3, [sp, #12]
    b6c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    b6c4:	9200      	str	r2, [sp, #0]
    b6c6:	9302      	str	r3, [sp, #8]
    b6c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b6ca:	0022      	movs	r2, r4
    b6cc:	9301      	str	r3, [sp, #4]
    b6ce:	002b      	movs	r3, r5
    b6d0:	f000 fd26 	bl	c120 <_dtoa_r>
    b6d4:	0007      	movs	r7, r0
    b6d6:	2e47      	cmp	r6, #71	; 0x47
    b6d8:	d102      	bne.n	b6e0 <__cvt+0x5c>
    b6da:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b6dc:	07db      	lsls	r3, r3, #31
    b6de:	d524      	bpl.n	b72a <__cvt+0xa6>
    b6e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b6e2:	18fb      	adds	r3, r7, r3
    b6e4:	9307      	str	r3, [sp, #28]
    b6e6:	2e46      	cmp	r6, #70	; 0x46
    b6e8:	d114      	bne.n	b714 <__cvt+0x90>
    b6ea:	783b      	ldrb	r3, [r7, #0]
    b6ec:	2b30      	cmp	r3, #48	; 0x30
    b6ee:	d10c      	bne.n	b70a <__cvt+0x86>
    b6f0:	2200      	movs	r2, #0
    b6f2:	2300      	movs	r3, #0
    b6f4:	0020      	movs	r0, r4
    b6f6:	0029      	movs	r1, r5
    b6f8:	f7fd f86c 	bl	87d4 <__aeabi_dcmpeq>
    b6fc:	2800      	cmp	r0, #0
    b6fe:	d104      	bne.n	b70a <__cvt+0x86>
    b700:	2301      	movs	r3, #1
    b702:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b704:	1a9b      	subs	r3, r3, r2
    b706:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    b708:	6013      	str	r3, [r2, #0]
    b70a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    b70c:	9a07      	ldr	r2, [sp, #28]
    b70e:	681b      	ldr	r3, [r3, #0]
    b710:	18d3      	adds	r3, r2, r3
    b712:	9307      	str	r3, [sp, #28]
    b714:	2200      	movs	r2, #0
    b716:	2300      	movs	r3, #0
    b718:	0020      	movs	r0, r4
    b71a:	0029      	movs	r1, r5
    b71c:	f7fd f85a 	bl	87d4 <__aeabi_dcmpeq>
    b720:	2230      	movs	r2, #48	; 0x30
    b722:	2800      	cmp	r0, #0
    b724:	d00d      	beq.n	b742 <__cvt+0xbe>
    b726:	9b07      	ldr	r3, [sp, #28]
    b728:	9309      	str	r3, [sp, #36]	; 0x24
    b72a:	0038      	movs	r0, r7
    b72c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b72e:	9a15      	ldr	r2, [sp, #84]	; 0x54
    b730:	1bdb      	subs	r3, r3, r7
    b732:	6013      	str	r3, [r2, #0]
    b734:	b00b      	add	sp, #44	; 0x2c
    b736:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b738:	2300      	movs	r3, #0
    b73a:	e7af      	b.n	b69c <__cvt+0x18>
    b73c:	1c59      	adds	r1, r3, #1
    b73e:	9109      	str	r1, [sp, #36]	; 0x24
    b740:	701a      	strb	r2, [r3, #0]
    b742:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b744:	9907      	ldr	r1, [sp, #28]
    b746:	4299      	cmp	r1, r3
    b748:	d8f8      	bhi.n	b73c <__cvt+0xb8>
    b74a:	e7ee      	b.n	b72a <__cvt+0xa6>

0000b74c <__exponent>:
    b74c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b74e:	232b      	movs	r3, #43	; 0x2b
    b750:	b085      	sub	sp, #20
    b752:	0007      	movs	r7, r0
    b754:	000c      	movs	r4, r1
    b756:	7002      	strb	r2, [r0, #0]
    b758:	1c86      	adds	r6, r0, #2
    b75a:	2900      	cmp	r1, #0
    b75c:	da01      	bge.n	b762 <__exponent+0x16>
    b75e:	232d      	movs	r3, #45	; 0x2d
    b760:	424c      	negs	r4, r1
    b762:	707b      	strb	r3, [r7, #1]
    b764:	2c09      	cmp	r4, #9
    b766:	dd23      	ble.n	b7b0 <__exponent+0x64>
    b768:	ab02      	add	r3, sp, #8
    b76a:	1ddd      	adds	r5, r3, #7
    b76c:	1e6b      	subs	r3, r5, #1
    b76e:	0020      	movs	r0, r4
    b770:	210a      	movs	r1, #10
    b772:	9301      	str	r3, [sp, #4]
    b774:	f7fd f818 	bl	87a8 <__aeabi_idivmod>
    b778:	1e6b      	subs	r3, r5, #1
    b77a:	3130      	adds	r1, #48	; 0x30
    b77c:	7019      	strb	r1, [r3, #0]
    b77e:	0020      	movs	r0, r4
    b780:	210a      	movs	r1, #10
    b782:	f7fc ff2b 	bl	85dc <__divsi3>
    b786:	0004      	movs	r4, r0
    b788:	2809      	cmp	r0, #9
    b78a:	dc0a      	bgt.n	b7a2 <__exponent+0x56>
    b78c:	3d02      	subs	r5, #2
    b78e:	3430      	adds	r4, #48	; 0x30
    b790:	702c      	strb	r4, [r5, #0]
    b792:	ab02      	add	r3, sp, #8
    b794:	3307      	adds	r3, #7
    b796:	0030      	movs	r0, r6
    b798:	42ab      	cmp	r3, r5
    b79a:	d804      	bhi.n	b7a6 <__exponent+0x5a>
    b79c:	1bc0      	subs	r0, r0, r7
    b79e:	b005      	add	sp, #20
    b7a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b7a2:	9d01      	ldr	r5, [sp, #4]
    b7a4:	e7e2      	b.n	b76c <__exponent+0x20>
    b7a6:	782b      	ldrb	r3, [r5, #0]
    b7a8:	3501      	adds	r5, #1
    b7aa:	7033      	strb	r3, [r6, #0]
    b7ac:	3601      	adds	r6, #1
    b7ae:	e7f0      	b.n	b792 <__exponent+0x46>
    b7b0:	2330      	movs	r3, #48	; 0x30
    b7b2:	18e4      	adds	r4, r4, r3
    b7b4:	7033      	strb	r3, [r6, #0]
    b7b6:	1cb0      	adds	r0, r6, #2
    b7b8:	7074      	strb	r4, [r6, #1]
    b7ba:	e7ef      	b.n	b79c <__exponent+0x50>

0000b7bc <_printf_float>:
    b7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b7be:	b095      	sub	sp, #84	; 0x54
    b7c0:	000c      	movs	r4, r1
    b7c2:	920a      	str	r2, [sp, #40]	; 0x28
    b7c4:	930b      	str	r3, [sp, #44]	; 0x2c
    b7c6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    b7c8:	9009      	str	r0, [sp, #36]	; 0x24
    b7ca:	f001 fa91 	bl	ccf0 <_localeconv_r>
    b7ce:	6803      	ldr	r3, [r0, #0]
    b7d0:	0018      	movs	r0, r3
    b7d2:	930d      	str	r3, [sp, #52]	; 0x34
    b7d4:	f000 fc0c 	bl	bff0 <strlen>
    b7d8:	2300      	movs	r3, #0
    b7da:	9312      	str	r3, [sp, #72]	; 0x48
    b7dc:	6823      	ldr	r3, [r4, #0]
    b7de:	900e      	str	r0, [sp, #56]	; 0x38
    b7e0:	930c      	str	r3, [sp, #48]	; 0x30
    b7e2:	990c      	ldr	r1, [sp, #48]	; 0x30
    b7e4:	7e27      	ldrb	r7, [r4, #24]
    b7e6:	682b      	ldr	r3, [r5, #0]
    b7e8:	2207      	movs	r2, #7
    b7ea:	05c9      	lsls	r1, r1, #23
    b7ec:	d547      	bpl.n	b87e <_printf_float+0xc2>
    b7ee:	189b      	adds	r3, r3, r2
    b7f0:	4393      	bics	r3, r2
    b7f2:	001a      	movs	r2, r3
    b7f4:	3208      	adds	r2, #8
    b7f6:	602a      	str	r2, [r5, #0]
    b7f8:	681a      	ldr	r2, [r3, #0]
    b7fa:	685b      	ldr	r3, [r3, #4]
    b7fc:	64a2      	str	r2, [r4, #72]	; 0x48
    b7fe:	64e3      	str	r3, [r4, #76]	; 0x4c
    b800:	2201      	movs	r2, #1
    b802:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    b804:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    b806:	006b      	lsls	r3, r5, #1
    b808:	085b      	lsrs	r3, r3, #1
    b80a:	930f      	str	r3, [sp, #60]	; 0x3c
    b80c:	4252      	negs	r2, r2
    b80e:	4ba7      	ldr	r3, [pc, #668]	; (baac <_printf_float+0x2f0>)
    b810:	0030      	movs	r0, r6
    b812:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b814:	f7ff fc4a 	bl	b0ac <__aeabi_dcmpun>
    b818:	2800      	cmp	r0, #0
    b81a:	d000      	beq.n	b81e <_printf_float+0x62>
    b81c:	e206      	b.n	bc2c <_printf_float+0x470>
    b81e:	2201      	movs	r2, #1
    b820:	4ba2      	ldr	r3, [pc, #648]	; (baac <_printf_float+0x2f0>)
    b822:	4252      	negs	r2, r2
    b824:	0030      	movs	r0, r6
    b826:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b828:	f7fc ffe4 	bl	87f4 <__aeabi_dcmple>
    b82c:	2800      	cmp	r0, #0
    b82e:	d000      	beq.n	b832 <_printf_float+0x76>
    b830:	e1fc      	b.n	bc2c <_printf_float+0x470>
    b832:	2200      	movs	r2, #0
    b834:	2300      	movs	r3, #0
    b836:	0030      	movs	r0, r6
    b838:	0029      	movs	r1, r5
    b83a:	f7fc ffd1 	bl	87e0 <__aeabi_dcmplt>
    b83e:	2800      	cmp	r0, #0
    b840:	d003      	beq.n	b84a <_printf_float+0x8e>
    b842:	0023      	movs	r3, r4
    b844:	222d      	movs	r2, #45	; 0x2d
    b846:	3343      	adds	r3, #67	; 0x43
    b848:	701a      	strb	r2, [r3, #0]
    b84a:	4d99      	ldr	r5, [pc, #612]	; (bab0 <_printf_float+0x2f4>)
    b84c:	2f47      	cmp	r7, #71	; 0x47
    b84e:	d800      	bhi.n	b852 <_printf_float+0x96>
    b850:	4d98      	ldr	r5, [pc, #608]	; (bab4 <_printf_float+0x2f8>)
    b852:	2303      	movs	r3, #3
    b854:	2600      	movs	r6, #0
    b856:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b858:	6123      	str	r3, [r4, #16]
    b85a:	3301      	adds	r3, #1
    b85c:	439a      	bics	r2, r3
    b85e:	6022      	str	r2, [r4, #0]
    b860:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b862:	aa13      	add	r2, sp, #76	; 0x4c
    b864:	9300      	str	r3, [sp, #0]
    b866:	0021      	movs	r1, r4
    b868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b86a:	9809      	ldr	r0, [sp, #36]	; 0x24
    b86c:	f000 f9f2 	bl	bc54 <_printf_common>
    b870:	1c43      	adds	r3, r0, #1
    b872:	d000      	beq.n	b876 <_printf_float+0xba>
    b874:	e09c      	b.n	b9b0 <_printf_float+0x1f4>
    b876:	2001      	movs	r0, #1
    b878:	4240      	negs	r0, r0
    b87a:	b015      	add	sp, #84	; 0x54
    b87c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b87e:	3307      	adds	r3, #7
    b880:	e7b6      	b.n	b7f0 <_printf_float+0x34>
    b882:	2380      	movs	r3, #128	; 0x80
    b884:	6862      	ldr	r2, [r4, #4]
    b886:	00db      	lsls	r3, r3, #3
    b888:	1c51      	adds	r1, r2, #1
    b88a:	d145      	bne.n	b918 <_printf_float+0x15c>
    b88c:	3207      	adds	r2, #7
    b88e:	6062      	str	r2, [r4, #4]
    b890:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b892:	2100      	movs	r1, #0
    b894:	4313      	orrs	r3, r2
    b896:	aa12      	add	r2, sp, #72	; 0x48
    b898:	9205      	str	r2, [sp, #20]
    b89a:	aa11      	add	r2, sp, #68	; 0x44
    b89c:	9203      	str	r2, [sp, #12]
    b89e:	2223      	movs	r2, #35	; 0x23
    b8a0:	6023      	str	r3, [r4, #0]
    b8a2:	9106      	str	r1, [sp, #24]
    b8a4:	9301      	str	r3, [sp, #4]
    b8a6:	a908      	add	r1, sp, #32
    b8a8:	6863      	ldr	r3, [r4, #4]
    b8aa:	1852      	adds	r2, r2, r1
    b8ac:	9202      	str	r2, [sp, #8]
    b8ae:	9300      	str	r3, [sp, #0]
    b8b0:	0032      	movs	r2, r6
    b8b2:	002b      	movs	r3, r5
    b8b4:	9704      	str	r7, [sp, #16]
    b8b6:	9809      	ldr	r0, [sp, #36]	; 0x24
    b8b8:	f7ff fee4 	bl	b684 <__cvt>
    b8bc:	2320      	movs	r3, #32
    b8be:	003a      	movs	r2, r7
    b8c0:	0005      	movs	r5, r0
    b8c2:	439a      	bics	r2, r3
    b8c4:	2a47      	cmp	r2, #71	; 0x47
    b8c6:	d107      	bne.n	b8d8 <_printf_float+0x11c>
    b8c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b8ca:	1cda      	adds	r2, r3, #3
    b8cc:	db02      	blt.n	b8d4 <_printf_float+0x118>
    b8ce:	6862      	ldr	r2, [r4, #4]
    b8d0:	4293      	cmp	r3, r2
    b8d2:	dd5b      	ble.n	b98c <_printf_float+0x1d0>
    b8d4:	3f02      	subs	r7, #2
    b8d6:	b2ff      	uxtb	r7, r7
    b8d8:	9911      	ldr	r1, [sp, #68]	; 0x44
    b8da:	2f65      	cmp	r7, #101	; 0x65
    b8dc:	d83b      	bhi.n	b956 <_printf_float+0x19a>
    b8de:	0020      	movs	r0, r4
    b8e0:	3901      	subs	r1, #1
    b8e2:	003a      	movs	r2, r7
    b8e4:	3050      	adds	r0, #80	; 0x50
    b8e6:	9111      	str	r1, [sp, #68]	; 0x44
    b8e8:	f7ff ff30 	bl	b74c <__exponent>
    b8ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b8ee:	0006      	movs	r6, r0
    b8f0:	1883      	adds	r3, r0, r2
    b8f2:	6123      	str	r3, [r4, #16]
    b8f4:	2a01      	cmp	r2, #1
    b8f6:	dc02      	bgt.n	b8fe <_printf_float+0x142>
    b8f8:	6822      	ldr	r2, [r4, #0]
    b8fa:	07d2      	lsls	r2, r2, #31
    b8fc:	d501      	bpl.n	b902 <_printf_float+0x146>
    b8fe:	3301      	adds	r3, #1
    b900:	6123      	str	r3, [r4, #16]
    b902:	2323      	movs	r3, #35	; 0x23
    b904:	aa08      	add	r2, sp, #32
    b906:	189b      	adds	r3, r3, r2
    b908:	781b      	ldrb	r3, [r3, #0]
    b90a:	2b00      	cmp	r3, #0
    b90c:	d0a8      	beq.n	b860 <_printf_float+0xa4>
    b90e:	0023      	movs	r3, r4
    b910:	222d      	movs	r2, #45	; 0x2d
    b912:	3343      	adds	r3, #67	; 0x43
    b914:	701a      	strb	r2, [r3, #0]
    b916:	e7a3      	b.n	b860 <_printf_float+0xa4>
    b918:	2f67      	cmp	r7, #103	; 0x67
    b91a:	d001      	beq.n	b920 <_printf_float+0x164>
    b91c:	2f47      	cmp	r7, #71	; 0x47
    b91e:	d1b7      	bne.n	b890 <_printf_float+0xd4>
    b920:	2a00      	cmp	r2, #0
    b922:	d016      	beq.n	b952 <_printf_float+0x196>
    b924:	990c      	ldr	r1, [sp, #48]	; 0x30
    b926:	a808      	add	r0, sp, #32
    b928:	430b      	orrs	r3, r1
    b92a:	2100      	movs	r1, #0
    b92c:	9106      	str	r1, [sp, #24]
    b92e:	a912      	add	r1, sp, #72	; 0x48
    b930:	9105      	str	r1, [sp, #20]
    b932:	a911      	add	r1, sp, #68	; 0x44
    b934:	9103      	str	r1, [sp, #12]
    b936:	2123      	movs	r1, #35	; 0x23
    b938:	1809      	adds	r1, r1, r0
    b93a:	6023      	str	r3, [r4, #0]
    b93c:	9301      	str	r3, [sp, #4]
    b93e:	9200      	str	r2, [sp, #0]
    b940:	002b      	movs	r3, r5
    b942:	9704      	str	r7, [sp, #16]
    b944:	9102      	str	r1, [sp, #8]
    b946:	0032      	movs	r2, r6
    b948:	9809      	ldr	r0, [sp, #36]	; 0x24
    b94a:	f7ff fe9b 	bl	b684 <__cvt>
    b94e:	0005      	movs	r5, r0
    b950:	e7ba      	b.n	b8c8 <_printf_float+0x10c>
    b952:	2201      	movs	r2, #1
    b954:	e79b      	b.n	b88e <_printf_float+0xd2>
    b956:	2f66      	cmp	r7, #102	; 0x66
    b958:	d119      	bne.n	b98e <_printf_float+0x1d2>
    b95a:	6863      	ldr	r3, [r4, #4]
    b95c:	2900      	cmp	r1, #0
    b95e:	dd0c      	ble.n	b97a <_printf_float+0x1be>
    b960:	6121      	str	r1, [r4, #16]
    b962:	2b00      	cmp	r3, #0
    b964:	d102      	bne.n	b96c <_printf_float+0x1b0>
    b966:	6822      	ldr	r2, [r4, #0]
    b968:	07d2      	lsls	r2, r2, #31
    b96a:	d502      	bpl.n	b972 <_printf_float+0x1b6>
    b96c:	3301      	adds	r3, #1
    b96e:	185b      	adds	r3, r3, r1
    b970:	6123      	str	r3, [r4, #16]
    b972:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b974:	2600      	movs	r6, #0
    b976:	65a3      	str	r3, [r4, #88]	; 0x58
    b978:	e7c3      	b.n	b902 <_printf_float+0x146>
    b97a:	2b00      	cmp	r3, #0
    b97c:	d103      	bne.n	b986 <_printf_float+0x1ca>
    b97e:	2201      	movs	r2, #1
    b980:	6821      	ldr	r1, [r4, #0]
    b982:	4211      	tst	r1, r2
    b984:	d000      	beq.n	b988 <_printf_float+0x1cc>
    b986:	1c9a      	adds	r2, r3, #2
    b988:	6122      	str	r2, [r4, #16]
    b98a:	e7f2      	b.n	b972 <_printf_float+0x1b6>
    b98c:	2767      	movs	r7, #103	; 0x67
    b98e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b990:	9812      	ldr	r0, [sp, #72]	; 0x48
    b992:	4283      	cmp	r3, r0
    b994:	db05      	blt.n	b9a2 <_printf_float+0x1e6>
    b996:	6822      	ldr	r2, [r4, #0]
    b998:	6123      	str	r3, [r4, #16]
    b99a:	07d2      	lsls	r2, r2, #31
    b99c:	d5e9      	bpl.n	b972 <_printf_float+0x1b6>
    b99e:	3301      	adds	r3, #1
    b9a0:	e7e6      	b.n	b970 <_printf_float+0x1b4>
    b9a2:	2201      	movs	r2, #1
    b9a4:	2b00      	cmp	r3, #0
    b9a6:	dc01      	bgt.n	b9ac <_printf_float+0x1f0>
    b9a8:	1892      	adds	r2, r2, r2
    b9aa:	1ad2      	subs	r2, r2, r3
    b9ac:	1812      	adds	r2, r2, r0
    b9ae:	e7eb      	b.n	b988 <_printf_float+0x1cc>
    b9b0:	6822      	ldr	r2, [r4, #0]
    b9b2:	0553      	lsls	r3, r2, #21
    b9b4:	d408      	bmi.n	b9c8 <_printf_float+0x20c>
    b9b6:	6923      	ldr	r3, [r4, #16]
    b9b8:	002a      	movs	r2, r5
    b9ba:	990a      	ldr	r1, [sp, #40]	; 0x28
    b9bc:	9809      	ldr	r0, [sp, #36]	; 0x24
    b9be:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    b9c0:	47a8      	blx	r5
    b9c2:	1c43      	adds	r3, r0, #1
    b9c4:	d129      	bne.n	ba1a <_printf_float+0x25e>
    b9c6:	e756      	b.n	b876 <_printf_float+0xba>
    b9c8:	2f65      	cmp	r7, #101	; 0x65
    b9ca:	d800      	bhi.n	b9ce <_printf_float+0x212>
    b9cc:	e0dc      	b.n	bb88 <_printf_float+0x3cc>
    b9ce:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    b9d0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    b9d2:	2200      	movs	r2, #0
    b9d4:	2300      	movs	r3, #0
    b9d6:	f7fc fefd 	bl	87d4 <__aeabi_dcmpeq>
    b9da:	2800      	cmp	r0, #0
    b9dc:	d035      	beq.n	ba4a <_printf_float+0x28e>
    b9de:	2301      	movs	r3, #1
    b9e0:	4a35      	ldr	r2, [pc, #212]	; (bab8 <_printf_float+0x2fc>)
    b9e2:	990a      	ldr	r1, [sp, #40]	; 0x28
    b9e4:	9809      	ldr	r0, [sp, #36]	; 0x24
    b9e6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    b9e8:	47a8      	blx	r5
    b9ea:	1c43      	adds	r3, r0, #1
    b9ec:	d100      	bne.n	b9f0 <_printf_float+0x234>
    b9ee:	e742      	b.n	b876 <_printf_float+0xba>
    b9f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b9f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b9f4:	4293      	cmp	r3, r2
    b9f6:	db02      	blt.n	b9fe <_printf_float+0x242>
    b9f8:	6823      	ldr	r3, [r4, #0]
    b9fa:	07db      	lsls	r3, r3, #31
    b9fc:	d50d      	bpl.n	ba1a <_printf_float+0x25e>
    b9fe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    ba00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ba02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ba04:	990a      	ldr	r1, [sp, #40]	; 0x28
    ba06:	9809      	ldr	r0, [sp, #36]	; 0x24
    ba08:	47a8      	blx	r5
    ba0a:	2500      	movs	r5, #0
    ba0c:	1c43      	adds	r3, r0, #1
    ba0e:	d100      	bne.n	ba12 <_printf_float+0x256>
    ba10:	e731      	b.n	b876 <_printf_float+0xba>
    ba12:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ba14:	3b01      	subs	r3, #1
    ba16:	429d      	cmp	r5, r3
    ba18:	db0b      	blt.n	ba32 <_printf_float+0x276>
    ba1a:	6823      	ldr	r3, [r4, #0]
    ba1c:	2500      	movs	r5, #0
    ba1e:	079b      	lsls	r3, r3, #30
    ba20:	d500      	bpl.n	ba24 <_printf_float+0x268>
    ba22:	e0fd      	b.n	bc20 <_printf_float+0x464>
    ba24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ba26:	68e0      	ldr	r0, [r4, #12]
    ba28:	4298      	cmp	r0, r3
    ba2a:	db00      	blt.n	ba2e <_printf_float+0x272>
    ba2c:	e725      	b.n	b87a <_printf_float+0xbe>
    ba2e:	0018      	movs	r0, r3
    ba30:	e723      	b.n	b87a <_printf_float+0xbe>
    ba32:	0022      	movs	r2, r4
    ba34:	2301      	movs	r3, #1
    ba36:	321a      	adds	r2, #26
    ba38:	990a      	ldr	r1, [sp, #40]	; 0x28
    ba3a:	9809      	ldr	r0, [sp, #36]	; 0x24
    ba3c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    ba3e:	47b0      	blx	r6
    ba40:	1c43      	adds	r3, r0, #1
    ba42:	d100      	bne.n	ba46 <_printf_float+0x28a>
    ba44:	e717      	b.n	b876 <_printf_float+0xba>
    ba46:	3501      	adds	r5, #1
    ba48:	e7e3      	b.n	ba12 <_printf_float+0x256>
    ba4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ba4c:	2b00      	cmp	r3, #0
    ba4e:	dc35      	bgt.n	babc <_printf_float+0x300>
    ba50:	2301      	movs	r3, #1
    ba52:	4a19      	ldr	r2, [pc, #100]	; (bab8 <_printf_float+0x2fc>)
    ba54:	990a      	ldr	r1, [sp, #40]	; 0x28
    ba56:	9809      	ldr	r0, [sp, #36]	; 0x24
    ba58:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    ba5a:	47b0      	blx	r6
    ba5c:	1c43      	adds	r3, r0, #1
    ba5e:	d100      	bne.n	ba62 <_printf_float+0x2a6>
    ba60:	e709      	b.n	b876 <_printf_float+0xba>
    ba62:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ba64:	2b00      	cmp	r3, #0
    ba66:	d105      	bne.n	ba74 <_printf_float+0x2b8>
    ba68:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ba6a:	2b00      	cmp	r3, #0
    ba6c:	d102      	bne.n	ba74 <_printf_float+0x2b8>
    ba6e:	6823      	ldr	r3, [r4, #0]
    ba70:	07db      	lsls	r3, r3, #31
    ba72:	d5d2      	bpl.n	ba1a <_printf_float+0x25e>
    ba74:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    ba76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ba78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ba7a:	990a      	ldr	r1, [sp, #40]	; 0x28
    ba7c:	9809      	ldr	r0, [sp, #36]	; 0x24
    ba7e:	47b0      	blx	r6
    ba80:	2600      	movs	r6, #0
    ba82:	1c43      	adds	r3, r0, #1
    ba84:	d100      	bne.n	ba88 <_printf_float+0x2cc>
    ba86:	e6f6      	b.n	b876 <_printf_float+0xba>
    ba88:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ba8a:	425b      	negs	r3, r3
    ba8c:	429e      	cmp	r6, r3
    ba8e:	db01      	blt.n	ba94 <_printf_float+0x2d8>
    ba90:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ba92:	e791      	b.n	b9b8 <_printf_float+0x1fc>
    ba94:	0022      	movs	r2, r4
    ba96:	2301      	movs	r3, #1
    ba98:	321a      	adds	r2, #26
    ba9a:	990a      	ldr	r1, [sp, #40]	; 0x28
    ba9c:	9809      	ldr	r0, [sp, #36]	; 0x24
    ba9e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    baa0:	47b8      	blx	r7
    baa2:	1c43      	adds	r3, r0, #1
    baa4:	d100      	bne.n	baa8 <_printf_float+0x2ec>
    baa6:	e6e6      	b.n	b876 <_printf_float+0xba>
    baa8:	3601      	adds	r6, #1
    baaa:	e7ed      	b.n	ba88 <_printf_float+0x2cc>
    baac:	7fefffff 	.word	0x7fefffff
    bab0:	0000e0d6 	.word	0x0000e0d6
    bab4:	0000e0d2 	.word	0x0000e0d2
    bab8:	0000e0e2 	.word	0x0000e0e2
    babc:	6da3      	ldr	r3, [r4, #88]	; 0x58
    babe:	9e12      	ldr	r6, [sp, #72]	; 0x48
    bac0:	429e      	cmp	r6, r3
    bac2:	dd00      	ble.n	bac6 <_printf_float+0x30a>
    bac4:	001e      	movs	r6, r3
    bac6:	2e00      	cmp	r6, #0
    bac8:	dc35      	bgt.n	bb36 <_printf_float+0x37a>
    baca:	2300      	movs	r3, #0
    bacc:	930c      	str	r3, [sp, #48]	; 0x30
    bace:	43f3      	mvns	r3, r6
    bad0:	17db      	asrs	r3, r3, #31
    bad2:	930f      	str	r3, [sp, #60]	; 0x3c
    bad4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    bad6:	6da7      	ldr	r7, [r4, #88]	; 0x58
    bad8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bada:	4033      	ands	r3, r6
    badc:	1afb      	subs	r3, r7, r3
    bade:	429a      	cmp	r2, r3
    bae0:	db32      	blt.n	bb48 <_printf_float+0x38c>
    bae2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    bae4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    bae6:	4293      	cmp	r3, r2
    bae8:	db3c      	blt.n	bb64 <_printf_float+0x3a8>
    baea:	6823      	ldr	r3, [r4, #0]
    baec:	07db      	lsls	r3, r3, #31
    baee:	d439      	bmi.n	bb64 <_printf_float+0x3a8>
    baf0:	9e12      	ldr	r6, [sp, #72]	; 0x48
    baf2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    baf4:	1bf3      	subs	r3, r6, r7
    baf6:	1ab6      	subs	r6, r6, r2
    baf8:	429e      	cmp	r6, r3
    bafa:	dd00      	ble.n	bafe <_printf_float+0x342>
    bafc:	001e      	movs	r6, r3
    bafe:	2e00      	cmp	r6, #0
    bb00:	dc39      	bgt.n	bb76 <_printf_float+0x3ba>
    bb02:	43f7      	mvns	r7, r6
    bb04:	2500      	movs	r5, #0
    bb06:	17fb      	asrs	r3, r7, #31
    bb08:	930c      	str	r3, [sp, #48]	; 0x30
    bb0a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    bb0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bb0e:	990c      	ldr	r1, [sp, #48]	; 0x30
    bb10:	1a9b      	subs	r3, r3, r2
    bb12:	0032      	movs	r2, r6
    bb14:	400a      	ands	r2, r1
    bb16:	1a9b      	subs	r3, r3, r2
    bb18:	429d      	cmp	r5, r3
    bb1a:	db00      	blt.n	bb1e <_printf_float+0x362>
    bb1c:	e77d      	b.n	ba1a <_printf_float+0x25e>
    bb1e:	0022      	movs	r2, r4
    bb20:	2301      	movs	r3, #1
    bb22:	321a      	adds	r2, #26
    bb24:	990a      	ldr	r1, [sp, #40]	; 0x28
    bb26:	9809      	ldr	r0, [sp, #36]	; 0x24
    bb28:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    bb2a:	47b8      	blx	r7
    bb2c:	1c43      	adds	r3, r0, #1
    bb2e:	d100      	bne.n	bb32 <_printf_float+0x376>
    bb30:	e6a1      	b.n	b876 <_printf_float+0xba>
    bb32:	3501      	adds	r5, #1
    bb34:	e7e9      	b.n	bb0a <_printf_float+0x34e>
    bb36:	0033      	movs	r3, r6
    bb38:	002a      	movs	r2, r5
    bb3a:	990a      	ldr	r1, [sp, #40]	; 0x28
    bb3c:	9809      	ldr	r0, [sp, #36]	; 0x24
    bb3e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    bb40:	47b8      	blx	r7
    bb42:	1c43      	adds	r3, r0, #1
    bb44:	d1c1      	bne.n	baca <_printf_float+0x30e>
    bb46:	e696      	b.n	b876 <_printf_float+0xba>
    bb48:	0022      	movs	r2, r4
    bb4a:	2301      	movs	r3, #1
    bb4c:	321a      	adds	r2, #26
    bb4e:	990a      	ldr	r1, [sp, #40]	; 0x28
    bb50:	9809      	ldr	r0, [sp, #36]	; 0x24
    bb52:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    bb54:	47b8      	blx	r7
    bb56:	1c43      	adds	r3, r0, #1
    bb58:	d100      	bne.n	bb5c <_printf_float+0x3a0>
    bb5a:	e68c      	b.n	b876 <_printf_float+0xba>
    bb5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bb5e:	3301      	adds	r3, #1
    bb60:	930c      	str	r3, [sp, #48]	; 0x30
    bb62:	e7b7      	b.n	bad4 <_printf_float+0x318>
    bb64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    bb66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    bb68:	990a      	ldr	r1, [sp, #40]	; 0x28
    bb6a:	9809      	ldr	r0, [sp, #36]	; 0x24
    bb6c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    bb6e:	47b0      	blx	r6
    bb70:	1c43      	adds	r3, r0, #1
    bb72:	d1bd      	bne.n	baf0 <_printf_float+0x334>
    bb74:	e67f      	b.n	b876 <_printf_float+0xba>
    bb76:	19ea      	adds	r2, r5, r7
    bb78:	0033      	movs	r3, r6
    bb7a:	990a      	ldr	r1, [sp, #40]	; 0x28
    bb7c:	9809      	ldr	r0, [sp, #36]	; 0x24
    bb7e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    bb80:	47a8      	blx	r5
    bb82:	1c43      	adds	r3, r0, #1
    bb84:	d1bd      	bne.n	bb02 <_printf_float+0x346>
    bb86:	e676      	b.n	b876 <_printf_float+0xba>
    bb88:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bb8a:	2b01      	cmp	r3, #1
    bb8c:	dc02      	bgt.n	bb94 <_printf_float+0x3d8>
    bb8e:	2301      	movs	r3, #1
    bb90:	421a      	tst	r2, r3
    bb92:	d038      	beq.n	bc06 <_printf_float+0x44a>
    bb94:	2301      	movs	r3, #1
    bb96:	002a      	movs	r2, r5
    bb98:	990a      	ldr	r1, [sp, #40]	; 0x28
    bb9a:	9809      	ldr	r0, [sp, #36]	; 0x24
    bb9c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    bb9e:	47b8      	blx	r7
    bba0:	1c43      	adds	r3, r0, #1
    bba2:	d100      	bne.n	bba6 <_printf_float+0x3ea>
    bba4:	e667      	b.n	b876 <_printf_float+0xba>
    bba6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    bba8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    bbaa:	990a      	ldr	r1, [sp, #40]	; 0x28
    bbac:	9809      	ldr	r0, [sp, #36]	; 0x24
    bbae:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    bbb0:	47b8      	blx	r7
    bbb2:	1c43      	adds	r3, r0, #1
    bbb4:	d100      	bne.n	bbb8 <_printf_float+0x3fc>
    bbb6:	e65e      	b.n	b876 <_printf_float+0xba>
    bbb8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    bbba:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    bbbc:	2200      	movs	r2, #0
    bbbe:	2300      	movs	r3, #0
    bbc0:	f7fc fe08 	bl	87d4 <__aeabi_dcmpeq>
    bbc4:	2800      	cmp	r0, #0
    bbc6:	d008      	beq.n	bbda <_printf_float+0x41e>
    bbc8:	2500      	movs	r5, #0
    bbca:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bbcc:	3b01      	subs	r3, #1
    bbce:	429d      	cmp	r5, r3
    bbd0:	db0d      	blt.n	bbee <_printf_float+0x432>
    bbd2:	0022      	movs	r2, r4
    bbd4:	0033      	movs	r3, r6
    bbd6:	3250      	adds	r2, #80	; 0x50
    bbd8:	e6ef      	b.n	b9ba <_printf_float+0x1fe>
    bbda:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bbdc:	1c6a      	adds	r2, r5, #1
    bbde:	3b01      	subs	r3, #1
    bbe0:	990a      	ldr	r1, [sp, #40]	; 0x28
    bbe2:	9809      	ldr	r0, [sp, #36]	; 0x24
    bbe4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    bbe6:	47a8      	blx	r5
    bbe8:	1c43      	adds	r3, r0, #1
    bbea:	d1f2      	bne.n	bbd2 <_printf_float+0x416>
    bbec:	e643      	b.n	b876 <_printf_float+0xba>
    bbee:	0022      	movs	r2, r4
    bbf0:	2301      	movs	r3, #1
    bbf2:	321a      	adds	r2, #26
    bbf4:	990a      	ldr	r1, [sp, #40]	; 0x28
    bbf6:	9809      	ldr	r0, [sp, #36]	; 0x24
    bbf8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    bbfa:	47b8      	blx	r7
    bbfc:	1c43      	adds	r3, r0, #1
    bbfe:	d100      	bne.n	bc02 <_printf_float+0x446>
    bc00:	e639      	b.n	b876 <_printf_float+0xba>
    bc02:	3501      	adds	r5, #1
    bc04:	e7e1      	b.n	bbca <_printf_float+0x40e>
    bc06:	002a      	movs	r2, r5
    bc08:	e7ea      	b.n	bbe0 <_printf_float+0x424>
    bc0a:	0022      	movs	r2, r4
    bc0c:	2301      	movs	r3, #1
    bc0e:	3219      	adds	r2, #25
    bc10:	990a      	ldr	r1, [sp, #40]	; 0x28
    bc12:	9809      	ldr	r0, [sp, #36]	; 0x24
    bc14:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    bc16:	47b0      	blx	r6
    bc18:	1c43      	adds	r3, r0, #1
    bc1a:	d100      	bne.n	bc1e <_printf_float+0x462>
    bc1c:	e62b      	b.n	b876 <_printf_float+0xba>
    bc1e:	3501      	adds	r5, #1
    bc20:	68e3      	ldr	r3, [r4, #12]
    bc22:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    bc24:	1a9b      	subs	r3, r3, r2
    bc26:	429d      	cmp	r5, r3
    bc28:	dbef      	blt.n	bc0a <_printf_float+0x44e>
    bc2a:	e6fb      	b.n	ba24 <_printf_float+0x268>
    bc2c:	0032      	movs	r2, r6
    bc2e:	002b      	movs	r3, r5
    bc30:	0030      	movs	r0, r6
    bc32:	0029      	movs	r1, r5
    bc34:	f7ff fa3a 	bl	b0ac <__aeabi_dcmpun>
    bc38:	2800      	cmp	r0, #0
    bc3a:	d100      	bne.n	bc3e <_printf_float+0x482>
    bc3c:	e621      	b.n	b882 <_printf_float+0xc6>
    bc3e:	4d03      	ldr	r5, [pc, #12]	; (bc4c <_printf_float+0x490>)
    bc40:	2f47      	cmp	r7, #71	; 0x47
    bc42:	d900      	bls.n	bc46 <_printf_float+0x48a>
    bc44:	e605      	b.n	b852 <_printf_float+0x96>
    bc46:	4d02      	ldr	r5, [pc, #8]	; (bc50 <_printf_float+0x494>)
    bc48:	e603      	b.n	b852 <_printf_float+0x96>
    bc4a:	46c0      	nop			; (mov r8, r8)
    bc4c:	0000e0de 	.word	0x0000e0de
    bc50:	0000e0da 	.word	0x0000e0da

0000bc54 <_printf_common>:
    bc54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    bc56:	0015      	movs	r5, r2
    bc58:	9301      	str	r3, [sp, #4]
    bc5a:	688a      	ldr	r2, [r1, #8]
    bc5c:	690b      	ldr	r3, [r1, #16]
    bc5e:	9000      	str	r0, [sp, #0]
    bc60:	000c      	movs	r4, r1
    bc62:	4293      	cmp	r3, r2
    bc64:	da00      	bge.n	bc68 <_printf_common+0x14>
    bc66:	0013      	movs	r3, r2
    bc68:	0022      	movs	r2, r4
    bc6a:	602b      	str	r3, [r5, #0]
    bc6c:	3243      	adds	r2, #67	; 0x43
    bc6e:	7812      	ldrb	r2, [r2, #0]
    bc70:	2a00      	cmp	r2, #0
    bc72:	d001      	beq.n	bc78 <_printf_common+0x24>
    bc74:	3301      	adds	r3, #1
    bc76:	602b      	str	r3, [r5, #0]
    bc78:	6823      	ldr	r3, [r4, #0]
    bc7a:	069b      	lsls	r3, r3, #26
    bc7c:	d502      	bpl.n	bc84 <_printf_common+0x30>
    bc7e:	682b      	ldr	r3, [r5, #0]
    bc80:	3302      	adds	r3, #2
    bc82:	602b      	str	r3, [r5, #0]
    bc84:	2706      	movs	r7, #6
    bc86:	6823      	ldr	r3, [r4, #0]
    bc88:	401f      	ands	r7, r3
    bc8a:	d027      	beq.n	bcdc <_printf_common+0x88>
    bc8c:	0023      	movs	r3, r4
    bc8e:	3343      	adds	r3, #67	; 0x43
    bc90:	781b      	ldrb	r3, [r3, #0]
    bc92:	1e5a      	subs	r2, r3, #1
    bc94:	4193      	sbcs	r3, r2
    bc96:	6822      	ldr	r2, [r4, #0]
    bc98:	0692      	lsls	r2, r2, #26
    bc9a:	d430      	bmi.n	bcfe <_printf_common+0xaa>
    bc9c:	0022      	movs	r2, r4
    bc9e:	9901      	ldr	r1, [sp, #4]
    bca0:	3243      	adds	r2, #67	; 0x43
    bca2:	9800      	ldr	r0, [sp, #0]
    bca4:	9e08      	ldr	r6, [sp, #32]
    bca6:	47b0      	blx	r6
    bca8:	1c43      	adds	r3, r0, #1
    bcaa:	d025      	beq.n	bcf8 <_printf_common+0xa4>
    bcac:	2306      	movs	r3, #6
    bcae:	6820      	ldr	r0, [r4, #0]
    bcb0:	682a      	ldr	r2, [r5, #0]
    bcb2:	68e1      	ldr	r1, [r4, #12]
    bcb4:	4003      	ands	r3, r0
    bcb6:	2500      	movs	r5, #0
    bcb8:	2b04      	cmp	r3, #4
    bcba:	d103      	bne.n	bcc4 <_printf_common+0x70>
    bcbc:	1a8d      	subs	r5, r1, r2
    bcbe:	43eb      	mvns	r3, r5
    bcc0:	17db      	asrs	r3, r3, #31
    bcc2:	401d      	ands	r5, r3
    bcc4:	68a3      	ldr	r3, [r4, #8]
    bcc6:	6922      	ldr	r2, [r4, #16]
    bcc8:	4293      	cmp	r3, r2
    bcca:	dd01      	ble.n	bcd0 <_printf_common+0x7c>
    bccc:	1a9b      	subs	r3, r3, r2
    bcce:	18ed      	adds	r5, r5, r3
    bcd0:	2700      	movs	r7, #0
    bcd2:	42bd      	cmp	r5, r7
    bcd4:	d120      	bne.n	bd18 <_printf_common+0xc4>
    bcd6:	2000      	movs	r0, #0
    bcd8:	e010      	b.n	bcfc <_printf_common+0xa8>
    bcda:	3701      	adds	r7, #1
    bcdc:	68e3      	ldr	r3, [r4, #12]
    bcde:	682a      	ldr	r2, [r5, #0]
    bce0:	1a9b      	subs	r3, r3, r2
    bce2:	429f      	cmp	r7, r3
    bce4:	dad2      	bge.n	bc8c <_printf_common+0x38>
    bce6:	0022      	movs	r2, r4
    bce8:	2301      	movs	r3, #1
    bcea:	3219      	adds	r2, #25
    bcec:	9901      	ldr	r1, [sp, #4]
    bcee:	9800      	ldr	r0, [sp, #0]
    bcf0:	9e08      	ldr	r6, [sp, #32]
    bcf2:	47b0      	blx	r6
    bcf4:	1c43      	adds	r3, r0, #1
    bcf6:	d1f0      	bne.n	bcda <_printf_common+0x86>
    bcf8:	2001      	movs	r0, #1
    bcfa:	4240      	negs	r0, r0
    bcfc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    bcfe:	2030      	movs	r0, #48	; 0x30
    bd00:	18e1      	adds	r1, r4, r3
    bd02:	3143      	adds	r1, #67	; 0x43
    bd04:	7008      	strb	r0, [r1, #0]
    bd06:	0021      	movs	r1, r4
    bd08:	1c5a      	adds	r2, r3, #1
    bd0a:	3145      	adds	r1, #69	; 0x45
    bd0c:	7809      	ldrb	r1, [r1, #0]
    bd0e:	18a2      	adds	r2, r4, r2
    bd10:	3243      	adds	r2, #67	; 0x43
    bd12:	3302      	adds	r3, #2
    bd14:	7011      	strb	r1, [r2, #0]
    bd16:	e7c1      	b.n	bc9c <_printf_common+0x48>
    bd18:	0022      	movs	r2, r4
    bd1a:	2301      	movs	r3, #1
    bd1c:	321a      	adds	r2, #26
    bd1e:	9901      	ldr	r1, [sp, #4]
    bd20:	9800      	ldr	r0, [sp, #0]
    bd22:	9e08      	ldr	r6, [sp, #32]
    bd24:	47b0      	blx	r6
    bd26:	1c43      	adds	r3, r0, #1
    bd28:	d0e6      	beq.n	bcf8 <_printf_common+0xa4>
    bd2a:	3701      	adds	r7, #1
    bd2c:	e7d1      	b.n	bcd2 <_printf_common+0x7e>
	...

0000bd30 <_printf_i>:
    bd30:	b5f0      	push	{r4, r5, r6, r7, lr}
    bd32:	b08b      	sub	sp, #44	; 0x2c
    bd34:	9206      	str	r2, [sp, #24]
    bd36:	000a      	movs	r2, r1
    bd38:	3243      	adds	r2, #67	; 0x43
    bd3a:	9307      	str	r3, [sp, #28]
    bd3c:	9005      	str	r0, [sp, #20]
    bd3e:	9204      	str	r2, [sp, #16]
    bd40:	7e0a      	ldrb	r2, [r1, #24]
    bd42:	000c      	movs	r4, r1
    bd44:	9b10      	ldr	r3, [sp, #64]	; 0x40
    bd46:	2a6e      	cmp	r2, #110	; 0x6e
    bd48:	d100      	bne.n	bd4c <_printf_i+0x1c>
    bd4a:	e08f      	b.n	be6c <_printf_i+0x13c>
    bd4c:	d817      	bhi.n	bd7e <_printf_i+0x4e>
    bd4e:	2a63      	cmp	r2, #99	; 0x63
    bd50:	d02c      	beq.n	bdac <_printf_i+0x7c>
    bd52:	d808      	bhi.n	bd66 <_printf_i+0x36>
    bd54:	2a00      	cmp	r2, #0
    bd56:	d100      	bne.n	bd5a <_printf_i+0x2a>
    bd58:	e099      	b.n	be8e <_printf_i+0x15e>
    bd5a:	2a58      	cmp	r2, #88	; 0x58
    bd5c:	d054      	beq.n	be08 <_printf_i+0xd8>
    bd5e:	0026      	movs	r6, r4
    bd60:	3642      	adds	r6, #66	; 0x42
    bd62:	7032      	strb	r2, [r6, #0]
    bd64:	e029      	b.n	bdba <_printf_i+0x8a>
    bd66:	2a64      	cmp	r2, #100	; 0x64
    bd68:	d001      	beq.n	bd6e <_printf_i+0x3e>
    bd6a:	2a69      	cmp	r2, #105	; 0x69
    bd6c:	d1f7      	bne.n	bd5e <_printf_i+0x2e>
    bd6e:	6821      	ldr	r1, [r4, #0]
    bd70:	681a      	ldr	r2, [r3, #0]
    bd72:	0608      	lsls	r0, r1, #24
    bd74:	d523      	bpl.n	bdbe <_printf_i+0x8e>
    bd76:	1d11      	adds	r1, r2, #4
    bd78:	6019      	str	r1, [r3, #0]
    bd7a:	6815      	ldr	r5, [r2, #0]
    bd7c:	e025      	b.n	bdca <_printf_i+0x9a>
    bd7e:	2a73      	cmp	r2, #115	; 0x73
    bd80:	d100      	bne.n	bd84 <_printf_i+0x54>
    bd82:	e088      	b.n	be96 <_printf_i+0x166>
    bd84:	d808      	bhi.n	bd98 <_printf_i+0x68>
    bd86:	2a6f      	cmp	r2, #111	; 0x6f
    bd88:	d029      	beq.n	bdde <_printf_i+0xae>
    bd8a:	2a70      	cmp	r2, #112	; 0x70
    bd8c:	d1e7      	bne.n	bd5e <_printf_i+0x2e>
    bd8e:	2220      	movs	r2, #32
    bd90:	6809      	ldr	r1, [r1, #0]
    bd92:	430a      	orrs	r2, r1
    bd94:	6022      	str	r2, [r4, #0]
    bd96:	e003      	b.n	bda0 <_printf_i+0x70>
    bd98:	2a75      	cmp	r2, #117	; 0x75
    bd9a:	d020      	beq.n	bdde <_printf_i+0xae>
    bd9c:	2a78      	cmp	r2, #120	; 0x78
    bd9e:	d1de      	bne.n	bd5e <_printf_i+0x2e>
    bda0:	0022      	movs	r2, r4
    bda2:	2178      	movs	r1, #120	; 0x78
    bda4:	3245      	adds	r2, #69	; 0x45
    bda6:	7011      	strb	r1, [r2, #0]
    bda8:	4a6c      	ldr	r2, [pc, #432]	; (bf5c <_printf_i+0x22c>)
    bdaa:	e030      	b.n	be0e <_printf_i+0xde>
    bdac:	000e      	movs	r6, r1
    bdae:	681a      	ldr	r2, [r3, #0]
    bdb0:	3642      	adds	r6, #66	; 0x42
    bdb2:	1d11      	adds	r1, r2, #4
    bdb4:	6019      	str	r1, [r3, #0]
    bdb6:	6813      	ldr	r3, [r2, #0]
    bdb8:	7033      	strb	r3, [r6, #0]
    bdba:	2301      	movs	r3, #1
    bdbc:	e079      	b.n	beb2 <_printf_i+0x182>
    bdbe:	0649      	lsls	r1, r1, #25
    bdc0:	d5d9      	bpl.n	bd76 <_printf_i+0x46>
    bdc2:	1d11      	adds	r1, r2, #4
    bdc4:	6019      	str	r1, [r3, #0]
    bdc6:	2300      	movs	r3, #0
    bdc8:	5ed5      	ldrsh	r5, [r2, r3]
    bdca:	2d00      	cmp	r5, #0
    bdcc:	da03      	bge.n	bdd6 <_printf_i+0xa6>
    bdce:	232d      	movs	r3, #45	; 0x2d
    bdd0:	9a04      	ldr	r2, [sp, #16]
    bdd2:	426d      	negs	r5, r5
    bdd4:	7013      	strb	r3, [r2, #0]
    bdd6:	4b62      	ldr	r3, [pc, #392]	; (bf60 <_printf_i+0x230>)
    bdd8:	270a      	movs	r7, #10
    bdda:	9303      	str	r3, [sp, #12]
    bddc:	e02f      	b.n	be3e <_printf_i+0x10e>
    bdde:	6820      	ldr	r0, [r4, #0]
    bde0:	6819      	ldr	r1, [r3, #0]
    bde2:	0605      	lsls	r5, r0, #24
    bde4:	d503      	bpl.n	bdee <_printf_i+0xbe>
    bde6:	1d08      	adds	r0, r1, #4
    bde8:	6018      	str	r0, [r3, #0]
    bdea:	680d      	ldr	r5, [r1, #0]
    bdec:	e005      	b.n	bdfa <_printf_i+0xca>
    bdee:	0640      	lsls	r0, r0, #25
    bdf0:	d5f9      	bpl.n	bde6 <_printf_i+0xb6>
    bdf2:	680d      	ldr	r5, [r1, #0]
    bdf4:	1d08      	adds	r0, r1, #4
    bdf6:	6018      	str	r0, [r3, #0]
    bdf8:	b2ad      	uxth	r5, r5
    bdfa:	4b59      	ldr	r3, [pc, #356]	; (bf60 <_printf_i+0x230>)
    bdfc:	2708      	movs	r7, #8
    bdfe:	9303      	str	r3, [sp, #12]
    be00:	2a6f      	cmp	r2, #111	; 0x6f
    be02:	d018      	beq.n	be36 <_printf_i+0x106>
    be04:	270a      	movs	r7, #10
    be06:	e016      	b.n	be36 <_printf_i+0x106>
    be08:	3145      	adds	r1, #69	; 0x45
    be0a:	700a      	strb	r2, [r1, #0]
    be0c:	4a54      	ldr	r2, [pc, #336]	; (bf60 <_printf_i+0x230>)
    be0e:	9203      	str	r2, [sp, #12]
    be10:	681a      	ldr	r2, [r3, #0]
    be12:	6821      	ldr	r1, [r4, #0]
    be14:	1d10      	adds	r0, r2, #4
    be16:	6018      	str	r0, [r3, #0]
    be18:	6815      	ldr	r5, [r2, #0]
    be1a:	0608      	lsls	r0, r1, #24
    be1c:	d522      	bpl.n	be64 <_printf_i+0x134>
    be1e:	07cb      	lsls	r3, r1, #31
    be20:	d502      	bpl.n	be28 <_printf_i+0xf8>
    be22:	2320      	movs	r3, #32
    be24:	4319      	orrs	r1, r3
    be26:	6021      	str	r1, [r4, #0]
    be28:	2710      	movs	r7, #16
    be2a:	2d00      	cmp	r5, #0
    be2c:	d103      	bne.n	be36 <_printf_i+0x106>
    be2e:	2320      	movs	r3, #32
    be30:	6822      	ldr	r2, [r4, #0]
    be32:	439a      	bics	r2, r3
    be34:	6022      	str	r2, [r4, #0]
    be36:	0023      	movs	r3, r4
    be38:	2200      	movs	r2, #0
    be3a:	3343      	adds	r3, #67	; 0x43
    be3c:	701a      	strb	r2, [r3, #0]
    be3e:	6863      	ldr	r3, [r4, #4]
    be40:	60a3      	str	r3, [r4, #8]
    be42:	2b00      	cmp	r3, #0
    be44:	db5c      	blt.n	bf00 <_printf_i+0x1d0>
    be46:	2204      	movs	r2, #4
    be48:	6821      	ldr	r1, [r4, #0]
    be4a:	4391      	bics	r1, r2
    be4c:	6021      	str	r1, [r4, #0]
    be4e:	2d00      	cmp	r5, #0
    be50:	d158      	bne.n	bf04 <_printf_i+0x1d4>
    be52:	9e04      	ldr	r6, [sp, #16]
    be54:	2b00      	cmp	r3, #0
    be56:	d064      	beq.n	bf22 <_printf_i+0x1f2>
    be58:	0026      	movs	r6, r4
    be5a:	9b03      	ldr	r3, [sp, #12]
    be5c:	3642      	adds	r6, #66	; 0x42
    be5e:	781b      	ldrb	r3, [r3, #0]
    be60:	7033      	strb	r3, [r6, #0]
    be62:	e05e      	b.n	bf22 <_printf_i+0x1f2>
    be64:	0648      	lsls	r0, r1, #25
    be66:	d5da      	bpl.n	be1e <_printf_i+0xee>
    be68:	b2ad      	uxth	r5, r5
    be6a:	e7d8      	b.n	be1e <_printf_i+0xee>
    be6c:	6809      	ldr	r1, [r1, #0]
    be6e:	681a      	ldr	r2, [r3, #0]
    be70:	0608      	lsls	r0, r1, #24
    be72:	d505      	bpl.n	be80 <_printf_i+0x150>
    be74:	1d11      	adds	r1, r2, #4
    be76:	6019      	str	r1, [r3, #0]
    be78:	6813      	ldr	r3, [r2, #0]
    be7a:	6962      	ldr	r2, [r4, #20]
    be7c:	601a      	str	r2, [r3, #0]
    be7e:	e006      	b.n	be8e <_printf_i+0x15e>
    be80:	0649      	lsls	r1, r1, #25
    be82:	d5f7      	bpl.n	be74 <_printf_i+0x144>
    be84:	1d11      	adds	r1, r2, #4
    be86:	6019      	str	r1, [r3, #0]
    be88:	6813      	ldr	r3, [r2, #0]
    be8a:	8aa2      	ldrh	r2, [r4, #20]
    be8c:	801a      	strh	r2, [r3, #0]
    be8e:	2300      	movs	r3, #0
    be90:	9e04      	ldr	r6, [sp, #16]
    be92:	6123      	str	r3, [r4, #16]
    be94:	e054      	b.n	bf40 <_printf_i+0x210>
    be96:	681a      	ldr	r2, [r3, #0]
    be98:	1d11      	adds	r1, r2, #4
    be9a:	6019      	str	r1, [r3, #0]
    be9c:	6816      	ldr	r6, [r2, #0]
    be9e:	2100      	movs	r1, #0
    bea0:	6862      	ldr	r2, [r4, #4]
    bea2:	0030      	movs	r0, r6
    bea4:	f000 ff30 	bl	cd08 <memchr>
    bea8:	2800      	cmp	r0, #0
    beaa:	d001      	beq.n	beb0 <_printf_i+0x180>
    beac:	1b80      	subs	r0, r0, r6
    beae:	6060      	str	r0, [r4, #4]
    beb0:	6863      	ldr	r3, [r4, #4]
    beb2:	6123      	str	r3, [r4, #16]
    beb4:	2300      	movs	r3, #0
    beb6:	9a04      	ldr	r2, [sp, #16]
    beb8:	7013      	strb	r3, [r2, #0]
    beba:	e041      	b.n	bf40 <_printf_i+0x210>
    bebc:	6923      	ldr	r3, [r4, #16]
    bebe:	0032      	movs	r2, r6
    bec0:	9906      	ldr	r1, [sp, #24]
    bec2:	9805      	ldr	r0, [sp, #20]
    bec4:	9d07      	ldr	r5, [sp, #28]
    bec6:	47a8      	blx	r5
    bec8:	1c43      	adds	r3, r0, #1
    beca:	d043      	beq.n	bf54 <_printf_i+0x224>
    becc:	6823      	ldr	r3, [r4, #0]
    bece:	2500      	movs	r5, #0
    bed0:	079b      	lsls	r3, r3, #30
    bed2:	d40f      	bmi.n	bef4 <_printf_i+0x1c4>
    bed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bed6:	68e0      	ldr	r0, [r4, #12]
    bed8:	4298      	cmp	r0, r3
    beda:	da3d      	bge.n	bf58 <_printf_i+0x228>
    bedc:	0018      	movs	r0, r3
    bede:	e03b      	b.n	bf58 <_printf_i+0x228>
    bee0:	0022      	movs	r2, r4
    bee2:	2301      	movs	r3, #1
    bee4:	3219      	adds	r2, #25
    bee6:	9906      	ldr	r1, [sp, #24]
    bee8:	9805      	ldr	r0, [sp, #20]
    beea:	9e07      	ldr	r6, [sp, #28]
    beec:	47b0      	blx	r6
    beee:	1c43      	adds	r3, r0, #1
    bef0:	d030      	beq.n	bf54 <_printf_i+0x224>
    bef2:	3501      	adds	r5, #1
    bef4:	68e3      	ldr	r3, [r4, #12]
    bef6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bef8:	1a9b      	subs	r3, r3, r2
    befa:	429d      	cmp	r5, r3
    befc:	dbf0      	blt.n	bee0 <_printf_i+0x1b0>
    befe:	e7e9      	b.n	bed4 <_printf_i+0x1a4>
    bf00:	2d00      	cmp	r5, #0
    bf02:	d0a9      	beq.n	be58 <_printf_i+0x128>
    bf04:	9e04      	ldr	r6, [sp, #16]
    bf06:	0028      	movs	r0, r5
    bf08:	0039      	movs	r1, r7
    bf0a:	f7fc fb63 	bl	85d4 <__aeabi_uidivmod>
    bf0e:	9b03      	ldr	r3, [sp, #12]
    bf10:	3e01      	subs	r6, #1
    bf12:	5c5b      	ldrb	r3, [r3, r1]
    bf14:	0028      	movs	r0, r5
    bf16:	7033      	strb	r3, [r6, #0]
    bf18:	0039      	movs	r1, r7
    bf1a:	f7fc fad5 	bl	84c8 <__udivsi3>
    bf1e:	1e05      	subs	r5, r0, #0
    bf20:	d1f1      	bne.n	bf06 <_printf_i+0x1d6>
    bf22:	2f08      	cmp	r7, #8
    bf24:	d109      	bne.n	bf3a <_printf_i+0x20a>
    bf26:	6823      	ldr	r3, [r4, #0]
    bf28:	07db      	lsls	r3, r3, #31
    bf2a:	d506      	bpl.n	bf3a <_printf_i+0x20a>
    bf2c:	6863      	ldr	r3, [r4, #4]
    bf2e:	6922      	ldr	r2, [r4, #16]
    bf30:	4293      	cmp	r3, r2
    bf32:	dc02      	bgt.n	bf3a <_printf_i+0x20a>
    bf34:	2330      	movs	r3, #48	; 0x30
    bf36:	3e01      	subs	r6, #1
    bf38:	7033      	strb	r3, [r6, #0]
    bf3a:	9b04      	ldr	r3, [sp, #16]
    bf3c:	1b9b      	subs	r3, r3, r6
    bf3e:	6123      	str	r3, [r4, #16]
    bf40:	9b07      	ldr	r3, [sp, #28]
    bf42:	aa09      	add	r2, sp, #36	; 0x24
    bf44:	9300      	str	r3, [sp, #0]
    bf46:	0021      	movs	r1, r4
    bf48:	9b06      	ldr	r3, [sp, #24]
    bf4a:	9805      	ldr	r0, [sp, #20]
    bf4c:	f7ff fe82 	bl	bc54 <_printf_common>
    bf50:	1c43      	adds	r3, r0, #1
    bf52:	d1b3      	bne.n	bebc <_printf_i+0x18c>
    bf54:	2001      	movs	r0, #1
    bf56:	4240      	negs	r0, r0
    bf58:	b00b      	add	sp, #44	; 0x2c
    bf5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bf5c:	0000e0f5 	.word	0x0000e0f5
    bf60:	0000e0e4 	.word	0x0000e0e4

0000bf64 <realloc>:
    bf64:	b510      	push	{r4, lr}
    bf66:	4b03      	ldr	r3, [pc, #12]	; (bf74 <realloc+0x10>)
    bf68:	000a      	movs	r2, r1
    bf6a:	0001      	movs	r1, r0
    bf6c:	6818      	ldr	r0, [r3, #0]
    bf6e:	f001 f9c9 	bl	d304 <_realloc_r>
    bf72:	bd10      	pop	{r4, pc}
    bf74:	20000090 	.word	0x20000090

0000bf78 <_sbrk_r>:
    bf78:	2300      	movs	r3, #0
    bf7a:	b570      	push	{r4, r5, r6, lr}
    bf7c:	4c06      	ldr	r4, [pc, #24]	; (bf98 <_sbrk_r+0x20>)
    bf7e:	0005      	movs	r5, r0
    bf80:	0008      	movs	r0, r1
    bf82:	6023      	str	r3, [r4, #0]
    bf84:	f001 fb52 	bl	d62c <_sbrk>
    bf88:	1c43      	adds	r3, r0, #1
    bf8a:	d103      	bne.n	bf94 <_sbrk_r+0x1c>
    bf8c:	6823      	ldr	r3, [r4, #0]
    bf8e:	2b00      	cmp	r3, #0
    bf90:	d000      	beq.n	bf94 <_sbrk_r+0x1c>
    bf92:	602b      	str	r3, [r5, #0]
    bf94:	bd70      	pop	{r4, r5, r6, pc}
    bf96:	46c0      	nop			; (mov r8, r8)
    bf98:	20000a28 	.word	0x20000a28

0000bf9c <siprintf>:
    bf9c:	b40e      	push	{r1, r2, r3}
    bf9e:	b510      	push	{r4, lr}
    bfa0:	b09d      	sub	sp, #116	; 0x74
    bfa2:	a902      	add	r1, sp, #8
    bfa4:	9002      	str	r0, [sp, #8]
    bfa6:	6108      	str	r0, [r1, #16]
    bfa8:	480b      	ldr	r0, [pc, #44]	; (bfd8 <siprintf+0x3c>)
    bfaa:	2482      	movs	r4, #130	; 0x82
    bfac:	6088      	str	r0, [r1, #8]
    bfae:	6148      	str	r0, [r1, #20]
    bfb0:	2001      	movs	r0, #1
    bfb2:	4240      	negs	r0, r0
    bfb4:	ab1f      	add	r3, sp, #124	; 0x7c
    bfb6:	81c8      	strh	r0, [r1, #14]
    bfb8:	4808      	ldr	r0, [pc, #32]	; (bfdc <siprintf+0x40>)
    bfba:	cb04      	ldmia	r3!, {r2}
    bfbc:	00a4      	lsls	r4, r4, #2
    bfbe:	6800      	ldr	r0, [r0, #0]
    bfc0:	9301      	str	r3, [sp, #4]
    bfc2:	818c      	strh	r4, [r1, #12]
    bfc4:	f001 fa26 	bl	d414 <_svfiprintf_r>
    bfc8:	2300      	movs	r3, #0
    bfca:	9a02      	ldr	r2, [sp, #8]
    bfcc:	7013      	strb	r3, [r2, #0]
    bfce:	b01d      	add	sp, #116	; 0x74
    bfd0:	bc10      	pop	{r4}
    bfd2:	bc08      	pop	{r3}
    bfd4:	b003      	add	sp, #12
    bfd6:	4718      	bx	r3
    bfd8:	7fffffff 	.word	0x7fffffff
    bfdc:	20000090 	.word	0x20000090

0000bfe0 <strcpy>:
    bfe0:	1c03      	adds	r3, r0, #0
    bfe2:	780a      	ldrb	r2, [r1, #0]
    bfe4:	3101      	adds	r1, #1
    bfe6:	701a      	strb	r2, [r3, #0]
    bfe8:	3301      	adds	r3, #1
    bfea:	2a00      	cmp	r2, #0
    bfec:	d1f9      	bne.n	bfe2 <strcpy+0x2>
    bfee:	4770      	bx	lr

0000bff0 <strlen>:
    bff0:	2300      	movs	r3, #0
    bff2:	5cc2      	ldrb	r2, [r0, r3]
    bff4:	3301      	adds	r3, #1
    bff6:	2a00      	cmp	r2, #0
    bff8:	d1fb      	bne.n	bff2 <strlen+0x2>
    bffa:	1e58      	subs	r0, r3, #1
    bffc:	4770      	bx	lr

0000bffe <__ascii_wctomb>:
    bffe:	1e0b      	subs	r3, r1, #0
    c000:	d004      	beq.n	c00c <__ascii_wctomb+0xe>
    c002:	2aff      	cmp	r2, #255	; 0xff
    c004:	d904      	bls.n	c010 <__ascii_wctomb+0x12>
    c006:	238a      	movs	r3, #138	; 0x8a
    c008:	6003      	str	r3, [r0, #0]
    c00a:	3b8b      	subs	r3, #139	; 0x8b
    c00c:	0018      	movs	r0, r3
    c00e:	4770      	bx	lr
    c010:	700a      	strb	r2, [r1, #0]
    c012:	2301      	movs	r3, #1
    c014:	e7fa      	b.n	c00c <__ascii_wctomb+0xe>

0000c016 <quorem>:
    c016:	b5f0      	push	{r4, r5, r6, r7, lr}
    c018:	6903      	ldr	r3, [r0, #16]
    c01a:	690c      	ldr	r4, [r1, #16]
    c01c:	b089      	sub	sp, #36	; 0x24
    c01e:	0007      	movs	r7, r0
    c020:	9105      	str	r1, [sp, #20]
    c022:	2600      	movs	r6, #0
    c024:	429c      	cmp	r4, r3
    c026:	dc6d      	bgt.n	c104 <quorem+0xee>
    c028:	000b      	movs	r3, r1
    c02a:	3c01      	subs	r4, #1
    c02c:	3314      	adds	r3, #20
    c02e:	00a5      	lsls	r5, r4, #2
    c030:	9303      	str	r3, [sp, #12]
    c032:	195b      	adds	r3, r3, r5
    c034:	9304      	str	r3, [sp, #16]
    c036:	0003      	movs	r3, r0
    c038:	3314      	adds	r3, #20
    c03a:	9302      	str	r3, [sp, #8]
    c03c:	195d      	adds	r5, r3, r5
    c03e:	9b04      	ldr	r3, [sp, #16]
    c040:	6828      	ldr	r0, [r5, #0]
    c042:	681b      	ldr	r3, [r3, #0]
    c044:	1c59      	adds	r1, r3, #1
    c046:	9301      	str	r3, [sp, #4]
    c048:	f7fc fa3e 	bl	84c8 <__udivsi3>
    c04c:	9001      	str	r0, [sp, #4]
    c04e:	42b0      	cmp	r0, r6
    c050:	d02d      	beq.n	c0ae <quorem+0x98>
    c052:	9b03      	ldr	r3, [sp, #12]
    c054:	9802      	ldr	r0, [sp, #8]
    c056:	469c      	mov	ip, r3
    c058:	9606      	str	r6, [sp, #24]
    c05a:	4662      	mov	r2, ip
    c05c:	ca08      	ldmia	r2!, {r3}
    c05e:	4694      	mov	ip, r2
    c060:	9a01      	ldr	r2, [sp, #4]
    c062:	b299      	uxth	r1, r3
    c064:	4351      	muls	r1, r2
    c066:	0c1b      	lsrs	r3, r3, #16
    c068:	4353      	muls	r3, r2
    c06a:	1989      	adds	r1, r1, r6
    c06c:	0c0a      	lsrs	r2, r1, #16
    c06e:	189b      	adds	r3, r3, r2
    c070:	9307      	str	r3, [sp, #28]
    c072:	8802      	ldrh	r2, [r0, #0]
    c074:	0c1e      	lsrs	r6, r3, #16
    c076:	9b06      	ldr	r3, [sp, #24]
    c078:	b289      	uxth	r1, r1
    c07a:	18d2      	adds	r2, r2, r3
    c07c:	6803      	ldr	r3, [r0, #0]
    c07e:	1a52      	subs	r2, r2, r1
    c080:	0c19      	lsrs	r1, r3, #16
    c082:	466b      	mov	r3, sp
    c084:	8b9b      	ldrh	r3, [r3, #28]
    c086:	1acb      	subs	r3, r1, r3
    c088:	1411      	asrs	r1, r2, #16
    c08a:	185b      	adds	r3, r3, r1
    c08c:	1419      	asrs	r1, r3, #16
    c08e:	b292      	uxth	r2, r2
    c090:	041b      	lsls	r3, r3, #16
    c092:	431a      	orrs	r2, r3
    c094:	9b04      	ldr	r3, [sp, #16]
    c096:	9106      	str	r1, [sp, #24]
    c098:	c004      	stmia	r0!, {r2}
    c09a:	4563      	cmp	r3, ip
    c09c:	d2dd      	bcs.n	c05a <quorem+0x44>
    c09e:	682b      	ldr	r3, [r5, #0]
    c0a0:	2b00      	cmp	r3, #0
    c0a2:	d104      	bne.n	c0ae <quorem+0x98>
    c0a4:	9b02      	ldr	r3, [sp, #8]
    c0a6:	3d04      	subs	r5, #4
    c0a8:	42ab      	cmp	r3, r5
    c0aa:	d32e      	bcc.n	c10a <quorem+0xf4>
    c0ac:	613c      	str	r4, [r7, #16]
    c0ae:	9905      	ldr	r1, [sp, #20]
    c0b0:	0038      	movs	r0, r7
    c0b2:	f001 f848 	bl	d146 <__mcmp>
    c0b6:	2800      	cmp	r0, #0
    c0b8:	db23      	blt.n	c102 <quorem+0xec>
    c0ba:	2500      	movs	r5, #0
    c0bc:	9b01      	ldr	r3, [sp, #4]
    c0be:	9802      	ldr	r0, [sp, #8]
    c0c0:	3301      	adds	r3, #1
    c0c2:	9903      	ldr	r1, [sp, #12]
    c0c4:	9301      	str	r3, [sp, #4]
    c0c6:	c908      	ldmia	r1!, {r3}
    c0c8:	8802      	ldrh	r2, [r0, #0]
    c0ca:	1955      	adds	r5, r2, r5
    c0cc:	b29a      	uxth	r2, r3
    c0ce:	1aaa      	subs	r2, r5, r2
    c0d0:	6805      	ldr	r5, [r0, #0]
    c0d2:	0c1b      	lsrs	r3, r3, #16
    c0d4:	0c2d      	lsrs	r5, r5, #16
    c0d6:	1aeb      	subs	r3, r5, r3
    c0d8:	1415      	asrs	r5, r2, #16
    c0da:	195b      	adds	r3, r3, r5
    c0dc:	141d      	asrs	r5, r3, #16
    c0de:	b292      	uxth	r2, r2
    c0e0:	041b      	lsls	r3, r3, #16
    c0e2:	4313      	orrs	r3, r2
    c0e4:	c008      	stmia	r0!, {r3}
    c0e6:	9b04      	ldr	r3, [sp, #16]
    c0e8:	428b      	cmp	r3, r1
    c0ea:	d2ec      	bcs.n	c0c6 <quorem+0xb0>
    c0ec:	9a02      	ldr	r2, [sp, #8]
    c0ee:	00a3      	lsls	r3, r4, #2
    c0f0:	18d3      	adds	r3, r2, r3
    c0f2:	681a      	ldr	r2, [r3, #0]
    c0f4:	2a00      	cmp	r2, #0
    c0f6:	d104      	bne.n	c102 <quorem+0xec>
    c0f8:	9a02      	ldr	r2, [sp, #8]
    c0fa:	3b04      	subs	r3, #4
    c0fc:	429a      	cmp	r2, r3
    c0fe:	d309      	bcc.n	c114 <quorem+0xfe>
    c100:	613c      	str	r4, [r7, #16]
    c102:	9e01      	ldr	r6, [sp, #4]
    c104:	0030      	movs	r0, r6
    c106:	b009      	add	sp, #36	; 0x24
    c108:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c10a:	682b      	ldr	r3, [r5, #0]
    c10c:	2b00      	cmp	r3, #0
    c10e:	d1cd      	bne.n	c0ac <quorem+0x96>
    c110:	3c01      	subs	r4, #1
    c112:	e7c7      	b.n	c0a4 <quorem+0x8e>
    c114:	681a      	ldr	r2, [r3, #0]
    c116:	2a00      	cmp	r2, #0
    c118:	d1f2      	bne.n	c100 <quorem+0xea>
    c11a:	3c01      	subs	r4, #1
    c11c:	e7ec      	b.n	c0f8 <quorem+0xe2>
	...

0000c120 <_dtoa_r>:
    c120:	b5f0      	push	{r4, r5, r6, r7, lr}
    c122:	0016      	movs	r6, r2
    c124:	001f      	movs	r7, r3
    c126:	6a44      	ldr	r4, [r0, #36]	; 0x24
    c128:	b09d      	sub	sp, #116	; 0x74
    c12a:	9004      	str	r0, [sp, #16]
    c12c:	9d25      	ldr	r5, [sp, #148]	; 0x94
    c12e:	9606      	str	r6, [sp, #24]
    c130:	9707      	str	r7, [sp, #28]
    c132:	2c00      	cmp	r4, #0
    c134:	d108      	bne.n	c148 <_dtoa_r+0x28>
    c136:	2010      	movs	r0, #16
    c138:	f7ff f9b2 	bl	b4a0 <malloc>
    c13c:	9b04      	ldr	r3, [sp, #16]
    c13e:	6258      	str	r0, [r3, #36]	; 0x24
    c140:	6044      	str	r4, [r0, #4]
    c142:	6084      	str	r4, [r0, #8]
    c144:	6004      	str	r4, [r0, #0]
    c146:	60c4      	str	r4, [r0, #12]
    c148:	9b04      	ldr	r3, [sp, #16]
    c14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c14c:	6819      	ldr	r1, [r3, #0]
    c14e:	2900      	cmp	r1, #0
    c150:	d00b      	beq.n	c16a <_dtoa_r+0x4a>
    c152:	685a      	ldr	r2, [r3, #4]
    c154:	2301      	movs	r3, #1
    c156:	4093      	lsls	r3, r2
    c158:	604a      	str	r2, [r1, #4]
    c15a:	608b      	str	r3, [r1, #8]
    c15c:	9804      	ldr	r0, [sp, #16]
    c15e:	f000 fe18 	bl	cd92 <_Bfree>
    c162:	2200      	movs	r2, #0
    c164:	9b04      	ldr	r3, [sp, #16]
    c166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c168:	601a      	str	r2, [r3, #0]
    c16a:	9b07      	ldr	r3, [sp, #28]
    c16c:	2b00      	cmp	r3, #0
    c16e:	da1f      	bge.n	c1b0 <_dtoa_r+0x90>
    c170:	2301      	movs	r3, #1
    c172:	602b      	str	r3, [r5, #0]
    c174:	007b      	lsls	r3, r7, #1
    c176:	085b      	lsrs	r3, r3, #1
    c178:	9307      	str	r3, [sp, #28]
    c17a:	9c07      	ldr	r4, [sp, #28]
    c17c:	4bb7      	ldr	r3, [pc, #732]	; (c45c <_dtoa_r+0x33c>)
    c17e:	0022      	movs	r2, r4
    c180:	9319      	str	r3, [sp, #100]	; 0x64
    c182:	401a      	ands	r2, r3
    c184:	429a      	cmp	r2, r3
    c186:	d116      	bne.n	c1b6 <_dtoa_r+0x96>
    c188:	4bb5      	ldr	r3, [pc, #724]	; (c460 <_dtoa_r+0x340>)
    c18a:	9a24      	ldr	r2, [sp, #144]	; 0x90
    c18c:	6013      	str	r3, [r2, #0]
    c18e:	9b06      	ldr	r3, [sp, #24]
    c190:	2b00      	cmp	r3, #0
    c192:	d103      	bne.n	c19c <_dtoa_r+0x7c>
    c194:	0324      	lsls	r4, r4, #12
    c196:	d101      	bne.n	c19c <_dtoa_r+0x7c>
    c198:	f000 fd91 	bl	ccbe <_dtoa_r+0xb9e>
    c19c:	4bb1      	ldr	r3, [pc, #708]	; (c464 <_dtoa_r+0x344>)
    c19e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    c1a0:	930a      	str	r3, [sp, #40]	; 0x28
    c1a2:	4bb1      	ldr	r3, [pc, #708]	; (c468 <_dtoa_r+0x348>)
    c1a4:	2a00      	cmp	r2, #0
    c1a6:	d001      	beq.n	c1ac <_dtoa_r+0x8c>
    c1a8:	f000 fd8f 	bl	ccca <_dtoa_r+0xbaa>
    c1ac:	f000 fd8f 	bl	ccce <_dtoa_r+0xbae>
    c1b0:	2300      	movs	r3, #0
    c1b2:	602b      	str	r3, [r5, #0]
    c1b4:	e7e1      	b.n	c17a <_dtoa_r+0x5a>
    c1b6:	9e06      	ldr	r6, [sp, #24]
    c1b8:	9f07      	ldr	r7, [sp, #28]
    c1ba:	2200      	movs	r2, #0
    c1bc:	2300      	movs	r3, #0
    c1be:	0030      	movs	r0, r6
    c1c0:	0039      	movs	r1, r7
    c1c2:	f7fc fb07 	bl	87d4 <__aeabi_dcmpeq>
    c1c6:	1e05      	subs	r5, r0, #0
    c1c8:	d00e      	beq.n	c1e8 <_dtoa_r+0xc8>
    c1ca:	2301      	movs	r3, #1
    c1cc:	9a24      	ldr	r2, [sp, #144]	; 0x90
    c1ce:	6013      	str	r3, [r2, #0]
    c1d0:	4ba6      	ldr	r3, [pc, #664]	; (c46c <_dtoa_r+0x34c>)
    c1d2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    c1d4:	930a      	str	r3, [sp, #40]	; 0x28
    c1d6:	2a00      	cmp	r2, #0
    c1d8:	d101      	bne.n	c1de <_dtoa_r+0xbe>
    c1da:	f000 fd78 	bl	ccce <_dtoa_r+0xbae>
    c1de:	4aa4      	ldr	r2, [pc, #656]	; (c470 <_dtoa_r+0x350>)
    c1e0:	9926      	ldr	r1, [sp, #152]	; 0x98
    c1e2:	600a      	str	r2, [r1, #0]
    c1e4:	f000 fd73 	bl	ccce <_dtoa_r+0xbae>
    c1e8:	ab1a      	add	r3, sp, #104	; 0x68
    c1ea:	9301      	str	r3, [sp, #4]
    c1ec:	ab1b      	add	r3, sp, #108	; 0x6c
    c1ee:	9300      	str	r3, [sp, #0]
    c1f0:	0032      	movs	r2, r6
    c1f2:	003b      	movs	r3, r7
    c1f4:	9804      	ldr	r0, [sp, #16]
    c1f6:	f001 f823 	bl	d240 <__d2b>
    c1fa:	0063      	lsls	r3, r4, #1
    c1fc:	9005      	str	r0, [sp, #20]
    c1fe:	0d5b      	lsrs	r3, r3, #21
    c200:	d100      	bne.n	c204 <_dtoa_r+0xe4>
    c202:	e07f      	b.n	c304 <_dtoa_r+0x1e4>
    c204:	033a      	lsls	r2, r7, #12
    c206:	4c9b      	ldr	r4, [pc, #620]	; (c474 <_dtoa_r+0x354>)
    c208:	0b12      	lsrs	r2, r2, #12
    c20a:	4314      	orrs	r4, r2
    c20c:	0021      	movs	r1, r4
    c20e:	4a9a      	ldr	r2, [pc, #616]	; (c478 <_dtoa_r+0x358>)
    c210:	0030      	movs	r0, r6
    c212:	9518      	str	r5, [sp, #96]	; 0x60
    c214:	189e      	adds	r6, r3, r2
    c216:	2200      	movs	r2, #0
    c218:	4b98      	ldr	r3, [pc, #608]	; (c47c <_dtoa_r+0x35c>)
    c21a:	f7fe fc31 	bl	aa80 <__aeabi_dsub>
    c21e:	4a98      	ldr	r2, [pc, #608]	; (c480 <_dtoa_r+0x360>)
    c220:	4b98      	ldr	r3, [pc, #608]	; (c484 <_dtoa_r+0x364>)
    c222:	f7fe f9ad 	bl	a580 <__aeabi_dmul>
    c226:	4a98      	ldr	r2, [pc, #608]	; (c488 <_dtoa_r+0x368>)
    c228:	4b98      	ldr	r3, [pc, #608]	; (c48c <_dtoa_r+0x36c>)
    c22a:	f7fd fa65 	bl	96f8 <__aeabi_dadd>
    c22e:	0004      	movs	r4, r0
    c230:	0030      	movs	r0, r6
    c232:	000d      	movs	r5, r1
    c234:	f7fe ff8e 	bl	b154 <__aeabi_i2d>
    c238:	4a95      	ldr	r2, [pc, #596]	; (c490 <_dtoa_r+0x370>)
    c23a:	4b96      	ldr	r3, [pc, #600]	; (c494 <_dtoa_r+0x374>)
    c23c:	f7fe f9a0 	bl	a580 <__aeabi_dmul>
    c240:	0002      	movs	r2, r0
    c242:	000b      	movs	r3, r1
    c244:	0020      	movs	r0, r4
    c246:	0029      	movs	r1, r5
    c248:	f7fd fa56 	bl	96f8 <__aeabi_dadd>
    c24c:	0004      	movs	r4, r0
    c24e:	000d      	movs	r5, r1
    c250:	f7fe ff4c 	bl	b0ec <__aeabi_d2iz>
    c254:	2200      	movs	r2, #0
    c256:	9003      	str	r0, [sp, #12]
    c258:	2300      	movs	r3, #0
    c25a:	0020      	movs	r0, r4
    c25c:	0029      	movs	r1, r5
    c25e:	f7fc fabf 	bl	87e0 <__aeabi_dcmplt>
    c262:	2800      	cmp	r0, #0
    c264:	d00e      	beq.n	c284 <_dtoa_r+0x164>
    c266:	9803      	ldr	r0, [sp, #12]
    c268:	f7fe ff74 	bl	b154 <__aeabi_i2d>
    c26c:	000b      	movs	r3, r1
    c26e:	0002      	movs	r2, r0
    c270:	0029      	movs	r1, r5
    c272:	0020      	movs	r0, r4
    c274:	f7fc faae 	bl	87d4 <__aeabi_dcmpeq>
    c278:	0003      	movs	r3, r0
    c27a:	4258      	negs	r0, r3
    c27c:	4158      	adcs	r0, r3
    c27e:	9b03      	ldr	r3, [sp, #12]
    c280:	1a1b      	subs	r3, r3, r0
    c282:	9303      	str	r3, [sp, #12]
    c284:	2301      	movs	r3, #1
    c286:	9316      	str	r3, [sp, #88]	; 0x58
    c288:	9b03      	ldr	r3, [sp, #12]
    c28a:	2b16      	cmp	r3, #22
    c28c:	d80f      	bhi.n	c2ae <_dtoa_r+0x18e>
    c28e:	4982      	ldr	r1, [pc, #520]	; (c498 <_dtoa_r+0x378>)
    c290:	00db      	lsls	r3, r3, #3
    c292:	18c9      	adds	r1, r1, r3
    c294:	6808      	ldr	r0, [r1, #0]
    c296:	6849      	ldr	r1, [r1, #4]
    c298:	9a06      	ldr	r2, [sp, #24]
    c29a:	9b07      	ldr	r3, [sp, #28]
    c29c:	f7fc fab4 	bl	8808 <__aeabi_dcmpgt>
    c2a0:	2800      	cmp	r0, #0
    c2a2:	d04b      	beq.n	c33c <_dtoa_r+0x21c>
    c2a4:	9b03      	ldr	r3, [sp, #12]
    c2a6:	3b01      	subs	r3, #1
    c2a8:	9303      	str	r3, [sp, #12]
    c2aa:	2300      	movs	r3, #0
    c2ac:	9316      	str	r3, [sp, #88]	; 0x58
    c2ae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    c2b0:	1b9e      	subs	r6, r3, r6
    c2b2:	2300      	movs	r3, #0
    c2b4:	930b      	str	r3, [sp, #44]	; 0x2c
    c2b6:	0033      	movs	r3, r6
    c2b8:	3b01      	subs	r3, #1
    c2ba:	930c      	str	r3, [sp, #48]	; 0x30
    c2bc:	d504      	bpl.n	c2c8 <_dtoa_r+0x1a8>
    c2be:	2301      	movs	r3, #1
    c2c0:	1b9b      	subs	r3, r3, r6
    c2c2:	930b      	str	r3, [sp, #44]	; 0x2c
    c2c4:	2300      	movs	r3, #0
    c2c6:	930c      	str	r3, [sp, #48]	; 0x30
    c2c8:	9b03      	ldr	r3, [sp, #12]
    c2ca:	2b00      	cmp	r3, #0
    c2cc:	db38      	blt.n	c340 <_dtoa_r+0x220>
    c2ce:	9a03      	ldr	r2, [sp, #12]
    c2d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c2d2:	4694      	mov	ip, r2
    c2d4:	4463      	add	r3, ip
    c2d6:	930c      	str	r3, [sp, #48]	; 0x30
    c2d8:	2300      	movs	r3, #0
    c2da:	920f      	str	r2, [sp, #60]	; 0x3c
    c2dc:	9308      	str	r3, [sp, #32]
    c2de:	9b22      	ldr	r3, [sp, #136]	; 0x88
    c2e0:	2501      	movs	r5, #1
    c2e2:	2b09      	cmp	r3, #9
    c2e4:	d900      	bls.n	c2e8 <_dtoa_r+0x1c8>
    c2e6:	e091      	b.n	c40c <_dtoa_r+0x2ec>
    c2e8:	2b05      	cmp	r3, #5
    c2ea:	dd02      	ble.n	c2f2 <_dtoa_r+0x1d2>
    c2ec:	2500      	movs	r5, #0
    c2ee:	3b04      	subs	r3, #4
    c2f0:	9322      	str	r3, [sp, #136]	; 0x88
    c2f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    c2f4:	1e98      	subs	r0, r3, #2
    c2f6:	2803      	cmp	r0, #3
    c2f8:	d900      	bls.n	c2fc <_dtoa_r+0x1dc>
    c2fa:	e091      	b.n	c420 <_dtoa_r+0x300>
    c2fc:	f7fc f8d0 	bl	84a0 <__gnu_thumb1_case_uqi>
    c300:	76298482 	.word	0x76298482
    c304:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    c306:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c308:	189e      	adds	r6, r3, r2
    c30a:	4b64      	ldr	r3, [pc, #400]	; (c49c <_dtoa_r+0x37c>)
    c30c:	18f2      	adds	r2, r6, r3
    c30e:	2a20      	cmp	r2, #32
    c310:	dd0f      	ble.n	c332 <_dtoa_r+0x212>
    c312:	4b63      	ldr	r3, [pc, #396]	; (c4a0 <_dtoa_r+0x380>)
    c314:	9806      	ldr	r0, [sp, #24]
    c316:	18f3      	adds	r3, r6, r3
    c318:	40d8      	lsrs	r0, r3
    c31a:	2340      	movs	r3, #64	; 0x40
    c31c:	1a9b      	subs	r3, r3, r2
    c31e:	409c      	lsls	r4, r3
    c320:	4320      	orrs	r0, r4
    c322:	f7fe ff59 	bl	b1d8 <__aeabi_ui2d>
    c326:	2301      	movs	r3, #1
    c328:	4c5e      	ldr	r4, [pc, #376]	; (c4a4 <_dtoa_r+0x384>)
    c32a:	3e01      	subs	r6, #1
    c32c:	1909      	adds	r1, r1, r4
    c32e:	9318      	str	r3, [sp, #96]	; 0x60
    c330:	e771      	b.n	c216 <_dtoa_r+0xf6>
    c332:	2320      	movs	r3, #32
    c334:	9806      	ldr	r0, [sp, #24]
    c336:	1a9b      	subs	r3, r3, r2
    c338:	4098      	lsls	r0, r3
    c33a:	e7f2      	b.n	c322 <_dtoa_r+0x202>
    c33c:	9016      	str	r0, [sp, #88]	; 0x58
    c33e:	e7b6      	b.n	c2ae <_dtoa_r+0x18e>
    c340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c342:	9a03      	ldr	r2, [sp, #12]
    c344:	1a9b      	subs	r3, r3, r2
    c346:	930b      	str	r3, [sp, #44]	; 0x2c
    c348:	4253      	negs	r3, r2
    c34a:	9308      	str	r3, [sp, #32]
    c34c:	2300      	movs	r3, #0
    c34e:	930f      	str	r3, [sp, #60]	; 0x3c
    c350:	e7c5      	b.n	c2de <_dtoa_r+0x1be>
    c352:	2301      	movs	r3, #1
    c354:	930e      	str	r3, [sp, #56]	; 0x38
    c356:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    c358:	2b00      	cmp	r3, #0
    c35a:	dd65      	ble.n	c428 <_dtoa_r+0x308>
    c35c:	001f      	movs	r7, r3
    c35e:	930d      	str	r3, [sp, #52]	; 0x34
    c360:	9a04      	ldr	r2, [sp, #16]
    c362:	6a54      	ldr	r4, [r2, #36]	; 0x24
    c364:	2200      	movs	r2, #0
    c366:	6062      	str	r2, [r4, #4]
    c368:	3204      	adds	r2, #4
    c36a:	0011      	movs	r1, r2
    c36c:	3114      	adds	r1, #20
    c36e:	4299      	cmp	r1, r3
    c370:	d95f      	bls.n	c432 <_dtoa_r+0x312>
    c372:	6861      	ldr	r1, [r4, #4]
    c374:	9804      	ldr	r0, [sp, #16]
    c376:	f000 fcd4 	bl	cd22 <_Balloc>
    c37a:	9b04      	ldr	r3, [sp, #16]
    c37c:	6020      	str	r0, [r4, #0]
    c37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c380:	681b      	ldr	r3, [r3, #0]
    c382:	930a      	str	r3, [sp, #40]	; 0x28
    c384:	2f0e      	cmp	r7, #14
    c386:	d900      	bls.n	c38a <_dtoa_r+0x26a>
    c388:	e105      	b.n	c596 <_dtoa_r+0x476>
    c38a:	2d00      	cmp	r5, #0
    c38c:	d100      	bne.n	c390 <_dtoa_r+0x270>
    c38e:	e102      	b.n	c596 <_dtoa_r+0x476>
    c390:	9b06      	ldr	r3, [sp, #24]
    c392:	9c07      	ldr	r4, [sp, #28]
    c394:	9314      	str	r3, [sp, #80]	; 0x50
    c396:	9415      	str	r4, [sp, #84]	; 0x54
    c398:	9b03      	ldr	r3, [sp, #12]
    c39a:	2b00      	cmp	r3, #0
    c39c:	dc00      	bgt.n	c3a0 <_dtoa_r+0x280>
    c39e:	e085      	b.n	c4ac <_dtoa_r+0x38c>
    c3a0:	001a      	movs	r2, r3
    c3a2:	210f      	movs	r1, #15
    c3a4:	4b3c      	ldr	r3, [pc, #240]	; (c498 <_dtoa_r+0x378>)
    c3a6:	400a      	ands	r2, r1
    c3a8:	00d2      	lsls	r2, r2, #3
    c3aa:	189b      	adds	r3, r3, r2
    c3ac:	685c      	ldr	r4, [r3, #4]
    c3ae:	681b      	ldr	r3, [r3, #0]
    c3b0:	9310      	str	r3, [sp, #64]	; 0x40
    c3b2:	9411      	str	r4, [sp, #68]	; 0x44
    c3b4:	9b03      	ldr	r3, [sp, #12]
    c3b6:	2402      	movs	r4, #2
    c3b8:	111d      	asrs	r5, r3, #4
    c3ba:	06eb      	lsls	r3, r5, #27
    c3bc:	d50a      	bpl.n	c3d4 <_dtoa_r+0x2b4>
    c3be:	4b3a      	ldr	r3, [pc, #232]	; (c4a8 <_dtoa_r+0x388>)
    c3c0:	400d      	ands	r5, r1
    c3c2:	6a1a      	ldr	r2, [r3, #32]
    c3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c3c6:	9814      	ldr	r0, [sp, #80]	; 0x50
    c3c8:	9915      	ldr	r1, [sp, #84]	; 0x54
    c3ca:	f7fd fca5 	bl	9d18 <__aeabi_ddiv>
    c3ce:	9006      	str	r0, [sp, #24]
    c3d0:	9107      	str	r1, [sp, #28]
    c3d2:	3401      	adds	r4, #1
    c3d4:	4e34      	ldr	r6, [pc, #208]	; (c4a8 <_dtoa_r+0x388>)
    c3d6:	2d00      	cmp	r5, #0
    c3d8:	d130      	bne.n	c43c <_dtoa_r+0x31c>
    c3da:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c3dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c3de:	9806      	ldr	r0, [sp, #24]
    c3e0:	9907      	ldr	r1, [sp, #28]
    c3e2:	f7fd fc99 	bl	9d18 <__aeabi_ddiv>
    c3e6:	9006      	str	r0, [sp, #24]
    c3e8:	9107      	str	r1, [sp, #28]
    c3ea:	e07a      	b.n	c4e2 <_dtoa_r+0x3c2>
    c3ec:	2301      	movs	r3, #1
    c3ee:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    c3f0:	930e      	str	r3, [sp, #56]	; 0x38
    c3f2:	4694      	mov	ip, r2
    c3f4:	9b03      	ldr	r3, [sp, #12]
    c3f6:	4463      	add	r3, ip
    c3f8:	1c5f      	adds	r7, r3, #1
    c3fa:	930d      	str	r3, [sp, #52]	; 0x34
    c3fc:	1e3b      	subs	r3, r7, #0
    c3fe:	dcaf      	bgt.n	c360 <_dtoa_r+0x240>
    c400:	2301      	movs	r3, #1
    c402:	e7ad      	b.n	c360 <_dtoa_r+0x240>
    c404:	2300      	movs	r3, #0
    c406:	e7a5      	b.n	c354 <_dtoa_r+0x234>
    c408:	2300      	movs	r3, #0
    c40a:	e7f0      	b.n	c3ee <_dtoa_r+0x2ce>
    c40c:	2300      	movs	r3, #0
    c40e:	950e      	str	r5, [sp, #56]	; 0x38
    c410:	9322      	str	r3, [sp, #136]	; 0x88
    c412:	3b01      	subs	r3, #1
    c414:	2200      	movs	r2, #0
    c416:	930d      	str	r3, [sp, #52]	; 0x34
    c418:	001f      	movs	r7, r3
    c41a:	3313      	adds	r3, #19
    c41c:	9223      	str	r2, [sp, #140]	; 0x8c
    c41e:	e79f      	b.n	c360 <_dtoa_r+0x240>
    c420:	2301      	movs	r3, #1
    c422:	930e      	str	r3, [sp, #56]	; 0x38
    c424:	3b02      	subs	r3, #2
    c426:	e7f5      	b.n	c414 <_dtoa_r+0x2f4>
    c428:	2301      	movs	r3, #1
    c42a:	930d      	str	r3, [sp, #52]	; 0x34
    c42c:	001f      	movs	r7, r3
    c42e:	001a      	movs	r2, r3
    c430:	e7f4      	b.n	c41c <_dtoa_r+0x2fc>
    c432:	6861      	ldr	r1, [r4, #4]
    c434:	0052      	lsls	r2, r2, #1
    c436:	3101      	adds	r1, #1
    c438:	6061      	str	r1, [r4, #4]
    c43a:	e796      	b.n	c36a <_dtoa_r+0x24a>
    c43c:	2301      	movs	r3, #1
    c43e:	421d      	tst	r5, r3
    c440:	d008      	beq.n	c454 <_dtoa_r+0x334>
    c442:	9810      	ldr	r0, [sp, #64]	; 0x40
    c444:	9911      	ldr	r1, [sp, #68]	; 0x44
    c446:	18e4      	adds	r4, r4, r3
    c448:	6832      	ldr	r2, [r6, #0]
    c44a:	6873      	ldr	r3, [r6, #4]
    c44c:	f7fe f898 	bl	a580 <__aeabi_dmul>
    c450:	9010      	str	r0, [sp, #64]	; 0x40
    c452:	9111      	str	r1, [sp, #68]	; 0x44
    c454:	106d      	asrs	r5, r5, #1
    c456:	3608      	adds	r6, #8
    c458:	e7bd      	b.n	c3d6 <_dtoa_r+0x2b6>
    c45a:	46c0      	nop			; (mov r8, r8)
    c45c:	7ff00000 	.word	0x7ff00000
    c460:	0000270f 	.word	0x0000270f
    c464:	0000e210 	.word	0x0000e210
    c468:	0000e213 	.word	0x0000e213
    c46c:	0000e0e2 	.word	0x0000e0e2
    c470:	0000e0e3 	.word	0x0000e0e3
    c474:	3ff00000 	.word	0x3ff00000
    c478:	fffffc01 	.word	0xfffffc01
    c47c:	3ff80000 	.word	0x3ff80000
    c480:	636f4361 	.word	0x636f4361
    c484:	3fd287a7 	.word	0x3fd287a7
    c488:	8b60c8b3 	.word	0x8b60c8b3
    c48c:	3fc68a28 	.word	0x3fc68a28
    c490:	509f79fb 	.word	0x509f79fb
    c494:	3fd34413 	.word	0x3fd34413
    c498:	0000e240 	.word	0x0000e240
    c49c:	00000432 	.word	0x00000432
    c4a0:	00000412 	.word	0x00000412
    c4a4:	fe100000 	.word	0xfe100000
    c4a8:	0000e218 	.word	0x0000e218
    c4ac:	9b03      	ldr	r3, [sp, #12]
    c4ae:	2402      	movs	r4, #2
    c4b0:	2b00      	cmp	r3, #0
    c4b2:	d016      	beq.n	c4e2 <_dtoa_r+0x3c2>
    c4b4:	9814      	ldr	r0, [sp, #80]	; 0x50
    c4b6:	9915      	ldr	r1, [sp, #84]	; 0x54
    c4b8:	425d      	negs	r5, r3
    c4ba:	230f      	movs	r3, #15
    c4bc:	4aca      	ldr	r2, [pc, #808]	; (c7e8 <_dtoa_r+0x6c8>)
    c4be:	402b      	ands	r3, r5
    c4c0:	00db      	lsls	r3, r3, #3
    c4c2:	18d3      	adds	r3, r2, r3
    c4c4:	681a      	ldr	r2, [r3, #0]
    c4c6:	685b      	ldr	r3, [r3, #4]
    c4c8:	f7fe f85a 	bl	a580 <__aeabi_dmul>
    c4cc:	2300      	movs	r3, #0
    c4ce:	9006      	str	r0, [sp, #24]
    c4d0:	9107      	str	r1, [sp, #28]
    c4d2:	4ec6      	ldr	r6, [pc, #792]	; (c7ec <_dtoa_r+0x6cc>)
    c4d4:	112d      	asrs	r5, r5, #4
    c4d6:	2d00      	cmp	r5, #0
    c4d8:	d000      	beq.n	c4dc <_dtoa_r+0x3bc>
    c4da:	e08c      	b.n	c5f6 <_dtoa_r+0x4d6>
    c4dc:	2b00      	cmp	r3, #0
    c4de:	d000      	beq.n	c4e2 <_dtoa_r+0x3c2>
    c4e0:	e781      	b.n	c3e6 <_dtoa_r+0x2c6>
    c4e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c4e4:	2b00      	cmp	r3, #0
    c4e6:	d100      	bne.n	c4ea <_dtoa_r+0x3ca>
    c4e8:	e091      	b.n	c60e <_dtoa_r+0x4ee>
    c4ea:	9a06      	ldr	r2, [sp, #24]
    c4ec:	9b07      	ldr	r3, [sp, #28]
    c4ee:	9210      	str	r2, [sp, #64]	; 0x40
    c4f0:	9311      	str	r3, [sp, #68]	; 0x44
    c4f2:	9810      	ldr	r0, [sp, #64]	; 0x40
    c4f4:	9911      	ldr	r1, [sp, #68]	; 0x44
    c4f6:	2200      	movs	r2, #0
    c4f8:	4bbd      	ldr	r3, [pc, #756]	; (c7f0 <_dtoa_r+0x6d0>)
    c4fa:	f7fc f971 	bl	87e0 <__aeabi_dcmplt>
    c4fe:	2800      	cmp	r0, #0
    c500:	d100      	bne.n	c504 <_dtoa_r+0x3e4>
    c502:	e084      	b.n	c60e <_dtoa_r+0x4ee>
    c504:	2f00      	cmp	r7, #0
    c506:	d100      	bne.n	c50a <_dtoa_r+0x3ea>
    c508:	e081      	b.n	c60e <_dtoa_r+0x4ee>
    c50a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c50c:	2b00      	cmp	r3, #0
    c50e:	dd3e      	ble.n	c58e <_dtoa_r+0x46e>
    c510:	9810      	ldr	r0, [sp, #64]	; 0x40
    c512:	9911      	ldr	r1, [sp, #68]	; 0x44
    c514:	9b03      	ldr	r3, [sp, #12]
    c516:	2200      	movs	r2, #0
    c518:	1e5e      	subs	r6, r3, #1
    c51a:	4bb6      	ldr	r3, [pc, #728]	; (c7f4 <_dtoa_r+0x6d4>)
    c51c:	f7fe f830 	bl	a580 <__aeabi_dmul>
    c520:	9006      	str	r0, [sp, #24]
    c522:	9107      	str	r1, [sp, #28]
    c524:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    c526:	3401      	adds	r4, #1
    c528:	0020      	movs	r0, r4
    c52a:	f7fe fe13 	bl	b154 <__aeabi_i2d>
    c52e:	9a06      	ldr	r2, [sp, #24]
    c530:	9b07      	ldr	r3, [sp, #28]
    c532:	f7fe f825 	bl	a580 <__aeabi_dmul>
    c536:	2200      	movs	r2, #0
    c538:	4baf      	ldr	r3, [pc, #700]	; (c7f8 <_dtoa_r+0x6d8>)
    c53a:	f7fd f8dd 	bl	96f8 <__aeabi_dadd>
    c53e:	9012      	str	r0, [sp, #72]	; 0x48
    c540:	9113      	str	r1, [sp, #76]	; 0x4c
    c542:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c544:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    c546:	4aad      	ldr	r2, [pc, #692]	; (c7fc <_dtoa_r+0x6dc>)
    c548:	9310      	str	r3, [sp, #64]	; 0x40
    c54a:	9411      	str	r4, [sp, #68]	; 0x44
    c54c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c54e:	189c      	adds	r4, r3, r2
    c550:	9411      	str	r4, [sp, #68]	; 0x44
    c552:	2d00      	cmp	r5, #0
    c554:	d15e      	bne.n	c614 <_dtoa_r+0x4f4>
    c556:	9806      	ldr	r0, [sp, #24]
    c558:	9907      	ldr	r1, [sp, #28]
    c55a:	2200      	movs	r2, #0
    c55c:	4ba8      	ldr	r3, [pc, #672]	; (c800 <_dtoa_r+0x6e0>)
    c55e:	f7fe fa8f 	bl	aa80 <__aeabi_dsub>
    c562:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c564:	0023      	movs	r3, r4
    c566:	9006      	str	r0, [sp, #24]
    c568:	9107      	str	r1, [sp, #28]
    c56a:	f7fc f94d 	bl	8808 <__aeabi_dcmpgt>
    c56e:	2800      	cmp	r0, #0
    c570:	d000      	beq.n	c574 <_dtoa_r+0x454>
    c572:	e301      	b.n	cb78 <_dtoa_r+0xa58>
    c574:	48a3      	ldr	r0, [pc, #652]	; (c804 <_dtoa_r+0x6e4>)
    c576:	9913      	ldr	r1, [sp, #76]	; 0x4c
    c578:	4684      	mov	ip, r0
    c57a:	4461      	add	r1, ip
    c57c:	000b      	movs	r3, r1
    c57e:	9806      	ldr	r0, [sp, #24]
    c580:	9907      	ldr	r1, [sp, #28]
    c582:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c584:	f7fc f92c 	bl	87e0 <__aeabi_dcmplt>
    c588:	2800      	cmp	r0, #0
    c58a:	d000      	beq.n	c58e <_dtoa_r+0x46e>
    c58c:	e2e8      	b.n	cb60 <_dtoa_r+0xa40>
    c58e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c590:	9c15      	ldr	r4, [sp, #84]	; 0x54
    c592:	9306      	str	r3, [sp, #24]
    c594:	9407      	str	r4, [sp, #28]
    c596:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c598:	2b00      	cmp	r3, #0
    c59a:	da00      	bge.n	c59e <_dtoa_r+0x47e>
    c59c:	e157      	b.n	c84e <_dtoa_r+0x72e>
    c59e:	9a03      	ldr	r2, [sp, #12]
    c5a0:	2a0e      	cmp	r2, #14
    c5a2:	dd00      	ble.n	c5a6 <_dtoa_r+0x486>
    c5a4:	e153      	b.n	c84e <_dtoa_r+0x72e>
    c5a6:	4b90      	ldr	r3, [pc, #576]	; (c7e8 <_dtoa_r+0x6c8>)
    c5a8:	00d2      	lsls	r2, r2, #3
    c5aa:	189b      	adds	r3, r3, r2
    c5ac:	685c      	ldr	r4, [r3, #4]
    c5ae:	681b      	ldr	r3, [r3, #0]
    c5b0:	9308      	str	r3, [sp, #32]
    c5b2:	9409      	str	r4, [sp, #36]	; 0x24
    c5b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    c5b6:	2b00      	cmp	r3, #0
    c5b8:	db00      	blt.n	c5bc <_dtoa_r+0x49c>
    c5ba:	e0ce      	b.n	c75a <_dtoa_r+0x63a>
    c5bc:	2f00      	cmp	r7, #0
    c5be:	dd00      	ble.n	c5c2 <_dtoa_r+0x4a2>
    c5c0:	e0cb      	b.n	c75a <_dtoa_r+0x63a>
    c5c2:	d000      	beq.n	c5c6 <_dtoa_r+0x4a6>
    c5c4:	e2cf      	b.n	cb66 <_dtoa_r+0xa46>
    c5c6:	9808      	ldr	r0, [sp, #32]
    c5c8:	9909      	ldr	r1, [sp, #36]	; 0x24
    c5ca:	2200      	movs	r2, #0
    c5cc:	4b8c      	ldr	r3, [pc, #560]	; (c800 <_dtoa_r+0x6e0>)
    c5ce:	f7fd ffd7 	bl	a580 <__aeabi_dmul>
    c5d2:	9a06      	ldr	r2, [sp, #24]
    c5d4:	9b07      	ldr	r3, [sp, #28]
    c5d6:	f7fc f921 	bl	881c <__aeabi_dcmpge>
    c5da:	003e      	movs	r6, r7
    c5dc:	9708      	str	r7, [sp, #32]
    c5de:	2800      	cmp	r0, #0
    c5e0:	d000      	beq.n	c5e4 <_dtoa_r+0x4c4>
    c5e2:	e2a4      	b.n	cb2e <_dtoa_r+0xa0e>
    c5e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c5e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c5e8:	1c5d      	adds	r5, r3, #1
    c5ea:	2331      	movs	r3, #49	; 0x31
    c5ec:	7013      	strb	r3, [r2, #0]
    c5ee:	9b03      	ldr	r3, [sp, #12]
    c5f0:	3301      	adds	r3, #1
    c5f2:	9303      	str	r3, [sp, #12]
    c5f4:	e29f      	b.n	cb36 <_dtoa_r+0xa16>
    c5f6:	2201      	movs	r2, #1
    c5f8:	4215      	tst	r5, r2
    c5fa:	d005      	beq.n	c608 <_dtoa_r+0x4e8>
    c5fc:	18a4      	adds	r4, r4, r2
    c5fe:	6832      	ldr	r2, [r6, #0]
    c600:	6873      	ldr	r3, [r6, #4]
    c602:	f7fd ffbd 	bl	a580 <__aeabi_dmul>
    c606:	2301      	movs	r3, #1
    c608:	106d      	asrs	r5, r5, #1
    c60a:	3608      	adds	r6, #8
    c60c:	e763      	b.n	c4d6 <_dtoa_r+0x3b6>
    c60e:	9e03      	ldr	r6, [sp, #12]
    c610:	003d      	movs	r5, r7
    c612:	e789      	b.n	c528 <_dtoa_r+0x408>
    c614:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c616:	1e69      	subs	r1, r5, #1
    c618:	1952      	adds	r2, r2, r5
    c61a:	9217      	str	r2, [sp, #92]	; 0x5c
    c61c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c61e:	4b72      	ldr	r3, [pc, #456]	; (c7e8 <_dtoa_r+0x6c8>)
    c620:	00c9      	lsls	r1, r1, #3
    c622:	2a00      	cmp	r2, #0
    c624:	d04a      	beq.n	c6bc <_dtoa_r+0x59c>
    c626:	185b      	adds	r3, r3, r1
    c628:	681a      	ldr	r2, [r3, #0]
    c62a:	685b      	ldr	r3, [r3, #4]
    c62c:	2000      	movs	r0, #0
    c62e:	4976      	ldr	r1, [pc, #472]	; (c808 <_dtoa_r+0x6e8>)
    c630:	f7fd fb72 	bl	9d18 <__aeabi_ddiv>
    c634:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c636:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c638:	f7fe fa22 	bl	aa80 <__aeabi_dsub>
    c63c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c63e:	9010      	str	r0, [sp, #64]	; 0x40
    c640:	9111      	str	r1, [sp, #68]	; 0x44
    c642:	9312      	str	r3, [sp, #72]	; 0x48
    c644:	9806      	ldr	r0, [sp, #24]
    c646:	9907      	ldr	r1, [sp, #28]
    c648:	f7fe fd50 	bl	b0ec <__aeabi_d2iz>
    c64c:	0004      	movs	r4, r0
    c64e:	f7fe fd81 	bl	b154 <__aeabi_i2d>
    c652:	0002      	movs	r2, r0
    c654:	000b      	movs	r3, r1
    c656:	9806      	ldr	r0, [sp, #24]
    c658:	9907      	ldr	r1, [sp, #28]
    c65a:	f7fe fa11 	bl	aa80 <__aeabi_dsub>
    c65e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c660:	3430      	adds	r4, #48	; 0x30
    c662:	1c5d      	adds	r5, r3, #1
    c664:	701c      	strb	r4, [r3, #0]
    c666:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c668:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c66a:	9006      	str	r0, [sp, #24]
    c66c:	9107      	str	r1, [sp, #28]
    c66e:	f7fc f8b7 	bl	87e0 <__aeabi_dcmplt>
    c672:	2800      	cmp	r0, #0
    c674:	d165      	bne.n	c742 <_dtoa_r+0x622>
    c676:	9a06      	ldr	r2, [sp, #24]
    c678:	9b07      	ldr	r3, [sp, #28]
    c67a:	2000      	movs	r0, #0
    c67c:	495c      	ldr	r1, [pc, #368]	; (c7f0 <_dtoa_r+0x6d0>)
    c67e:	f7fe f9ff 	bl	aa80 <__aeabi_dsub>
    c682:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c684:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c686:	f7fc f8ab 	bl	87e0 <__aeabi_dcmplt>
    c68a:	2800      	cmp	r0, #0
    c68c:	d000      	beq.n	c690 <_dtoa_r+0x570>
    c68e:	e0be      	b.n	c80e <_dtoa_r+0x6ee>
    c690:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c692:	429d      	cmp	r5, r3
    c694:	d100      	bne.n	c698 <_dtoa_r+0x578>
    c696:	e77a      	b.n	c58e <_dtoa_r+0x46e>
    c698:	9810      	ldr	r0, [sp, #64]	; 0x40
    c69a:	9911      	ldr	r1, [sp, #68]	; 0x44
    c69c:	2200      	movs	r2, #0
    c69e:	4b55      	ldr	r3, [pc, #340]	; (c7f4 <_dtoa_r+0x6d4>)
    c6a0:	f7fd ff6e 	bl	a580 <__aeabi_dmul>
    c6a4:	2200      	movs	r2, #0
    c6a6:	9010      	str	r0, [sp, #64]	; 0x40
    c6a8:	9111      	str	r1, [sp, #68]	; 0x44
    c6aa:	9806      	ldr	r0, [sp, #24]
    c6ac:	9907      	ldr	r1, [sp, #28]
    c6ae:	4b51      	ldr	r3, [pc, #324]	; (c7f4 <_dtoa_r+0x6d4>)
    c6b0:	f7fd ff66 	bl	a580 <__aeabi_dmul>
    c6b4:	9512      	str	r5, [sp, #72]	; 0x48
    c6b6:	9006      	str	r0, [sp, #24]
    c6b8:	9107      	str	r1, [sp, #28]
    c6ba:	e7c3      	b.n	c644 <_dtoa_r+0x524>
    c6bc:	1859      	adds	r1, r3, r1
    c6be:	6808      	ldr	r0, [r1, #0]
    c6c0:	6849      	ldr	r1, [r1, #4]
    c6c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c6c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c6c6:	f7fd ff5b 	bl	a580 <__aeabi_dmul>
    c6ca:	9010      	str	r0, [sp, #64]	; 0x40
    c6cc:	9111      	str	r1, [sp, #68]	; 0x44
    c6ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    c6d0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    c6d2:	9806      	ldr	r0, [sp, #24]
    c6d4:	9907      	ldr	r1, [sp, #28]
    c6d6:	f7fe fd09 	bl	b0ec <__aeabi_d2iz>
    c6da:	9012      	str	r0, [sp, #72]	; 0x48
    c6dc:	f7fe fd3a 	bl	b154 <__aeabi_i2d>
    c6e0:	0002      	movs	r2, r0
    c6e2:	000b      	movs	r3, r1
    c6e4:	9806      	ldr	r0, [sp, #24]
    c6e6:	9907      	ldr	r1, [sp, #28]
    c6e8:	f7fe f9ca 	bl	aa80 <__aeabi_dsub>
    c6ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c6ee:	9006      	str	r0, [sp, #24]
    c6f0:	9107      	str	r1, [sp, #28]
    c6f2:	3330      	adds	r3, #48	; 0x30
    c6f4:	7023      	strb	r3, [r4, #0]
    c6f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c6f8:	3401      	adds	r4, #1
    c6fa:	2200      	movs	r2, #0
    c6fc:	42a3      	cmp	r3, r4
    c6fe:	d124      	bne.n	c74a <_dtoa_r+0x62a>
    c700:	4b41      	ldr	r3, [pc, #260]	; (c808 <_dtoa_r+0x6e8>)
    c702:	9810      	ldr	r0, [sp, #64]	; 0x40
    c704:	9911      	ldr	r1, [sp, #68]	; 0x44
    c706:	f7fc fff7 	bl	96f8 <__aeabi_dadd>
    c70a:	0002      	movs	r2, r0
    c70c:	000b      	movs	r3, r1
    c70e:	9806      	ldr	r0, [sp, #24]
    c710:	9907      	ldr	r1, [sp, #28]
    c712:	f7fc f879 	bl	8808 <__aeabi_dcmpgt>
    c716:	2800      	cmp	r0, #0
    c718:	d000      	beq.n	c71c <_dtoa_r+0x5fc>
    c71a:	e078      	b.n	c80e <_dtoa_r+0x6ee>
    c71c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c71e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c720:	2000      	movs	r0, #0
    c722:	4939      	ldr	r1, [pc, #228]	; (c808 <_dtoa_r+0x6e8>)
    c724:	f7fe f9ac 	bl	aa80 <__aeabi_dsub>
    c728:	0002      	movs	r2, r0
    c72a:	000b      	movs	r3, r1
    c72c:	9806      	ldr	r0, [sp, #24]
    c72e:	9907      	ldr	r1, [sp, #28]
    c730:	f7fc f856 	bl	87e0 <__aeabi_dcmplt>
    c734:	2800      	cmp	r0, #0
    c736:	d100      	bne.n	c73a <_dtoa_r+0x61a>
    c738:	e729      	b.n	c58e <_dtoa_r+0x46e>
    c73a:	1e6b      	subs	r3, r5, #1
    c73c:	781a      	ldrb	r2, [r3, #0]
    c73e:	2a30      	cmp	r2, #48	; 0x30
    c740:	d001      	beq.n	c746 <_dtoa_r+0x626>
    c742:	9603      	str	r6, [sp, #12]
    c744:	e03f      	b.n	c7c6 <_dtoa_r+0x6a6>
    c746:	001d      	movs	r5, r3
    c748:	e7f7      	b.n	c73a <_dtoa_r+0x61a>
    c74a:	9806      	ldr	r0, [sp, #24]
    c74c:	9907      	ldr	r1, [sp, #28]
    c74e:	4b29      	ldr	r3, [pc, #164]	; (c7f4 <_dtoa_r+0x6d4>)
    c750:	f7fd ff16 	bl	a580 <__aeabi_dmul>
    c754:	9006      	str	r0, [sp, #24]
    c756:	9107      	str	r1, [sp, #28]
    c758:	e7bb      	b.n	c6d2 <_dtoa_r+0x5b2>
    c75a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    c75c:	9a08      	ldr	r2, [sp, #32]
    c75e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c760:	9806      	ldr	r0, [sp, #24]
    c762:	9907      	ldr	r1, [sp, #28]
    c764:	f7fd fad8 	bl	9d18 <__aeabi_ddiv>
    c768:	f7fe fcc0 	bl	b0ec <__aeabi_d2iz>
    c76c:	0004      	movs	r4, r0
    c76e:	f7fe fcf1 	bl	b154 <__aeabi_i2d>
    c772:	9a08      	ldr	r2, [sp, #32]
    c774:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c776:	f7fd ff03 	bl	a580 <__aeabi_dmul>
    c77a:	000b      	movs	r3, r1
    c77c:	0002      	movs	r2, r0
    c77e:	9806      	ldr	r0, [sp, #24]
    c780:	9907      	ldr	r1, [sp, #28]
    c782:	f7fe f97d 	bl	aa80 <__aeabi_dsub>
    c786:	0023      	movs	r3, r4
    c788:	3330      	adds	r3, #48	; 0x30
    c78a:	7033      	strb	r3, [r6, #0]
    c78c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c78e:	1c75      	adds	r5, r6, #1
    c790:	1aeb      	subs	r3, r5, r3
    c792:	429f      	cmp	r7, r3
    c794:	d14c      	bne.n	c830 <_dtoa_r+0x710>
    c796:	0002      	movs	r2, r0
    c798:	000b      	movs	r3, r1
    c79a:	f7fc ffad 	bl	96f8 <__aeabi_dadd>
    c79e:	0006      	movs	r6, r0
    c7a0:	000f      	movs	r7, r1
    c7a2:	0002      	movs	r2, r0
    c7a4:	000b      	movs	r3, r1
    c7a6:	9808      	ldr	r0, [sp, #32]
    c7a8:	9909      	ldr	r1, [sp, #36]	; 0x24
    c7aa:	f7fc f819 	bl	87e0 <__aeabi_dcmplt>
    c7ae:	2800      	cmp	r0, #0
    c7b0:	d12c      	bne.n	c80c <_dtoa_r+0x6ec>
    c7b2:	9808      	ldr	r0, [sp, #32]
    c7b4:	9909      	ldr	r1, [sp, #36]	; 0x24
    c7b6:	0032      	movs	r2, r6
    c7b8:	003b      	movs	r3, r7
    c7ba:	f7fc f80b 	bl	87d4 <__aeabi_dcmpeq>
    c7be:	2800      	cmp	r0, #0
    c7c0:	d001      	beq.n	c7c6 <_dtoa_r+0x6a6>
    c7c2:	07e3      	lsls	r3, r4, #31
    c7c4:	d422      	bmi.n	c80c <_dtoa_r+0x6ec>
    c7c6:	9905      	ldr	r1, [sp, #20]
    c7c8:	9804      	ldr	r0, [sp, #16]
    c7ca:	f000 fae2 	bl	cd92 <_Bfree>
    c7ce:	2300      	movs	r3, #0
    c7d0:	702b      	strb	r3, [r5, #0]
    c7d2:	9b03      	ldr	r3, [sp, #12]
    c7d4:	9a24      	ldr	r2, [sp, #144]	; 0x90
    c7d6:	3301      	adds	r3, #1
    c7d8:	6013      	str	r3, [r2, #0]
    c7da:	9b26      	ldr	r3, [sp, #152]	; 0x98
    c7dc:	2b00      	cmp	r3, #0
    c7de:	d100      	bne.n	c7e2 <_dtoa_r+0x6c2>
    c7e0:	e275      	b.n	ccce <_dtoa_r+0xbae>
    c7e2:	601d      	str	r5, [r3, #0]
    c7e4:	e273      	b.n	ccce <_dtoa_r+0xbae>
    c7e6:	46c0      	nop			; (mov r8, r8)
    c7e8:	0000e240 	.word	0x0000e240
    c7ec:	0000e218 	.word	0x0000e218
    c7f0:	3ff00000 	.word	0x3ff00000
    c7f4:	40240000 	.word	0x40240000
    c7f8:	401c0000 	.word	0x401c0000
    c7fc:	fcc00000 	.word	0xfcc00000
    c800:	40140000 	.word	0x40140000
    c804:	7cc00000 	.word	0x7cc00000
    c808:	3fe00000 	.word	0x3fe00000
    c80c:	9e03      	ldr	r6, [sp, #12]
    c80e:	1e6b      	subs	r3, r5, #1
    c810:	781a      	ldrb	r2, [r3, #0]
    c812:	2a39      	cmp	r2, #57	; 0x39
    c814:	d106      	bne.n	c824 <_dtoa_r+0x704>
    c816:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c818:	429a      	cmp	r2, r3
    c81a:	d107      	bne.n	c82c <_dtoa_r+0x70c>
    c81c:	2330      	movs	r3, #48	; 0x30
    c81e:	7013      	strb	r3, [r2, #0]
    c820:	0013      	movs	r3, r2
    c822:	3601      	adds	r6, #1
    c824:	781a      	ldrb	r2, [r3, #0]
    c826:	3201      	adds	r2, #1
    c828:	701a      	strb	r2, [r3, #0]
    c82a:	e78a      	b.n	c742 <_dtoa_r+0x622>
    c82c:	001d      	movs	r5, r3
    c82e:	e7ee      	b.n	c80e <_dtoa_r+0x6ee>
    c830:	2200      	movs	r2, #0
    c832:	4bcf      	ldr	r3, [pc, #828]	; (cb70 <_dtoa_r+0xa50>)
    c834:	f7fd fea4 	bl	a580 <__aeabi_dmul>
    c838:	2200      	movs	r2, #0
    c83a:	2300      	movs	r3, #0
    c83c:	9006      	str	r0, [sp, #24]
    c83e:	9107      	str	r1, [sp, #28]
    c840:	002e      	movs	r6, r5
    c842:	f7fb ffc7 	bl	87d4 <__aeabi_dcmpeq>
    c846:	2800      	cmp	r0, #0
    c848:	d100      	bne.n	c84c <_dtoa_r+0x72c>
    c84a:	e787      	b.n	c75c <_dtoa_r+0x63c>
    c84c:	e7bb      	b.n	c7c6 <_dtoa_r+0x6a6>
    c84e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c850:	2a00      	cmp	r2, #0
    c852:	d100      	bne.n	c856 <_dtoa_r+0x736>
    c854:	e087      	b.n	c966 <_dtoa_r+0x846>
    c856:	9a22      	ldr	r2, [sp, #136]	; 0x88
    c858:	2a01      	cmp	r2, #1
    c85a:	dc6e      	bgt.n	c93a <_dtoa_r+0x81a>
    c85c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c85e:	2a00      	cmp	r2, #0
    c860:	d067      	beq.n	c932 <_dtoa_r+0x812>
    c862:	4ac4      	ldr	r2, [pc, #784]	; (cb74 <_dtoa_r+0xa54>)
    c864:	189b      	adds	r3, r3, r2
    c866:	9d08      	ldr	r5, [sp, #32]
    c868:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    c86a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c86c:	2101      	movs	r1, #1
    c86e:	18d2      	adds	r2, r2, r3
    c870:	920b      	str	r2, [sp, #44]	; 0x2c
    c872:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c874:	9804      	ldr	r0, [sp, #16]
    c876:	18d3      	adds	r3, r2, r3
    c878:	930c      	str	r3, [sp, #48]	; 0x30
    c87a:	f000 fb28 	bl	cece <__i2b>
    c87e:	0006      	movs	r6, r0
    c880:	2c00      	cmp	r4, #0
    c882:	dd0e      	ble.n	c8a2 <_dtoa_r+0x782>
    c884:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c886:	2b00      	cmp	r3, #0
    c888:	dd0b      	ble.n	c8a2 <_dtoa_r+0x782>
    c88a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c88c:	0023      	movs	r3, r4
    c88e:	4294      	cmp	r4, r2
    c890:	dd00      	ble.n	c894 <_dtoa_r+0x774>
    c892:	0013      	movs	r3, r2
    c894:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c896:	1ae4      	subs	r4, r4, r3
    c898:	1ad2      	subs	r2, r2, r3
    c89a:	920b      	str	r2, [sp, #44]	; 0x2c
    c89c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c89e:	1ad3      	subs	r3, r2, r3
    c8a0:	930c      	str	r3, [sp, #48]	; 0x30
    c8a2:	9b08      	ldr	r3, [sp, #32]
    c8a4:	2b00      	cmp	r3, #0
    c8a6:	d01e      	beq.n	c8e6 <_dtoa_r+0x7c6>
    c8a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c8aa:	2b00      	cmp	r3, #0
    c8ac:	d05f      	beq.n	c96e <_dtoa_r+0x84e>
    c8ae:	2d00      	cmp	r5, #0
    c8b0:	dd11      	ble.n	c8d6 <_dtoa_r+0x7b6>
    c8b2:	0031      	movs	r1, r6
    c8b4:	002a      	movs	r2, r5
    c8b6:	9804      	ldr	r0, [sp, #16]
    c8b8:	f000 fba2 	bl	d000 <__pow5mult>
    c8bc:	9a05      	ldr	r2, [sp, #20]
    c8be:	0001      	movs	r1, r0
    c8c0:	0006      	movs	r6, r0
    c8c2:	9804      	ldr	r0, [sp, #16]
    c8c4:	f000 fb0c 	bl	cee0 <__multiply>
    c8c8:	9905      	ldr	r1, [sp, #20]
    c8ca:	9010      	str	r0, [sp, #64]	; 0x40
    c8cc:	9804      	ldr	r0, [sp, #16]
    c8ce:	f000 fa60 	bl	cd92 <_Bfree>
    c8d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c8d4:	9305      	str	r3, [sp, #20]
    c8d6:	9b08      	ldr	r3, [sp, #32]
    c8d8:	1b5a      	subs	r2, r3, r5
    c8da:	d004      	beq.n	c8e6 <_dtoa_r+0x7c6>
    c8dc:	9905      	ldr	r1, [sp, #20]
    c8de:	9804      	ldr	r0, [sp, #16]
    c8e0:	f000 fb8e 	bl	d000 <__pow5mult>
    c8e4:	9005      	str	r0, [sp, #20]
    c8e6:	2101      	movs	r1, #1
    c8e8:	9804      	ldr	r0, [sp, #16]
    c8ea:	f000 faf0 	bl	cece <__i2b>
    c8ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c8f0:	9008      	str	r0, [sp, #32]
    c8f2:	2b00      	cmp	r3, #0
    c8f4:	dd3d      	ble.n	c972 <_dtoa_r+0x852>
    c8f6:	001a      	movs	r2, r3
    c8f8:	0001      	movs	r1, r0
    c8fa:	9804      	ldr	r0, [sp, #16]
    c8fc:	f000 fb80 	bl	d000 <__pow5mult>
    c900:	9b22      	ldr	r3, [sp, #136]	; 0x88
    c902:	9008      	str	r0, [sp, #32]
    c904:	2500      	movs	r5, #0
    c906:	2b01      	cmp	r3, #1
    c908:	dc3b      	bgt.n	c982 <_dtoa_r+0x862>
    c90a:	2500      	movs	r5, #0
    c90c:	9b06      	ldr	r3, [sp, #24]
    c90e:	42ab      	cmp	r3, r5
    c910:	d133      	bne.n	c97a <_dtoa_r+0x85a>
    c912:	9b07      	ldr	r3, [sp, #28]
    c914:	031b      	lsls	r3, r3, #12
    c916:	42ab      	cmp	r3, r5
    c918:	d12f      	bne.n	c97a <_dtoa_r+0x85a>
    c91a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c91c:	9a07      	ldr	r2, [sp, #28]
    c91e:	4213      	tst	r3, r2
    c920:	d02b      	beq.n	c97a <_dtoa_r+0x85a>
    c922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c924:	3501      	adds	r5, #1
    c926:	3301      	adds	r3, #1
    c928:	930b      	str	r3, [sp, #44]	; 0x2c
    c92a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c92c:	3301      	adds	r3, #1
    c92e:	930c      	str	r3, [sp, #48]	; 0x30
    c930:	e023      	b.n	c97a <_dtoa_r+0x85a>
    c932:	2336      	movs	r3, #54	; 0x36
    c934:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    c936:	1a9b      	subs	r3, r3, r2
    c938:	e795      	b.n	c866 <_dtoa_r+0x746>
    c93a:	9b08      	ldr	r3, [sp, #32]
    c93c:	1e7d      	subs	r5, r7, #1
    c93e:	42ab      	cmp	r3, r5
    c940:	db06      	blt.n	c950 <_dtoa_r+0x830>
    c942:	1b5d      	subs	r5, r3, r5
    c944:	2f00      	cmp	r7, #0
    c946:	da0b      	bge.n	c960 <_dtoa_r+0x840>
    c948:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c94a:	1bdc      	subs	r4, r3, r7
    c94c:	2300      	movs	r3, #0
    c94e:	e78c      	b.n	c86a <_dtoa_r+0x74a>
    c950:	9b08      	ldr	r3, [sp, #32]
    c952:	9508      	str	r5, [sp, #32]
    c954:	1aea      	subs	r2, r5, r3
    c956:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c958:	2500      	movs	r5, #0
    c95a:	189b      	adds	r3, r3, r2
    c95c:	930f      	str	r3, [sp, #60]	; 0x3c
    c95e:	e7f1      	b.n	c944 <_dtoa_r+0x824>
    c960:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    c962:	003b      	movs	r3, r7
    c964:	e781      	b.n	c86a <_dtoa_r+0x74a>
    c966:	9d08      	ldr	r5, [sp, #32]
    c968:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    c96a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    c96c:	e788      	b.n	c880 <_dtoa_r+0x760>
    c96e:	9a08      	ldr	r2, [sp, #32]
    c970:	e7b4      	b.n	c8dc <_dtoa_r+0x7bc>
    c972:	9b22      	ldr	r3, [sp, #136]	; 0x88
    c974:	2500      	movs	r5, #0
    c976:	2b01      	cmp	r3, #1
    c978:	ddc7      	ble.n	c90a <_dtoa_r+0x7ea>
    c97a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c97c:	2001      	movs	r0, #1
    c97e:	2b00      	cmp	r3, #0
    c980:	d00b      	beq.n	c99a <_dtoa_r+0x87a>
    c982:	9b08      	ldr	r3, [sp, #32]
    c984:	9a08      	ldr	r2, [sp, #32]
    c986:	691b      	ldr	r3, [r3, #16]
    c988:	930f      	str	r3, [sp, #60]	; 0x3c
    c98a:	3303      	adds	r3, #3
    c98c:	009b      	lsls	r3, r3, #2
    c98e:	18d3      	adds	r3, r2, r3
    c990:	6858      	ldr	r0, [r3, #4]
    c992:	f000 fa53 	bl	ce3c <__hi0bits>
    c996:	2320      	movs	r3, #32
    c998:	1a18      	subs	r0, r3, r0
    c99a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c99c:	18c0      	adds	r0, r0, r3
    c99e:	231f      	movs	r3, #31
    c9a0:	4018      	ands	r0, r3
    c9a2:	d100      	bne.n	c9a6 <_dtoa_r+0x886>
    c9a4:	e0ab      	b.n	cafe <_dtoa_r+0x9de>
    c9a6:	3301      	adds	r3, #1
    c9a8:	1a1b      	subs	r3, r3, r0
    c9aa:	2b04      	cmp	r3, #4
    c9ac:	dc00      	bgt.n	c9b0 <_dtoa_r+0x890>
    c9ae:	e09b      	b.n	cae8 <_dtoa_r+0x9c8>
    c9b0:	231c      	movs	r3, #28
    c9b2:	1a18      	subs	r0, r3, r0
    c9b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c9b6:	1824      	adds	r4, r4, r0
    c9b8:	181b      	adds	r3, r3, r0
    c9ba:	930b      	str	r3, [sp, #44]	; 0x2c
    c9bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c9be:	181b      	adds	r3, r3, r0
    c9c0:	930c      	str	r3, [sp, #48]	; 0x30
    c9c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c9c4:	2b00      	cmp	r3, #0
    c9c6:	dd05      	ble.n	c9d4 <_dtoa_r+0x8b4>
    c9c8:	001a      	movs	r2, r3
    c9ca:	9905      	ldr	r1, [sp, #20]
    c9cc:	9804      	ldr	r0, [sp, #16]
    c9ce:	f000 fb69 	bl	d0a4 <__lshift>
    c9d2:	9005      	str	r0, [sp, #20]
    c9d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c9d6:	2b00      	cmp	r3, #0
    c9d8:	dd05      	ble.n	c9e6 <_dtoa_r+0x8c6>
    c9da:	001a      	movs	r2, r3
    c9dc:	9908      	ldr	r1, [sp, #32]
    c9de:	9804      	ldr	r0, [sp, #16]
    c9e0:	f000 fb60 	bl	d0a4 <__lshift>
    c9e4:	9008      	str	r0, [sp, #32]
    c9e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c9e8:	2b00      	cmp	r3, #0
    c9ea:	d100      	bne.n	c9ee <_dtoa_r+0x8ce>
    c9ec:	e089      	b.n	cb02 <_dtoa_r+0x9e2>
    c9ee:	9908      	ldr	r1, [sp, #32]
    c9f0:	9805      	ldr	r0, [sp, #20]
    c9f2:	f000 fba8 	bl	d146 <__mcmp>
    c9f6:	2800      	cmp	r0, #0
    c9f8:	db00      	blt.n	c9fc <_dtoa_r+0x8dc>
    c9fa:	e082      	b.n	cb02 <_dtoa_r+0x9e2>
    c9fc:	9b03      	ldr	r3, [sp, #12]
    c9fe:	220a      	movs	r2, #10
    ca00:	3b01      	subs	r3, #1
    ca02:	9303      	str	r3, [sp, #12]
    ca04:	9905      	ldr	r1, [sp, #20]
    ca06:	2300      	movs	r3, #0
    ca08:	9804      	ldr	r0, [sp, #16]
    ca0a:	f000 f9db 	bl	cdc4 <__multadd>
    ca0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ca10:	9005      	str	r0, [sp, #20]
    ca12:	2b00      	cmp	r3, #0
    ca14:	d100      	bne.n	ca18 <_dtoa_r+0x8f8>
    ca16:	e15d      	b.n	ccd4 <_dtoa_r+0xbb4>
    ca18:	2300      	movs	r3, #0
    ca1a:	0031      	movs	r1, r6
    ca1c:	220a      	movs	r2, #10
    ca1e:	9804      	ldr	r0, [sp, #16]
    ca20:	f000 f9d0 	bl	cdc4 <__multadd>
    ca24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ca26:	0006      	movs	r6, r0
    ca28:	2b00      	cmp	r3, #0
    ca2a:	dc02      	bgt.n	ca32 <_dtoa_r+0x912>
    ca2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ca2e:	2b02      	cmp	r3, #2
    ca30:	dc6d      	bgt.n	cb0e <_dtoa_r+0x9ee>
    ca32:	2c00      	cmp	r4, #0
    ca34:	dd05      	ble.n	ca42 <_dtoa_r+0x922>
    ca36:	0031      	movs	r1, r6
    ca38:	0022      	movs	r2, r4
    ca3a:	9804      	ldr	r0, [sp, #16]
    ca3c:	f000 fb32 	bl	d0a4 <__lshift>
    ca40:	0006      	movs	r6, r0
    ca42:	0030      	movs	r0, r6
    ca44:	2d00      	cmp	r5, #0
    ca46:	d011      	beq.n	ca6c <_dtoa_r+0x94c>
    ca48:	6871      	ldr	r1, [r6, #4]
    ca4a:	9804      	ldr	r0, [sp, #16]
    ca4c:	f000 f969 	bl	cd22 <_Balloc>
    ca50:	0031      	movs	r1, r6
    ca52:	0004      	movs	r4, r0
    ca54:	6933      	ldr	r3, [r6, #16]
    ca56:	310c      	adds	r1, #12
    ca58:	1c9a      	adds	r2, r3, #2
    ca5a:	0092      	lsls	r2, r2, #2
    ca5c:	300c      	adds	r0, #12
    ca5e:	f7fe fd45 	bl	b4ec <memcpy>
    ca62:	2201      	movs	r2, #1
    ca64:	0021      	movs	r1, r4
    ca66:	9804      	ldr	r0, [sp, #16]
    ca68:	f000 fb1c 	bl	d0a4 <__lshift>
    ca6c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    ca6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ca70:	3f01      	subs	r7, #1
    ca72:	930b      	str	r3, [sp, #44]	; 0x2c
    ca74:	19db      	adds	r3, r3, r7
    ca76:	0037      	movs	r7, r6
    ca78:	0006      	movs	r6, r0
    ca7a:	930f      	str	r3, [sp, #60]	; 0x3c
    ca7c:	9908      	ldr	r1, [sp, #32]
    ca7e:	9805      	ldr	r0, [sp, #20]
    ca80:	f7ff fac9 	bl	c016 <quorem>
    ca84:	0039      	movs	r1, r7
    ca86:	900d      	str	r0, [sp, #52]	; 0x34
    ca88:	0004      	movs	r4, r0
    ca8a:	9805      	ldr	r0, [sp, #20]
    ca8c:	f000 fb5b 	bl	d146 <__mcmp>
    ca90:	0032      	movs	r2, r6
    ca92:	900e      	str	r0, [sp, #56]	; 0x38
    ca94:	9908      	ldr	r1, [sp, #32]
    ca96:	9804      	ldr	r0, [sp, #16]
    ca98:	f000 fb6e 	bl	d178 <__mdiff>
    ca9c:	2301      	movs	r3, #1
    ca9e:	930c      	str	r3, [sp, #48]	; 0x30
    caa0:	68c3      	ldr	r3, [r0, #12]
    caa2:	3430      	adds	r4, #48	; 0x30
    caa4:	0005      	movs	r5, r0
    caa6:	2b00      	cmp	r3, #0
    caa8:	d104      	bne.n	cab4 <_dtoa_r+0x994>
    caaa:	0001      	movs	r1, r0
    caac:	9805      	ldr	r0, [sp, #20]
    caae:	f000 fb4a 	bl	d146 <__mcmp>
    cab2:	900c      	str	r0, [sp, #48]	; 0x30
    cab4:	0029      	movs	r1, r5
    cab6:	9804      	ldr	r0, [sp, #16]
    cab8:	f000 f96b 	bl	cd92 <_Bfree>
    cabc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cabe:	9a22      	ldr	r2, [sp, #136]	; 0x88
    cac0:	4313      	orrs	r3, r2
    cac2:	d000      	beq.n	cac6 <_dtoa_r+0x9a6>
    cac4:	e089      	b.n	cbda <_dtoa_r+0xaba>
    cac6:	9a06      	ldr	r2, [sp, #24]
    cac8:	3301      	adds	r3, #1
    caca:	4213      	tst	r3, r2
    cacc:	d000      	beq.n	cad0 <_dtoa_r+0x9b0>
    cace:	e084      	b.n	cbda <_dtoa_r+0xaba>
    cad0:	2c39      	cmp	r4, #57	; 0x39
    cad2:	d100      	bne.n	cad6 <_dtoa_r+0x9b6>
    cad4:	e0a3      	b.n	cc1e <_dtoa_r+0xafe>
    cad6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cad8:	2b00      	cmp	r3, #0
    cada:	dd01      	ble.n	cae0 <_dtoa_r+0x9c0>
    cadc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    cade:	3431      	adds	r4, #49	; 0x31
    cae0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cae2:	1c5d      	adds	r5, r3, #1
    cae4:	701c      	strb	r4, [r3, #0]
    cae6:	e027      	b.n	cb38 <_dtoa_r+0xa18>
    cae8:	2b04      	cmp	r3, #4
    caea:	d100      	bne.n	caee <_dtoa_r+0x9ce>
    caec:	e769      	b.n	c9c2 <_dtoa_r+0x8a2>
    caee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    caf0:	331c      	adds	r3, #28
    caf2:	18d2      	adds	r2, r2, r3
    caf4:	920b      	str	r2, [sp, #44]	; 0x2c
    caf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    caf8:	18e4      	adds	r4, r4, r3
    cafa:	18d3      	adds	r3, r2, r3
    cafc:	e760      	b.n	c9c0 <_dtoa_r+0x8a0>
    cafe:	0003      	movs	r3, r0
    cb00:	e7f5      	b.n	caee <_dtoa_r+0x9ce>
    cb02:	2f00      	cmp	r7, #0
    cb04:	dc3c      	bgt.n	cb80 <_dtoa_r+0xa60>
    cb06:	9b22      	ldr	r3, [sp, #136]	; 0x88
    cb08:	2b02      	cmp	r3, #2
    cb0a:	dd39      	ble.n	cb80 <_dtoa_r+0xa60>
    cb0c:	970d      	str	r7, [sp, #52]	; 0x34
    cb0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cb10:	2b00      	cmp	r3, #0
    cb12:	d10c      	bne.n	cb2e <_dtoa_r+0xa0e>
    cb14:	9908      	ldr	r1, [sp, #32]
    cb16:	2205      	movs	r2, #5
    cb18:	9804      	ldr	r0, [sp, #16]
    cb1a:	f000 f953 	bl	cdc4 <__multadd>
    cb1e:	9008      	str	r0, [sp, #32]
    cb20:	0001      	movs	r1, r0
    cb22:	9805      	ldr	r0, [sp, #20]
    cb24:	f000 fb0f 	bl	d146 <__mcmp>
    cb28:	2800      	cmp	r0, #0
    cb2a:	dd00      	ble.n	cb2e <_dtoa_r+0xa0e>
    cb2c:	e55a      	b.n	c5e4 <_dtoa_r+0x4c4>
    cb2e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    cb30:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    cb32:	43db      	mvns	r3, r3
    cb34:	9303      	str	r3, [sp, #12]
    cb36:	2700      	movs	r7, #0
    cb38:	9908      	ldr	r1, [sp, #32]
    cb3a:	9804      	ldr	r0, [sp, #16]
    cb3c:	f000 f929 	bl	cd92 <_Bfree>
    cb40:	2e00      	cmp	r6, #0
    cb42:	d100      	bne.n	cb46 <_dtoa_r+0xa26>
    cb44:	e63f      	b.n	c7c6 <_dtoa_r+0x6a6>
    cb46:	2f00      	cmp	r7, #0
    cb48:	d005      	beq.n	cb56 <_dtoa_r+0xa36>
    cb4a:	42b7      	cmp	r7, r6
    cb4c:	d003      	beq.n	cb56 <_dtoa_r+0xa36>
    cb4e:	0039      	movs	r1, r7
    cb50:	9804      	ldr	r0, [sp, #16]
    cb52:	f000 f91e 	bl	cd92 <_Bfree>
    cb56:	0031      	movs	r1, r6
    cb58:	9804      	ldr	r0, [sp, #16]
    cb5a:	f000 f91a 	bl	cd92 <_Bfree>
    cb5e:	e632      	b.n	c7c6 <_dtoa_r+0x6a6>
    cb60:	9508      	str	r5, [sp, #32]
    cb62:	002e      	movs	r6, r5
    cb64:	e7e3      	b.n	cb2e <_dtoa_r+0xa0e>
    cb66:	2300      	movs	r3, #0
    cb68:	9308      	str	r3, [sp, #32]
    cb6a:	001e      	movs	r6, r3
    cb6c:	e7df      	b.n	cb2e <_dtoa_r+0xa0e>
    cb6e:	46c0      	nop			; (mov r8, r8)
    cb70:	40240000 	.word	0x40240000
    cb74:	00000433 	.word	0x00000433
    cb78:	9603      	str	r6, [sp, #12]
    cb7a:	9508      	str	r5, [sp, #32]
    cb7c:	002e      	movs	r6, r5
    cb7e:	e531      	b.n	c5e4 <_dtoa_r+0x4c4>
    cb80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cb82:	970d      	str	r7, [sp, #52]	; 0x34
    cb84:	2b00      	cmp	r3, #0
    cb86:	d000      	beq.n	cb8a <_dtoa_r+0xa6a>
    cb88:	e753      	b.n	ca32 <_dtoa_r+0x912>
    cb8a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    cb8c:	9908      	ldr	r1, [sp, #32]
    cb8e:	9805      	ldr	r0, [sp, #20]
    cb90:	f7ff fa41 	bl	c016 <quorem>
    cb94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cb96:	3030      	adds	r0, #48	; 0x30
    cb98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    cb9a:	7028      	strb	r0, [r5, #0]
    cb9c:	3501      	adds	r5, #1
    cb9e:	0004      	movs	r4, r0
    cba0:	1aeb      	subs	r3, r5, r3
    cba2:	429a      	cmp	r2, r3
    cba4:	dc78      	bgt.n	cc98 <_dtoa_r+0xb78>
    cba6:	1e15      	subs	r5, r2, #0
    cba8:	dc00      	bgt.n	cbac <_dtoa_r+0xa8c>
    cbaa:	2501      	movs	r5, #1
    cbac:	2700      	movs	r7, #0
    cbae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cbb0:	195d      	adds	r5, r3, r5
    cbb2:	9905      	ldr	r1, [sp, #20]
    cbb4:	2201      	movs	r2, #1
    cbb6:	9804      	ldr	r0, [sp, #16]
    cbb8:	f000 fa74 	bl	d0a4 <__lshift>
    cbbc:	9908      	ldr	r1, [sp, #32]
    cbbe:	9005      	str	r0, [sp, #20]
    cbc0:	f000 fac1 	bl	d146 <__mcmp>
    cbc4:	2800      	cmp	r0, #0
    cbc6:	dc2f      	bgt.n	cc28 <_dtoa_r+0xb08>
    cbc8:	d101      	bne.n	cbce <_dtoa_r+0xaae>
    cbca:	07e3      	lsls	r3, r4, #31
    cbcc:	d42c      	bmi.n	cc28 <_dtoa_r+0xb08>
    cbce:	1e6b      	subs	r3, r5, #1
    cbd0:	781a      	ldrb	r2, [r3, #0]
    cbd2:	2a30      	cmp	r2, #48	; 0x30
    cbd4:	d1b0      	bne.n	cb38 <_dtoa_r+0xa18>
    cbd6:	001d      	movs	r5, r3
    cbd8:	e7f9      	b.n	cbce <_dtoa_r+0xaae>
    cbda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cbdc:	2b00      	cmp	r3, #0
    cbde:	db07      	blt.n	cbf0 <_dtoa_r+0xad0>
    cbe0:	001d      	movs	r5, r3
    cbe2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    cbe4:	431d      	orrs	r5, r3
    cbe6:	d126      	bne.n	cc36 <_dtoa_r+0xb16>
    cbe8:	2301      	movs	r3, #1
    cbea:	9a06      	ldr	r2, [sp, #24]
    cbec:	4213      	tst	r3, r2
    cbee:	d122      	bne.n	cc36 <_dtoa_r+0xb16>
    cbf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cbf2:	2b00      	cmp	r3, #0
    cbf4:	dc00      	bgt.n	cbf8 <_dtoa_r+0xad8>
    cbf6:	e773      	b.n	cae0 <_dtoa_r+0x9c0>
    cbf8:	9905      	ldr	r1, [sp, #20]
    cbfa:	2201      	movs	r2, #1
    cbfc:	9804      	ldr	r0, [sp, #16]
    cbfe:	f000 fa51 	bl	d0a4 <__lshift>
    cc02:	9908      	ldr	r1, [sp, #32]
    cc04:	9005      	str	r0, [sp, #20]
    cc06:	f000 fa9e 	bl	d146 <__mcmp>
    cc0a:	2800      	cmp	r0, #0
    cc0c:	dc04      	bgt.n	cc18 <_dtoa_r+0xaf8>
    cc0e:	d000      	beq.n	cc12 <_dtoa_r+0xaf2>
    cc10:	e766      	b.n	cae0 <_dtoa_r+0x9c0>
    cc12:	07e3      	lsls	r3, r4, #31
    cc14:	d400      	bmi.n	cc18 <_dtoa_r+0xaf8>
    cc16:	e763      	b.n	cae0 <_dtoa_r+0x9c0>
    cc18:	2c39      	cmp	r4, #57	; 0x39
    cc1a:	d000      	beq.n	cc1e <_dtoa_r+0xafe>
    cc1c:	e75e      	b.n	cadc <_dtoa_r+0x9bc>
    cc1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cc20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cc22:	1c5d      	adds	r5, r3, #1
    cc24:	2339      	movs	r3, #57	; 0x39
    cc26:	7013      	strb	r3, [r2, #0]
    cc28:	1e6b      	subs	r3, r5, #1
    cc2a:	781a      	ldrb	r2, [r3, #0]
    cc2c:	2a39      	cmp	r2, #57	; 0x39
    cc2e:	d03b      	beq.n	cca8 <_dtoa_r+0xb88>
    cc30:	3201      	adds	r2, #1
    cc32:	701a      	strb	r2, [r3, #0]
    cc34:	e780      	b.n	cb38 <_dtoa_r+0xa18>
    cc36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cc38:	3301      	adds	r3, #1
    cc3a:	930d      	str	r3, [sp, #52]	; 0x34
    cc3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cc3e:	2b00      	cmp	r3, #0
    cc40:	dd05      	ble.n	cc4e <_dtoa_r+0xb2e>
    cc42:	2c39      	cmp	r4, #57	; 0x39
    cc44:	d0eb      	beq.n	cc1e <_dtoa_r+0xafe>
    cc46:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    cc48:	3401      	adds	r4, #1
    cc4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cc4c:	e74a      	b.n	cae4 <_dtoa_r+0x9c4>
    cc4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cc50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    cc52:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    cc54:	701c      	strb	r4, [r3, #0]
    cc56:	4293      	cmp	r3, r2
    cc58:	d0ab      	beq.n	cbb2 <_dtoa_r+0xa92>
    cc5a:	2300      	movs	r3, #0
    cc5c:	220a      	movs	r2, #10
    cc5e:	9905      	ldr	r1, [sp, #20]
    cc60:	9804      	ldr	r0, [sp, #16]
    cc62:	f000 f8af 	bl	cdc4 <__multadd>
    cc66:	2300      	movs	r3, #0
    cc68:	9005      	str	r0, [sp, #20]
    cc6a:	220a      	movs	r2, #10
    cc6c:	0039      	movs	r1, r7
    cc6e:	9804      	ldr	r0, [sp, #16]
    cc70:	42b7      	cmp	r7, r6
    cc72:	d106      	bne.n	cc82 <_dtoa_r+0xb62>
    cc74:	f000 f8a6 	bl	cdc4 <__multadd>
    cc78:	0007      	movs	r7, r0
    cc7a:	0006      	movs	r6, r0
    cc7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cc7e:	930b      	str	r3, [sp, #44]	; 0x2c
    cc80:	e6fc      	b.n	ca7c <_dtoa_r+0x95c>
    cc82:	f000 f89f 	bl	cdc4 <__multadd>
    cc86:	0031      	movs	r1, r6
    cc88:	0007      	movs	r7, r0
    cc8a:	2300      	movs	r3, #0
    cc8c:	220a      	movs	r2, #10
    cc8e:	9804      	ldr	r0, [sp, #16]
    cc90:	f000 f898 	bl	cdc4 <__multadd>
    cc94:	0006      	movs	r6, r0
    cc96:	e7f1      	b.n	cc7c <_dtoa_r+0xb5c>
    cc98:	2300      	movs	r3, #0
    cc9a:	220a      	movs	r2, #10
    cc9c:	9905      	ldr	r1, [sp, #20]
    cc9e:	9804      	ldr	r0, [sp, #16]
    cca0:	f000 f890 	bl	cdc4 <__multadd>
    cca4:	9005      	str	r0, [sp, #20]
    cca6:	e771      	b.n	cb8c <_dtoa_r+0xa6c>
    cca8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ccaa:	429a      	cmp	r2, r3
    ccac:	d105      	bne.n	ccba <_dtoa_r+0xb9a>
    ccae:	9b03      	ldr	r3, [sp, #12]
    ccb0:	3301      	adds	r3, #1
    ccb2:	9303      	str	r3, [sp, #12]
    ccb4:	2331      	movs	r3, #49	; 0x31
    ccb6:	7013      	strb	r3, [r2, #0]
    ccb8:	e73e      	b.n	cb38 <_dtoa_r+0xa18>
    ccba:	001d      	movs	r5, r3
    ccbc:	e7b4      	b.n	cc28 <_dtoa_r+0xb08>
    ccbe:	4b0a      	ldr	r3, [pc, #40]	; (cce8 <_dtoa_r+0xbc8>)
    ccc0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ccc2:	930a      	str	r3, [sp, #40]	; 0x28
    ccc4:	4b09      	ldr	r3, [pc, #36]	; (ccec <_dtoa_r+0xbcc>)
    ccc6:	2a00      	cmp	r2, #0
    ccc8:	d001      	beq.n	ccce <_dtoa_r+0xbae>
    ccca:	9a26      	ldr	r2, [sp, #152]	; 0x98
    cccc:	6013      	str	r3, [r2, #0]
    ccce:	980a      	ldr	r0, [sp, #40]	; 0x28
    ccd0:	b01d      	add	sp, #116	; 0x74
    ccd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ccd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ccd6:	2b00      	cmp	r3, #0
    ccd8:	dd00      	ble.n	ccdc <_dtoa_r+0xbbc>
    ccda:	e756      	b.n	cb8a <_dtoa_r+0xa6a>
    ccdc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ccde:	2b02      	cmp	r3, #2
    cce0:	dc00      	bgt.n	cce4 <_dtoa_r+0xbc4>
    cce2:	e752      	b.n	cb8a <_dtoa_r+0xa6a>
    cce4:	e713      	b.n	cb0e <_dtoa_r+0x9ee>
    cce6:	46c0      	nop			; (mov r8, r8)
    cce8:	0000e207 	.word	0x0000e207
    ccec:	0000e20f 	.word	0x0000e20f

0000ccf0 <_localeconv_r>:
    ccf0:	4b03      	ldr	r3, [pc, #12]	; (cd00 <_localeconv_r+0x10>)
    ccf2:	681b      	ldr	r3, [r3, #0]
    ccf4:	6a18      	ldr	r0, [r3, #32]
    ccf6:	2800      	cmp	r0, #0
    ccf8:	d100      	bne.n	ccfc <_localeconv_r+0xc>
    ccfa:	4802      	ldr	r0, [pc, #8]	; (cd04 <_localeconv_r+0x14>)
    ccfc:	30f0      	adds	r0, #240	; 0xf0
    ccfe:	4770      	bx	lr
    cd00:	20000090 	.word	0x20000090
    cd04:	200000f4 	.word	0x200000f4

0000cd08 <memchr>:
    cd08:	b2c9      	uxtb	r1, r1
    cd0a:	1882      	adds	r2, r0, r2
    cd0c:	4290      	cmp	r0, r2
    cd0e:	d101      	bne.n	cd14 <memchr+0xc>
    cd10:	2000      	movs	r0, #0
    cd12:	4770      	bx	lr
    cd14:	7803      	ldrb	r3, [r0, #0]
    cd16:	428b      	cmp	r3, r1
    cd18:	d0fb      	beq.n	cd12 <memchr+0xa>
    cd1a:	3001      	adds	r0, #1
    cd1c:	e7f6      	b.n	cd0c <memchr+0x4>

0000cd1e <__malloc_lock>:
    cd1e:	4770      	bx	lr

0000cd20 <__malloc_unlock>:
    cd20:	4770      	bx	lr

0000cd22 <_Balloc>:
    cd22:	b570      	push	{r4, r5, r6, lr}
    cd24:	6a46      	ldr	r6, [r0, #36]	; 0x24
    cd26:	0004      	movs	r4, r0
    cd28:	000d      	movs	r5, r1
    cd2a:	2e00      	cmp	r6, #0
    cd2c:	d107      	bne.n	cd3e <_Balloc+0x1c>
    cd2e:	2010      	movs	r0, #16
    cd30:	f7fe fbb6 	bl	b4a0 <malloc>
    cd34:	6260      	str	r0, [r4, #36]	; 0x24
    cd36:	6046      	str	r6, [r0, #4]
    cd38:	6086      	str	r6, [r0, #8]
    cd3a:	6006      	str	r6, [r0, #0]
    cd3c:	60c6      	str	r6, [r0, #12]
    cd3e:	6a66      	ldr	r6, [r4, #36]	; 0x24
    cd40:	68f3      	ldr	r3, [r6, #12]
    cd42:	2b00      	cmp	r3, #0
    cd44:	d013      	beq.n	cd6e <_Balloc+0x4c>
    cd46:	6a63      	ldr	r3, [r4, #36]	; 0x24
    cd48:	00aa      	lsls	r2, r5, #2
    cd4a:	68db      	ldr	r3, [r3, #12]
    cd4c:	189b      	adds	r3, r3, r2
    cd4e:	6818      	ldr	r0, [r3, #0]
    cd50:	2800      	cmp	r0, #0
    cd52:	d118      	bne.n	cd86 <_Balloc+0x64>
    cd54:	2101      	movs	r1, #1
    cd56:	000e      	movs	r6, r1
    cd58:	40ae      	lsls	r6, r5
    cd5a:	1d72      	adds	r2, r6, #5
    cd5c:	0092      	lsls	r2, r2, #2
    cd5e:	0020      	movs	r0, r4
    cd60:	f000 fac2 	bl	d2e8 <_calloc_r>
    cd64:	2800      	cmp	r0, #0
    cd66:	d00c      	beq.n	cd82 <_Balloc+0x60>
    cd68:	6045      	str	r5, [r0, #4]
    cd6a:	6086      	str	r6, [r0, #8]
    cd6c:	e00d      	b.n	cd8a <_Balloc+0x68>
    cd6e:	2221      	movs	r2, #33	; 0x21
    cd70:	2104      	movs	r1, #4
    cd72:	0020      	movs	r0, r4
    cd74:	f000 fab8 	bl	d2e8 <_calloc_r>
    cd78:	6a63      	ldr	r3, [r4, #36]	; 0x24
    cd7a:	60f0      	str	r0, [r6, #12]
    cd7c:	68db      	ldr	r3, [r3, #12]
    cd7e:	2b00      	cmp	r3, #0
    cd80:	d1e1      	bne.n	cd46 <_Balloc+0x24>
    cd82:	2000      	movs	r0, #0
    cd84:	bd70      	pop	{r4, r5, r6, pc}
    cd86:	6802      	ldr	r2, [r0, #0]
    cd88:	601a      	str	r2, [r3, #0]
    cd8a:	2300      	movs	r3, #0
    cd8c:	6103      	str	r3, [r0, #16]
    cd8e:	60c3      	str	r3, [r0, #12]
    cd90:	e7f8      	b.n	cd84 <_Balloc+0x62>

0000cd92 <_Bfree>:
    cd92:	b570      	push	{r4, r5, r6, lr}
    cd94:	6a44      	ldr	r4, [r0, #36]	; 0x24
    cd96:	0006      	movs	r6, r0
    cd98:	000d      	movs	r5, r1
    cd9a:	2c00      	cmp	r4, #0
    cd9c:	d107      	bne.n	cdae <_Bfree+0x1c>
    cd9e:	2010      	movs	r0, #16
    cda0:	f7fe fb7e 	bl	b4a0 <malloc>
    cda4:	6270      	str	r0, [r6, #36]	; 0x24
    cda6:	6044      	str	r4, [r0, #4]
    cda8:	6084      	str	r4, [r0, #8]
    cdaa:	6004      	str	r4, [r0, #0]
    cdac:	60c4      	str	r4, [r0, #12]
    cdae:	2d00      	cmp	r5, #0
    cdb0:	d007      	beq.n	cdc2 <_Bfree+0x30>
    cdb2:	6a73      	ldr	r3, [r6, #36]	; 0x24
    cdb4:	686a      	ldr	r2, [r5, #4]
    cdb6:	68db      	ldr	r3, [r3, #12]
    cdb8:	0092      	lsls	r2, r2, #2
    cdba:	189b      	adds	r3, r3, r2
    cdbc:	681a      	ldr	r2, [r3, #0]
    cdbe:	602a      	str	r2, [r5, #0]
    cdc0:	601d      	str	r5, [r3, #0]
    cdc2:	bd70      	pop	{r4, r5, r6, pc}

0000cdc4 <__multadd>:
    cdc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    cdc6:	001e      	movs	r6, r3
    cdc8:	2314      	movs	r3, #20
    cdca:	469c      	mov	ip, r3
    cdcc:	0007      	movs	r7, r0
    cdce:	000c      	movs	r4, r1
    cdd0:	2000      	movs	r0, #0
    cdd2:	690d      	ldr	r5, [r1, #16]
    cdd4:	448c      	add	ip, r1
    cdd6:	4663      	mov	r3, ip
    cdd8:	8819      	ldrh	r1, [r3, #0]
    cdda:	681b      	ldr	r3, [r3, #0]
    cddc:	4351      	muls	r1, r2
    cdde:	0c1b      	lsrs	r3, r3, #16
    cde0:	4353      	muls	r3, r2
    cde2:	1989      	adds	r1, r1, r6
    cde4:	0c0e      	lsrs	r6, r1, #16
    cde6:	199b      	adds	r3, r3, r6
    cde8:	b289      	uxth	r1, r1
    cdea:	0c1e      	lsrs	r6, r3, #16
    cdec:	041b      	lsls	r3, r3, #16
    cdee:	185b      	adds	r3, r3, r1
    cdf0:	4661      	mov	r1, ip
    cdf2:	3001      	adds	r0, #1
    cdf4:	c108      	stmia	r1!, {r3}
    cdf6:	468c      	mov	ip, r1
    cdf8:	4285      	cmp	r5, r0
    cdfa:	dcec      	bgt.n	cdd6 <__multadd+0x12>
    cdfc:	2e00      	cmp	r6, #0
    cdfe:	d01b      	beq.n	ce38 <__multadd+0x74>
    ce00:	68a3      	ldr	r3, [r4, #8]
    ce02:	429d      	cmp	r5, r3
    ce04:	db12      	blt.n	ce2c <__multadd+0x68>
    ce06:	6863      	ldr	r3, [r4, #4]
    ce08:	0038      	movs	r0, r7
    ce0a:	1c59      	adds	r1, r3, #1
    ce0c:	f7ff ff89 	bl	cd22 <_Balloc>
    ce10:	0021      	movs	r1, r4
    ce12:	6923      	ldr	r3, [r4, #16]
    ce14:	9001      	str	r0, [sp, #4]
    ce16:	1c9a      	adds	r2, r3, #2
    ce18:	0092      	lsls	r2, r2, #2
    ce1a:	310c      	adds	r1, #12
    ce1c:	300c      	adds	r0, #12
    ce1e:	f7fe fb65 	bl	b4ec <memcpy>
    ce22:	0021      	movs	r1, r4
    ce24:	0038      	movs	r0, r7
    ce26:	f7ff ffb4 	bl	cd92 <_Bfree>
    ce2a:	9c01      	ldr	r4, [sp, #4]
    ce2c:	1d2b      	adds	r3, r5, #4
    ce2e:	009b      	lsls	r3, r3, #2
    ce30:	18e3      	adds	r3, r4, r3
    ce32:	3501      	adds	r5, #1
    ce34:	605e      	str	r6, [r3, #4]
    ce36:	6125      	str	r5, [r4, #16]
    ce38:	0020      	movs	r0, r4
    ce3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000ce3c <__hi0bits>:
    ce3c:	0003      	movs	r3, r0
    ce3e:	0c02      	lsrs	r2, r0, #16
    ce40:	2000      	movs	r0, #0
    ce42:	4282      	cmp	r2, r0
    ce44:	d101      	bne.n	ce4a <__hi0bits+0xe>
    ce46:	041b      	lsls	r3, r3, #16
    ce48:	3010      	adds	r0, #16
    ce4a:	0e1a      	lsrs	r2, r3, #24
    ce4c:	d101      	bne.n	ce52 <__hi0bits+0x16>
    ce4e:	3008      	adds	r0, #8
    ce50:	021b      	lsls	r3, r3, #8
    ce52:	0f1a      	lsrs	r2, r3, #28
    ce54:	d101      	bne.n	ce5a <__hi0bits+0x1e>
    ce56:	3004      	adds	r0, #4
    ce58:	011b      	lsls	r3, r3, #4
    ce5a:	0f9a      	lsrs	r2, r3, #30
    ce5c:	d101      	bne.n	ce62 <__hi0bits+0x26>
    ce5e:	3002      	adds	r0, #2
    ce60:	009b      	lsls	r3, r3, #2
    ce62:	2b00      	cmp	r3, #0
    ce64:	db03      	blt.n	ce6e <__hi0bits+0x32>
    ce66:	3001      	adds	r0, #1
    ce68:	005b      	lsls	r3, r3, #1
    ce6a:	d400      	bmi.n	ce6e <__hi0bits+0x32>
    ce6c:	2020      	movs	r0, #32
    ce6e:	4770      	bx	lr

0000ce70 <__lo0bits>:
    ce70:	2207      	movs	r2, #7
    ce72:	6803      	ldr	r3, [r0, #0]
    ce74:	b510      	push	{r4, lr}
    ce76:	0001      	movs	r1, r0
    ce78:	401a      	ands	r2, r3
    ce7a:	d00d      	beq.n	ce98 <__lo0bits+0x28>
    ce7c:	2401      	movs	r4, #1
    ce7e:	2000      	movs	r0, #0
    ce80:	4223      	tst	r3, r4
    ce82:	d105      	bne.n	ce90 <__lo0bits+0x20>
    ce84:	3002      	adds	r0, #2
    ce86:	4203      	tst	r3, r0
    ce88:	d003      	beq.n	ce92 <__lo0bits+0x22>
    ce8a:	40e3      	lsrs	r3, r4
    ce8c:	0020      	movs	r0, r4
    ce8e:	600b      	str	r3, [r1, #0]
    ce90:	bd10      	pop	{r4, pc}
    ce92:	089b      	lsrs	r3, r3, #2
    ce94:	600b      	str	r3, [r1, #0]
    ce96:	e7fb      	b.n	ce90 <__lo0bits+0x20>
    ce98:	b29c      	uxth	r4, r3
    ce9a:	0010      	movs	r0, r2
    ce9c:	2c00      	cmp	r4, #0
    ce9e:	d101      	bne.n	cea4 <__lo0bits+0x34>
    cea0:	2010      	movs	r0, #16
    cea2:	0c1b      	lsrs	r3, r3, #16
    cea4:	b2da      	uxtb	r2, r3
    cea6:	2a00      	cmp	r2, #0
    cea8:	d101      	bne.n	ceae <__lo0bits+0x3e>
    ceaa:	3008      	adds	r0, #8
    ceac:	0a1b      	lsrs	r3, r3, #8
    ceae:	071a      	lsls	r2, r3, #28
    ceb0:	d101      	bne.n	ceb6 <__lo0bits+0x46>
    ceb2:	3004      	adds	r0, #4
    ceb4:	091b      	lsrs	r3, r3, #4
    ceb6:	079a      	lsls	r2, r3, #30
    ceb8:	d101      	bne.n	cebe <__lo0bits+0x4e>
    ceba:	3002      	adds	r0, #2
    cebc:	089b      	lsrs	r3, r3, #2
    cebe:	07da      	lsls	r2, r3, #31
    cec0:	d4e8      	bmi.n	ce94 <__lo0bits+0x24>
    cec2:	085b      	lsrs	r3, r3, #1
    cec4:	d001      	beq.n	ceca <__lo0bits+0x5a>
    cec6:	3001      	adds	r0, #1
    cec8:	e7e4      	b.n	ce94 <__lo0bits+0x24>
    ceca:	2020      	movs	r0, #32
    cecc:	e7e0      	b.n	ce90 <__lo0bits+0x20>

0000cece <__i2b>:
    cece:	b510      	push	{r4, lr}
    ced0:	000c      	movs	r4, r1
    ced2:	2101      	movs	r1, #1
    ced4:	f7ff ff25 	bl	cd22 <_Balloc>
    ced8:	2301      	movs	r3, #1
    ceda:	6144      	str	r4, [r0, #20]
    cedc:	6103      	str	r3, [r0, #16]
    cede:	bd10      	pop	{r4, pc}

0000cee0 <__multiply>:
    cee0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cee2:	690b      	ldr	r3, [r1, #16]
    cee4:	0015      	movs	r5, r2
    cee6:	6912      	ldr	r2, [r2, #16]
    cee8:	b089      	sub	sp, #36	; 0x24
    ceea:	000c      	movs	r4, r1
    ceec:	4293      	cmp	r3, r2
    ceee:	da01      	bge.n	cef4 <__multiply+0x14>
    cef0:	002c      	movs	r4, r5
    cef2:	000d      	movs	r5, r1
    cef4:	6927      	ldr	r7, [r4, #16]
    cef6:	692e      	ldr	r6, [r5, #16]
    cef8:	68a2      	ldr	r2, [r4, #8]
    cefa:	19bb      	adds	r3, r7, r6
    cefc:	6861      	ldr	r1, [r4, #4]
    cefe:	9301      	str	r3, [sp, #4]
    cf00:	4293      	cmp	r3, r2
    cf02:	dd00      	ble.n	cf06 <__multiply+0x26>
    cf04:	3101      	adds	r1, #1
    cf06:	f7ff ff0c 	bl	cd22 <_Balloc>
    cf0a:	0003      	movs	r3, r0
    cf0c:	3314      	adds	r3, #20
    cf0e:	9300      	str	r3, [sp, #0]
    cf10:	9a00      	ldr	r2, [sp, #0]
    cf12:	19bb      	adds	r3, r7, r6
    cf14:	4694      	mov	ip, r2
    cf16:	009b      	lsls	r3, r3, #2
    cf18:	449c      	add	ip, r3
    cf1a:	0013      	movs	r3, r2
    cf1c:	2200      	movs	r2, #0
    cf1e:	9004      	str	r0, [sp, #16]
    cf20:	4563      	cmp	r3, ip
    cf22:	d31c      	bcc.n	cf5e <__multiply+0x7e>
    cf24:	002a      	movs	r2, r5
    cf26:	3414      	adds	r4, #20
    cf28:	00bf      	lsls	r7, r7, #2
    cf2a:	19e3      	adds	r3, r4, r7
    cf2c:	3214      	adds	r2, #20
    cf2e:	00b6      	lsls	r6, r6, #2
    cf30:	9305      	str	r3, [sp, #20]
    cf32:	1993      	adds	r3, r2, r6
    cf34:	9402      	str	r4, [sp, #8]
    cf36:	9306      	str	r3, [sp, #24]
    cf38:	9b06      	ldr	r3, [sp, #24]
    cf3a:	429a      	cmp	r2, r3
    cf3c:	d311      	bcc.n	cf62 <__multiply+0x82>
    cf3e:	9b01      	ldr	r3, [sp, #4]
    cf40:	2b00      	cmp	r3, #0
    cf42:	dd06      	ble.n	cf52 <__multiply+0x72>
    cf44:	2304      	movs	r3, #4
    cf46:	425b      	negs	r3, r3
    cf48:	449c      	add	ip, r3
    cf4a:	4663      	mov	r3, ip
    cf4c:	681b      	ldr	r3, [r3, #0]
    cf4e:	2b00      	cmp	r3, #0
    cf50:	d051      	beq.n	cff6 <__multiply+0x116>
    cf52:	9b04      	ldr	r3, [sp, #16]
    cf54:	9a01      	ldr	r2, [sp, #4]
    cf56:	0018      	movs	r0, r3
    cf58:	611a      	str	r2, [r3, #16]
    cf5a:	b009      	add	sp, #36	; 0x24
    cf5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cf5e:	c304      	stmia	r3!, {r2}
    cf60:	e7de      	b.n	cf20 <__multiply+0x40>
    cf62:	8814      	ldrh	r4, [r2, #0]
    cf64:	2c00      	cmp	r4, #0
    cf66:	d01e      	beq.n	cfa6 <__multiply+0xc6>
    cf68:	2600      	movs	r6, #0
    cf6a:	9d00      	ldr	r5, [sp, #0]
    cf6c:	9f02      	ldr	r7, [sp, #8]
    cf6e:	cf01      	ldmia	r7!, {r0}
    cf70:	9507      	str	r5, [sp, #28]
    cf72:	cd08      	ldmia	r5!, {r3}
    cf74:	9303      	str	r3, [sp, #12]
    cf76:	b283      	uxth	r3, r0
    cf78:	4363      	muls	r3, r4
    cf7a:	0019      	movs	r1, r3
    cf7c:	466b      	mov	r3, sp
    cf7e:	0c00      	lsrs	r0, r0, #16
    cf80:	899b      	ldrh	r3, [r3, #12]
    cf82:	4360      	muls	r0, r4
    cf84:	18cb      	adds	r3, r1, r3
    cf86:	9903      	ldr	r1, [sp, #12]
    cf88:	199b      	adds	r3, r3, r6
    cf8a:	0c09      	lsrs	r1, r1, #16
    cf8c:	1841      	adds	r1, r0, r1
    cf8e:	0c18      	lsrs	r0, r3, #16
    cf90:	1809      	adds	r1, r1, r0
    cf92:	0c0e      	lsrs	r6, r1, #16
    cf94:	b29b      	uxth	r3, r3
    cf96:	0409      	lsls	r1, r1, #16
    cf98:	430b      	orrs	r3, r1
    cf9a:	9907      	ldr	r1, [sp, #28]
    cf9c:	600b      	str	r3, [r1, #0]
    cf9e:	9b05      	ldr	r3, [sp, #20]
    cfa0:	42bb      	cmp	r3, r7
    cfa2:	d8e4      	bhi.n	cf6e <__multiply+0x8e>
    cfa4:	602e      	str	r6, [r5, #0]
    cfa6:	6813      	ldr	r3, [r2, #0]
    cfa8:	0c1b      	lsrs	r3, r3, #16
    cfaa:	9303      	str	r3, [sp, #12]
    cfac:	d01e      	beq.n	cfec <__multiply+0x10c>
    cfae:	2600      	movs	r6, #0
    cfb0:	9b00      	ldr	r3, [sp, #0]
    cfb2:	9c02      	ldr	r4, [sp, #8]
    cfb4:	681b      	ldr	r3, [r3, #0]
    cfb6:	9800      	ldr	r0, [sp, #0]
    cfb8:	0007      	movs	r7, r0
    cfba:	8821      	ldrh	r1, [r4, #0]
    cfbc:	9d03      	ldr	r5, [sp, #12]
    cfbe:	b29b      	uxth	r3, r3
    cfc0:	4369      	muls	r1, r5
    cfc2:	c820      	ldmia	r0!, {r5}
    cfc4:	0c2d      	lsrs	r5, r5, #16
    cfc6:	1949      	adds	r1, r1, r5
    cfc8:	198e      	adds	r6, r1, r6
    cfca:	0431      	lsls	r1, r6, #16
    cfcc:	430b      	orrs	r3, r1
    cfce:	603b      	str	r3, [r7, #0]
    cfd0:	cc08      	ldmia	r4!, {r3}
    cfd2:	9903      	ldr	r1, [sp, #12]
    cfd4:	0c1b      	lsrs	r3, r3, #16
    cfd6:	434b      	muls	r3, r1
    cfd8:	6879      	ldr	r1, [r7, #4]
    cfda:	0c36      	lsrs	r6, r6, #16
    cfdc:	b289      	uxth	r1, r1
    cfde:	185b      	adds	r3, r3, r1
    cfe0:	9905      	ldr	r1, [sp, #20]
    cfe2:	199b      	adds	r3, r3, r6
    cfe4:	0c1e      	lsrs	r6, r3, #16
    cfe6:	42a1      	cmp	r1, r4
    cfe8:	d8e6      	bhi.n	cfb8 <__multiply+0xd8>
    cfea:	6003      	str	r3, [r0, #0]
    cfec:	9b00      	ldr	r3, [sp, #0]
    cfee:	3204      	adds	r2, #4
    cff0:	3304      	adds	r3, #4
    cff2:	9300      	str	r3, [sp, #0]
    cff4:	e7a0      	b.n	cf38 <__multiply+0x58>
    cff6:	9b01      	ldr	r3, [sp, #4]
    cff8:	3b01      	subs	r3, #1
    cffa:	9301      	str	r3, [sp, #4]
    cffc:	e79f      	b.n	cf3e <__multiply+0x5e>
	...

0000d000 <__pow5mult>:
    d000:	2303      	movs	r3, #3
    d002:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d004:	4013      	ands	r3, r2
    d006:	0005      	movs	r5, r0
    d008:	000e      	movs	r6, r1
    d00a:	0014      	movs	r4, r2
    d00c:	2b00      	cmp	r3, #0
    d00e:	d008      	beq.n	d022 <__pow5mult+0x22>
    d010:	4922      	ldr	r1, [pc, #136]	; (d09c <__pow5mult+0x9c>)
    d012:	3b01      	subs	r3, #1
    d014:	009a      	lsls	r2, r3, #2
    d016:	5852      	ldr	r2, [r2, r1]
    d018:	2300      	movs	r3, #0
    d01a:	0031      	movs	r1, r6
    d01c:	f7ff fed2 	bl	cdc4 <__multadd>
    d020:	0006      	movs	r6, r0
    d022:	10a3      	asrs	r3, r4, #2
    d024:	9301      	str	r3, [sp, #4]
    d026:	d036      	beq.n	d096 <__pow5mult+0x96>
    d028:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    d02a:	2c00      	cmp	r4, #0
    d02c:	d107      	bne.n	d03e <__pow5mult+0x3e>
    d02e:	2010      	movs	r0, #16
    d030:	f7fe fa36 	bl	b4a0 <malloc>
    d034:	6268      	str	r0, [r5, #36]	; 0x24
    d036:	6044      	str	r4, [r0, #4]
    d038:	6084      	str	r4, [r0, #8]
    d03a:	6004      	str	r4, [r0, #0]
    d03c:	60c4      	str	r4, [r0, #12]
    d03e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    d040:	68bc      	ldr	r4, [r7, #8]
    d042:	2c00      	cmp	r4, #0
    d044:	d107      	bne.n	d056 <__pow5mult+0x56>
    d046:	4916      	ldr	r1, [pc, #88]	; (d0a0 <__pow5mult+0xa0>)
    d048:	0028      	movs	r0, r5
    d04a:	f7ff ff40 	bl	cece <__i2b>
    d04e:	2300      	movs	r3, #0
    d050:	0004      	movs	r4, r0
    d052:	60b8      	str	r0, [r7, #8]
    d054:	6003      	str	r3, [r0, #0]
    d056:	2201      	movs	r2, #1
    d058:	9b01      	ldr	r3, [sp, #4]
    d05a:	4213      	tst	r3, r2
    d05c:	d00a      	beq.n	d074 <__pow5mult+0x74>
    d05e:	0031      	movs	r1, r6
    d060:	0022      	movs	r2, r4
    d062:	0028      	movs	r0, r5
    d064:	f7ff ff3c 	bl	cee0 <__multiply>
    d068:	0007      	movs	r7, r0
    d06a:	0031      	movs	r1, r6
    d06c:	0028      	movs	r0, r5
    d06e:	f7ff fe90 	bl	cd92 <_Bfree>
    d072:	003e      	movs	r6, r7
    d074:	9b01      	ldr	r3, [sp, #4]
    d076:	105b      	asrs	r3, r3, #1
    d078:	9301      	str	r3, [sp, #4]
    d07a:	d00c      	beq.n	d096 <__pow5mult+0x96>
    d07c:	6820      	ldr	r0, [r4, #0]
    d07e:	2800      	cmp	r0, #0
    d080:	d107      	bne.n	d092 <__pow5mult+0x92>
    d082:	0022      	movs	r2, r4
    d084:	0021      	movs	r1, r4
    d086:	0028      	movs	r0, r5
    d088:	f7ff ff2a 	bl	cee0 <__multiply>
    d08c:	2300      	movs	r3, #0
    d08e:	6020      	str	r0, [r4, #0]
    d090:	6003      	str	r3, [r0, #0]
    d092:	0004      	movs	r4, r0
    d094:	e7df      	b.n	d056 <__pow5mult+0x56>
    d096:	0030      	movs	r0, r6
    d098:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    d09a:	46c0      	nop			; (mov r8, r8)
    d09c:	0000e308 	.word	0x0000e308
    d0a0:	00000271 	.word	0x00000271

0000d0a4 <__lshift>:
    d0a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d0a6:	000d      	movs	r5, r1
    d0a8:	0017      	movs	r7, r2
    d0aa:	692b      	ldr	r3, [r5, #16]
    d0ac:	1154      	asrs	r4, r2, #5
    d0ae:	b085      	sub	sp, #20
    d0b0:	18e3      	adds	r3, r4, r3
    d0b2:	9302      	str	r3, [sp, #8]
    d0b4:	3301      	adds	r3, #1
    d0b6:	9301      	str	r3, [sp, #4]
    d0b8:	6849      	ldr	r1, [r1, #4]
    d0ba:	68ab      	ldr	r3, [r5, #8]
    d0bc:	9003      	str	r0, [sp, #12]
    d0be:	9a01      	ldr	r2, [sp, #4]
    d0c0:	4293      	cmp	r3, r2
    d0c2:	db34      	blt.n	d12e <__lshift+0x8a>
    d0c4:	9803      	ldr	r0, [sp, #12]
    d0c6:	f7ff fe2c 	bl	cd22 <_Balloc>
    d0ca:	2300      	movs	r3, #0
    d0cc:	0002      	movs	r2, r0
    d0ce:	0006      	movs	r6, r0
    d0d0:	0019      	movs	r1, r3
    d0d2:	3214      	adds	r2, #20
    d0d4:	42a3      	cmp	r3, r4
    d0d6:	db2d      	blt.n	d134 <__lshift+0x90>
    d0d8:	43e3      	mvns	r3, r4
    d0da:	17db      	asrs	r3, r3, #31
    d0dc:	401c      	ands	r4, r3
    d0de:	002b      	movs	r3, r5
    d0e0:	211f      	movs	r1, #31
    d0e2:	00a4      	lsls	r4, r4, #2
    d0e4:	1914      	adds	r4, r2, r4
    d0e6:	692a      	ldr	r2, [r5, #16]
    d0e8:	3314      	adds	r3, #20
    d0ea:	0092      	lsls	r2, r2, #2
    d0ec:	189a      	adds	r2, r3, r2
    d0ee:	400f      	ands	r7, r1
    d0f0:	d024      	beq.n	d13c <__lshift+0x98>
    d0f2:	3101      	adds	r1, #1
    d0f4:	1bc9      	subs	r1, r1, r7
    d0f6:	468c      	mov	ip, r1
    d0f8:	2100      	movs	r1, #0
    d0fa:	6818      	ldr	r0, [r3, #0]
    d0fc:	40b8      	lsls	r0, r7
    d0fe:	4301      	orrs	r1, r0
    d100:	4660      	mov	r0, ip
    d102:	6021      	str	r1, [r4, #0]
    d104:	cb02      	ldmia	r3!, {r1}
    d106:	3404      	adds	r4, #4
    d108:	40c1      	lsrs	r1, r0
    d10a:	429a      	cmp	r2, r3
    d10c:	d8f5      	bhi.n	d0fa <__lshift+0x56>
    d10e:	6021      	str	r1, [r4, #0]
    d110:	2900      	cmp	r1, #0
    d112:	d002      	beq.n	d11a <__lshift+0x76>
    d114:	9b02      	ldr	r3, [sp, #8]
    d116:	3302      	adds	r3, #2
    d118:	9301      	str	r3, [sp, #4]
    d11a:	9b01      	ldr	r3, [sp, #4]
    d11c:	9803      	ldr	r0, [sp, #12]
    d11e:	3b01      	subs	r3, #1
    d120:	6133      	str	r3, [r6, #16]
    d122:	0029      	movs	r1, r5
    d124:	f7ff fe35 	bl	cd92 <_Bfree>
    d128:	0030      	movs	r0, r6
    d12a:	b005      	add	sp, #20
    d12c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d12e:	3101      	adds	r1, #1
    d130:	005b      	lsls	r3, r3, #1
    d132:	e7c4      	b.n	d0be <__lshift+0x1a>
    d134:	0098      	lsls	r0, r3, #2
    d136:	5011      	str	r1, [r2, r0]
    d138:	3301      	adds	r3, #1
    d13a:	e7cb      	b.n	d0d4 <__lshift+0x30>
    d13c:	cb02      	ldmia	r3!, {r1}
    d13e:	c402      	stmia	r4!, {r1}
    d140:	429a      	cmp	r2, r3
    d142:	d8fb      	bhi.n	d13c <__lshift+0x98>
    d144:	e7e9      	b.n	d11a <__lshift+0x76>

0000d146 <__mcmp>:
    d146:	690a      	ldr	r2, [r1, #16]
    d148:	6903      	ldr	r3, [r0, #16]
    d14a:	b530      	push	{r4, r5, lr}
    d14c:	1a9b      	subs	r3, r3, r2
    d14e:	d10e      	bne.n	d16e <__mcmp+0x28>
    d150:	0092      	lsls	r2, r2, #2
    d152:	3014      	adds	r0, #20
    d154:	3114      	adds	r1, #20
    d156:	1884      	adds	r4, r0, r2
    d158:	1889      	adds	r1, r1, r2
    d15a:	3c04      	subs	r4, #4
    d15c:	3904      	subs	r1, #4
    d15e:	6822      	ldr	r2, [r4, #0]
    d160:	680d      	ldr	r5, [r1, #0]
    d162:	42aa      	cmp	r2, r5
    d164:	d005      	beq.n	d172 <__mcmp+0x2c>
    d166:	42aa      	cmp	r2, r5
    d168:	4192      	sbcs	r2, r2
    d16a:	2301      	movs	r3, #1
    d16c:	4313      	orrs	r3, r2
    d16e:	0018      	movs	r0, r3
    d170:	bd30      	pop	{r4, r5, pc}
    d172:	42a0      	cmp	r0, r4
    d174:	d3f1      	bcc.n	d15a <__mcmp+0x14>
    d176:	e7fa      	b.n	d16e <__mcmp+0x28>

0000d178 <__mdiff>:
    d178:	b5f0      	push	{r4, r5, r6, r7, lr}
    d17a:	000d      	movs	r5, r1
    d17c:	b085      	sub	sp, #20
    d17e:	0007      	movs	r7, r0
    d180:	0011      	movs	r1, r2
    d182:	0028      	movs	r0, r5
    d184:	0014      	movs	r4, r2
    d186:	f7ff ffde 	bl	d146 <__mcmp>
    d18a:	1e06      	subs	r6, r0, #0
    d18c:	d108      	bne.n	d1a0 <__mdiff+0x28>
    d18e:	0001      	movs	r1, r0
    d190:	0038      	movs	r0, r7
    d192:	f7ff fdc6 	bl	cd22 <_Balloc>
    d196:	2301      	movs	r3, #1
    d198:	6146      	str	r6, [r0, #20]
    d19a:	6103      	str	r3, [r0, #16]
    d19c:	b005      	add	sp, #20
    d19e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d1a0:	2301      	movs	r3, #1
    d1a2:	9301      	str	r3, [sp, #4]
    d1a4:	2800      	cmp	r0, #0
    d1a6:	db04      	blt.n	d1b2 <__mdiff+0x3a>
    d1a8:	0023      	movs	r3, r4
    d1aa:	002c      	movs	r4, r5
    d1ac:	001d      	movs	r5, r3
    d1ae:	2300      	movs	r3, #0
    d1b0:	9301      	str	r3, [sp, #4]
    d1b2:	6861      	ldr	r1, [r4, #4]
    d1b4:	0038      	movs	r0, r7
    d1b6:	f7ff fdb4 	bl	cd22 <_Balloc>
    d1ba:	002f      	movs	r7, r5
    d1bc:	2200      	movs	r2, #0
    d1be:	9b01      	ldr	r3, [sp, #4]
    d1c0:	6926      	ldr	r6, [r4, #16]
    d1c2:	60c3      	str	r3, [r0, #12]
    d1c4:	3414      	adds	r4, #20
    d1c6:	00b3      	lsls	r3, r6, #2
    d1c8:	18e3      	adds	r3, r4, r3
    d1ca:	9302      	str	r3, [sp, #8]
    d1cc:	692b      	ldr	r3, [r5, #16]
    d1ce:	3714      	adds	r7, #20
    d1d0:	009b      	lsls	r3, r3, #2
    d1d2:	18fb      	adds	r3, r7, r3
    d1d4:	9303      	str	r3, [sp, #12]
    d1d6:	0003      	movs	r3, r0
    d1d8:	4694      	mov	ip, r2
    d1da:	3314      	adds	r3, #20
    d1dc:	cc20      	ldmia	r4!, {r5}
    d1de:	cf04      	ldmia	r7!, {r2}
    d1e0:	9201      	str	r2, [sp, #4]
    d1e2:	b2aa      	uxth	r2, r5
    d1e4:	4494      	add	ip, r2
    d1e6:	466a      	mov	r2, sp
    d1e8:	4661      	mov	r1, ip
    d1ea:	8892      	ldrh	r2, [r2, #4]
    d1ec:	0c2d      	lsrs	r5, r5, #16
    d1ee:	1a8a      	subs	r2, r1, r2
    d1f0:	9901      	ldr	r1, [sp, #4]
    d1f2:	0c09      	lsrs	r1, r1, #16
    d1f4:	1a69      	subs	r1, r5, r1
    d1f6:	1415      	asrs	r5, r2, #16
    d1f8:	1949      	adds	r1, r1, r5
    d1fa:	140d      	asrs	r5, r1, #16
    d1fc:	b292      	uxth	r2, r2
    d1fe:	0409      	lsls	r1, r1, #16
    d200:	430a      	orrs	r2, r1
    d202:	601a      	str	r2, [r3, #0]
    d204:	9a03      	ldr	r2, [sp, #12]
    d206:	46ac      	mov	ip, r5
    d208:	3304      	adds	r3, #4
    d20a:	42ba      	cmp	r2, r7
    d20c:	d8e6      	bhi.n	d1dc <__mdiff+0x64>
    d20e:	9902      	ldr	r1, [sp, #8]
    d210:	001a      	movs	r2, r3
    d212:	428c      	cmp	r4, r1
    d214:	d305      	bcc.n	d222 <__mdiff+0xaa>
    d216:	3a04      	subs	r2, #4
    d218:	6813      	ldr	r3, [r2, #0]
    d21a:	2b00      	cmp	r3, #0
    d21c:	d00e      	beq.n	d23c <__mdiff+0xc4>
    d21e:	6106      	str	r6, [r0, #16]
    d220:	e7bc      	b.n	d19c <__mdiff+0x24>
    d222:	cc04      	ldmia	r4!, {r2}
    d224:	b291      	uxth	r1, r2
    d226:	4461      	add	r1, ip
    d228:	140d      	asrs	r5, r1, #16
    d22a:	0c12      	lsrs	r2, r2, #16
    d22c:	1952      	adds	r2, r2, r5
    d22e:	1415      	asrs	r5, r2, #16
    d230:	b289      	uxth	r1, r1
    d232:	0412      	lsls	r2, r2, #16
    d234:	430a      	orrs	r2, r1
    d236:	46ac      	mov	ip, r5
    d238:	c304      	stmia	r3!, {r2}
    d23a:	e7e8      	b.n	d20e <__mdiff+0x96>
    d23c:	3e01      	subs	r6, #1
    d23e:	e7ea      	b.n	d216 <__mdiff+0x9e>

0000d240 <__d2b>:
    d240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d242:	001d      	movs	r5, r3
    d244:	2101      	movs	r1, #1
    d246:	9f08      	ldr	r7, [sp, #32]
    d248:	0014      	movs	r4, r2
    d24a:	f7ff fd6a 	bl	cd22 <_Balloc>
    d24e:	032b      	lsls	r3, r5, #12
    d250:	006d      	lsls	r5, r5, #1
    d252:	0006      	movs	r6, r0
    d254:	0b1b      	lsrs	r3, r3, #12
    d256:	0d6d      	lsrs	r5, r5, #21
    d258:	d124      	bne.n	d2a4 <__d2b+0x64>
    d25a:	9301      	str	r3, [sp, #4]
    d25c:	2c00      	cmp	r4, #0
    d25e:	d027      	beq.n	d2b0 <__d2b+0x70>
    d260:	4668      	mov	r0, sp
    d262:	9400      	str	r4, [sp, #0]
    d264:	f7ff fe04 	bl	ce70 <__lo0bits>
    d268:	9c00      	ldr	r4, [sp, #0]
    d26a:	2800      	cmp	r0, #0
    d26c:	d01e      	beq.n	d2ac <__d2b+0x6c>
    d26e:	9b01      	ldr	r3, [sp, #4]
    d270:	2120      	movs	r1, #32
    d272:	001a      	movs	r2, r3
    d274:	1a09      	subs	r1, r1, r0
    d276:	408a      	lsls	r2, r1
    d278:	40c3      	lsrs	r3, r0
    d27a:	4322      	orrs	r2, r4
    d27c:	6172      	str	r2, [r6, #20]
    d27e:	9301      	str	r3, [sp, #4]
    d280:	9c01      	ldr	r4, [sp, #4]
    d282:	61b4      	str	r4, [r6, #24]
    d284:	1e63      	subs	r3, r4, #1
    d286:	419c      	sbcs	r4, r3
    d288:	3401      	adds	r4, #1
    d28a:	6134      	str	r4, [r6, #16]
    d28c:	2d00      	cmp	r5, #0
    d28e:	d018      	beq.n	d2c2 <__d2b+0x82>
    d290:	4b12      	ldr	r3, [pc, #72]	; (d2dc <__d2b+0x9c>)
    d292:	18ed      	adds	r5, r5, r3
    d294:	2335      	movs	r3, #53	; 0x35
    d296:	182d      	adds	r5, r5, r0
    d298:	603d      	str	r5, [r7, #0]
    d29a:	1a18      	subs	r0, r3, r0
    d29c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d29e:	6018      	str	r0, [r3, #0]
    d2a0:	0030      	movs	r0, r6
    d2a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    d2a4:	2280      	movs	r2, #128	; 0x80
    d2a6:	0352      	lsls	r2, r2, #13
    d2a8:	4313      	orrs	r3, r2
    d2aa:	e7d6      	b.n	d25a <__d2b+0x1a>
    d2ac:	6174      	str	r4, [r6, #20]
    d2ae:	e7e7      	b.n	d280 <__d2b+0x40>
    d2b0:	a801      	add	r0, sp, #4
    d2b2:	f7ff fddd 	bl	ce70 <__lo0bits>
    d2b6:	2401      	movs	r4, #1
    d2b8:	9b01      	ldr	r3, [sp, #4]
    d2ba:	6134      	str	r4, [r6, #16]
    d2bc:	6173      	str	r3, [r6, #20]
    d2be:	3020      	adds	r0, #32
    d2c0:	e7e4      	b.n	d28c <__d2b+0x4c>
    d2c2:	4b07      	ldr	r3, [pc, #28]	; (d2e0 <__d2b+0xa0>)
    d2c4:	18c0      	adds	r0, r0, r3
    d2c6:	4b07      	ldr	r3, [pc, #28]	; (d2e4 <__d2b+0xa4>)
    d2c8:	6038      	str	r0, [r7, #0]
    d2ca:	18e3      	adds	r3, r4, r3
    d2cc:	009b      	lsls	r3, r3, #2
    d2ce:	18f3      	adds	r3, r6, r3
    d2d0:	6958      	ldr	r0, [r3, #20]
    d2d2:	f7ff fdb3 	bl	ce3c <__hi0bits>
    d2d6:	0164      	lsls	r4, r4, #5
    d2d8:	1a20      	subs	r0, r4, r0
    d2da:	e7df      	b.n	d29c <__d2b+0x5c>
    d2dc:	fffffbcd 	.word	0xfffffbcd
    d2e0:	fffffbce 	.word	0xfffffbce
    d2e4:	3fffffff 	.word	0x3fffffff

0000d2e8 <_calloc_r>:
    d2e8:	434a      	muls	r2, r1
    d2ea:	b570      	push	{r4, r5, r6, lr}
    d2ec:	0011      	movs	r1, r2
    d2ee:	0014      	movs	r4, r2
    d2f0:	f7fe f96a 	bl	b5c8 <_malloc_r>
    d2f4:	1e05      	subs	r5, r0, #0
    d2f6:	d003      	beq.n	d300 <_calloc_r+0x18>
    d2f8:	0022      	movs	r2, r4
    d2fa:	2100      	movs	r1, #0
    d2fc:	f7fe f911 	bl	b522 <memset>
    d300:	0028      	movs	r0, r5
    d302:	bd70      	pop	{r4, r5, r6, pc}

0000d304 <_realloc_r>:
    d304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d306:	0007      	movs	r7, r0
    d308:	000d      	movs	r5, r1
    d30a:	0016      	movs	r6, r2
    d30c:	2900      	cmp	r1, #0
    d30e:	d105      	bne.n	d31c <_realloc_r+0x18>
    d310:	0011      	movs	r1, r2
    d312:	f7fe f959 	bl	b5c8 <_malloc_r>
    d316:	0004      	movs	r4, r0
    d318:	0020      	movs	r0, r4
    d31a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d31c:	2a00      	cmp	r2, #0
    d31e:	d103      	bne.n	d328 <_realloc_r+0x24>
    d320:	f7fe f908 	bl	b534 <_free_r>
    d324:	0034      	movs	r4, r6
    d326:	e7f7      	b.n	d318 <_realloc_r+0x14>
    d328:	f000 f978 	bl	d61c <_malloc_usable_size_r>
    d32c:	002c      	movs	r4, r5
    d32e:	4286      	cmp	r6, r0
    d330:	d9f2      	bls.n	d318 <_realloc_r+0x14>
    d332:	0031      	movs	r1, r6
    d334:	0038      	movs	r0, r7
    d336:	f7fe f947 	bl	b5c8 <_malloc_r>
    d33a:	1e04      	subs	r4, r0, #0
    d33c:	d0ec      	beq.n	d318 <_realloc_r+0x14>
    d33e:	0029      	movs	r1, r5
    d340:	0032      	movs	r2, r6
    d342:	f7fe f8d3 	bl	b4ec <memcpy>
    d346:	0029      	movs	r1, r5
    d348:	0038      	movs	r0, r7
    d34a:	f7fe f8f3 	bl	b534 <_free_r>
    d34e:	e7e3      	b.n	d318 <_realloc_r+0x14>

0000d350 <__ssputs_r>:
    d350:	b5f0      	push	{r4, r5, r6, r7, lr}
    d352:	688e      	ldr	r6, [r1, #8]
    d354:	b085      	sub	sp, #20
    d356:	0007      	movs	r7, r0
    d358:	000c      	movs	r4, r1
    d35a:	9203      	str	r2, [sp, #12]
    d35c:	9301      	str	r3, [sp, #4]
    d35e:	429e      	cmp	r6, r3
    d360:	d839      	bhi.n	d3d6 <__ssputs_r+0x86>
    d362:	2390      	movs	r3, #144	; 0x90
    d364:	898a      	ldrh	r2, [r1, #12]
    d366:	00db      	lsls	r3, r3, #3
    d368:	421a      	tst	r2, r3
    d36a:	d034      	beq.n	d3d6 <__ssputs_r+0x86>
    d36c:	2503      	movs	r5, #3
    d36e:	6909      	ldr	r1, [r1, #16]
    d370:	6823      	ldr	r3, [r4, #0]
    d372:	1a5b      	subs	r3, r3, r1
    d374:	9302      	str	r3, [sp, #8]
    d376:	6963      	ldr	r3, [r4, #20]
    d378:	9802      	ldr	r0, [sp, #8]
    d37a:	435d      	muls	r5, r3
    d37c:	0feb      	lsrs	r3, r5, #31
    d37e:	195d      	adds	r5, r3, r5
    d380:	9b01      	ldr	r3, [sp, #4]
    d382:	106d      	asrs	r5, r5, #1
    d384:	3301      	adds	r3, #1
    d386:	181b      	adds	r3, r3, r0
    d388:	42ab      	cmp	r3, r5
    d38a:	d900      	bls.n	d38e <__ssputs_r+0x3e>
    d38c:	001d      	movs	r5, r3
    d38e:	0553      	lsls	r3, r2, #21
    d390:	d532      	bpl.n	d3f8 <__ssputs_r+0xa8>
    d392:	0029      	movs	r1, r5
    d394:	0038      	movs	r0, r7
    d396:	f7fe f917 	bl	b5c8 <_malloc_r>
    d39a:	1e06      	subs	r6, r0, #0
    d39c:	d109      	bne.n	d3b2 <__ssputs_r+0x62>
    d39e:	230c      	movs	r3, #12
    d3a0:	603b      	str	r3, [r7, #0]
    d3a2:	2340      	movs	r3, #64	; 0x40
    d3a4:	2001      	movs	r0, #1
    d3a6:	89a2      	ldrh	r2, [r4, #12]
    d3a8:	4240      	negs	r0, r0
    d3aa:	4313      	orrs	r3, r2
    d3ac:	81a3      	strh	r3, [r4, #12]
    d3ae:	b005      	add	sp, #20
    d3b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d3b2:	9a02      	ldr	r2, [sp, #8]
    d3b4:	6921      	ldr	r1, [r4, #16]
    d3b6:	f7fe f899 	bl	b4ec <memcpy>
    d3ba:	89a3      	ldrh	r3, [r4, #12]
    d3bc:	4a14      	ldr	r2, [pc, #80]	; (d410 <__ssputs_r+0xc0>)
    d3be:	401a      	ands	r2, r3
    d3c0:	2380      	movs	r3, #128	; 0x80
    d3c2:	4313      	orrs	r3, r2
    d3c4:	81a3      	strh	r3, [r4, #12]
    d3c6:	9b02      	ldr	r3, [sp, #8]
    d3c8:	6126      	str	r6, [r4, #16]
    d3ca:	18f6      	adds	r6, r6, r3
    d3cc:	6026      	str	r6, [r4, #0]
    d3ce:	6165      	str	r5, [r4, #20]
    d3d0:	9e01      	ldr	r6, [sp, #4]
    d3d2:	1aed      	subs	r5, r5, r3
    d3d4:	60a5      	str	r5, [r4, #8]
    d3d6:	9b01      	ldr	r3, [sp, #4]
    d3d8:	42b3      	cmp	r3, r6
    d3da:	d200      	bcs.n	d3de <__ssputs_r+0x8e>
    d3dc:	001e      	movs	r6, r3
    d3de:	0032      	movs	r2, r6
    d3e0:	9903      	ldr	r1, [sp, #12]
    d3e2:	6820      	ldr	r0, [r4, #0]
    d3e4:	f7fe f88b 	bl	b4fe <memmove>
    d3e8:	68a3      	ldr	r3, [r4, #8]
    d3ea:	2000      	movs	r0, #0
    d3ec:	1b9b      	subs	r3, r3, r6
    d3ee:	60a3      	str	r3, [r4, #8]
    d3f0:	6823      	ldr	r3, [r4, #0]
    d3f2:	199e      	adds	r6, r3, r6
    d3f4:	6026      	str	r6, [r4, #0]
    d3f6:	e7da      	b.n	d3ae <__ssputs_r+0x5e>
    d3f8:	002a      	movs	r2, r5
    d3fa:	0038      	movs	r0, r7
    d3fc:	f7ff ff82 	bl	d304 <_realloc_r>
    d400:	1e06      	subs	r6, r0, #0
    d402:	d1e0      	bne.n	d3c6 <__ssputs_r+0x76>
    d404:	6921      	ldr	r1, [r4, #16]
    d406:	0038      	movs	r0, r7
    d408:	f7fe f894 	bl	b534 <_free_r>
    d40c:	e7c7      	b.n	d39e <__ssputs_r+0x4e>
    d40e:	46c0      	nop			; (mov r8, r8)
    d410:	fffffb7f 	.word	0xfffffb7f

0000d414 <_svfiprintf_r>:
    d414:	b5f0      	push	{r4, r5, r6, r7, lr}
    d416:	b09f      	sub	sp, #124	; 0x7c
    d418:	9002      	str	r0, [sp, #8]
    d41a:	9305      	str	r3, [sp, #20]
    d41c:	898b      	ldrh	r3, [r1, #12]
    d41e:	000f      	movs	r7, r1
    d420:	0016      	movs	r6, r2
    d422:	061b      	lsls	r3, r3, #24
    d424:	d511      	bpl.n	d44a <_svfiprintf_r+0x36>
    d426:	690b      	ldr	r3, [r1, #16]
    d428:	2b00      	cmp	r3, #0
    d42a:	d10e      	bne.n	d44a <_svfiprintf_r+0x36>
    d42c:	2140      	movs	r1, #64	; 0x40
    d42e:	f7fe f8cb 	bl	b5c8 <_malloc_r>
    d432:	6038      	str	r0, [r7, #0]
    d434:	6138      	str	r0, [r7, #16]
    d436:	2800      	cmp	r0, #0
    d438:	d105      	bne.n	d446 <_svfiprintf_r+0x32>
    d43a:	230c      	movs	r3, #12
    d43c:	9a02      	ldr	r2, [sp, #8]
    d43e:	3801      	subs	r0, #1
    d440:	6013      	str	r3, [r2, #0]
    d442:	b01f      	add	sp, #124	; 0x7c
    d444:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d446:	2340      	movs	r3, #64	; 0x40
    d448:	617b      	str	r3, [r7, #20]
    d44a:	2300      	movs	r3, #0
    d44c:	ad06      	add	r5, sp, #24
    d44e:	616b      	str	r3, [r5, #20]
    d450:	3320      	adds	r3, #32
    d452:	766b      	strb	r3, [r5, #25]
    d454:	3310      	adds	r3, #16
    d456:	76ab      	strb	r3, [r5, #26]
    d458:	0034      	movs	r4, r6
    d45a:	7823      	ldrb	r3, [r4, #0]
    d45c:	2b00      	cmp	r3, #0
    d45e:	d147      	bne.n	d4f0 <_svfiprintf_r+0xdc>
    d460:	1ba3      	subs	r3, r4, r6
    d462:	9304      	str	r3, [sp, #16]
    d464:	d00d      	beq.n	d482 <_svfiprintf_r+0x6e>
    d466:	1ba3      	subs	r3, r4, r6
    d468:	0032      	movs	r2, r6
    d46a:	0039      	movs	r1, r7
    d46c:	9802      	ldr	r0, [sp, #8]
    d46e:	f7ff ff6f 	bl	d350 <__ssputs_r>
    d472:	1c43      	adds	r3, r0, #1
    d474:	d100      	bne.n	d478 <_svfiprintf_r+0x64>
    d476:	e0b5      	b.n	d5e4 <_svfiprintf_r+0x1d0>
    d478:	696a      	ldr	r2, [r5, #20]
    d47a:	9b04      	ldr	r3, [sp, #16]
    d47c:	4694      	mov	ip, r2
    d47e:	4463      	add	r3, ip
    d480:	616b      	str	r3, [r5, #20]
    d482:	7823      	ldrb	r3, [r4, #0]
    d484:	2b00      	cmp	r3, #0
    d486:	d100      	bne.n	d48a <_svfiprintf_r+0x76>
    d488:	e0ac      	b.n	d5e4 <_svfiprintf_r+0x1d0>
    d48a:	2201      	movs	r2, #1
    d48c:	2300      	movs	r3, #0
    d48e:	4252      	negs	r2, r2
    d490:	606a      	str	r2, [r5, #4]
    d492:	a902      	add	r1, sp, #8
    d494:	3254      	adds	r2, #84	; 0x54
    d496:	1852      	adds	r2, r2, r1
    d498:	3401      	adds	r4, #1
    d49a:	602b      	str	r3, [r5, #0]
    d49c:	60eb      	str	r3, [r5, #12]
    d49e:	60ab      	str	r3, [r5, #8]
    d4a0:	7013      	strb	r3, [r2, #0]
    d4a2:	65ab      	str	r3, [r5, #88]	; 0x58
    d4a4:	4e58      	ldr	r6, [pc, #352]	; (d608 <_svfiprintf_r+0x1f4>)
    d4a6:	2205      	movs	r2, #5
    d4a8:	7821      	ldrb	r1, [r4, #0]
    d4aa:	0030      	movs	r0, r6
    d4ac:	f7ff fc2c 	bl	cd08 <memchr>
    d4b0:	1c62      	adds	r2, r4, #1
    d4b2:	2800      	cmp	r0, #0
    d4b4:	d120      	bne.n	d4f8 <_svfiprintf_r+0xe4>
    d4b6:	6829      	ldr	r1, [r5, #0]
    d4b8:	06cb      	lsls	r3, r1, #27
    d4ba:	d504      	bpl.n	d4c6 <_svfiprintf_r+0xb2>
    d4bc:	2353      	movs	r3, #83	; 0x53
    d4be:	ae02      	add	r6, sp, #8
    d4c0:	3020      	adds	r0, #32
    d4c2:	199b      	adds	r3, r3, r6
    d4c4:	7018      	strb	r0, [r3, #0]
    d4c6:	070b      	lsls	r3, r1, #28
    d4c8:	d504      	bpl.n	d4d4 <_svfiprintf_r+0xc0>
    d4ca:	2353      	movs	r3, #83	; 0x53
    d4cc:	202b      	movs	r0, #43	; 0x2b
    d4ce:	ae02      	add	r6, sp, #8
    d4d0:	199b      	adds	r3, r3, r6
    d4d2:	7018      	strb	r0, [r3, #0]
    d4d4:	7823      	ldrb	r3, [r4, #0]
    d4d6:	2b2a      	cmp	r3, #42	; 0x2a
    d4d8:	d016      	beq.n	d508 <_svfiprintf_r+0xf4>
    d4da:	2000      	movs	r0, #0
    d4dc:	210a      	movs	r1, #10
    d4de:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d4e0:	7822      	ldrb	r2, [r4, #0]
    d4e2:	3a30      	subs	r2, #48	; 0x30
    d4e4:	2a09      	cmp	r2, #9
    d4e6:	d955      	bls.n	d594 <_svfiprintf_r+0x180>
    d4e8:	2800      	cmp	r0, #0
    d4ea:	d015      	beq.n	d518 <_svfiprintf_r+0x104>
    d4ec:	9309      	str	r3, [sp, #36]	; 0x24
    d4ee:	e013      	b.n	d518 <_svfiprintf_r+0x104>
    d4f0:	2b25      	cmp	r3, #37	; 0x25
    d4f2:	d0b5      	beq.n	d460 <_svfiprintf_r+0x4c>
    d4f4:	3401      	adds	r4, #1
    d4f6:	e7b0      	b.n	d45a <_svfiprintf_r+0x46>
    d4f8:	2301      	movs	r3, #1
    d4fa:	1b80      	subs	r0, r0, r6
    d4fc:	4083      	lsls	r3, r0
    d4fe:	6829      	ldr	r1, [r5, #0]
    d500:	0014      	movs	r4, r2
    d502:	430b      	orrs	r3, r1
    d504:	602b      	str	r3, [r5, #0]
    d506:	e7cd      	b.n	d4a4 <_svfiprintf_r+0x90>
    d508:	9b05      	ldr	r3, [sp, #20]
    d50a:	1d18      	adds	r0, r3, #4
    d50c:	681b      	ldr	r3, [r3, #0]
    d50e:	9005      	str	r0, [sp, #20]
    d510:	2b00      	cmp	r3, #0
    d512:	db39      	blt.n	d588 <_svfiprintf_r+0x174>
    d514:	9309      	str	r3, [sp, #36]	; 0x24
    d516:	0014      	movs	r4, r2
    d518:	7823      	ldrb	r3, [r4, #0]
    d51a:	2b2e      	cmp	r3, #46	; 0x2e
    d51c:	d10b      	bne.n	d536 <_svfiprintf_r+0x122>
    d51e:	7863      	ldrb	r3, [r4, #1]
    d520:	1c62      	adds	r2, r4, #1
    d522:	2b2a      	cmp	r3, #42	; 0x2a
    d524:	d13e      	bne.n	d5a4 <_svfiprintf_r+0x190>
    d526:	9b05      	ldr	r3, [sp, #20]
    d528:	3402      	adds	r4, #2
    d52a:	1d1a      	adds	r2, r3, #4
    d52c:	681b      	ldr	r3, [r3, #0]
    d52e:	9205      	str	r2, [sp, #20]
    d530:	2b00      	cmp	r3, #0
    d532:	db34      	blt.n	d59e <_svfiprintf_r+0x18a>
    d534:	9307      	str	r3, [sp, #28]
    d536:	4e35      	ldr	r6, [pc, #212]	; (d60c <_svfiprintf_r+0x1f8>)
    d538:	7821      	ldrb	r1, [r4, #0]
    d53a:	2203      	movs	r2, #3
    d53c:	0030      	movs	r0, r6
    d53e:	f7ff fbe3 	bl	cd08 <memchr>
    d542:	2800      	cmp	r0, #0
    d544:	d006      	beq.n	d554 <_svfiprintf_r+0x140>
    d546:	2340      	movs	r3, #64	; 0x40
    d548:	1b80      	subs	r0, r0, r6
    d54a:	4083      	lsls	r3, r0
    d54c:	682a      	ldr	r2, [r5, #0]
    d54e:	3401      	adds	r4, #1
    d550:	4313      	orrs	r3, r2
    d552:	602b      	str	r3, [r5, #0]
    d554:	7821      	ldrb	r1, [r4, #0]
    d556:	2206      	movs	r2, #6
    d558:	482d      	ldr	r0, [pc, #180]	; (d610 <_svfiprintf_r+0x1fc>)
    d55a:	1c66      	adds	r6, r4, #1
    d55c:	7629      	strb	r1, [r5, #24]
    d55e:	f7ff fbd3 	bl	cd08 <memchr>
    d562:	2800      	cmp	r0, #0
    d564:	d046      	beq.n	d5f4 <_svfiprintf_r+0x1e0>
    d566:	4b2b      	ldr	r3, [pc, #172]	; (d614 <_svfiprintf_r+0x200>)
    d568:	2b00      	cmp	r3, #0
    d56a:	d12f      	bne.n	d5cc <_svfiprintf_r+0x1b8>
    d56c:	6829      	ldr	r1, [r5, #0]
    d56e:	9b05      	ldr	r3, [sp, #20]
    d570:	2207      	movs	r2, #7
    d572:	05c9      	lsls	r1, r1, #23
    d574:	d528      	bpl.n	d5c8 <_svfiprintf_r+0x1b4>
    d576:	189b      	adds	r3, r3, r2
    d578:	4393      	bics	r3, r2
    d57a:	3308      	adds	r3, #8
    d57c:	9305      	str	r3, [sp, #20]
    d57e:	696b      	ldr	r3, [r5, #20]
    d580:	9a03      	ldr	r2, [sp, #12]
    d582:	189b      	adds	r3, r3, r2
    d584:	616b      	str	r3, [r5, #20]
    d586:	e767      	b.n	d458 <_svfiprintf_r+0x44>
    d588:	425b      	negs	r3, r3
    d58a:	60eb      	str	r3, [r5, #12]
    d58c:	2302      	movs	r3, #2
    d58e:	430b      	orrs	r3, r1
    d590:	602b      	str	r3, [r5, #0]
    d592:	e7c0      	b.n	d516 <_svfiprintf_r+0x102>
    d594:	434b      	muls	r3, r1
    d596:	3401      	adds	r4, #1
    d598:	189b      	adds	r3, r3, r2
    d59a:	2001      	movs	r0, #1
    d59c:	e7a0      	b.n	d4e0 <_svfiprintf_r+0xcc>
    d59e:	2301      	movs	r3, #1
    d5a0:	425b      	negs	r3, r3
    d5a2:	e7c7      	b.n	d534 <_svfiprintf_r+0x120>
    d5a4:	2300      	movs	r3, #0
    d5a6:	0014      	movs	r4, r2
    d5a8:	200a      	movs	r0, #10
    d5aa:	001a      	movs	r2, r3
    d5ac:	606b      	str	r3, [r5, #4]
    d5ae:	7821      	ldrb	r1, [r4, #0]
    d5b0:	3930      	subs	r1, #48	; 0x30
    d5b2:	2909      	cmp	r1, #9
    d5b4:	d903      	bls.n	d5be <_svfiprintf_r+0x1aa>
    d5b6:	2b00      	cmp	r3, #0
    d5b8:	d0bd      	beq.n	d536 <_svfiprintf_r+0x122>
    d5ba:	9207      	str	r2, [sp, #28]
    d5bc:	e7bb      	b.n	d536 <_svfiprintf_r+0x122>
    d5be:	4342      	muls	r2, r0
    d5c0:	3401      	adds	r4, #1
    d5c2:	1852      	adds	r2, r2, r1
    d5c4:	2301      	movs	r3, #1
    d5c6:	e7f2      	b.n	d5ae <_svfiprintf_r+0x19a>
    d5c8:	3307      	adds	r3, #7
    d5ca:	e7d5      	b.n	d578 <_svfiprintf_r+0x164>
    d5cc:	ab05      	add	r3, sp, #20
    d5ce:	9300      	str	r3, [sp, #0]
    d5d0:	003a      	movs	r2, r7
    d5d2:	4b11      	ldr	r3, [pc, #68]	; (d618 <_svfiprintf_r+0x204>)
    d5d4:	0029      	movs	r1, r5
    d5d6:	9802      	ldr	r0, [sp, #8]
    d5d8:	f7fe f8f0 	bl	b7bc <_printf_float>
    d5dc:	9003      	str	r0, [sp, #12]
    d5de:	9b03      	ldr	r3, [sp, #12]
    d5e0:	3301      	adds	r3, #1
    d5e2:	d1cc      	bne.n	d57e <_svfiprintf_r+0x16a>
    d5e4:	89bb      	ldrh	r3, [r7, #12]
    d5e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d5e8:	065b      	lsls	r3, r3, #25
    d5ea:	d400      	bmi.n	d5ee <_svfiprintf_r+0x1da>
    d5ec:	e729      	b.n	d442 <_svfiprintf_r+0x2e>
    d5ee:	2001      	movs	r0, #1
    d5f0:	4240      	negs	r0, r0
    d5f2:	e726      	b.n	d442 <_svfiprintf_r+0x2e>
    d5f4:	ab05      	add	r3, sp, #20
    d5f6:	9300      	str	r3, [sp, #0]
    d5f8:	003a      	movs	r2, r7
    d5fa:	4b07      	ldr	r3, [pc, #28]	; (d618 <_svfiprintf_r+0x204>)
    d5fc:	0029      	movs	r1, r5
    d5fe:	9802      	ldr	r0, [sp, #8]
    d600:	f7fe fb96 	bl	bd30 <_printf_i>
    d604:	e7ea      	b.n	d5dc <_svfiprintf_r+0x1c8>
    d606:	46c0      	nop			; (mov r8, r8)
    d608:	0000e314 	.word	0x0000e314
    d60c:	0000e31a 	.word	0x0000e31a
    d610:	0000e31e 	.word	0x0000e31e
    d614:	0000b7bd 	.word	0x0000b7bd
    d618:	0000d351 	.word	0x0000d351

0000d61c <_malloc_usable_size_r>:
    d61c:	1f0b      	subs	r3, r1, #4
    d61e:	681b      	ldr	r3, [r3, #0]
    d620:	1f18      	subs	r0, r3, #4
    d622:	2b00      	cmp	r3, #0
    d624:	da01      	bge.n	d62a <_malloc_usable_size_r+0xe>
    d626:	580b      	ldr	r3, [r1, r0]
    d628:	18c0      	adds	r0, r0, r3
    d62a:	4770      	bx	lr

0000d62c <_sbrk>:
    d62c:	4a04      	ldr	r2, [pc, #16]	; (d640 <_sbrk+0x14>)
    d62e:	6813      	ldr	r3, [r2, #0]
    d630:	2b00      	cmp	r3, #0
    d632:	d003      	beq.n	d63c <_sbrk+0x10>
    d634:	1818      	adds	r0, r3, r0
    d636:	6010      	str	r0, [r2, #0]
    d638:	0018      	movs	r0, r3
    d63a:	4770      	bx	lr
    d63c:	4b01      	ldr	r3, [pc, #4]	; (d644 <_sbrk+0x18>)
    d63e:	e7f9      	b.n	d634 <_sbrk+0x8>
    d640:	20000a24 	.word	0x20000a24
    d644:	20000a2c 	.word	0x20000a2c

0000d648 <_init>:
    d648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d64a:	46c0      	nop			; (mov r8, r8)
    d64c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    d64e:	bc08      	pop	{r3}
    d650:	469e      	mov	lr, r3
    d652:	4770      	bx	lr

0000d654 <_fini>:
    d654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d656:	46c0      	nop			; (mov r8, r8)
    d658:	bcf8      	pop	{r3, r4, r5, r6, r7}
    d65a:	bc08      	pop	{r3}
    d65c:	469e      	mov	lr, r3
    d65e:	4770      	bx	lr

0000d660 <_ZL9crc_table>:
    d660:	0000 1021 2042 3063 4084 50a5 60c6 70e7     ..!.B c0.@.P.`.p
    d670:	8108 9129 a14a b16b c18c d1ad e1ce f1ef     ..).J.k.........
    d680:	1231 0210 3273 2252 52b5 4294 72f7 62d6     1...s2R".R.B.r.b
    d690:	9339 8318 b37b a35a d3bd c39c f3ff e3de     9...{.Z.........
    d6a0:	2462 3443 0420 1401 64e6 74c7 44a4 5485     b$C4 ....d.t.D.T
    d6b0:	a56a b54b 8528 9509 e5ee f5cf c5ac d58d     j.K.(...........
    d6c0:	3653 2672 1611 0630 76d7 66f6 5695 46b4     S6r&..0..v.f.V.F
    d6d0:	b75b a77a 9719 8738 f7df e7fe d79d c7bc     [.z...8.........
    d6e0:	48c4 58e5 6886 78a7 0840 1861 2802 3823     .H.X.h.x@.a..(#8
    d6f0:	c9cc d9ed e98e f9af 8948 9969 a90a b92b     ........H.i...+.
    d700:	5af5 4ad4 7ab7 6a96 1a71 0a50 3a33 2a12     .Z.J.z.jq.P.3:.*
    d710:	dbfd cbdc fbbf eb9e 9b79 8b58 bb3b ab1a     ........y.X.;...
    d720:	6ca6 7c87 4ce4 5cc5 2c22 3c03 0c60 1c41     .l.|.L.\",.<`.A.
    d730:	edae fd8f cdec ddcd ad2a bd0b 8d68 9d49     ........*...h.I.
    d740:	7e97 6eb6 5ed5 4ef4 3e13 2e32 1e51 0e70     .~.n.^.N.>2.Q.p.
    d750:	ff9f efbe dfdd cffc bf1b af3a 9f59 8f78     ..........:.Y.x.
    d760:	9188 81a9 b1ca a1eb d10c c12d f14e e16f     ..........-.N.o.
    d770:	1080 00a1 30c2 20e3 5004 4025 7046 6067     .....0. .P%@Fpg`
    d780:	83b9 9398 a3fb b3da c33d d31c e37f f35e     ........=.....^.
    d790:	02b1 1290 22f3 32d2 4235 5214 6277 7256     .....".25B.RwbVr
    d7a0:	b5ea a5cb 95a8 8589 f56e e54f d52c c50d     ........n.O.,...
    d7b0:	34e2 24c3 14a0 0481 7466 6447 5424 4405     .4.$....ftGd$T.D
    d7c0:	a7db b7fa 8799 97b8 e75f f77e c71d d73c     ........_.~...<.
    d7d0:	26d3 36f2 0691 16b0 6657 7676 4615 5634     .&.6....Wfvv.F4V
    d7e0:	d94c c96d f90e e92f 99c8 89e9 b98a a9ab     L.m.../.........
    d7f0:	5844 4865 7806 6827 18c0 08e1 3882 28a3     DXeH.x'h.....8.(
    d800:	cb7d db5c eb3f fb1e 8bf9 9bd8 abbb bb9a     }.\.?...........
    d810:	4a75 5a54 6a37 7a16 0af1 1ad0 2ab3 3a92     uJTZ7j.z.....*.:
    d820:	fd2e ed0f dd6c cd4d bdaa ad8b 9de8 8dc9     ....l.M.........
    d830:	7c26 6c07 5c64 4c45 3ca2 2c83 1ce0 0cc1     &|.ld\EL.<.,....
    d840:	ef1f ff3e cf5d df7c af9b bfba 8fd9 9ff8     ..>.].|.........
    d850:	6e17 7e36 4e55 5e74 2e93 3eb2 0ed1 1ef0     .n6~UNt^...>....

0000d860 <_ZTV9SX1280Hal>:
	...
    d868:	24f7 0000 2521 0000 252d 0000 29eb 0000     .$..!%..-%...)..
    d878:	25c1 0000 2639 0000 26d5 0000 24f9 0000     .%..9&...&...$..
    d888:	2759 0000 250d 0000 27e9 0000 2865 0000     Y'...%...'..e(..
    d898:	29c7 0000 2565 0000 2a05 0000               .)..e%...*..

0000d8a4 <_ZTV16FrSkySportSensor>:
	...
    d8ac:	314d 0000 314f 0000                         M1..O1..

0000d8b4 <_ZTV19FrSkySportSensorGps>:
	...
    d8bc:	3259 0000 3169 0000 5024 544d 334b 3431     Y2..i1..$PMTK314
    d8cc:	302c 302c 302c 312c 302c 302c 302c 302c     ,0,0,0,1,0,0,0,0
    d8dc:	302c 302c 302c 302c 302c 302c 302c 302c     ,0,0,0,0,0,0,0,0
    d8ec:	302c 302c 302c 322a 0039 5024 544d 324b     ,0,0,0*29.$PMTK2
    d8fc:	3135 312c 3239 3030 322a 0032 5024 544d     51,19200*22.$PMT
    d90c:	324b 3135 332c 3438 3030 322a 0037 5024     K251,38400*27.$P
    d91c:	544d 324b 3135 352c 3637 3030 322a 0043     MTK251,57600*2C.
    d92c:	4320 4352 4f20 2c4b 5520 6470 7461 6e69      CRC OK, Updatin
    d93c:	2067 5047 2053 6164 6174 3e2d 5500 4354     g GPS data->.UTC
    d94c:	003a 7323 7461 003d 4620 7869 003a 4241     :.#sat=. Fix:.AB
    d95c:	4443 4645 4847 4a49 4c4b 4e4d 504f 5251     CDEFGHIJKLMNOPQR
    d96c:	5453 5655 5857 5a59 6261 6463 6665 6867     STUVWXYZabcdefgh
    d97c:	6a69 6c6b 6e6d 706f 7271 7473 7675 7877     ijklmnopqrstuvwx
    d98c:	7a79 3130 3332 3534 3736 3938 2f2b 4900     yz0123456789+/.I
    d99c:	206d 7267 756f 646e 7473 7461 6f69 2c6e     m groundstation,
    d9ac:	4e20 506f 6e69 2167 5300 6977 6374 3a68      NoPing!.Switch:
    d9bc:	5300 6174 7472 6e69 2067 4352 5420 6172     .Starting RC Tra
    d9cc:	736e 6f70 646e 7265 7620 7265 202e 2e00     nsponder ver. ..
    d9dc:	4300 6968 2070 6e75 7169 6575 7320 7265     .Chip unique ser
    d9ec:	6169 206c 756e 626d 7265 7020 7261 2074     ial number part 
    d9fc:	3a31 4300 6968 2070 6e75 7169 6575 7320     1:.Chip unique s
    da0c:	7265 6169 206c 756e 626d 7265 7020 7261     erial number par
    da1c:	2074 3a32 4300 6968 2070 6e75 7169 6575     t 2:.Chip unique
    da2c:	7320 7265 6169 206c 756e 626d 7265 7020      serial number p
    da3c:	7261 2074 3a33 4300 6968 2070 6e75 7169     art 3:.Chip uniq
    da4c:	6575 7320 7265 6169 206c 756e 626d 7265     ue serial number
    da5c:	7020 7261 2074 3a34 4300 6968 2070 6e75      part 4:.Chip un
    da6c:	7169 6575 7320 7265 6169 206c 756e 626d     ique serial numb
    da7c:	7265 203a 0022 6843 7069 7520 696e 7571     er: ".Chip uniqu
    da8c:	2065 6573 6972 6c61 6e20 6d75 6562 2072     e serial number 
    da9c:	6e69 4220 7361 3665 2034 6e65 6f63 6564     in Base64 encode
    daac:	223a 0000                                   :"..

0000dab0 <_ZTV10RFProtocol>:
	...
    dab8:	5f75 0000 5f75 0000 5f75 0000 7245 6f72     u_..u_..u_..Erro
    dac8:	2172 2d20 5420 2078 4946 4f46 4620 6c75     r! - Tx FIFO Ful
    dad8:	2c6c 5520 616e 6c62 2065 6f74 7320 6e65     l, Unable to sen
    dae8:	2064 6542 6361 6e6f 6d20 7365 6173 6567     d Beacon message
    daf8:	4900 2074 6177 2073 6461 6564 2064 6f74     .It was added to
    db08:	7420 6568 6c20 7369 2074 7461 003a 0000      the list at:...

0000db18 <_ZTV9RFService>:
	...
    db20:	4e69 0000 5119 0000 5389 0000               iN...Q...S..

0000db2c <_ZTV8Telegram>:
	...
    db34:	5f75 0000 0000 0000 0000 0000               u_..........

0000db40 <_ZTV14Telegram_MSG_1>:
	...
    db48:	5575 0000 5573 0000 5577 0000               uU..sU..wU..

0000db54 <_ZTV14Telegram_MSG_2>:
	...
    db5c:	58ab 0000 58a9 0000 58ad 0000               .X...X...X..

0000db68 <_ZTV14Telegram_MSG_3>:
	...
    db70:	5be3 0000 5be1 0000 5be5 0000 0a0d 0000     .[...[...[......

0000db80 <_ZTV4Uart>:
	...
    db88:	66a5 0000 60d1 0000 65e3 0000 659f 0000     .f...`...e...e..
    db98:	65b9 0000 6759 0000 636d 0000 635d 0000     .e..Yg..mc..]c..
    dba8:	6405 0000 6387 0000 6359 0000               .d...c..Yc..

0000dbb4 <_ZTV7Serial_>:
	...
    dbbc:	67a9 0000 67d5 0000 67a5 0000 67c9 0000     .g...g...g...g..
    dbcc:	67bd 0000 680d 0000 67f1 0000               .g...h...g..

0000dbd8 <_ZTV26DoubleBufferedEPOutHandler>:
	...
    dbe0:	6c4b 0000 6b2d 0000 6a89 0000               Kl..-k...j..

0000dbec <_ZL14STRING_PRODUCT>:
    dbec:	7241 7564 6e69 206f 4b4d 5a52 7265 006f     Arduino MKRZero.

0000dbfc <_ZL15STRING_LANGUAGE>:
    dbfc:	0304 0409                                   ....

0000dc00 <_ZL19STRING_MANUFACTURER>:
    dc00:	7241 7564 6e69 206f 4c4c 0043               Arduino LLC.

0000dc0c <_ZL21USB_DeviceDescriptorB>:
    dc0c:	0112 0200 02ef 4001 2341 804f 0100 0201     .......@A#O.....
    dc1c:	0103 0000                                   ....

0000dc20 <g_APinDescription>:
    dc20:	0000 0000 0016 0000 0008 0000 001c 0000     ................
    dc30:	00ff 0400 0400 0006 0000 0000 0017 0000     ................
    dc40:	0008 0000 001c 0000 00ff 0401 0401 0007     ................
    dc50:	0000 0000 000a 0000 0008 0000 001c 0000     ................
    dc60:	0012 0100 0100 00ff 0000 0000 000b 0000     ................
    dc70:	0008 0000 001c 0000 0013 0101 0101 00ff     ................
    dc80:	0001 0000 000a 0000 0008 0000 001c 0000     ................
    dc90:	00ff 0500 0500 000a 0001 0000 000b 0000     ................
    dca0:	0008 0000 001c 0000 00ff 0501 0501 000b     ................
    dcb0:	0000 0000 0014 0000 0008 0000 002c 0000     ............,...
    dcc0:	00ff 0002 0002 0004 0000 0000 0015 0000     ................
    dcd0:	0008 0000 002c 0000 00ff 0003 0003 0005     ....,...........
    dce0:	0000 0000 0010 0000 0002 0000 001c 0000     ................
    dcf0:	00ff 0200 0200 0000 0000 0000 0011 0000     ................
    dd00:	0002 0000 0004 0000 00ff ffff ffff 0001     ................
    dd10:	0000 0000 0013 0000 0002 0000 001c 0000     ................
    dd20:	00ff 0301 0301 00ff 0000 0000 0008 0000     ................
    dd30:	0002 0000 0004 0000 0010 ffff ffff 0010     ................
    dd40:	0000 0000 0009 0000 0002 0000 0004 0000     ................
    dd50:	0011 ffff ffff 00ff 0001 0000 0017 0000     ................
    dd60:	0003 0000 0004 0000 00ff ffff ffff 00ff     ................
    dd70:	0001 0000 0016 0000 0003 0000 0004 0000     ................
    dd80:	00ff ffff ffff 00ff 0000 0000 0002 0000     ................
    dd90:	0001 0000 0006 0000 0000 ffff ffff 00ff     ................
    dda0:	0001 0000 0002 0000 0001 0000 0004 0000     ................
    ddb0:	000a ffff ffff 0002 0001 0000 0003 0000     ................
    ddc0:	0001 0000 0004 0000 000b ffff ffff 0003     ................
    ddd0:	0000 0000 0004 0000 0001 0000 001c 0000     ................
    dde0:	0004 0000 0000 00ff 0000 0000 0005 0000     ................
    ddf0:	0001 0000 001c 0000 0005 0001 0001 00ff     ................
    de00:	0000 0000 0006 0000 0001 0000 0004 0000     ................
    de10:	0006 ffff ffff 00ff 0000 0000 0007 0000     ................
    de20:	0001 0000 0004 0000 0007 ffff ffff 00ff     ................
    de30:	0000 0000 0018 0000 0006 0000 0000 0000     ................
    de40:	00ff ffff ffff 00ff 0000 0000 0019 0000     ................
    de50:	0006 0000 0000 0000 00ff ffff ffff 00ff     ................
    de60:	0000 0000 0012 0000 0008 0000 0004 0000     ................
    de70:	00ff ffff ffff 00ff 0000 0000 0003 0000     ................
    de80:	0008 0000 0004 0000 00ff ffff ffff 0003     ................
    de90:	0000 0000 000c 0000 0002 0000 0000 0000     ................
    dea0:	00ff ffff ffff 00ff 0000 0000 000d 0000     ................
    deb0:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    dec0:	0000 0000 000e 0000 0008 0000 0000 0000     ................
    ded0:	00ff ffff ffff 00ff 0000 0000 000f 0000     ................
    dee0:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    def0:	0000 0000 001b 0000 0008 0000 0000 0000     ................
    df00:	00ff ffff ffff 000f 0000 0000 001c 0000     ................
    df10:	0008 0000 0000 0000 00ff ffff ffff 00ff     ................
    df20:	0001 0000 0008 0000 0008 0000 0000 0000     ................
    df30:	00ff ffff ffff 00ff 0001 0000 0009 0000     ................
    df40:	0001 0000 0018 0000 0003 0401 0401 0009     ................
	...
    df58:	0008 0000 0000 0000 00ff ffff ffff 00ff     ................
    df68:	0000 0000 0001 0000 0008 0000 0000 0000     ................
    df78:	00ff ffff ffff 00ff 2525 6425 252e 6664     ........%%%d.%df
    df88:	0000 0000 8dc0 0000 8d90 0000 8da2 0000     ................
    df98:	8ce4 0000 8da2 0000 8d86 0000 8da2 0000     ................
    dfa8:	8ce4 0000 8d90 0000 8d90 0000 8d86 0000     ................
    dfb8:	8ce4 0000 8cec 0000 8cec 0000 8cec 0000     ................
    dfc8:	8da8 0000 8d90 0000 8d90 0000 8d64 0000     ............d...
    dfd8:	8e48 0000 8d64 0000 8d86 0000 8d64 0000     H...d.......d...
    dfe8:	8e48 0000 8d90 0000 8d90 0000 8d86 0000     H...............
    dff8:	8e48 0000 8cec 0000 8cec 0000 8cec 0000     H...............
    e008:	8e52 0000 9140 0000 9090 0000 9090 0000     R...@...........
    e018:	908e 0000 9132 0000 9132 0000 9128 0000     ....2...2...(...
    e028:	908e 0000 9132 0000 9128 0000 9132 0000     ....2...(...2...
    e038:	908e 0000 9138 0000 9138 0000 9138 0000     ....8...8...8...
    e048:	91c8 0000 9f10 0000 9ef2 0000 9eac 0000     ................
    e058:	9dca 0000 9eac 0000 9ee4 0000 9eac 0000     ................
    e068:	9dca 0000 9ef2 0000 9ef2 0000 9ee4 0000     ................
    e078:	9dca 0000 9dc2 0000 9dc2 0000 9dc2 0000     ................
    e088:	a128 0000 a770 0000 a630 0000 a630 0000     (...p...0...0...
    e098:	a62c 0000 a748 0000 a748 0000 a73a 0000     ,...H...H...:...
    e0a8:	a62c 0000 a748 0000 a73a 0000 a748 0000     ,...H...:...H...
    e0b8:	a62c 0000 a750 0000 a750 0000 a750 0000     ,...P...P...P...
    e0c8:	a954 0000 4f50 4953 0058 4e49 0046 6e69     T...POSIX.INF.in
    e0d8:	0066 414e 004e 616e 006e 0030 3130 3332     f.NAN.nan.0.0123
    e0e8:	3534 3736 3938 4241 4443 4645 3000 3231     456789ABCDEF.012
    e0f8:	3433 3635 3837 6139 6362 6564 0066          3456789abcdef.

0000e106 <_ctype_>:
    e106:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
    e116:	2020 2020 2020 2020 2020 2020 2020 2020                     
    e126:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
    e136:	0410 0404 0404 0404 0404 1004 1010 1010     ................
    e146:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
    e156:	0101 0101 0101 0101 0101 0101 1010 1010     ................
    e166:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
    e176:	0202 0202 0202 0202 0202 0202 1010 1010     ................
    e186:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
    e206:	4900 666e 6e69 7469 0079 614e 004e 0000     .Infinity.NaN...
	...

0000e218 <__mprec_bigtens>:
    e218:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
    e228:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
    e238:	bf3c 7f73 4fdd 7515                         <.s..O.u

0000e240 <__mprec_tens>:
    e240:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
    e250:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
    e260:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
    e270:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
    e280:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
    e290:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
    e2a0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
    e2b0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
    e2c0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
    e2d0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
    e2e0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
    e2f0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
    e300:	9db4 79d9 7843 44ea                         ...yCx.D

0000e308 <p05.6047>:
    e308:	0005 0000 0019 0000 007d 0000 2d23 2b30     ........}...#-0+
    e318:	0020 6c68 004c 6665 4567 4746 0000 0000      .hlL.efgEFG....

0000e328 <__EH_FRAME_BEGIN__>:
    e328:	0000 0000                                   ....
