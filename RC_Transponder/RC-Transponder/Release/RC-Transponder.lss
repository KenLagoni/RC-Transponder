
RC-Transponder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a36c  00002000  00002000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000130  20000000  0000c36c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000854  20000130  0000c49c  00010130  2**2
                  ALLOC
  3 .ARM.attributes 00000028  00000000  00000000  00010130  2**0
                  CONTENTS, READONLY
  4 .comment      00000059  00000000  00000000  00010158  2**0
                  CONTENTS, READONLY
  5 .debug_info   000d4141  00000000  00000000  000101b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000f5cf  00000000  00000000  000e42f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00012eca  00000000  00000000  000f38c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000015b0  00000000  00000000  0010678b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00002700  00000000  00000000  00107d3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0002504f  00000000  00000000  0010a43b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000205b0  00000000  00000000  0012f48a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00095b7c  00000000  00000000  0014fa3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000b92c  00000000  00000000  001e55b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .stab         00000030  00000000  00000000  001f10d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .stabstr      000001ed  00000000  00000000  001f0ee4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00002000 <exception_table>:
    2000:	00 80 00 20 fd 60 00 00 b9 60 00 00 b9 60 00 00     ... .`...`...`..
	...
    202c:	b9 60 00 00 00 00 00 00 00 00 00 00 b9 60 00 00     .`...........`..
    203c:	51 61 00 00 b9 60 00 00 b9 60 00 00 b9 60 00 00     Qa...`...`...`..
    204c:	b9 60 00 00 b9 60 00 00 b9 60 00 00 b9 60 00 00     .`...`...`...`..
    205c:	a5 60 00 00 b9 60 00 00 b9 60 00 00 b9 60 00 00     .`...`...`...`..
    206c:	5d 40 00 00 6d 40 00 00 7d 40 00 00 8d 40 00 00     ]@..m@..}@...@..
    207c:	b9 60 00 00 b9 60 00 00 b9 60 00 00 61 60 00 00     .`...`...`..a`..
    208c:	b9 60 00 00 00 00 00 00 b9 60 00 00 b9 60 00 00     .`.......`...`..
    209c:	b9 60 00 00 b9 60 00 00 b9 60 00 00 b9 60 00 00     .`...`...`...`..
    20ac:	b9 60 00 00 00 00 00 00                             .`......

000020b4 <__do_global_dtors_aux>:
    20b4:	b510      	push	{r4, lr}
    20b6:	4c06      	ldr	r4, [pc, #24]	; (20d0 <__do_global_dtors_aux+0x1c>)
    20b8:	7823      	ldrb	r3, [r4, #0]
    20ba:	2b00      	cmp	r3, #0
    20bc:	d107      	bne.n	20ce <__do_global_dtors_aux+0x1a>
    20be:	4b05      	ldr	r3, [pc, #20]	; (20d4 <__do_global_dtors_aux+0x20>)
    20c0:	2b00      	cmp	r3, #0
    20c2:	d002      	beq.n	20ca <__do_global_dtors_aux+0x16>
    20c4:	4804      	ldr	r0, [pc, #16]	; (20d8 <__do_global_dtors_aux+0x24>)
    20c6:	e000      	b.n	20ca <__do_global_dtors_aux+0x16>
    20c8:	bf00      	nop
    20ca:	2301      	movs	r3, #1
    20cc:	7023      	strb	r3, [r4, #0]
    20ce:	bd10      	pop	{r4, pc}
    20d0:	20000130 	.word	0x20000130
    20d4:	00000000 	.word	0x00000000
    20d8:	0000c368 	.word	0x0000c368

000020dc <frame_dummy>:
    20dc:	4b08      	ldr	r3, [pc, #32]	; (2100 <frame_dummy+0x24>)
    20de:	b510      	push	{r4, lr}
    20e0:	2b00      	cmp	r3, #0
    20e2:	d003      	beq.n	20ec <frame_dummy+0x10>
    20e4:	4907      	ldr	r1, [pc, #28]	; (2104 <frame_dummy+0x28>)
    20e6:	4808      	ldr	r0, [pc, #32]	; (2108 <frame_dummy+0x2c>)
    20e8:	e000      	b.n	20ec <frame_dummy+0x10>
    20ea:	bf00      	nop
    20ec:	4807      	ldr	r0, [pc, #28]	; (210c <frame_dummy+0x30>)
    20ee:	6803      	ldr	r3, [r0, #0]
    20f0:	2b00      	cmp	r3, #0
    20f2:	d100      	bne.n	20f6 <frame_dummy+0x1a>
    20f4:	bd10      	pop	{r4, pc}
    20f6:	4b06      	ldr	r3, [pc, #24]	; (2110 <frame_dummy+0x34>)
    20f8:	2b00      	cmp	r3, #0
    20fa:	d0fb      	beq.n	20f4 <frame_dummy+0x18>
    20fc:	4798      	blx	r3
    20fe:	e7f9      	b.n	20f4 <frame_dummy+0x18>
    2100:	00000000 	.word	0x00000000
    2104:	20000134 	.word	0x20000134
    2108:	0000c368 	.word	0x0000c368
    210c:	20000124 	.word	0x20000124
    2110:	00000000 	.word	0x00000000

00002114 <_ZN11E28_2G4M20SC1Eiiiiiiiii>:
	Not for commercial use
 */ 

#include "E28-2G4M20S.h"

E28_2G4M20S::E28_2G4M20S(int chipSelectPin, int resetPin, int busyPin, int dio1Pin, int dio2Pin, int dio3Pin, int txEnablePin, int rxEnablePin, int ledPin)
    2114:	b570      	push	{r4, r5, r6, lr}
    2116:	0004      	movs	r4, r0
    2118:	481f      	ldr	r0, [pc, #124]	; (2198 <_ZN11E28_2G4M20SC1Eiiiiiiiii+0x84>)
    211a:	250d      	movs	r5, #13
    211c:	6260      	str	r0, [r4, #36]	; 0x24
    211e:	0020      	movs	r0, r4
    2120:	3028      	adds	r0, #40	; 0x28
    2122:	7005      	strb	r5, [r0, #0]
    2124:	2500      	movs	r5, #0
    2126:	3073      	adds	r0, #115	; 0x73
    2128:	4e1c      	ldr	r6, [pc, #112]	; (219c <_ZN11E28_2G4M20SC1Eiiiiiiiii+0x88>)
    212a:	6565      	str	r5, [r4, #84]	; 0x54
    212c:	7005      	strb	r5, [r0, #0]
    212e:	3001      	adds	r0, #1
    2130:	8006      	strh	r6, [r0, #0]
    2132:	4e1b      	ldr	r6, [pc, #108]	; (21a0 <_ZN11E28_2G4M20SC1Eiiiiiiiii+0x8c>)
    2134:	b086      	sub	sp, #24
    2136:	8046      	strh	r6, [r0, #2]
{
	_chipSelectPin = chipSelectPin;
	_resetPin      = resetPin;
	_busyPin       = busyPin;
    2138:	60a3      	str	r3, [r4, #8]
	_dio1Pin       = dio1Pin;
    213a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	_chipSelectPin = chipSelectPin;
    213c:	6021      	str	r1, [r4, #0]
	_dio1Pin       = dio1Pin;
    213e:	60e3      	str	r3, [r4, #12]
	_dio2Pin       = dio2Pin;
    2140:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	_resetPin      = resetPin;
    2142:	6062      	str	r2, [r4, #4]
	_dio2Pin       = dio2Pin;
    2144:	6123      	str	r3, [r4, #16]
	_dio3Pin       = dio3Pin;
    2146:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	_txEnablePin   = txEnablePin;
	_rxEnablePin   = rxEnablePin;
	_ledPin		   = ledPin;
		
	Radio = new SX1280Hal(_chipSelectPin, _busyPin, _dio1Pin, _dio2Pin, _dio3Pin, _resetPin, _txEnablePin, _rxEnablePin, _ledPin);	
    2148:	2044      	movs	r0, #68	; 0x44
	_dio3Pin       = dio3Pin;
    214a:	6163      	str	r3, [r4, #20]
	_txEnablePin   = txEnablePin;
    214c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    214e:	61a3      	str	r3, [r4, #24]
	_rxEnablePin   = rxEnablePin;
    2150:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2152:	61e3      	str	r3, [r4, #28]
	_ledPin		   = ledPin;
    2154:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2156:	6223      	str	r3, [r4, #32]
	Radio = new SX1280Hal(_chipSelectPin, _busyPin, _dio1Pin, _dio2Pin, _dio3Pin, _resetPin, _txEnablePin, _rxEnablePin, _ledPin);	
    2158:	f004 f84a 	bl	61f0 <_Znwj>
    215c:	6a23      	ldr	r3, [r4, #32]
    215e:	68a2      	ldr	r2, [r4, #8]
    2160:	9305      	str	r3, [sp, #20]
    2162:	69e3      	ldr	r3, [r4, #28]
    2164:	6821      	ldr	r1, [r4, #0]
    2166:	9304      	str	r3, [sp, #16]
    2168:	69a3      	ldr	r3, [r4, #24]
    216a:	0006      	movs	r6, r0
    216c:	9303      	str	r3, [sp, #12]
    216e:	6863      	ldr	r3, [r4, #4]
    2170:	9302      	str	r3, [sp, #8]
    2172:	6963      	ldr	r3, [r4, #20]
    2174:	9301      	str	r3, [sp, #4]
    2176:	6923      	ldr	r3, [r4, #16]
    2178:	9300      	str	r3, [sp, #0]
    217a:	68e3      	ldr	r3, [r4, #12]
    217c:	f000 fbb6 	bl	28ec <_ZN9SX1280HalC1Eiiiiiiiii>
		
	RadioStatus.rxDone=false;
    2180:	0023      	movs	r3, r4
	RadioStatus.txDone=false;
	RadioStatus.rxTimeout=false;
	RadioStatus.txTimeout=false;
}
    2182:	0020      	movs	r0, r4
	RadioStatus.rxDone=false;
    2184:	3359      	adds	r3, #89	; 0x59
	Radio = new SX1280Hal(_chipSelectPin, _busyPin, _dio1Pin, _dio2Pin, _dio3Pin, _resetPin, _txEnablePin, _rxEnablePin, _ledPin);	
    2186:	6566      	str	r6, [r4, #84]	; 0x54
	RadioStatus.txDone=false;
    2188:	3b01      	subs	r3, #1
	RadioStatus.rxDone=false;
    218a:	705d      	strb	r5, [r3, #1]
	RadioStatus.rxTimeout=false;
    218c:	70dd      	strb	r5, [r3, #3]
	RadioStatus.txDone=false;
    218e:	701d      	strb	r5, [r3, #0]
	RadioStatus.txTimeout=false;
    2190:	3302      	adds	r3, #2
    2192:	701d      	strb	r5, [r3, #0]
}
    2194:	b006      	add	sp, #24
    2196:	bd70      	pop	{r4, r5, r6, pc}
    2198:	8f0d1800 	.word	0x8f0d1800
    219c:	00004002 	.word	0x00004002
    21a0:	00004001 	.word	0x00004001

000021a4 <_ZN11E28_2G4M20S15SetTxModeActiveEv>:

void E28_2G4M20S::SetTxModeActive( void )
{
    21a4:	b510      	push	{r4, lr}
    21a6:	0004      	movs	r4, r0
	Radio->SetRxEnablePin(LOW);
    21a8:	2100      	movs	r1, #0
    21aa:	6d40      	ldr	r0, [r0, #84]	; 0x54
    21ac:	f000 fc04 	bl	29b8 <_ZN9SX1280Hal14SetRxEnablePinEh>
	Radio->SetTxEnablePin(HIGH);
    21b0:	2101      	movs	r1, #1
    21b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
    21b4:	f000 fbfb 	bl	29ae <_ZN9SX1280Hal14SetTxEnablePinEh>
}
    21b8:	bd10      	pop	{r4, pc}

000021ba <_ZN11E28_2G4M20S15SetRxModeActiveEv>:

void E28_2G4M20S::SetRxModeActive( void )
{
    21ba:	b510      	push	{r4, lr}
    21bc:	0004      	movs	r4, r0
	Radio->SetTxEnablePin(LOW);
    21be:	2100      	movs	r1, #0
    21c0:	6d40      	ldr	r0, [r0, #84]	; 0x54
    21c2:	f000 fbf4 	bl	29ae <_ZN9SX1280Hal14SetTxEnablePinEh>
	Radio->SetRxEnablePin(HIGH);
    21c6:	2101      	movs	r1, #1
    21c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    21ca:	f000 fbf5 	bl	29b8 <_ZN9SX1280Hal14SetRxEnablePinEh>
}
    21ce:	bd10      	pop	{r4, pc}

000021d0 <_ZN11E28_2G4M20S4InitEv>:

void E28_2G4M20S::Init()
{
    21d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21d2:	0004      	movs	r4, r0
	 Radio->Init( );	 
    21d4:	6d40      	ldr	r0, [r0, #84]	; 0x54
    21d6:	f000 fc1b 	bl	2a10 <_ZN6SX12804InitEv>
	 Radio->SetRegulatorMode( USE_DCDC ); // Can also be set in LDO mode but consume more power
    21da:	6d60      	ldr	r0, [r4, #84]	; 0x54
    21dc:	2101      	movs	r1, #1
    21de:	f000 fe88 	bl	2ef2 <_ZN6SX128016SetRegulatorModeE21RadioRegulatorModes_t>
	 memset( &RadioData.payload, 0x00, MAX_PAYLOAD_LENGTH ); // Zero fills the buffer
    21e2:	0020      	movs	r0, r4
    21e4:	223c      	movs	r2, #60	; 0x3c
    21e6:	2100      	movs	r1, #0
    21e8:	305c      	adds	r0, #92	; 0x5c
    21ea:	f009 f8c2 	bl	b372 <memset>
	
//    SerialAUX->println( "Running in LORA mode");
//	SerialAUX->println( "Spreading factor set to 7");
//	SerialAUX->println( "Bandwidth set to 400kHz");
//	SerialAUX->println( "CR encoding set to 4/5");
    modulationParams.PacketType                  = PACKET_TYPE_LORA;
    21ee:	0026      	movs	r6, r4
    modulationParams.Params.LoRa.SpreadingFactor = LORA_SF7;
    21f0:	0022      	movs	r2, r4
    modulationParams.PacketType                  = PACKET_TYPE_LORA;
    21f2:	2301      	movs	r3, #1
    modulationParams.Params.LoRa.SpreadingFactor = LORA_SF7;
    21f4:	2170      	movs	r1, #112	; 0x70
    modulationParams.Params.LoRa.Bandwidth       = LORA_BW_0400;
    modulationParams.Params.LoRa.CodingRate      = LORA_CR_4_5;

    PacketParams.PacketType                 = PACKET_TYPE_LORA;
    21f6:	0027      	movs	r7, r4
    modulationParams.PacketType                  = PACKET_TYPE_LORA;
    21f8:	3646      	adds	r6, #70	; 0x46
    modulationParams.Params.LoRa.SpreadingFactor = LORA_SF7;
    21fa:	324a      	adds	r2, #74	; 0x4a
    modulationParams.PacketType                  = PACKET_TYPE_LORA;
    21fc:	7033      	strb	r3, [r6, #0]
    PacketParams.PacketType                 = PACKET_TYPE_LORA;
    21fe:	3729      	adds	r7, #41	; 0x29
    modulationParams.Params.LoRa.SpreadingFactor = LORA_SF7;
    2200:	7011      	strb	r1, [r2, #0]
    modulationParams.Params.LoRa.Bandwidth       = LORA_BW_0400;
    2202:	394a      	subs	r1, #74	; 0x4a
    2204:	7051      	strb	r1, [r2, #1]
    modulationParams.Params.LoRa.CodingRate      = LORA_CR_4_5;
    2206:	7093      	strb	r3, [r2, #2]
    PacketParams.PacketType                 = PACKET_TYPE_LORA;
    2208:	703b      	strb	r3, [r7, #0]
    PacketParams.Params.LoRa.PreambleLength = 0x08;
    220a:	0023      	movs	r3, r4
    220c:	2208      	movs	r2, #8
    220e:	3331      	adds	r3, #49	; 0x31
    2210:	701a      	strb	r2, [r3, #0]
    PacketParams.Params.LoRa.HeaderType     = LORA_PACKET_VARIABLE_LENGTH;
    PacketParams.Params.LoRa.PayloadLength  = MAX_PAYLOAD_LENGTH;
    2212:	3234      	adds	r2, #52	; 0x34
    2214:	709a      	strb	r2, [r3, #2]
    PacketParams.Params.LoRa.HeaderType     = LORA_PACKET_VARIABLE_LENGTH;
    2216:	2500      	movs	r5, #0
    PacketParams.Params.LoRa.CrcMode        = LORA_CRC_ON;
    2218:	2220      	movs	r2, #32
    PacketParams.Params.LoRa.HeaderType     = LORA_PACKET_VARIABLE_LENGTH;
    221a:	705d      	strb	r5, [r3, #1]
    PacketParams.Params.LoRa.CrcMode        = LORA_CRC_ON;
    221c:	70da      	strb	r2, [r3, #3]
    PacketParams.Params.LoRa.InvertIQ       = LORA_IQ_INVERTED;
    221e:	711d      	strb	r5, [r3, #4]

	#else
	#error "Please select the mode of operation for the RC Transponder"
	#endif

	Radio->SetStandby( STDBY_RC );
    2220:	0029      	movs	r1, r5
    2222:	6d60      	ldr	r0, [r4, #84]	; 0x54
    2224:	f000 fc24 	bl	2a70 <_ZN6SX128010SetStandbyE19RadioStandbyModes_t>
    Radio->SetPacketType( modulationParams.PacketType );
    2228:	7831      	ldrb	r1, [r6, #0]
    222a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    222c:	f000 fc33 	bl	2a96 <_ZN6SX128013SetPacketTypeE18RadioPacketTypes_t>
    Radio->SetModulationParams( &modulationParams );
    2230:	0031      	movs	r1, r6
    2232:	6d60      	ldr	r0, [r4, #84]	; 0x54
    2234:	f000 fc6b 	bl	2b0e <_ZN6SX128019SetModulationParamsEP18ModulationParams_t>
    Radio->SetPacketParams( &PacketParams );
    2238:	0039      	movs	r1, r7
    223a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    223c:	f000 fca3 	bl	2b86 <_ZN6SX128015SetPacketParamsEP14PacketParams_t>

    Radio->SetRfFrequency( rf_frequency );
    2240:	6a61      	ldr	r1, [r4, #36]	; 0x24
    2242:	6d60      	ldr	r0, [r4, #84]	; 0x54
    2244:	f000 fc32 	bl	2aac <_ZN6SX128014SetRfFrequencyEm>
    Radio->SetBufferBaseAddresses( 0x00, 0x00 );
    2248:	002a      	movs	r2, r5
    224a:	0029      	movs	r1, r5
    224c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    224e:	f000 fc53 	bl	2af8 <_ZN6SX128022SetBufferBaseAddressesEhh>
    Radio->SetTxParams( tx_power, RADIO_RAMP_20_US ); 
    2252:	2128      	movs	r1, #40	; 0x28
    2254:	22e0      	movs	r2, #224	; 0xe0
    2256:	5661      	ldrsb	r1, [r4, r1]
    2258:	6d60      	ldr	r0, [r4, #84]	; 0x54
    225a:	f000 fc41 	bl	2ae0 <_ZN6SX128011SetTxParamsEa16RadioRampTimes_t>
//	SerialAUX->println( "Frequency set to " + String(rf_frequency/1000000) + "MHz");
//	SerialAUX->println( "TX Power set to " + String(tx_power) + "dBm");
}
    225e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002260 <_ZN11E28_2G4M20S9SetRXModeEb>:
	//Debug:
	Radio->SetLed(HIGH);
}

void E28_2G4M20S::SetRXMode(bool useTimeout)
{
    2260:	b530      	push	{r4, r5, lr}
    2262:	0004      	movs	r4, r0
    2264:	b085      	sub	sp, #20
    2266:	000d      	movs	r5, r1
   this->SetRxModeActive(); // Switch the hardware amplifier to RX mode.
    2268:	f7ff ffa7 	bl	21ba <_ZN11E28_2G4M20S15SetRxModeActiveEv>
   Radio->SetDioIrqParams( RxIrqMask, RxIrqMask, IRQ_RADIO_NONE, IRQ_RADIO_NONE ); // Set module to interrupt on RX complete on DI01 or Timeout.
    226c:	0023      	movs	r3, r4
    226e:	339c      	adds	r3, #156	; 0x9c
    2270:	8819      	ldrh	r1, [r3, #0]
    2272:	2300      	movs	r3, #0
    2274:	6d60      	ldr	r0, [r4, #84]	; 0x54
    2276:	9300      	str	r3, [sp, #0]
    2278:	000a      	movs	r2, r1
    227a:	f000 fe0b 	bl	2e94 <_ZN6SX128015SetDioIrqParamsEtttt>
    227e:	6d60      	ldr	r0, [r4, #84]	; 0x54
   if(useTimeout){
    2280:	2d00      	cmp	r5, #0
    2282:	d009      	beq.n	2298 <_ZN11E28_2G4M20S9SetRXModeEb+0x38>
		Radio->SetRx( ( TickTime_t ) { RX_TIMEOUT_TICK_SIZE, RX_TIMEOUT_VALUE } );
    2284:	2202      	movs	r2, #2
    2286:	ab03      	add	r3, sp, #12
    2288:	701a      	strb	r2, [r3, #0]
    228a:	3230      	adds	r2, #48	; 0x30
    228c:	805a      	strh	r2, [r3, #2]
    228e:	9903      	ldr	r1, [sp, #12]
   }else{
		Radio->SetRx(RX_TX_CONTINUOUS);
    2290:	f000 fe9a 	bl	2fc8 <_ZN6SX12805SetRxE10TickTime_s>
   }
}
    2294:	b005      	add	sp, #20
    2296:	bd30      	pop	{r4, r5, pc}
		Radio->SetRx(RX_TX_CONTINUOUS);
    2298:	2201      	movs	r2, #1
    229a:	ab02      	add	r3, sp, #8
    229c:	4252      	negs	r2, r2
    229e:	701d      	strb	r5, [r3, #0]
    22a0:	805a      	strh	r2, [r3, #2]
    22a2:	9902      	ldr	r1, [sp, #8]
    22a4:	e7f4      	b.n	2290 <_ZN11E28_2G4M20S9SetRXModeEb+0x30>

000022a6 <_ZN11E28_2G4M20S8OnTxDoneEv>:
{
    22a6:	b510      	push	{r4, lr}
    22a8:	0004      	movs	r4, r0
	SetRxModeActive();
    22aa:	f7ff ff86 	bl	21ba <_ZN11E28_2G4M20S15SetRxModeActiveEv>
	SetRXMode(false); // Set to RX with no timeout.
    22ae:	0020      	movs	r0, r4
    22b0:	2100      	movs	r1, #0
    22b2:	f7ff ffd5 	bl	2260 <_ZN11E28_2G4M20S9SetRXModeEb>
	Radio->SetLed(LOW);
    22b6:	2100      	movs	r1, #0
    22b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    22ba:	f000 fb73 	bl	29a4 <_ZN9SX1280Hal6SetLedEh>
}
    22be:	bd10      	pop	{r4, pc}

000022c0 <_ZN11E28_2G4M20S5SleepEv>:

void E28_2G4M20S::Sleep(void){
    22c0:	b510      	push	{r4, lr}
    22c2:	0004      	movs	r4, r0
	SleepParameters.DataBufferRetention=1;
	SleepParameters.DataRamRetention=1;
	
//	SerialAUX->println("Radio Firmware version: " + String(Radio->GetFirmwareVersion()));
	
	Radio->SetTxEnablePin(LOW);
    22c4:	2100      	movs	r1, #0
    22c6:	6d40      	ldr	r0, [r0, #84]	; 0x54
    22c8:	f000 fb71 	bl	29ae <_ZN9SX1280Hal14SetTxEnablePinEh>
	Radio->SetRxEnablePin(LOW);
    22cc:	2100      	movs	r1, #0
    22ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
    22d0:	f000 fb72 	bl	29b8 <_ZN9SX1280Hal14SetRxEnablePinEh>
		
	Radio->SetSaveContext();
    22d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    22d6:	f000 fe16 	bl	2f06 <_ZN6SX128014SetSaveContextEv>
	Radio->SetSleep(SleepParameters);	
    22da:	210e      	movs	r1, #14
    22dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
    22de:	f000 fba1 	bl	2a24 <_ZN6SX12808SetSleepE13SleepParams_t>

//	digitalWrite(_chipSelectPin, HIGH);
}
    22e2:	bd10      	pop	{r4, pc}

000022e4 <_ZN11E28_2G4M20S6WakeUpEv>:

void E28_2G4M20S::WakeUp(void){
    22e4:	b510      	push	{r4, lr}
	Radio->SetWakeup();
    22e6:	6d40      	ldr	r0, [r0, #84]	; 0x54
    22e8:	f000 fbb8 	bl	2a5c <_ZN6SX12809SetWakeupEv>
}
    22ec:	bd10      	pop	{r4, pc}

000022ee <_ZN11E28_2G4M20S12GetRadioDataEv>:


RadioData_t * E28_2G4M20S::GetRadioData()
{
	if(RadioDataReady){
    22ee:	0002      	movs	r2, r0
    22f0:	329b      	adds	r2, #155	; 0x9b
    22f2:	7811      	ldrb	r1, [r2, #0]
		RadioDataReady = false;
		return &RadioData;	
	}else{
		return nullptr;
    22f4:	1e0b      	subs	r3, r1, #0
	if(RadioDataReady){
    22f6:	d003      	beq.n	2300 <_ZN11E28_2G4M20S12GetRadioDataEv+0x12>
		RadioDataReady = false;
    22f8:	2300      	movs	r3, #0
    22fa:	7013      	strb	r3, [r2, #0]
		return &RadioData;	
    22fc:	0003      	movs	r3, r0
    22fe:	335c      	adds	r3, #92	; 0x5c
	}
}
    2300:	0018      	movs	r0, r3
    2302:	4770      	bx	lr

00002304 <_ZN11E28_2G4M20S14GetRadioStatusEv>:

RadioIRQStatus_t E28_2G4M20S::GetRadioStatus(){
	return this->RadioStatus;
    2304:	6d83      	ldr	r3, [r0, #88]	; 0x58
RadioIRQStatus_t E28_2G4M20S::GetRadioStatus(){
    2306:	b513      	push	{r0, r1, r4, lr}
	return this->RadioStatus;
    2308:	21ff      	movs	r1, #255	; 0xff
    230a:	001a      	movs	r2, r3
    230c:	0a18      	lsrs	r0, r3, #8
    230e:	0c1c      	lsrs	r4, r3, #16
    2310:	4008      	ands	r0, r1
    2312:	400a      	ands	r2, r1
    2314:	0200      	lsls	r0, r0, #8
    2316:	4021      	ands	r1, r4
    2318:	0409      	lsls	r1, r1, #16
    231a:	4310      	orrs	r0, r2
    231c:	0e1b      	lsrs	r3, r3, #24
    231e:	061b      	lsls	r3, r3, #24
    2320:	4308      	orrs	r0, r1
    2322:	4318      	orrs	r0, r3
}
    2324:	bd16      	pop	{r1, r2, r4, pc}

00002326 <_ZN11E28_2G4M20S16ClearRadioStatusEv>:

void E28_2G4M20S::ClearRadioStatus(){
	RadioStatus.rxDone=false;
    2326:	0002      	movs	r2, r0
    2328:	2300      	movs	r3, #0
    232a:	3259      	adds	r2, #89	; 0x59
    232c:	7013      	strb	r3, [r2, #0]
	RadioStatus.txDone=false;
	RadioStatus.rxTimeout=false;
	RadioStatus.txTimeout=false;	
    232e:	305a      	adds	r0, #90	; 0x5a
	RadioStatus.txDone=false;
    2330:	3a01      	subs	r2, #1
    2332:	7013      	strb	r3, [r2, #0]
	RadioStatus.rxTimeout=false;
    2334:	70d3      	strb	r3, [r2, #3]
	RadioStatus.txTimeout=false;	
    2336:	7003      	strb	r3, [r0, #0]
}
    2338:	4770      	bx	lr
	...

0000233c <_ZN11E28_2G4M20S12CalculateCRCEPhh>:

uint16_t E28_2G4M20S::CalculateCRC(uint8_t *data, uint8_t length){
    233c:	b570      	push	{r4, r5, r6, lr}
    233e:	2400      	movs	r4, #0
	uint16_t count;
	uint16_t crc = 0xFFFF;
    2340:	4807      	ldr	r0, [pc, #28]	; (2360 <_ZN11E28_2G4M20S12CalculateCRCEPhh+0x24>)
	uint16_t temp;

	for (count = 0; count < length; ++count)
	{
		temp = (uint16_t)((*data++ ^ (crc >> 8)) & 0xff);
		crc = (uint16_t)(crc_table[temp] ^ (crc << 8));
    2342:	4d08      	ldr	r5, [pc, #32]	; (2364 <_ZN11E28_2G4M20S12CalculateCRCEPhh+0x28>)
	for (count = 0; count < length; ++count)
    2344:	b2a3      	uxth	r3, r4
    2346:	4293      	cmp	r3, r2
    2348:	da09      	bge.n	235e <_ZN11E28_2G4M20S12CalculateCRCEPhh+0x22>
		temp = (uint16_t)((*data++ ^ (crc >> 8)) & 0xff);
    234a:	5d0b      	ldrb	r3, [r1, r4]
    234c:	1206      	asrs	r6, r0, #8
		crc = (uint16_t)(crc_table[temp] ^ (crc << 8));
    234e:	4073      	eors	r3, r6
    2350:	005b      	lsls	r3, r3, #1
    2352:	0206      	lsls	r6, r0, #8
    2354:	5b58      	ldrh	r0, [r3, r5]
    2356:	3401      	adds	r4, #1
    2358:	4070      	eors	r0, r6
    235a:	b280      	uxth	r0, r0
	for (count = 0; count < length; ++count)
    235c:	e7f2      	b.n	2344 <_ZN11E28_2G4M20S12CalculateCRCEPhh+0x8>
	}

	return (uint16_t)(crc ^ 0x0000);
}
    235e:	bd70      	pop	{r4, r5, r6, pc}
    2360:	0000ffff 	.word	0x0000ffff
    2364:	0000b68c 	.word	0x0000b68c

00002368 <_ZN11E28_2G4M20S8OnRxDoneEv>:
{
    2368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	memset(&RadioData.payload, 0x00, MAX_PAYLOAD_LENGTH);
    236a:	0007      	movs	r7, r0
{
    236c:	0004      	movs	r4, r0
	memset(&RadioData.payload, 0x00, MAX_PAYLOAD_LENGTH);
    236e:	375c      	adds	r7, #92	; 0x5c
    2370:	223c      	movs	r2, #60	; 0x3c
    2372:	2100      	movs	r1, #0
    2374:	0038      	movs	r0, r7
	RadioData.payloadLength=0;
    2376:	0026      	movs	r6, r4
	memset(&RadioData.payload, 0x00, MAX_PAYLOAD_LENGTH);
    2378:	f008 fffb 	bl	b372 <memset>
	RadioData.payloadLength=0;
    237c:	2300      	movs	r3, #0
    237e:	3698      	adds	r6, #152	; 0x98
    2380:	7033      	strb	r3, [r6, #0]
	if(Radio->GetPayload(&RadioData.payload[0], &RadioData.payloadLength, MAX_PAYLOAD_LENGTH)){
    2382:	0032      	movs	r2, r6
    2384:	333c      	adds	r3, #60	; 0x3c
    2386:	0039      	movs	r1, r7
    2388:	6d60      	ldr	r0, [r4, #84]	; 0x54
    238a:	f000 fdcd 	bl	2f28 <_ZN6SX128010GetPayloadEPhS0_h>
    238e:	1e05      	subs	r5, r0, #0
    2390:	d13b      	bne.n	240a <_ZN11E28_2G4M20S8OnRxDoneEv+0xa2>
		uint16_t temp_crc = (uint16_t)((RadioData.payload[RadioData.payloadLength-2] << 8) + RadioData.payload[RadioData.payloadLength-1]);
    2392:	7833      	ldrb	r3, [r6, #0]
    2394:	1e9a      	subs	r2, r3, #2
    2396:	18a1      	adds	r1, r4, r2
    2398:	315c      	adds	r1, #92	; 0x5c
    239a:	7808      	ldrb	r0, [r1, #0]
    239c:	18e3      	adds	r3, r4, r3
    239e:	335b      	adds	r3, #91	; 0x5b
    23a0:	0200      	lsls	r0, r0, #8
    23a2:	9001      	str	r0, [sp, #4]
    23a4:	7818      	ldrb	r0, [r3, #0]
		RadioData.payloadLength -= 2; // we have removed CRC.
    23a6:	b2d2      	uxtb	r2, r2
		uint16_t temp_crc = (uint16_t)((RadioData.payload[RadioData.payloadLength-2] << 8) + RadioData.payload[RadioData.payloadLength-1]);
    23a8:	4684      	mov	ip, r0
    23aa:	9801      	ldr	r0, [sp, #4]
		RadioData.payload[RadioData.payloadLength-2]=0;
    23ac:	700d      	strb	r5, [r1, #0]
		uint16_t temp_crc = (uint16_t)((RadioData.payload[RadioData.payloadLength-2] << 8) + RadioData.payload[RadioData.payloadLength-1]);
    23ae:	4460      	add	r0, ip
    23b0:	b280      	uxth	r0, r0
		RadioData.payload[RadioData.payloadLength-1]=0;
    23b2:	701d      	strb	r5, [r3, #0]
		uint16_t temp_crc = (uint16_t)((RadioData.payload[RadioData.payloadLength-2] << 8) + RadioData.payload[RadioData.payloadLength-1]);
    23b4:	9001      	str	r0, [sp, #4]
		RadioData.payloadLength -= 2; // we have removed CRC.
    23b6:	7032      	strb	r2, [r6, #0]
		if(CalculateCRC(&RadioData.payload[0],RadioData.payloadLength) == temp_crc){
    23b8:	0039      	movs	r1, r7
    23ba:	0020      	movs	r0, r4
    23bc:	f7ff ffbe 	bl	233c <_ZN11E28_2G4M20S12CalculateCRCEPhh>
    23c0:	9b01      	ldr	r3, [sp, #4]
    23c2:	3e3f      	subs	r6, #63	; 0x3f
    23c4:	4283      	cmp	r3, r0
    23c6:	d12c      	bne.n	2422 <_ZN11E28_2G4M20S8OnRxDoneEv+0xba>
			Radio->GetPacketStatus(&PacketStatus);
    23c8:	0025      	movs	r5, r4
    23ca:	3541      	adds	r5, #65	; 0x41
    23cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
    23ce:	0029      	movs	r1, r5
    23d0:	f000 fc66 	bl	2ca0 <_ZN6SX128015GetPacketStatusEP14PacketStatus_t>
			switch( PacketStatus.packetType )
    23d4:	7828      	ldrb	r0, [r5, #0]
    23d6:	280f      	cmp	r0, #15
    23d8:	d812      	bhi.n	2400 <_ZN11E28_2G4M20S8OnRxDoneEv+0x98>
    23da:	f006 fad5 	bl	8988 <__gnu_thumb1_case_uqi>
    23de:	081b      	.short	0x081b
    23e0:	111b1b08 	.word	0x111b1b08
    23e4:	11111111 	.word	0x11111111
    23e8:	11111111 	.word	0x11111111
    23ec:	1e11      	.short	0x1e11
					RadioData.rssi = PacketStatus.LoRa.RssiPkt;
    23ee:	0023      	movs	r3, r4
    23f0:	3342      	adds	r3, #66	; 0x42
    23f2:	781a      	ldrb	r2, [r3, #0]
    23f4:	3357      	adds	r3, #87	; 0x57
    23f6:	701a      	strb	r2, [r3, #0]
					RadioData.snr = PacketStatus.LoRa.SnrPkt;
    23f8:	3b56      	subs	r3, #86	; 0x56
				RadioData.rssi = PacketStatus.Ble.RssiSync;
    23fa:	781a      	ldrb	r2, [r3, #0]
    23fc:	3357      	adds	r3, #87	; 0x57
				RadioData.rssi = 0;
    23fe:	701a      	strb	r2, [r3, #0]
			RadioDataReady = true;
    2400:	0022      	movs	r2, r4
			RadioStatus.rxDone=true;
    2402:	2301      	movs	r3, #1
			RadioDataReady = true;
    2404:	329b      	adds	r2, #155	; 0x9b
			RadioStatus.rxDone=true;
    2406:	7033      	strb	r3, [r6, #0]
			RadioDataReady = true;
    2408:	7013      	strb	r3, [r2, #0]
	SetRXMode(false); // Set to RX with no timeout.
    240a:	2100      	movs	r1, #0
    240c:	0020      	movs	r0, r4
    240e:	f7ff ff27 	bl	2260 <_ZN11E28_2G4M20S9SetRXModeEb>
}
    2412:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
				RadioData.rssi = PacketStatus.Ble.RssiSync;
    2414:	0023      	movs	r3, r4
    2416:	3342      	adds	r3, #66	; 0x42
    2418:	e7ef      	b.n	23fa <_ZN11E28_2G4M20S8OnRxDoneEv+0x92>
				RadioData.rssi = 0;
    241a:	0023      	movs	r3, r4
    241c:	2200      	movs	r2, #0
    241e:	3399      	adds	r3, #153	; 0x99
    2420:	e7ed      	b.n	23fe <_ZN11E28_2G4M20S8OnRxDoneEv+0x96>
			RadioStatus.rxDone=false;
    2422:	7035      	strb	r5, [r6, #0]
    2424:	e7f1      	b.n	240a <_ZN11E28_2G4M20S8OnRxDoneEv+0xa2>

00002426 <_ZN11E28_2G4M20S10IRQHandlerEv>:
{
    2426:	b510      	push	{r4, lr}
    2428:	0004      	movs	r4, r0
	Radio->ProcessIrqs();	
    242a:	6d40      	ldr	r0, [r0, #84]	; 0x54
    242c:	f000 fdf8 	bl	3020 <_ZN6SX128011ProcessIrqsEv>
	RadioStatus.txDone=Radio->RadioPacketStatus.txDone;
    2430:	0021      	movs	r1, r4
    2432:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2434:	3158      	adds	r1, #88	; 0x58
    2436:	791a      	ldrb	r2, [r3, #4]
    2438:	700a      	strb	r2, [r1, #0]
	RadioStatus.rxTimeout=Radio->RadioPacketStatus.rxTimeout;
    243a:	7a58      	ldrb	r0, [r3, #9]
	RadioStatus.txTimeout=Radio->RadioPacketStatus.txTimeout;
    243c:	3102      	adds	r1, #2
	RadioStatus.rxTimeout=Radio->RadioPacketStatus.rxTimeout;
    243e:	7048      	strb	r0, [r1, #1]
	RadioStatus.txTimeout=Radio->RadioPacketStatus.txTimeout;
    2440:	7a1b      	ldrb	r3, [r3, #8]
    2442:	700b      	strb	r3, [r1, #0]
	if(Radio->RadioPacketStatus.txDone == true){
    2444:	2a00      	cmp	r2, #0
    2446:	d002      	beq.n	244e <_ZN11E28_2G4M20S10IRQHandlerEv+0x28>
		this->OnTxDone();
    2448:	0020      	movs	r0, r4
    244a:	f7ff ff2c 	bl	22a6 <_ZN11E28_2G4M20S8OnTxDoneEv>
	if(Radio->RadioPacketStatus.rxDone == true){
    244e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2450:	795b      	ldrb	r3, [r3, #5]
    2452:	2b00      	cmp	r3, #0
    2454:	d002      	beq.n	245c <_ZN11E28_2G4M20S10IRQHandlerEv+0x36>
		this->OnRxDone();
    2456:	0020      	movs	r0, r4
    2458:	f7ff ff86 	bl	2368 <_ZN11E28_2G4M20S8OnRxDoneEv>
}
    245c:	bd10      	pop	{r4, pc}

0000245e <_ZN11E28_2G4M20S13SendRadioDataEP11RadioData_t>:
	RadioData.payloadLength=data->payloadLength;
    245e:	000b      	movs	r3, r1
{
    2460:	b5f0      	push	{r4, r5, r6, r7, lr}
	RadioData.payloadLength=data->payloadLength;
    2462:	0006      	movs	r6, r0
	memcpy(&RadioData.payload, data->payload, RadioData.payloadLength);	// copy the data.
    2464:	0007      	movs	r7, r0
{
    2466:	0004      	movs	r4, r0
	RadioData.payloadLength=data->payloadLength;
    2468:	333c      	adds	r3, #60	; 0x3c
    246a:	781a      	ldrb	r2, [r3, #0]
    246c:	3698      	adds	r6, #152	; 0x98
	memcpy(&RadioData.payload, data->payload, RadioData.payloadLength);	// copy the data.
    246e:	375c      	adds	r7, #92	; 0x5c
{
    2470:	b085      	sub	sp, #20
	RadioData.payloadLength=data->payloadLength;
    2472:	7032      	strb	r2, [r6, #0]
	memcpy(&RadioData.payload, data->payload, RadioData.payloadLength);	// copy the data.
    2474:	0038      	movs	r0, r7
    2476:	f008 ff73 	bl	b360 <memcpy>
	uint16_t temp_crc = CalculateCRC(&RadioData.payload[0], RadioData.payloadLength);
    247a:	7835      	ldrb	r5, [r6, #0]
    247c:	0039      	movs	r1, r7
    247e:	002a      	movs	r2, r5
    2480:	0020      	movs	r0, r4
    2482:	f7ff ff5b 	bl	233c <_ZN11E28_2G4M20S12CalculateCRCEPhh>
	RadioData.payload[RadioData.payloadLength++] = (uint8_t)((temp_crc >>  8) & 0xFF);  // CRC
    2486:	1963      	adds	r3, r4, r5
    2488:	0a02      	lsrs	r2, r0, #8
    248a:	335c      	adds	r3, #92	; 0x5c
    248c:	701a      	strb	r2, [r3, #0]
	RadioData.payload[RadioData.payloadLength++] = (uint8_t)(temp_crc & 0xFF);		    // CRC	
    248e:	1cab      	adds	r3, r5, #2
	RadioData.payload[RadioData.payloadLength++] = (uint8_t)((temp_crc >>  8) & 0xFF);  // CRC
    2490:	3501      	adds	r5, #1
	RadioData.payload[RadioData.payloadLength++] = (uint8_t)(temp_crc & 0xFF);		    // CRC	
    2492:	b2ed      	uxtb	r5, r5
    2494:	1965      	adds	r5, r4, r5
    2496:	355c      	adds	r5, #92	; 0x5c
    2498:	7033      	strb	r3, [r6, #0]
    249a:	7028      	strb	r0, [r5, #0]
	this->SetTxModeActive(); // Switch the hardware amplifier to TX mode.
    249c:	0020      	movs	r0, r4
    249e:	f7ff fe81 	bl	21a4 <_ZN11E28_2G4M20S15SetTxModeActiveEv>
	Radio->SetDioIrqParams( TxIrqMask, TxIrqMask, IRQ_RADIO_NONE, IRQ_RADIO_NONE ); // Set module to interrupt on TX complete on DI01.
    24a2:	0023      	movs	r3, r4
    24a4:	2500      	movs	r5, #0
    24a6:	339e      	adds	r3, #158	; 0x9e
    24a8:	8819      	ldrh	r1, [r3, #0]
    24aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
    24ac:	002b      	movs	r3, r5
    24ae:	000a      	movs	r2, r1
    24b0:	9500      	str	r5, [sp, #0]
    24b2:	f000 fcef 	bl	2e94 <_ZN6SX128015SetDioIrqParamsEtttt>
	this->PacketParams.Params.LoRa.PayloadLength = RadioData.payloadLength;
    24b6:	0023      	movs	r3, r4
	Radio->SetPacketParams( &PacketParams );
    24b8:	0021      	movs	r1, r4
	this->PacketParams.Params.LoRa.PayloadLength = RadioData.payloadLength;
    24ba:	7832      	ldrb	r2, [r6, #0]
    24bc:	3333      	adds	r3, #51	; 0x33
    24be:	701a      	strb	r2, [r3, #0]
	Radio->SetPacketParams( &PacketParams );
    24c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    24c2:	3129      	adds	r1, #41	; 0x29
    24c4:	f000 fb5f 	bl	2b86 <_ZN6SX128015SetPacketParamsEP14PacketParams_t>
	Radio->SendPayload(&RadioData.payload[0], RadioData.payloadLength, ( TickTime_t ){ RX_TIMEOUT_TICK_SIZE, TX_TIMEOUT_VALUE } );
    24c8:	2102      	movs	r1, #2
    24ca:	ab03      	add	r3, sp, #12
    24cc:	7832      	ldrb	r2, [r6, #0]
    24ce:	7019      	strb	r1, [r3, #0]
    24d0:	3130      	adds	r1, #48	; 0x30
    24d2:	8059      	strh	r1, [r3, #2]
    24d4:	9b03      	ldr	r3, [sp, #12]
    24d6:	0039      	movs	r1, r7
    24d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    24da:	9500      	str	r5, [sp, #0]
    24dc:	f000 fd68 	bl	2fb0 <_ZN6SX128011SendPayloadEPhh10TickTime_sh>
	Radio->SetLed(HIGH);
    24e0:	2101      	movs	r1, #1
    24e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
    24e4:	f000 fa5e 	bl	29a4 <_ZN9SX1280Hal6SetLedEh>
}
    24e8:	b005      	add	sp, #20
    24ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000024ec <_ZN11E28_2G4M20S15GetDioPinStatusEv>:

uint16_t  E28_2G4M20S::GetFirmwareVersion( void ){
	return Radio->GetFirmwareVersion();
}

uint8_t E28_2G4M20S::GetDioPinStatus(void){
    24ec:	b510      	push	{r4, lr}
	return Radio->GetDioPinStatus();
    24ee:	6d40      	ldr	r0, [r0, #84]	; 0x54
    24f0:	f000 fa67 	bl	29c2 <_ZN9SX1280Hal15GetDioPinStatusEv>
    24f4:	bd10      	pop	{r4, pc}

000024f6 <_ZN9SX1280HalD1Ev>:
}

SX1280Hal::~SX1280Hal( void )
{
 
};
    24f6:	4770      	bx	lr

000024f8 <_ZN9SX1280Hal13WriteRegisterEth>:
   
    WaitOnBusy( );
}

void SX1280Hal::WriteRegister( uint16_t address, uint8_t value )
{
    24f8:	b513      	push	{r0, r1, r4, lr}
    24fa:	0013      	movs	r3, r2
    24fc:	466a      	mov	r2, sp
    24fe:	3207      	adds	r2, #7
    2500:	7013      	strb	r3, [r2, #0]
    WriteRegister( address, &value, 1 );
    2502:	6803      	ldr	r3, [r0, #0]
    2504:	699c      	ldr	r4, [r3, #24]
    2506:	2301      	movs	r3, #1
    2508:	47a0      	blx	r4
}
    250a:	bd13      	pop	{r0, r1, r4, pc}

0000250c <_ZN9SX1280Hal12ReadRegisterEt>:

    WaitOnBusy( );
}

uint8_t SX1280Hal::ReadRegister( uint16_t address )
{
    250c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t data;

    ReadRegister( address, &data, 1 );
    250e:	466b      	mov	r3, sp
    2510:	1ddc      	adds	r4, r3, #7
    2512:	6803      	ldr	r3, [r0, #0]
    2514:	0022      	movs	r2, r4
    2516:	6a1d      	ldr	r5, [r3, #32]
    2518:	2301      	movs	r3, #1
    251a:	47a8      	blx	r5
    return data;
    251c:	7820      	ldrb	r0, [r4, #0]
}
    251e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00002520 <_ZN9SX1280HalD0Ev>:
SX1280Hal::~SX1280Hal( void )
    2520:	b510      	push	{r4, lr}
    2522:	0004      	movs	r4, r0
};
    2524:	f003 fe68 	bl	61f8 <_ZdlPv>
    2528:	0020      	movs	r0, r4
    252a:	bd10      	pop	{r4, pc}

0000252c <_ZN9SX1280Hal5ResetEv>:
{
    252c:	b510      	push	{r4, lr}
    252e:	0004      	movs	r4, r0
    delay( 20 );
    2530:	2014      	movs	r0, #20
    2532:	f003 fe21 	bl	6178 <delay>
    pinMode(RadioReset, OUTPUT);
    2536:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2538:	2101      	movs	r1, #1
    253a:	f005 fb45 	bl	7bc8 <pinMode>
    digitalWrite(RadioReset, LOW);
    253e:	2100      	movs	r1, #0
    2540:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2542:	f005 fb8d 	bl	7c60 <digitalWrite>
    delay( 50 );
    2546:	2032      	movs	r0, #50	; 0x32
    2548:	f003 fe16 	bl	6178 <delay>
    digitalWrite(RadioReset, HIGH);
    254c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    254e:	2101      	movs	r1, #1
    2550:	f005 fb86 	bl	7c60 <digitalWrite>
    pinMode(RadioReset, INPUT); // Using the internal pull-up
    2554:	2100      	movs	r1, #0
    2556:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2558:	f005 fb36 	bl	7bc8 <pinMode>
    delay( 20 );
    255c:	2014      	movs	r0, #20
    255e:	f003 fe0b 	bl	6178 <delay>
}
    2562:	bd10      	pop	{r4, pc}

00002564 <_ZN9SX1280Hal6WakeupEv>:
{
    2564:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2566:	0005      	movs	r5, r0
	digitalWrite(RadioNss, LOW);
    2568:	2100      	movs	r1, #0
    256a:	6a00      	ldr	r0, [r0, #32]
    256c:	f005 fb78 	bl	7c60 <digitalWrite>
    "   sub %0, #1   \n" // substract 1 from %0 (n)
    "   bne 1b       \n" // if result is not 0 jump to 1
    : "+r" (n)           // '%0' is n variable with RW constraints
    :                    // no input
    :                    // no clobber
  );
    2570:	2396      	movs	r3, #150	; 0x96
    2572:	011b      	lsls	r3, r3, #4
    2574:	3b01      	subs	r3, #1
    2576:	d1fd      	bne.n	2574 <_ZN9SX1280Hal6WakeupEv+0x10>
  }

  void init_AlwaysInline(uint32_t clock, BitOrder bitOrder, uint8_t dataMode) __attribute__((__always_inline__)) {
    this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? F_CPU / SPI_MIN_CLOCK_DIVIDER : clock);

    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    2578:	2600      	movs	r6, #0
    257a:	466b      	mov	r3, sp
	SPI.beginTransaction(SPISettings(2000000, MSBFIRST, SPI_MODE0));
    257c:	4c0e      	ldr	r4, [pc, #56]	; (25b8 <_ZN9SX1280Hal6WakeupEv+0x54>)
    257e:	715e      	strb	r6, [r3, #5]

    switch (dataMode)
    {
      case SPI_MODE0:
        this->dataMode = SERCOM_SPI_MODE_0; break;
    2580:	711e      	strb	r6, [r3, #4]
    2582:	9a01      	ldr	r2, [sp, #4]
    2584:	490d      	ldr	r1, [pc, #52]	; (25bc <_ZN9SX1280Hal6WakeupEv+0x58>)
    2586:	0020      	movs	r0, r4
    2588:	f005 fd3e 	bl	8008 <_ZN8SPIClass16beginTransactionE11SPISettings>
    SPI.transfer( RADIO_GET_STATUS );
    258c:	21c0      	movs	r1, #192	; 0xc0
    258e:	0020      	movs	r0, r4
    2590:	f005 fd6a 	bl	8068 <_ZN8SPIClass8transferEh>
    SPI.transfer( 0 );
    2594:	0031      	movs	r1, r6
    2596:	0020      	movs	r0, r4
    2598:	f005 fd66 	bl	8068 <_ZN8SPIClass8transferEh>
    digitalWrite(RadioNss, HIGH);
    259c:	6a28      	ldr	r0, [r5, #32]
    259e:	2101      	movs	r1, #1
    25a0:	f005 fb5e 	bl	7c60 <digitalWrite>
	SPI.endTransaction();
    25a4:	0020      	movs	r0, r4
    25a6:	f005 fd4b 	bl	8040 <_ZN8SPIClass14endTransactionEv>
    WaitOnBusy( );
    25aa:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    25ac:	f005 fb84 	bl	7cb8 <digitalRead>
    25b0:	2801      	cmp	r0, #1
    25b2:	d0fa      	beq.n	25aa <_ZN9SX1280Hal6WakeupEv+0x46>
}
    25b4:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    25b6:	46c0      	nop			; (mov r8, r8)
    25b8:	20000888 	.word	0x20000888
    25bc:	001e8480 	.word	0x001e8480

000025c0 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht>:
{
    25c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    25c2:	0005      	movs	r5, r0
    25c4:	000f      	movs	r7, r1
    25c6:	b085      	sub	sp, #20
    25c8:	9200      	str	r2, [sp, #0]
    25ca:	9301      	str	r3, [sp, #4]
    WaitOnBusy( );
    25cc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    25ce:	f005 fb73 	bl	7cb8 <digitalRead>
    25d2:	2801      	cmp	r0, #1
    25d4:	d0fa      	beq.n	25cc <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0xc>
    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    25d6:	2400      	movs	r4, #0
    digitalWrite(RadioNss, LOW);
    25d8:	2100      	movs	r1, #0
    25da:	6a28      	ldr	r0, [r5, #32]
    25dc:	f005 fb40 	bl	7c60 <digitalWrite>
    25e0:	ab02      	add	r3, sp, #8
	SPI.beginTransaction(SPISettings(2000000, MSBFIRST, SPI_MODE0));
    25e2:	4e13      	ldr	r6, [pc, #76]	; (2630 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x70>)
    25e4:	715c      	strb	r4, [r3, #5]
        this->dataMode = SERCOM_SPI_MODE_0; break;
    25e6:	711c      	strb	r4, [r3, #4]
    25e8:	4912      	ldr	r1, [pc, #72]	; (2634 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x74>)
    25ea:	0030      	movs	r0, r6
    25ec:	9a03      	ldr	r2, [sp, #12]
    25ee:	f005 fd0b 	bl	8008 <_ZN8SPIClass16beginTransactionE11SPISettings>
    SPI.transfer( ( uint8_t )command );
    25f2:	0039      	movs	r1, r7
    25f4:	0030      	movs	r0, r6
    25f6:	f005 fd37 	bl	8068 <_ZN8SPIClass8transferEh>
    for( uint16_t i = 0; i < size; i++ )
    25fa:	9b01      	ldr	r3, [sp, #4]
    25fc:	429c      	cmp	r4, r3
    25fe:	da07      	bge.n	2610 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x50>
        SPI.transfer( buffer[i] );
    2600:	9b00      	ldr	r3, [sp, #0]
    2602:	0030      	movs	r0, r6
    2604:	5d19      	ldrb	r1, [r3, r4]
    for( uint16_t i = 0; i < size; i++ )
    2606:	3401      	adds	r4, #1
        SPI.transfer( buffer[i] );
    2608:	f005 fd2e 	bl	8068 <_ZN8SPIClass8transferEh>
    for( uint16_t i = 0; i < size; i++ )
    260c:	b2a4      	uxth	r4, r4
    260e:	e7f4      	b.n	25fa <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x3a>
    digitalWrite(RadioNss, HIGH);
    2610:	6a28      	ldr	r0, [r5, #32]
    2612:	2101      	movs	r1, #1
    2614:	f005 fb24 	bl	7c60 <digitalWrite>
	SPI.endTransaction();
    2618:	0030      	movs	r0, r6
    261a:	f005 fd11 	bl	8040 <_ZN8SPIClass14endTransactionEv>
    if( command != RADIO_SET_SLEEP )
    261e:	2f84      	cmp	r7, #132	; 0x84
    2620:	d004      	beq.n	262c <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x6c>
        WaitOnBusy( );
    2622:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    2624:	f005 fb48 	bl	7cb8 <digitalRead>
    2628:	2801      	cmp	r0, #1
    262a:	d0fa      	beq.n	2622 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x62>
}
    262c:	b005      	add	sp, #20
    262e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2630:	20000888 	.word	0x20000888
    2634:	001e8480 	.word	0x001e8480

00002638 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht>:
{
    2638:	b5f0      	push	{r4, r5, r6, r7, lr}
    263a:	0006      	movs	r6, r0
    263c:	000f      	movs	r7, r1
    263e:	b085      	sub	sp, #20
    2640:	9200      	str	r2, [sp, #0]
    2642:	9301      	str	r3, [sp, #4]
    WaitOnBusy( );
    2644:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    2646:	f005 fb37 	bl	7cb8 <digitalRead>
    264a:	2801      	cmp	r0, #1
    264c:	d0fa      	beq.n	2644 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0xc>
    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    264e:	2400      	movs	r4, #0
    digitalWrite(RadioNss, LOW);
    2650:	2100      	movs	r1, #0
    2652:	6a30      	ldr	r0, [r6, #32]
    2654:	f005 fb04 	bl	7c60 <digitalWrite>
    2658:	ab02      	add	r3, sp, #8
	SPI.beginTransaction(SPISettings(2000000, MSBFIRST, SPI_MODE0));
    265a:	4d1c      	ldr	r5, [pc, #112]	; (26cc <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0x94>)
    265c:	715c      	strb	r4, [r3, #5]
        this->dataMode = SERCOM_SPI_MODE_0; break;
    265e:	711c      	strb	r4, [r3, #4]
    2660:	491b      	ldr	r1, [pc, #108]	; (26d0 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0x98>)
    2662:	0028      	movs	r0, r5
    2664:	9a03      	ldr	r2, [sp, #12]
    2666:	f005 fccf 	bl	8008 <_ZN8SPIClass16beginTransactionE11SPISettings>
		buffer[0] = SPI.transfer( ( uint8_t )command );
    266a:	0039      	movs	r1, r7
    266c:	0028      	movs	r0, r5
	 if( command == RADIO_GET_STATUS )
    266e:	2fc0      	cmp	r7, #192	; 0xc0
    2670:	d119      	bne.n	26a6 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0x6e>
		buffer[0] = SPI.transfer( ( uint8_t )command );
    2672:	f005 fcf9 	bl	8068 <_ZN8SPIClass8transferEh>
    2676:	9b00      	ldr	r3, [sp, #0]
		SPI.transfer( 0 );
    2678:	0021      	movs	r1, r4
		buffer[0] = SPI.transfer( ( uint8_t )command );
    267a:	7018      	strb	r0, [r3, #0]
		SPI.transfer( 0 );
    267c:	0028      	movs	r0, r5
    267e:	f005 fcf3 	bl	8068 <_ZN8SPIClass8transferEh>
		SPI.transfer( 0 );
    2682:	0021      	movs	r1, r4
    2684:	0028      	movs	r0, r5
    2686:	f005 fcef 	bl	8068 <_ZN8SPIClass8transferEh>
	digitalWrite(RadioNss, HIGH);
    268a:	6a30      	ldr	r0, [r6, #32]
    268c:	2101      	movs	r1, #1
    268e:	f005 fae7 	bl	7c60 <digitalWrite>
	SPI.endTransaction();
    2692:	0028      	movs	r0, r5
    2694:	f005 fcd4 	bl	8040 <_ZN8SPIClass14endTransactionEv>
    WaitOnBusy( );
    2698:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    269a:	f005 fb0d 	bl	7cb8 <digitalRead>
    269e:	2801      	cmp	r0, #1
    26a0:	d0fa      	beq.n	2698 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0x60>
}
    26a2:	b005      	add	sp, #20
    26a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		 SPI.transfer( ( uint8_t )command );
    26a6:	f005 fcdf 	bl	8068 <_ZN8SPIClass8transferEh>
		 SPI.transfer( 0 );
    26aa:	0021      	movs	r1, r4
    26ac:	0028      	movs	r0, r5
    26ae:	f005 fcdb 	bl	8068 <_ZN8SPIClass8transferEh>
		 for( uint16_t i = 0; i < size; i++ )
    26b2:	9b01      	ldr	r3, [sp, #4]
    26b4:	429c      	cmp	r4, r3
    26b6:	dae8      	bge.n	268a <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0x52>
             buffer[i] = SPI.transfer( 0 );
    26b8:	9b00      	ldr	r3, [sp, #0]
    26ba:	2100      	movs	r1, #0
    26bc:	0028      	movs	r0, r5
    26be:	191f      	adds	r7, r3, r4
    26c0:	f005 fcd2 	bl	8068 <_ZN8SPIClass8transferEh>
		 for( uint16_t i = 0; i < size; i++ )
    26c4:	3401      	adds	r4, #1
             buffer[i] = SPI.transfer( 0 );
    26c6:	7038      	strb	r0, [r7, #0]
		 for( uint16_t i = 0; i < size; i++ )
    26c8:	b2a4      	uxth	r4, r4
    26ca:	e7f2      	b.n	26b2 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0x7a>
    26cc:	20000888 	.word	0x20000888
    26d0:	001e8480 	.word	0x001e8480

000026d4 <_ZN9SX1280Hal13WriteRegisterEtPht>:
{
    26d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    26d6:	0006      	movs	r6, r0
    26d8:	000f      	movs	r7, r1
    26da:	b085      	sub	sp, #20
    26dc:	9200      	str	r2, [sp, #0]
    26de:	9301      	str	r3, [sp, #4]
    WaitOnBusy( );
    26e0:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    26e2:	f005 fae9 	bl	7cb8 <digitalRead>
    26e6:	2801      	cmp	r0, #1
    26e8:	d0fa      	beq.n	26e0 <_ZN9SX1280Hal13WriteRegisterEtPht+0xc>
    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    26ea:	2400      	movs	r4, #0
	digitalWrite(RadioNss, LOW);
    26ec:	2100      	movs	r1, #0
    26ee:	6a30      	ldr	r0, [r6, #32]
    26f0:	f005 fab6 	bl	7c60 <digitalWrite>
    26f4:	ab02      	add	r3, sp, #8
	SPI.beginTransaction(SPISettings(2000000, MSBFIRST, SPI_MODE0));
    26f6:	4d16      	ldr	r5, [pc, #88]	; (2750 <_ZN9SX1280Hal13WriteRegisterEtPht+0x7c>)
    26f8:	715c      	strb	r4, [r3, #5]
        this->dataMode = SERCOM_SPI_MODE_0; break;
    26fa:	711c      	strb	r4, [r3, #4]
    26fc:	9a03      	ldr	r2, [sp, #12]
    26fe:	4915      	ldr	r1, [pc, #84]	; (2754 <_ZN9SX1280Hal13WriteRegisterEtPht+0x80>)
    2700:	0028      	movs	r0, r5
    2702:	f005 fc81 	bl	8008 <_ZN8SPIClass16beginTransactionE11SPISettings>
	SPI.transfer( RADIO_WRITE_REGISTER );
    2706:	2118      	movs	r1, #24
    2708:	0028      	movs	r0, r5
    270a:	f005 fcad 	bl	8068 <_ZN8SPIClass8transferEh>
	SPI.transfer( ( address & 0xFF00 ) >> 8  );
    270e:	0a39      	lsrs	r1, r7, #8
    2710:	0028      	movs	r0, r5
    2712:	f005 fca9 	bl	8068 <_ZN8SPIClass8transferEh>
	SPI.transfer( address & 0x00FF  );
    2716:	b2f9      	uxtb	r1, r7
    2718:	0028      	movs	r0, r5
    271a:	f005 fca5 	bl	8068 <_ZN8SPIClass8transferEh>
	for( uint16_t i = 0; i < size; i++ )
    271e:	9b01      	ldr	r3, [sp, #4]
    2720:	429c      	cmp	r4, r3
    2722:	da07      	bge.n	2734 <_ZN9SX1280Hal13WriteRegisterEtPht+0x60>
            SPI.transfer( buffer[i] );
    2724:	9b00      	ldr	r3, [sp, #0]
    2726:	0028      	movs	r0, r5
    2728:	5d19      	ldrb	r1, [r3, r4]
	for( uint16_t i = 0; i < size; i++ )
    272a:	3401      	adds	r4, #1
            SPI.transfer( buffer[i] );
    272c:	f005 fc9c 	bl	8068 <_ZN8SPIClass8transferEh>
	for( uint16_t i = 0; i < size; i++ )
    2730:	b2a4      	uxth	r4, r4
    2732:	e7f4      	b.n	271e <_ZN9SX1280Hal13WriteRegisterEtPht+0x4a>
	digitalWrite(RadioNss, HIGH);
    2734:	6a30      	ldr	r0, [r6, #32]
    2736:	2101      	movs	r1, #1
    2738:	f005 fa92 	bl	7c60 <digitalWrite>
	SPI.endTransaction();
    273c:	0028      	movs	r0, r5
    273e:	f005 fc7f 	bl	8040 <_ZN8SPIClass14endTransactionEv>
    WaitOnBusy( );
    2742:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    2744:	f005 fab8 	bl	7cb8 <digitalRead>
    2748:	2801      	cmp	r0, #1
    274a:	d0fa      	beq.n	2742 <_ZN9SX1280Hal13WriteRegisterEtPht+0x6e>
}
    274c:	b005      	add	sp, #20
    274e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2750:	20000888 	.word	0x20000888
    2754:	001e8480 	.word	0x001e8480

00002758 <_ZN9SX1280Hal12ReadRegisterEtPht>:
{
    2758:	b5f0      	push	{r4, r5, r6, r7, lr}
    275a:	0006      	movs	r6, r0
    275c:	000f      	movs	r7, r1
    275e:	b085      	sub	sp, #20
    2760:	9200      	str	r2, [sp, #0]
    2762:	9301      	str	r3, [sp, #4]
    WaitOnBusy( );
    2764:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    2766:	f005 faa7 	bl	7cb8 <digitalRead>
    276a:	2801      	cmp	r0, #1
    276c:	d0fa      	beq.n	2764 <_ZN9SX1280Hal12ReadRegisterEtPht+0xc>
    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    276e:	2400      	movs	r4, #0
    digitalWrite(RadioNss, LOW);
    2770:	2100      	movs	r1, #0
    2772:	6a30      	ldr	r0, [r6, #32]
    2774:	f005 fa74 	bl	7c60 <digitalWrite>
    2778:	ab02      	add	r3, sp, #8
	SPI.beginTransaction(SPISettings(2000000, MSBFIRST, SPI_MODE0));
    277a:	4d19      	ldr	r5, [pc, #100]	; (27e0 <_ZN9SX1280Hal12ReadRegisterEtPht+0x88>)
    277c:	715c      	strb	r4, [r3, #5]
        this->dataMode = SERCOM_SPI_MODE_0; break;
    277e:	711c      	strb	r4, [r3, #4]
    2780:	9a03      	ldr	r2, [sp, #12]
    2782:	4918      	ldr	r1, [pc, #96]	; (27e4 <_ZN9SX1280Hal12ReadRegisterEtPht+0x8c>)
    2784:	0028      	movs	r0, r5
    2786:	f005 fc3f 	bl	8008 <_ZN8SPIClass16beginTransactionE11SPISettings>
	SPI.transfer( RADIO_READ_REGISTER );
    278a:	2119      	movs	r1, #25
    278c:	0028      	movs	r0, r5
    278e:	f005 fc6b 	bl	8068 <_ZN8SPIClass8transferEh>
	SPI.transfer( ( address & 0xFF00 ) >> 8  );
    2792:	0a39      	lsrs	r1, r7, #8
    2794:	0028      	movs	r0, r5
    2796:	f005 fc67 	bl	8068 <_ZN8SPIClass8transferEh>
	SPI.transfer( address & 0x00FF  );
    279a:	b2f9      	uxtb	r1, r7
    279c:	0028      	movs	r0, r5
    279e:	f005 fc63 	bl	8068 <_ZN8SPIClass8transferEh>
	SPI.transfer( 0 );	 
    27a2:	0021      	movs	r1, r4
    27a4:	0028      	movs	r0, r5
    27a6:	f005 fc5f 	bl	8068 <_ZN8SPIClass8transferEh>
	for( uint16_t i = 0; i < size; i++ )
    27aa:	9b01      	ldr	r3, [sp, #4]
    27ac:	429c      	cmp	r4, r3
    27ae:	da09      	bge.n	27c4 <_ZN9SX1280Hal12ReadRegisterEtPht+0x6c>
            buffer[i] = SPI.transfer( 0 );
    27b0:	9b00      	ldr	r3, [sp, #0]
    27b2:	2100      	movs	r1, #0
    27b4:	0028      	movs	r0, r5
    27b6:	191f      	adds	r7, r3, r4
    27b8:	f005 fc56 	bl	8068 <_ZN8SPIClass8transferEh>
	for( uint16_t i = 0; i < size; i++ )
    27bc:	3401      	adds	r4, #1
            buffer[i] = SPI.transfer( 0 );
    27be:	7038      	strb	r0, [r7, #0]
	for( uint16_t i = 0; i < size; i++ )
    27c0:	b2a4      	uxth	r4, r4
    27c2:	e7f2      	b.n	27aa <_ZN9SX1280Hal12ReadRegisterEtPht+0x52>
	digitalWrite(RadioNss, HIGH);
    27c4:	6a30      	ldr	r0, [r6, #32]
    27c6:	2101      	movs	r1, #1
    27c8:	f005 fa4a 	bl	7c60 <digitalWrite>
	SPI.endTransaction();
    27cc:	0028      	movs	r0, r5
    27ce:	f005 fc37 	bl	8040 <_ZN8SPIClass14endTransactionEv>
    WaitOnBusy( );
    27d2:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    27d4:	f005 fa70 	bl	7cb8 <digitalRead>
    27d8:	2801      	cmp	r0, #1
    27da:	d0fa      	beq.n	27d2 <_ZN9SX1280Hal12ReadRegisterEtPht+0x7a>
}
    27dc:	b005      	add	sp, #20
    27de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27e0:	20000888 	.word	0x20000888
    27e4:	001e8480 	.word	0x001e8480

000027e8 <_ZN9SX1280Hal11WriteBufferEhPhh>:

void SX1280Hal::WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
    27e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    27ea:	0006      	movs	r6, r0
    27ec:	000f      	movs	r7, r1
    27ee:	b085      	sub	sp, #20
    27f0:	9200      	str	r2, [sp, #0]
    27f2:	9301      	str	r3, [sp, #4]
    WaitOnBusy( );
    27f4:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    27f6:	f005 fa5f 	bl	7cb8 <digitalRead>
    27fa:	2801      	cmp	r0, #1
    27fc:	d0fa      	beq.n	27f4 <_ZN9SX1280Hal11WriteBufferEhPhh+0xc>
    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    27fe:	2400      	movs	r4, #0

	digitalWrite(RadioNss, LOW);
    2800:	2100      	movs	r1, #0
    2802:	6a30      	ldr	r0, [r6, #32]
    2804:	f005 fa2c 	bl	7c60 <digitalWrite>
    2808:	ab02      	add	r3, sp, #8
	SPI.beginTransaction(SPISettings(2000000, MSBFIRST, SPI_MODE0));
    280a:	4d14      	ldr	r5, [pc, #80]	; (285c <_ZN9SX1280Hal11WriteBufferEhPhh+0x74>)
    280c:	715c      	strb	r4, [r3, #5]
        this->dataMode = SERCOM_SPI_MODE_0; break;
    280e:	711c      	strb	r4, [r3, #4]
    2810:	4913      	ldr	r1, [pc, #76]	; (2860 <_ZN9SX1280Hal11WriteBufferEhPhh+0x78>)
    2812:	9a03      	ldr	r2, [sp, #12]
    2814:	0028      	movs	r0, r5
    2816:	f005 fbf7 	bl	8008 <_ZN8SPIClass16beginTransactionE11SPISettings>
	
	SPI.transfer( RADIO_WRITE_BUFFER );
    281a:	211a      	movs	r1, #26
    281c:	0028      	movs	r0, r5
    281e:	f005 fc23 	bl	8068 <_ZN8SPIClass8transferEh>
	SPI.transfer( offset  );
    2822:	0039      	movs	r1, r7
    2824:	0028      	movs	r0, r5
    2826:	f005 fc1f 	bl	8068 <_ZN8SPIClass8transferEh>
	for( uint16_t i = 0; i < size; i++ )
    282a:	9b01      	ldr	r3, [sp, #4]
    282c:	429c      	cmp	r4, r3
    282e:	da07      	bge.n	2840 <_ZN9SX1280Hal11WriteBufferEhPhh+0x58>
    {
            SPI.transfer( buffer[i] );
    2830:	9b00      	ldr	r3, [sp, #0]
    2832:	0028      	movs	r0, r5
    2834:	5d19      	ldrb	r1, [r3, r4]
	for( uint16_t i = 0; i < size; i++ )
    2836:	3401      	adds	r4, #1
            SPI.transfer( buffer[i] );
    2838:	f005 fc16 	bl	8068 <_ZN8SPIClass8transferEh>
	for( uint16_t i = 0; i < size; i++ )
    283c:	b2a4      	uxth	r4, r4
    283e:	e7f4      	b.n	282a <_ZN9SX1280Hal11WriteBufferEhPhh+0x42>
    }
		
	digitalWrite(RadioNss, HIGH);
    2840:	6a30      	ldr	r0, [r6, #32]
    2842:	2101      	movs	r1, #1
    2844:	f005 fa0c 	bl	7c60 <digitalWrite>
	SPI.endTransaction();
    2848:	0028      	movs	r0, r5
    284a:	f005 fbf9 	bl	8040 <_ZN8SPIClass14endTransactionEv>
	   
    WaitOnBusy( );
    284e:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    2850:	f005 fa32 	bl	7cb8 <digitalRead>
    2854:	2801      	cmp	r0, #1
    2856:	d0fa      	beq.n	284e <_ZN9SX1280Hal11WriteBufferEhPhh+0x66>
}
    2858:	b005      	add	sp, #20
    285a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    285c:	20000888 	.word	0x20000888
    2860:	001e8480 	.word	0x001e8480

00002864 <_ZN9SX1280Hal10ReadBufferEhPhh>:

void SX1280Hal::ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
    2864:	b5f0      	push	{r4, r5, r6, r7, lr}
    2866:	0006      	movs	r6, r0
    2868:	000f      	movs	r7, r1
    286a:	b085      	sub	sp, #20
    286c:	9200      	str	r2, [sp, #0]
    286e:	9301      	str	r3, [sp, #4]
    WaitOnBusy( );
    2870:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    2872:	f005 fa21 	bl	7cb8 <digitalRead>
    2876:	2801      	cmp	r0, #1
    2878:	d0fa      	beq.n	2870 <_ZN9SX1280Hal10ReadBufferEhPhh+0xc>
    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    287a:	2400      	movs	r4, #0

    digitalWrite(RadioNss, LOW);
    287c:	2100      	movs	r1, #0
    287e:	6a30      	ldr	r0, [r6, #32]
    2880:	f005 f9ee 	bl	7c60 <digitalWrite>
    2884:	ab02      	add	r3, sp, #8
	SPI.beginTransaction(SPISettings(2000000, MSBFIRST, SPI_MODE0));
    2886:	4d17      	ldr	r5, [pc, #92]	; (28e4 <_ZN9SX1280Hal10ReadBufferEhPhh+0x80>)
    2888:	715c      	strb	r4, [r3, #5]
        this->dataMode = SERCOM_SPI_MODE_0; break;
    288a:	711c      	strb	r4, [r3, #4]
    288c:	9a03      	ldr	r2, [sp, #12]
    288e:	4916      	ldr	r1, [pc, #88]	; (28e8 <_ZN9SX1280Hal10ReadBufferEhPhh+0x84>)
    2890:	0028      	movs	r0, r5
    2892:	f005 fbb9 	bl	8008 <_ZN8SPIClass16beginTransactionE11SPISettings>
    SPI.transfer( RADIO_READ_BUFFER );
    2896:	211b      	movs	r1, #27
    2898:	0028      	movs	r0, r5
    289a:	f005 fbe5 	bl	8068 <_ZN8SPIClass8transferEh>
    SPI.transfer( offset );
    289e:	0039      	movs	r1, r7
    28a0:	0028      	movs	r0, r5
    28a2:	f005 fbe1 	bl	8068 <_ZN8SPIClass8transferEh>
    SPI.transfer( 0 );
    28a6:	0021      	movs	r1, r4
    28a8:	0028      	movs	r0, r5
    28aa:	f005 fbdd 	bl	8068 <_ZN8SPIClass8transferEh>
    for( uint16_t i = 0; i < size; i++ )
    28ae:	9b01      	ldr	r3, [sp, #4]
    28b0:	429c      	cmp	r4, r3
    28b2:	da09      	bge.n	28c8 <_ZN9SX1280Hal10ReadBufferEhPhh+0x64>
    {
        buffer[i] = SPI.transfer( 0 );
    28b4:	9b00      	ldr	r3, [sp, #0]
    28b6:	2100      	movs	r1, #0
    28b8:	0028      	movs	r0, r5
    28ba:	191f      	adds	r7, r3, r4
    28bc:	f005 fbd4 	bl	8068 <_ZN8SPIClass8transferEh>
    for( uint16_t i = 0; i < size; i++ )
    28c0:	3401      	adds	r4, #1
        buffer[i] = SPI.transfer( 0 );
    28c2:	7038      	strb	r0, [r7, #0]
    for( uint16_t i = 0; i < size; i++ )
    28c4:	b2a4      	uxth	r4, r4
    28c6:	e7f2      	b.n	28ae <_ZN9SX1280Hal10ReadBufferEhPhh+0x4a>
    }
    digitalWrite(RadioNss, HIGH);
    28c8:	6a30      	ldr	r0, [r6, #32]
    28ca:	2101      	movs	r1, #1
    28cc:	f005 f9c8 	bl	7c60 <digitalWrite>
	SPI.endTransaction();
    28d0:	0028      	movs	r0, r5
    28d2:	f005 fbb5 	bl	8040 <_ZN8SPIClass14endTransactionEv>
 
    WaitOnBusy( );
    28d6:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    28d8:	f005 f9ee 	bl	7cb8 <digitalRead>
    28dc:	2801      	cmp	r0, #1
    28de:	d0fa      	beq.n	28d6 <_ZN9SX1280Hal10ReadBufferEhPhh+0x72>
}
    28e0:	b005      	add	sp, #20
    28e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28e4:	20000888 	.word	0x20000888
    28e8:	001e8480 	.word	0x001e8480

000028ec <_ZN9SX1280HalC1Eiiiiiiiii>:
SX1280Hal::SX1280Hal( int nss, int busy, int dio1, int dio2, int dio3, int rst,  int txEnablePin, int rxEnablePin, int ledPin)
    28ec:	b570      	push	{r4, r5, r6, lr}
    28ee:	0004      	movs	r4, r0
    28f0:	0008      	movs	r0, r1
     *                             all callbacks function pointers
     */
    SX1280( ):// RadioCallbacks_t *callbacks ):
        // The class members are value-initialiazed in member-initilaizer list
        Radio( ), OperatingMode( MODE_STDBY_RC ), PacketType( PACKET_TYPE_NONE ),
        LoRaBandwidth( LORA_BW_1600 ), IrqState( false ), PollingMode( true )
    28f2:	2102      	movs	r1, #2
	*/
	RadioPacketStatus_t RadioPacketStatus;
	
	Radio( )
    {
		RadioPacketStatus.txDone=false;
    28f4:	2500      	movs	r5, #0
    28f6:	2601      	movs	r6, #1
    28f8:	7361      	strb	r1, [r4, #13]
    28fa:	310d      	adds	r1, #13
    28fc:	73e1      	strb	r1, [r4, #15]
	DIO1 = dio1;
    28fe:	62e3      	str	r3, [r4, #44]	; 0x2c
    2900:	3905      	subs	r1, #5
	TXENPIN = txEnablePin;
    2902:	9b07      	ldr	r3, [sp, #28]
    2904:	7421      	strb	r1, [r4, #16]
        :   SX1280( )
    2906:	4925      	ldr	r1, [pc, #148]	; (299c <_ZN9SX1280HalC1Eiiiiiiiii+0xb0>)
	TXENPIN = txEnablePin;
    2908:	63a3      	str	r3, [r4, #56]	; 0x38
	RXENPIN = rxEnablePin;
    290a:	9b08      	ldr	r3, [sp, #32]
        :   SX1280( )
    290c:	3108      	adds	r1, #8
    290e:	6021      	str	r1, [r4, #0]
	RXENPIN = rxEnablePin;
    2910:	63e3      	str	r3, [r4, #60]	; 0x3c
    RadioReset = rst;
    2912:	9906      	ldr	r1, [sp, #24]
	LEDPIN = ledPin;
    2914:	9b09      	ldr	r3, [sp, #36]	; 0x24
    BUSY = busy;
    2916:	62a2      	str	r2, [r4, #40]	; 0x28
	LEDPIN = ledPin;
    2918:	6423      	str	r3, [r4, #64]	; 0x40
    291a:	7125      	strb	r5, [r4, #4]
		RadioPacketStatus.rxDone=false;
    291c:	7165      	strb	r5, [r4, #5]
		RadioPacketStatus.rxSyncWordDone=false;
    291e:	71a5      	strb	r5, [r4, #6]
		RadioPacketStatus.rxHeaderDone=false;
    2920:	71e5      	strb	r5, [r4, #7]
		RadioPacketStatus.rxError=IRQ_HEADER_NO_ERROR_CODE;	
    2922:	72a5      	strb	r5, [r4, #10]
		RadioPacketStatus.rangingDone=IRQ_RANGING_NO_ERROR_CODE;
    2924:	72e5      	strb	r5, [r4, #11]
		RadioPacketStatus.cadDone=false;
    2926:	7325      	strb	r5, [r4, #12]
		RadioPacketStatus.txTimeout=false;
    2928:	7225      	strb	r5, [r4, #8]
		RadioPacketStatus.rxTimeout=false;
    292a:	7265      	strb	r5, [r4, #9]
    292c:	7465      	strb	r5, [r4, #17]
    292e:	7726      	strb	r6, [r4, #28]
	RadioNss = nss;
    2930:	6220      	str	r0, [r4, #32]
    RadioReset = rst;
    2932:	6261      	str	r1, [r4, #36]	; 0x24
	pinMode(RadioNss, OUTPUT);
    2934:	0031      	movs	r1, r6
    2936:	f005 f947 	bl	7bc8 <pinMode>
    digitalWrite(RadioNss, HIGH);
    293a:	0031      	movs	r1, r6
    293c:	6a20      	ldr	r0, [r4, #32]
    293e:	f005 f98f 	bl	7c60 <digitalWrite>
	pinMode(RadioReset, OUTPUT);
    2942:	0031      	movs	r1, r6
    2944:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2946:	f005 f93f 	bl	7bc8 <pinMode>
    digitalWrite(RadioReset, HIGH);
    294a:	0031      	movs	r1, r6
    294c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    294e:	f005 f987 	bl	7c60 <digitalWrite>
	pinMode(DIO1, INPUT);
    2952:	0029      	movs	r1, r5
    2954:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    2956:	f005 f937 	bl	7bc8 <pinMode>
	pinMode(BUSY, INPUT);
    295a:	0029      	movs	r1, r5
    295c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    295e:	f005 f933 	bl	7bc8 <pinMode>
	pinMode(TXENPIN, OUTPUT);
    2962:	0031      	movs	r1, r6
    2964:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    2966:	f005 f92f 	bl	7bc8 <pinMode>
    digitalWrite(TXENPIN, LOW);
    296a:	0029      	movs	r1, r5
    296c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    296e:	f005 f977 	bl	7c60 <digitalWrite>
	pinMode(RXENPIN, OUTPUT);
    2972:	0031      	movs	r1, r6
    2974:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    2976:	f005 f927 	bl	7bc8 <pinMode>
	digitalWrite(RXENPIN, HIGH);
    297a:	0031      	movs	r1, r6
    297c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    297e:	f005 f96f 	bl	7c60 <digitalWrite>
	pinMode(LEDPIN, OUTPUT);
    2982:	0031      	movs	r1, r6
    2984:	6c20      	ldr	r0, [r4, #64]	; 0x40
    2986:	f005 f91f 	bl	7bc8 <pinMode>
	digitalWrite(LEDPIN, LOW);
    298a:	0029      	movs	r1, r5
    298c:	6c20      	ldr	r0, [r4, #64]	; 0x40
    298e:	f005 f967 	bl	7c60 <digitalWrite>
    SPI.begin();
    2992:	4803      	ldr	r0, [pc, #12]	; (29a0 <_ZN9SX1280HalC1Eiiiiiiiii+0xb4>)
    2994:	f005 fb10 	bl	7fb8 <_ZN8SPIClass5beginEv>
}
    2998:	0020      	movs	r0, r4
    299a:	bd70      	pop	{r4, r5, r6, pc}
    299c:	0000b88c 	.word	0x0000b88c
    29a0:	20000888 	.word	0x20000888

000029a4 <_ZN9SX1280Hal6SetLedEh>:

void SX1280Hal::SetLed(uint8_t output){
    29a4:	b510      	push	{r4, lr}
	digitalWrite(LEDPIN, output);
    29a6:	6c00      	ldr	r0, [r0, #64]	; 0x40
    29a8:	f005 f95a 	bl	7c60 <digitalWrite>
}
    29ac:	bd10      	pop	{r4, pc}

000029ae <_ZN9SX1280Hal14SetTxEnablePinEh>:

void SX1280Hal::SetTxEnablePin(uint8_t output){
    29ae:	b510      	push	{r4, lr}
	digitalWrite(TXENPIN, output);
    29b0:	6b80      	ldr	r0, [r0, #56]	; 0x38
    29b2:	f005 f955 	bl	7c60 <digitalWrite>
}
    29b6:	bd10      	pop	{r4, pc}

000029b8 <_ZN9SX1280Hal14SetRxEnablePinEh>:

void SX1280Hal::SetRxEnablePin(uint8_t output){
    29b8:	b510      	push	{r4, lr}
	digitalWrite(RXENPIN, output);
    29ba:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    29bc:	f005 f950 	bl	7c60 <digitalWrite>
}
    29c0:	bd10      	pop	{r4, pc}

000029c2 <_ZN9SX1280Hal15GetDioPinStatusEv>:

uint8_t SX1280Hal::GetDioPinStatus(){
    29c2:	b510      	push	{r4, lr}
	return digitalRead(DIO1);
    29c4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    29c6:	f005 f977 	bl	7cb8 <digitalRead>
    29ca:	b2c0      	uxtb	r0, r0
}
    29cc:	bd10      	pop	{r4, pc}

000029ce <_ZN6SX128018GetFirmwareVersionEv>:
    }
}

uint16_t SX1280::GetFirmwareVersion( void )
{
    return( ( ( ReadRegister( REG_LR_FIRMWARE_VERSION_MSB ) ) << 8 ) | ( ReadRegister( REG_LR_FIRMWARE_VERSION_MSB + 1 ) ) );
    29ce:	2154      	movs	r1, #84	; 0x54
    29d0:	6803      	ldr	r3, [r0, #0]
{
    29d2:	b570      	push	{r4, r5, r6, lr}
    29d4:	0005      	movs	r5, r0
    return( ( ( ReadRegister( REG_LR_FIRMWARE_VERSION_MSB ) ) << 8 ) | ( ReadRegister( REG_LR_FIRMWARE_VERSION_MSB + 1 ) ) );
    29d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    29d8:	31ff      	adds	r1, #255	; 0xff
    29da:	4798      	blx	r3
    29dc:	21aa      	movs	r1, #170	; 0xaa
    29de:	682b      	ldr	r3, [r5, #0]
    29e0:	0004      	movs	r4, r0
    29e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    29e4:	0028      	movs	r0, r5
    29e6:	0049      	lsls	r1, r1, #1
    29e8:	4798      	blx	r3
    29ea:	0224      	lsls	r4, r4, #8
    29ec:	4320      	orrs	r0, r4
    29ee:	b280      	uxth	r0, r0
}
    29f0:	bd70      	pop	{r4, r5, r6, pc}

000029f2 <_ZN6SX12809GetStatusEv>:

RadioStatus_t SX1280::GetStatus( void )
{
    29f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t stat = 0;
    29f4:	466b      	mov	r3, sp
    29f6:	1ddc      	adds	r4, r3, #7
    29f8:	2300      	movs	r3, #0
    29fa:	7023      	strb	r3, [r4, #0]
    RadioStatus_t status;

    ReadCommand( RADIO_GET_STATUS, ( uint8_t * )&stat, 1 );
    29fc:	6803      	ldr	r3, [r0, #0]
    29fe:	0022      	movs	r2, r4
    2a00:	695d      	ldr	r5, [r3, #20]
    2a02:	21c0      	movs	r1, #192	; 0xc0
    2a04:	2301      	movs	r3, #1
    2a06:	47a8      	blx	r5
    status.Value = stat;
    return( status );
    2a08:	7820      	ldrb	r0, [r4, #0]
}
    2a0a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00002a0c <_ZN6SX12809GetOpModeEv>:

RadioOperatingModes_t SX1280::GetOpMode( void )
{
    return( OperatingMode );
    2a0c:	7b40      	ldrb	r0, [r0, #13]
}
    2a0e:	4770      	bx	lr

00002a10 <_ZN6SX12804InitEv>:
{
    2a10:	b510      	push	{r4, lr}
    2a12:	0004      	movs	r4, r0
    Reset( );
    2a14:	6803      	ldr	r3, [r0, #0]
    2a16:	689b      	ldr	r3, [r3, #8]
    2a18:	4798      	blx	r3
    Wakeup( );
    2a1a:	6823      	ldr	r3, [r4, #0]
    2a1c:	0020      	movs	r0, r4
    2a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2a20:	4798      	blx	r3
}
    2a22:	bd10      	pop	{r4, pc}

00002a24 <_ZN6SX12808SetSleepE13SleepParams_t>:

void SX1280::SetSleep( SleepParams_t sleepConfig )
{
    2a24:	b513      	push	{r0, r1, r4, lr}
    uint8_t sleep = ( sleepConfig.WakeUpRTC << 3 ) |
                    ( sleepConfig.InstructionRamRetention << 2 ) |
                    ( sleepConfig.DataBufferRetention << 1 ) |
                    ( sleepConfig.DataRamRetention );
    2a26:	466b      	mov	r3, sp
                    ( sleepConfig.InstructionRamRetention << 2 ) |
    2a28:	078c      	lsls	r4, r1, #30
                    ( sleepConfig.DataRamRetention );
    2a2a:	1dda      	adds	r2, r3, #7
    uint8_t sleep = ( sleepConfig.WakeUpRTC << 3 ) |
    2a2c:	07cb      	lsls	r3, r1, #31
    2a2e:	0fdb      	lsrs	r3, r3, #31
                    ( sleepConfig.InstructionRamRetention << 2 ) |
    2a30:	0fe4      	lsrs	r4, r4, #31
    2a32:	00a4      	lsls	r4, r4, #2
    uint8_t sleep = ( sleepConfig.WakeUpRTC << 3 ) |
    2a34:	00db      	lsls	r3, r3, #3
    2a36:	4323      	orrs	r3, r4
                    ( sleepConfig.DataRamRetention );
    2a38:	070c      	lsls	r4, r1, #28
                    ( sleepConfig.DataBufferRetention << 1 ) |
    2a3a:	0749      	lsls	r1, r1, #29
                    ( sleepConfig.DataRamRetention );
    2a3c:	0fe4      	lsrs	r4, r4, #31
                    ( sleepConfig.DataBufferRetention << 1 ) |
    2a3e:	0fc9      	lsrs	r1, r1, #31
    2a40:	4323      	orrs	r3, r4
    2a42:	0049      	lsls	r1, r1, #1
    2a44:	4319      	orrs	r1, r3
                    ( sleepConfig.DataRamRetention );
    2a46:	7011      	strb	r1, [r2, #0]

	OperatingModeBeforeSleep = OperatingMode;
    2a48:	7b43      	ldrb	r3, [r0, #13]
    OperatingMode = MODE_SLEEP;
    WriteCommand( RADIO_SET_SLEEP, &sleep, 1 );
    2a4a:	2184      	movs	r1, #132	; 0x84
	OperatingModeBeforeSleep = OperatingMode;
    2a4c:	7383      	strb	r3, [r0, #14]
    OperatingMode = MODE_SLEEP;
    2a4e:	2300      	movs	r3, #0
    2a50:	7343      	strb	r3, [r0, #13]
    WriteCommand( RADIO_SET_SLEEP, &sleep, 1 );
    2a52:	6803      	ldr	r3, [r0, #0]
    2a54:	691c      	ldr	r4, [r3, #16]
    2a56:	2301      	movs	r3, #1
    2a58:	47a0      	blx	r4
}
    2a5a:	bd13      	pop	{r0, r1, r4, pc}

00002a5c <_ZN6SX12809SetWakeupEv>:

void SX1280::SetWakeup( void )
{
	if(OperatingMode == MODE_SLEEP){
    2a5c:	7b43      	ldrb	r3, [r0, #13]
{
    2a5e:	b510      	push	{r4, lr}
	if(OperatingMode == MODE_SLEEP){
    2a60:	2b00      	cmp	r3, #0
    2a62:	d104      	bne.n	2a6e <_ZN6SX12809SetWakeupEv+0x12>
		OperatingMode = OperatingModeBeforeSleep;
    2a64:	7b83      	ldrb	r3, [r0, #14]
    2a66:	7343      	strb	r3, [r0, #13]
		Wakeup();
    2a68:	6803      	ldr	r3, [r0, #0]
    2a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2a6c:	4798      	blx	r3
	}
}
    2a6e:	bd10      	pop	{r4, pc}

00002a70 <_ZN6SX128010SetStandbyE19RadioStandbyModes_t>:

void SX1280::SetStandby( RadioStandbyModes_t standbyConfig )
{
    2a70:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2a72:	466b      	mov	r3, sp
    2a74:	1ddd      	adds	r5, r3, #7
    2a76:	71d9      	strb	r1, [r3, #7]
    WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
    2a78:	6803      	ldr	r3, [r0, #0]
    2a7a:	002a      	movs	r2, r5
    2a7c:	691e      	ldr	r6, [r3, #16]
    2a7e:	2180      	movs	r1, #128	; 0x80
    2a80:	2301      	movs	r3, #1
{
    2a82:	0004      	movs	r4, r0
    WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
    2a84:	47b0      	blx	r6
    if( standbyConfig == STDBY_RC )
    2a86:	782b      	ldrb	r3, [r5, #0]
    2a88:	2b00      	cmp	r3, #0
    2a8a:	d102      	bne.n	2a92 <_ZN6SX128010SetStandbyE19RadioStandbyModes_t+0x22>
    {
        OperatingMode = MODE_STDBY_RC;
    2a8c:	3302      	adds	r3, #2
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    2a8e:	7363      	strb	r3, [r4, #13]
    }
}
    2a90:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
        OperatingMode = MODE_STDBY_XOSC;
    2a92:	2303      	movs	r3, #3
    2a94:	e7fb      	b.n	2a8e <_ZN6SX128010SetStandbyE19RadioStandbyModes_t+0x1e>

00002a96 <_ZN6SX128013SetPacketTypeE18RadioPacketTypes_t>:
{
    WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SX1280::SetPacketType( RadioPacketTypes_t packetType )
{
    2a96:	b513      	push	{r0, r1, r4, lr}
    2a98:	466b      	mov	r3, sp
    2a9a:	1dda      	adds	r2, r3, #7
    // Save packet type internally to avoid questioning the radio
    this->PacketType = packetType;

    WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
    2a9c:	6803      	ldr	r3, [r0, #0]
{
    2a9e:	7011      	strb	r1, [r2, #0]
    this->PacketType = packetType;
    2aa0:	73c1      	strb	r1, [r0, #15]
    WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
    2aa2:	691c      	ldr	r4, [r3, #16]
    2aa4:	218a      	movs	r1, #138	; 0x8a
    2aa6:	2301      	movs	r3, #1
    2aa8:	47a0      	blx	r4
}
    2aaa:	bd13      	pop	{r0, r1, r4, pc}

00002aac <_ZN6SX128014SetRfFrequencyEm>:
    }
    return packetType;
}

void SX1280::SetRfFrequency( uint32_t rfFrequency )
{
    2aac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2aae:	0004      	movs	r4, r0
    uint8_t buf[3];
    uint32_t freq = 0;

    freq = ( uint32_t )( ( double )rfFrequency / ( double )FREQ_STEP );
    2ab0:	0008      	movs	r0, r1
    2ab2:	f008 fad5 	bl	b060 <__aeabi_ui2d>
    2ab6:	2200      	movs	r2, #0
    2ab8:	4b08      	ldr	r3, [pc, #32]	; (2adc <_ZN6SX128014SetRfFrequencyEm+0x30>)
    2aba:	f007 f891 	bl	9be0 <__aeabi_ddiv>
    2abe:	f006 f97d 	bl	8dbc <__aeabi_d2uiz>
    buf[0] = ( uint8_t )( ( freq >> 16 ) & 0xFF );
    2ac2:	aa01      	add	r2, sp, #4
    2ac4:	0c03      	lsrs	r3, r0, #16
    2ac6:	7013      	strb	r3, [r2, #0]
    buf[1] = ( uint8_t )( ( freq >> 8 ) & 0xFF );
    2ac8:	0a03      	lsrs	r3, r0, #8
    2aca:	7053      	strb	r3, [r2, #1]
    buf[2] = ( uint8_t )( freq & 0xFF );
    WriteCommand( RADIO_SET_RFFREQUENCY, buf, 3 );
    2acc:	6823      	ldr	r3, [r4, #0]
    buf[2] = ( uint8_t )( freq & 0xFF );
    2ace:	7090      	strb	r0, [r2, #2]
    WriteCommand( RADIO_SET_RFFREQUENCY, buf, 3 );
    2ad0:	691d      	ldr	r5, [r3, #16]
    2ad2:	2186      	movs	r1, #134	; 0x86
    2ad4:	2303      	movs	r3, #3
    2ad6:	0020      	movs	r0, r4
    2ad8:	47a8      	blx	r5
}
    2ada:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    2adc:	4068cba8 	.word	0x4068cba8

00002ae0 <_ZN6SX128011SetTxParamsEa16RadioRampTimes_t>:

void SX1280::SetTxParams( int8_t power, RadioRampTimes_t rampTime )
{
    2ae0:	b537      	push	{r0, r1, r2, r4, r5, lr}

    // The power value to send on SPI/UART is in the range [0..31] and the
    // physical output power is in the range [-18..13]dBm
    buf[0] = power + 18;
    buf[1] = ( uint8_t )rampTime;
    WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
    2ae2:	6803      	ldr	r3, [r0, #0]
    buf[0] = power + 18;
    2ae4:	ac01      	add	r4, sp, #4
    2ae6:	3112      	adds	r1, #18
    WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
    2ae8:	691d      	ldr	r5, [r3, #16]
    buf[0] = power + 18;
    2aea:	7021      	strb	r1, [r4, #0]
    buf[1] = ( uint8_t )rampTime;
    2aec:	7062      	strb	r2, [r4, #1]
    WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
    2aee:	2302      	movs	r3, #2
    2af0:	0022      	movs	r2, r4
    2af2:	218e      	movs	r1, #142	; 0x8e
    2af4:	47a8      	blx	r5
}
    2af6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

00002af8 <_ZN6SX128022SetBufferBaseAddressesEhh>:
    WriteCommand( RADIO_SET_CADPARAMS, ( uint8_t* )&cadSymbolNum, 1 );
    OperatingMode = MODE_CAD;
}

void SX1280::SetBufferBaseAddresses( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
    2af8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t buf[2];

    buf[0] = txBaseAddress;
    buf[1] = rxBaseAddress;
    WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
    2afa:	6803      	ldr	r3, [r0, #0]
    buf[0] = txBaseAddress;
    2afc:	ac01      	add	r4, sp, #4
    WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
    2afe:	691d      	ldr	r5, [r3, #16]
    buf[0] = txBaseAddress;
    2b00:	7021      	strb	r1, [r4, #0]
    buf[1] = rxBaseAddress;
    2b02:	7062      	strb	r2, [r4, #1]
    WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
    2b04:	2302      	movs	r3, #2
    2b06:	0022      	movs	r2, r4
    2b08:	218f      	movs	r1, #143	; 0x8f
    2b0a:	47a8      	blx	r5
}
    2b0c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

00002b0e <_ZN6SX128019SetModulationParamsEP18ModulationParams_t>:

void SX1280::SetModulationParams( ModulationParams_t *modParams )
{
    2b0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2b10:	000c      	movs	r4, r1
    uint8_t buf[3];

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( this->PacketType != modParams->PacketType )
    2b12:	7bc3      	ldrb	r3, [r0, #15]
    2b14:	7809      	ldrb	r1, [r1, #0]
{
    2b16:	0005      	movs	r5, r0
    if( this->PacketType != modParams->PacketType )
    2b18:	428b      	cmp	r3, r1
    2b1a:	d001      	beq.n	2b20 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0x12>
    {
        this->SetPacketType( modParams->PacketType );
    2b1c:	f7ff ffbb 	bl	2a96 <_ZN6SX128013SetPacketTypeE18RadioPacketTypes_t>
    }

    switch( modParams->PacketType )
    2b20:	7820      	ldrb	r0, [r4, #0]
    2b22:	aa01      	add	r2, sp, #4
    2b24:	280f      	cmp	r0, #15
    2b26:	d817      	bhi.n	2b58 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0x4a>
    2b28:	f005 ff2e 	bl	8988 <__gnu_thumb1_case_uqi>
    2b2c:	1d0f0f08 	.word	0x1d0f0f08
    2b30:	16161623 	.word	0x16161623
    2b34:	16161616 	.word	0x16161616
    2b38:	29161616 	.word	0x29161616
    {
        case PACKET_TYPE_GFSK:
            buf[0] = modParams->Params.Gfsk.BitrateBandwidth;
    2b3c:	7863      	ldrb	r3, [r4, #1]
    2b3e:	7013      	strb	r3, [r2, #0]
            buf[1] = modParams->Params.Gfsk.ModulationIndex;
    2b40:	78a3      	ldrb	r3, [r4, #2]
    2b42:	7053      	strb	r3, [r2, #1]
            buf[2] = modParams->Params.Gfsk.ModulationShaping;
    2b44:	78e3      	ldrb	r3, [r4, #3]
            buf[2] = modParams->Params.Ble.ModulationShaping;
            break;
        case PACKET_TYPE_NONE:
            buf[0] = 0;
            buf[1] = 0;
            buf[2] = 0;
    2b46:	7093      	strb	r3, [r2, #2]
            break;
    2b48:	e006      	b.n	2b58 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0x4a>
            buf[0] = modParams->Params.LoRa.SpreadingFactor;
    2b4a:	7923      	ldrb	r3, [r4, #4]
    2b4c:	7013      	strb	r3, [r2, #0]
            buf[1] = modParams->Params.LoRa.Bandwidth;
    2b4e:	7963      	ldrb	r3, [r4, #5]
    2b50:	7053      	strb	r3, [r2, #1]
            buf[2] = modParams->Params.LoRa.CodingRate;
    2b52:	79a1      	ldrb	r1, [r4, #6]
            this->LoRaBandwidth = modParams->Params.LoRa.Bandwidth;
    2b54:	742b      	strb	r3, [r5, #16]
            buf[2] = modParams->Params.LoRa.CodingRate;
    2b56:	7091      	strb	r1, [r2, #2]
    }
    WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, 3 );
    2b58:	682b      	ldr	r3, [r5, #0]
    2b5a:	0028      	movs	r0, r5
    2b5c:	691c      	ldr	r4, [r3, #16]
    2b5e:	218b      	movs	r1, #139	; 0x8b
    2b60:	2303      	movs	r3, #3
    2b62:	47a0      	blx	r4
}
    2b64:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
            buf[0] = modParams->Params.Flrc.BitrateBandwidth;
    2b66:	79e3      	ldrb	r3, [r4, #7]
    2b68:	7013      	strb	r3, [r2, #0]
            buf[1] = modParams->Params.Flrc.CodingRate;
    2b6a:	7a23      	ldrb	r3, [r4, #8]
    2b6c:	7053      	strb	r3, [r2, #1]
            buf[2] = modParams->Params.Flrc.ModulationShaping;
    2b6e:	7a63      	ldrb	r3, [r4, #9]
    2b70:	e7e9      	b.n	2b46 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0x38>
            buf[0] = modParams->Params.Ble.BitrateBandwidth;
    2b72:	7aa3      	ldrb	r3, [r4, #10]
    2b74:	7013      	strb	r3, [r2, #0]
            buf[1] = modParams->Params.Ble.ModulationIndex;
    2b76:	7ae3      	ldrb	r3, [r4, #11]
    2b78:	7053      	strb	r3, [r2, #1]
            buf[2] = modParams->Params.Ble.ModulationShaping;
    2b7a:	7b23      	ldrb	r3, [r4, #12]
    2b7c:	e7e3      	b.n	2b46 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0x38>
            buf[0] = 0;
    2b7e:	2300      	movs	r3, #0
    2b80:	7013      	strb	r3, [r2, #0]
            buf[1] = 0;
    2b82:	7053      	strb	r3, [r2, #1]
    2b84:	e7df      	b.n	2b46 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0x38>

00002b86 <_ZN6SX128015SetPacketParamsEP14PacketParams_t>:

void SX1280::SetPacketParams( PacketParams_t *packetParams )
{
    2b86:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2b88:	000c      	movs	r4, r1
    uint8_t buf[7];
    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( this->PacketType != packetParams->PacketType )
    2b8a:	7bc3      	ldrb	r3, [r0, #15]
    2b8c:	7809      	ldrb	r1, [r1, #0]
{
    2b8e:	0005      	movs	r5, r0
    if( this->PacketType != packetParams->PacketType )
    2b90:	428b      	cmp	r3, r1
    2b92:	d001      	beq.n	2b98 <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x12>
    {
        this->SetPacketType( packetParams->PacketType );
    2b94:	f7ff ff7f 	bl	2a96 <_ZN6SX128013SetPacketTypeE18RadioPacketTypes_t>
    }

    switch( packetParams->PacketType )
    2b98:	7820      	ldrb	r0, [r4, #0]
    2b9a:	280f      	cmp	r0, #15
    2b9c:	d818      	bhi.n	2bd0 <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x4a>
    2b9e:	f005 fef3 	bl	8988 <__gnu_thumb1_case_uqi>
    2ba2:	1f08      	.short	0x1f08
    2ba4:	173c2d1f 	.word	0x173c2d1f
    2ba8:	17171717 	.word	0x17171717
    2bac:	17171717 	.word	0x17171717
    2bb0:	4817      	.short	0x4817
    {
        case PACKET_TYPE_GFSK:
            buf[0] = packetParams->Params.Gfsk.PreambleLength;
    2bb2:	466a      	mov	r2, sp
    2bb4:	7863      	ldrb	r3, [r4, #1]
    2bb6:	7013      	strb	r3, [r2, #0]
            buf[1] = packetParams->Params.Gfsk.SyncWordLength;
    2bb8:	78a3      	ldrb	r3, [r4, #2]
    2bba:	7053      	strb	r3, [r2, #1]
            buf[2] = packetParams->Params.Gfsk.SyncWordMatch;
    2bbc:	78e3      	ldrb	r3, [r4, #3]
    2bbe:	7093      	strb	r3, [r2, #2]
            buf[3] = packetParams->Params.Gfsk.HeaderType;
    2bc0:	7923      	ldrb	r3, [r4, #4]
    2bc2:	70d3      	strb	r3, [r2, #3]
            buf[4] = packetParams->Params.Gfsk.PayloadLength;
    2bc4:	7963      	ldrb	r3, [r4, #5]
    2bc6:	7113      	strb	r3, [r2, #4]
            buf[5] = packetParams->Params.Gfsk.CrcLength;
    2bc8:	79a3      	ldrb	r3, [r4, #6]
    2bca:	7153      	strb	r3, [r2, #5]
            buf[6] = packetParams->Params.Gfsk.Whitening;
    2bcc:	79e3      	ldrb	r3, [r4, #7]
            buf[1] = 0;
            buf[2] = 0;
            buf[3] = 0;
            buf[4] = 0;
            buf[5] = 0;
            buf[6] = 0;
    2bce:	7193      	strb	r3, [r2, #6]
            break;
    }
    WriteCommand( RADIO_SET_PACKETPARAMS, buf, 7 );
    2bd0:	682b      	ldr	r3, [r5, #0]
    2bd2:	0028      	movs	r0, r5
    2bd4:	691c      	ldr	r4, [r3, #16]
    2bd6:	466a      	mov	r2, sp
    2bd8:	2307      	movs	r3, #7
    2bda:	218c      	movs	r1, #140	; 0x8c
    2bdc:	47a0      	blx	r4
}
    2bde:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
            buf[0] = packetParams->Params.LoRa.PreambleLength;
    2be0:	466a      	mov	r2, sp
    2be2:	7a23      	ldrb	r3, [r4, #8]
    2be4:	7013      	strb	r3, [r2, #0]
            buf[1] = packetParams->Params.LoRa.HeaderType;
    2be6:	7a63      	ldrb	r3, [r4, #9]
    2be8:	7053      	strb	r3, [r2, #1]
            buf[2] = packetParams->Params.LoRa.PayloadLength;
    2bea:	7aa3      	ldrb	r3, [r4, #10]
    2bec:	7093      	strb	r3, [r2, #2]
            buf[3] = packetParams->Params.LoRa.CrcMode;
    2bee:	7ae3      	ldrb	r3, [r4, #11]
    2bf0:	70d3      	strb	r3, [r2, #3]
            buf[4] = packetParams->Params.LoRa.InvertIQ;
    2bf2:	7b23      	ldrb	r3, [r4, #12]
    2bf4:	7113      	strb	r3, [r2, #4]
            buf[5] = 0;
    2bf6:	2300      	movs	r3, #0
            buf[5] = 0;
    2bf8:	7153      	strb	r3, [r2, #5]
    2bfa:	e7e8      	b.n	2bce <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x48>
            buf[0] = packetParams->Params.Flrc.PreambleLength;
    2bfc:	466a      	mov	r2, sp
    2bfe:	7b63      	ldrb	r3, [r4, #13]
    2c00:	7013      	strb	r3, [r2, #0]
            buf[1] = packetParams->Params.Flrc.SyncWordLength;
    2c02:	7ba3      	ldrb	r3, [r4, #14]
    2c04:	7053      	strb	r3, [r2, #1]
            buf[2] = packetParams->Params.Flrc.SyncWordMatch;
    2c06:	7be3      	ldrb	r3, [r4, #15]
    2c08:	7093      	strb	r3, [r2, #2]
            buf[3] = packetParams->Params.Flrc.HeaderType;
    2c0a:	7c23      	ldrb	r3, [r4, #16]
    2c0c:	70d3      	strb	r3, [r2, #3]
            buf[4] = packetParams->Params.Flrc.PayloadLength;
    2c0e:	7c63      	ldrb	r3, [r4, #17]
    2c10:	7113      	strb	r3, [r2, #4]
            buf[5] = packetParams->Params.Flrc.CrcLength;
    2c12:	7ca3      	ldrb	r3, [r4, #18]
    2c14:	7153      	strb	r3, [r2, #5]
            buf[6] = packetParams->Params.Flrc.Whitening;
    2c16:	7ce3      	ldrb	r3, [r4, #19]
    2c18:	e7d9      	b.n	2bce <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x48>
            buf[0] = packetParams->Params.Ble.ConnectionState;
    2c1a:	466a      	mov	r2, sp
    2c1c:	7d23      	ldrb	r3, [r4, #20]
    2c1e:	7013      	strb	r3, [r2, #0]
            buf[1] = packetParams->Params.Ble.CrcLength;
    2c20:	7d63      	ldrb	r3, [r4, #21]
    2c22:	7053      	strb	r3, [r2, #1]
            buf[2] = packetParams->Params.Ble.BleTestPayload;
    2c24:	7da3      	ldrb	r3, [r4, #22]
    2c26:	7093      	strb	r3, [r2, #2]
            buf[3] = packetParams->Params.Ble.Whitening;
    2c28:	7de3      	ldrb	r3, [r4, #23]
    2c2a:	70d3      	strb	r3, [r2, #3]
            buf[4] = 0;
    2c2c:	2300      	movs	r3, #0
            buf[4] = 0;
    2c2e:	7113      	strb	r3, [r2, #4]
    2c30:	e7e2      	b.n	2bf8 <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x72>
            buf[0] = 0;
    2c32:	2300      	movs	r3, #0
    2c34:	466a      	mov	r2, sp
    2c36:	7013      	strb	r3, [r2, #0]
            buf[1] = 0;
    2c38:	7053      	strb	r3, [r2, #1]
            buf[2] = 0;
    2c3a:	7093      	strb	r3, [r2, #2]
            buf[3] = 0;
    2c3c:	70d3      	strb	r3, [r2, #3]
    2c3e:	e7f6      	b.n	2c2e <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0xa8>

00002c40 <_ZN6SX128017GetRxBufferStatusEPhS0_>:
{
    this->WriteRegister( REG_LR_PREAMBLELENGTH, ( this->ReadRegister( REG_LR_PREAMBLELENGTH ) & MASK_FORCE_PREAMBLELENGTH ) | preambleLength );
}

void SX1280::GetRxBufferStatus( uint8_t *rxPayloadLength, uint8_t *rxStartBufferPointer )
{
    2c40:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c42:	0004      	movs	r4, r0
    2c44:	b085      	sub	sp, #20
    uint8_t status[2];

    ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
    2c46:	6803      	ldr	r3, [r0, #0]
    2c48:	ad03      	add	r5, sp, #12
{
    2c4a:	9201      	str	r2, [sp, #4]
    ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
    2c4c:	695f      	ldr	r7, [r3, #20]
{
    2c4e:	000e      	movs	r6, r1
    ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
    2c50:	2302      	movs	r3, #2
    2c52:	002a      	movs	r2, r5
    2c54:	2117      	movs	r1, #23
    2c56:	47b8      	blx	r7

    // In case of LORA fixed header, the rxPayloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( this -> GetPacketType( true ) == PACKET_TYPE_LORA ) && ( ReadRegister( REG_LR_PACKETPARAMS ) >> 7 == 1 ) )
    2c58:	7be3      	ldrb	r3, [r4, #15]
    2c5a:	2b01      	cmp	r3, #1
    2c5c:	d110      	bne.n	2c80 <_ZN6SX128017GetRxBufferStatusEPhS0_+0x40>
    2c5e:	6823      	ldr	r3, [r4, #0]
    2c60:	490d      	ldr	r1, [pc, #52]	; (2c98 <_ZN6SX128017GetRxBufferStatusEPhS0_+0x58>)
    2c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2c64:	0020      	movs	r0, r4
    2c66:	4798      	blx	r3
    2c68:	11c0      	asrs	r0, r0, #7
    2c6a:	2801      	cmp	r0, #1
    2c6c:	d108      	bne.n	2c80 <_ZN6SX128017GetRxBufferStatusEPhS0_+0x40>
    {
        *rxPayloadLength = ReadRegister( REG_LR_PAYLOADLENGTH );
    2c6e:	6823      	ldr	r3, [r4, #0]
    2c70:	490a      	ldr	r1, [pc, #40]	; (2c9c <_ZN6SX128017GetRxBufferStatusEPhS0_+0x5c>)
    2c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2c74:	0020      	movs	r0, r4
    2c76:	4798      	blx	r3
    2c78:	7030      	strb	r0, [r6, #0]
    2c7a:	e007      	b.n	2c8c <_ZN6SX128017GetRxBufferStatusEPhS0_+0x4c>
        // so it is added there
        *rxPayloadLength = status[0] + 2;
    }
    else
    {
        *rxPayloadLength = status[0];
    2c7c:	782b      	ldrb	r3, [r5, #0]
    2c7e:	e004      	b.n	2c8a <_ZN6SX128017GetRxBufferStatusEPhS0_+0x4a>
    else if( this -> GetPacketType( true ) == PACKET_TYPE_BLE )
    2c80:	7be3      	ldrb	r3, [r4, #15]
    2c82:	2b04      	cmp	r3, #4
    2c84:	d1fa      	bne.n	2c7c <_ZN6SX128017GetRxBufferStatusEPhS0_+0x3c>
        *rxPayloadLength = status[0] + 2;
    2c86:	782b      	ldrb	r3, [r5, #0]
    2c88:	3302      	adds	r3, #2
        *rxPayloadLength = status[0];
    2c8a:	7033      	strb	r3, [r6, #0]
    }

    *rxStartBufferPointer = status[1];
    2c8c:	786b      	ldrb	r3, [r5, #1]
    2c8e:	9a01      	ldr	r2, [sp, #4]
    2c90:	7013      	strb	r3, [r2, #0]
}
    2c92:	b005      	add	sp, #20
    2c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c96:	46c0      	nop			; (mov r8, r8)
    2c98:	00000903 	.word	0x00000903
    2c9c:	00000901 	.word	0x00000901

00002ca0 <_ZN6SX128015GetPacketStatusEP14PacketStatus_t>:

void SX1280::GetPacketStatus( PacketStatus_t *packetStatus )
{
    2ca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2ca2:	0005      	movs	r5, r0
    2ca4:	000c      	movs	r4, r1
    uint8_t status[5];

    ReadCommand( RADIO_GET_PACKETSTATUS, status, 5 );
    2ca6:	6803      	ldr	r3, [r0, #0]
    2ca8:	466a      	mov	r2, sp
    2caa:	695e      	ldr	r6, [r3, #20]
    2cac:	211d      	movs	r1, #29
    2cae:	2305      	movs	r3, #5
    2cb0:	47b0      	blx	r6
        packetType = this->PacketType;
    2cb2:	7be8      	ldrb	r0, [r5, #15]

    packetStatus->packetType = this -> GetPacketType( true );
    2cb4:	7020      	strb	r0, [r4, #0]
    switch( packetStatus->packetType )
    2cb6:	280f      	cmp	r0, #15
    2cb8:	d85b      	bhi.n	2d72 <_ZN6SX128015GetPacketStatusEP14PacketStatus_t+0xd2>
    2cba:	f005 fe65 	bl	8988 <__gnu_thumb1_case_uqi>
    2cbe:	4f08      	.short	0x4f08
    2cc0:	5aaa5e4f 	.word	0x5aaa5e4f
    2cc4:	5a5a5a5a 	.word	0x5a5a5a5a
    2cc8:	5a5a5a5a 	.word	0x5a5a5a5a
    2ccc:	e35a      	.short	0xe35a
    {
        case PACKET_TYPE_GFSK:
            packetStatus->Gfsk.RssiSync = -( status[1] / 2 );
    2cce:	466b      	mov	r3, sp
    2cd0:	785b      	ldrb	r3, [r3, #1]

            packetStatus->Gfsk.ErrorStatus.SyncError = ( status[2] >> 6 ) & 0x01;
    2cd2:	2201      	movs	r2, #1
            packetStatus->Gfsk.RssiSync = -( status[1] / 2 );
    2cd4:	085b      	lsrs	r3, r3, #1
    2cd6:	425b      	negs	r3, r3
    2cd8:	7063      	strb	r3, [r4, #1]
            packetStatus->Gfsk.ErrorStatus.SyncError = ( status[2] >> 6 ) & 0x01;
    2cda:	466b      	mov	r3, sp
    2cdc:	7898      	ldrb	r0, [r3, #2]
    2cde:	78a3      	ldrb	r3, [r4, #2]
    2ce0:	0981      	lsrs	r1, r0, #6
    2ce2:	4011      	ands	r1, r2
    2ce4:	4393      	bics	r3, r2
            packetStatus->Gfsk.ErrorStatus.LengthError = ( status[2] >> 5 ) & 0x01;
    2ce6:	0945      	lsrs	r5, r0, #5
    2ce8:	4015      	ands	r5, r2
    2cea:	430b      	orrs	r3, r1
    2cec:	2102      	movs	r1, #2
    2cee:	4095      	lsls	r5, r2
            packetStatus->Gfsk.ErrorStatus.CrcError = ( status[2] >> 4 ) & 0x01;
    2cf0:	0906      	lsrs	r6, r0, #4
            packetStatus->Gfsk.ErrorStatus.LengthError = ( status[2] >> 5 ) & 0x01;
    2cf2:	438b      	bics	r3, r1
            packetStatus->Gfsk.ErrorStatus.CrcError = ( status[2] >> 4 ) & 0x01;
    2cf4:	4016      	ands	r6, r2
    2cf6:	432b      	orrs	r3, r5
    2cf8:	2504      	movs	r5, #4
    2cfa:	408e      	lsls	r6, r1
    2cfc:	43ab      	bics	r3, r5
            packetStatus->Gfsk.ErrorStatus.AbortError = ( status[2] >> 3 ) & 0x01;
    2cfe:	4333      	orrs	r3, r6
    2d00:	2608      	movs	r6, #8
    2d02:	08c5      	lsrs	r5, r0, #3
    2d04:	4015      	ands	r5, r2
    2d06:	00ed      	lsls	r5, r5, #3
    2d08:	43b3      	bics	r3, r6
            packetStatus->Gfsk.ErrorStatus.HeaderReceived = ( status[2] >> 2 ) & 0x01;
    2d0a:	432b      	orrs	r3, r5
    2d0c:	2510      	movs	r5, #16
    2d0e:	0886      	lsrs	r6, r0, #2
    2d10:	4016      	ands	r6, r2
    2d12:	0136      	lsls	r6, r6, #4
    2d14:	43ab      	bics	r3, r5
            packetStatus->Gfsk.ErrorStatus.PacketReceived = ( status[2] >> 1 ) & 0x01;
    2d16:	4333      	orrs	r3, r6
    2d18:	2620      	movs	r6, #32
    2d1a:	0845      	lsrs	r5, r0, #1
    2d1c:	4015      	ands	r5, r2
    2d1e:	016d      	lsls	r5, r5, #5
    2d20:	43b3      	bics	r3, r6
            packetStatus->Gfsk.ErrorStatus.PacketControlerBusy = status[2] & 0x01;
    2d22:	432b      	orrs	r3, r5
    2d24:	2540      	movs	r5, #64	; 0x40
    2d26:	4010      	ands	r0, r2
    2d28:	0180      	lsls	r0, r0, #6
    2d2a:	43ab      	bics	r3, r5
    2d2c:	4303      	orrs	r3, r0
    2d2e:	70a3      	strb	r3, [r4, #2]

            packetStatus->Gfsk.TxRxStatus.RxNoAck = ( status[3] >> 5 ) & 0x01;
    2d30:	466b      	mov	r3, sp
    2d32:	78d8      	ldrb	r0, [r3, #3]
    2d34:	78e3      	ldrb	r3, [r4, #3]
    2d36:	0945      	lsrs	r5, r0, #5
    2d38:	4015      	ands	r5, r2
    2d3a:	4393      	bics	r3, r2
            packetStatus->Gfsk.TxRxStatus.PacketSent = status[3] & 0x01;
    2d3c:	4010      	ands	r0, r2
    2d3e:	432b      	orrs	r3, r5
    2d40:	4090      	lsls	r0, r2
    2d42:	001a      	movs	r2, r3
    2d44:	438a      	bics	r2, r1
    2d46:	4302      	orrs	r2, r0
    2d48:	70e2      	strb	r2, [r4, #3]
            packetStatus->Ble.ErrorStatus.PacketReceived = ( status[2] >> 1 ) & 0x01;
            packetStatus->Ble.ErrorStatus.PacketControlerBusy = status[2] & 0x01;

            packetStatus->Ble.TxRxStatus.PacketSent = status[3] & 0x01;

            packetStatus->Ble.SyncAddrStatus = status[4] & 0x07;
    2d4a:	466b      	mov	r3, sp
    2d4c:	2107      	movs	r1, #7
    2d4e:	791a      	ldrb	r2, [r3, #4]
    2d50:	7923      	ldrb	r3, [r4, #4]
    2d52:	400a      	ands	r2, r1
    2d54:	438b      	bics	r3, r1
    2d56:	4313      	orrs	r3, r2
    2d58:	7123      	strb	r3, [r4, #4]
            break;
    2d5a:	e00a      	b.n	2d72 <_ZN6SX128015GetPacketStatusEP14PacketStatus_t+0xd2>
            packetStatus->LoRa.RssiPkt = -( status[0] / 2 );
    2d5c:	466b      	mov	r3, sp
    2d5e:	781b      	ldrb	r3, [r3, #0]
    2d60:	085b      	lsrs	r3, r3, #1
    2d62:	425b      	negs	r3, r3
    2d64:	7063      	strb	r3, [r4, #1]
            ( status[1] < 128 ) ? ( packetStatus->LoRa.SnrPkt = status[1] / 4 ) : ( packetStatus->LoRa.SnrPkt = ( ( status[1] - 256 ) /4 ) );
    2d66:	466b      	mov	r3, sp
    2d68:	785b      	ldrb	r3, [r3, #1]
    2d6a:	2b7f      	cmp	r3, #127	; 0x7f
    2d6c:	dc02      	bgt.n	2d74 <_ZN6SX128015GetPacketStatusEP14PacketStatus_t+0xd4>
    2d6e:	089b      	lsrs	r3, r3, #2
    2d70:	70a3      	strb	r3, [r4, #2]
            // and reset the packet type accordingly
            memset( packetStatus, 0, sizeof( PacketStatus_t ) );
            packetStatus->packetType = PACKET_TYPE_NONE;
            break;
    }
}
    2d72:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            ( status[1] < 128 ) ? ( packetStatus->LoRa.SnrPkt = status[1] / 4 ) : ( packetStatus->LoRa.SnrPkt = ( ( status[1] - 256 ) /4 ) );
    2d74:	3bfd      	subs	r3, #253	; 0xfd
    2d76:	109b      	asrs	r3, r3, #2
    2d78:	e7fa      	b.n	2d70 <_ZN6SX128015GetPacketStatusEP14PacketStatus_t+0xd0>
            packetStatus->Flrc.RssiSync = -( status[1] / 2 );
    2d7a:	466b      	mov	r3, sp
    2d7c:	785b      	ldrb	r3, [r3, #1]
            packetStatus->Flrc.ErrorStatus.SyncError = ( status[2] >> 6 ) & 0x01;
    2d7e:	2101      	movs	r1, #1
            packetStatus->Flrc.RssiSync = -( status[1] / 2 );
    2d80:	085b      	lsrs	r3, r3, #1
    2d82:	425b      	negs	r3, r3
    2d84:	7063      	strb	r3, [r4, #1]
            packetStatus->Flrc.ErrorStatus.SyncError = ( status[2] >> 6 ) & 0x01;
    2d86:	466b      	mov	r3, sp
    2d88:	7898      	ldrb	r0, [r3, #2]
    2d8a:	78a2      	ldrb	r2, [r4, #2]
    2d8c:	0983      	lsrs	r3, r0, #6
    2d8e:	400b      	ands	r3, r1
    2d90:	438a      	bics	r2, r1
            packetStatus->Flrc.ErrorStatus.LengthError = ( status[2] >> 5 ) & 0x01;
    2d92:	431a      	orrs	r2, r3
    2d94:	2302      	movs	r3, #2
    2d96:	0945      	lsrs	r5, r0, #5
    2d98:	400d      	ands	r5, r1
    2d9a:	408d      	lsls	r5, r1
            packetStatus->Flrc.ErrorStatus.CrcError = ( status[2] >> 4 ) & 0x01;
    2d9c:	0907      	lsrs	r7, r0, #4
    2d9e:	2604      	movs	r6, #4
    2da0:	400f      	ands	r7, r1
    2da2:	409f      	lsls	r7, r3
            packetStatus->Flrc.ErrorStatus.LengthError = ( status[2] >> 5 ) & 0x01;
    2da4:	439a      	bics	r2, r3
            packetStatus->Flrc.ErrorStatus.CrcError = ( status[2] >> 4 ) & 0x01;
    2da6:	432a      	orrs	r2, r5
    2da8:	43b2      	bics	r2, r6
            packetStatus->Flrc.ErrorStatus.AbortError = ( status[2] >> 3 ) & 0x01;
    2daa:	433a      	orrs	r2, r7
    2dac:	2708      	movs	r7, #8
    2dae:	08c5      	lsrs	r5, r0, #3
    2db0:	400d      	ands	r5, r1
    2db2:	00ed      	lsls	r5, r5, #3
    2db4:	43ba      	bics	r2, r7
            packetStatus->Flrc.ErrorStatus.HeaderReceived = ( status[2] >> 2 ) & 0x01;
    2db6:	432a      	orrs	r2, r5
    2db8:	2510      	movs	r5, #16
    2dba:	43aa      	bics	r2, r5
    2dbc:	4694      	mov	ip, r2
    2dbe:	0883      	lsrs	r3, r0, #2
    2dc0:	400b      	ands	r3, r1
            packetStatus->Flrc.ErrorStatus.PacketReceived = ( status[2] >> 1 ) & 0x01;
    2dc2:	4665      	mov	r5, ip
            packetStatus->Flrc.ErrorStatus.HeaderReceived = ( status[2] >> 2 ) & 0x01;
    2dc4:	40b3      	lsls	r3, r6
            packetStatus->Flrc.ErrorStatus.PacketReceived = ( status[2] >> 1 ) & 0x01;
    2dc6:	432b      	orrs	r3, r5
    2dc8:	2520      	movs	r5, #32
    2dca:	0842      	lsrs	r2, r0, #1
    2dcc:	400a      	ands	r2, r1
    2dce:	0152      	lsls	r2, r2, #5
    2dd0:	43ab      	bics	r3, r5
            packetStatus->Flrc.ErrorStatus.PacketControlerBusy = status[2] & 0x01;
    2dd2:	4313      	orrs	r3, r2
    2dd4:	2240      	movs	r2, #64	; 0x40
    2dd6:	4008      	ands	r0, r1
    2dd8:	4393      	bics	r3, r2
    2dda:	0180      	lsls	r0, r0, #6
    2ddc:	4318      	orrs	r0, r3
            packetStatus->Flrc.TxRxStatus.RxPid = ( status[3] >> 6 ) & 0x03;
    2dde:	466b      	mov	r3, sp
            packetStatus->Flrc.ErrorStatus.PacketControlerBusy = status[2] & 0x01;
    2de0:	70a0      	strb	r0, [r4, #2]
            packetStatus->Flrc.TxRxStatus.RxPid = ( status[3] >> 6 ) & 0x03;
    2de2:	78da      	ldrb	r2, [r3, #3]
    2de4:	78e0      	ldrb	r0, [r4, #3]
    2de6:	3d1d      	subs	r5, #29
    2de8:	43a8      	bics	r0, r5
    2dea:	0993      	lsrs	r3, r2, #6
            packetStatus->Flrc.TxRxStatus.RxNoAck = ( status[3] >> 5 ) & 0x01;
    2dec:	0955      	lsrs	r5, r2, #5
    2dee:	400d      	ands	r5, r1
    2df0:	4303      	orrs	r3, r0
    2df2:	00ad      	lsls	r5, r5, #2
            packetStatus->Flrc.TxRxStatus.RxPidErr = ( status[3] >> 4 ) & 0x01;
    2df4:	0910      	lsrs	r0, r2, #4
            packetStatus->Flrc.TxRxStatus.RxNoAck = ( status[3] >> 5 ) & 0x01;
    2df6:	43b3      	bics	r3, r6
            packetStatus->Flrc.TxRxStatus.RxPidErr = ( status[3] >> 4 ) & 0x01;
    2df8:	4008      	ands	r0, r1
    2dfa:	432b      	orrs	r3, r5
    2dfc:	00c0      	lsls	r0, r0, #3
    2dfe:	43bb      	bics	r3, r7
            packetStatus->Flrc.TxRxStatus.PacketSent = status[3] & 0x01;
    2e00:	4303      	orrs	r3, r0
    2e02:	400a      	ands	r2, r1
    2e04:	0019      	movs	r1, r3
    2e06:	2310      	movs	r3, #16
    2e08:	40b2      	lsls	r2, r6
    2e0a:	4399      	bics	r1, r3
    2e0c:	4311      	orrs	r1, r2
    2e0e:	70e1      	strb	r1, [r4, #3]
    2e10:	e79b      	b.n	2d4a <_ZN6SX128015GetPacketStatusEP14PacketStatus_t+0xaa>
            packetStatus->Ble.RssiSync =  -( status[1] / 2 );
    2e12:	466b      	mov	r3, sp
    2e14:	785b      	ldrb	r3, [r3, #1]
            packetStatus->Ble.ErrorStatus.SyncError = ( status[2] >> 6 ) & 0x01;
    2e16:	2201      	movs	r2, #1
            packetStatus->Ble.RssiSync =  -( status[1] / 2 );
    2e18:	085b      	lsrs	r3, r3, #1
    2e1a:	425b      	negs	r3, r3
    2e1c:	7063      	strb	r3, [r4, #1]
            packetStatus->Ble.ErrorStatus.SyncError = ( status[2] >> 6 ) & 0x01;
    2e1e:	466b      	mov	r3, sp
    2e20:	7899      	ldrb	r1, [r3, #2]
    2e22:	78a3      	ldrb	r3, [r4, #2]
    2e24:	098d      	lsrs	r5, r1, #6
    2e26:	4015      	ands	r5, r2
            packetStatus->Ble.ErrorStatus.LengthError = ( status[2] >> 5 ) & 0x01;
    2e28:	0948      	lsrs	r0, r1, #5
            packetStatus->Ble.ErrorStatus.SyncError = ( status[2] >> 6 ) & 0x01;
    2e2a:	4393      	bics	r3, r2
            packetStatus->Ble.ErrorStatus.LengthError = ( status[2] >> 5 ) & 0x01;
    2e2c:	432b      	orrs	r3, r5
    2e2e:	4010      	ands	r0, r2
    2e30:	2502      	movs	r5, #2
    2e32:	4090      	lsls	r0, r2
    2e34:	43ab      	bics	r3, r5
            packetStatus->Ble.ErrorStatus.CrcError = ( status[2] >> 4 ) & 0x01;
    2e36:	4303      	orrs	r3, r0
    2e38:	2004      	movs	r0, #4
    2e3a:	090d      	lsrs	r5, r1, #4
    2e3c:	4015      	ands	r5, r2
    2e3e:	00ad      	lsls	r5, r5, #2
    2e40:	4383      	bics	r3, r0
            packetStatus->Ble.ErrorStatus.AbortError = ( status[2] >> 3 ) & 0x01;
    2e42:	432b      	orrs	r3, r5
    2e44:	2508      	movs	r5, #8
    2e46:	08c8      	lsrs	r0, r1, #3
    2e48:	4010      	ands	r0, r2
    2e4a:	00c0      	lsls	r0, r0, #3
    2e4c:	43ab      	bics	r3, r5
            packetStatus->Ble.ErrorStatus.HeaderReceived = ( status[2] >> 2 ) & 0x01;
    2e4e:	4303      	orrs	r3, r0
    2e50:	2010      	movs	r0, #16
    2e52:	088d      	lsrs	r5, r1, #2
    2e54:	4015      	ands	r5, r2
    2e56:	012d      	lsls	r5, r5, #4
    2e58:	4383      	bics	r3, r0
            packetStatus->Ble.ErrorStatus.PacketReceived = ( status[2] >> 1 ) & 0x01;
    2e5a:	432b      	orrs	r3, r5
    2e5c:	2520      	movs	r5, #32
    2e5e:	0848      	lsrs	r0, r1, #1
    2e60:	4010      	ands	r0, r2
    2e62:	0140      	lsls	r0, r0, #5
    2e64:	43ab      	bics	r3, r5
            packetStatus->Ble.ErrorStatus.PacketControlerBusy = status[2] & 0x01;
    2e66:	4303      	orrs	r3, r0
    2e68:	2040      	movs	r0, #64	; 0x40
    2e6a:	4011      	ands	r1, r2
    2e6c:	0189      	lsls	r1, r1, #6
    2e6e:	4383      	bics	r3, r0
    2e70:	430b      	orrs	r3, r1
    2e72:	70a3      	strb	r3, [r4, #2]
            packetStatus->Ble.TxRxStatus.PacketSent = status[3] & 0x01;
    2e74:	466b      	mov	r3, sp
    2e76:	78d9      	ldrb	r1, [r3, #3]
    2e78:	78e3      	ldrb	r3, [r4, #3]
    2e7a:	4011      	ands	r1, r2
    2e7c:	4393      	bics	r3, r2
    2e7e:	430b      	orrs	r3, r1
    2e80:	70e3      	strb	r3, [r4, #3]
    2e82:	e762      	b.n	2d4a <_ZN6SX128015GetPacketStatusEP14PacketStatus_t+0xaa>
            memset( packetStatus, 0, sizeof( PacketStatus_t ) );
    2e84:	2205      	movs	r2, #5
    2e86:	2100      	movs	r1, #0
    2e88:	0020      	movs	r0, r4
    2e8a:	f008 fa72 	bl	b372 <memset>
            packetStatus->packetType = PACKET_TYPE_NONE;
    2e8e:	230f      	movs	r3, #15
    2e90:	7023      	strb	r3, [r4, #0]
}
    2e92:	e76e      	b.n	2d72 <_ZN6SX128015GetPacketStatusEP14PacketStatus_t+0xd2>

00002e94 <_ZN6SX128015SetDioIrqParamsEtttt>:

    return ( int8_t ) ( -raw / 2 );
}
*/
void SX1280::SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
    2e94:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
    2e96:	466e      	mov	r6, sp
{
    2e98:	ac06      	add	r4, sp, #24
    2e9a:	8824      	ldrh	r4, [r4, #0]
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
    2e9c:	0a0d      	lsrs	r5, r1, #8
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
    2e9e:	7071      	strb	r1, [r6, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
    2ea0:	70f2      	strb	r2, [r6, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
    2ea2:	7173      	strb	r3, [r6, #5]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
    2ea4:	0a11      	lsrs	r1, r2, #8
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
    2ea6:	0a1a      	lsrs	r2, r3, #8
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
    2ea8:	0a23      	lsrs	r3, r4, #8
    2eaa:	71b3      	strb	r3, [r6, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
    WriteCommand( RADIO_SET_DIOIRQPARAMS, buf, 8 );
    2eac:	6803      	ldr	r3, [r0, #0]
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
    2eae:	7035      	strb	r5, [r6, #0]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
    2eb0:	70b1      	strb	r1, [r6, #2]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
    2eb2:	7132      	strb	r2, [r6, #4]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
    2eb4:	71f4      	strb	r4, [r6, #7]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
    2eb6:	466a      	mov	r2, sp
    WriteCommand( RADIO_SET_DIOIRQPARAMS, buf, 8 );
    2eb8:	691c      	ldr	r4, [r3, #16]
    2eba:	218d      	movs	r1, #141	; 0x8d
    2ebc:	2308      	movs	r3, #8
    2ebe:	47a0      	blx	r4
}
    2ec0:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

00002ec2 <_ZN6SX128012GetIrqStatusEv>:

uint16_t SX1280::GetIrqStatus( void )
{
    2ec2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t irqStatus[2];
    ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    2ec4:	6803      	ldr	r3, [r0, #0]
    2ec6:	ac01      	add	r4, sp, #4
    2ec8:	695d      	ldr	r5, [r3, #20]
    2eca:	0022      	movs	r2, r4
    2ecc:	2302      	movs	r3, #2
    2ece:	2115      	movs	r1, #21
    2ed0:	47a8      	blx	r5
    return ( irqStatus[0] << 8 ) | irqStatus[1];
    2ed2:	7823      	ldrb	r3, [r4, #0]
    2ed4:	7860      	ldrb	r0, [r4, #1]
    2ed6:	021b      	lsls	r3, r3, #8
    2ed8:	4318      	orrs	r0, r3
}
    2eda:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00002edc <_ZN6SX128014ClearIrqStatusEt>:

void SX1280::ClearIrqStatus( uint16_t irqMask )
{
    2edc:	b513      	push	{r0, r1, r4, lr}
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( ( uint16_t )irqMask >> 8 ) & 0x00FF );
    2ede:	0a0b      	lsrs	r3, r1, #8
    2ee0:	aa01      	add	r2, sp, #4
    2ee2:	7013      	strb	r3, [r2, #0]
    buf[1] = ( uint8_t )( ( uint16_t )irqMask & 0x00FF );
    WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
    2ee4:	6803      	ldr	r3, [r0, #0]
    buf[1] = ( uint8_t )( ( uint16_t )irqMask & 0x00FF );
    2ee6:	7051      	strb	r1, [r2, #1]
    WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
    2ee8:	691c      	ldr	r4, [r3, #16]
    2eea:	2197      	movs	r1, #151	; 0x97
    2eec:	2302      	movs	r3, #2
    2eee:	47a0      	blx	r4
}
    2ef0:	bd13      	pop	{r0, r1, r4, pc}

00002ef2 <_ZN6SX128016SetRegulatorModeE21RadioRegulatorModes_t>:
                  ( calibParam.RC64KEnable );
    WriteCommand( RADIO_CALIBRATE, &cal, 1 );
}

void SX1280::SetRegulatorMode( RadioRegulatorModes_t mode )
{
    2ef2:	b513      	push	{r0, r1, r4, lr}
    2ef4:	466b      	mov	r3, sp
    2ef6:	1dda      	adds	r2, r3, #7
    WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
    2ef8:	6803      	ldr	r3, [r0, #0]
{
    2efa:	7011      	strb	r1, [r2, #0]
    WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
    2efc:	691c      	ldr	r4, [r3, #16]
    2efe:	2196      	movs	r1, #150	; 0x96
    2f00:	2301      	movs	r3, #1
    2f02:	47a0      	blx	r4
}
    2f04:	bd13      	pop	{r0, r1, r4, pc}

00002f06 <_ZN6SX128014SetSaveContextEv>:

void SX1280::SetSaveContext( void )
{
    WriteCommand( RADIO_SET_SAVECONTEXT, 0, 0 );
    2f06:	6803      	ldr	r3, [r0, #0]
{
    2f08:	b510      	push	{r4, lr}
    WriteCommand( RADIO_SET_SAVECONTEXT, 0, 0 );
    2f0a:	691c      	ldr	r4, [r3, #16]
    2f0c:	2300      	movs	r3, #0
    2f0e:	21d5      	movs	r1, #213	; 0xd5
    2f10:	001a      	movs	r2, r3
    2f12:	47a0      	blx	r4
}
    2f14:	bd10      	pop	{r4, pc}

00002f16 <_ZN6SX128010SetPayloadEPhhh>:
{
    WriteCommand( RADIO_SET_LONGPREAMBLE, ( uint8_t * )&enable, 1 );
}

void SX1280::SetPayload( uint8_t *buffer, uint8_t size, uint8_t offset )
{
    2f16:	b570      	push	{r4, r5, r6, lr}
    2f18:	000d      	movs	r5, r1
    2f1a:	0019      	movs	r1, r3
    WriteBuffer( offset, buffer, size );
    2f1c:	6803      	ldr	r3, [r0, #0]
    2f1e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    2f20:	0013      	movs	r3, r2
    2f22:	002a      	movs	r2, r5
    2f24:	47a0      	blx	r4
}
    2f26:	bd70      	pop	{r4, r5, r6, pc}

00002f28 <_ZN6SX128010GetPayloadEPhS0_h>:

uint8_t SX1280::GetPayload( uint8_t *buffer, uint8_t *size , uint8_t maxSize )
{
    2f28:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f2a:	0016      	movs	r6, r2
    2f2c:	b085      	sub	sp, #20
    2f2e:	9301      	str	r3, [sp, #4]
    uint8_t offset;

    GetRxBufferStatus( size, &offset );
    2f30:	ab02      	add	r3, sp, #8
    2f32:	1ddd      	adds	r5, r3, #7
    2f34:	002a      	movs	r2, r5
{
    2f36:	000f      	movs	r7, r1
    GetRxBufferStatus( size, &offset );
    2f38:	0031      	movs	r1, r6
{
    2f3a:	0004      	movs	r4, r0
    GetRxBufferStatus( size, &offset );
    2f3c:	f7ff fe80 	bl	2c40 <_ZN6SX128017GetRxBufferStatusEPhS0_>
    if( *size > maxSize )
    2f40:	7833      	ldrb	r3, [r6, #0]
    2f42:	9a01      	ldr	r2, [sp, #4]
    {
        return 1;
    2f44:	2001      	movs	r0, #1
    if( *size > maxSize )
    2f46:	4293      	cmp	r3, r2
    2f48:	dc06      	bgt.n	2f58 <_ZN6SX128010GetPayloadEPhS0_h+0x30>
    }
    ReadBuffer( offset, buffer, *size );
    2f4a:	6822      	ldr	r2, [r4, #0]
    2f4c:	7829      	ldrb	r1, [r5, #0]
    2f4e:	0020      	movs	r0, r4
    2f50:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
    2f52:	003a      	movs	r2, r7
    2f54:	47a8      	blx	r5
    return 0;
    2f56:	2000      	movs	r0, #0
}
    2f58:	b005      	add	sp, #20
    2f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002f5c <_ZN6SX128014SetRangingRoleE19RadioRangingRoles_t>:
    // Silently set 8 as minimum value
    WriteRegister( REG_LR_RANGINGFILTERWINDOWSIZE, ( num < DEFAULT_RANGING_FILTER_SIZE ) ? DEFAULT_RANGING_FILTER_SIZE : num );
}

void SX1280::SetRangingRole( RadioRangingRoles_t role )
{
    2f5c:	b513      	push	{r0, r1, r4, lr}
    uint8_t buf[1];

    buf[0] = role;
    WriteCommand( RADIO_SET_RANGING_ROLE, &buf[0], 1 );
    2f5e:	6803      	ldr	r3, [r0, #0]
    buf[0] = role;
    2f60:	aa01      	add	r2, sp, #4
    2f62:	7011      	strb	r1, [r2, #0]
    WriteCommand( RADIO_SET_RANGING_ROLE, &buf[0], 1 );
    2f64:	691c      	ldr	r4, [r3, #16]
    2f66:	21a3      	movs	r1, #163	; 0xa3
    2f68:	2301      	movs	r3, #1
    2f6a:	47a0      	blx	r4
}
    2f6c:	bd13      	pop	{r0, r1, r4, pc}
	...

00002f70 <_ZN6SX12805SetTxE10TickTime_s>:
{
    2f70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    2f72:	000b      	movs	r3, r1
    2f74:	0004      	movs	r4, r0
    2f76:	9101      	str	r1, [sp, #4]
    buf[0] = timeout.PeriodBase;
    2f78:	ad03      	add	r5, sp, #12
    2f7a:	0c09      	lsrs	r1, r1, #16
    2f7c:	702b      	strb	r3, [r5, #0]
    buf[2] = ( uint8_t )( timeout.PeriodBaseCount & 0x00FF );
    2f7e:	70a9      	strb	r1, [r5, #2]
    buf[1] = ( uint8_t )( ( timeout.PeriodBaseCount >> 8 ) & 0x00FF );
    2f80:	0a0b      	lsrs	r3, r1, #8
    ClearIrqStatus( IRQ_RADIO_ALL );
    2f82:	490a      	ldr	r1, [pc, #40]	; (2fac <_ZN6SX12805SetTxE10TickTime_s+0x3c>)
    buf[1] = ( uint8_t )( ( timeout.PeriodBaseCount >> 8 ) & 0x00FF );
    2f84:	706b      	strb	r3, [r5, #1]
    ClearIrqStatus( IRQ_RADIO_ALL );
    2f86:	f7ff ffa9 	bl	2edc <_ZN6SX128014ClearIrqStatusEt>
    if( GetPacketType( true ) == PACKET_TYPE_RANGING )
    2f8a:	7be3      	ldrb	r3, [r4, #15]
    2f8c:	2b02      	cmp	r3, #2
    2f8e:	d103      	bne.n	2f98 <_ZN6SX12805SetTxE10TickTime_s+0x28>
        SetRangingRole( RADIO_RANGING_ROLE_MASTER );
    2f90:	2101      	movs	r1, #1
    2f92:	0020      	movs	r0, r4
    2f94:	f7ff ffe2 	bl	2f5c <_ZN6SX128014SetRangingRoleE19RadioRangingRoles_t>
    WriteCommand( RADIO_SET_TX, buf, 3 );
    2f98:	6823      	ldr	r3, [r4, #0]
    2f9a:	002a      	movs	r2, r5
    2f9c:	691e      	ldr	r6, [r3, #16]
    2f9e:	2183      	movs	r1, #131	; 0x83
    2fa0:	2303      	movs	r3, #3
    2fa2:	0020      	movs	r0, r4
    2fa4:	47b0      	blx	r6
    OperatingMode = MODE_TX;
    2fa6:	2306      	movs	r3, #6
    2fa8:	7363      	strb	r3, [r4, #13]
}
    2faa:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    2fac:	0000ffff 	.word	0x0000ffff

00002fb0 <_ZN6SX128011SendPayloadEPhh10TickTime_sh>:
{
    2fb0:	b513      	push	{r0, r1, r4, lr}
    2fb2:	0004      	movs	r4, r0
    2fb4:	9301      	str	r3, [sp, #4]
    2fb6:	ab04      	add	r3, sp, #16
    2fb8:	781b      	ldrb	r3, [r3, #0]
    SetPayload( payload, size, offset );
    2fba:	f7ff ffac 	bl	2f16 <_ZN6SX128010SetPayloadEPhhh>
    SetTx( timeout );
    2fbe:	9901      	ldr	r1, [sp, #4]
    2fc0:	0020      	movs	r0, r4
    2fc2:	f7ff ffd5 	bl	2f70 <_ZN6SX12805SetTxE10TickTime_s>
}
    2fc6:	bd13      	pop	{r0, r1, r4, pc}

00002fc8 <_ZN6SX12805SetRxE10TickTime_s>:
{
    2fc8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    2fca:	000b      	movs	r3, r1
    2fcc:	0004      	movs	r4, r0
    2fce:	9101      	str	r1, [sp, #4]
    buf[0] = timeout.PeriodBase;
    2fd0:	ad03      	add	r5, sp, #12
    2fd2:	0c09      	lsrs	r1, r1, #16
    2fd4:	702b      	strb	r3, [r5, #0]
    buf[2] = ( uint8_t )( timeout.PeriodBaseCount & 0x00FF );
    2fd6:	70a9      	strb	r1, [r5, #2]
    buf[1] = ( uint8_t )( ( timeout.PeriodBaseCount >> 8 ) & 0x00FF );
    2fd8:	0a0b      	lsrs	r3, r1, #8
    ClearIrqStatus( IRQ_RADIO_ALL );
    2fda:	490a      	ldr	r1, [pc, #40]	; (3004 <_ZN6SX12805SetRxE10TickTime_s+0x3c>)
    buf[1] = ( uint8_t )( ( timeout.PeriodBaseCount >> 8 ) & 0x00FF );
    2fdc:	706b      	strb	r3, [r5, #1]
    ClearIrqStatus( IRQ_RADIO_ALL );
    2fde:	f7ff ff7d 	bl	2edc <_ZN6SX128014ClearIrqStatusEt>
    if( GetPacketType( true ) == PACKET_TYPE_RANGING )
    2fe2:	7be3      	ldrb	r3, [r4, #15]
    2fe4:	2b02      	cmp	r3, #2
    2fe6:	d103      	bne.n	2ff0 <_ZN6SX12805SetRxE10TickTime_s+0x28>
        SetRangingRole( RADIO_RANGING_ROLE_SLAVE );
    2fe8:	2100      	movs	r1, #0
    2fea:	0020      	movs	r0, r4
    2fec:	f7ff ffb6 	bl	2f5c <_ZN6SX128014SetRangingRoleE19RadioRangingRoles_t>
    WriteCommand( RADIO_SET_RX, buf, 3 );
    2ff0:	6823      	ldr	r3, [r4, #0]
    2ff2:	002a      	movs	r2, r5
    2ff4:	691e      	ldr	r6, [r3, #16]
    2ff6:	2182      	movs	r1, #130	; 0x82
    2ff8:	2303      	movs	r3, #3
    2ffa:	0020      	movs	r0, r4
    2ffc:	47b0      	blx	r6
    OperatingMode = MODE_RX;
    2ffe:	2305      	movs	r3, #5
    3000:	7363      	strb	r3, [r4, #13]
}
    3002:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    3004:	0000ffff 	.word	0x0000ffff

00003008 <_ZN6SX128017ClearPacketStatusEv>:
}
*/

void SX1280::ClearPacketStatus( void )
{
	RadioPacketStatus.txDone=false;
    3008:	2300      	movs	r3, #0
    300a:	7103      	strb	r3, [r0, #4]
	RadioPacketStatus.rxDone=false;
    300c:	7143      	strb	r3, [r0, #5]
	RadioPacketStatus.rxSyncWordDone=false;
    300e:	7183      	strb	r3, [r0, #6]
	RadioPacketStatus.rxHeaderDone=false;
    3010:	71c3      	strb	r3, [r0, #7]
	RadioPacketStatus.rxError=IRQ_HEADER_NO_ERROR_CODE;	
    3012:	7283      	strb	r3, [r0, #10]
	RadioPacketStatus.rangingDone=IRQ_RANGING_NO_ERROR_CODE;
    3014:	72c3      	strb	r3, [r0, #11]
	RadioPacketStatus.cadDone=false;
    3016:	7303      	strb	r3, [r0, #12]
	RadioPacketStatus.txTimeout=false;
    3018:	7203      	strb	r3, [r0, #8]
	RadioPacketStatus.rxTimeout=false;
    301a:	7243      	strb	r3, [r0, #9]
}
    301c:	4770      	bx	lr
	...

00003020 <_ZN6SX128011ProcessIrqsEv>:

void SX1280::ProcessIrqs( void )
{
    3020:	b570      	push	{r4, r5, r6, lr}
    3022:	0004      	movs	r4, r0
        packetType = this->PacketType;
    3024:	7bc6      	ldrb	r6, [r0, #15]
            return;
        }
    }
*/
    packetType = GetPacketType( true );
    uint16_t irqRegs = GetIrqStatus( );
    3026:	f7ff ff4c 	bl	2ec2 <_ZN6SX128012GetIrqStatusEv>
	//Serial.println("IRQ Register Status: " + String(irqRegs));
    ClearIrqStatus( IRQ_RADIO_ALL );
    302a:	4949      	ldr	r1, [pc, #292]	; (3150 <_ZN6SX128011ProcessIrqsEv+0x130>)
    uint16_t irqRegs = GetIrqStatus( );
    302c:	0005      	movs	r5, r0
    ClearIrqStatus( IRQ_RADIO_ALL );
    302e:	0020      	movs	r0, r4
    3030:	f7ff ff54 	bl	2edc <_ZN6SX128014ClearIrqStatusEt>
	ClearPacketStatus();
    3034:	0020      	movs	r0, r4
    3036:	f7ff ffe7 	bl	3008 <_ZN6SX128017ClearPacketStatusEv>
    }
    TEST_PIN_1 = 0;
    TEST_PIN_2 = 0;
#endif
*/
    switch( packetType )
    303a:	2e04      	cmp	r6, #4
    303c:	d80b      	bhi.n	3056 <_ZN6SX128011ProcessIrqsEv+0x36>
    303e:	0030      	movs	r0, r6
    3040:	7b63      	ldrb	r3, [r4, #13]
                    // Unexpected IRQ: silently returns
                    break;
            }
            break;
        case PACKET_TYPE_RANGING:
            switch( OperatingMode )
    3042:	b2db      	uxtb	r3, r3
    switch( packetType )
    3044:	f005 fca0 	bl	8988 <__gnu_thumb1_case_uqi>
    3048:	035d2d03 	.word	0x035d2d03
    304c:	03          	.byte	0x03
    304d:	00          	.byte	0x00
            switch( OperatingMode )
    304e:	2b05      	cmp	r3, #5
    3050:	d002      	beq.n	3058 <_ZN6SX128011ProcessIrqsEv+0x38>
    3052:	2b06      	cmp	r3, #6
    3054:	d01c      	beq.n	3090 <_ZN6SX128011ProcessIrqsEv+0x70>
            break;
        default:
            // Unexpected IRQ: silently returns
            break;
    }
}
    3056:	bd70      	pop	{r4, r5, r6, pc}
                    if( ( irqRegs & IRQ_RX_DONE ) == IRQ_RX_DONE )
    3058:	2302      	movs	r3, #2
    305a:	421d      	tst	r5, r3
    305c:	d003      	beq.n	3066 <_ZN6SX128011ProcessIrqsEv+0x46>
                        if( ( irqRegs & IRQ_CRC_ERROR ) == IRQ_CRC_ERROR )
    305e:	066a      	lsls	r2, r5, #25
    3060:	d511      	bpl.n	3086 <_ZN6SX128011ProcessIrqsEv+0x66>
							RadioPacketStatus.rxError=IRQ_CRC_ERROR_CODE;
    3062:	3301      	adds	r3, #1
							RadioPacketStatus.rxError=IRQ_SYNCWORD_ERROR_CODE;
    3064:	72a3      	strb	r3, [r4, #10]
                    if( ( irqRegs & IRQ_SYNCWORD_VALID ) == IRQ_SYNCWORD_VALID )
    3066:	076b      	lsls	r3, r5, #29
    3068:	d501      	bpl.n	306e <_ZN6SX128011ProcessIrqsEv+0x4e>
						RadioPacketStatus.rxSyncWordDone=true;
    306a:	2301      	movs	r3, #1
    306c:	71a3      	strb	r3, [r4, #6]
                    if( ( irqRegs & IRQ_SYNCWORD_ERROR ) == IRQ_SYNCWORD_ERROR )
    306e:	072b      	lsls	r3, r5, #28
    3070:	d501      	bpl.n	3076 <_ZN6SX128011ProcessIrqsEv+0x56>
                        RadioPacketStatus.rxError=IRQ_SYNCWORD_ERROR_CODE;
    3072:	2302      	movs	r3, #2
    3074:	72a3      	strb	r3, [r4, #10]
    3076:	2301      	movs	r3, #1
                    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
    3078:	046a      	lsls	r2, r5, #17
    307a:	d500      	bpl.n	307e <_ZN6SX128011ProcessIrqsEv+0x5e>
						RadioPacketStatus.rxTimeout=true;
    307c:	7263      	strb	r3, [r4, #9]
                    if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
    307e:	421d      	tst	r5, r3
    3080:	d0e9      	beq.n	3056 <_ZN6SX128011ProcessIrqsEv+0x36>
						RadioPacketStatus.txDone=true;
    3082:	7123      	strb	r3, [r4, #4]
    3084:	e7e7      	b.n	3056 <_ZN6SX128011ProcessIrqsEv+0x36>
                        else if( ( irqRegs & IRQ_SYNCWORD_ERROR ) == IRQ_SYNCWORD_ERROR )
    3086:	072a      	lsls	r2, r5, #28
    3088:	d4ec      	bmi.n	3064 <_ZN6SX128011ProcessIrqsEv+0x44>
							RadioPacketStatus.rxDone=true;
    308a:	2301      	movs	r3, #1
    308c:	7163      	strb	r3, [r4, #5]
    308e:	e7ea      	b.n	3066 <_ZN6SX128011ProcessIrqsEv+0x46>
                    if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
    3090:	2301      	movs	r3, #1
    3092:	421d      	tst	r5, r3
    3094:	d000      	beq.n	3098 <_ZN6SX128011ProcessIrqsEv+0x78>
						RadioPacketStatus.txDone=true;
    3096:	7123      	strb	r3, [r4, #4]
                    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
    3098:	046b      	lsls	r3, r5, #17
    309a:	d5dc      	bpl.n	3056 <_ZN6SX128011ProcessIrqsEv+0x36>
						RadioPacketStatus.txTimeout=true;
    309c:	2301      	movs	r3, #1
    309e:	7223      	strb	r3, [r4, #8]
    30a0:	e7d9      	b.n	3056 <_ZN6SX128011ProcessIrqsEv+0x36>
            switch( OperatingMode )
    30a2:	2b06      	cmp	r3, #6
    30a4:	d0f4      	beq.n	3090 <_ZN6SX128011ProcessIrqsEv+0x70>
    30a6:	2b07      	cmp	r3, #7
    30a8:	d01b      	beq.n	30e2 <_ZN6SX128011ProcessIrqsEv+0xc2>
    30aa:	2b05      	cmp	r3, #5
    30ac:	d1d3      	bne.n	3056 <_ZN6SX128011ProcessIrqsEv+0x36>
                    if( ( irqRegs & IRQ_RX_DONE ) == IRQ_RX_DONE )
    30ae:	07ab      	lsls	r3, r5, #30
    30b0:	d503      	bpl.n	30ba <_ZN6SX128011ProcessIrqsEv+0x9a>
                        if( ( irqRegs & IRQ_CRC_ERROR ) == IRQ_CRC_ERROR )
    30b2:	066b      	lsls	r3, r5, #25
    30b4:	d512      	bpl.n	30dc <_ZN6SX128011ProcessIrqsEv+0xbc>
							RadioPacketStatus.rxError=IRQ_CRC_ERROR_CODE;
    30b6:	2303      	movs	r3, #3
    30b8:	72a3      	strb	r3, [r4, #10]
                    if( ( irqRegs & IRQ_HEADER_VALID ) == IRQ_HEADER_VALID )
    30ba:	06eb      	lsls	r3, r5, #27
    30bc:	d501      	bpl.n	30c2 <_ZN6SX128011ProcessIrqsEv+0xa2>
						RadioPacketStatus.rxHeaderDone=true;
    30be:	2301      	movs	r3, #1
    30c0:	71e3      	strb	r3, [r4, #7]
                    if( ( irqRegs & IRQ_HEADER_ERROR ) == IRQ_HEADER_ERROR )
    30c2:	06ab      	lsls	r3, r5, #26
    30c4:	d501      	bpl.n	30ca <_ZN6SX128011ProcessIrqsEv+0xaa>
						RadioPacketStatus.rxError=IRQ_HEADER_ERROR_CODE;
    30c6:	2301      	movs	r3, #1
    30c8:	72a3      	strb	r3, [r4, #10]
                    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
    30ca:	046b      	lsls	r3, r5, #17
    30cc:	d501      	bpl.n	30d2 <_ZN6SX128011ProcessIrqsEv+0xb2>
						RadioPacketStatus.rxTimeout=true;
    30ce:	2301      	movs	r3, #1
    30d0:	7263      	strb	r3, [r4, #9]
                    if( ( irqRegs & IRQ_RANGING_SLAVE_REQUEST_DISCARDED ) == IRQ_RANGING_SLAVE_REQUEST_DISCARDED )
    30d2:	05eb      	lsls	r3, r5, #23
    30d4:	d5bf      	bpl.n	3056 <_ZN6SX128011ProcessIrqsEv+0x36>
						RadioPacketStatus.rxError=IRQ_RANGING_ON_LORA_ERROR_CODE;
    30d6:	2304      	movs	r3, #4
						RadioPacketStatus.rxError=IRQ_HEADER_ERROR_CODE;
    30d8:	72a3      	strb	r3, [r4, #10]
    30da:	e7bc      	b.n	3056 <_ZN6SX128011ProcessIrqsEv+0x36>
							RadioPacketStatus.rxDone=true;
    30dc:	2301      	movs	r3, #1
    30de:	7163      	strb	r3, [r4, #5]
    30e0:	e7eb      	b.n	30ba <_ZN6SX128011ProcessIrqsEv+0x9a>
                    if( ( irqRegs & IRQ_CAD_DONE ) == IRQ_CAD_DONE )
    30e2:	04eb      	lsls	r3, r5, #19
    30e4:	d508      	bpl.n	30f8 <_ZN6SX128011ProcessIrqsEv+0xd8>
                        if( ( irqRegs & IRQ_CAD_DETECTED ) == IRQ_CAD_DETECTED )
    30e6:	2380      	movs	r3, #128	; 0x80
    30e8:	019b      	lsls	r3, r3, #6
    30ea:	401d      	ands	r5, r3
    30ec:	d002      	beq.n	30f4 <_ZN6SX128011ProcessIrqsEv+0xd4>
							RadioPacketStatus.cadDone=true;
    30ee:	2301      	movs	r3, #1
    30f0:	7323      	strb	r3, [r4, #12]
    30f2:	e7b0      	b.n	3056 <_ZN6SX128011ProcessIrqsEv+0x36>
							RadioPacketStatus.cadDone=false;
    30f4:	7325      	strb	r5, [r4, #12]
    30f6:	e7ae      	b.n	3056 <_ZN6SX128011ProcessIrqsEv+0x36>
                    else if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
    30f8:	046b      	lsls	r3, r5, #17
    30fa:	d5ac      	bpl.n	3056 <_ZN6SX128011ProcessIrqsEv+0x36>
						RadioPacketStatus.rxTimeout=true;
    30fc:	2301      	movs	r3, #1
    30fe:	7263      	strb	r3, [r4, #9]
    3100:	e7a9      	b.n	3056 <_ZN6SX128011ProcessIrqsEv+0x36>
            switch( OperatingMode )
    3102:	2b05      	cmp	r3, #5
    3104:	d00a      	beq.n	311c <_ZN6SX128011ProcessIrqsEv+0xfc>
    3106:	2b06      	cmp	r3, #6
    3108:	d1a5      	bne.n	3056 <_ZN6SX128011ProcessIrqsEv+0x36>
                    if( ( irqRegs & IRQ_RANGING_MASTER_TIMEOUT ) == IRQ_RANGING_MASTER_TIMEOUT )
    310a:	056b      	lsls	r3, r5, #21
    310c:	d501      	bpl.n	3112 <_ZN6SX128011ProcessIrqsEv+0xf2>
						RadioPacketStatus.rangingDone=IRQ_RANGING_MASTER_ERROR_CODE;
    310e:	2303      	movs	r3, #3
    3110:	72e3      	strb	r3, [r4, #11]
                    if( ( irqRegs & IRQ_RANGING_MASTER_RESULT_VALID ) == IRQ_RANGING_MASTER_RESULT_VALID )
    3112:	05ab      	lsls	r3, r5, #22
    3114:	d59f      	bpl.n	3056 <_ZN6SX128011ProcessIrqsEv+0x36>
						RadioPacketStatus.rangingDone=IRQ_RANGING_MASTER_VALID_CODE;
    3116:	2304      	movs	r3, #4
    3118:	72e3      	strb	r3, [r4, #11]
}
    311a:	e79c      	b.n	3056 <_ZN6SX128011ProcessIrqsEv+0x36>
                    if( ( irqRegs & IRQ_RANGING_SLAVE_REQUEST_DISCARDED ) == IRQ_RANGING_SLAVE_REQUEST_DISCARDED )
    311c:	05eb      	lsls	r3, r5, #23
    311e:	d501      	bpl.n	3124 <_ZN6SX128011ProcessIrqsEv+0x104>
						RadioPacketStatus.rangingDone=IRQ_RANGING_SLAVE_ERROR_CODE;
    3120:	2301      	movs	r3, #1
    3122:	72e3      	strb	r3, [r4, #11]
                    if( ( irqRegs & IRQ_RANGING_SLAVE_REQUEST_VALID ) == IRQ_RANGING_SLAVE_REQUEST_VALID )
    3124:	052b      	lsls	r3, r5, #20
    3126:	d501      	bpl.n	312c <_ZN6SX128011ProcessIrqsEv+0x10c>
						RadioPacketStatus.rangingDone=IRQ_RANGING_SLAVE_VALID_CODE;
    3128:	2302      	movs	r3, #2
    312a:	72e3      	strb	r3, [r4, #11]
                    if( ( irqRegs & IRQ_RANGING_SLAVE_RESPONSE_DONE ) == IRQ_RANGING_SLAVE_RESPONSE_DONE )
    312c:	062b      	lsls	r3, r5, #24
    312e:	d501      	bpl.n	3134 <_ZN6SX128011ProcessIrqsEv+0x114>
						RadioPacketStatus.rangingDone=IRQ_RANGING_SLAVE_VALID_CODE;
    3130:	2302      	movs	r3, #2
    3132:	72e3      	strb	r3, [r4, #11]
                    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
    3134:	046b      	lsls	r3, r5, #17
    3136:	d501      	bpl.n	313c <_ZN6SX128011ProcessIrqsEv+0x11c>
						RadioPacketStatus.rangingDone=IRQ_RANGING_SLAVE_ERROR_CODE;
    3138:	2301      	movs	r3, #1
    313a:	72e3      	strb	r3, [r4, #11]
                    if( ( irqRegs & IRQ_HEADER_VALID ) == IRQ_HEADER_VALID )
    313c:	06eb      	lsls	r3, r5, #27
    313e:	d501      	bpl.n	3144 <_ZN6SX128011ProcessIrqsEv+0x124>
						RadioPacketStatus.rxHeaderDone=true;
    3140:	2301      	movs	r3, #1
    3142:	71e3      	strb	r3, [r4, #7]
                    if( ( irqRegs & IRQ_HEADER_ERROR ) == IRQ_HEADER_ERROR )
    3144:	06ab      	lsls	r3, r5, #26
    3146:	d400      	bmi.n	314a <_ZN6SX128011ProcessIrqsEv+0x12a>
    3148:	e785      	b.n	3056 <_ZN6SX128011ProcessIrqsEv+0x36>
						RadioPacketStatus.rxError=IRQ_HEADER_ERROR_CODE;
    314a:	2301      	movs	r3, #1
    314c:	e7c4      	b.n	30d8 <_ZN6SX128011ProcessIrqsEv+0xb8>
    314e:	46c0      	nop			; (mov r8, r8)
    3150:	0000ffff 	.word	0x0000ffff

00003154 <_ZN16FrSkySportSensor4sendER26FrSkySportSingleWireSerialhm>:
*/

#include "FrSkySportSensor.h" 

FrSkySportSensor::FrSkySportSensor(SensorId id) : sensorId(id), sensorDataIdx(0) {}
void FrSkySportSensor::send(FrSkySportSingleWireSerial& serial, uint8_t id, uint32_t now) { }
    3154:	4770      	bx	lr

00003156 <_ZN16FrSkySportSensor10decodeDataEhtm>:
uint16_t FrSkySportSensor::decodeData(uint8_t id, uint16_t appId, uint32_t data) { return SENSOR_NO_DATA_ID; }
    3156:	2000      	movs	r0, #0
    3158:	4770      	bx	lr
	...

0000315c <_ZN16FrSkySportSensorC1ENS_8SensorIdE>:
FrSkySportSensor::FrSkySportSensor(SensorId id) : sensorId(id), sensorDataIdx(0) {}
    315c:	4b03      	ldr	r3, [pc, #12]	; (316c <_ZN16FrSkySportSensorC1ENS_8SensorIdE+0x10>)
    315e:	7101      	strb	r1, [r0, #4]
    3160:	3308      	adds	r3, #8
    3162:	6003      	str	r3, [r0, #0]
    3164:	2300      	movs	r3, #0
    3166:	7143      	strb	r3, [r0, #5]
    3168:	4770      	bx	lr
    316a:	46c0      	nop			; (mov r8, r8)
    316c:	0000b8d0 	.word	0x0000b8d0

00003170 <_ZN19FrSkySportSensorGps10decodeDataEhtm>:
    if(sensorDataIdx >= GPS_DATA_COUNT) sensorDataIdx = 0;
  }
}

uint16_t FrSkySportSensorGps::decodeData(uint8_t id, uint16_t appId, uint32_t data)
{
    3170:	b570      	push	{r4, r5, r6, lr}
    3172:	001d      	movs	r5, r3
  if((sensorId == id) || (sensorId == FrSkySportSensor::ID_IGNORE))
    3174:	7903      	ldrb	r3, [r0, #4]
{
    3176:	0004      	movs	r4, r0
    3178:	0016      	movs	r6, r2
  if((sensorId == id) || (sensorId == FrSkySportSensor::ID_IGNORE))
    317a:	428b      	cmp	r3, r1
    317c:	d001      	beq.n	3182 <_ZN19FrSkySportSensorGps10decodeDataEhtm+0x12>
    317e:	2bff      	cmp	r3, #255	; 0xff
    3180:	d10a      	bne.n	3198 <_ZN19FrSkySportSensorGps10decodeDataEhtm+0x28>
  {
    switch(appId)
    3182:	2383      	movs	r3, #131	; 0x83
    3184:	011b      	lsls	r3, r3, #4
    3186:	429e      	cmp	r6, r3
    3188:	d043      	beq.n	3212 <_ZN19FrSkySportSensorGps10decodeDataEhtm+0xa2>
    318a:	d807      	bhi.n	319c <_ZN19FrSkySportSensorGps10decodeDataEhtm+0x2c>
    318c:	3b30      	subs	r3, #48	; 0x30
    318e:	429e      	cmp	r6, r3
    3190:	d01a      	beq.n	31c8 <_ZN19FrSkySportSensorGps10decodeDataEhtm+0x58>
    3192:	3320      	adds	r3, #32
    3194:	429e      	cmp	r6, r3
    3196:	d031      	beq.n	31fc <_ZN19FrSkySportSensorGps10decodeDataEhtm+0x8c>
          data >>= 8; hour = data & 0xFF;
        }
        return appId;
    }
  }
  return SENSOR_NO_DATA_ID;
    3198:	2600      	movs	r6, #0
    319a:	e02b      	b.n	31f4 <_ZN19FrSkySportSensorGps10decodeDataEhtm+0x84>
    switch(appId)
    319c:	2384      	movs	r3, #132	; 0x84
    319e:	011b      	lsls	r3, r3, #4
    31a0:	429e      	cmp	r6, r3
    31a2:	d041      	beq.n	3228 <_ZN19FrSkySportSensorGps10decodeDataEhtm+0xb8>
    31a4:	3310      	adds	r3, #16
    31a6:	429e      	cmp	r6, r3
    31a8:	d1f6      	bne.n	3198 <_ZN19FrSkySportSensorGps10decodeDataEhtm+0x28>
        if((data & 0xFF) > 0)  // is date?
    31aa:	b2e9      	uxtb	r1, r5
    31ac:	0a2a      	lsrs	r2, r5, #8
    31ae:	0c2b      	lsrs	r3, r5, #16
    31b0:	0e2d      	lsrs	r5, r5, #24
    31b2:	2900      	cmp	r1, #0
    31b4:	d043      	beq.n	323e <_ZN19FrSkySportSensorGps10decodeDataEhtm+0xce>
          data >>= 8; day = data & 0xFF;
    31b6:	0021      	movs	r1, r4
    31b8:	3156      	adds	r1, #86	; 0x56
    31ba:	700a      	strb	r2, [r1, #0]
          data >>= 8; month = data & 0xFF;
    31bc:	0022      	movs	r2, r4
    31be:	3255      	adds	r2, #85	; 0x55
    31c0:	7013      	strb	r3, [r2, #0]
          data >>= 8; year = data & 0xFF;
    31c2:	3454      	adds	r4, #84	; 0x54
          data >>= 8; hour = data & 0xFF;
    31c4:	7025      	strb	r5, [r4, #0]
    31c6:	e015      	b.n	31f4 <_ZN19FrSkySportSensorGps10decodeDataEhtm+0x84>
          float latLonData = (data & 0x3FFFFFFF) / 10000.0 / 60.0;
    31c8:	00a8      	lsls	r0, r5, #2
    31ca:	0880      	lsrs	r0, r0, #2
    31cc:	f007 ff48 	bl	b060 <__aeabi_ui2d>
    31d0:	2200      	movs	r2, #0
    31d2:	4b1f      	ldr	r3, [pc, #124]	; (3250 <_ZN19FrSkySportSensorGps10decodeDataEhtm+0xe0>)
    31d4:	f006 fd04 	bl	9be0 <__aeabi_ddiv>
    31d8:	4b1e      	ldr	r3, [pc, #120]	; (3254 <_ZN19FrSkySportSensorGps10decodeDataEhtm+0xe4>)
    31da:	2200      	movs	r2, #0
    31dc:	f006 fd00 	bl	9be0 <__aeabi_ddiv>
    31e0:	f007 ffc8 	bl	b174 <__aeabi_d2f>
          if((data & 0x40000000) > 0) latLonData = -latLonData;                 // is negative?
    31e4:	006b      	lsls	r3, r5, #1
    31e6:	d502      	bpl.n	31ee <_ZN19FrSkySportSensorGps10decodeDataEhtm+0x7e>
    31e8:	2380      	movs	r3, #128	; 0x80
    31ea:	061b      	lsls	r3, r3, #24
    31ec:	18c0      	adds	r0, r0, r3
          if((data & 0x80000000) == 0) lat = latLonData; else lon = latLonData; // is latitude?
    31ee:	2d00      	cmp	r5, #0
    31f0:	db02      	blt.n	31f8 <_ZN19FrSkySportSensorGps10decodeDataEhtm+0x88>
    31f2:	6420      	str	r0, [r4, #64]	; 0x40
}
    31f4:	0030      	movs	r0, r6
    31f6:	bd70      	pop	{r4, r5, r6, pc}
          if((data & 0x80000000) == 0) lat = latLonData; else lon = latLonData; // is latitude?
    31f8:	6460      	str	r0, [r4, #68]	; 0x44
    31fa:	e7fb      	b.n	31f4 <_ZN19FrSkySportSensorGps10decodeDataEhtm+0x84>
        altitude = ((int32_t)data) / 100.0;
    31fc:	0028      	movs	r0, r5
    31fe:	f007 feed 	bl	afdc <__aeabi_i2d>
    3202:	2200      	movs	r2, #0
    3204:	4b14      	ldr	r3, [pc, #80]	; (3258 <_ZN19FrSkySportSensorGps10decodeDataEhtm+0xe8>)
    3206:	f006 fceb 	bl	9be0 <__aeabi_ddiv>
    320a:	f007 ffb3 	bl	b174 <__aeabi_d2f>
    320e:	64a0      	str	r0, [r4, #72]	; 0x48
    3210:	e7f0      	b.n	31f4 <_ZN19FrSkySportSensorGps10decodeDataEhtm+0x84>
        speed = data / 1944.0; // Convert knots to m/s
    3212:	0028      	movs	r0, r5
    3214:	f007 ff24 	bl	b060 <__aeabi_ui2d>
    3218:	2200      	movs	r2, #0
    321a:	4b10      	ldr	r3, [pc, #64]	; (325c <_ZN19FrSkySportSensorGps10decodeDataEhtm+0xec>)
    321c:	f006 fce0 	bl	9be0 <__aeabi_ddiv>
    3220:	f007 ffa8 	bl	b174 <__aeabi_d2f>
    3224:	64e0      	str	r0, [r4, #76]	; 0x4c
    3226:	e7e5      	b.n	31f4 <_ZN19FrSkySportSensorGps10decodeDataEhtm+0x84>
        cog = data / 100.0;
    3228:	0028      	movs	r0, r5
    322a:	f007 ff19 	bl	b060 <__aeabi_ui2d>
    322e:	2200      	movs	r2, #0
    3230:	4b09      	ldr	r3, [pc, #36]	; (3258 <_ZN19FrSkySportSensorGps10decodeDataEhtm+0xe8>)
    3232:	f006 fcd5 	bl	9be0 <__aeabi_ddiv>
    3236:	f007 ff9d 	bl	b174 <__aeabi_d2f>
    323a:	6520      	str	r0, [r4, #80]	; 0x50
    323c:	e7da      	b.n	31f4 <_ZN19FrSkySportSensorGps10decodeDataEhtm+0x84>
          data >>= 8; second = data & 0xFF;
    323e:	0021      	movs	r1, r4
    3240:	3159      	adds	r1, #89	; 0x59
    3242:	700a      	strb	r2, [r1, #0]
          data >>= 8; minute = data & 0xFF;
    3244:	0022      	movs	r2, r4
    3246:	3258      	adds	r2, #88	; 0x58
    3248:	7013      	strb	r3, [r2, #0]
          data >>= 8; hour = data & 0xFF;
    324a:	3457      	adds	r4, #87	; 0x57
    324c:	e7ba      	b.n	31c4 <_ZN19FrSkySportSensorGps10decodeDataEhtm+0x54>
    324e:	46c0      	nop			; (mov r8, r8)
    3250:	40c38800 	.word	0x40c38800
    3254:	404e0000 	.word	0x404e0000
    3258:	40590000 	.word	0x40590000
    325c:	409e6000 	.word	0x409e6000

00003260 <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm>:
{
    3260:	b570      	push	{r4, r5, r6, lr}
    3262:	000d      	movs	r5, r1
  if(sensorId == id)
    3264:	7901      	ldrb	r1, [r0, #4]
{
    3266:	0004      	movs	r4, r0
  if(sensorId == id)
    3268:	4291      	cmp	r1, r2
    326a:	d121      	bne.n	32b0 <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0x50>
    switch(sensorDataIdx)
    326c:	7940      	ldrb	r0, [r0, #5]
    326e:	2806      	cmp	r0, #6
    3270:	d818      	bhi.n	32a4 <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0x44>
    3272:	f005 fb89 	bl	8988 <__gnu_thumb1_case_uqi>
    3276:	1e04      	.short	0x1e04
    3278:	483d3227 	.word	0x483d3227
    327c:	53          	.byte	0x53
    327d:	00          	.byte	0x00
        if(now > latTime)
    327e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    3280:	4293      	cmp	r3, r2
    3282:	d90a      	bls.n	329a <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0x3a>
          latTime = now + GPS_LAT_LON_DATA_PERIOD;
    3284:	22fa      	movs	r2, #250	; 0xfa
    3286:	0092      	lsls	r2, r2, #2
    3288:	189b      	adds	r3, r3, r2
          serial.sendData(GPS_LAT_LON_DATA_ID, latData);
    328a:	68a2      	ldr	r2, [r4, #8]
          latTime = now + GPS_LAT_LON_DATA_PERIOD;
    328c:	6263      	str	r3, [r4, #36]	; 0x24
          serial.sendData(GPS_LAT_LON_DATA_ID, lonData);
    328e:	2180      	movs	r1, #128	; 0x80
          serial.sendData(GPS_DATE_TIME_DATA_ID, timeData);
    3290:	0109      	lsls	r1, r1, #4
    3292:	0028      	movs	r0, r5
    3294:	f000 f913 	bl	34be <_ZN26FrSkySportSingleWireSerial8sendDataEtm>
    3298:	e004      	b.n	32a4 <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0x44>
          serial.sendEmpty(GPS_LAT_LON_DATA_ID);
    329a:	2180      	movs	r1, #128	; 0x80
          serial.sendEmpty(GPS_DATE_TIME_DATA_ID);
    329c:	0109      	lsls	r1, r1, #4
    329e:	0028      	movs	r0, r5
    32a0:	f000 f943 	bl	352a <_ZN26FrSkySportSingleWireSerial9sendEmptyEt>
    sensorDataIdx++;
    32a4:	7963      	ldrb	r3, [r4, #5]
    32a6:	3301      	adds	r3, #1
    32a8:	b2db      	uxtb	r3, r3
    if(sensorDataIdx >= GPS_DATA_COUNT) sensorDataIdx = 0;
    32aa:	2b06      	cmp	r3, #6
    32ac:	d83e      	bhi.n	332c <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0xcc>
    32ae:	7163      	strb	r3, [r4, #5]
}
    32b0:	bd70      	pop	{r4, r5, r6, pc}
        if(now > lonTime)
    32b2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    32b4:	4293      	cmp	r3, r2
    32b6:	d9f0      	bls.n	329a <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0x3a>
          lonTime = now + GPS_LAT_LON_DATA_PERIOD;
    32b8:	22fa      	movs	r2, #250	; 0xfa
    32ba:	0092      	lsls	r2, r2, #2
    32bc:	189b      	adds	r3, r3, r2
    32be:	62a3      	str	r3, [r4, #40]	; 0x28
          serial.sendData(GPS_LAT_LON_DATA_ID, lonData);
    32c0:	68e2      	ldr	r2, [r4, #12]
    32c2:	e7e4      	b.n	328e <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0x2e>
        if(now > altTime)
    32c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    32c6:	4293      	cmp	r3, r2
    32c8:	d905      	bls.n	32d6 <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0x76>
          altTime = now + GPS_ALT_DATA_PERIOD;
    32ca:	33f5      	adds	r3, #245	; 0xf5
    32cc:	33ff      	adds	r3, #255	; 0xff
    32ce:	62e3      	str	r3, [r4, #44]	; 0x2c
          serial.sendData(GPS_ALT_DATA_ID, altData);
    32d0:	6922      	ldr	r2, [r4, #16]
    32d2:	2182      	movs	r1, #130	; 0x82
    32d4:	e7dc      	b.n	3290 <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0x30>
          serial.sendEmpty(GPS_ALT_DATA_ID);
    32d6:	2182      	movs	r1, #130	; 0x82
    32d8:	e7e0      	b.n	329c <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0x3c>
        if(now > speedTime)
    32da:	6b22      	ldr	r2, [r4, #48]	; 0x30
    32dc:	4293      	cmp	r3, r2
    32de:	d905      	bls.n	32ec <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0x8c>
          speedTime = now + GPS_SPEED_DATA_PERIOD;
    32e0:	33f5      	adds	r3, #245	; 0xf5
    32e2:	33ff      	adds	r3, #255	; 0xff
    32e4:	6323      	str	r3, [r4, #48]	; 0x30
          serial.sendData(GPS_SPEED_DATA_ID, speedData);
    32e6:	6962      	ldr	r2, [r4, #20]
    32e8:	2183      	movs	r1, #131	; 0x83
    32ea:	e7d1      	b.n	3290 <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0x30>
          serial.sendEmpty(GPS_SPEED_DATA_ID);
    32ec:	2183      	movs	r1, #131	; 0x83
    32ee:	e7d5      	b.n	329c <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0x3c>
        if(now > cogTime)
    32f0:	6b62      	ldr	r2, [r4, #52]	; 0x34
    32f2:	4293      	cmp	r3, r2
    32f4:	d905      	bls.n	3302 <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0xa2>
          cogTime = now + GPS_COG_DATA_PERIOD;
    32f6:	33f5      	adds	r3, #245	; 0xf5
    32f8:	33ff      	adds	r3, #255	; 0xff
    32fa:	6363      	str	r3, [r4, #52]	; 0x34
          serial.sendData(GPS_COG_DATA_ID, cogData);
    32fc:	69a2      	ldr	r2, [r4, #24]
    32fe:	2184      	movs	r1, #132	; 0x84
    3300:	e7c6      	b.n	3290 <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0x30>
          serial.sendEmpty(GPS_COG_DATA_ID);
    3302:	2184      	movs	r1, #132	; 0x84
    3304:	e7ca      	b.n	329c <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0x3c>
        if(now > dateTime)
    3306:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3308:	4293      	cmp	r3, r2
    330a:	d905      	bls.n	3318 <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0xb8>
          dateTime = now + GPS_DATE_TIME_DATA_PERIOD;
    330c:	4a08      	ldr	r2, [pc, #32]	; (3330 <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0xd0>)
    330e:	189b      	adds	r3, r3, r2
          serial.sendData(GPS_DATE_TIME_DATA_ID, dateData);
    3310:	69e2      	ldr	r2, [r4, #28]
          dateTime = now + GPS_DATE_TIME_DATA_PERIOD;
    3312:	63a3      	str	r3, [r4, #56]	; 0x38
          serial.sendData(GPS_DATE_TIME_DATA_ID, timeData);
    3314:	2185      	movs	r1, #133	; 0x85
    3316:	e7bb      	b.n	3290 <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0x30>
          serial.sendEmpty(GPS_DATE_TIME_DATA_ID);
    3318:	2185      	movs	r1, #133	; 0x85
    331a:	e7bf      	b.n	329c <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0x3c>
        if(now > timeTime)
    331c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    331e:	4293      	cmp	r3, r2
    3320:	d9fa      	bls.n	3318 <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0xb8>
          timeTime = now + GPS_DATE_TIME_DATA_PERIOD;
    3322:	4a03      	ldr	r2, [pc, #12]	; (3330 <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0xd0>)
    3324:	189b      	adds	r3, r3, r2
    3326:	63e3      	str	r3, [r4, #60]	; 0x3c
          serial.sendData(GPS_DATE_TIME_DATA_ID, timeData);
    3328:	6a22      	ldr	r2, [r4, #32]
    332a:	e7f3      	b.n	3314 <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0xb4>
    if(sensorDataIdx >= GPS_DATA_COUNT) sensorDataIdx = 0;
    332c:	2300      	movs	r3, #0
    332e:	e7be      	b.n	32ae <_ZN19FrSkySportSensorGps4sendER26FrSkySportSingleWireSerialhm+0x4e>
    3330:	00002710 	.word	0x00002710

00003334 <_ZN19FrSkySportSensorGpsC1EN16FrSkySportSensor8SensorIdE>:
FrSkySportSensorGps::FrSkySportSensorGps(SensorId id) : FrSkySportSensor(id) { }
    3334:	b510      	push	{r4, lr}
    3336:	0004      	movs	r4, r0
    3338:	f7ff ff10 	bl	315c <_ZN16FrSkySportSensorC1ENS_8SensorIdE>
    333c:	4b02      	ldr	r3, [pc, #8]	; (3348 <_ZN19FrSkySportSensorGpsC1EN16FrSkySportSensor8SensorIdE+0x14>)
    333e:	0020      	movs	r0, r4
    3340:	3308      	adds	r3, #8
    3342:	6023      	str	r3, [r4, #0]
    3344:	bd10      	pop	{r4, pc}
    3346:	46c0      	nop			; (mov r8, r8)
    3348:	0000b8e0 	.word	0x0000b8e0

0000334c <_ZN19FrSkySportSensorGps9setLatLonEfb>:
{
    334c:	b570      	push	{r4, r5, r6, lr}
    334e:	000e      	movs	r6, r1
  uint32_t data = (uint32_t)((latLon < 0 ? -latLon : latLon) * 60 * 10000) & 0x3FFFFFFF;
    3350:	2100      	movs	r1, #0
{
    3352:	1c05      	adds	r5, r0, #0
  uint32_t data = (uint32_t)((latLon < 0 ? -latLon : latLon) * 60 * 10000) & 0x3FFFFFFF;
    3354:	f005 fcf2 	bl	8d3c <__aeabi_fcmplt>
    3358:	2800      	cmp	r0, #0
    335a:	d012      	beq.n	3382 <_ZN19FrSkySportSensorGps9setLatLonEfb+0x36>
    335c:	2380      	movs	r3, #128	; 0x80
    335e:	061b      	lsls	r3, r3, #24
    3360:	18e8      	adds	r0, r5, r3
    3362:	4914      	ldr	r1, [pc, #80]	; (33b4 <_ZN19FrSkySportSensorGps9setLatLonEfb+0x68>)
    3364:	f006 f8ca 	bl	94fc <__aeabi_fmul>
    3368:	4913      	ldr	r1, [pc, #76]	; (33b8 <_ZN19FrSkySportSensorGps9setLatLonEfb+0x6c>)
    336a:	f006 f8c7 	bl	94fc <__aeabi_fmul>
    336e:	f005 fd0d 	bl	8d8c <__aeabi_f2uiz>
    3372:	0084      	lsls	r4, r0, #2
    3374:	08a4      	lsrs	r4, r4, #2
  if(isLat == false) data |= 0x80000000;
    3376:	2e00      	cmp	r6, #0
    3378:	d116      	bne.n	33a8 <_ZN19FrSkySportSensorGps9setLatLonEfb+0x5c>
    337a:	2380      	movs	r3, #128	; 0x80
    337c:	061b      	lsls	r3, r3, #24
    337e:	431c      	orrs	r4, r3
    3380:	e00c      	b.n	339c <_ZN19FrSkySportSensorGps9setLatLonEfb+0x50>
  uint32_t data = (uint32_t)((latLon < 0 ? -latLon : latLon) * 60 * 10000) & 0x3FFFFFFF;
    3382:	490c      	ldr	r1, [pc, #48]	; (33b4 <_ZN19FrSkySportSensorGps9setLatLonEfb+0x68>)
    3384:	1c28      	adds	r0, r5, #0
    3386:	f006 f8b9 	bl	94fc <__aeabi_fmul>
    338a:	490b      	ldr	r1, [pc, #44]	; (33b8 <_ZN19FrSkySportSensorGps9setLatLonEfb+0x6c>)
    338c:	f006 f8b6 	bl	94fc <__aeabi_fmul>
    3390:	f005 fcfc 	bl	8d8c <__aeabi_f2uiz>
    3394:	0084      	lsls	r4, r0, #2
    3396:	08a4      	lsrs	r4, r4, #2
  if(isLat == false) data |= 0x80000000;
    3398:	2e00      	cmp	r6, #0
    339a:	d0ee      	beq.n	337a <_ZN19FrSkySportSensorGps9setLatLonEfb+0x2e>
  if(latLon < 0) data |= 0x40000000;
    339c:	2100      	movs	r1, #0
    339e:	1c28      	adds	r0, r5, #0
    33a0:	f005 fccc 	bl	8d3c <__aeabi_fcmplt>
    33a4:	2800      	cmp	r0, #0
    33a6:	d002      	beq.n	33ae <_ZN19FrSkySportSensorGps9setLatLonEfb+0x62>
    33a8:	2380      	movs	r3, #128	; 0x80
    33aa:	05db      	lsls	r3, r3, #23
    33ac:	431c      	orrs	r4, r3
}
    33ae:	0020      	movs	r0, r4
    33b0:	bd70      	pop	{r4, r5, r6, pc}
    33b2:	46c0      	nop			; (mov r8, r8)
    33b4:	42700000 	.word	0x42700000
    33b8:	461c4000 	.word	0x461c4000

000033bc <_ZN19FrSkySportSensorGps7setDataEfffffhhhhhh>:
{
    33bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    33be:	b087      	sub	sp, #28
    33c0:	1c1e      	adds	r6, r3, #0
    33c2:	ab0e      	add	r3, sp, #56	; 0x38
    33c4:	781b      	ldrb	r3, [r3, #0]
    33c6:	0004      	movs	r4, r0
    33c8:	9301      	str	r3, [sp, #4]
    33ca:	ab0f      	add	r3, sp, #60	; 0x3c
    33cc:	781b      	ldrb	r3, [r3, #0]
    33ce:	1c08      	adds	r0, r1, #0
    33d0:	9302      	str	r3, [sp, #8]
    33d2:	ab10      	add	r3, sp, #64	; 0x40
    33d4:	781b      	ldrb	r3, [r3, #0]
  latData = setLatLon(lat, true);
    33d6:	2101      	movs	r1, #1
{
    33d8:	9303      	str	r3, [sp, #12]
    33da:	ab11      	add	r3, sp, #68	; 0x44
    33dc:	781b      	ldrb	r3, [r3, #0]
    33de:	1c17      	adds	r7, r2, #0
    33e0:	9304      	str	r3, [sp, #16]
    33e2:	ab12      	add	r3, sp, #72	; 0x48
    33e4:	781b      	ldrb	r3, [r3, #0]
    33e6:	9305      	str	r3, [sp, #20]
    33e8:	ab13      	add	r3, sp, #76	; 0x4c
    33ea:	781d      	ldrb	r5, [r3, #0]
  latData = setLatLon(lat, true);
    33ec:	f7ff ffae 	bl	334c <_ZN19FrSkySportSensorGps9setLatLonEfb>
  lonData = setLatLon(lon, false);
    33f0:	2100      	movs	r1, #0
  latData = setLatLon(lat, true);
    33f2:	60a0      	str	r0, [r4, #8]
  lonData = setLatLon(lon, false);
    33f4:	1c38      	adds	r0, r7, #0
    33f6:	f7ff ffa9 	bl	334c <_ZN19FrSkySportSensorGps9setLatLonEfb>
  cogData = cog * 100;
    33fa:	4915      	ldr	r1, [pc, #84]	; (3450 <_ZN19FrSkySportSensorGps7setDataEfffffhhhhhh+0x94>)
  lonData = setLatLon(lon, false);
    33fc:	60e0      	str	r0, [r4, #12]
  cogData = cog * 100;
    33fe:	980d      	ldr	r0, [sp, #52]	; 0x34
    3400:	f006 f87c 	bl	94fc <__aeabi_fmul>
    3404:	f005 fcc2 	bl	8d8c <__aeabi_f2uiz>
  speedData = speed * 1944; // Convert m/s to knots
    3408:	4912      	ldr	r1, [pc, #72]	; (3454 <_ZN19FrSkySportSensorGps7setDataEfffffhhhhhh+0x98>)
  cogData = cog * 100;
    340a:	61a0      	str	r0, [r4, #24]
  speedData = speed * 1944; // Convert m/s to knots
    340c:	980c      	ldr	r0, [sp, #48]	; 0x30
    340e:	f006 f875 	bl	94fc <__aeabi_fmul>
    3412:	f005 fcbb 	bl	8d8c <__aeabi_f2uiz>
  altData = alt * 100;
    3416:	490e      	ldr	r1, [pc, #56]	; (3450 <_ZN19FrSkySportSensorGps7setDataEfffffhhhhhh+0x94>)
  speedData = speed * 1944; // Convert m/s to knots
    3418:	6160      	str	r0, [r4, #20]
  altData = alt * 100;
    341a:	1c30      	adds	r0, r6, #0
    341c:	f006 f86e 	bl	94fc <__aeabi_fmul>
    3420:	f006 fb28 	bl	9a74 <__aeabi_f2iz>
  data <<= 8;
    3424:	9b01      	ldr	r3, [sp, #4]
  data |= monthOrMinute;
    3426:	9a02      	ldr	r2, [sp, #8]
  data <<= 8;
    3428:	021b      	lsls	r3, r3, #8
  data |= monthOrMinute;
    342a:	4313      	orrs	r3, r2
  data |= dayOrSecond;
    342c:	9a03      	ldr	r2, [sp, #12]
  data <<= 8;
    342e:	021b      	lsls	r3, r3, #8
  data |= dayOrSecond;
    3430:	4313      	orrs	r3, r2
  if(isDate == true) data |= 0xFF;
    3432:	22ff      	movs	r2, #255	; 0xff
  data <<= 8;
    3434:	021b      	lsls	r3, r3, #8
  if(isDate == true) data |= 0xFF;
    3436:	4313      	orrs	r3, r2
  dateData = setDateTime(year, month, day, true);
    3438:	61e3      	str	r3, [r4, #28]
  data <<= 8;
    343a:	9b04      	ldr	r3, [sp, #16]
  data |= monthOrMinute;
    343c:	9a05      	ldr	r2, [sp, #20]
  data <<= 8;
    343e:	021b      	lsls	r3, r3, #8
  data |= monthOrMinute;
    3440:	4313      	orrs	r3, r2
  data <<= 8;
    3442:	021b      	lsls	r3, r3, #8
  data |= dayOrSecond;
    3444:	431d      	orrs	r5, r3
  data <<= 8;
    3446:	022d      	lsls	r5, r5, #8
  altData = alt * 100;
    3448:	6120      	str	r0, [r4, #16]
  timeData = setDateTime(hour, minute, second, false);
    344a:	6225      	str	r5, [r4, #32]
}
    344c:	b007      	add	sp, #28
    344e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3450:	42c80000 	.word	0x42c80000
    3454:	44f30000 	.word	0x44f30000

00003458 <_ZN26FrSkySportSingleWireSerialC1Ev>:
//#include "Arduino.h"
//#include "SERCOM.h"

FrSkySportSingleWireSerial::FrSkySportSingleWireSerial()
{
  uartC3 = NULL;
    3458:	2300      	movs	r3, #0
    345a:	6043      	str	r3, [r0, #4]
  port = NULL;
    345c:	6003      	str	r3, [r0, #0]
}
    345e:	4770      	bx	lr

00003460 <_ZN26FrSkySportSingleWireSerial5beginEP4Uart>:
    UART2_C3 = 0x10;  // Invert Serial3 Tx levels
    UART2_S2 = 0x10;  // Invert Serial3 Rx levels;
  }
  */
	port=ptr1;
  crc = 0;
    3460:	2300      	movs	r3, #0
	port=ptr1;
    3462:	6001      	str	r1, [r0, #0]
  crc = 0;
    3464:	8103      	strh	r3, [r0, #8]
}
    3466:	4770      	bx	lr

00003468 <_ZN26FrSkySportSingleWireSerial8sendByteEh>:
    setMode(RX);
  }
}

void FrSkySportSingleWireSerial::sendByte(uint8_t byte)
{
    3468:	b570      	push	{r4, r5, r6, lr}
    346a:	0004      	movs	r4, r0
  if(port != NULL)
    346c:	6800      	ldr	r0, [r0, #0]
{
    346e:	000d      	movs	r5, r1
  if(port != NULL)
    3470:	2800      	cmp	r0, #0
    3472:	d011      	beq.n	3498 <_ZN26FrSkySportSingleWireSerial8sendByteEh+0x30>
    3474:	6803      	ldr	r3, [r0, #0]
  {
    if(byte == 0x7E)
    {
      port->write(FRSKY_STUFFING);
    3476:	681b      	ldr	r3, [r3, #0]
    if(byte == 0x7E)
    3478:	297e      	cmp	r1, #126	; 0x7e
    347a:	d10e      	bne.n	349a <_ZN26FrSkySportSingleWireSerial8sendByteEh+0x32>
      port->write(FRSKY_STUFFING);
    347c:	217d      	movs	r1, #125	; 0x7d
    347e:	4798      	blx	r3
      port->write(0x5E); // 0x7E xor 0x20
    3480:	215e      	movs	r1, #94	; 0x5e
    3482:	6820      	ldr	r0, [r4, #0]
    3484:	6803      	ldr	r3, [r0, #0]
    3486:	681b      	ldr	r3, [r3, #0]
      port->write(FRSKY_STUFFING);
      port->write(0x5D); // 0x7D xor 0x20
    }
    else
    {
      port->write(byte);
    3488:	4798      	blx	r3
    }
    crc += byte;
    348a:	8921      	ldrh	r1, [r4, #8]
    348c:	1949      	adds	r1, r1, r5
    348e:	b289      	uxth	r1, r1
    crc += crc >> 8; crc &= 0x00ff;
    3490:	120b      	asrs	r3, r1, #8
    3492:	18c9      	adds	r1, r1, r3
    3494:	b2c9      	uxtb	r1, r1
    3496:	8121      	strh	r1, [r4, #8]
  }
}
    3498:	bd70      	pop	{r4, r5, r6, pc}
    else if(byte == 0x7D)
    349a:	297d      	cmp	r1, #125	; 0x7d
    349c:	d1f4      	bne.n	3488 <_ZN26FrSkySportSingleWireSerial8sendByteEh+0x20>
      port->write(FRSKY_STUFFING);
    349e:	4798      	blx	r3
      port->write(0x5D); // 0x7D xor 0x20
    34a0:	6820      	ldr	r0, [r4, #0]
    34a2:	215d      	movs	r1, #93	; 0x5d
    34a4:	6803      	ldr	r3, [r0, #0]
    34a6:	681b      	ldr	r3, [r3, #0]
    34a8:	e7ee      	b.n	3488 <_ZN26FrSkySportSingleWireSerial8sendByteEh+0x20>

000034aa <_ZN26FrSkySportSingleWireSerial7sendCrcEv>:

void FrSkySportSingleWireSerial::sendCrc()
{
  // Send and reset CRC
  sendByte(0xFF - crc);
    34aa:	8901      	ldrh	r1, [r0, #8]
{
    34ac:	b510      	push	{r4, lr}
  sendByte(0xFF - crc);
    34ae:	43c9      	mvns	r1, r1
    34b0:	b2c9      	uxtb	r1, r1
{
    34b2:	0004      	movs	r4, r0
  sendByte(0xFF - crc);
    34b4:	f7ff ffd8 	bl	3468 <_ZN26FrSkySportSingleWireSerial8sendByteEh>
  crc = 0;
    34b8:	2300      	movs	r3, #0
    34ba:	8123      	strh	r3, [r4, #8]
}
    34bc:	bd10      	pop	{r4, pc}

000034be <_ZN26FrSkySportSingleWireSerial8sendDataEtm>:

void FrSkySportSingleWireSerial::sendData(uint16_t dataTypeId, uint32_t data)
{
    34be:	b537      	push	{r0, r1, r2, r4, r5, lr}
    34c0:	466b      	mov	r3, sp
    34c2:	0004      	movs	r4, r0
  if(port != NULL)
    34c4:	6800      	ldr	r0, [r0, #0]
{
    34c6:	9200      	str	r2, [sp, #0]
    34c8:	1d9d      	adds	r5, r3, #6
    34ca:	80d9      	strh	r1, [r3, #6]
  if(port != NULL)
    34cc:	2800      	cmp	r0, #0
    34ce:	d02b      	beq.n	3528 <_ZN26FrSkySportSingleWireSerial8sendDataEtm+0x6a>
		port->disableRXPin();
    34d0:	f003 f860 	bl	6594 <_ZN4Uart12disableRXPinEv>
  {
    setMode(TX);
    sendByte(FRSKY_SENSOR_DATA_FRAME);
    34d4:	2110      	movs	r1, #16
    34d6:	0020      	movs	r0, r4
    34d8:	f7ff ffc6 	bl	3468 <_ZN26FrSkySportSingleWireSerial8sendByteEh>
    uint8_t *bytes = (uint8_t*)&dataTypeId;
    sendByte(bytes[0]);
    34dc:	7829      	ldrb	r1, [r5, #0]
    34de:	0020      	movs	r0, r4
    34e0:	f7ff ffc2 	bl	3468 <_ZN26FrSkySportSingleWireSerial8sendByteEh>
    sendByte(bytes[1]);
    34e4:	7869      	ldrb	r1, [r5, #1]
    34e6:	0020      	movs	r0, r4
    34e8:	f7ff ffbe 	bl	3468 <_ZN26FrSkySportSingleWireSerial8sendByteEh>
    bytes = (uint8_t*)&data;
    sendByte(bytes[0]);
    34ec:	466b      	mov	r3, sp
    34ee:	0020      	movs	r0, r4
    34f0:	7819      	ldrb	r1, [r3, #0]
    34f2:	f7ff ffb9 	bl	3468 <_ZN26FrSkySportSingleWireSerial8sendByteEh>
    sendByte(bytes[1]);
    34f6:	466b      	mov	r3, sp
    34f8:	0020      	movs	r0, r4
    34fa:	7859      	ldrb	r1, [r3, #1]
    34fc:	f7ff ffb4 	bl	3468 <_ZN26FrSkySportSingleWireSerial8sendByteEh>
    sendByte(bytes[2]);
    3500:	466b      	mov	r3, sp
    3502:	0020      	movs	r0, r4
    3504:	7899      	ldrb	r1, [r3, #2]
    3506:	f7ff ffaf 	bl	3468 <_ZN26FrSkySportSingleWireSerial8sendByteEh>
    sendByte(bytes[3]);
    350a:	466b      	mov	r3, sp
    350c:	0020      	movs	r0, r4
    350e:	78d9      	ldrb	r1, [r3, #3]
    3510:	f7ff ffaa 	bl	3468 <_ZN26FrSkySportSingleWireSerial8sendByteEh>
    sendCrc();
    3514:	0020      	movs	r0, r4
    3516:	f7ff ffc8 	bl	34aa <_ZN26FrSkySportSingleWireSerial7sendCrcEv>
    port->flush();
    351a:	6820      	ldr	r0, [r4, #0]
    351c:	6803      	ldr	r3, [r0, #0]
    351e:	68db      	ldr	r3, [r3, #12]
    3520:	4798      	blx	r3
		port->enableRXPin();
    3522:	6820      	ldr	r0, [r4, #0]
    3524:	f003 f831 	bl	658a <_ZN4Uart11enableRXPinEv>
    setMode(RX);
  }
}
    3528:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

0000352a <_ZN26FrSkySportSingleWireSerial9sendEmptyEt>:

void FrSkySportSingleWireSerial::sendEmpty(uint16_t dataTypeId)
{
    352a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    352c:	466b      	mov	r3, sp
    352e:	0004      	movs	r4, r0
  if(port != NULL)
    3530:	6800      	ldr	r0, [r0, #0]
{
    3532:	1d9d      	adds	r5, r3, #6
    3534:	80d9      	strh	r1, [r3, #6]
  if(port != NULL)
    3536:	2800      	cmp	r0, #0
    3538:	d020      	beq.n	357c <_ZN26FrSkySportSingleWireSerial9sendEmptyEt+0x52>
		port->disableRXPin();
    353a:	f003 f82b 	bl	6594 <_ZN4Uart12disableRXPinEv>
  {
    setMode(TX);
    sendByte(0x00);
    353e:	2100      	movs	r1, #0
    3540:	0020      	movs	r0, r4
    3542:	f7ff ff91 	bl	3468 <_ZN26FrSkySportSingleWireSerial8sendByteEh>
    uint8_t *bytes = (uint8_t*)&dataTypeId;
    sendByte(bytes[0]);
    3546:	7829      	ldrb	r1, [r5, #0]
    3548:	0020      	movs	r0, r4
    354a:	f7ff ff8d 	bl	3468 <_ZN26FrSkySportSingleWireSerial8sendByteEh>
    sendByte(bytes[1]);
    354e:	7869      	ldrb	r1, [r5, #1]
    3550:	0020      	movs	r0, r4
    3552:	f7ff ff89 	bl	3468 <_ZN26FrSkySportSingleWireSerial8sendByteEh>
    3556:	2505      	movs	r5, #5
    3558:	3d01      	subs	r5, #1
    for(uint8_t i = 0; i < 4; i++) sendByte(0x00);
    355a:	2d00      	cmp	r5, #0
    355c:	d004      	beq.n	3568 <_ZN26FrSkySportSingleWireSerial9sendEmptyEt+0x3e>
    355e:	2100      	movs	r1, #0
    3560:	0020      	movs	r0, r4
    3562:	f7ff ff81 	bl	3468 <_ZN26FrSkySportSingleWireSerial8sendByteEh>
    3566:	e7f7      	b.n	3558 <_ZN26FrSkySportSingleWireSerial9sendEmptyEt+0x2e>
    sendCrc();
    3568:	0020      	movs	r0, r4
    356a:	f7ff ff9e 	bl	34aa <_ZN26FrSkySportSingleWireSerial7sendCrcEv>
    port->flush();
    356e:	6820      	ldr	r0, [r4, #0]
    3570:	6803      	ldr	r3, [r0, #0]
    3572:	68db      	ldr	r3, [r3, #12]
    3574:	4798      	blx	r3
		port->enableRXPin();
    3576:	6820      	ldr	r0, [r4, #0]
    3578:	f003 f807 	bl	658a <_ZN4Uart11enableRXPinEv>
    setMode(RX);
  }
}
    357c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

0000357e <_ZN19FrSkySportTelemetryC1Eb>:
  Not for commercial use
*/

#include "FrSkySportTelemetry.h"

FrSkySportTelemetry::FrSkySportTelemetry(bool polling)
    357e:	b510      	push	{r4, lr}
    3580:	0004      	movs	r4, r0
    3582:	3070      	adds	r0, #112	; 0x70
    3584:	f7ff ff68 	bl	3458 <_ZN26FrSkySportSingleWireSerialC1Ev>
{
  //if(polling == true) pollingClass = new FrSkySportPolling();
  //else 
  pollingClass = NULL; 
    3588:	2200      	movs	r2, #0
    358a:	1d23      	adds	r3, r4, #4
}
    358c:	0020      	movs	r0, r4
  pollingClass = NULL; 
    358e:	67da      	str	r2, [r3, #124]	; 0x7c
}
    3590:	bd10      	pop	{r4, pc}

00003592 <_ZN19FrSkySportTelemetry5beginEP4UartP16FrSkySportSensorS3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_>:
                                FrSkySportSensor* sensor16, FrSkySportSensor* sensor17, FrSkySportSensor* sensor18,
                                FrSkySportSensor* sensor19, FrSkySportSensor* sensor20, FrSkySportSensor* sensor21,
                                FrSkySportSensor* sensor22, FrSkySportSensor* sensor23, FrSkySportSensor* sensor24,
                                FrSkySportSensor* sensor25, FrSkySportSensor* sensor26, FrSkySportSensor* sensor27,
                                FrSkySportSensor* sensor28)
{
    3592:	b510      	push	{r4, lr}
  // Store sensor references in array
  sensors[0] = sensor1;
  sensors[1] = sensor2;
    3594:	6043      	str	r3, [r0, #4]
  sensors[2] = sensor3;
    3596:	9b02      	ldr	r3, [sp, #8]
  sensors[0] = sensor1;
    3598:	6002      	str	r2, [r0, #0]
  sensors[2] = sensor3;
    359a:	6083      	str	r3, [r0, #8]
  sensors[3] = sensor4;
    359c:	9b03      	ldr	r3, [sp, #12]
  sensors[25] = sensor26;
  sensors[26] = sensor27;
  sensors[27] = sensor28;

  // Count sensors (stops at first NULL)
  for(sensorCount = 0; sensorCount < FRSKY_TELEMETRY_MAX_SENSORS; sensorCount++)
    359e:	0002      	movs	r2, r0
  sensors[3] = sensor4;
    35a0:	60c3      	str	r3, [r0, #12]
  sensors[4] = sensor5;
    35a2:	9b04      	ldr	r3, [sp, #16]
  for(sensorCount = 0; sensorCount < FRSKY_TELEMETRY_MAX_SENSORS; sensorCount++)
    35a4:	327c      	adds	r2, #124	; 0x7c
  sensors[4] = sensor5;
    35a6:	6103      	str	r3, [r0, #16]
  sensors[5] = sensor6;
    35a8:	9b05      	ldr	r3, [sp, #20]
    35aa:	6143      	str	r3, [r0, #20]
  sensors[6] = sensor7;
    35ac:	9b06      	ldr	r3, [sp, #24]
    35ae:	6183      	str	r3, [r0, #24]
  sensors[7] = sensor8;
    35b0:	9b07      	ldr	r3, [sp, #28]
    35b2:	61c3      	str	r3, [r0, #28]
  sensors[8] = sensor9;
    35b4:	9b08      	ldr	r3, [sp, #32]
    35b6:	6203      	str	r3, [r0, #32]
  sensors[9] = sensor10;
    35b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    35ba:	6243      	str	r3, [r0, #36]	; 0x24
  sensors[10] = sensor11;
    35bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    35be:	6283      	str	r3, [r0, #40]	; 0x28
  sensors[11] = sensor12;
    35c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    35c2:	62c3      	str	r3, [r0, #44]	; 0x2c
  sensors[12] = sensor13;
    35c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    35c6:	6303      	str	r3, [r0, #48]	; 0x30
  sensors[13] = sensor14;
    35c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    35ca:	6343      	str	r3, [r0, #52]	; 0x34
  sensors[14] = sensor15;
    35cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    35ce:	6383      	str	r3, [r0, #56]	; 0x38
  sensors[15] = sensor16;
    35d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    35d2:	63c3      	str	r3, [r0, #60]	; 0x3c
  sensors[16] = sensor17;
    35d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    35d6:	6403      	str	r3, [r0, #64]	; 0x40
  sensors[17] = sensor18;
    35d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    35da:	6443      	str	r3, [r0, #68]	; 0x44
  sensors[18] = sensor19;
    35dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    35de:	6483      	str	r3, [r0, #72]	; 0x48
  sensors[19] = sensor20;
    35e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    35e2:	64c3      	str	r3, [r0, #76]	; 0x4c
  sensors[20] = sensor21;
    35e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    35e6:	6503      	str	r3, [r0, #80]	; 0x50
  sensors[21] = sensor22;
    35e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    35ea:	6543      	str	r3, [r0, #84]	; 0x54
  sensors[22] = sensor23;
    35ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
    35ee:	6583      	str	r3, [r0, #88]	; 0x58
  sensors[23] = sensor24;
    35f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    35f2:	65c3      	str	r3, [r0, #92]	; 0x5c
  sensors[24] = sensor25;
    35f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
    35f6:	6603      	str	r3, [r0, #96]	; 0x60
  sensors[25] = sensor26;
    35f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    35fa:	6643      	str	r3, [r0, #100]	; 0x64
  sensors[26] = sensor27;
    35fc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    35fe:	6683      	str	r3, [r0, #104]	; 0x68
  sensors[27] = sensor28;
    3600:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    3602:	66c3      	str	r3, [r0, #108]	; 0x6c
  for(sensorCount = 0; sensorCount < FRSKY_TELEMETRY_MAX_SENSORS; sensorCount++)
    3604:	2300      	movs	r3, #0
    3606:	7013      	strb	r3, [r2, #0]
    3608:	7813      	ldrb	r3, [r2, #0]
    360a:	2b1b      	cmp	r3, #27
    360c:	dc05      	bgt.n	361a <_ZN19FrSkySportTelemetry5beginEP4UartP16FrSkySportSensorS3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_+0x88>
  {
    if(sensors[sensorCount] == NULL) break;
    360e:	009c      	lsls	r4, r3, #2
    3610:	5824      	ldr	r4, [r4, r0]
    3612:	2c00      	cmp	r4, #0
    3614:	d001      	beq.n	361a <_ZN19FrSkySportTelemetry5beginEP4UartP16FrSkySportSensorS3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_+0x88>
  for(sensorCount = 0; sensorCount < FRSKY_TELEMETRY_MAX_SENSORS; sensorCount++)
    3616:	3301      	adds	r3, #1
    3618:	e7f5      	b.n	3606 <_ZN19FrSkySportTelemetry5beginEP4UartP16FrSkySportSensorS3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_+0x74>
  }

  FrSkySportTelemetry::serial.begin(ptr1);
    361a:	3070      	adds	r0, #112	; 0x70
    361c:	f7ff ff20 	bl	3460 <_ZN26FrSkySportSingleWireSerial5beginEP4Uart>
}
    3620:	bd10      	pop	{r4, pc}

00003622 <_ZN19FrSkySportTelemetry4sendEv>:

void FrSkySportTelemetry::send()
{
  if(serial.port != NULL)
    3622:	6f03      	ldr	r3, [r0, #112]	; 0x70
{
    3624:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3626:	0004      	movs	r4, r0
  if(serial.port != NULL)
    3628:	2b00      	cmp	r3, #0
    362a:	d02e      	beq.n	368a <_ZN19FrSkySportTelemetry4sendEv+0x68>
  {
    uint8_t polledId = FrSkySportSensor::ID_IGNORE;
    uint32_t now = millis();
    362c:	f002 fd9e 	bl	616c <millis>

    if(pollingClass != NULL)
    3630:	1d23      	adds	r3, r4, #4
    3632:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    uint32_t now = millis();
    3634:	9001      	str	r0, [sp, #4]
    if(pollingClass != NULL)
    3636:	2b00      	cmp	r3, #0
    3638:	d127      	bne.n	368a <_ZN19FrSkySportTelemetry4sendEv+0x68>
    {
  //    polledId = pollingClass->pollData(serial, now);
    }
    else
    {
      if(serial.port->available())
    363a:	6f20      	ldr	r0, [r4, #112]	; 0x70
    363c:	6803      	ldr	r3, [r0, #0]
    363e:	691b      	ldr	r3, [r3, #16]
    3640:	4798      	blx	r3
    3642:	2800      	cmp	r0, #0
    3644:	d021      	beq.n	368a <_ZN19FrSkySportTelemetry4sendEv+0x68>
      {
        uint8_t data = serial.port->read();
    3646:	6f20      	ldr	r0, [r4, #112]	; 0x70
    uint8_t polledId = FrSkySportSensor::ID_IGNORE;
    3648:	26ff      	movs	r6, #255	; 0xff
        uint8_t data = serial.port->read();
    364a:	6803      	ldr	r3, [r0, #0]
    364c:	695b      	ldr	r3, [r3, #20]
    364e:	4798      	blx	r3
        if(prevData == FRSKY_TELEMETRY_START_FRAME) polledId = data;
    3650:	0023      	movs	r3, r4
    3652:	337d      	adds	r3, #125	; 0x7d
    3654:	781a      	ldrb	r2, [r3, #0]
        uint8_t data = serial.port->read();
    3656:	b2c0      	uxtb	r0, r0
        if(prevData == FRSKY_TELEMETRY_START_FRAME) polledId = data;
    3658:	2a7e      	cmp	r2, #126	; 0x7e
    365a:	d100      	bne.n	365e <_ZN19FrSkySportTelemetry4sendEv+0x3c>
    365c:	0006      	movs	r6, r0
        prevData = data;
    365e:	7018      	strb	r0, [r3, #0]
      }
    }

    if(polledId != FrSkySportSensor::ID_IGNORE) 
    3660:	2eff      	cmp	r6, #255	; 0xff
    3662:	d012      	beq.n	368a <_ZN19FrSkySportTelemetry4sendEv+0x68>
    3664:	2500      	movs	r5, #0
    {
      // Send the actual data
      for(uint8_t i = 0; i < sensorCount; i++)
    3666:	0023      	movs	r3, r4
    3668:	337c      	adds	r3, #124	; 0x7c
    366a:	781b      	ldrb	r3, [r3, #0]
    366c:	429d      	cmp	r5, r3
    366e:	da0c      	bge.n	368a <_ZN19FrSkySportTelemetry4sendEv+0x68>
      {
        sensors[i]->send(serial, polledId, now);
    3670:	0021      	movs	r1, r4
    3672:	00ab      	lsls	r3, r5, #2
    3674:	5918      	ldr	r0, [r3, r4]
    3676:	0032      	movs	r2, r6
    3678:	6803      	ldr	r3, [r0, #0]
    367a:	3170      	adds	r1, #112	; 0x70
    367c:	681b      	ldr	r3, [r3, #0]
      for(uint8_t i = 0; i < sensorCount; i++)
    367e:	3501      	adds	r5, #1
        sensors[i]->send(serial, polledId, now);
    3680:	001f      	movs	r7, r3
    3682:	9b01      	ldr	r3, [sp, #4]
    3684:	47b8      	blx	r7
      for(uint8_t i = 0; i < sensorCount; i++)
    3686:	b2ed      	uxtb	r5, r5
    3688:	e7ed      	b.n	3666 <_ZN19FrSkySportTelemetry4sendEv+0x44>
      }
    }
  }
}
    368a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

0000368c <_ZN10GPSL80LiteC1Ev>:

#define MAX_LAT_SIZE 9	
#define MAX_LONG_SIZE 10	


struct GpsDataLite
    368c:	0002      	movs	r2, r0

Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
{
*/

GPSL80Lite::GPSL80Lite()
    368e:	2300      	movs	r3, #0
    3690:	324d      	adds	r2, #77	; 0x4d
    3692:	7003      	strb	r3, [r0, #0]
    3694:	7043      	strb	r3, [r0, #1]
    3696:	6043      	str	r3, [r0, #4]
    3698:	7203      	strb	r3, [r0, #8]
    369a:	7243      	strb	r3, [r0, #9]
    369c:	7283      	strb	r3, [r0, #10]
    369e:	60c3      	str	r3, [r0, #12]
    36a0:	7013      	strb	r3, [r2, #0]
    36a2:	70d3      	strb	r3, [r2, #3]
    36a4:	7193      	strb	r3, [r2, #6]
    36a6:	71d3      	strb	r3, [r2, #7]
    36a8:	7213      	strb	r3, [r2, #8]
{
}
    36aa:	4770      	bx	lr

000036ac <_ZN10GPSL80Lite13resetTempDataEv>:
		
	return dummy;
}

void GPSL80Lite::resetTempData()
{
    36ac:	b510      	push	{r4, lr}
	uint8_t a = 0;

	tempData.UTCTime=0;	
    36ae:	2300      	movs	r3, #0
    36b0:	0002      	movs	r2, r0
    36b2:	0004      	movs	r4, r0
	for(a=0;a<MAX_LAT_SIZE;a++){
		tempData.LatitudeDEG[a] = 0;
    36b4:	2100      	movs	r1, #0
	tempData.UTCTime=0;	
    36b6:	6103      	str	r3, [r0, #16]
    36b8:	3217      	adds	r2, #23
    36ba:	3420      	adds	r4, #32
	for(a=0;a<MAX_LAT_SIZE;a++){
    36bc:	42a2      	cmp	r2, r4
    36be:	d002      	beq.n	36c6 <_ZN10GPSL80Lite13resetTempDataEv+0x1a>
		tempData.LatitudeDEG[a] = 0;
    36c0:	7011      	strb	r1, [r2, #0]
    36c2:	3201      	adds	r2, #1
	for(a=0;a<MAX_LAT_SIZE;a++){
    36c4:	e7fa      	b.n	36bc <_ZN10GPSL80Lite13resetTempDataEv+0x10>
    36c6:	0001      	movs	r1, r0
    36c8:	0004      	movs	r4, r0
    36ca:	2200      	movs	r2, #0
    36cc:	3122      	adds	r1, #34	; 0x22
    36ce:	342c      	adds	r4, #44	; 0x2c
	}	
	for(a=0;a<MAX_LONG_SIZE;a++){
    36d0:	42a1      	cmp	r1, r4
    36d2:	d002      	beq.n	36da <_ZN10GPSL80Lite13resetTempDataEv+0x2e>
		tempData.LongitudeDEG[a] = 0;
    36d4:	700a      	strb	r2, [r1, #0]
    36d6:	3101      	adds	r1, #1
	for(a=0;a<MAX_LONG_SIZE;a++){
    36d8:	e7fa      	b.n	36d0 <_ZN10GPSL80Lite13resetTempDataEv+0x24>
	}
	tempData.Latitude = 0;
	tempData.Longitude = 0;
	tempData.LatitudeDIR='*';
    36da:	212a      	movs	r1, #42	; 0x2a
    36dc:	1c84      	adds	r4, r0, #2
	tempData.Latitude = 0;
    36de:	6302      	str	r2, [r0, #48]	; 0x30
	tempData.Longitude = 0;
    36e0:	6342      	str	r2, [r0, #52]	; 0x34
	tempData.LatitudeDIR='*';
    36e2:	77e1      	strb	r1, [r4, #31]
	tempData.LongitudeDIR='*';
    36e4:	342b      	adds	r4, #43	; 0x2b
	tempData.Fix = '*';
	tempData.FixDecimal = 0;
    36e6:	7522      	strb	r2, [r4, #20]
	tempData.NumberOfSatellites = 0;
    36e8:	7562      	strb	r2, [r4, #21]
	tempData.HDOP = 0;
	tempData.Altitude = 0;
	tempData.AltitudeUnit = '*';
    36ea:	0002      	movs	r2, r0
    36ec:	324c      	adds	r2, #76	; 0x4c
	tempData.LongitudeDIR='*';
    36ee:	7021      	strb	r1, [r4, #0]
	tempData.Fix = '*';
    36f0:	74e1      	strb	r1, [r4, #19]
	tempData.HDOP = 0;
    36f2:	6443      	str	r3, [r0, #68]	; 0x44
	tempData.Altitude = 0;
    36f4:	6483      	str	r3, [r0, #72]	; 0x48
	tempData.AltitudeUnit = '*';
    36f6:	7011      	strb	r1, [r2, #0]
	tempData.LatitudeDecimal = 0;
    36f8:	6383      	str	r3, [r0, #56]	; 0x38
	tempData.LongitudeDecimal = 0;
    36fa:	63c3      	str	r3, [r0, #60]	; 0x3c
}
    36fc:	bd10      	pop	{r4, pc}
	...

00003700 <_ZN10GPSL80Lite10updateDataEv>:

void GPSL80Lite::updateData()
{
    3700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	//	130532
	uint8_t a = 0;
	dataOut->UTCTime=tempData.UTCTime;
    3702:	68c3      	ldr	r3, [r0, #12]
    3704:	6902      	ldr	r2, [r0, #16]
{
    3706:	0004      	movs	r4, r0
	dataOut->UTCTime=tempData.UTCTime;
    3708:	601a      	str	r2, [r3, #0]
	uint32_t secconds;
	uint32_t minutes;
	uint32_t hours;
		
	hours = tempData.UTCTime / 10000;
    370a:	6906      	ldr	r6, [r0, #16]
    370c:	4980      	ldr	r1, [pc, #512]	; (3910 <_ZN10GPSL80Lite10updateDataEv+0x210>)
    370e:	1c30      	adds	r0, r6, #0
	dataOut->UTCTime=tempData.UTCTime;
    3710:	9301      	str	r3, [sp, #4]
	hours = tempData.UTCTime / 10000;
    3712:	f005 fd03 	bl	911c <__aeabi_fdiv>
    3716:	f005 fb39 	bl	8d8c <__aeabi_f2uiz>
	minutes = tempData.UTCTime / 100 - hours*100;
    371a:	497e      	ldr	r1, [pc, #504]	; (3914 <_ZN10GPSL80Lite10updateDataEv+0x214>)
	hours = tempData.UTCTime / 10000;
    371c:	0005      	movs	r5, r0
	minutes = tempData.UTCTime / 100 - hours*100;
    371e:	1c30      	adds	r0, r6, #0
    3720:	f005 fcfc 	bl	911c <__aeabi_fdiv>
    3724:	1c07      	adds	r7, r0, #0
    3726:	2064      	movs	r0, #100	; 0x64
    3728:	4368      	muls	r0, r5
    372a:	f006 fa13 	bl	9b54 <__aeabi_ui2f>
    372e:	1c01      	adds	r1, r0, #0
    3730:	1c38      	adds	r0, r7, #0
    3732:	f006 f803 	bl	973c <__aeabi_fsub>
    3736:	f005 fb29 	bl	8d8c <__aeabi_f2uiz>
    373a:	0007      	movs	r7, r0
	secconds = tempData.UTCTime - hours*10000 - minutes*100;
    373c:	4876      	ldr	r0, [pc, #472]	; (3918 <_ZN10GPSL80Lite10updateDataEv+0x218>)
    373e:	4368      	muls	r0, r5
    3740:	f006 fa08 	bl	9b54 <__aeabi_ui2f>
    3744:	1c01      	adds	r1, r0, #0
    3746:	1c30      	adds	r0, r6, #0
    3748:	f005 fff8 	bl	973c <__aeabi_fsub>
    374c:	1c06      	adds	r6, r0, #0
    374e:	2064      	movs	r0, #100	; 0x64
    3750:	4378      	muls	r0, r7
    3752:	f006 f9ff 	bl	9b54 <__aeabi_ui2f>
    3756:	1c01      	adds	r1, r0, #0
    3758:	1c30      	adds	r0, r6, #0
    375a:	f005 ffef 	bl	973c <__aeabi_fsub>
    375e:	f005 fb15 	bl	8d8c <__aeabi_f2uiz>
	dataOut->UTC_sec = (uint8_t)secconds;
    3762:	9b01      	ldr	r3, [sp, #4]
    3764:	7118      	strb	r0, [r3, #4]
	dataOut->UTC_min = (uint8_t)minutes;
    3766:	68e3      	ldr	r3, [r4, #12]
    3768:	715f      	strb	r7, [r3, #5]
	dataOut->UTC_hour = (uint8_t)hours;
    376a:	68e3      	ldr	r3, [r4, #12]
    376c:	719d      	strb	r5, [r3, #6]
    376e:	2300      	movs	r3, #0
		
	for(a=0;a<MAX_LAT_SIZE;a++){
    3770:	001a      	movs	r2, r3
    3772:	3301      	adds	r3, #1
    3774:	2b0a      	cmp	r3, #10
    3776:	d10b      	bne.n	3790 <_ZN10GPSL80Lite10updateDataEv+0x90>
    3778:	2300      	movs	r3, #0
    377a:	1c5a      	adds	r2, r3, #1
    377c:	68e5      	ldr	r5, [r4, #12]
		dataOut->LatitudeDEG[a]=tempData.LatitudeDEG[a];
	}
	for(a=0;a<MAX_LONG_SIZE;a++){
    377e:	2a0b      	cmp	r2, #11
    3780:	d00c      	beq.n	379c <_ZN10GPSL80Lite10updateDataEv+0x9c>
		dataOut->LongitudeDEG[a]=tempData.LongitudeDEG[a];
    3782:	0019      	movs	r1, r3
    3784:	3122      	adds	r1, #34	; 0x22
    3786:	5c61      	ldrb	r1, [r4, r1]
    3788:	18ed      	adds	r5, r5, r3
    378a:	74a9      	strb	r1, [r5, #18]
	for(a=0;a<MAX_LONG_SIZE;a++){
    378c:	0013      	movs	r3, r2
    378e:	e7f4      	b.n	377a <_ZN10GPSL80Lite10updateDataEv+0x7a>
		dataOut->LatitudeDEG[a]=tempData.LatitudeDEG[a];
    3790:	68e0      	ldr	r0, [r4, #12]
    3792:	18e1      	adds	r1, r4, r3
    3794:	7d89      	ldrb	r1, [r1, #22]
    3796:	1882      	adds	r2, r0, r2
    3798:	71d1      	strb	r1, [r2, #7]
	for(a=0;a<MAX_LAT_SIZE;a++){
    379a:	e7e9      	b.n	3770 <_ZN10GPSL80Lite10updateDataEv+0x70>
/*
	Serial.println();
	Serial.println(":" + String(tempData.LatitudeDEG) + ":");
	*/
	int32_t factor = 10000000;
	if(tempData.LatitudeDEG[0] != 0)
    379c:	7de3      	ldrb	r3, [r4, #23]
    379e:	2b00      	cmp	r3, #0
    37a0:	d025      	beq.n	37ee <_ZN10GPSL80Lite10updateDataEv+0xee>
	{
		dataOut->Latitude = 0;
    37a2:	2300      	movs	r3, #0
    37a4:	622b      	str	r3, [r5, #32]
    37a6:	0023      	movs	r3, r4
    37a8:	0026      	movs	r6, r4
			if(tempData.LatitudeDEG[a] != '.'){ // Don't convert the dot!
				//			Serial.println("Input for a=" + String(a) + " :" + String(tempData.LatitudeDEG[a])+":");
				//		    Serial.println("Factor=" + String(factor) );
				dataOut->Latitude += charToInt(tempData.LatitudeDEG[a]) * factor;
				//			Serial.println("Output for a=" + String(a) + " :" + String(dataOut->Latitude)+":");
				factor /= 10;
    37aa:	270a      	movs	r7, #10
    37ac:	3320      	adds	r3, #32
	int32_t factor = 10000000;
    37ae:	485b      	ldr	r0, [pc, #364]	; (391c <_ZN10GPSL80Lite10updateDataEv+0x21c>)
    37b0:	3617      	adds	r6, #23
    37b2:	9301      	str	r3, [sp, #4]
		for(a=0;a<MAX_LAT_SIZE;a++){
    37b4:	9b01      	ldr	r3, [sp, #4]
    37b6:	42b3      	cmp	r3, r6
    37b8:	d012      	beq.n	37e0 <_ZN10GPSL80Lite10updateDataEv+0xe0>
			if(tempData.LatitudeDEG[a] != '.'){ // Don't convert the dot!
    37ba:	7831      	ldrb	r1, [r6, #0]
    37bc:	292e      	cmp	r1, #46	; 0x2e
    37be:	d00d      	beq.n	37dc <_ZN10GPSL80Lite10updateDataEv+0xdc>
		dummy = dummy - 48;
    37c0:	000b      	movs	r3, r1
    37c2:	3b30      	subs	r3, #48	; 0x30
    37c4:	b2db      	uxtb	r3, r3
	if(dummy > 57) // Must be A-F
    37c6:	2939      	cmp	r1, #57	; 0x39
    37c8:	dd01      	ble.n	37ce <_ZN10GPSL80Lite10updateDataEv+0xce>
		dummy = dummy - 55;		
    37ca:	3937      	subs	r1, #55	; 0x37
    37cc:	b2cb      	uxtb	r3, r1
				dataOut->Latitude += charToInt(tempData.LatitudeDEG[a]) * factor;
    37ce:	4343      	muls	r3, r0
    37d0:	6a2a      	ldr	r2, [r5, #32]
				factor /= 10;
    37d2:	0039      	movs	r1, r7
				dataOut->Latitude += charToInt(tempData.LatitudeDEG[a]) * factor;
    37d4:	18d3      	adds	r3, r2, r3
    37d6:	622b      	str	r3, [r5, #32]
				factor /= 10;
    37d8:	f005 f974 	bl	8ac4 <__divsi3>
    37dc:	3601      	adds	r6, #1
		for(a=0;a<MAX_LAT_SIZE;a++){
    37de:	e7e9      	b.n	37b4 <_ZN10GPSL80Lite10updateDataEv+0xb4>
			}
		}
		if(tempData.LatitudeDIR == 'S'){
    37e0:	1ca3      	adds	r3, r4, #2
    37e2:	7fdb      	ldrb	r3, [r3, #31]
    37e4:	2b53      	cmp	r3, #83	; 0x53
    37e6:	d102      	bne.n	37ee <_ZN10GPSL80Lite10updateDataEv+0xee>
			dataOut->Latitude *= -1;
    37e8:	6a2b      	ldr	r3, [r5, #32]
    37ea:	425b      	negs	r3, r3
    37ec:	622b      	str	r3, [r5, #32]
		}

	}
	float Degrees = (float)(dataOut->Latitude / 1000000);
    37ee:	6a2f      	ldr	r7, [r5, #32]
    37f0:	494b      	ldr	r1, [pc, #300]	; (3920 <_ZN10GPSL80Lite10updateDataEv+0x220>)
    37f2:	0038      	movs	r0, r7
    37f4:	f005 f966 	bl	8ac4 <__divsi3>
    37f8:	f006 f95c 	bl	9ab4 <__aeabi_i2f>
    37fc:	1c06      	adds	r6, r0, #0
	float Minutes = ((float)(dataOut->Latitude) / 10000) - (Degrees * 100);
    37fe:	0038      	movs	r0, r7
    3800:	f006 f958 	bl	9ab4 <__aeabi_i2f>
    3804:	4942      	ldr	r1, [pc, #264]	; (3910 <_ZN10GPSL80Lite10updateDataEv+0x210>)
    3806:	f005 fc89 	bl	911c <__aeabi_fdiv>
    380a:	4942      	ldr	r1, [pc, #264]	; (3914 <_ZN10GPSL80Lite10updateDataEv+0x214>)
    380c:	1c07      	adds	r7, r0, #0
    380e:	1c30      	adds	r0, r6, #0
    3810:	f005 fe74 	bl	94fc <__aeabi_fmul>
    3814:	1c01      	adds	r1, r0, #0
    3816:	1c38      	adds	r0, r7, #0
    3818:	f005 ff90 	bl	973c <__aeabi_fsub>
	dataOut->LatitudeDecimal = Degrees + Minutes/60;
    381c:	4941      	ldr	r1, [pc, #260]	; (3924 <_ZN10GPSL80Lite10updateDataEv+0x224>)
    381e:	f005 fc7d 	bl	911c <__aeabi_fdiv>
    3822:	1c31      	adds	r1, r6, #0
    3824:	f005 fae8 	bl	8df8 <__aeabi_fadd>
	tempData.LongitudeDEG[7] = '2';
	tempData.LongitudeDEG[8] = '3';
	tempData.LongitudeDEG[9] = '4';
	tempData.LongitudeDIR = 'W';
	*/
	if(tempData.LongitudeDEG[0] != 0)
    3828:	1ce3      	adds	r3, r4, #3
	dataOut->LatitudeDecimal = Degrees + Minutes/60;
    382a:	62a8      	str	r0, [r5, #40]	; 0x28
	if(tempData.LongitudeDEG[0] != 0)
    382c:	7fdb      	ldrb	r3, [r3, #31]
    382e:	2b00      	cmp	r3, #0
    3830:	d026      	beq.n	3880 <_ZN10GPSL80Lite10updateDataEv+0x180>
	{
		factor = 100000000;
		dataOut->Longitude = 0;
    3832:	2300      	movs	r3, #0
    3834:	626b      	str	r3, [r5, #36]	; 0x24
    3836:	0023      	movs	r3, r4
    3838:	0026      	movs	r6, r4
			if(tempData.LongitudeDEG[a] != '.'){ // Don't convert the dot!
//							   Serial.println("Input for a=" + String(a) + " :" + String(tempData.LongitudeDEG[a])+":");
//							   Serial.println("Factor=" + String(factor) );
				dataOut->Longitude += charToInt(tempData.LongitudeDEG[a]) * factor;
				 			//Serial.println("Output for a=" + String(a) + " :" + String(dataOut->Longitude)+":");
				factor /= 10;
    383a:	270a      	movs	r7, #10
    383c:	332c      	adds	r3, #44	; 0x2c
		factor = 100000000;
    383e:	483a      	ldr	r0, [pc, #232]	; (3928 <_ZN10GPSL80Lite10updateDataEv+0x228>)
    3840:	3622      	adds	r6, #34	; 0x22
    3842:	9301      	str	r3, [sp, #4]
		for(a=0;a<MAX_LONG_SIZE;a++){
    3844:	9b01      	ldr	r3, [sp, #4]
    3846:	42b3      	cmp	r3, r6
    3848:	d012      	beq.n	3870 <_ZN10GPSL80Lite10updateDataEv+0x170>
			if(tempData.LongitudeDEG[a] != '.'){ // Don't convert the dot!
    384a:	7831      	ldrb	r1, [r6, #0]
    384c:	292e      	cmp	r1, #46	; 0x2e
    384e:	d00d      	beq.n	386c <_ZN10GPSL80Lite10updateDataEv+0x16c>
		dummy = dummy - 48;
    3850:	000b      	movs	r3, r1
    3852:	3b30      	subs	r3, #48	; 0x30
    3854:	b2db      	uxtb	r3, r3
	if(dummy > 57) // Must be A-F
    3856:	2939      	cmp	r1, #57	; 0x39
    3858:	dd01      	ble.n	385e <_ZN10GPSL80Lite10updateDataEv+0x15e>
		dummy = dummy - 55;		
    385a:	3937      	subs	r1, #55	; 0x37
    385c:	b2cb      	uxtb	r3, r1
				dataOut->Longitude += charToInt(tempData.LongitudeDEG[a]) * factor;
    385e:	4343      	muls	r3, r0
    3860:	6a6a      	ldr	r2, [r5, #36]	; 0x24
				factor /= 10;
    3862:	0039      	movs	r1, r7
				dataOut->Longitude += charToInt(tempData.LongitudeDEG[a]) * factor;
    3864:	18d3      	adds	r3, r2, r3
    3866:	626b      	str	r3, [r5, #36]	; 0x24
				factor /= 10;
    3868:	f005 f92c 	bl	8ac4 <__divsi3>
    386c:	3601      	adds	r6, #1
		for(a=0;a<MAX_LONG_SIZE;a++){
    386e:	e7e9      	b.n	3844 <_ZN10GPSL80Lite10updateDataEv+0x144>
			}
		}
		if(tempData.LongitudeDIR == 'W'){
    3870:	0023      	movs	r3, r4
    3872:	332d      	adds	r3, #45	; 0x2d
    3874:	781b      	ldrb	r3, [r3, #0]
    3876:	2b57      	cmp	r3, #87	; 0x57
    3878:	d102      	bne.n	3880 <_ZN10GPSL80Lite10updateDataEv+0x180>
			dataOut->Longitude *= -1;
    387a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    387c:	425b      	negs	r3, r3
    387e:	626b      	str	r3, [r5, #36]	; 0x24
	So the complete formula looks similar the following:
	Decimal value = (Degrees + (Minutes/60) + (Seconds/3600) )(*-1 if S or W)
	*/
	// 01224.0718E -> 12240718 || 01224.0718W -> -12240718
//	Serial.println("Longitude uint: " + String(dataOut->Longitude));	
	Degrees = (float)(dataOut->Longitude / 1000000);
    3880:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    3882:	4927      	ldr	r1, [pc, #156]	; (3920 <_ZN10GPSL80Lite10updateDataEv+0x220>)
    3884:	0038      	movs	r0, r7
    3886:	f005 f91d 	bl	8ac4 <__divsi3>
    388a:	f006 f913 	bl	9ab4 <__aeabi_i2f>
    388e:	1c06      	adds	r6, r0, #0
//	Serial.println("");
//	Serial.println("Degrees: " + String(Degrees,4));	
	Minutes = ((float)(dataOut->Longitude) / 10000) - (Degrees * 100);
    3890:	0038      	movs	r0, r7
    3892:	f006 f90f 	bl	9ab4 <__aeabi_i2f>
    3896:	491e      	ldr	r1, [pc, #120]	; (3910 <_ZN10GPSL80Lite10updateDataEv+0x210>)
    3898:	f005 fc40 	bl	911c <__aeabi_fdiv>
    389c:	491d      	ldr	r1, [pc, #116]	; (3914 <_ZN10GPSL80Lite10updateDataEv+0x214>)
    389e:	1c07      	adds	r7, r0, #0
    38a0:	1c30      	adds	r0, r6, #0
    38a2:	f005 fe2b 	bl	94fc <__aeabi_fmul>
    38a6:	1c01      	adds	r1, r0, #0
    38a8:	1c38      	adds	r0, r7, #0
    38aa:	f005 ff47 	bl	973c <__aeabi_fsub>
//	Serial.println("Minutes: " + String(Minutes,4));
//	
//				   -12
//					   -1224.0718 + 1200 = 1200 - 1224.0718 = -24,0718 	
	
	dataOut->LongitudeDecimal = Degrees + Minutes/60;
    38ae:	491d      	ldr	r1, [pc, #116]	; (3924 <_ZN10GPSL80Lite10updateDataEv+0x224>)
    38b0:	f005 fc34 	bl	911c <__aeabi_fdiv>
    38b4:	1c31      	adds	r1, r6, #0
    38b6:	f005 fa9f 	bl	8df8 <__aeabi_fadd>
	Serial.println(":" + String(tempData.LongitudeDIR) + ":");
	Serial.println(":" + String(dataOut->Latitude) + ":");
	Serial.println(":" + String(dataOut->Longitude) + ":");
	Serial.println("");*/

	dataOut->LatitudeDIR=tempData.LatitudeDIR;
    38ba:	1ca3      	adds	r3, r4, #2
	dataOut->LongitudeDecimal = Degrees + Minutes/60;
    38bc:	62e8      	str	r0, [r5, #44]	; 0x2c
	dataOut->LatitudeDIR=tempData.LatitudeDIR;
    38be:	7fdb      	ldrb	r3, [r3, #31]
    38c0:	746b      	strb	r3, [r5, #17]
	dataOut->LongitudeDIR=tempData.LongitudeDIR;
    38c2:	0023      	movs	r3, r4
    38c4:	332d      	adds	r3, #45	; 0x2d
    38c6:	68e2      	ldr	r2, [r4, #12]
    38c8:	781b      	ldrb	r3, [r3, #0]
    38ca:	7753      	strb	r3, [r2, #29]
	dataOut->Fix=tempData.Fix;
    38cc:	0023      	movs	r3, r4
    38ce:	3340      	adds	r3, #64	; 0x40
    38d0:	781a      	ldrb	r2, [r3, #0]
    38d2:	68e3      	ldr	r3, [r4, #12]
    38d4:	3330      	adds	r3, #48	; 0x30
    38d6:	701a      	strb	r2, [r3, #0]
	dataOut->FixDecimal=tempData.FixDecimal;
    38d8:	0023      	movs	r3, r4
    38da:	3341      	adds	r3, #65	; 0x41
    38dc:	781a      	ldrb	r2, [r3, #0]
    38de:	68e3      	ldr	r3, [r4, #12]
    38e0:	3331      	adds	r3, #49	; 0x31
    38e2:	701a      	strb	r2, [r3, #0]
	dataOut->NumberOfSatellites=tempData.NumberOfSatellites;
    38e4:	0023      	movs	r3, r4
    38e6:	3342      	adds	r3, #66	; 0x42
    38e8:	781a      	ldrb	r2, [r3, #0]
    38ea:	68e3      	ldr	r3, [r4, #12]
    38ec:	3332      	adds	r3, #50	; 0x32
    38ee:	701a      	strb	r2, [r3, #0]
	dataOut->HDOP=tempData.HDOP;
    38f0:	68e3      	ldr	r3, [r4, #12]
    38f2:	6c62      	ldr	r2, [r4, #68]	; 0x44
    38f4:	635a      	str	r2, [r3, #52]	; 0x34
	dataOut->Altitude=tempData.Altitude;
    38f6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    38f8:	639a      	str	r2, [r3, #56]	; 0x38
	dataOut->AltitudeUnit=tempData.AltitudeUnit;
    38fa:	0022      	movs	r2, r4
    38fc:	324c      	adds	r2, #76	; 0x4c
    38fe:	7812      	ldrb	r2, [r2, #0]
    3900:	333c      	adds	r3, #60	; 0x3c
    3902:	701a      	strb	r2, [r3, #0]
	dataOut->DataIsValid=true;
    3904:	2201      	movs	r2, #1
    3906:	68e3      	ldr	r3, [r4, #12]
    3908:	333d      	adds	r3, #61	; 0x3d
    390a:	701a      	strb	r2, [r3, #0]
}
    390c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    390e:	46c0      	nop			; (mov r8, r8)
    3910:	461c4000 	.word	0x461c4000
    3914:	42c80000 	.word	0x42c80000
    3918:	00002710 	.word	0x00002710
    391c:	00989680 	.word	0x00989680
    3920:	000f4240 	.word	0x000f4240
    3924:	42700000 	.word	0x42700000
    3928:	05f5e100 	.word	0x05f5e100

0000392c <_ZN10GPSL80Lite4initEP4UartP11GpsDataLitemii>:
{
    392c:	b570      	push	{r4, r5, r6, lr}
    392e:	0004      	movs	r4, r0
    3930:	001d      	movs	r5, r3
	dataOut->DataIsValid = false;
    3932:	2300      	movs	r3, #0
	SerialGPS->begin(9600); // 9600 is default baud after power cycle.. which we don't do here but assumes had been done.
    3934:	2696      	movs	r6, #150	; 0x96
	dataOut =  ptr2;
    3936:	60e2      	str	r2, [r4, #12]
	dataOut->DataIsValid = false;
    3938:	323d      	adds	r2, #61	; 0x3d
	SerialGPS = ptr1;
    393a:	6061      	str	r1, [r4, #4]
	dataOut->DataIsValid = false;
    393c:	7013      	strb	r3, [r2, #0]
	SerialGPS->begin(9600); // 9600 is default baud after power cycle.. which we don't do here but assumes had been done.
    393e:	680b      	ldr	r3, [r1, #0]
    3940:	01b6      	lsls	r6, r6, #6
    3942:	69db      	ldr	r3, [r3, #28]
{
    3944:	0008      	movs	r0, r1
	SerialGPS->begin(9600); // 9600 is default baud after power cycle.. which we don't do here but assumes had been done.
    3946:	0031      	movs	r1, r6
    3948:	4798      	blx	r3
		pinPeripheral(txPin, PIO_SERCOM_ALT); //Assign TX function to GPS TX pin.
    394a:	2103      	movs	r1, #3
    394c:	9805      	ldr	r0, [sp, #20]
    394e:	f004 f9cb 	bl	7ce8 <pinPeripheral>
		pinPeripheral(rxPin, PIO_SERCOM_ALT); //Assign RX function to GPS RX pin.
    3952:	2103      	movs	r1, #3
    3954:	9804      	ldr	r0, [sp, #16]
    3956:	f004 f9c7 	bl	7ce8 <pinPeripheral>
	delay(1000);
    395a:	20fa      	movs	r0, #250	; 0xfa
    395c:	0080      	lsls	r0, r0, #2
    395e:	f002 fc0b 	bl	6178 <delay>
	SerialGPS->println("$PMTK314,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29"); //Setup the GPS for only GPGGA output at 1Hz.
    3962:	4920      	ldr	r1, [pc, #128]	; (39e4 <_ZN10GPSL80Lite4initEP4UartP11GpsDataLitemii+0xb8>)
    3964:	6860      	ldr	r0, [r4, #4]
    3966:	f002 fc8f 	bl	6288 <_ZN5Print7printlnEPKc>
	delay(1000);
    396a:	20fa      	movs	r0, #250	; 0xfa
    396c:	0080      	lsls	r0, r0, #2
    396e:	f002 fc03 	bl	6178 <delay>
	 switch(baudrate){
    3972:	2396      	movs	r3, #150	; 0x96
    3974:	01db      	lsls	r3, r3, #7
    3976:	429d      	cmp	r5, r3
    3978:	d030      	beq.n	39dc <_ZN10GPSL80Lite4initEP4UartP11GpsDataLitemii+0xb0>
    397a:	d810      	bhi.n	399e <_ZN10GPSL80Lite4initEP4UartP11GpsDataLitemii+0x72>
    397c:	42b5      	cmp	r5, r6
    397e:	d028      	beq.n	39d2 <_ZN10GPSL80Lite4initEP4UartP11GpsDataLitemii+0xa6>
		pinPeripheral(txPin, PIO_SERCOM_ALT); //Assign TX function to GPS TX pin.
    3980:	2103      	movs	r1, #3
    3982:	9805      	ldr	r0, [sp, #20]
    3984:	f004 f9b0 	bl	7ce8 <pinPeripheral>
		pinPeripheral(rxPin, PIO_SERCOM_ALT); //Assign RX function to GPS RX pin.
    3988:	2103      	movs	r1, #3
    398a:	9804      	ldr	r0, [sp, #16]
    398c:	f004 f9ac 	bl	7ce8 <pinPeripheral>
	resetTempData();
    3990:	0020      	movs	r0, r4
    3992:	f7ff fe8b 	bl	36ac <_ZN10GPSL80Lite13resetTempDataEv>
	updateData();	
    3996:	0020      	movs	r0, r4
    3998:	f7ff feb2 	bl	3700 <_ZN10GPSL80Lite10updateDataEv>
}
    399c:	bd70      	pop	{r4, r5, r6, pc}
	 switch(baudrate){
    399e:	2396      	movs	r3, #150	; 0x96
    39a0:	021b      	lsls	r3, r3, #8
    39a2:	429d      	cmp	r5, r3
    39a4:	d01c      	beq.n	39e0 <_ZN10GPSL80Lite4initEP4UartP11GpsDataLitemii+0xb4>
    39a6:	23e1      	movs	r3, #225	; 0xe1
			SerialGPS->println("$PMTK251,57600*2C");     //Setup GPS serial speed for 57600. (This gives us less idle time thus saving power). This looks like i is too fast for the software serial on 8MMz.			
    39a8:	490f      	ldr	r1, [pc, #60]	; (39e8 <_ZN10GPSL80Lite4initEP4UartP11GpsDataLitemii+0xbc>)
	 switch(baudrate){
    39aa:	021b      	lsls	r3, r3, #8
    39ac:	429d      	cmp	r5, r3
    39ae:	d1e7      	bne.n	3980 <_ZN10GPSL80Lite4initEP4UartP11GpsDataLitemii+0x54>
			SerialGPS->println("$PMTK251,57600*2C");     //Setup GPS serial speed for 57600. (This gives us less idle time thus saving power). This looks like i is too fast for the software serial on 8MMz.			
    39b0:	6860      	ldr	r0, [r4, #4]
    39b2:	f002 fc69 	bl	6288 <_ZN5Print7printlnEPKc>
			delay(1000);
    39b6:	20fa      	movs	r0, #250	; 0xfa
    39b8:	0080      	lsls	r0, r0, #2
    39ba:	f002 fbdd 	bl	6178 <delay>
			SerialGPS->end();
    39be:	6860      	ldr	r0, [r4, #4]
    39c0:	6803      	ldr	r3, [r0, #0]
    39c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    39c4:	4798      	blx	r3
			SerialGPS->begin(57600);  // GPS module uses 57600 as standard speed.*/
    39c6:	6860      	ldr	r0, [r4, #4]
    39c8:	0029      	movs	r1, r5
    39ca:	6803      	ldr	r3, [r0, #0]
    39cc:	69db      	ldr	r3, [r3, #28]
    39ce:	4798      	blx	r3
		 break;
    39d0:	e7d6      	b.n	3980 <_ZN10GPSL80Lite4initEP4UartP11GpsDataLitemii+0x54>
			 delay(1000);
    39d2:	20fa      	movs	r0, #250	; 0xfa
    39d4:	0080      	lsls	r0, r0, #2
    39d6:	f002 fbcf 	bl	6178 <delay>
			 break;
    39da:	e7d1      	b.n	3980 <_ZN10GPSL80Lite4initEP4UartP11GpsDataLitemii+0x54>
		    SerialGPS->println("$PMTK251,19200*22");    //Setup GPS serial speed for 19200. (This gives us less idle time thus saving power).			
    39dc:	4903      	ldr	r1, [pc, #12]	; (39ec <_ZN10GPSL80Lite4initEP4UartP11GpsDataLitemii+0xc0>)
    39de:	e7e7      	b.n	39b0 <_ZN10GPSL80Lite4initEP4UartP11GpsDataLitemii+0x84>
			SerialGPS->println("$PMTK251,38400*27");    //Setup GPS serial speed for 38400. (This gives us less idle time thus saving power).This looks like i is too fast for the software serial on 8MMz.			
    39e0:	4903      	ldr	r1, [pc, #12]	; (39f0 <_ZN10GPSL80Lite4initEP4UartP11GpsDataLitemii+0xc4>)
    39e2:	e7e5      	b.n	39b0 <_ZN10GPSL80Lite4initEP4UartP11GpsDataLitemii+0x84>
    39e4:	0000b8f0 	.word	0x0000b8f0
    39e8:	0000b946 	.word	0x0000b946
    39ec:	0000b922 	.word	0x0000b922
    39f0:	0000b934 	.word	0x0000b934

000039f4 <_ZN10GPSL80Lite10inputValidEc>:
	Serial.print(String(String(dataOut->Altitude)+dataOut->AltitudeUnit));
	Serial.println(":");
}

bool GPSL80Lite::inputValid(char input)
{
    39f4:	0002      	movs	r2, r0
	if((input == '\r') || (input == '$')) 
    39f6:	290d      	cmp	r1, #13
    39f8:	d002      	beq.n	3a00 <_ZN10GPSL80Lite10inputValidEc+0xc>
		if( ReadErrors < 255)
			ReadErrors++;
		state=LOOKING_FOR_START; // Go back to start							
		return 0;
	}
	return 1;		
    39fa:	2001      	movs	r0, #1
	if((input == '\r') || (input == '$')) 
    39fc:	2924      	cmp	r1, #36	; 0x24
    39fe:	d108      	bne.n	3a12 <_ZN10GPSL80Lite10inputValidEc+0x1e>
		if( ReadErrors < 255)
    3a00:	0011      	movs	r1, r2
    3a02:	3152      	adds	r1, #82	; 0x52
    3a04:	780b      	ldrb	r3, [r1, #0]
    3a06:	2bff      	cmp	r3, #255	; 0xff
    3a08:	d001      	beq.n	3a0e <_ZN10GPSL80Lite10inputValidEc+0x1a>
			ReadErrors++;
    3a0a:	3301      	adds	r3, #1
    3a0c:	700b      	strb	r3, [r1, #0]
		state=LOOKING_FOR_START; // Go back to start							
    3a0e:	2000      	movs	r0, #0
    3a10:	7210      	strb	r0, [r2, #8]
}
    3a12:	4770      	bx	lr

00003a14 <_ZN10GPSL80Lite6updateEv>:

void GPSL80Lite::update()
{
    3a14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3a16:	0004      	movs	r4, r0
	bool printOnes = false;
	do
	{
		dataReady=SerialGPS->available();
    3a18:	6860      	ldr	r0, [r4, #4]
    3a1a:	6803      	ldr	r3, [r0, #0]
    3a1c:	691b      	ldr	r3, [r3, #16]
    3a1e:	4798      	blx	r3
    3a20:	0003      	movs	r3, r0
    3a22:	1e5a      	subs	r2, r3, #1
    3a24:	4193      	sbcs	r3, r2
    3a26:	7023      	strb	r3, [r4, #0]
	
		if(dataReady)
    3a28:	2800      	cmp	r0, #0
    3a2a:	d070      	beq.n	3b0e <_ZN10GPSL80Lite6updateEv+0xfa>
			if(printOnes==false){
//				SerialAUX->print("Data to handle from GPS: " + String(dataReady) + "...");
				//SerialAUX->println("GPS Bytes to analyze=" + String(dataReady));	
				printOnes=true;
			}
			_newChar=SerialGPS->read(); // read char from input buffer
    3a2c:	6860      	ldr	r0, [r4, #4]
    3a2e:	6803      	ldr	r3, [r0, #0]
    3a30:	695b      	ldr	r3, [r3, #20]
    3a32:	4798      	blx	r3
    3a34:	b2c1      	uxtb	r1, r0
    3a36:	0002      	movs	r2, r0
//			Serial.print(_newChar);
//			data[byteNumber++] = _newChar; // Save the incomming data to buffer.
								
			switch (state)
    3a38:	7a20      	ldrb	r0, [r4, #8]
			_newChar=SerialGPS->read(); // read char from input buffer
    3a3a:	7061      	strb	r1, [r4, #1]
			switch (state)
    3a3c:	280f      	cmp	r0, #15
    3a3e:	d832      	bhi.n	3aa6 <_ZN10GPSL80Lite6updateEv+0x92>
    3a40:	f004 ffac 	bl	899c <__gnu_thumb1_case_uhi>
    3a44:	001e0010 	.word	0x001e0010
    3a48:	0066003f 	.word	0x0066003f
    3a4c:	008b0071 	.word	0x008b0071
    3a50:	00c000a5 	.word	0x00c000a5
    3a54:	010300dc 	.word	0x010300dc
    3a58:	01900136 	.word	0x01900136
    3a5c:	01ff01e3 	.word	0x01ff01e3
    3a60:	02280217 	.word	0x02280217
			{
				case LOOKING_FOR_START: // look for $ in incomming data
					if(_newChar == '$')
    3a64:	2924      	cmp	r1, #36	; 0x24
    3a66:	d14f      	bne.n	3b08 <_ZN10GPSL80Lite6updateEv+0xf4>
					{
						dataLength = 0;    // counter number of bytes read.
						byteNumber = 0;    // Reset the pointer in data
    3a68:	0022      	movs	r2, r4
						dataLength = 0;    // counter number of bytes read.
    3a6a:	2300      	movs	r3, #0
						byteNumber = 0;    // Reset the pointer in data
    3a6c:	3250      	adds	r2, #80	; 0x50
						dataLength = 0;    // counter number of bytes read.
    3a6e:	7263      	strb	r3, [r4, #9]
						CRC=0;			   // Reeat CRC calculation for new data.
						resetTempData();
    3a70:	0020      	movs	r0, r4
						byteNumber = 0;    // Reset the pointer in data
    3a72:	7013      	strb	r3, [r2, #0]
						CRC=0;			   // Reeat CRC calculation for new data.
    3a74:	70d3      	strb	r3, [r2, #3]
						resetTempData();
    3a76:	f7ff fe19 	bl	36ac <_ZN10GPSL80Lite13resetTempDataEv>
					//                $GPRMC,064951.000,A,2307.1256,N,12016.4438,E,0.03,165.48,260406,3.05,W,A*2C 			
					switch (dataLength)
					{
						case 1: 
							if(_newChar == 'G')
								state = READ_HEADER;
    3a7a:	2301      	movs	r3, #1
					
					state = LOOKING_FOR_START;
				break;
				
				default: 
					state = LOOKING_FOR_START;
    3a7c:	7223      	strb	r3, [r4, #8]
				break;
    3a7e:	e043      	b.n	3b08 <_ZN10GPSL80Lite6updateEv+0xf4>
					CRC = CRC ^ uint8_t(_newChar); // Calculate CRC
    3a80:	0022      	movs	r2, r4
					dataLength++;
    3a82:	7a60      	ldrb	r0, [r4, #9]
					CRC = CRC ^ uint8_t(_newChar); // Calculate CRC
    3a84:	3253      	adds	r2, #83	; 0x53
					dataLength++;
    3a86:	3001      	adds	r0, #1
    3a88:	b2c0      	uxtb	r0, r0
    3a8a:	7260      	strb	r0, [r4, #9]
					CRC = CRC ^ uint8_t(_newChar); // Calculate CRC
    3a8c:	7813      	ldrb	r3, [r2, #0]
					switch (dataLength)
    3a8e:	3801      	subs	r0, #1
					CRC = CRC ^ uint8_t(_newChar); // Calculate CRC
    3a90:	404b      	eors	r3, r1
    3a92:	7013      	strb	r3, [r2, #0]
					switch (dataLength)
    3a94:	2805      	cmp	r0, #5
    3a96:	d806      	bhi.n	3aa6 <_ZN10GPSL80Lite6updateEv+0x92>
    3a98:	f004 ff76 	bl	8988 <__gnu_thumb1_case_uqi>
    3a9c:	03030703 	.word	0x03030703
    3aa0:	0d0a      	.short	0x0d0a
							if(_newChar == 'G')
    3aa2:	2947      	cmp	r1, #71	; 0x47
    3aa4:	d0e9      	beq.n	3a7a <_ZN10GPSL80Lite6updateEv+0x66>
					state = LOOKING_FOR_START;
    3aa6:	2300      	movs	r3, #0
    3aa8:	e7e8      	b.n	3a7c <_ZN10GPSL80Lite6updateEv+0x68>
							if(_newChar == 'P')
    3aaa:	2950      	cmp	r1, #80	; 0x50
    3aac:	d1fb      	bne.n	3aa6 <_ZN10GPSL80Lite6updateEv+0x92>
    3aae:	e7e4      	b.n	3a7a <_ZN10GPSL80Lite6updateEv+0x66>
							if(_newChar == 'A')
    3ab0:	2941      	cmp	r1, #65	; 0x41
    3ab2:	d1f8      	bne.n	3aa6 <_ZN10GPSL80Lite6updateEv+0x92>
    3ab4:	e7e1      	b.n	3a7a <_ZN10GPSL80Lite6updateEv+0x66>
							if(_newChar == ','){
    3ab6:	292c      	cmp	r1, #44	; 0x2c
    3ab8:	d1f5      	bne.n	3aa6 <_ZN10GPSL80Lite6updateEv+0x92>
								dataLength=0;
    3aba:	2300      	movs	r3, #0
    3abc:	7263      	strb	r3, [r4, #9]
								state = READ_UTC_DATA; 
    3abe:	3302      	adds	r3, #2
    3ac0:	e7dc      	b.n	3a7c <_ZN10GPSL80Lite6updateEv+0x68>
					dataLength++;
    3ac2:	7a63      	ldrb	r3, [r4, #9]
					if(inputValid(_newChar))
    3ac4:	0020      	movs	r0, r4
					dataLength++;
    3ac6:	3301      	adds	r3, #1
    3ac8:	7263      	strb	r3, [r4, #9]
					if(inputValid(_newChar))
    3aca:	f7ff ff93 	bl	39f4 <_ZN10GPSL80Lite10inputValidEc>
    3ace:	2800      	cmp	r0, #0
    3ad0:	d01a      	beq.n	3b08 <_ZN10GPSL80Lite6updateEv+0xf4>
						CRC = CRC ^ uint8_t(_newChar); // Calculate CRC
    3ad2:	0022      	movs	r2, r4
    3ad4:	3253      	adds	r2, #83	; 0x53
    3ad6:	7865      	ldrb	r5, [r4, #1]
    3ad8:	7813      	ldrb	r3, [r2, #0]
    3ada:	406b      	eors	r3, r5
    3adc:	7013      	strb	r3, [r2, #0]
							state=WAIT_FOR_NEXT_PARAMETER;
    3ade:	2303      	movs	r3, #3
						if(_newChar == '.')
    3ae0:	2d2e      	cmp	r5, #46	; 0x2e
    3ae2:	d0cb      	beq.n	3a7c <_ZN10GPSL80Lite6updateEv+0x68>
							tempData.UTCTime=tempData.UTCTime * 10 + charToInt(_newChar);								
    3ae4:	49b9      	ldr	r1, [pc, #740]	; (3dcc <_ZN10GPSL80Lite6updateEv+0x3b8>)
    3ae6:	6920      	ldr	r0, [r4, #16]
    3ae8:	f005 fd08 	bl	94fc <__aeabi_fmul>
    3aec:	1c06      	adds	r6, r0, #0
		dummy = dummy - 48;
    3aee:	0028      	movs	r0, r5
    3af0:	3830      	subs	r0, #48	; 0x30
    3af2:	b2c0      	uxtb	r0, r0
	if(dummy > 57) // Must be A-F
    3af4:	2d39      	cmp	r5, #57	; 0x39
    3af6:	dd01      	ble.n	3afc <_ZN10GPSL80Lite6updateEv+0xe8>
		dummy = dummy - 55;		
    3af8:	3d37      	subs	r5, #55	; 0x37
    3afa:	b2e8      	uxtb	r0, r5
							tempData.UTCTime=tempData.UTCTime * 10 + charToInt(_newChar);								
    3afc:	f005 ffda 	bl	9ab4 <__aeabi_i2f>
    3b00:	1c31      	adds	r1, r6, #0
    3b02:	f005 f979 	bl	8df8 <__aeabi_fadd>
    3b06:	6120      	str	r0, [r4, #16]
			}
		}			
	}while(dataReady); // loop until buffer is empty	
    3b08:	7823      	ldrb	r3, [r4, #0]
    3b0a:	2b00      	cmp	r3, #0
    3b0c:	d184      	bne.n	3a18 <_ZN10GPSL80Lite6updateEv+0x4>
	
}
    3b0e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
					CRC = CRC ^ uint8_t(_newChar); // Calculate CRC
    3b10:	0022      	movs	r2, r4
    3b12:	3253      	adds	r2, #83	; 0x53
    3b14:	7813      	ldrb	r3, [r2, #0]
    3b16:	404b      	eors	r3, r1
    3b18:	7013      	strb	r3, [r2, #0]
					if(_newChar == ',') 
    3b1a:	292c      	cmp	r1, #44	; 0x2c
    3b1c:	d1f4      	bne.n	3b08 <_ZN10GPSL80Lite6updateEv+0xf4>
						dataLength=0;
    3b1e:	2300      	movs	r3, #0
    3b20:	7263      	strb	r3, [r4, #9]
						state=READ_LAT_DATA;
    3b22:	3304      	adds	r3, #4
    3b24:	e7aa      	b.n	3a7c <_ZN10GPSL80Lite6updateEv+0x68>
					dataLength++;					
    3b26:	7a63      	ldrb	r3, [r4, #9]
					if(inputValid(_newChar))
    3b28:	0020      	movs	r0, r4
					dataLength++;					
    3b2a:	3301      	adds	r3, #1
    3b2c:	7263      	strb	r3, [r4, #9]
					if(inputValid(_newChar))
    3b2e:	f7ff ff61 	bl	39f4 <_ZN10GPSL80Lite10inputValidEc>
    3b32:	2800      	cmp	r0, #0
    3b34:	d0e8      	beq.n	3b08 <_ZN10GPSL80Lite6updateEv+0xf4>
						CRC = CRC ^ uint8_t(_newChar); // Calculate CRC
    3b36:	0021      	movs	r1, r4
    3b38:	3153      	adds	r1, #83	; 0x53
    3b3a:	7862      	ldrb	r2, [r4, #1]
    3b3c:	780b      	ldrb	r3, [r1, #0]
    3b3e:	4053      	eors	r3, r2
    3b40:	700b      	strb	r3, [r1, #0]
						if(_newChar == ',')
    3b42:	2a2c      	cmp	r2, #44	; 0x2c
    3b44:	d103      	bne.n	3b4e <_ZN10GPSL80Lite6updateEv+0x13a>
							dataLength=0;
    3b46:	2300      	movs	r3, #0
    3b48:	7263      	strb	r3, [r4, #9]
							state=READ_LAT_DIR_DATA;
    3b4a:	3305      	adds	r3, #5
    3b4c:	e796      	b.n	3a7c <_ZN10GPSL80Lite6updateEv+0x68>
						}else if(dataLength <= MAX_LAT_SIZE)
    3b4e:	7a63      	ldrb	r3, [r4, #9]
    3b50:	2b09      	cmp	r3, #9
    3b52:	dcd9      	bgt.n	3b08 <_ZN10GPSL80Lite6updateEv+0xf4>
							tempData.LatitudeDEG[dataLength-1]=_newChar;
    3b54:	18e3      	adds	r3, r4, r3
    3b56:	759a      	strb	r2, [r3, #22]
    3b58:	e7d6      	b.n	3b08 <_ZN10GPSL80Lite6updateEv+0xf4>
					dataLength++;				
    3b5a:	7a63      	ldrb	r3, [r4, #9]
					if(inputValid(_newChar))
    3b5c:	0020      	movs	r0, r4
					dataLength++;				
    3b5e:	3301      	adds	r3, #1
    3b60:	7263      	strb	r3, [r4, #9]
					if(inputValid(_newChar))
    3b62:	f7ff ff47 	bl	39f4 <_ZN10GPSL80Lite10inputValidEc>
    3b66:	2800      	cmp	r0, #0
    3b68:	d0ce      	beq.n	3b08 <_ZN10GPSL80Lite6updateEv+0xf4>
						CRC = CRC ^ uint8_t(_newChar); // Calculate CRC			
    3b6a:	0021      	movs	r1, r4
    3b6c:	3153      	adds	r1, #83	; 0x53
    3b6e:	7863      	ldrb	r3, [r4, #1]
    3b70:	780a      	ldrb	r2, [r1, #0]
    3b72:	405a      	eors	r2, r3
    3b74:	700a      	strb	r2, [r1, #0]
						if(_newChar == ',')
    3b76:	2b2c      	cmp	r3, #44	; 0x2c
    3b78:	d103      	bne.n	3b82 <_ZN10GPSL80Lite6updateEv+0x16e>
							dataLength=0;
    3b7a:	2300      	movs	r3, #0
    3b7c:	7263      	strb	r3, [r4, #9]
							state=READ_LONG_DATA;
    3b7e:	3306      	adds	r3, #6
    3b80:	e77c      	b.n	3a7c <_ZN10GPSL80Lite6updateEv+0x68>
						else if(dataLength == 1){
    3b82:	7a62      	ldrb	r2, [r4, #9]
    3b84:	2a01      	cmp	r2, #1
    3b86:	d1bf      	bne.n	3b08 <_ZN10GPSL80Lite6updateEv+0xf4>
							tempData.LatitudeDIR=_newChar;
    3b88:	1ca2      	adds	r2, r4, #2
    3b8a:	77d3      	strb	r3, [r2, #31]
    3b8c:	e7bc      	b.n	3b08 <_ZN10GPSL80Lite6updateEv+0xf4>
					dataLength++;					
    3b8e:	7a63      	ldrb	r3, [r4, #9]
					if(inputValid(_newChar))
    3b90:	0020      	movs	r0, r4
					dataLength++;					
    3b92:	3301      	adds	r3, #1
    3b94:	7263      	strb	r3, [r4, #9]
					if(inputValid(_newChar))
    3b96:	f7ff ff2d 	bl	39f4 <_ZN10GPSL80Lite10inputValidEc>
    3b9a:	2800      	cmp	r0, #0
    3b9c:	d0b4      	beq.n	3b08 <_ZN10GPSL80Lite6updateEv+0xf4>
						CRC = CRC ^ uint8_t(_newChar); // Calculate CRC
    3b9e:	0021      	movs	r1, r4
    3ba0:	3153      	adds	r1, #83	; 0x53
    3ba2:	7862      	ldrb	r2, [r4, #1]
    3ba4:	780b      	ldrb	r3, [r1, #0]
    3ba6:	4053      	eors	r3, r2
    3ba8:	700b      	strb	r3, [r1, #0]
						if(_newChar == ',')
    3baa:	2a2c      	cmp	r2, #44	; 0x2c
    3bac:	d103      	bne.n	3bb6 <_ZN10GPSL80Lite6updateEv+0x1a2>
							dataLength=0;
    3bae:	2300      	movs	r3, #0
    3bb0:	7263      	strb	r3, [r4, #9]
							state=READ_LONG_DIR_DATA;
    3bb2:	3307      	adds	r3, #7
    3bb4:	e762      	b.n	3a7c <_ZN10GPSL80Lite6updateEv+0x68>
						}else if(dataLength <= MAX_LONG_SIZE){ 	
    3bb6:	7a63      	ldrb	r3, [r4, #9]
    3bb8:	2b0a      	cmp	r3, #10
    3bba:	dca5      	bgt.n	3b08 <_ZN10GPSL80Lite6updateEv+0xf4>
							tempData.LongitudeDEG[dataLength-1]=_newChar;
    3bbc:	18e3      	adds	r3, r4, r3
    3bbe:	3302      	adds	r3, #2
    3bc0:	77da      	strb	r2, [r3, #31]
    3bc2:	e7a1      	b.n	3b08 <_ZN10GPSL80Lite6updateEv+0xf4>
					dataLength++;
    3bc4:	7a63      	ldrb	r3, [r4, #9]
					if(inputValid(_newChar))
    3bc6:	0020      	movs	r0, r4
					dataLength++;
    3bc8:	3301      	adds	r3, #1
    3bca:	7263      	strb	r3, [r4, #9]
					if(inputValid(_newChar))
    3bcc:	f7ff ff12 	bl	39f4 <_ZN10GPSL80Lite10inputValidEc>
    3bd0:	2800      	cmp	r0, #0
    3bd2:	d099      	beq.n	3b08 <_ZN10GPSL80Lite6updateEv+0xf4>
						CRC = CRC ^ uint8_t(_newChar); // Calculate CRC
    3bd4:	0021      	movs	r1, r4
    3bd6:	3153      	adds	r1, #83	; 0x53
    3bd8:	7863      	ldrb	r3, [r4, #1]
    3bda:	780a      	ldrb	r2, [r1, #0]
    3bdc:	405a      	eors	r2, r3
    3bde:	700a      	strb	r2, [r1, #0]
						if(_newChar == ',')
    3be0:	2b2c      	cmp	r3, #44	; 0x2c
    3be2:	d103      	bne.n	3bec <_ZN10GPSL80Lite6updateEv+0x1d8>
							dataLength=0;
    3be4:	2300      	movs	r3, #0
    3be6:	7263      	strb	r3, [r4, #9]
							state=READ_FIX_DATA;
    3be8:	3308      	adds	r3, #8
    3bea:	e747      	b.n	3a7c <_ZN10GPSL80Lite6updateEv+0x68>
						else if(dataLength == 1)
    3bec:	7a62      	ldrb	r2, [r4, #9]
    3bee:	2a01      	cmp	r2, #1
    3bf0:	d000      	beq.n	3bf4 <_ZN10GPSL80Lite6updateEv+0x1e0>
    3bf2:	e789      	b.n	3b08 <_ZN10GPSL80Lite6updateEv+0xf4>
							tempData.LongitudeDIR=_newChar;
    3bf4:	0022      	movs	r2, r4
    3bf6:	322d      	adds	r2, #45	; 0x2d
							CRC = CRC ^ uint8_t(_newChar); // Calculate CRC
    3bf8:	7013      	strb	r3, [r2, #0]
    3bfa:	e785      	b.n	3b08 <_ZN10GPSL80Lite6updateEv+0xf4>
					dataLength++;
    3bfc:	7a63      	ldrb	r3, [r4, #9]
					if(inputValid(_newChar))
    3bfe:	0020      	movs	r0, r4
					dataLength++;
    3c00:	3301      	adds	r3, #1
    3c02:	7263      	strb	r3, [r4, #9]
					if(inputValid(_newChar))
    3c04:	f7ff fef6 	bl	39f4 <_ZN10GPSL80Lite10inputValidEc>
    3c08:	2800      	cmp	r0, #0
    3c0a:	d100      	bne.n	3c0e <_ZN10GPSL80Lite6updateEv+0x1fa>
    3c0c:	e77c      	b.n	3b08 <_ZN10GPSL80Lite6updateEv+0xf4>
						CRC = CRC ^ uint8_t(_newChar); // Calculate CRC				
    3c0e:	0021      	movs	r1, r4
    3c10:	3153      	adds	r1, #83	; 0x53
    3c12:	7863      	ldrb	r3, [r4, #1]
    3c14:	780a      	ldrb	r2, [r1, #0]
    3c16:	405a      	eors	r2, r3
    3c18:	700a      	strb	r2, [r1, #0]
						if(_newChar == ',')
    3c1a:	2b2c      	cmp	r3, #44	; 0x2c
    3c1c:	d103      	bne.n	3c26 <_ZN10GPSL80Lite6updateEv+0x212>
							dataLength=0;
    3c1e:	2300      	movs	r3, #0
    3c20:	7263      	strb	r3, [r4, #9]
							state=READ_SAT_DATA;
    3c22:	3309      	adds	r3, #9
    3c24:	e72a      	b.n	3a7c <_ZN10GPSL80Lite6updateEv+0x68>
						else if(dataLength == 1){
    3c26:	7a62      	ldrb	r2, [r4, #9]
    3c28:	2a01      	cmp	r2, #1
    3c2a:	d000      	beq.n	3c2e <_ZN10GPSL80Lite6updateEv+0x21a>
    3c2c:	e76c      	b.n	3b08 <_ZN10GPSL80Lite6updateEv+0xf4>
							tempData.Fix=_newChar;	
    3c2e:	0022      	movs	r2, r4
    3c30:	3240      	adds	r2, #64	; 0x40
    3c32:	7013      	strb	r3, [r2, #0]
		dummy = dummy - 48;
    3c34:	001a      	movs	r2, r3
    3c36:	3a30      	subs	r2, #48	; 0x30
    3c38:	b2d2      	uxtb	r2, r2
	if(dummy > 57) // Must be A-F
    3c3a:	2b39      	cmp	r3, #57	; 0x39
    3c3c:	dd01      	ble.n	3c42 <_ZN10GPSL80Lite6updateEv+0x22e>
		dummy = dummy - 55;		
    3c3e:	3b37      	subs	r3, #55	; 0x37
    3c40:	b2da      	uxtb	r2, r3
							tempData.FixDecimal = charToInt(_newChar);			
    3c42:	0023      	movs	r3, r4
    3c44:	3341      	adds	r3, #65	; 0x41
							decimal=10;
    3c46:	701a      	strb	r2, [r3, #0]
    3c48:	e75e      	b.n	3b08 <_ZN10GPSL80Lite6updateEv+0xf4>
					dataLength++;
    3c4a:	7a63      	ldrb	r3, [r4, #9]
					if(inputValid(_newChar))
    3c4c:	0020      	movs	r0, r4
					dataLength++;
    3c4e:	3301      	adds	r3, #1
    3c50:	7263      	strb	r3, [r4, #9]
					if(inputValid(_newChar))
    3c52:	f7ff fecf 	bl	39f4 <_ZN10GPSL80Lite10inputValidEc>
    3c56:	2800      	cmp	r0, #0
    3c58:	d100      	bne.n	3c5c <_ZN10GPSL80Lite6updateEv+0x248>
    3c5a:	e755      	b.n	3b08 <_ZN10GPSL80Lite6updateEv+0xf4>
						CRC = CRC ^ uint8_t(_newChar); // Calculate CRC						
    3c5c:	0021      	movs	r1, r4
    3c5e:	3153      	adds	r1, #83	; 0x53
    3c60:	7863      	ldrb	r3, [r4, #1]
    3c62:	780a      	ldrb	r2, [r1, #0]
    3c64:	405a      	eors	r2, r3
    3c66:	700a      	strb	r2, [r1, #0]
						if(_newChar == ',')
    3c68:	2b2c      	cmp	r3, #44	; 0x2c
    3c6a:	d106      	bne.n	3c7a <_ZN10GPSL80Lite6updateEv+0x266>
							decimal=0;
    3c6c:	0022      	movs	r2, r4
							dataLength=0;
    3c6e:	2300      	movs	r3, #0
							decimal=0;
    3c70:	3255      	adds	r2, #85	; 0x55
							dataLength=0;
    3c72:	7263      	strb	r3, [r4, #9]
							decimal=0;
    3c74:	7013      	strb	r3, [r2, #0]
							state=READ_HDOP_DATA;
    3c76:	330a      	adds	r3, #10
    3c78:	e700      	b.n	3a7c <_ZN10GPSL80Lite6updateEv+0x68>
    3c7a:	0021      	movs	r1, r4
						else if(dataLength == 1){
    3c7c:	7a62      	ldrb	r2, [r4, #9]
    3c7e:	3142      	adds	r1, #66	; 0x42
    3c80:	2a01      	cmp	r2, #1
    3c82:	d108      	bne.n	3c96 <_ZN10GPSL80Lite6updateEv+0x282>
		dummy = dummy - 48;
    3c84:	001a      	movs	r2, r3
    3c86:	3a30      	subs	r2, #48	; 0x30
    3c88:	b2d2      	uxtb	r2, r2
	if(dummy > 57) // Must be A-F
    3c8a:	2b39      	cmp	r3, #57	; 0x39
    3c8c:	dd01      	ble.n	3c92 <_ZN10GPSL80Lite6updateEv+0x27e>
		dummy = dummy - 55;		
    3c8e:	3b37      	subs	r3, #55	; 0x37
    3c90:	b2da      	uxtb	r2, r3
							tempData.NumberOfSatellites = tempData.NumberOfSatellites * 10 + charToInt(_newChar);
    3c92:	700a      	strb	r2, [r1, #0]
    3c94:	e738      	b.n	3b08 <_ZN10GPSL80Lite6updateEv+0xf4>
    3c96:	220a      	movs	r2, #10
    3c98:	7808      	ldrb	r0, [r1, #0]
    3c9a:	4342      	muls	r2, r0
		dummy = dummy - 48;
    3c9c:	0018      	movs	r0, r3
    3c9e:	3830      	subs	r0, #48	; 0x30
							tempData.NumberOfSatellites = tempData.NumberOfSatellites * 10 + charToInt(_newChar);
    3ca0:	b2d2      	uxtb	r2, r2
		dummy = dummy - 48;
    3ca2:	b2c0      	uxtb	r0, r0
	if(dummy > 57) // Must be A-F
    3ca4:	2b39      	cmp	r3, #57	; 0x39
    3ca6:	dd01      	ble.n	3cac <_ZN10GPSL80Lite6updateEv+0x298>
		dummy = dummy - 55;		
    3ca8:	3b37      	subs	r3, #55	; 0x37
    3caa:	b2d8      	uxtb	r0, r3
							tempData.NumberOfSatellites = tempData.NumberOfSatellites * 10 + charToInt(_newChar);
    3cac:	1812      	adds	r2, r2, r0
    3cae:	e7f0      	b.n	3c92 <_ZN10GPSL80Lite6updateEv+0x27e>
					dataLength++;
    3cb0:	7a63      	ldrb	r3, [r4, #9]
					if(inputValid(_newChar))
    3cb2:	0020      	movs	r0, r4
					dataLength++;
    3cb4:	3301      	adds	r3, #1
    3cb6:	7263      	strb	r3, [r4, #9]
					if(inputValid(_newChar))
    3cb8:	f7ff fe9c 	bl	39f4 <_ZN10GPSL80Lite10inputValidEc>
    3cbc:	2800      	cmp	r0, #0
    3cbe:	d100      	bne.n	3cc2 <_ZN10GPSL80Lite6updateEv+0x2ae>
    3cc0:	e722      	b.n	3b08 <_ZN10GPSL80Lite6updateEv+0xf4>
						CRC = CRC ^ uint8_t(_newChar); // Calculate CRC
    3cc2:	0022      	movs	r2, r4
    3cc4:	3253      	adds	r2, #83	; 0x53
    3cc6:	7865      	ldrb	r5, [r4, #1]
    3cc8:	7813      	ldrb	r3, [r2, #0]
    3cca:	406b      	eors	r3, r5
    3ccc:	7013      	strb	r3, [r2, #0]
						if(_newChar == ',')
    3cce:	2d2c      	cmp	r5, #44	; 0x2c
    3cd0:	d104      	bne.n	3cdc <_ZN10GPSL80Lite6updateEv+0x2c8>
							dataLength=0;
    3cd2:	2300      	movs	r3, #0
    3cd4:	7263      	strb	r3, [r4, #9]
							decimal=0;
    3cd6:	7093      	strb	r3, [r2, #2]
							state=READ_ALITUDE_DATA;
    3cd8:	330b      	adds	r3, #11
    3cda:	e6cf      	b.n	3a7c <_ZN10GPSL80Lite6updateEv+0x68>
						}else if(_newChar == '.'){				
    3cdc:	2d2e      	cmp	r5, #46	; 0x2e
    3cde:	d103      	bne.n	3ce8 <_ZN10GPSL80Lite6updateEv+0x2d4>
							decimal=10;
    3ce0:	0023      	movs	r3, r4
    3ce2:	220a      	movs	r2, #10
    3ce4:	3355      	adds	r3, #85	; 0x55
    3ce6:	e7ae      	b.n	3c46 <_ZN10GPSL80Lite6updateEv+0x232>
						}else if(_newChar == '-'){				
    3ce8:	2d2d      	cmp	r5, #45	; 0x2d
    3cea:	d102      	bne.n	3cf2 <_ZN10GPSL80Lite6updateEv+0x2de>
							tempData.HDOP=-1;
    3cec:	4b38      	ldr	r3, [pc, #224]	; (3dd0 <_ZN10GPSL80Lite6updateEv+0x3bc>)
    3cee:	6463      	str	r3, [r4, #68]	; 0x44
    3cf0:	e70a      	b.n	3b08 <_ZN10GPSL80Lite6updateEv+0xf4>
							if(decimal == 0){
    3cf2:	0027      	movs	r7, r4
    3cf4:	3755      	adds	r7, #85	; 0x55
    3cf6:	783e      	ldrb	r6, [r7, #0]
    3cf8:	2e00      	cmp	r6, #0
    3cfa:	d112      	bne.n	3d22 <_ZN10GPSL80Lite6updateEv+0x30e>
								tempData.HDOP = tempData.HDOP * 10 + charToInt(_newChar);
    3cfc:	4933      	ldr	r1, [pc, #204]	; (3dcc <_ZN10GPSL80Lite6updateEv+0x3b8>)
    3cfe:	6c60      	ldr	r0, [r4, #68]	; 0x44
    3d00:	f005 fbfc 	bl	94fc <__aeabi_fmul>
    3d04:	1c06      	adds	r6, r0, #0
		dummy = dummy - 48;
    3d06:	0028      	movs	r0, r5
    3d08:	3830      	subs	r0, #48	; 0x30
    3d0a:	b2c0      	uxtb	r0, r0
	if(dummy > 57) // Must be A-F
    3d0c:	2d39      	cmp	r5, #57	; 0x39
    3d0e:	dd01      	ble.n	3d14 <_ZN10GPSL80Lite6updateEv+0x300>
		dummy = dummy - 55;		
    3d10:	3d37      	subs	r5, #55	; 0x37
    3d12:	b2e8      	uxtb	r0, r5
								tempData.HDOP = tempData.HDOP * 10 + charToInt(_newChar);
    3d14:	f005 fece 	bl	9ab4 <__aeabi_i2f>
    3d18:	1c31      	adds	r1, r6, #0
    3d1a:	f005 f86d 	bl	8df8 <__aeabi_fadd>
    3d1e:	6460      	str	r0, [r4, #68]	; 0x44
    3d20:	e6f2      	b.n	3b08 <_ZN10GPSL80Lite6updateEv+0xf4>
							}else if(decimal <= 100){
    3d22:	2e64      	cmp	r6, #100	; 0x64
    3d24:	dd00      	ble.n	3d28 <_ZN10GPSL80Lite6updateEv+0x314>
    3d26:	e6ef      	b.n	3b08 <_ZN10GPSL80Lite6updateEv+0xf4>
		dummy = dummy - 48;
    3d28:	0028      	movs	r0, r5
								tempData.HDOP = tempData.HDOP + ((float)charToInt(_newChar) / (float)decimal);
    3d2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
		dummy = dummy - 48;
    3d2c:	3830      	subs	r0, #48	; 0x30
								tempData.HDOP = tempData.HDOP + ((float)charToInt(_newChar) / (float)decimal);
    3d2e:	9301      	str	r3, [sp, #4]
		dummy = dummy - 48;
    3d30:	b2c0      	uxtb	r0, r0
	if(dummy > 57) // Must be A-F
    3d32:	2d39      	cmp	r5, #57	; 0x39
    3d34:	dd01      	ble.n	3d3a <_ZN10GPSL80Lite6updateEv+0x326>
		dummy = dummy - 55;		
    3d36:	3d37      	subs	r5, #55	; 0x37
    3d38:	b2e8      	uxtb	r0, r5
								tempData.HDOP = tempData.HDOP + ((float)charToInt(_newChar) / (float)decimal);
    3d3a:	f005 ff0b 	bl	9b54 <__aeabi_ui2f>
    3d3e:	1c05      	adds	r5, r0, #0
    3d40:	0030      	movs	r0, r6
    3d42:	f005 ff07 	bl	9b54 <__aeabi_ui2f>
    3d46:	1c01      	adds	r1, r0, #0
    3d48:	1c28      	adds	r0, r5, #0
    3d4a:	f005 f9e7 	bl	911c <__aeabi_fdiv>
    3d4e:	9901      	ldr	r1, [sp, #4]
    3d50:	f005 f852 	bl	8df8 <__aeabi_fadd>
    3d54:	6460      	str	r0, [r4, #68]	; 0x44
								if(decimal != 100)
    3d56:	2e64      	cmp	r6, #100	; 0x64
    3d58:	d100      	bne.n	3d5c <_ZN10GPSL80Lite6updateEv+0x348>
    3d5a:	e6d5      	b.n	3b08 <_ZN10GPSL80Lite6updateEv+0xf4>
									decimal = decimal * 10;
    3d5c:	230a      	movs	r3, #10
    3d5e:	435e      	muls	r6, r3
    3d60:	703e      	strb	r6, [r7, #0]
    3d62:	e6d1      	b.n	3b08 <_ZN10GPSL80Lite6updateEv+0xf4>
					dataLength++;
    3d64:	7a63      	ldrb	r3, [r4, #9]
					if(inputValid(_newChar))
    3d66:	0020      	movs	r0, r4
					dataLength++;
    3d68:	3301      	adds	r3, #1
    3d6a:	7263      	strb	r3, [r4, #9]
					if(inputValid(_newChar))
    3d6c:	f7ff fe42 	bl	39f4 <_ZN10GPSL80Lite10inputValidEc>
    3d70:	2800      	cmp	r0, #0
    3d72:	d100      	bne.n	3d76 <_ZN10GPSL80Lite6updateEv+0x362>
    3d74:	e6c8      	b.n	3b08 <_ZN10GPSL80Lite6updateEv+0xf4>
						CRC = CRC ^ uint8_t(_newChar); // Calculate CRC
    3d76:	0022      	movs	r2, r4
    3d78:	3253      	adds	r2, #83	; 0x53
    3d7a:	7865      	ldrb	r5, [r4, #1]
    3d7c:	7813      	ldrb	r3, [r2, #0]
    3d7e:	406b      	eors	r3, r5
    3d80:	7013      	strb	r3, [r2, #0]
						if(_newChar == ',')
    3d82:	2d2c      	cmp	r5, #44	; 0x2c
    3d84:	d103      	bne.n	3d8e <_ZN10GPSL80Lite6updateEv+0x37a>
							dataLength=0;
    3d86:	2300      	movs	r3, #0
    3d88:	7263      	strb	r3, [r4, #9]
							state=READ_ALITUDE_UNIT_DATA;
    3d8a:	330c      	adds	r3, #12
    3d8c:	e676      	b.n	3a7c <_ZN10GPSL80Lite6updateEv+0x68>
						}else if(_newChar == '.'){				
    3d8e:	2d2e      	cmp	r5, #46	; 0x2e
    3d90:	d0a6      	beq.n	3ce0 <_ZN10GPSL80Lite6updateEv+0x2cc>
						}else if(_newChar == '-'){				
    3d92:	2d2d      	cmp	r5, #45	; 0x2d
    3d94:	d102      	bne.n	3d9c <_ZN10GPSL80Lite6updateEv+0x388>
							tempData.Altitude=-1;
    3d96:	4b0e      	ldr	r3, [pc, #56]	; (3dd0 <_ZN10GPSL80Lite6updateEv+0x3bc>)
    3d98:	64a3      	str	r3, [r4, #72]	; 0x48
    3d9a:	e6b5      	b.n	3b08 <_ZN10GPSL80Lite6updateEv+0xf4>
							if(decimal == 0){
    3d9c:	0027      	movs	r7, r4
    3d9e:	3755      	adds	r7, #85	; 0x55
    3da0:	783e      	ldrb	r6, [r7, #0]
    3da2:	2e00      	cmp	r6, #0
    3da4:	d116      	bne.n	3dd4 <_ZN10GPSL80Lite6updateEv+0x3c0>
								tempData.Altitude = tempData.Altitude * 10 + charToInt(_newChar);
    3da6:	4909      	ldr	r1, [pc, #36]	; (3dcc <_ZN10GPSL80Lite6updateEv+0x3b8>)
    3da8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    3daa:	f005 fba7 	bl	94fc <__aeabi_fmul>
    3dae:	1c06      	adds	r6, r0, #0
		dummy = dummy - 48;
    3db0:	0028      	movs	r0, r5
    3db2:	3830      	subs	r0, #48	; 0x30
    3db4:	b2c0      	uxtb	r0, r0
	if(dummy > 57) // Must be A-F
    3db6:	2d39      	cmp	r5, #57	; 0x39
    3db8:	dd01      	ble.n	3dbe <_ZN10GPSL80Lite6updateEv+0x3aa>
		dummy = dummy - 55;		
    3dba:	3d37      	subs	r5, #55	; 0x37
    3dbc:	b2e8      	uxtb	r0, r5
								tempData.Altitude = tempData.Altitude * 10 + charToInt(_newChar);
    3dbe:	f005 fe79 	bl	9ab4 <__aeabi_i2f>
    3dc2:	1c31      	adds	r1, r6, #0
    3dc4:	f005 f818 	bl	8df8 <__aeabi_fadd>
    3dc8:	64a0      	str	r0, [r4, #72]	; 0x48
    3dca:	e69d      	b.n	3b08 <_ZN10GPSL80Lite6updateEv+0xf4>
    3dcc:	41200000 	.word	0x41200000
    3dd0:	bf800000 	.word	0xbf800000
							}else if(decimal <= 100){
    3dd4:	2e64      	cmp	r6, #100	; 0x64
    3dd6:	dd00      	ble.n	3dda <_ZN10GPSL80Lite6updateEv+0x3c6>
    3dd8:	e696      	b.n	3b08 <_ZN10GPSL80Lite6updateEv+0xf4>
		dummy = dummy - 48;
    3dda:	0028      	movs	r0, r5
								tempData.Altitude = tempData.Altitude + ((float)charToInt(_newChar) / (float)decimal);
    3ddc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		dummy = dummy - 48;
    3dde:	3830      	subs	r0, #48	; 0x30
								tempData.Altitude = tempData.Altitude + ((float)charToInt(_newChar) / (float)decimal);
    3de0:	9301      	str	r3, [sp, #4]
		dummy = dummy - 48;
    3de2:	b2c0      	uxtb	r0, r0
	if(dummy > 57) // Must be A-F
    3de4:	2d39      	cmp	r5, #57	; 0x39
    3de6:	dd01      	ble.n	3dec <_ZN10GPSL80Lite6updateEv+0x3d8>
		dummy = dummy - 55;		
    3de8:	3d37      	subs	r5, #55	; 0x37
    3dea:	b2e8      	uxtb	r0, r5
								tempData.Altitude = tempData.Altitude + ((float)charToInt(_newChar) / (float)decimal);
    3dec:	f005 feb2 	bl	9b54 <__aeabi_ui2f>
    3df0:	1c05      	adds	r5, r0, #0
    3df2:	0030      	movs	r0, r6
    3df4:	f005 feae 	bl	9b54 <__aeabi_ui2f>
    3df8:	1c01      	adds	r1, r0, #0
    3dfa:	1c28      	adds	r0, r5, #0
    3dfc:	f005 f98e 	bl	911c <__aeabi_fdiv>
    3e00:	9901      	ldr	r1, [sp, #4]
    3e02:	f004 fff9 	bl	8df8 <__aeabi_fadd>
    3e06:	64a0      	str	r0, [r4, #72]	; 0x48
    3e08:	e7a5      	b.n	3d56 <_ZN10GPSL80Lite6updateEv+0x342>
					dataLength++;
    3e0a:	7a63      	ldrb	r3, [r4, #9]
					if(inputValid(_newChar))
    3e0c:	0020      	movs	r0, r4
					dataLength++;
    3e0e:	3301      	adds	r3, #1
    3e10:	7263      	strb	r3, [r4, #9]
					if(inputValid(_newChar))
    3e12:	f7ff fdef 	bl	39f4 <_ZN10GPSL80Lite10inputValidEc>
    3e16:	2800      	cmp	r0, #0
    3e18:	d100      	bne.n	3e1c <_ZN10GPSL80Lite6updateEv+0x408>
    3e1a:	e675      	b.n	3b08 <_ZN10GPSL80Lite6updateEv+0xf4>
						CRC = CRC ^ uint8_t(_newChar); // Calculate CRC						
    3e1c:	0021      	movs	r1, r4
    3e1e:	3153      	adds	r1, #83	; 0x53
    3e20:	7863      	ldrb	r3, [r4, #1]
    3e22:	780a      	ldrb	r2, [r1, #0]
    3e24:	405a      	eors	r2, r3
    3e26:	700a      	strb	r2, [r1, #0]
						if(_newChar == ',')
    3e28:	2b2c      	cmp	r3, #44	; 0x2c
    3e2a:	d103      	bne.n	3e34 <_ZN10GPSL80Lite6updateEv+0x420>
							dataLength=0;
    3e2c:	2300      	movs	r3, #0
    3e2e:	7263      	strb	r3, [r4, #9]
							state=WAIT_FOR_CRC;
    3e30:	330d      	adds	r3, #13
    3e32:	e623      	b.n	3a7c <_ZN10GPSL80Lite6updateEv+0x68>
						}else if(dataLength == 1){
    3e34:	7a62      	ldrb	r2, [r4, #9]
    3e36:	2a01      	cmp	r2, #1
    3e38:	d000      	beq.n	3e3c <_ZN10GPSL80Lite6updateEv+0x428>
    3e3a:	e665      	b.n	3b08 <_ZN10GPSL80Lite6updateEv+0xf4>
							tempData.AltitudeUnit=_newChar;				
    3e3c:	0022      	movs	r2, r4
    3e3e:	324c      	adds	r2, #76	; 0x4c
    3e40:	e6da      	b.n	3bf8 <_ZN10GPSL80Lite6updateEv+0x1e4>
					dataLength++;
    3e42:	7a63      	ldrb	r3, [r4, #9]
					if(inputValid(_newChar))
    3e44:	0020      	movs	r0, r4
					dataLength++;
    3e46:	3301      	adds	r3, #1
    3e48:	7263      	strb	r3, [r4, #9]
					if(inputValid(_newChar))
    3e4a:	f7ff fdd3 	bl	39f4 <_ZN10GPSL80Lite10inputValidEc>
    3e4e:	2800      	cmp	r0, #0
    3e50:	d100      	bne.n	3e54 <_ZN10GPSL80Lite6updateEv+0x440>
    3e52:	e659      	b.n	3b08 <_ZN10GPSL80Lite6updateEv+0xf4>
						if(_newChar == '*')
    3e54:	7863      	ldrb	r3, [r4, #1]
    3e56:	2b2a      	cmp	r3, #42	; 0x2a
    3e58:	d106      	bne.n	3e68 <_ZN10GPSL80Lite6updateEv+0x454>
							CRC_RESULT = 0;
    3e5a:	0022      	movs	r2, r4
							dataLength=0;
    3e5c:	2300      	movs	r3, #0
							CRC_RESULT = 0;
    3e5e:	3254      	adds	r2, #84	; 0x54
							dataLength=0;
    3e60:	7263      	strb	r3, [r4, #9]
							CRC_RESULT = 0;
    3e62:	7013      	strb	r3, [r2, #0]
							state=READ_CRC_1;
    3e64:	330e      	adds	r3, #14
    3e66:	e609      	b.n	3a7c <_ZN10GPSL80Lite6updateEv+0x68>
							CRC = CRC ^ uint8_t(_newChar); // Calculate CRC
    3e68:	0022      	movs	r2, r4
    3e6a:	3253      	adds	r2, #83	; 0x53
    3e6c:	7811      	ldrb	r1, [r2, #0]
    3e6e:	404b      	eors	r3, r1
    3e70:	e6c2      	b.n	3bf8 <_ZN10GPSL80Lite6updateEv+0x1e4>
	if(dummy > 57) // Must be A-F
    3e72:	23ff      	movs	r3, #255	; 0xff
    3e74:	401a      	ands	r2, r3
		dummy = dummy - 48;
    3e76:	000b      	movs	r3, r1
    3e78:	3b30      	subs	r3, #48	; 0x30
    3e7a:	b2db      	uxtb	r3, r3
	if(dummy > 57) // Must be A-F
    3e7c:	2a39      	cmp	r2, #57	; 0x39
    3e7e:	dd01      	ble.n	3e84 <_ZN10GPSL80Lite6updateEv+0x470>
		dummy = dummy - 55;		
    3e80:	3937      	subs	r1, #55	; 0x37
    3e82:	b2cb      	uxtb	r3, r1
 					CRC_RESULT += charToInt(_newChar)*16;
    3e84:	0022      	movs	r2, r4
    3e86:	3254      	adds	r2, #84	; 0x54
    3e88:	7811      	ldrb	r1, [r2, #0]
    3e8a:	011b      	lsls	r3, r3, #4
    3e8c:	18cb      	adds	r3, r1, r3
    3e8e:	7013      	strb	r3, [r2, #0]
					state=READ_CRC_2;
    3e90:	230f      	movs	r3, #15
    3e92:	e5f3      	b.n	3a7c <_ZN10GPSL80Lite6updateEv+0x68>
	if(dummy > 57) // Must be A-F
    3e94:	23ff      	movs	r3, #255	; 0xff
    3e96:	401a      	ands	r2, r3
		dummy = dummy - 48;
    3e98:	000b      	movs	r3, r1
    3e9a:	3b30      	subs	r3, #48	; 0x30
    3e9c:	b2db      	uxtb	r3, r3
	if(dummy > 57) // Must be A-F
    3e9e:	2a39      	cmp	r2, #57	; 0x39
    3ea0:	dd01      	ble.n	3ea6 <_ZN10GPSL80Lite6updateEv+0x492>
		dummy = dummy - 55;		
    3ea2:	3937      	subs	r1, #55	; 0x37
    3ea4:	b2cb      	uxtb	r3, r1
					CRC_RESULT += charToInt(_newChar);
    3ea6:	0022      	movs	r2, r4
    3ea8:	3254      	adds	r2, #84	; 0x54
    3eaa:	7811      	ldrb	r1, [r2, #0]
    3eac:	1859      	adds	r1, r3, r1
					if(CRC_RESULT == CRC) // check if CRC is ok.
    3eae:	0023      	movs	r3, r4
					CRC_RESULT += charToInt(_newChar);
    3eb0:	b2c9      	uxtb	r1, r1
    3eb2:	7011      	strb	r1, [r2, #0]
					if(CRC_RESULT == CRC) // check if CRC is ok.
    3eb4:	3353      	adds	r3, #83	; 0x53
    3eb6:	781b      	ldrb	r3, [r3, #0]
    3eb8:	428b      	cmp	r3, r1
    3eba:	d108      	bne.n	3ece <_ZN10GPSL80Lite6updateEv+0x4ba>
						SerialAUX->println(" CRC OK, Updating GPS data");
    3ebc:	4b08      	ldr	r3, [pc, #32]	; (3ee0 <_ZN10GPSL80Lite6updateEv+0x4cc>)
    3ebe:	4909      	ldr	r1, [pc, #36]	; (3ee4 <_ZN10GPSL80Lite6updateEv+0x4d0>)
    3ec0:	6818      	ldr	r0, [r3, #0]
    3ec2:	f002 f9e1 	bl	6288 <_ZN5Print7printlnEPKc>
						updateData();	
    3ec6:	0020      	movs	r0, r4
    3ec8:	f7ff fc1a 	bl	3700 <_ZN10GPSL80Lite10updateDataEv>
    3ecc:	e5eb      	b.n	3aa6 <_ZN10GPSL80Lite6updateEv+0x92>
						if(CRCErrors < 255)
    3ece:	0022      	movs	r2, r4
    3ed0:	3251      	adds	r2, #81	; 0x51
    3ed2:	7813      	ldrb	r3, [r2, #0]
    3ed4:	2bff      	cmp	r3, #255	; 0xff
    3ed6:	d100      	bne.n	3eda <_ZN10GPSL80Lite6updateEv+0x4c6>
    3ed8:	e5e5      	b.n	3aa6 <_ZN10GPSL80Lite6updateEv+0x92>
							CRCErrors++;
    3eda:	3301      	adds	r3, #1
    3edc:	7013      	strb	r3, [r2, #0]
    3ede:	e5e2      	b.n	3aa6 <_ZN10GPSL80Lite6updateEv+0x92>
    3ee0:	2000014c 	.word	0x2000014c
    3ee4:	0000b958 	.word	0x0000b958

00003ee8 <_Z6hwInitv>:

// Must be freed up in variant.cpp or alternative use Serial1 (defualt on mkrzero and uses same pins)
Uart *SerialAUX = NULL;
//Uart auxSerial(&sercom5, auxRXPin, auxTXPin, SERCOM_RX_PAD_3, UART_TX_PAD_2);                                // Create the new UART instance for auxillary serial.

void hwInit() {
    3ee8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}


	// Init Pins for Power:
	pinMode(powerOnPin, OUTPUT);
    3eea:	2101      	movs	r1, #1
    3eec:	2000      	movs	r0, #0
    3eee:	f003 fe6b 	bl	7bc8 <pinMode>
	digitalWrite(powerOnPin, LOW); // LOW = OFF
    3ef2:	2100      	movs	r1, #0
    3ef4:	0008      	movs	r0, r1
    3ef6:	f003 feb3 	bl	7c60 <digitalWrite>

	// Init pins for analog voltage read:  PRICE ~70uA (or not)
	pinMode(analogVinPin, INPUT);
    3efa:	2100      	movs	r1, #0
    3efc:	2013      	movs	r0, #19
    3efe:	f003 fe63 	bl	7bc8 <pinMode>
	pinMode(analogVbatPin, INPUT);
    3f02:	2100      	movs	r1, #0
    3f04:	2010      	movs	r0, #16
    3f06:	f003 fe5f 	bl	7bc8 <pinMode>
	analogReference(AR_INTERNAL1V0); // Use internal 1V as voltage reference.
    3f0a:	2003      	movs	r0, #3
    3f0c:	f003 fdc4 	bl	7a98 <analogReference>

	#if PCB_VERSION == 11
		pinMode(analogVin5VPin, INPUT);
    3f10:	2100      	movs	r1, #0
    3f12:	200f      	movs	r0, #15
    3f14:	f003 fe58 	bl	7bc8 <pinMode>
	#endif

	
	// Init pins for GPS: Price: ~0uA
	pinMode(gPSPowerOnPin, OUTPUT);
    3f18:	2101      	movs	r1, #1
    3f1a:	2014      	movs	r0, #20
    3f1c:	f003 fe54 	bl	7bc8 <pinMode>
	digitalWrite(gPSPowerOnPin, LOW);  // High=Off, Low= On
    3f20:	2100      	movs	r1, #0
    3f22:	2014      	movs	r0, #20
    3f24:	f003 fe9c 	bl	7c60 <digitalWrite>
	#if PCB_VERSION == 11
		pinMode(GPSBackupPowerPin, OUTPUT);
    3f28:	2101      	movs	r1, #1
    3f2a:	201d      	movs	r0, #29
    3f2c:	f003 fe4c 	bl	7bc8 <pinMode>
		digitalWrite(GPSBackupPowerPin, HIGH);  // High= backup power on, LOW=Backup power off.
    3f30:	2101      	movs	r1, #1
    3f32:	201d      	movs	r0, #29
    3f34:	f003 fe94 	bl	7c60 <digitalWrite>
	#endif

	delay(2000);	

	// Now that the GPS has been power cycled, we know it is talking 9600.
	SerialGPS = new Uart(&sercom2, GPSRxPin, GPSTxPin, SERCOM_RX_PAD_1, UART_TX_PAD_0);   // Create the new UART instance for the GPS module
    3f38:	268f      	movs	r6, #143	; 0x8f
	delay(2000);	
    3f3a:	20fa      	movs	r0, #250	; 0xfa
	SerialGPS = new Uart(&sercom2, GPSRxPin, GPSTxPin, SERCOM_RX_PAD_1, UART_TX_PAD_0);   // Create the new UART instance for the GPS module
    3f3c:	00b6      	lsls	r6, r6, #2
	delay(2000);	
    3f3e:	00c0      	lsls	r0, r0, #3
    3f40:	f002 f91a 	bl	6178 <delay>
	SerialGPS = new Uart(&sercom2, GPSRxPin, GPSTxPin, SERCOM_RX_PAD_1, UART_TX_PAD_0);   // Create the new UART instance for the GPS module
    3f44:	0030      	movs	r0, r6
    3f46:	f002 f953 	bl	61f0 <_Znwj>
    3f4a:	2401      	movs	r4, #1
    3f4c:	2500      	movs	r5, #0
    3f4e:	0007      	movs	r7, r0
    3f50:	220c      	movs	r2, #12
    3f52:	9501      	str	r5, [sp, #4]
    3f54:	9400      	str	r4, [sp, #0]
    3f56:	230b      	movs	r3, #11
    3f58:	493a      	ldr	r1, [pc, #232]	; (4044 <_Z6hwInitv+0x15c>)
    3f5a:	f002 fbcf 	bl	66fc <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
    3f5e:	4b3a      	ldr	r3, [pc, #232]	; (4048 <_Z6hwInitv+0x160>)

	// Init for FRSKY SPORT:
	pinMode(fryskyInvertPin, OUTPUT);    // THIS LINE MAKES COM20 UNIT STALL HERE!!!!
    3f60:	0021      	movs	r1, r4
    3f62:	2002      	movs	r0, #2
	SerialGPS = new Uart(&sercom2, GPSRxPin, GPSTxPin, SERCOM_RX_PAD_1, UART_TX_PAD_0);   // Create the new UART instance for the GPS module
    3f64:	601f      	str	r7, [r3, #0]
	pinMode(fryskyInvertPin, OUTPUT);    // THIS LINE MAKES COM20 UNIT STALL HERE!!!!
    3f66:	f003 fe2f 	bl	7bc8 <pinMode>
	digitalWrite(fryskyInvertPin, HIGH);
    3f6a:	0021      	movs	r1, r4
    3f6c:	2002      	movs	r0, #2
    3f6e:	f003 fe77 	bl	7c60 <digitalWrite>

	// Init LED 2
	pinMode(led2Pin, OUTPUT);
    3f72:	0021      	movs	r1, r4
    3f74:	2015      	movs	r0, #21
    3f76:	f003 fe27 	bl	7bc8 <pinMode>
	digitalWrite(led2Pin, HIGH);  // Low=off, High=On
    3f7a:	0021      	movs	r1, r4
    3f7c:	2015      	movs	r0, #21
    3f7e:	f003 fe6f 	bl	7c60 <digitalWrite>

	
	// Init the RCin SBUS pins: price 0uA
	SerialSBUS = new Uart(&sercom4, sBUSRXPin, sBUSRXPin, SERCOM_RX_PAD_1, UART_TX_PAD_0);   // Create the new UART instance for the GPS module
    3f82:	0030      	movs	r0, r6
    3f84:	f002 f934 	bl	61f0 <_Znwj>
    3f88:	2321      	movs	r3, #33	; 0x21
    3f8a:	0007      	movs	r7, r0
    3f8c:	001a      	movs	r2, r3
    3f8e:	9501      	str	r5, [sp, #4]
    3f90:	9400      	str	r4, [sp, #0]
    3f92:	492e      	ldr	r1, [pc, #184]	; (404c <_Z6hwInitv+0x164>)
    3f94:	f002 fbb2 	bl	66fc <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
    3f98:	4b2d      	ldr	r3, [pc, #180]	; (4050 <_Z6hwInitv+0x168>)
	pinMode(sBUSInvertPin, OUTPUT);
    3f9a:	0021      	movs	r1, r4
    3f9c:	2012      	movs	r0, #18
	SerialSBUS = new Uart(&sercom4, sBUSRXPin, sBUSRXPin, SERCOM_RX_PAD_1, UART_TX_PAD_0);   // Create the new UART instance for the GPS module
    3f9e:	601f      	str	r7, [r3, #0]
	pinMode(sBUSInvertPin, OUTPUT);
    3fa0:	f003 fe12 	bl	7bc8 <pinMode>
	digitalWrite(sBUSInvertPin, LOW);
    3fa4:	0029      	movs	r1, r5
    3fa6:	2012      	movs	r0, #18
    3fa8:	f003 fe5a 	bl	7c60 <digitalWrite>
	
	
	// Init SPI and pins used for Radio price 0uA
	pinMode(chipSelectPin, OUTPUT);
    3fac:	0021      	movs	r1, r4
    3fae:	0020      	movs	r0, r4
    3fb0:	f003 fe0a 	bl	7bc8 <pinMode>
	digitalWrite(chipSelectPin, LOW);
    3fb4:	0029      	movs	r1, r5
    3fb6:	0020      	movs	r0, r4
    3fb8:	f003 fe52 	bl	7c60 <digitalWrite>
	pinMode(resetPin, OUTPUT);
    3fbc:	0021      	movs	r1, r4
    3fbe:	2004      	movs	r0, #4
    3fc0:	f003 fe02 	bl	7bc8 <pinMode>
	digitalWrite(resetPin, LOW);
    3fc4:	0029      	movs	r1, r5
    3fc6:	2004      	movs	r0, #4
    3fc8:	f003 fe4a 	bl	7c60 <digitalWrite>
	pinMode(rxEnPin, OUTPUT);
    3fcc:	0021      	movs	r1, r4
    3fce:	2011      	movs	r0, #17
    3fd0:	f003 fdfa 	bl	7bc8 <pinMode>
	digitalWrite(rxEnPin, HIGH); // RX enabled by default.
    3fd4:	0021      	movs	r1, r4
    3fd6:	2011      	movs	r0, #17
    3fd8:	f003 fe42 	bl	7c60 <digitalWrite>
	pinMode(txEnPin, OUTPUT);
    3fdc:	0021      	movs	r1, r4
    3fde:	2020      	movs	r0, #32
    3fe0:	f003 fdf2 	bl	7bc8 <pinMode>
	digitalWrite(txEnPin, LOW);
    3fe4:	0029      	movs	r1, r5
    3fe6:	2020      	movs	r0, #32
    3fe8:	f003 fe3a 	bl	7c60 <digitalWrite>
	pinMode(busyPin, INPUT);
    3fec:	0029      	movs	r1, r5
    3fee:	2005      	movs	r0, #5
    3ff0:	f003 fdea 	bl	7bc8 <pinMode>
	pinMode(dio1Pin, INPUT);
    3ff4:	0029      	movs	r1, r5
    3ff6:	2019      	movs	r0, #25
    3ff8:	f003 fde6 	bl	7bc8 <pinMode>

	// Init Baro
	#if PCB_VERSION == 11
		pinMode(Baro_chipSelectPin, OUTPUT);
    3ffc:	0021      	movs	r1, r4
    3ffe:	2018      	movs	r0, #24
    4000:	f003 fde2 	bl	7bc8 <pinMode>
		digitalWrite(Baro_chipSelectPin, HIGH); // Not active!
    4004:	0021      	movs	r1, r4
    4006:	2018      	movs	r0, #24
    4008:	f003 fe2a 	bl	7c60 <digitalWrite>
	#endif
	
	// Init Safety switch and LED:
	#if PCB_VERSION == 11
		pinMode(SaftySwitchPin, INPUT);
    400c:	0029      	movs	r1, r5
    400e:	201a      	movs	r0, #26
    4010:	f003 fdda 	bl	7bc8 <pinMode>
		pinMode(SaftyLEDPin, OUTPUT);
    4014:	0021      	movs	r1, r4
    4016:	201e      	movs	r0, #30
    4018:	f003 fdd6 	bl	7bc8 <pinMode>
		digitalWrite(SaftyLEDPin, LOW);
    401c:	0029      	movs	r1, r5
    401e:	201e      	movs	r0, #30
    4020:	f003 fe1e 	bl	7c60 <digitalWrite>
	#endif
	
	// Make SerialAUX Uart:
	SerialAUX = new Uart(&sercom5, auxRXPin, auxTXPin, SERCOM_RX_PAD_3, UART_TX_PAD_2);   // Create the new UART instance for the AUX serial port
    4024:	0030      	movs	r0, r6
    4026:	f002 f8e3 	bl	61f0 <_Znwj>
    402a:	2303      	movs	r3, #3
    402c:	0005      	movs	r5, r0
    402e:	9300      	str	r3, [sp, #0]
    4030:	9401      	str	r4, [sp, #4]
    4032:	330b      	adds	r3, #11
    4034:	220d      	movs	r2, #13
    4036:	4907      	ldr	r1, [pc, #28]	; (4054 <_Z6hwInitv+0x16c>)
    4038:	f002 fb60 	bl	66fc <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
    403c:	4b06      	ldr	r3, [pc, #24]	; (4058 <_Z6hwInitv+0x170>)
    403e:	601d      	str	r5, [r3, #0]
	
}
    4040:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4042:	46c0      	nop			; (mov r8, r8)
    4044:	200008b8 	.word	0x200008b8
    4048:	20000150 	.word	0x20000150
    404c:	200008c0 	.word	0x200008c0
    4050:	20000154 	.word	0x20000154
    4054:	200008c4 	.word	0x200008c4
    4058:	2000014c 	.word	0x2000014c

0000405c <SERCOM2_Handler>:
		
	// Attach the interrupt handler to the SERCOM
void SERCOM2_Handler(){
    405c:	b510      	push	{r4, lr}
	SerialGPS->IrqHandler();
    405e:	4b02      	ldr	r3, [pc, #8]	; (4068 <SERCOM2_Handler+0xc>)
    4060:	6818      	ldr	r0, [r3, #0]
    4062:	f002 fbb6 	bl	67d2 <_ZN4Uart10IrqHandlerEv>
}
    4066:	bd10      	pop	{r4, pc}
    4068:	20000150 	.word	0x20000150

0000406c <SERCOM3_Handler>:

void SERCOM3_Handler(){
    406c:	b510      	push	{r4, lr}
	SerialfrskySPort->IrqHandler();
    406e:	4b02      	ldr	r3, [pc, #8]	; (4078 <SERCOM3_Handler+0xc>)
    4070:	6818      	ldr	r0, [r3, #0]
    4072:	f002 fbae 	bl	67d2 <_ZN4Uart10IrqHandlerEv>
}
    4076:	bd10      	pop	{r4, pc}
    4078:	20000158 	.word	0x20000158

0000407c <SERCOM4_Handler>:
	
void SERCOM4_Handler(){
    407c:	b510      	push	{r4, lr}
	SerialSBUS->IrqHandler();
    407e:	4b02      	ldr	r3, [pc, #8]	; (4088 <SERCOM4_Handler+0xc>)
    4080:	6818      	ldr	r0, [r3, #0]
    4082:	f002 fba6 	bl	67d2 <_ZN4Uart10IrqHandlerEv>
}
    4086:	bd10      	pop	{r4, pc}
    4088:	20000154 	.word	0x20000154

0000408c <SERCOM5_Handler>:
	
void SERCOM5_Handler(){
    408c:	b510      	push	{r4, lr}
	SerialAUX->IrqHandler();
    408e:	4b02      	ldr	r3, [pc, #8]	; (4098 <SERCOM5_Handler+0xc>)
    4090:	6818      	ldr	r0, [r3, #0]
    4092:	f002 fb9e 	bl	67d2 <_ZN4Uart10IrqHandlerEv>
}
    4096:	bd10      	pop	{r4, pc}
    4098:	2000014c 	.word	0x2000014c

0000409c <_Z17getBatteryVoltagev>:

float getBatteryVoltage(void){
    409c:	b510      	push	{r4, lr}
	#if PCB_VERSION == 10
		return ((((float)analogRead(analogVbatPin))*4.9)/1024.0);
	#elif PCB_VERSION == 11 
		return ((((float)analogRead(analogVbatPin))*5.7)/1024.0); // R1=470k R2=100k; Vinput=R2/(R1+R2)*Vbat = 100k/570k*Vbat----- Vbat=AnalogRead/1024*1V*(570k/100k) = AR/1024*5.7
    409e:	2010      	movs	r0, #16
    40a0:	f003 fd2c 	bl	7afc <analogRead>
    40a4:	f005 fd56 	bl	9b54 <__aeabi_ui2f>
    40a8:	f007 f812 	bl	b0d0 <__aeabi_f2d>
    40ac:	4a05      	ldr	r2, [pc, #20]	; (40c4 <_Z17getBatteryVoltagev+0x28>)
    40ae:	4b06      	ldr	r3, [pc, #24]	; (40c8 <_Z17getBatteryVoltagev+0x2c>)
    40b0:	f006 f9ca 	bl	a448 <__aeabi_dmul>
    40b4:	2200      	movs	r2, #0
    40b6:	4b05      	ldr	r3, [pc, #20]	; (40cc <_Z17getBatteryVoltagev+0x30>)
    40b8:	f006 f9c6 	bl	a448 <__aeabi_dmul>
    40bc:	f007 f85a 	bl	b174 <__aeabi_d2f>
	#else
		#error What the fuck
	#endif	
}
    40c0:	bd10      	pop	{r4, pc}
    40c2:	46c0      	nop			; (mov r8, r8)
    40c4:	cccccccd 	.word	0xcccccccd
    40c8:	4016cccc 	.word	0x4016cccc
    40cc:	3f500000 	.word	0x3f500000

000040d0 <_Z15getInputVoltagev>:

float getInputVoltage(void){
    40d0:	b510      	push	{r4, lr}
	#if PCB_VERSION == 10
		return 0;
	#elif PCB_VERSION == 11 
		return ((((float)analogRead(analogVinPin))*11)/1024.0); 
    40d2:	2013      	movs	r0, #19
    40d4:	f003 fd12 	bl	7afc <analogRead>
    40d8:	f005 fd3c 	bl	9b54 <__aeabi_ui2f>
    40dc:	4903      	ldr	r1, [pc, #12]	; (40ec <_Z15getInputVoltagev+0x1c>)
    40de:	f005 fa0d 	bl	94fc <__aeabi_fmul>
    40e2:	21ea      	movs	r1, #234	; 0xea
    40e4:	0589      	lsls	r1, r1, #22
    40e6:	f005 fa09 	bl	94fc <__aeabi_fmul>
	#endif	
}
    40ea:	bd10      	pop	{r4, pc}
    40ec:	41300000 	.word	0x41300000

000040f0 <_Z17getInput5VVoltagev>:

float getInput5VVoltage(void){
    40f0:	b510      	push	{r4, lr}
	#if PCB_VERSION == 11
		return ((((float)analogRead(analogVin5VPin))*11)/1024.0);
    40f2:	200f      	movs	r0, #15
    40f4:	f003 fd02 	bl	7afc <analogRead>
    40f8:	f005 fd2c 	bl	9b54 <__aeabi_ui2f>
    40fc:	4903      	ldr	r1, [pc, #12]	; (410c <_Z17getInput5VVoltagev+0x1c>)
    40fe:	f005 f9fd 	bl	94fc <__aeabi_fmul>
    4102:	21ea      	movs	r1, #234	; 0xea
    4104:	0589      	lsls	r1, r1, #22
    4106:	f005 f9f9 	bl	94fc <__aeabi_fmul>
	#endif
}
    410a:	bd10      	pop	{r4, pc}
    410c:	41300000 	.word	0x41300000

00004110 <_Z7PowerONv>:

void PowerON(void){
    4110:	b510      	push	{r4, lr}
	digitalWrite(powerOnPin, HIGH); // LOW = OFF
    4112:	2101      	movs	r1, #1
    4114:	2000      	movs	r0, #0
    4116:	f003 fda3 	bl	7c60 <digitalWrite>
}
    411a:	bd10      	pop	{r4, pc}

0000411c <_Z8PowerOFFv>:

void PowerOFF(void){
	digitalWrite(powerOnPin, LOW); // LOW = OFF
    411c:	2100      	movs	r1, #0
void PowerOFF(void){
    411e:	b510      	push	{r4, lr}
	digitalWrite(powerOnPin, LOW); // LOW = OFF
    4120:	0008      	movs	r0, r1
    4122:	f003 fd9d 	bl	7c60 <digitalWrite>
}
    4126:	bd10      	pop	{r4, pc}

00004128 <_Z10PowerONGPSv>:

void PowerONGPS(void){
    4128:	b510      	push	{r4, lr}
	digitalWrite(gPSPowerOnPin, LOW);  // High=Off, Low= On
    412a:	2100      	movs	r1, #0
    412c:	2014      	movs	r0, #20
    412e:	f003 fd97 	bl	7c60 <digitalWrite>
}
    4132:	bd10      	pop	{r4, pc}

00004134 <_Z11PowerOFFGPSv>:
	
void PowerOFFGPS(void){
    4134:	b510      	push	{r4, lr}
	digitalWrite(gPSPowerOnPin, HIGH);  // High=Off, Low= On
    4136:	2101      	movs	r1, #1
    4138:	2014      	movs	r0, #20
    413a:	f003 fd91 	bl	7c60 <digitalWrite>
}
    413e:	bd10      	pop	{r4, pc}

00004140 <_Z16PowerONGPSBackupv>:

#if PCB_VERSION == 11
	void PowerONGPSBackup(void){
    4140:	b510      	push	{r4, lr}
		digitalWrite(GPSBackupPowerPin, HIGH);  // High=On, Low= Off
    4142:	2101      	movs	r1, #1
    4144:	201d      	movs	r0, #29
    4146:	f003 fd8b 	bl	7c60 <digitalWrite>
	}
    414a:	bd10      	pop	{r4, pc}

0000414c <_Z16LEDSaftySwitchONv>:

	void PowerOFFGPSBackup(void){
		digitalWrite(GPSBackupPowerPin, LOW);  // High=On, Low= Off
	}

	void LEDSaftySwitchON(void){
    414c:	b510      	push	{r4, lr}
		digitalWrite(SaftyLEDPin, LOW);
    414e:	2100      	movs	r1, #0
    4150:	201e      	movs	r0, #30
    4152:	f003 fd85 	bl	7c60 <digitalWrite>
	}
    4156:	bd10      	pop	{r4, pc}

00004158 <_Z17LEDSaftySwitchOFFv>:

	void LEDSaftySwitchOFF(void){
    4158:	b510      	push	{r4, lr}
		digitalWrite(SaftyLEDPin, HIGH);
    415a:	2101      	movs	r1, #1
    415c:	201e      	movs	r0, #30
    415e:	f003 fd7f 	bl	7c60 <digitalWrite>
	}
    4162:	bd10      	pop	{r4, pc}

00004164 <_Z9GoToSleepv>:
			break;
		}
	}while(1); 
}

void GoToSleep(void){
    4164:	b570      	push	{r4, r5, r6, lr}
	SerialAUX->println("Going to sleep!");
    4166:	4c13      	ldr	r4, [pc, #76]	; (41b4 <_Z9GoToSleepv+0x50>)
    4168:	4913      	ldr	r1, [pc, #76]	; (41b8 <_Z9GoToSleepv+0x54>)
    416a:	6820      	ldr	r0, [r4, #0]
    416c:	f002 f88c 	bl	6288 <_ZN5Print7printlnEPKc>
	delay(100);
    4170:	2064      	movs	r0, #100	; 0x64
    4172:	f002 f801 	bl	6178 <delay>

	RadioService->PowerDown();
    4176:	4d11      	ldr	r5, [pc, #68]	; (41bc <_Z9GoToSleepv+0x58>)
    4178:	6828      	ldr	r0, [r5, #0]
    417a:	f000 ff32 	bl	4fe2 <_ZN9RFService9PowerDownEv>
	
	//delay(10); // time to TX Serial.

	//delay(1000);	
	USBDevice.detach();
    417e:	4e10      	ldr	r6, [pc, #64]	; (41c0 <_Z9GoToSleepv+0x5c>)
    4180:	0030      	movs	r0, r6
    4182:	f002 ff87 	bl	7094 <_ZN14USBDeviceClass6detachEv>
	SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    4186:	2304      	movs	r3, #4
    4188:	4a0e      	ldr	r2, [pc, #56]	; (41c4 <_Z9GoToSleepv+0x60>)
    418a:	6911      	ldr	r1, [r2, #16]
    418c:	430b      	orrs	r3, r1
    418e:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4190:	f3bf 8f4f 	dsb	sy
	__DSB();
	__WFI();
    4194:	bf30      	wfi
	USBDevice.attach();
    4196:	0030      	movs	r0, r6
    4198:	f002 ff3e 	bl	7018 <_ZN14USBDeviceClass6attachEv>
	SerialAUX->print("Wake-up...");
    419c:	490a      	ldr	r1, [pc, #40]	; (41c8 <_Z9GoToSleepv+0x64>)
    419e:	6820      	ldr	r0, [r4, #0]
    41a0:	f002 f857 	bl	6252 <_ZN5Print5printEPKc>

	RadioService->WakeUp();
    41a4:	6828      	ldr	r0, [r5, #0]
    41a6:	f000 ff24 	bl	4ff2 <_ZN9RFService6WakeUpEv>

	SerialAUX->println("Done!");
    41aa:	4908      	ldr	r1, [pc, #32]	; (41cc <_Z9GoToSleepv+0x68>)
    41ac:	6820      	ldr	r0, [r4, #0]
    41ae:	f002 f86b 	bl	6288 <_ZN5Print7printlnEPKc>
}
    41b2:	bd70      	pop	{r4, r5, r6, pc}
    41b4:	2000014c 	.word	0x2000014c
    41b8:	0000ba16 	.word	0x0000ba16
    41bc:	20000248 	.word	0x20000248
    41c0:	200002cc 	.word	0x200002cc
    41c4:	e000ed00 	.word	0xe000ed00
    41c8:	0000ba26 	.word	0x0000ba26
    41cc:	0000ba31 	.word	0x0000ba31

000041d0 <_Z13BeaconServicev>:
	}while(1);

}

// Ensure a beacon is transmitted every N second.
void BeaconService(void){
    41d0:	b570      	push	{r4, r5, r6, lr}
	if(SystemInformation.BeaconSecondCounter >= 5){
    41d2:	4c0e      	ldr	r4, [pc, #56]	; (420c <_Z13BeaconServicev+0x3c>)
    41d4:	79a3      	ldrb	r3, [r4, #6]
    41d6:	2b04      	cmp	r3, #4
    41d8:	dd12      	ble.n	4200 <_Z13BeaconServicev+0x30>
		SerialAUX->print("Time to make beacon message...");
    41da:	4d0d      	ldr	r5, [pc, #52]	; (4210 <_Z13BeaconServicev+0x40>)
    41dc:	490d      	ldr	r1, [pc, #52]	; (4214 <_Z13BeaconServicev+0x44>)
    41de:	6828      	ldr	r0, [r5, #0]
    41e0:	f002 f837 	bl	6252 <_ZN5Print5printEPKc>
		// Send a Standard beacon:
		SystemInformation.BeaconSecondCounter =  0; // Reset Beacon counter.
    41e4:	2300      	movs	r3, #0
    41e6:	71a3      	strb	r3, [r4, #6]
		if(SystemInformation.IsGroundStation==false){
    41e8:	3434      	adds	r4, #52	; 0x34
    41ea:	7823      	ldrb	r3, [r4, #0]
    41ec:	2b00      	cmp	r3, #0
    41ee:	d108      	bne.n	4202 <_Z13BeaconServicev+0x32>
			RadioService->SendBeacon();
    41f0:	4b09      	ldr	r3, [pc, #36]	; (4218 <_Z13BeaconServicev+0x48>)
    41f2:	6818      	ldr	r0, [r3, #0]
    41f4:	f000 ff06 	bl	5004 <_ZN9RFService10SendBeaconEv>
		}else{
			SerialAUX->println("Im groundstation, NoPing!");
		}
		SerialAUX->println("Done!");	
    41f8:	4908      	ldr	r1, [pc, #32]	; (421c <_Z13BeaconServicev+0x4c>)
    41fa:	6828      	ldr	r0, [r5, #0]
    41fc:	f002 f844 	bl	6288 <_ZN5Print7printlnEPKc>
	}	
}
    4200:	bd70      	pop	{r4, r5, r6, pc}
			SerialAUX->println("Im groundstation, NoPing!");
    4202:	4907      	ldr	r1, [pc, #28]	; (4220 <_Z13BeaconServicev+0x50>)
    4204:	6828      	ldr	r0, [r5, #0]
    4206:	f002 f83f 	bl	6288 <_ZN5Print7printlnEPKc>
    420a:	e7f5      	b.n	41f8 <_Z13BeaconServicev+0x28>
    420c:	20000250 	.word	0x20000250
    4210:	2000014c 	.word	0x2000014c
    4214:	0000b973 	.word	0x0000b973
    4218:	20000248 	.word	0x20000248
    421c:	0000ba31 	.word	0x0000ba31
    4220:	0000b992 	.word	0x0000b992

00004224 <_Z10freeMemoryv>:
extern "C" char* sbrk(int incr);
#else  // __ARM__
extern char *__brkval;
#endif  // __arm__

int freeMemory() {
    4224:	b507      	push	{r0, r1, r2, lr}
	char top;
	#ifdef __arm__
	return &top - reinterpret_cast<char*>(sbrk(0));
    4226:	2000      	movs	r0, #0
    4228:	f007 f9ca 	bl	b5c0 <sbrk>
    422c:	466b      	mov	r3, sp
    422e:	3307      	adds	r3, #7
    4230:	1a18      	subs	r0, r3, r0
	#elif defined(CORE_TEENSY) || (ARDUINO > 103 && ARDUINO != 151)
	return &top - __brkval;
	#else  // __arm__
	return __brkval ? &top - __brkval : &top - __malloc_heap_start;
	#endif  // __arm__
}
    4232:	bd0e      	pop	{r1, r2, r3, pc}

00004234 <_Z17One_second_Updatev>:


void One_second_Update(void){
    4234:	b5f0      	push	{r4, r5, r6, r7, lr}
    4236:	b089      	sub	sp, #36	; 0x24
	//// only every second (check status)
	while(SystemInformation.SecondCounter){
    4238:	4c51      	ldr	r4, [pc, #324]	; (4380 <_Z17One_second_Updatev+0x14c>)
    423a:	7963      	ldrb	r3, [r4, #5]
    423c:	2b00      	cmp	r3, #0
    423e:	d100      	bne.n	4242 <_Z17One_second_Updatev+0xe>
    4240:	e09c      	b.n	437c <_Z17One_second_Updatev+0x148>
		SerialAUX->print("One_Second_Updated...");
    4242:	4d50      	ldr	r5, [pc, #320]	; (4384 <_Z17One_second_Updatev+0x150>)
    4244:	4950      	ldr	r1, [pc, #320]	; (4388 <_Z17One_second_Updatev+0x154>)
    4246:	6828      	ldr	r0, [r5, #0]
    4248:	f002 f803 	bl	6252 <_ZN5Print5printEPKc>
		//				digitalWrite(led2Pin, HIGH);
		SystemInformation.SecondCounter--;
    424c:	7963      	ldrb	r3, [r4, #5]
    424e:	3b01      	subs	r3, #1
    4250:	7163      	strb	r3, [r4, #5]
		
		SystemInformation.BatteryVoltage = getBatteryVoltage();
    4252:	f7ff ff23 	bl	409c <_Z17getBatteryVoltagev>
		SerialAUX->print("Battery Voltage...");
    4256:	494d      	ldr	r1, [pc, #308]	; (438c <_Z17One_second_Updatev+0x158>)
		SystemInformation.BatteryVoltage = getBatteryVoltage();
    4258:	60a0      	str	r0, [r4, #8]
		SerialAUX->print("Battery Voltage...");
    425a:	6828      	ldr	r0, [r5, #0]
    425c:	f001 fff9 	bl	6252 <_ZN5Print5printEPKc>
		SystemInformation.InputVoltage = getInputVoltage();
    4260:	f7ff ff36 	bl	40d0 <_Z15getInputVoltagev>
		SerialAUX->print("Input Voltage...");
    4264:	494a      	ldr	r1, [pc, #296]	; (4390 <_Z17One_second_Updatev+0x15c>)
		SystemInformation.InputVoltage = getInputVoltage();
    4266:	60e0      	str	r0, [r4, #12]
		SerialAUX->print("Input Voltage...");
    4268:	6828      	ldr	r0, [r5, #0]
    426a:	f001 fff2 	bl	6252 <_ZN5Print5printEPKc>
		SystemInformation.USBVoltage = getInput5VVoltage();				
    426e:	f7ff ff3f 	bl	40f0 <_Z17getInput5VVoltagev>
		SerialAUX->print("USB Voltage...");
    4272:	4948      	ldr	r1, [pc, #288]	; (4394 <_Z17One_second_Updatev+0x160>)
		SystemInformation.USBVoltage = getInput5VVoltage();				
    4274:	6120      	str	r0, [r4, #16]
		SerialAUX->print("USB Voltage...");
    4276:	6828      	ldr	r0, [r5, #0]
    4278:	f001 ffeb 	bl	6252 <_ZN5Print5printEPKc>
		
		// Update the FrSky GPS emulator with the latest values from the GPS. (GPS Lite needs to be updated to read $GPRMC in order to get speed, cog and date information:
		FrskyGPS.setData(GPSData->LatitudeDecimal, GPSData->LongitudeDecimal,GPSData->Altitude,0,0,0,0,0,GPSData->UTC_hour,GPSData->UTC_min,GPSData->UTC_sec);	
    427c:	4b46      	ldr	r3, [pc, #280]	; (4398 <_Z17One_second_Updatev+0x164>)
    427e:	4847      	ldr	r0, [pc, #284]	; (439c <_Z17One_second_Updatev+0x168>)
    4280:	6819      	ldr	r1, [r3, #0]
    4282:	790b      	ldrb	r3, [r1, #4]
    4284:	9307      	str	r3, [sp, #28]
    4286:	794b      	ldrb	r3, [r1, #5]
    4288:	9306      	str	r3, [sp, #24]
    428a:	798b      	ldrb	r3, [r1, #6]
    428c:	9305      	str	r3, [sp, #20]
    428e:	2300      	movs	r3, #0
    4290:	9304      	str	r3, [sp, #16]
    4292:	9303      	str	r3, [sp, #12]
    4294:	9302      	str	r3, [sp, #8]
    4296:	2300      	movs	r3, #0
    4298:	9301      	str	r3, [sp, #4]
    429a:	9300      	str	r3, [sp, #0]
    429c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    429e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
    42a0:	6a89      	ldr	r1, [r1, #40]	; 0x28
    42a2:	f7ff f88b 	bl	33bc <_ZN19FrSkySportSensorGps7setDataEfffffhhhhhh>
		SerialAUX->print("FRsky Data update...");					
    42a6:	493e      	ldr	r1, [pc, #248]	; (43a0 <_Z17One_second_Updatev+0x16c>)
    42a8:	6828      	ldr	r0, [r5, #0]
    42aa:	f001 ffd2 	bl	6252 <_ZN5Print5printEPKc>
		SerialAUX->print("Free RAM = "); //F function does the same and is now a built in library, in IDE > 1.0.0
    42ae:	493d      	ldr	r1, [pc, #244]	; (43a4 <_Z17One_second_Updatev+0x170>)
    42b0:	6828      	ldr	r0, [r5, #0]
    42b2:	f001 ffce 	bl	6252 <_ZN5Print5printEPKc>
		SerialAUX->println(freeMemory(), DEC);  // print how much RAM is available.
    42b6:	682e      	ldr	r6, [r5, #0]
    42b8:	f7ff ffb4 	bl	4224 <_Z10freeMemoryv>
    42bc:	220a      	movs	r2, #10
    42be:	0001      	movs	r1, r0
    42c0:	0030      	movs	r0, r6
    42c2:	f002 f836 	bl	6332 <_ZN5Print7printlnEii>
//		SerialAUX->Println("Input voltage is " + String(SystemInformation.InputVoltage) + "V.");
//		SerialAUX->Println("Input 5V voltage is " + String(SystemInformation.USBVoltage) + "V.");
//		SerialAUX->println("");
//		SerialAUX->println("Beacon Counter: " + String(SystemInformation.BeaconSecondCounter));

		if(SystemInformation.InputVoltage <= 4.3 || (SystemInformation.SimulateRunningOnBattery)){
    42c6:	68e0      	ldr	r0, [r4, #12]
    42c8:	f006 ff02 	bl	b0d0 <__aeabi_f2d>
    42cc:	4a36      	ldr	r2, [pc, #216]	; (43a8 <_Z17One_second_Updatev+0x174>)
    42ce:	4b37      	ldr	r3, [pc, #220]	; (43ac <_Z17One_second_Updatev+0x178>)
    42d0:	f004 fd04 	bl	8cdc <__aeabi_dcmple>
			if(SystemInformation.SecondsBatteryLowCounter < 255){
    42d4:	0022      	movs	r2, r4
    42d6:	3235      	adds	r2, #53	; 0x35
		if(SystemInformation.InputVoltage <= 4.3 || (SystemInformation.SimulateRunningOnBattery)){
    42d8:	2800      	cmp	r0, #0
    42da:	d104      	bne.n	42e6 <_Z17One_second_Updatev+0xb2>
    42dc:	0023      	movs	r3, r4
    42de:	3336      	adds	r3, #54	; 0x36
    42e0:	781b      	ldrb	r3, [r3, #0]
    42e2:	2b00      	cmp	r3, #0
    42e4:	d003      	beq.n	42ee <_Z17One_second_Updatev+0xba>
			if(SystemInformation.SecondsBatteryLowCounter < 255){
    42e6:	7813      	ldrb	r3, [r2, #0]
    42e8:	2bff      	cmp	r3, #255	; 0xff
    42ea:	d001      	beq.n	42f0 <_Z17One_second_Updatev+0xbc>
				SystemInformation.SecondsBatteryLowCounter++;
    42ec:	3301      	adds	r3, #1
			}
		}else{
			SystemInformation.SecondsBatteryLowCounter=0;
    42ee:	7013      	strb	r3, [r2, #0]
		}			

//		Serial.println("Switch:" + String(digitalRead(SaftySwitchPin)));
		
		if(digitalRead(SaftySwitchPin) == HIGH)
    42f0:	201a      	movs	r0, #26
    42f2:	f003 fce1 	bl	7cb8 <digitalRead>
    42f6:	2801      	cmp	r0, #1
    42f8:	d126      	bne.n	4348 <_Z17One_second_Updatev+0x114>
    42fa:	260a      	movs	r6, #10
    42fc:	2700      	movs	r7, #0
		{
			int count=0;
			for(int b=0;b<10;b++){
				count += digitalRead(SaftySwitchPin);
    42fe:	201a      	movs	r0, #26
    4300:	f003 fcda 	bl	7cb8 <digitalRead>
    4304:	3e01      	subs	r6, #1
    4306:	183f      	adds	r7, r7, r0
				delay(2);
    4308:	2002      	movs	r0, #2
    430a:	f001 ff35 	bl	6178 <delay>
			for(int b=0;b<10;b++){
    430e:	2e00      	cmp	r6, #0
    4310:	d1f5      	bne.n	42fe <_Z17One_second_Updatev+0xca>
			}
			if(count== 10){
    4312:	2f0a      	cmp	r7, #10
    4314:	d113      	bne.n	433e <_Z17One_second_Updatev+0x10a>
				SystemInformation.SafteSwitchPushedTimer++;
    4316:	0022      	movs	r2, r4
    4318:	323a      	adds	r2, #58	; 0x3a
    431a:	7813      	ldrb	r3, [r2, #0]
    431c:	3301      	adds	r3, #1
    431e:	b2db      	uxtb	r3, r3
    4320:	7013      	strb	r3, [r2, #0]
				if(SystemInformation.SafteSwitchPushedTimer == 2){
    4322:	2b02      	cmp	r3, #2
    4324:	d105      	bne.n	4332 <_Z17One_second_Updatev+0xfe>
					LEDSaftySwitchON();
    4326:	f7ff ff11 	bl	414c <_Z16LEDSaftySwitchONv>
					SystemInformation.SaftySwitchFirstTimePushed=true;
    432a:	343b      	adds	r4, #59	; 0x3b
					delay(50);
					LEDSaftySwitchON();
					delay(50);
				}
				SystemInformation.SaftySwitchFirstTimePushed=false;
				SystemInformation.SaftySwitchPushed=true;
    432c:	2301      	movs	r3, #1
			}else
			{
				SystemInformation.SafteSwitchPushedTimer=0;
    432e:	7023      	strb	r3, [r4, #0]
    4330:	e005      	b.n	433e <_Z17One_second_Updatev+0x10a>
				}else if(SystemInformation.SafteSwitchPushedTimer >= 4){
    4332:	2b03      	cmp	r3, #3
    4334:	dd03      	ble.n	433e <_Z17One_second_Updatev+0x10a>
					SystemInformation.SaftySwitchFirstTimePushed=false;
    4336:	343b      	adds	r4, #59	; 0x3b
					LEDSaftySwitchOFF();
    4338:	f7ff ff0e 	bl	4158 <_Z17LEDSaftySwitchOFFv>
					SystemInformation.SaftySwitchFirstTimePushed=false;
    433c:	7026      	strb	r6, [r4, #0]
			}
		}
		SerialAUX->println("Done!");
    433e:	491c      	ldr	r1, [pc, #112]	; (43b0 <_Z17One_second_Updatev+0x17c>)
    4340:	6828      	ldr	r0, [r5, #0]
    4342:	f001 ffa1 	bl	6288 <_ZN5Print7printlnEPKc>
	while(SystemInformation.SecondCounter){
    4346:	e777      	b.n	4238 <_Z17One_second_Updatev+0x4>
			if(SystemInformation.SaftySwitchFirstTimePushed==true)
    4348:	0023      	movs	r3, r4
    434a:	333b      	adds	r3, #59	; 0x3b
    434c:	781b      	ldrb	r3, [r3, #0]
    434e:	2b00      	cmp	r3, #0
    4350:	d012      	beq.n	4378 <_Z17One_second_Updatev+0x144>
    4352:	260a      	movs	r6, #10
					LEDSaftySwitchOFF();
    4354:	f7ff ff00 	bl	4158 <_Z17LEDSaftySwitchOFFv>
					delay(50);
    4358:	2032      	movs	r0, #50	; 0x32
    435a:	f001 ff0d 	bl	6178 <delay>
    435e:	3e01      	subs	r6, #1
					LEDSaftySwitchON();
    4360:	f7ff fef4 	bl	414c <_Z16LEDSaftySwitchONv>
					delay(50);
    4364:	2032      	movs	r0, #50	; 0x32
    4366:	f001 ff07 	bl	6178 <delay>
				for(int a=0;a<10;a++)
    436a:	2e00      	cmp	r6, #0
    436c:	d1f2      	bne.n	4354 <_Z17One_second_Updatev+0x120>
				SystemInformation.SaftySwitchFirstTimePushed=false;
    436e:	0023      	movs	r3, r4
    4370:	333b      	adds	r3, #59	; 0x3b
    4372:	701e      	strb	r6, [r3, #0]
				SystemInformation.SaftySwitchPushed=true;
    4374:	343c      	adds	r4, #60	; 0x3c
    4376:	e7d9      	b.n	432c <_Z17One_second_Updatev+0xf8>
				SystemInformation.SafteSwitchPushedTimer=0;
    4378:	343a      	adds	r4, #58	; 0x3a
    437a:	e7d8      	b.n	432e <_Z17One_second_Updatev+0xfa>
	}
}
    437c:	b009      	add	sp, #36	; 0x24
    437e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4380:	20000250 	.word	0x20000250
    4384:	2000014c 	.word	0x2000014c
    4388:	0000b9ac 	.word	0x0000b9ac
    438c:	0000b9c2 	.word	0x0000b9c2
    4390:	0000b9d5 	.word	0x0000b9d5
    4394:	0000b9e6 	.word	0x0000b9e6
    4398:	20000240 	.word	0x20000240
    439c:	2000015c 	.word	0x2000015c
    43a0:	0000b9f5 	.word	0x0000b9f5
    43a4:	0000ba0a 	.word	0x0000ba0a
    43a8:	33333333 	.word	0x33333333
    43ac:	40113333 	.word	0x40113333
    43b0:	0000ba31 	.word	0x0000ba31

000043b4 <loop>:
void loop() {
    43b4:	b570      	push	{r4, r5, r6, lr}
		One_second_Update();
    43b6:	f7ff ff3d 	bl	4234 <_Z17One_second_Updatev>
		GPS->update();  // Function empty serial buffer and analyzes string.
    43ba:	4d5b      	ldr	r5, [pc, #364]	; (4528 <loop+0x174>)
    43bc:	6828      	ldr	r0, [r5, #0]
    43be:	f7ff fb29 	bl	3a14 <_ZN10GPSL80Lite6updateEv>
		BeaconService();
    43c2:	f7ff ff05 	bl	41d0 <_Z13BeaconServicev>
		RadioService->Service();
    43c6:	4b59      	ldr	r3, [pc, #356]	; (452c <loop+0x178>)
    43c8:	6818      	ldr	r0, [r3, #0]
    43ca:	f000 fbdd 	bl	4b88 <_ZN10RFProtocol7ServiceEv>
		if(SystemInformation.SaftySwitchPushed == true){
    43ce:	4c58      	ldr	r4, [pc, #352]	; (4530 <loop+0x17c>)
    43d0:	0023      	movs	r3, r4
    43d2:	333c      	adds	r3, #60	; 0x3c
    43d4:	781b      	ldrb	r3, [r3, #0]
    43d6:	2b00      	cmp	r3, #0
    43d8:	d006      	beq.n	43e8 <loop+0x34>
			SerialAUX->println("System - Button pushed! - go to POWER_OFF");
    43da:	4b56      	ldr	r3, [pc, #344]	; (4534 <loop+0x180>)
    43dc:	4956      	ldr	r1, [pc, #344]	; (4538 <loop+0x184>)
    43de:	6818      	ldr	r0, [r3, #0]
    43e0:	f001 ff52 	bl	6288 <_ZN5Print7printlnEPKc>
			SystemInformation.state=POWER_OFF;
    43e4:	2305      	movs	r3, #5
    43e6:	71e3      	strb	r3, [r4, #7]
		switch(SystemInformation.state)
    43e8:	79e0      	ldrb	r0, [r4, #7]
    43ea:	2805      	cmp	r0, #5
    43ec:	d900      	bls.n	43f0 <loop+0x3c>
    43ee:	e099      	b.n	4524 <loop+0x170>
    43f0:	f004 faca 	bl	8988 <__gnu_thumb1_case_uqi>
    43f4:	22130390 	.word	0x22130390
    43f8:	7955      	.short	0x7955
				if(SystemInformation.SecondsBatteryLowCounter > 2){ // filter.
    43fa:	0023      	movs	r3, r4
    43fc:	3335      	adds	r3, #53	; 0x35
    43fe:	781b      	ldrb	r3, [r3, #0]
    4400:	2b02      	cmp	r3, #2
    4402:	dd02      	ble.n	440a <loop+0x56>
					SystemInformation.state=GET_READY_TO_RUN_ON_BATTERY;
    4404:	2302      	movs	r3, #2
				SystemInformation.state = STARTING_UP;
    4406:	71e3      	strb	r3, [r4, #7]
			break;
    4408:	e7d5      	b.n	43b6 <loop+0x2>
					SerialProtocol->Service(); // Comunincation to PC.
    440a:	4b4c      	ldr	r3, [pc, #304]	; (453c <loop+0x188>)
    440c:	6818      	ldr	r0, [r3, #0]
    440e:	f001 fd29 	bl	5e64 <_ZN10PCProtocol7ServiceEv>
					FrskySport.send(); // Service the Serial for SPORT.
    4412:	484b      	ldr	r0, [pc, #300]	; (4540 <loop+0x18c>)
    4414:	f7ff f905 	bl	3622 <_ZN19FrSkySportTelemetry4sendEv>
    4418:	e7cd      	b.n	43b6 <loop+0x2>
				if(SystemInformation.SecondsBatteryLowCounter == 0){
    441a:	0023      	movs	r3, r4
    441c:	3335      	adds	r3, #53	; 0x35
    441e:	781b      	ldrb	r3, [r3, #0]
    4420:	2b00      	cmp	r3, #0
    4422:	d101      	bne.n	4428 <loop+0x74>
				SystemInformation.state=NORMAL;		
    4424:	3301      	adds	r3, #1
    4426:	e7ee      	b.n	4406 <loop+0x52>
					if(SystemInformation.SecondsBatteryLowCounter > POWER_DOWN_DELAY){
    4428:	2b3c      	cmp	r3, #60	; 0x3c
    442a:	ddee      	ble.n	440a <loop+0x56>
						PowerONGPSBackup(); // Ensure backup power is enabled for GPS.
    442c:	f7ff fe88 	bl	4140 <_Z16PowerONGPSBackupv>
						SystemInformation.GPSActiveCounter=0; // ensure GPS active counter is reset.
    4430:	2300      	movs	r3, #0
    4432:	8723      	strh	r3, [r4, #56]	; 0x38
							SystemInformation.state=RUNNING_ON_BATTERY_GPS_ON;
    4434:	2303      	movs	r3, #3
    4436:	e7e6      	b.n	4406 <loop+0x52>
				if(SystemInformation.InputVoltage > 4.3 && (!SystemInformation.SimulateRunningOnBattery)){ // in debug mode force running on battery mode.
    4438:	68e0      	ldr	r0, [r4, #12]
    443a:	f006 fe49 	bl	b0d0 <__aeabi_f2d>
    443e:	4a41      	ldr	r2, [pc, #260]	; (4544 <loop+0x190>)
    4440:	4b41      	ldr	r3, [pc, #260]	; (4548 <loop+0x194>)
    4442:	f004 fc55 	bl	8cf0 <__aeabi_dcmpgt>
    4446:	2800      	cmp	r0, #0
    4448:	d00b      	beq.n	4462 <loop+0xae>
    444a:	0023      	movs	r3, r4
    444c:	3336      	adds	r3, #54	; 0x36
    444e:	781b      	ldrb	r3, [r3, #0]
    4450:	2b00      	cmp	r3, #0
    4452:	d106      	bne.n	4462 <loop+0xae>
					SerialAUX->println("Main State: RUNNING_ON_BATTERY_GPS_ON -> STARTING_UP");
    4454:	493d      	ldr	r1, [pc, #244]	; (454c <loop+0x198>)
					SystemInformation.state=STARTING_UP;
    4456:	71e3      	strb	r3, [r4, #7]
					SerialAUX->println("Main State: RUNNING_ON_BATTERY_GPS_ON -> POWER_OFF");
    4458:	4b36      	ldr	r3, [pc, #216]	; (4534 <loop+0x180>)
    445a:	6818      	ldr	r0, [r3, #0]
    445c:	f001 ff14 	bl	6288 <_ZN5Print7printlnEPKc>
    4460:	e7a9      	b.n	43b6 <loop+0x2>
				}else if(SystemInformation.BatteryVoltage <= 3.0){
    4462:	493b      	ldr	r1, [pc, #236]	; (4550 <loop+0x19c>)
    4464:	68a0      	ldr	r0, [r4, #8]
    4466:	f004 fc73 	bl	8d50 <__aeabi_fcmple>
    446a:	1e06      	subs	r6, r0, #0
    446c:	d003      	beq.n	4476 <loop+0xc2>
					SystemInformation.state=POWER_OFF;
    446e:	2305      	movs	r3, #5
					SerialAUX->println("Main State: RUNNING_ON_BATTERY_GPS_ON -> POWER_OFF");
    4470:	4938      	ldr	r1, [pc, #224]	; (4554 <loop+0x1a0>)
					SystemInformation.state=POWER_OFF;
    4472:	71e3      	strb	r3, [r4, #7]
    4474:	e7f0      	b.n	4458 <loop+0xa4>
					GoToSleep(); // Sleep until 1 sec interrupt will wake us up.
    4476:	f7ff fe75 	bl	4164 <_Z9GoToSleepv>
					if(++SystemInformation.GPSActiveCounter > GPS_ON_TIME){ // power off GPS after 1 min.
    447a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    447c:	3301      	adds	r3, #1
    447e:	b29b      	uxth	r3, r3
    4480:	8723      	strh	r3, [r4, #56]	; 0x38
    4482:	2b3c      	cmp	r3, #60	; 0x3c
    4484:	d997      	bls.n	43b6 <loop+0x2>
						delay(2000); // busy wait while GPS serial gets time to receive data from GPS (Unable in sleep mode).
    4486:	20fa      	movs	r0, #250	; 0xfa
    4488:	00c0      	lsls	r0, r0, #3
						SystemInformation.GPSActiveCounter=0;
    448a:	8726      	strh	r6, [r4, #56]	; 0x38
						delay(2000); // busy wait while GPS serial gets time to receive data from GPS (Unable in sleep mode).
    448c:	f001 fe74 	bl	6178 <delay>
						GPS->update();  // Service the GPS.
    4490:	6828      	ldr	r0, [r5, #0]
    4492:	f7ff fabf 	bl	3a14 <_ZN10GPSL80Lite6updateEv>
						PowerOFFGPS();// Turn OFF GPS main power.
    4496:	f7ff fe4d 	bl	4134 <_Z11PowerOFFGPSv>
						SystemInformation.state=RUNNING_ON_BATTERY_GPS_OFF;
    449a:	2304      	movs	r3, #4
    449c:	e7b3      	b.n	4406 <loop+0x52>
				if(SystemInformation.InputVoltage > 4.3 && (!SystemInformation.SimulateRunningOnBattery)){ // in debug mode force running on battery mode.
    449e:	68e0      	ldr	r0, [r4, #12]
    44a0:	f006 fe16 	bl	b0d0 <__aeabi_f2d>
    44a4:	4a27      	ldr	r2, [pc, #156]	; (4544 <loop+0x190>)
    44a6:	4b28      	ldr	r3, [pc, #160]	; (4548 <loop+0x194>)
    44a8:	f004 fc22 	bl	8cf0 <__aeabi_dcmpgt>
    44ac:	2800      	cmp	r0, #0
    44ae:	d004      	beq.n	44ba <loop+0x106>
    44b0:	0023      	movs	r3, r4
    44b2:	3336      	adds	r3, #54	; 0x36
    44b4:	781b      	ldrb	r3, [r3, #0]
    44b6:	2b00      	cmp	r3, #0
    44b8:	d0a5      	beq.n	4406 <loop+0x52>
					}else if(SystemInformation.BatteryVoltage <= 3.0){
    44ba:	4925      	ldr	r1, [pc, #148]	; (4550 <loop+0x19c>)
    44bc:	68a0      	ldr	r0, [r4, #8]
    44be:	f004 fc47 	bl	8d50 <__aeabi_fcmple>
						SystemInformation.state=POWER_OFF;
    44c2:	2305      	movs	r3, #5
					}else if(SystemInformation.BatteryVoltage <= 3.0){
    44c4:	1e05      	subs	r5, r0, #0
    44c6:	d19e      	bne.n	4406 <loop+0x52>
						GoToSleep(); // Sleep until 1 sec interrupt will wake us up.
    44c8:	f7ff fe4c 	bl	4164 <_Z9GoToSleepv>
						if(++SystemInformation.GPSActiveCounter > GPS_OFF_TIME){ // Turn on GPS every 10 mins.
    44cc:	2296      	movs	r2, #150	; 0x96
    44ce:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    44d0:	0092      	lsls	r2, r2, #2
    44d2:	3301      	adds	r3, #1
    44d4:	b29b      	uxth	r3, r3
    44d6:	8723      	strh	r3, [r4, #56]	; 0x38
    44d8:	4293      	cmp	r3, r2
    44da:	d800      	bhi.n	44de <loop+0x12a>
    44dc:	e76b      	b.n	43b6 <loop+0x2>
							SystemInformation.GPSActiveCounter=0;
    44de:	8725      	strh	r5, [r4, #56]	; 0x38
							PowerONGPS();// Turn OFF GPS main power.
    44e0:	f7ff fe22 	bl	4128 <_Z10PowerONGPSv>
    44e4:	e7a6      	b.n	4434 <loop+0x80>
				PowerOFF(); 
    44e6:	f7ff fe19 	bl	411c <_Z8PowerOFFv>
					digitalWrite(led2Pin, HIGH);
    44ea:	2515      	movs	r5, #21
					delay(50);
    44ec:	2432      	movs	r4, #50	; 0x32
					digitalWrite(led2Pin, HIGH);
    44ee:	2101      	movs	r1, #1
    44f0:	0028      	movs	r0, r5
    44f2:	f003 fbb5 	bl	7c60 <digitalWrite>
					LEDSaftySwitchON();
    44f6:	f7ff fe29 	bl	414c <_Z16LEDSaftySwitchONv>
					delay(50);
    44fa:	0020      	movs	r0, r4
    44fc:	f001 fe3c 	bl	6178 <delay>
					digitalWrite(led2Pin, LOW);
    4500:	0028      	movs	r0, r5
    4502:	2100      	movs	r1, #0
    4504:	f003 fbac 	bl	7c60 <digitalWrite>
					LEDSaftySwitchOFF();
    4508:	f7ff fe26 	bl	4158 <_Z17LEDSaftySwitchOFFv>
					delay(50);
    450c:	0020      	movs	r0, r4
    450e:	f001 fe33 	bl	6178 <delay>
    4512:	e7ec      	b.n	44ee <loop+0x13a>
				PowerONGPS();// Turn on GPS.
    4514:	f7ff fe08 	bl	4128 <_Z10PowerONGPSv>
				SystemInformation.SecondsBatteryLowCounter = 0;
    4518:	0022      	movs	r2, r4
				SystemInformation.SecondCounter=0; // reset second counter.
    451a:	2300      	movs	r3, #0
				SystemInformation.SecondsBatteryLowCounter = 0;
    451c:	3235      	adds	r2, #53	; 0x35
				SystemInformation.SecondCounter=0; // reset second counter.
    451e:	7163      	strb	r3, [r4, #5]
				SystemInformation.SecondsBatteryLowCounter = 0;
    4520:	7013      	strb	r3, [r2, #0]
    4522:	e77f      	b.n	4424 <loop+0x70>
				SystemInformation.state = STARTING_UP;
    4524:	2300      	movs	r3, #0
    4526:	e76e      	b.n	4406 <loop+0x52>
    4528:	2000023c 	.word	0x2000023c
    452c:	20000248 	.word	0x20000248
    4530:	20000250 	.word	0x20000250
    4534:	2000014c 	.word	0x2000014c
    4538:	0000ba37 	.word	0x0000ba37
    453c:	2000024c 	.word	0x2000024c
    4540:	200001b8 	.word	0x200001b8
    4544:	33333333 	.word	0x33333333
    4548:	40113333 	.word	0x40113333
    454c:	0000ba61 	.word	0x0000ba61
    4550:	40400000 	.word	0x40400000
    4554:	0000ba96 	.word	0x0000ba96

00004558 <_GLOBAL__sub_I_SystemInformation>:
	RUNNING_ON_BATTERY_GPS_ON,
	RUNNING_ON_BATTERY_GPS_OFF,
	POWER_OFF
};

extern struct SystemInformation_t
    4558:	4b1c      	ldr	r3, [pc, #112]	; (45cc <_GLOBAL__sub_I_SystemInformation+0x74>)
    455a:	4a1d      	ldr	r2, [pc, #116]	; (45d0 <_GLOBAL__sub_I_SystemInformation+0x78>)
}
    455c:	b510      	push	{r4, lr}
    455e:	601a      	str	r2, [r3, #0]
    4560:	220b      	movs	r2, #11
    4562:	711a      	strb	r2, [r3, #4]
    4564:	2200      	movs	r2, #0
    4566:	2400      	movs	r4, #0
    4568:	609a      	str	r2, [r3, #8]
    456a:	60da      	str	r2, [r3, #12]
    456c:	611a      	str	r2, [r3, #16]
    456e:	4a19      	ldr	r2, [pc, #100]	; (45d4 <_GLOBAL__sub_I_SystemInformation+0x7c>)
    4570:	715c      	strb	r4, [r3, #5]
    4572:	719c      	strb	r4, [r3, #6]
    4574:	615a      	str	r2, [r3, #20]
	float InputVoltage = 0;
	float USBVoltage = 0;

	//Serial number:
	volatile uint32_t *AddrSerialNumber1 = (volatile uint32_t *)0x0080A00C;
	uint32_t SerialNumber1= *AddrSerialNumber1;
    4576:	6812      	ldr	r2, [r2, #0]
extern struct SystemInformation_t
    4578:	71dc      	strb	r4, [r3, #7]
    457a:	619a      	str	r2, [r3, #24]
    457c:	4a16      	ldr	r2, [pc, #88]	; (45d8 <_GLOBAL__sub_I_SystemInformation+0x80>)
FrSkySportSensorGps FrskyGPS;             // Create GPS sensor with default ID
    457e:	2183      	movs	r1, #131	; 0x83
    4580:	61da      	str	r2, [r3, #28]

	volatile uint32_t *AddrSerialNumber2 = (volatile uint32_t *)0x0080A040;
	uint32_t SerialNumber2= *AddrSerialNumber2;
    4582:	6812      	ldr	r2, [r2, #0]
    4584:	4815      	ldr	r0, [pc, #84]	; (45dc <_GLOBAL__sub_I_SystemInformation+0x84>)
extern struct SystemInformation_t
    4586:	621a      	str	r2, [r3, #32]
    4588:	4a15      	ldr	r2, [pc, #84]	; (45e0 <_GLOBAL__sub_I_SystemInformation+0x88>)
    458a:	625a      	str	r2, [r3, #36]	; 0x24

	volatile uint32_t *AddrSerialNumber3 = (volatile uint32_t *)0x0080A044;
	uint32_t SerialNumber3= *AddrSerialNumber3;
    458c:	6812      	ldr	r2, [r2, #0]
extern struct SystemInformation_t
    458e:	629a      	str	r2, [r3, #40]	; 0x28
    4590:	4a14      	ldr	r2, [pc, #80]	; (45e4 <_GLOBAL__sub_I_SystemInformation+0x8c>)
    4592:	62da      	str	r2, [r3, #44]	; 0x2c

	volatile uint32_t *AddrSerialNumber4 = (volatile uint32_t *)0x0080A048;
	uint32_t SerialNumber4= *AddrSerialNumber4;	
    4594:	6812      	ldr	r2, [r2, #0]
extern struct SystemInformation_t
    4596:	871c      	strh	r4, [r3, #56]	; 0x38
    4598:	631a      	str	r2, [r3, #48]	; 0x30
    459a:	001a      	movs	r2, r3
    459c:	3234      	adds	r2, #52	; 0x34
    459e:	7014      	strb	r4, [r2, #0]
    45a0:	001a      	movs	r2, r3
    45a2:	3235      	adds	r2, #53	; 0x35
    45a4:	7014      	strb	r4, [r2, #0]
    45a6:	001a      	movs	r2, r3
    45a8:	3236      	adds	r2, #54	; 0x36
    45aa:	7014      	strb	r4, [r2, #0]
    45ac:	001a      	movs	r2, r3
    45ae:	323a      	adds	r2, #58	; 0x3a
    45b0:	7014      	strb	r4, [r2, #0]
    45b2:	001a      	movs	r2, r3
    45b4:	333c      	adds	r3, #60	; 0x3c
    45b6:	323b      	adds	r2, #59	; 0x3b
    45b8:	7014      	strb	r4, [r2, #0]
    45ba:	701c      	strb	r4, [r3, #0]
    45bc:	f7fe feba 	bl	3334 <_ZN19FrSkySportSensorGpsC1EN16FrSkySportSensor8SensorIdE>
FrSkySportTelemetry FrskySport;           // Create telemetry object without polling
    45c0:	0021      	movs	r1, r4
    45c2:	4809      	ldr	r0, [pc, #36]	; (45e8 <_GLOBAL__sub_I_SystemInformation+0x90>)
    45c4:	f7fe ffdb 	bl	357e <_ZN19FrSkySportTelemetryC1Eb>
}
    45c8:	bd10      	pop	{r4, pc}
    45ca:	46c0      	nop			; (mov r8, r8)
    45cc:	20000250 	.word	0x20000250
    45d0:	3f8147ae 	.word	0x3f8147ae
    45d4:	0080a00c 	.word	0x0080a00c
    45d8:	0080a040 	.word	0x0080a040
    45dc:	2000015c 	.word	0x2000015c
    45e0:	0080a044 	.word	0x0080a044
    45e4:	0080a048 	.word	0x0080a048
    45e8:	200001b8 	.word	0x200001b8

000045ec <setup>:
void setup() {	
    45ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	SerialAUX->begin(115200);
    45ee:	24e1      	movs	r4, #225	; 0xe1
void setup() {	
    45f0:	b0b1      	sub	sp, #196	; 0xc4
	hwInit(); // Setup all pins according to hardware.
    45f2:	f7ff fc79 	bl	3ee8 <_Z6hwInitv>
		delay(5000); // Time to get USB bootloader ready, but only if debugger is not connected.
    45f6:	48fb      	ldr	r0, [pc, #1004]	; (49e4 <setup+0x3f8>)
    45f8:	f001 fdbe 	bl	6178 <delay>
	SerialAUX->begin(115200);
    45fc:	4bfa      	ldr	r3, [pc, #1000]	; (49e8 <setup+0x3fc>)
    45fe:	0264      	lsls	r4, r4, #9
    4600:	6818      	ldr	r0, [r3, #0]
    4602:	0021      	movs	r1, r4
    4604:	6803      	ldr	r3, [r0, #0]
    4606:	69db      	ldr	r3, [r3, #28]
    4608:	4798      	blx	r3
	Serial.begin(115200);
    460a:	4ef8      	ldr	r6, [pc, #992]	; (49ec <setup+0x400>)
    460c:	0021      	movs	r1, r4
    460e:	0030      	movs	r0, r6
    4610:	f002 fa4c 	bl	6aac <_ZN7Serial_5beginEm>
	delay(500);
    4614:	20fa      	movs	r0, #250	; 0xfa

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    4616:	ac26      	add	r4, sp, #152	; 0x98
    4618:	0040      	lsls	r0, r0, #1
    461a:	f001 fdad 	bl	6178 <delay>
    461e:	49f4      	ldr	r1, [pc, #976]	; (49f0 <setup+0x404>)
    4620:	0020      	movs	r0, r4
    4622:	f003 fc12 	bl	7e4a <_ZN6StringC1EPKc>
	Serial.println("Starting RC Transponder ver. " + String((int)SystemInformation.FIRMWARE_VERSION) + "." + String((int)((SystemInformation.FIRMWARE_VERSION-((int)SystemInformation.FIRMWARE_VERSION))*100)));
    4626:	4df3      	ldr	r5, [pc, #972]	; (49f4 <setup+0x408>)
    4628:	6828      	ldr	r0, [r5, #0]
    462a:	f005 fa23 	bl	9a74 <__aeabi_f2iz>
    462e:	220a      	movs	r2, #10
    4630:	0001      	movs	r1, r0
    4632:	a823      	add	r0, sp, #140	; 0x8c
    4634:	f003 fc3e 	bl	7eb4 <_ZN6StringC1Eih>
    4638:	a923      	add	r1, sp, #140	; 0x8c
    463a:	0020      	movs	r0, r4
    463c:	f003 fc77 	bl	7f2e <_ZplRK15StringSumHelperRK6String>
    4640:	49ed      	ldr	r1, [pc, #948]	; (49f8 <setup+0x40c>)
    4642:	f003 fc81 	bl	7f48 <_ZplRK15StringSumHelperPKc>
    4646:	682f      	ldr	r7, [r5, #0]
    4648:	901b      	str	r0, [sp, #108]	; 0x6c
    464a:	1c38      	adds	r0, r7, #0
    464c:	f005 fa12 	bl	9a74 <__aeabi_f2iz>
    4650:	f005 fa30 	bl	9ab4 <__aeabi_i2f>
    4654:	1c01      	adds	r1, r0, #0
    4656:	1c38      	adds	r0, r7, #0
    4658:	f005 f870 	bl	973c <__aeabi_fsub>
    465c:	49e7      	ldr	r1, [pc, #924]	; (49fc <setup+0x410>)
    465e:	f004 ff4d 	bl	94fc <__aeabi_fmul>
    4662:	f005 fa07 	bl	9a74 <__aeabi_f2iz>
    4666:	220a      	movs	r2, #10
    4668:	0001      	movs	r1, r0
    466a:	a82a      	add	r0, sp, #168	; 0xa8
    466c:	f003 fc22 	bl	7eb4 <_ZN6StringC1Eih>
    4670:	a92a      	add	r1, sp, #168	; 0xa8
    4672:	981b      	ldr	r0, [sp, #108]	; 0x6c
    4674:	f003 fc5b 	bl	7f2e <_ZplRK15StringSumHelperRK6String>
    4678:	0001      	movs	r1, r0
    467a:	0030      	movs	r0, r6
    467c:	f001 fdfa 	bl	6274 <_ZN5Print7printlnERK6String>
    4680:	a82a      	add	r0, sp, #168	; 0xa8
    4682:	f003 fb9a 	bl	7dba <_ZN6StringD1Ev>
    4686:	a823      	add	r0, sp, #140	; 0x8c
    4688:	f003 fb97 	bl	7dba <_ZN6StringD1Ev>
class StringSumHelper : public String
    468c:	0020      	movs	r0, r4
    468e:	f003 fb94 	bl	7dba <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
    4692:	49db      	ldr	r1, [pc, #876]	; (4a00 <setup+0x414>)
    4694:	a82a      	add	r0, sp, #168	; 0xa8
    4696:	f003 fbd8 	bl	7e4a <_ZN6StringC1EPKc>
	Serial.println("Chip unique serial number part 1:" + String(SystemInformation.SerialNumber1));
    469a:	220a      	movs	r2, #10
    469c:	69a9      	ldr	r1, [r5, #24]
    469e:	0020      	movs	r0, r4
    46a0:	f003 fc1a 	bl	7ed8 <_ZN6StringC1Emh>
    46a4:	0021      	movs	r1, r4
    46a6:	a82a      	add	r0, sp, #168	; 0xa8
    46a8:	f003 fc41 	bl	7f2e <_ZplRK15StringSumHelperRK6String>
    46ac:	0001      	movs	r1, r0
    46ae:	0030      	movs	r0, r6
    46b0:	f001 fde0 	bl	6274 <_ZN5Print7printlnERK6String>
    46b4:	0020      	movs	r0, r4
    46b6:	f003 fb80 	bl	7dba <_ZN6StringD1Ev>
class StringSumHelper : public String
    46ba:	a82a      	add	r0, sp, #168	; 0xa8
    46bc:	f003 fb7d 	bl	7dba <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
    46c0:	49d0      	ldr	r1, [pc, #832]	; (4a04 <setup+0x418>)
    46c2:	a82a      	add	r0, sp, #168	; 0xa8
    46c4:	f003 fbc1 	bl	7e4a <_ZN6StringC1EPKc>
	Serial.println("Chip unique serial number part 2:" + String(SystemInformation.SerialNumber2));
    46c8:	220a      	movs	r2, #10
    46ca:	6a29      	ldr	r1, [r5, #32]
    46cc:	0020      	movs	r0, r4
    46ce:	f003 fc03 	bl	7ed8 <_ZN6StringC1Emh>
    46d2:	0021      	movs	r1, r4
    46d4:	a82a      	add	r0, sp, #168	; 0xa8
    46d6:	f003 fc2a 	bl	7f2e <_ZplRK15StringSumHelperRK6String>
    46da:	0001      	movs	r1, r0
    46dc:	0030      	movs	r0, r6
    46de:	f001 fdc9 	bl	6274 <_ZN5Print7printlnERK6String>
    46e2:	0020      	movs	r0, r4
    46e4:	f003 fb69 	bl	7dba <_ZN6StringD1Ev>
class StringSumHelper : public String
    46e8:	a82a      	add	r0, sp, #168	; 0xa8
    46ea:	f003 fb66 	bl	7dba <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
    46ee:	49c6      	ldr	r1, [pc, #792]	; (4a08 <setup+0x41c>)
    46f0:	a82a      	add	r0, sp, #168	; 0xa8
    46f2:	f003 fbaa 	bl	7e4a <_ZN6StringC1EPKc>
	Serial.println("Chip unique serial number part 3:" + String(SystemInformation.SerialNumber3));
    46f6:	220a      	movs	r2, #10
    46f8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    46fa:	0020      	movs	r0, r4
    46fc:	f003 fbec 	bl	7ed8 <_ZN6StringC1Emh>
    4700:	0021      	movs	r1, r4
    4702:	a82a      	add	r0, sp, #168	; 0xa8
    4704:	f003 fc13 	bl	7f2e <_ZplRK15StringSumHelperRK6String>
    4708:	0001      	movs	r1, r0
    470a:	0030      	movs	r0, r6
    470c:	f001 fdb2 	bl	6274 <_ZN5Print7printlnERK6String>
    4710:	0020      	movs	r0, r4
    4712:	f003 fb52 	bl	7dba <_ZN6StringD1Ev>
class StringSumHelper : public String
    4716:	a82a      	add	r0, sp, #168	; 0xa8
    4718:	f003 fb4f 	bl	7dba <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
    471c:	49bb      	ldr	r1, [pc, #748]	; (4a0c <setup+0x420>)
    471e:	a82a      	add	r0, sp, #168	; 0xa8
    4720:	f003 fb93 	bl	7e4a <_ZN6StringC1EPKc>
	Serial.println("Chip unique serial number part 4:" + String(SystemInformation.SerialNumber4));
    4724:	220a      	movs	r2, #10
    4726:	6b29      	ldr	r1, [r5, #48]	; 0x30
    4728:	0020      	movs	r0, r4
    472a:	f003 fbd5 	bl	7ed8 <_ZN6StringC1Emh>
    472e:	0021      	movs	r1, r4
    4730:	a82a      	add	r0, sp, #168	; 0xa8
    4732:	f003 fbfc 	bl	7f2e <_ZplRK15StringSumHelperRK6String>
    4736:	0001      	movs	r1, r0
    4738:	0030      	movs	r0, r6
    473a:	f001 fd9b 	bl	6274 <_ZN5Print7printlnERK6String>
    473e:	0020      	movs	r0, r4
    4740:	f003 fb3b 	bl	7dba <_ZN6StringD1Ev>
class StringSumHelper : public String
    4744:	a82a      	add	r0, sp, #168	; 0xa8
    4746:	f003 fb38 	bl	7dba <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
    474a:	49b1      	ldr	r1, [pc, #708]	; (4a10 <setup+0x424>)
    474c:	a820      	add	r0, sp, #128	; 0x80
    474e:	f003 fb7c 	bl	7e4a <_ZN6StringC1EPKc>
	Serial.println("Chip unique serial number: \"" + String(SystemInformation.SerialNumber1) + String(SystemInformation.SerialNumber2) + String(SystemInformation.SerialNumber3) + String(SystemInformation.SerialNumber4)+"\"");
    4752:	220a      	movs	r2, #10
    4754:	69a9      	ldr	r1, [r5, #24]
    4756:	a81d      	add	r0, sp, #116	; 0x74
    4758:	f003 fbbe 	bl	7ed8 <_ZN6StringC1Emh>
    475c:	a91d      	add	r1, sp, #116	; 0x74
    475e:	a820      	add	r0, sp, #128	; 0x80
    4760:	f003 fbe5 	bl	7f2e <_ZplRK15StringSumHelperRK6String>
    4764:	0007      	movs	r7, r0
    4766:	220a      	movs	r2, #10
    4768:	6a29      	ldr	r1, [r5, #32]
    476a:	a823      	add	r0, sp, #140	; 0x8c
    476c:	f003 fbb4 	bl	7ed8 <_ZN6StringC1Emh>
    4770:	a923      	add	r1, sp, #140	; 0x8c
    4772:	0038      	movs	r0, r7
    4774:	f003 fbdb 	bl	7f2e <_ZplRK15StringSumHelperRK6String>
    4778:	0007      	movs	r7, r0
    477a:	220a      	movs	r2, #10
    477c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    477e:	0020      	movs	r0, r4
    4780:	f003 fbaa 	bl	7ed8 <_ZN6StringC1Emh>
    4784:	0021      	movs	r1, r4
    4786:	0038      	movs	r0, r7
    4788:	f003 fbd1 	bl	7f2e <_ZplRK15StringSumHelperRK6String>
    478c:	0007      	movs	r7, r0
    478e:	220a      	movs	r2, #10
    4790:	6b29      	ldr	r1, [r5, #48]	; 0x30
    4792:	a82a      	add	r0, sp, #168	; 0xa8
    4794:	f003 fba0 	bl	7ed8 <_ZN6StringC1Emh>
    4798:	a92a      	add	r1, sp, #168	; 0xa8
    479a:	0038      	movs	r0, r7
    479c:	f003 fbc7 	bl	7f2e <_ZplRK15StringSumHelperRK6String>
    47a0:	4f9c      	ldr	r7, [pc, #624]	; (4a14 <setup+0x428>)
    47a2:	0039      	movs	r1, r7
    47a4:	f003 fbd0 	bl	7f48 <_ZplRK15StringSumHelperPKc>
    47a8:	0001      	movs	r1, r0
    47aa:	0030      	movs	r0, r6
    47ac:	f001 fd62 	bl	6274 <_ZN5Print7printlnERK6String>
    47b0:	a82a      	add	r0, sp, #168	; 0xa8
    47b2:	f003 fb02 	bl	7dba <_ZN6StringD1Ev>
    47b6:	0020      	movs	r0, r4
    47b8:	f003 faff 	bl	7dba <_ZN6StringD1Ev>
    47bc:	a823      	add	r0, sp, #140	; 0x8c
    47be:	f003 fafc 	bl	7dba <_ZN6StringD1Ev>
    47c2:	a81d      	add	r0, sp, #116	; 0x74
    47c4:	f003 faf9 	bl	7dba <_ZN6StringD1Ev>
class StringSumHelper : public String
    47c8:	a820      	add	r0, sp, #128	; 0x80
    47ca:	f003 faf6 	bl	7dba <_ZN6StringD1Ev>
	data[0] = (byte)((SystemInformation.SerialNumber1 >> 24) & 0xFF);
    47ce:	69ab      	ldr	r3, [r5, #24]
	Serial.print("Chip unique serial number in Base64 encode:\"");
    47d0:	4991      	ldr	r1, [pc, #580]	; (4a18 <setup+0x42c>)
	data[0] = (byte)((SystemInformation.SerialNumber1 >> 24) & 0xFF);
    47d2:	0e1a      	lsrs	r2, r3, #24
    47d4:	7022      	strb	r2, [r4, #0]
	data[1] = (byte)((SystemInformation.SerialNumber1 >> 16) & 0xFF);
    47d6:	0c1a      	lsrs	r2, r3, #16
    47d8:	7062      	strb	r2, [r4, #1]
	data[3] = (byte)(SystemInformation.SerialNumber1 & 0xFF);
    47da:	70e3      	strb	r3, [r4, #3]
	data[2] = (byte)((SystemInformation.SerialNumber1 >> 8) & 0xFF);
    47dc:	0a1a      	lsrs	r2, r3, #8
	data[4] = (byte)((SystemInformation.SerialNumber2 >> 24) & 0xFF);
    47de:	6a2b      	ldr	r3, [r5, #32]
	data[2] = (byte)((SystemInformation.SerialNumber1 >> 8) & 0xFF);
    47e0:	70a2      	strb	r2, [r4, #2]
	data[4] = (byte)((SystemInformation.SerialNumber2 >> 24) & 0xFF);
    47e2:	0e1a      	lsrs	r2, r3, #24
    47e4:	7122      	strb	r2, [r4, #4]
	data[5] = (byte)((SystemInformation.SerialNumber2 >> 16) & 0xFF);
    47e6:	0c1a      	lsrs	r2, r3, #16
    47e8:	7162      	strb	r2, [r4, #5]
	data[7] = (byte)(SystemInformation.SerialNumber2 & 0xFF);
    47ea:	71e3      	strb	r3, [r4, #7]
	data[6] = (byte)((SystemInformation.SerialNumber2 >> 8) & 0xFF);
    47ec:	0a1a      	lsrs	r2, r3, #8
	data[8] = (byte)((SystemInformation.SerialNumber3 >> 24) & 0xFF);
    47ee:	6aab      	ldr	r3, [r5, #40]	; 0x28
	data[6] = (byte)((SystemInformation.SerialNumber2 >> 8) & 0xFF);
    47f0:	71a2      	strb	r2, [r4, #6]
	data[8] = (byte)((SystemInformation.SerialNumber3 >> 24) & 0xFF);
    47f2:	0e1a      	lsrs	r2, r3, #24
    47f4:	7222      	strb	r2, [r4, #8]
	data[9] = (byte)((SystemInformation.SerialNumber3 >> 16) & 0xFF);
    47f6:	0c1a      	lsrs	r2, r3, #16
    47f8:	7262      	strb	r2, [r4, #9]
	data[11] = (byte)(SystemInformation.SerialNumber3 & 0xFF);
    47fa:	72e3      	strb	r3, [r4, #11]
	data[10] = (byte)((SystemInformation.SerialNumber3 >> 8) & 0xFF);
    47fc:	0a1a      	lsrs	r2, r3, #8
	data[12] = (byte)((SystemInformation.SerialNumber4 >> 24) & 0xFF);
    47fe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	data[10] = (byte)((SystemInformation.SerialNumber3 >> 8) & 0xFF);
    4800:	72a2      	strb	r2, [r4, #10]
	data[12] = (byte)((SystemInformation.SerialNumber4 >> 24) & 0xFF);
    4802:	0e1a      	lsrs	r2, r3, #24
    4804:	7322      	strb	r2, [r4, #12]
	data[13] = (byte)((SystemInformation.SerialNumber4 >> 16) & 0xFF);
    4806:	0c1a      	lsrs	r2, r3, #16
    4808:	7362      	strb	r2, [r4, #13]
	Serial.print("Chip unique serial number in Base64 encode:\"");
    480a:	0030      	movs	r0, r6
	data[14] = (byte)((SystemInformation.SerialNumber4 >> 8) & 0xFF);
    480c:	0a1a      	lsrs	r2, r3, #8
	data[15] = (byte)(SystemInformation.SerialNumber4 & 0xFF);
    480e:	73e3      	strb	r3, [r4, #15]
	data[14] = (byte)((SystemInformation.SerialNumber4 >> 8) & 0xFF);
    4810:	73a2      	strb	r2, [r4, #14]
	Serial.print("Chip unique serial number in Base64 encode:\"");
    4812:	f001 fd1e 	bl	6252 <_ZN5Print5printEPKc>
	Serial.print(Telegram::base64_encode(data,SERIALNUMBER_SIZE).c_str());
    4816:	2210      	movs	r2, #16
    4818:	0021      	movs	r1, r4
    481a:	a82a      	add	r0, sp, #168	; 0xa8
    481c:	f000 feae 	bl	557c <_ZN8Telegram13base64_encodeB5cxx11EPhi>
    4820:	992a      	ldr	r1, [sp, #168]	; 0xa8
    4822:	0030      	movs	r0, r6
    4824:	f001 fd15 	bl	6252 <_ZN5Print5printEPKc>

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string()
      { _M_dispose(); }
    4828:	a82a      	add	r0, sp, #168	; 0xa8
    482a:	f003 ff51 	bl	86d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
	Serial.println("\"");
    482e:	0039      	movs	r1, r7
    4830:	0030      	movs	r0, r6
    4832:	f001 fd29 	bl	6288 <_ZN5Print7printlnEPKc>
	PORT->Group[g_APinDescription[0].ulPort].PINCFG[g_APinDescription[0].ulPin].bit.INEN = 0;
    4836:	2100      	movs	r1, #0
    4838:	4b78      	ldr	r3, [pc, #480]	; (4a1c <setup+0x430>)
    483a:	5659      	ldrsb	r1, [r3, r1]
    483c:	685a      	ldr	r2, [r3, #4]
    483e:	01c9      	lsls	r1, r1, #7
    4840:	1851      	adds	r1, r2, r1
    4842:	4a77      	ldr	r2, [pc, #476]	; (4a20 <setup+0x434>)
    4844:	1889      	adds	r1, r1, r2
    4846:	2202      	movs	r2, #2
    4848:	7808      	ldrb	r0, [r1, #0]
    484a:	4390      	bics	r0, r2
    484c:	7008      	strb	r0, [r1, #0]
	PORT->Group[g_APinDescription[1].ulPort].PINCFG[g_APinDescription[1].ulPin].bit.INEN = 0;
    484e:	2118      	movs	r1, #24
    4850:	5659      	ldrsb	r1, [r3, r1]
    4852:	69d8      	ldr	r0, [r3, #28]
    4854:	01c9      	lsls	r1, r1, #7
    4856:	1841      	adds	r1, r0, r1
    4858:	4871      	ldr	r0, [pc, #452]	; (4a20 <setup+0x434>)
    485a:	1809      	adds	r1, r1, r0
    485c:	7808      	ldrb	r0, [r1, #0]
    485e:	4390      	bics	r0, r2
    4860:	7008      	strb	r0, [r1, #0]
	PORT->Group[g_APinDescription[5].ulPort].PINCFG[g_APinDescription[5].ulPin].bit.INEN = 0;
    4862:	0019      	movs	r1, r3
    4864:	3178      	adds	r1, #120	; 0x78
    4866:	7809      	ldrb	r1, [r1, #0]
    4868:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    486a:	b249      	sxtb	r1, r1
    486c:	01c9      	lsls	r1, r1, #7
    486e:	1841      	adds	r1, r0, r1
    4870:	486b      	ldr	r0, [pc, #428]	; (4a20 <setup+0x434>)
    4872:	1809      	adds	r1, r1, r0
    4874:	7808      	ldrb	r0, [r1, #0]
    4876:	4390      	bics	r0, r2
    4878:	7008      	strb	r0, [r1, #0]
	PORT->Group[g_APinDescription[17].ulPort].PINCFG[g_APinDescription[17].ulPin].bit.INEN = 0;
    487a:	21cc      	movs	r1, #204	; 0xcc
    487c:	0049      	lsls	r1, r1, #1
    487e:	5658      	ldrsb	r0, [r3, r1]
    4880:	3104      	adds	r1, #4
    4882:	5859      	ldr	r1, [r3, r1]
    4884:	01c0      	lsls	r0, r0, #7
    4886:	1809      	adds	r1, r1, r0
    4888:	4865      	ldr	r0, [pc, #404]	; (4a20 <setup+0x434>)
    488a:	1809      	adds	r1, r1, r0
    488c:	7808      	ldrb	r0, [r1, #0]
    488e:	4390      	bics	r0, r2
    4890:	7008      	strb	r0, [r1, #0]
	PORT->Group[g_APinDescription[18].ulPort].PINCFG[g_APinDescription[18].ulPin].bit.INEN = 0;
    4892:	21d8      	movs	r1, #216	; 0xd8
    4894:	0049      	lsls	r1, r1, #1
    4896:	5658      	ldrsb	r0, [r3, r1]
    4898:	3104      	adds	r1, #4
    489a:	5859      	ldr	r1, [r3, r1]
    489c:	01c0      	lsls	r0, r0, #7
    489e:	1809      	adds	r1, r1, r0
    48a0:	485f      	ldr	r0, [pc, #380]	; (4a20 <setup+0x434>)
    48a2:	1809      	adds	r1, r1, r0
    48a4:	7808      	ldrb	r0, [r1, #0]
    48a6:	4390      	bics	r0, r2
    48a8:	7008      	strb	r0, [r1, #0]
	PORT->Group[g_APinDescription[20].ulPort].PINCFG[g_APinDescription[20].ulPin].bit.INEN = 0;	
    48aa:	21f0      	movs	r1, #240	; 0xf0
    48ac:	0049      	lsls	r1, r1, #1
    48ae:	5658      	ldrsb	r0, [r3, r1]
    48b0:	3104      	adds	r1, #4
    48b2:	5859      	ldr	r1, [r3, r1]
    48b4:	01c0      	lsls	r0, r0, #7
    48b6:	1809      	adds	r1, r1, r0
    48b8:	4859      	ldr	r0, [pc, #356]	; (4a20 <setup+0x434>)
    48ba:	1809      	adds	r1, r1, r0
    48bc:	7808      	ldrb	r0, [r1, #0]
    48be:	4390      	bics	r0, r2
    48c0:	7008      	strb	r0, [r1, #0]
	PORT->Group[g_APinDescription[21].ulPort].PINCFG[g_APinDescription[21].ulPin].bit.INEN = 0;	
    48c2:	21fc      	movs	r1, #252	; 0xfc
    48c4:	0049      	lsls	r1, r1, #1
    48c6:	5658      	ldrsb	r0, [r3, r1]
    48c8:	3104      	adds	r1, #4
    48ca:	5859      	ldr	r1, [r3, r1]
    48cc:	01c0      	lsls	r0, r0, #7
    48ce:	1809      	adds	r1, r1, r0
    48d0:	4853      	ldr	r0, [pc, #332]	; (4a20 <setup+0x434>)
    48d2:	1809      	adds	r1, r1, r0
    48d4:	7808      	ldrb	r0, [r1, #0]
    48d6:	4390      	bics	r0, r2
    48d8:	7008      	strb	r0, [r1, #0]
	PORT->Group[g_APinDescription[32].ulPort].PINCFG[g_APinDescription[32].ulPin].bit.INEN = 0;	
    48da:	21c0      	movs	r1, #192	; 0xc0
    48dc:	20c1      	movs	r0, #193	; 0xc1
    48de:	0089      	lsls	r1, r1, #2
    48e0:	5659      	ldrsb	r1, [r3, r1]
    48e2:	0080      	lsls	r0, r0, #2
    48e4:	581b      	ldr	r3, [r3, r0]
    48e6:	01c9      	lsls	r1, r1, #7
    48e8:	185b      	adds	r3, r3, r1
    48ea:	494d      	ldr	r1, [pc, #308]	; (4a20 <setup+0x434>)
    48ec:	185b      	adds	r3, r3, r1
    48ee:	7819      	ldrb	r1, [r3, #0]
    48f0:	4391      	bics	r1, r2
    48f2:	7019      	strb	r1, [r3, #0]
	PowerONGPS();// Turn on GPS. price 31uA
    48f4:	f7ff fc18 	bl	4128 <_Z10PowerONGPSv>
	GPS = new GPSL80Lite();
    48f8:	2058      	movs	r0, #88	; 0x58
    48fa:	f001 fc79 	bl	61f0 <_Znwj>
    48fe:	0004      	movs	r4, r0
    4900:	f7fe fec4 	bl	368c <_ZN10GPSL80LiteC1Ev>
    4904:	4f47      	ldr	r7, [pc, #284]	; (4a24 <setup+0x438>)
	GPSData = new GpsDataLite();
    4906:	2040      	movs	r0, #64	; 0x40
	GPS = new GPSL80Lite();
    4908:	603c      	str	r4, [r7, #0]
	GPSData = new GpsDataLite();
    490a:	f001 fc71 	bl	61f0 <_Znwj>
    490e:	2240      	movs	r2, #64	; 0x40
    4910:	2100      	movs	r1, #0
    4912:	0004      	movs	r4, r0
    4914:	f006 fd2d 	bl	b372 <memset>
	GPS->init(SerialGPS, GPSData, 57600, GPSRxPin, GPSTxPin);
    4918:	230b      	movs	r3, #11
	GPSData = new GpsDataLite();
    491a:	4e43      	ldr	r6, [pc, #268]	; (4a28 <setup+0x43c>)
	GPS->init(SerialGPS, GPSData, 57600, GPSRxPin, GPSTxPin);
    491c:	4943      	ldr	r1, [pc, #268]	; (4a2c <setup+0x440>)
	GPSData = new GpsDataLite();
    491e:	6034      	str	r4, [r6, #0]
	GPS->init(SerialGPS, GPSData, 57600, GPSRxPin, GPSTxPin);
    4920:	9301      	str	r3, [sp, #4]
    4922:	3301      	adds	r3, #1
    4924:	9300      	str	r3, [sp, #0]
    4926:	23e1      	movs	r3, #225	; 0xe1
    4928:	0022      	movs	r2, r4
    492a:	021b      	lsls	r3, r3, #8
    492c:	6809      	ldr	r1, [r1, #0]
    492e:	6838      	ldr	r0, [r7, #0]
    4930:	f7fe fffc 	bl	392c <_ZN10GPSL80Lite4initEP4UartP11GpsDataLitemii>
	Radio = new E28_2G4M20S(chipSelectPin,resetPin,busyPin,dio1Pin,0,0,txEnPin,rxEnPin, led2Pin);
    4934:	20a0      	movs	r0, #160	; 0xa0
    4936:	f001 fc5b 	bl	61f0 <_Znwj>
    493a:	2315      	movs	r3, #21
    493c:	2400      	movs	r4, #0
    493e:	0007      	movs	r7, r0
    4940:	9305      	str	r3, [sp, #20]
    4942:	3b04      	subs	r3, #4
    4944:	9304      	str	r3, [sp, #16]
    4946:	330f      	adds	r3, #15
    4948:	9303      	str	r3, [sp, #12]
    494a:	3b07      	subs	r3, #7
    494c:	9300      	str	r3, [sp, #0]
    494e:	2204      	movs	r2, #4
    4950:	2101      	movs	r1, #1
    4952:	9402      	str	r4, [sp, #8]
    4954:	9401      	str	r4, [sp, #4]
    4956:	3b14      	subs	r3, #20
    4958:	f7fd fbdc 	bl	2114 <_ZN11E28_2G4M20SC1Eiiiiiiiii>
    495c:	4b34      	ldr	r3, [pc, #208]	; (4a30 <setup+0x444>)
	RadioService = new RFService(Radio, GPSData, &SystemInformation);
    495e:	4835      	ldr	r0, [pc, #212]	; (4a34 <setup+0x448>)
	Radio = new E28_2G4M20S(chipSelectPin,resetPin,busyPin,dio1Pin,0,0,txEnPin,rxEnPin, led2Pin);
    4960:	601f      	str	r7, [r3, #0]
	RadioService = new RFService(Radio, GPSData, &SystemInformation);
    4962:	f001 fc45 	bl	61f0 <_Znwj>
    4966:	4932      	ldr	r1, [pc, #200]	; (4a30 <setup+0x444>)
    4968:	6832      	ldr	r2, [r6, #0]
    496a:	002b      	movs	r3, r5
    496c:	6809      	ldr	r1, [r1, #0]
    496e:	901b      	str	r0, [sp, #108]	; 0x6c
    4970:	f000 fa48 	bl	4e04 <_ZN9RFServiceC1EP11E28_2G4M20SP11GpsDataLiteP19SystemInformation_t>
    4974:	4f30      	ldr	r7, [pc, #192]	; (4a38 <setup+0x44c>)
    4976:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
	SerialProtocol = new PCProtocol(RadioService, Radio);
    4978:	20d0      	movs	r0, #208	; 0xd0
	RadioService = new RFService(Radio, GPSData, &SystemInformation);
    497a:	603b      	str	r3, [r7, #0]
	SerialProtocol = new PCProtocol(RadioService, Radio);
    497c:	f001 fc38 	bl	61f0 <_Znwj>
    4980:	4b2b      	ldr	r3, [pc, #172]	; (4a30 <setup+0x444>)
    4982:	6839      	ldr	r1, [r7, #0]
    4984:	681a      	ldr	r2, [r3, #0]
    4986:	0006      	movs	r6, r0
    4988:	f001 f9e1 	bl	5d4e <_ZN10PCProtocolC1EP10RFProtocolP11E28_2G4M20S>
	SerialfrskySPort = new Uart(&sercom3, fryskySmartPortRXPin, fryskySmartPortTXPin, SERCOM_RX_PAD_3, UART_TX_PAD_2);   // Create the new UART instance for the Frsky SPORT module
    498c:	208f      	movs	r0, #143	; 0x8f
	SerialProtocol = new PCProtocol(RadioService, Radio);
    498e:	4b2b      	ldr	r3, [pc, #172]	; (4a3c <setup+0x450>)
	SerialfrskySPort = new Uart(&sercom3, fryskySmartPortRXPin, fryskySmartPortTXPin, SERCOM_RX_PAD_3, UART_TX_PAD_2);   // Create the new UART instance for the Frsky SPORT module
    4990:	0080      	lsls	r0, r0, #2
	SerialProtocol = new PCProtocol(RadioService, Radio);
    4992:	601e      	str	r6, [r3, #0]
	SerialfrskySPort = new Uart(&sercom3, fryskySmartPortRXPin, fryskySmartPortTXPin, SERCOM_RX_PAD_3, UART_TX_PAD_2);   // Create the new UART instance for the Frsky SPORT module
    4994:	f001 fc2c 	bl	61f0 <_Znwj>
    4998:	2301      	movs	r3, #1
    499a:	9301      	str	r3, [sp, #4]
    499c:	3302      	adds	r3, #2
    499e:	2207      	movs	r2, #7
    49a0:	9300      	str	r3, [sp, #0]
    49a2:	4927      	ldr	r1, [pc, #156]	; (4a40 <setup+0x454>)
    49a4:	3303      	adds	r3, #3
    49a6:	0006      	movs	r6, r0
    49a8:	f001 fea8 	bl	66fc <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
	SerialfrskySPort->begin(57600);  //Baudrate for frskys SPORT protocol.
    49ac:	21e1      	movs	r1, #225	; 0xe1
	SerialfrskySPort = new Uart(&sercom3, fryskySmartPortRXPin, fryskySmartPortTXPin, SERCOM_RX_PAD_3, UART_TX_PAD_2);   // Create the new UART instance for the Frsky SPORT module
    49ae:	4f25      	ldr	r7, [pc, #148]	; (4a44 <setup+0x458>)
	SerialfrskySPort->begin(57600);  //Baudrate for frskys SPORT protocol.
    49b0:	0030      	movs	r0, r6
    49b2:	0209      	lsls	r1, r1, #8
	SerialfrskySPort = new Uart(&sercom3, fryskySmartPortRXPin, fryskySmartPortTXPin, SERCOM_RX_PAD_3, UART_TX_PAD_2);   // Create the new UART instance for the Frsky SPORT module
    49b4:	603e      	str	r6, [r7, #0]
	SerialfrskySPort->begin(57600);  //Baudrate for frskys SPORT protocol.
    49b6:	f001 fdc3 	bl	6540 <_ZN4Uart5beginEm>
	pinPeripheral(fryskySmartPortRXPin, PIO_SERCOM_ALT); //Assign RX function to pin.
    49ba:	2103      	movs	r1, #3
    49bc:	2007      	movs	r0, #7
    49be:	f003 f993 	bl	7ce8 <pinPeripheral>
	pinPeripheral(fryskySmartPortTXPin, PIO_SERCOM_ALT); //Assign TX function to pin.
    49c2:	2103      	movs	r1, #3
    49c4:	2006      	movs	r0, #6
    49c6:	f003 f98f 	bl	7ce8 <pinPeripheral>
	FrskySport.begin(SerialfrskySPort, &FrskyGPS);
    49ca:	9419      	str	r4, [sp, #100]	; 0x64
    49cc:	9418      	str	r4, [sp, #96]	; 0x60
    49ce:	9417      	str	r4, [sp, #92]	; 0x5c
    49d0:	9416      	str	r4, [sp, #88]	; 0x58
    49d2:	9415      	str	r4, [sp, #84]	; 0x54
    49d4:	9414      	str	r4, [sp, #80]	; 0x50
    49d6:	9413      	str	r4, [sp, #76]	; 0x4c
    49d8:	9412      	str	r4, [sp, #72]	; 0x48
    49da:	9411      	str	r4, [sp, #68]	; 0x44
    49dc:	9410      	str	r4, [sp, #64]	; 0x40
    49de:	940f      	str	r4, [sp, #60]	; 0x3c
    49e0:	e032      	b.n	4a48 <setup+0x45c>
    49e2:	46c0      	nop			; (mov r8, r8)
    49e4:	00001388 	.word	0x00001388
    49e8:	2000014c 	.word	0x2000014c
    49ec:	200002b0 	.word	0x200002b0
    49f0:	0000bac9 	.word	0x0000bac9
    49f4:	20000250 	.word	0x20000250
    49f8:	0000b9c0 	.word	0x0000b9c0
    49fc:	42c80000 	.word	0x42c80000
    4a00:	0000bae7 	.word	0x0000bae7
    4a04:	0000bb09 	.word	0x0000bb09
    4a08:	0000bb2b 	.word	0x0000bb2b
    4a0c:	0000bb4d 	.word	0x0000bb4d
    4a10:	0000bb6f 	.word	0x0000bb6f
    4a14:	0000bb8a 	.word	0x0000bb8a
    4a18:	0000bb8c 	.word	0x0000bb8c
    4a1c:	0000be50 	.word	0x0000be50
    4a20:	41004440 	.word	0x41004440
    4a24:	2000023c 	.word	0x2000023c
    4a28:	20000240 	.word	0x20000240
    4a2c:	20000150 	.word	0x20000150
    4a30:	20000244 	.word	0x20000244
    4a34:	00001054 	.word	0x00001054
    4a38:	20000248 	.word	0x20000248
    4a3c:	2000024c 	.word	0x2000024c
    4a40:	200008bc 	.word	0x200008bc
    4a44:	20000158 	.word	0x20000158
    4a48:	940e      	str	r4, [sp, #56]	; 0x38
    4a4a:	940d      	str	r4, [sp, #52]	; 0x34
    4a4c:	940c      	str	r4, [sp, #48]	; 0x30
    4a4e:	940b      	str	r4, [sp, #44]	; 0x2c
    4a50:	940a      	str	r4, [sp, #40]	; 0x28
    4a52:	9409      	str	r4, [sp, #36]	; 0x24
    4a54:	9408      	str	r4, [sp, #32]
    4a56:	9407      	str	r4, [sp, #28]
    4a58:	9406      	str	r4, [sp, #24]
    4a5a:	9405      	str	r4, [sp, #20]
    4a5c:	9404      	str	r4, [sp, #16]
    4a5e:	9403      	str	r4, [sp, #12]
    4a60:	9402      	str	r4, [sp, #8]
    4a62:	9401      	str	r4, [sp, #4]
    4a64:	9400      	str	r4, [sp, #0]
    4a66:	0023      	movs	r3, r4
    4a68:	4a0c      	ldr	r2, [pc, #48]	; (4a9c <setup+0x4b0>)
    4a6a:	6839      	ldr	r1, [r7, #0]
    4a6c:	480c      	ldr	r0, [pc, #48]	; (4aa0 <setup+0x4b4>)
    4a6e:	f7fe fd90 	bl	3592 <_ZN19FrSkySportTelemetry5beginEP4UartP16FrSkySportSensorS3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_>
	startTimer3(1); // 1Hz
    4a72:	2001      	movs	r0, #1
    4a74:	f001 faa8 	bl	5fc8 <_Z11startTimer3i>
	SystemInformation.state=STARTING_UP;
    4a78:	71ec      	strb	r4, [r5, #7]
	PowerON(); // Ensure transponder keeps running from battery if external power is lost.
    4a7a:	f7ff fb49 	bl	4110 <_Z7PowerONv>
	PowerONGPSBackup(); // Enable backup power for GPS.
    4a7e:	f7ff fb5f 	bl	4140 <_Z16PowerONGPSBackupv>
	SystemInformation.BatteryVoltage = getBatteryVoltage();
    4a82:	f7ff fb0b 	bl	409c <_Z17getBatteryVoltagev>
    4a86:	60a8      	str	r0, [r5, #8]
	SystemInformation.InputVoltage = getInputVoltage();
    4a88:	f7ff fb22 	bl	40d0 <_Z15getInputVoltagev>
    4a8c:	60e8      	str	r0, [r5, #12]
	SystemInformation.USBVoltage = getInput5VVoltage();
    4a8e:	f7ff fb2f 	bl	40f0 <_Z17getInput5VVoltagev>
    4a92:	6128      	str	r0, [r5, #16]
	LEDSaftySwitchOFF();
    4a94:	f7ff fb60 	bl	4158 <_Z17LEDSaftySwitchOFFv>
}
    4a98:	b031      	add	sp, #196	; 0xc4
    4a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a9c:	2000015c 	.word	0x2000015c
    4aa0:	200001b8 	.word	0x200001b8

00004aa4 <_ZN10RFProtocolC1EP11E28_2G4M20S>:
	Not for commercial use
 */ 
 #include "RFProtocol.h"
 #include "hw.h" // only for SerialAUX debug

 RFProtocol::RFProtocol(E28_2G4M20S *Radio){
    4aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4aa6:	4b0e      	ldr	r3, [pc, #56]	; (4ae0 <_ZN10RFProtocolC1EP11E28_2G4M20S+0x3c>)
}

template <typename ET, size_t S, typename IT, typename BT>
RingBuf<ET, S, IT, BT>::RingBuf() :
mReadIndex(0),
mSize(0)
    4aa8:	2500      	movs	r5, #0
    4aaa:	6003      	str	r3, [r0, #0]
    4aac:	0003      	movs	r3, r0
    4aae:	0002      	movs	r2, r0
    4ab0:	0007      	movs	r7, r0
    4ab2:	0004      	movs	r4, r0
    4ab4:	000e      	movs	r6, r1
    4ab6:	3380      	adds	r3, #128	; 0x80
    4ab8:	701d      	strb	r5, [r3, #0]
    4aba:	705d      	strb	r5, [r3, #1]
    4abc:	32fd      	adds	r2, #253	; 0xfd
    4abe:	337c      	adds	r3, #124	; 0x7c
    4ac0:	37ff      	adds	r7, #255	; 0xff
    4ac2:	701d      	strb	r5, [r3, #0]
	this->Radio = Radio;

	Radio->Init();
    4ac4:	0008      	movs	r0, r1
    4ac6:	7015      	strb	r5, [r2, #0]
 RFProtocol::RFProtocol(E28_2G4M20S *Radio){
    4ac8:	707d      	strb	r5, [r7, #1]
    4aca:	609d      	str	r5, [r3, #8]
	this->Radio = Radio;
    4acc:	6061      	str	r1, [r4, #4]
	Radio->Init();
    4ace:	f7fd fb7f 	bl	21d0 <_ZN11E28_2G4M20S4InitEv>
	Radio->SetRXMode(false); // no timeout
    4ad2:	0030      	movs	r0, r6
    4ad4:	0029      	movs	r1, r5
    4ad6:	f7fd fbc3 	bl	2260 <_ZN11E28_2G4M20S9SetRXModeEb>
	this->RFstate = RX_IDLE;
    4ada:	707d      	strb	r5, [r7, #1]
 }
    4adc:	0020      	movs	r0, r4
    4ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4ae0:	0000bbc4 	.word	0x0000bbc4

00004ae4 <_ZN10RFProtocol9AvailableEv>:
}


 int RFProtocol::Available()
 {
	 return this->rxFIFO.size();
    4ae4:	3081      	adds	r0, #129	; 0x81
    4ae6:	7800      	ldrb	r0, [r0, #0]
 }
    4ae8:	4770      	bx	lr
	...

00004aec <_ZN10RFProtocol17ConvertToTelegramEP11RadioData_t>:


Telegram * RFProtocol::ConvertToTelegram(RadioData_t *newdata) // must delete newdata to avoid memory leaks.
{ 
    4aec:	b570      	push	{r4, r5, r6, lr}
	 SerialAUX->print("New message is...");
    4aee:	4d1a      	ldr	r5, [pc, #104]	; (4b58 <_ZN10RFProtocol17ConvertToTelegramEP11RadioData_t+0x6c>)
{ 
    4af0:	000e      	movs	r6, r1
	 SerialAUX->print("New message is...");
    4af2:	6828      	ldr	r0, [r5, #0]
    4af4:	4919      	ldr	r1, [pc, #100]	; (4b5c <_ZN10RFProtocol17ConvertToTelegramEP11RadioData_t+0x70>)
    4af6:	f001 fbac 	bl	6252 <_ZN5Print5printEPKc>
	 if(newdata == NULL){
		SerialAUX->println("NULL!");
    4afa:	4919      	ldr	r1, [pc, #100]	; (4b60 <_ZN10RFProtocol17ConvertToTelegramEP11RadioData_t+0x74>)
	 if(newdata == NULL){
    4afc:	2e00      	cmp	r6, #0
    4afe:	d026      	beq.n	4b4e <_ZN10RFProtocol17ConvertToTelegramEP11RadioData_t+0x62>
	 
	 ProtocolMSG_t newMessageID = (ProtocolMSG_t)newdata->payload[0];
	 
	 Telegram *msg =NULL;

	 switch(newMessageID)
    4b00:	7833      	ldrb	r3, [r6, #0]
    4b02:	2b02      	cmp	r3, #2
    4b04:	d011      	beq.n	4b2a <_ZN10RFProtocol17ConvertToTelegramEP11RadioData_t+0x3e>
    4b06:	2b03      	cmp	r3, #3
    4b08:	d018      	beq.n	4b3c <_ZN10RFProtocol17ConvertToTelegramEP11RadioData_t+0x50>
			 SerialAUX->println("MSG 3");
		 }
		 break;
		 
		 default:
			SerialAUX->println("Unknown/Null!");
    4b0a:	4916      	ldr	r1, [pc, #88]	; (4b64 <_ZN10RFProtocol17ConvertToTelegramEP11RadioData_t+0x78>)
	 switch(newMessageID)
    4b0c:	2b01      	cmp	r3, #1
    4b0e:	d11e      	bne.n	4b4e <_ZN10RFProtocol17ConvertToTelegramEP11RadioData_t+0x62>
			 msg = new Telegram_MSG_1(newdata);
    4b10:	2080      	movs	r0, #128	; 0x80
    4b12:	f001 fb6d 	bl	61f0 <_Znwj>
    4b16:	0031      	movs	r1, r6
    4b18:	0004      	movs	r4, r0
    4b1a:	f000 fea1 	bl	5860 <_ZN14Telegram_MSG_1C1EP11RadioData_t>
			 SerialAUX->println("MSG 1");
    4b1e:	4912      	ldr	r1, [pc, #72]	; (4b68 <_ZN10RFProtocol17ConvertToTelegramEP11RadioData_t+0x7c>)
			 SerialAUX->println("MSG 3");
    4b20:	6828      	ldr	r0, [r5, #0]
    4b22:	f001 fbb1 	bl	6288 <_ZN5Print7printlnEPKc>
			 msg = new Telegram_MSG_3(newdata);
    4b26:	0020      	movs	r0, r4
			return NULL;
		 break;
	 }
	return msg;	
 }
    4b28:	bd70      	pop	{r4, r5, r6, pc}
			 msg = new Telegram_MSG_2(newdata);
    4b2a:	2080      	movs	r0, #128	; 0x80
    4b2c:	f001 fb60 	bl	61f0 <_Znwj>
    4b30:	0031      	movs	r1, r6
    4b32:	0004      	movs	r4, r0
    4b34:	f000 ff56 	bl	59e4 <_ZN14Telegram_MSG_2C1EP11RadioData_t>
			 SerialAUX->println("MSG 2");
    4b38:	490c      	ldr	r1, [pc, #48]	; (4b6c <_ZN10RFProtocol17ConvertToTelegramEP11RadioData_t+0x80>)
    4b3a:	e7f1      	b.n	4b20 <_ZN10RFProtocol17ConvertToTelegramEP11RadioData_t+0x34>
			 msg = new Telegram_MSG_3(newdata);
    4b3c:	2058      	movs	r0, #88	; 0x58
    4b3e:	f001 fb57 	bl	61f0 <_Znwj>
    4b42:	0031      	movs	r1, r6
    4b44:	0004      	movs	r4, r0
    4b46:	f001 f8e9 	bl	5d1c <_ZN14Telegram_MSG_3C1EP11RadioData_t>
			 SerialAUX->println("MSG 3");
    4b4a:	4909      	ldr	r1, [pc, #36]	; (4b70 <_ZN10RFProtocol17ConvertToTelegramEP11RadioData_t+0x84>)
    4b4c:	e7e8      	b.n	4b20 <_ZN10RFProtocol17ConvertToTelegramEP11RadioData_t+0x34>
			SerialAUX->println("Unknown/Null!");
    4b4e:	6828      	ldr	r0, [r5, #0]
    4b50:	f001 fb9a 	bl	6288 <_ZN5Print7printlnEPKc>
			return NULL;
    4b54:	2000      	movs	r0, #0
    4b56:	e7e7      	b.n	4b28 <_ZN10RFProtocol17ConvertToTelegramEP11RadioData_t+0x3c>
    4b58:	2000014c 	.word	0x2000014c
    4b5c:	0000bbd0 	.word	0x0000bbd0
    4b60:	0000bbe2 	.word	0x0000bbe2
    4b64:	0000bbfa 	.word	0x0000bbfa
    4b68:	0000bbe8 	.word	0x0000bbe8
    4b6c:	0000bbee 	.word	0x0000bbee
    4b70:	0000bbf4 	.word	0x0000bbf4

00004b74 <_ZN10RFProtocol7_WakeUpEv>:
		}while(this->RFstate!=RX_IDLE);

	Radio->Sleep();
}		

void RFProtocol::_WakeUp(){
    4b74:	b510      	push	{r4, lr}
    4b76:	0004      	movs	r4, r0
	Radio->WakeUp();
    4b78:	6840      	ldr	r0, [r0, #4]
    4b7a:	f7fd fbb3 	bl	22e4 <_ZN11E28_2G4M20S6WakeUpEv>
	Radio->SetRXMode(false); // Set Radio to RX mode with timeout. This will trigger rx.timeout, and thus the continues flow of the statemachine, should there be data left in TX fifo.
    4b7e:	2100      	movs	r1, #0
    4b80:	6860      	ldr	r0, [r4, #4]
    4b82:	f7fd fb6d 	bl	2260 <_ZN11E28_2G4M20S9SetRXModeEb>
}
    4b86:	bd10      	pop	{r4, pc}

00004b88 <_ZN10RFProtocol7ServiceEv>:

void RFProtocol::Service(){
    4b88:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b8a:	0004      	movs	r4, r0
    4b8c:	b085      	sub	sp, #20

	if(Radio->GetDioPinStatus() == HIGH){
    4b8e:	6840      	ldr	r0, [r0, #4]
    4b90:	f7fd fcac 	bl	24ec <_ZN11E28_2G4M20S15GetDioPinStatusEv>
    4b94:	2801      	cmp	r0, #1
    4b96:	d107      	bne.n	4ba8 <_ZN10RFProtocol7ServiceEv+0x20>
		SerialAUX->println("IRQ from Radio");	
    4b98:	4b45      	ldr	r3, [pc, #276]	; (4cb0 <_ZN10RFProtocol7ServiceEv+0x128>)
    4b9a:	4946      	ldr	r1, [pc, #280]	; (4cb4 <_ZN10RFProtocol7ServiceEv+0x12c>)
    4b9c:	6818      	ldr	r0, [r3, #0]
    4b9e:	f001 fb73 	bl	6288 <_ZN5Print7printlnEPKc>
		this->Radio->IRQHandler();
    4ba2:	6860      	ldr	r0, [r4, #4]
    4ba4:	f7fd fc3f 	bl	2426 <_ZN11E28_2G4M20S10IRQHandlerEv>
	}

	RadioIRQStatus_t status = Radio->GetRadioStatus();
    4ba8:	6860      	ldr	r0, [r4, #4]
    4baa:	f7fd fbab 	bl	2304 <_ZN11E28_2G4M20S14GetRadioStatusEv>
    4bae:	0c03      	lsrs	r3, r0, #16
    4bb0:	b2db      	uxtb	r3, r3
    4bb2:	0a07      	lsrs	r7, r0, #8
    4bb4:	9003      	str	r0, [sp, #12]
    4bb6:	b2c6      	uxtb	r6, r0
    4bb8:	0e05      	lsrs	r5, r0, #24
	Radio->ClearRadioStatus();
    4bba:	6860      	ldr	r0, [r4, #4]
	RadioIRQStatus_t status = Radio->GetRadioStatus();
    4bbc:	9300      	str	r3, [sp, #0]
	Radio->ClearRadioStatus();
    4bbe:	f7fd fbb2 	bl	2326 <_ZN11E28_2G4M20S16ClearRadioStatusEv>
	RFProtocolStates_t nextState = RX_IDLE;

//	SerialAUX->println("Service RF Statemachine state:" + String(RX_IDLE) + " and nextState:" + String(nextState));


	switch(this->RFstate)
    4bc2:	0023      	movs	r3, r4
    4bc4:	33ff      	adds	r3, #255	; 0xff
    4bc6:	9301      	str	r3, [sp, #4]
    4bc8:	7858      	ldrb	r0, [r3, #1]
	RadioIRQStatus_t status = Radio->GetRadioStatus();
    4bca:	b2ff      	uxtb	r7, r7
	switch(this->RFstate)
    4bcc:	2803      	cmp	r0, #3
    4bce:	d80f      	bhi.n	4bf0 <_ZN10RFProtocol7ServiceEv+0x68>
    4bd0:	f003 feda 	bl	8988 <__gnu_thumb1_case_uqi>
    4bd4:	55422b02 	.word	0x55422b02
		case RX_IDLE:
		{
			nextState=RX_IDLE;

			// fail fast:
			if((status.txDone == true) || (status.txTimeout == true) || (status.rxTimeout == true))
    4bd8:	2e00      	cmp	r6, #0
    4bda:	d104      	bne.n	4be6 <_ZN10RFProtocol7ServiceEv+0x5e>
    4bdc:	9b00      	ldr	r3, [sp, #0]
    4bde:	2b00      	cmp	r3, #0
    4be0:	d101      	bne.n	4be6 <_ZN10RFProtocol7ServiceEv+0x5e>
    4be2:	2d00      	cmp	r5, #0
    4be4:	d00a      	beq.n	4bfc <_ZN10RFProtocol7ServiceEv+0x74>
			{
				// This must be a mistake?
				SerialAUX->println("RF Protocol Error: txDone||txTimeout||rxTimeout in RX_IDLE State - Nextstate set to RX_IDLE");
    4be6:	4b32      	ldr	r3, [pc, #200]	; (4cb0 <_ZN10RFProtocol7ServiceEv+0x128>)
    4be8:	4933      	ldr	r1, [pc, #204]	; (4cb8 <_ZN10RFProtocol7ServiceEv+0x130>)
    4bea:	6818      	ldr	r0, [r3, #0]
    4bec:	f001 fb4c 	bl	6288 <_ZN5Print7printlnEPKc>
		break;
		
		default:
			nextState=RX_IDLE;
//			SerialAUX->println("Error! - Default!");
			Radio->SetRXMode(false); // Set RX without.
    4bf0:	2100      	movs	r1, #0
    4bf2:	6860      	ldr	r0, [r4, #4]
    4bf4:	f7fd fb34 	bl	2260 <_ZN11E28_2G4M20S9SetRXModeEb>
			nextState=RX_IDLE;
    4bf8:	2700      	movs	r7, #0
		break;
    4bfa:	e008      	b.n	4c0e <_ZN10RFProtocol7ServiceEv+0x86>
    4bfc:	6823      	ldr	r3, [r4, #0]
				if(status.rxDone == true)
    4bfe:	2f00      	cmp	r7, #0
    4c00:	d001      	beq.n	4c06 <_ZN10RFProtocol7ServiceEv+0x7e>
					nextState=RXHandler(); // Returns TX_WITHOUT_REPLY || TX_WITH_REPLY || RX_IDLE
    4c02:	685b      	ldr	r3, [r3, #4]
    4c04:	e000      	b.n	4c08 <_ZN10RFProtocol7ServiceEv+0x80>
 					nextState=TXHandler(); // Returns TX_WITHOUT_REPLY || TX_WITH_REPLY || RX_IDLE
    4c06:	689b      	ldr	r3, [r3, #8]
					nextState=RXHandler(); // Returns TX_WITHOUT_REPLY || TX_WITH_REPLY || RX_IDLE
    4c08:	0020      	movs	r0, r4
    4c0a:	4798      	blx	r3
    4c0c:	0007      	movs	r7, r0
	}
	
	if(this->RFstate != nextState){
    4c0e:	9b01      	ldr	r3, [sp, #4]
    4c10:	785b      	ldrb	r3, [r3, #1]
    4c12:	42bb      	cmp	r3, r7
    4c14:	d007      	beq.n	4c26 <_ZN10RFProtocol7ServiceEv+0x9e>
		this->timeoutStart = milliSeconds(); // for software timeout.
    4c16:	6823      	ldr	r3, [r4, #0]
    4c18:	0020      	movs	r0, r4
    4c1a:	681b      	ldr	r3, [r3, #0]
    4c1c:	4798      	blx	r3
//		SerialAUX->println("New state! - RFSate:" +String(RFstate) + " NextState:" + String(nextState));
		this->RFstate=nextState;
    4c1e:	9b01      	ldr	r3, [sp, #4]
		this->timeoutStart = milliSeconds(); // for software timeout.
    4c20:	34fc      	adds	r4, #252	; 0xfc
    4c22:	60a0      	str	r0, [r4, #8]
		this->RFstate=nextState;
    4c24:	705f      	strb	r7, [r3, #1]
	}
}
    4c26:	b005      	add	sp, #20
    4c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if((status.txDone == true) || (status.txTimeout == true))
    4c2a:	2e00      	cmp	r6, #0
    4c2c:	d1e0      	bne.n	4bf0 <_ZN10RFProtocol7ServiceEv+0x68>
    4c2e:	9b00      	ldr	r3, [sp, #0]
    4c30:	2b00      	cmp	r3, #0
    4c32:	d1dd      	bne.n	4bf0 <_ZN10RFProtocol7ServiceEv+0x68>
				if(status.rxDone == true)
    4c34:	2f00      	cmp	r7, #0
    4c36:	d001      	beq.n	4c3c <_ZN10RFProtocol7ServiceEv+0xb4>
					nextState=RXHandler(); // Returns TX_WITHOUT_REPLY || TX_WITH_REPLY || RX_IDLE
    4c38:	6823      	ldr	r3, [r4, #0]
    4c3a:	e7e2      	b.n	4c02 <_ZN10RFProtocol7ServiceEv+0x7a>
					if(status.rxTimeout == true){
    4c3c:	2d00      	cmp	r5, #0
    4c3e:	d1d7      	bne.n	4bf0 <_ZN10RFProtocol7ServiceEv+0x68>
						if(milliSeconds() > this->timeoutStart+TIMEOUT_MS){
    4c40:	6823      	ldr	r3, [r4, #0]
    4c42:	0020      	movs	r0, r4
    4c44:	681b      	ldr	r3, [r3, #0]
    4c46:	4798      	blx	r3
    4c48:	0023      	movs	r3, r4
			nextState=WAITING_FOR_REPLY;
    4c4a:	2701      	movs	r7, #1
						if(milliSeconds() > this->timeoutStart+TIMEOUT_MS){
    4c4c:	33fc      	adds	r3, #252	; 0xfc
    4c4e:	689b      	ldr	r3, [r3, #8]
    4c50:	3364      	adds	r3, #100	; 0x64
					if(milliSeconds() > this->timeoutStart+TIMEOUT_MS){
    4c52:	4298      	cmp	r0, r3
    4c54:	d9db      	bls.n	4c0e <_ZN10RFProtocol7ServiceEv+0x86>
    4c56:	e7cb      	b.n	4bf0 <_ZN10RFProtocol7ServiceEv+0x68>
			if((status.rxDone == true) || (status.rxTimeout == true) || (status.txTimeout == true)) 
    4c58:	2f00      	cmp	r7, #0
    4c5a:	d1c9      	bne.n	4bf0 <_ZN10RFProtocol7ServiceEv+0x68>
    4c5c:	2d00      	cmp	r5, #0
    4c5e:	d1c7      	bne.n	4bf0 <_ZN10RFProtocol7ServiceEv+0x68>
    4c60:	9b00      	ldr	r3, [sp, #0]
    4c62:	2b00      	cmp	r3, #0
    4c64:	d1c4      	bne.n	4bf0 <_ZN10RFProtocol7ServiceEv+0x68>
				if(status.txDone == true){
    4c66:	2e00      	cmp	r6, #0
    4c68:	d1c2      	bne.n	4bf0 <_ZN10RFProtocol7ServiceEv+0x68>
					if(milliSeconds() > this->timeoutStart+TIMEOUT_MS){
    4c6a:	6823      	ldr	r3, [r4, #0]
    4c6c:	0020      	movs	r0, r4
    4c6e:	681b      	ldr	r3, [r3, #0]
    4c70:	4798      	blx	r3
    4c72:	0023      	movs	r3, r4
    4c74:	33fc      	adds	r3, #252	; 0xfc
    4c76:	689b      	ldr	r3, [r3, #8]
			nextState=TX_WITHOUT_REPLY;
    4c78:	3702      	adds	r7, #2
					if(milliSeconds() > this->timeoutStart+TIMEOUT_MS){
    4c7a:	3364      	adds	r3, #100	; 0x64
    4c7c:	e7e9      	b.n	4c52 <_ZN10RFProtocol7ServiceEv+0xca>
			if((status.rxDone == true) || (status.rxTimeout == true) || (status.txTimeout == true))
    4c7e:	2f00      	cmp	r7, #0
    4c80:	d1b6      	bne.n	4bf0 <_ZN10RFProtocol7ServiceEv+0x68>
    4c82:	2d00      	cmp	r5, #0
    4c84:	d1b4      	bne.n	4bf0 <_ZN10RFProtocol7ServiceEv+0x68>
    4c86:	9b00      	ldr	r3, [sp, #0]
    4c88:	2b00      	cmp	r3, #0
    4c8a:	d1b1      	bne.n	4bf0 <_ZN10RFProtocol7ServiceEv+0x68>
				if(status.txDone == true){
    4c8c:	2e00      	cmp	r6, #0
    4c8e:	d005      	beq.n	4c9c <_ZN10RFProtocol7ServiceEv+0x114>
					Radio->SetRXMode(true); // Set RX with timeout.
    4c90:	2101      	movs	r1, #1
    4c92:	6860      	ldr	r0, [r4, #4]
    4c94:	f7fd fae4 	bl	2260 <_ZN11E28_2G4M20S9SetRXModeEb>
					nextState=WAITING_FOR_REPLY;
    4c98:	3701      	adds	r7, #1
    4c9a:	e7b8      	b.n	4c0e <_ZN10RFProtocol7ServiceEv+0x86>
					if(milliSeconds() > this->timeoutStart+TIMEOUT_MS){
    4c9c:	6823      	ldr	r3, [r4, #0]
    4c9e:	0020      	movs	r0, r4
    4ca0:	681b      	ldr	r3, [r3, #0]
    4ca2:	4798      	blx	r3
    4ca4:	0023      	movs	r3, r4
    4ca6:	33fc      	adds	r3, #252	; 0xfc
    4ca8:	689b      	ldr	r3, [r3, #8]
			nextState=TX_WITH_REPLY;
    4caa:	2703      	movs	r7, #3
					if(milliSeconds() > this->timeoutStart+TIMEOUT_MS){
    4cac:	3364      	adds	r3, #100	; 0x64
    4cae:	e7d0      	b.n	4c52 <_ZN10RFProtocol7ServiceEv+0xca>
    4cb0:	2000014c 	.word	0x2000014c
    4cb4:	0000bc1f 	.word	0x0000bc1f
    4cb8:	0000bc2e 	.word	0x0000bc2e

00004cbc <_ZN10RFProtocol10_PowerDownEv>:
void RFProtocol::_PowerDown(){
    4cbc:	b510      	push	{r4, lr}
    4cbe:	0004      	movs	r4, r0
		this->Service();
    4cc0:	0020      	movs	r0, r4
    4cc2:	f7ff ff61 	bl	4b88 <_ZN10RFProtocol7ServiceEv>
		}while(this->RFstate!=RX_IDLE);
    4cc6:	0023      	movs	r3, r4
    4cc8:	33ff      	adds	r3, #255	; 0xff
    4cca:	785b      	ldrb	r3, [r3, #1]
    4ccc:	2b00      	cmp	r3, #0
    4cce:	d1f7      	bne.n	4cc0 <_ZN10RFProtocol10_PowerDownEv+0x4>
	Radio->Sleep();
    4cd0:	6860      	ldr	r0, [r4, #4]
    4cd2:	f7fd faf5 	bl	22c0 <_ZN11E28_2G4M20S5SleepEv>
}		
    4cd6:	bd10      	pop	{r4, pc}

00004cd8 <_ZN7RingBufIP8TelegramLj30EhtE4pushES1_>:
{
}

template <typename ET, size_t S, typename IT, typename BT>
bool RingBuf<ET, S, IT, BT>::push(const ET inElement)
    4cd8:	b510      	push	{r4, lr}
    4cda:	0004      	movs	r4, r0
    4cdc:	3479      	adds	r4, #121	; 0x79
    4cde:	7822      	ldrb	r2, [r4, #0]
{
  if (isFull()) return false;
    4ce0:	2300      	movs	r3, #0
    4ce2:	2a1e      	cmp	r2, #30
    4ce4:	d00d      	beq.n	4d02 <_ZN7RingBufIP8TelegramLj30EhtE4pushES1_+0x2a>
 BT wi = (BT)mReadIndex + (BT)mSize;
    4ce6:	0003      	movs	r3, r0
    4ce8:	3378      	adds	r3, #120	; 0x78
    4cea:	781b      	ldrb	r3, [r3, #0]
    4cec:	189b      	adds	r3, r3, r2
 if (wi >= (BT)S) wi -= (BT)S;
    4cee:	2b1d      	cmp	r3, #29
    4cf0:	d901      	bls.n	4cf6 <_ZN7RingBufIP8TelegramLj30EhtE4pushES1_+0x1e>
    4cf2:	3b1e      	subs	r3, #30
    4cf4:	b29b      	uxth	r3, r3
  mBuffer[writeIndex()] = inElement;
    4cf6:	b2db      	uxtb	r3, r3
    4cf8:	009b      	lsls	r3, r3, #2
    4cfa:	5019      	str	r1, [r3, r0]
  mSize++;
  return true;
    4cfc:	2301      	movs	r3, #1
  mSize++;
    4cfe:	3201      	adds	r2, #1
    4d00:	7022      	strb	r2, [r4, #0]
}
    4d02:	0018      	movs	r0, r3
    4d04:	bd10      	pop	{r4, pc}
	...

00004d08 <_ZN10RFProtocol7AddDataEP11RadioData_t>:
	if(this->txFIFO.isFull()){
    4d08:	0003      	movs	r3, r0
 {
    4d0a:	b510      	push	{r4, lr}
	if(this->txFIFO.isFull()){
    4d0c:	33fd      	adds	r3, #253	; 0xfd
    4d0e:	781b      	ldrb	r3, [r3, #0]
 {
    4d10:	0004      	movs	r4, r0
	if(this->txFIFO.isFull()){
    4d12:	2b1e      	cmp	r3, #30
    4d14:	d105      	bne.n	4d22 <_ZN10RFProtocol7AddDataEP11RadioData_t+0x1a>
		SerialAUX->println("Error! - Tx FIFO Full!");
    4d16:	4b07      	ldr	r3, [pc, #28]	; (4d34 <_ZN10RFProtocol7AddDataEP11RadioData_t+0x2c>)
    4d18:	4907      	ldr	r1, [pc, #28]	; (4d38 <_ZN10RFProtocol7AddDataEP11RadioData_t+0x30>)
    4d1a:	6818      	ldr	r0, [r3, #0]
    4d1c:	f001 fab4 	bl	6288 <_ZN5Print7printlnEPKc>
}
    4d20:	bd10      	pop	{r4, pc}
	Telegram *msg = this->ConvertToTelegram(newdata);
    4d22:	f7ff fee3 	bl	4aec <_ZN10RFProtocol17ConvertToTelegramEP11RadioData_t>
    4d26:	1e01      	subs	r1, r0, #0
	if(msg!=NULL)
    4d28:	d0fa      	beq.n	4d20 <_ZN10RFProtocol7AddDataEP11RadioData_t+0x18>
		this->txFIFO.push(msg);	//Add to TX FIFO
    4d2a:	0020      	movs	r0, r4
    4d2c:	3084      	adds	r0, #132	; 0x84
    4d2e:	f7ff ffd3 	bl	4cd8 <_ZN7RingBufIP8TelegramLj30EhtE4pushES1_>
    4d32:	e7f5      	b.n	4d20 <_ZN10RFProtocol7AddDataEP11RadioData_t+0x18>
    4d34:	2000014c 	.word	0x2000014c
    4d38:	0000bc08 	.word	0x0000bc08

00004d3c <_ZN7RingBufIP8TelegramLj30EhtE3popERS1_>:
  interrupts();
  return result;
}

template <typename ET, size_t S, typename IT, typename BT>
bool RingBuf<ET, S, IT, BT>::pop(ET &outElement)
    4d3c:	b510      	push	{r4, lr}
{
  if (isEmpty()) return false;
    4d3e:	0004      	movs	r4, r0
bool RingBuf<ET, S, IT, BT>::pop(ET &outElement)
    4d40:	0003      	movs	r3, r0
  if (isEmpty()) return false;
    4d42:	2000      	movs	r0, #0
    4d44:	3479      	adds	r4, #121	; 0x79
    4d46:	7822      	ldrb	r2, [r4, #0]
    4d48:	4282      	cmp	r2, r0
    4d4a:	d011      	beq.n	4d70 <_ZN7RingBufIP8TelegramLj30EhtE3popERS1_+0x34>
  outElement = mBuffer[mReadIndex];
    4d4c:	001a      	movs	r2, r3
    4d4e:	3278      	adds	r2, #120	; 0x78
    4d50:	7810      	ldrb	r0, [r2, #0]
    4d52:	0080      	lsls	r0, r0, #2
    4d54:	58c3      	ldr	r3, [r0, r3]
  mReadIndex++;
  mSize--;
  if (mReadIndex == S) mReadIndex = 0;
  return true;
    4d56:	2001      	movs	r0, #1
  outElement = mBuffer[mReadIndex];
    4d58:	600b      	str	r3, [r1, #0]
  mReadIndex++;
    4d5a:	7813      	ldrb	r3, [r2, #0]
    4d5c:	3301      	adds	r3, #1
    4d5e:	b2db      	uxtb	r3, r3
    4d60:	7013      	strb	r3, [r2, #0]
  mSize--;
    4d62:	7821      	ldrb	r1, [r4, #0]
    4d64:	3901      	subs	r1, #1
    4d66:	7021      	strb	r1, [r4, #0]
  if (mReadIndex == S) mReadIndex = 0;
    4d68:	2b1e      	cmp	r3, #30
    4d6a:	d101      	bne.n	4d70 <_ZN7RingBufIP8TelegramLj30EhtE3popERS1_+0x34>
    4d6c:	2300      	movs	r3, #0
    4d6e:	7013      	strb	r3, [r2, #0]
}
    4d70:	bd10      	pop	{r4, pc}

00004d72 <_ZN10RFProtocol7GetDataEv>:
	if(this->rxFIFO.isEmpty())
    4d72:	0003      	movs	r3, r0
{
    4d74:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4d76:	2600      	movs	r6, #0
	if(this->rxFIFO.isEmpty())
    4d78:	3381      	adds	r3, #129	; 0x81
    4d7a:	781b      	ldrb	r3, [r3, #0]
{
    4d7c:	0005      	movs	r5, r0
		return NULL;
    4d7e:	0018      	movs	r0, r3
	if(this->rxFIFO.isEmpty())
    4d80:	42b3      	cmp	r3, r6
    4d82:	d039      	beq.n	4df8 <_ZN10RFProtocol7GetDataEv+0x86>
		memset(&rxbuffer.payload, 0 , MAX_PAYLOAD_LENGTH);
    4d84:	002c      	movs	r4, r5
		rxFIFO.pop(msg);
    4d86:	0028      	movs	r0, r5
		memset(&rxbuffer.payload, 0 , MAX_PAYLOAD_LENGTH);
    4d88:	3409      	adds	r4, #9
		rxFIFO.pop(msg);
    4d8a:	a901      	add	r1, sp, #4
		memset(&rxbuffer.payload, 0 , MAX_PAYLOAD_LENGTH);
    4d8c:	34ff      	adds	r4, #255	; 0xff
		rxFIFO.pop(msg);
    4d8e:	3008      	adds	r0, #8
		Telegram * msg = NULL;
    4d90:	9601      	str	r6, [sp, #4]
		rxFIFO.pop(msg);
    4d92:	f7ff ffd3 	bl	4d3c <_ZN7RingBufIP8TelegramLj30EhtE3popERS1_>
		memset(&rxbuffer.payload, 0 , MAX_PAYLOAD_LENGTH);
    4d96:	0031      	movs	r1, r6
    4d98:	223c      	movs	r2, #60	; 0x3c
    4d9a:	0020      	movs	r0, r4
    4d9c:	f006 fae9 	bl	b372 <memset>
		memcpy(&rxbuffer.payload, msg->GetRadioData()->payload, msg->GetRadioData()->payloadLength);	// copy the data.
    4da0:	9801      	ldr	r0, [sp, #4]
    4da2:	f000 fbe8 	bl	5576 <_ZN8Telegram12GetRadioDataEv>
    4da6:	0006      	movs	r6, r0
    4da8:	9801      	ldr	r0, [sp, #4]
    4daa:	f000 fbe4 	bl	5576 <_ZN8Telegram12GetRadioDataEv>
    4dae:	303c      	adds	r0, #60	; 0x3c
    4db0:	7802      	ldrb	r2, [r0, #0]
    4db2:	0031      	movs	r1, r6
    4db4:	0020      	movs	r0, r4
    4db6:	f006 fad3 	bl	b360 <memcpy>
		rxbuffer.payloadLength = msg->GetRadioData()->payloadLength;
    4dba:	9801      	ldr	r0, [sp, #4]
    4dbc:	f000 fbdb 	bl	5576 <_ZN8Telegram12GetRadioDataEv>
    4dc0:	23a2      	movs	r3, #162	; 0xa2
    4dc2:	303c      	adds	r0, #60	; 0x3c
    4dc4:	7802      	ldrb	r2, [r0, #0]
    4dc6:	005b      	lsls	r3, r3, #1
    4dc8:	54ea      	strb	r2, [r5, r3]
		rxbuffer.rssi = msg->GetRadioData()->rssi;
    4dca:	9801      	ldr	r0, [sp, #4]
    4dcc:	f000 fbd3 	bl	5576 <_ZN8Telegram12GetRadioDataEv>
    4dd0:	223d      	movs	r2, #61	; 0x3d
    4dd2:	2346      	movs	r3, #70	; 0x46
    4dd4:	5682      	ldrsb	r2, [r0, r2]
    4dd6:	33ff      	adds	r3, #255	; 0xff
    4dd8:	54ea      	strb	r2, [r5, r3]
		rxbuffer.snr = msg->GetRadioData()->snr;
    4dda:	9801      	ldr	r0, [sp, #4]
    4ddc:	f000 fbcb 	bl	5576 <_ZN8Telegram12GetRadioDataEv>
    4de0:	223e      	movs	r2, #62	; 0x3e
    4de2:	23a3      	movs	r3, #163	; 0xa3
    4de4:	5682      	ldrsb	r2, [r0, r2]
		delete msg;
    4de6:	9801      	ldr	r0, [sp, #4]
		rxbuffer.snr = msg->GetRadioData()->snr;
    4de8:	005b      	lsls	r3, r3, #1
    4dea:	54ea      	strb	r2, [r5, r3]
		delete msg;
    4dec:	2800      	cmp	r0, #0
    4dee:	d002      	beq.n	4df6 <_ZN10RFProtocol7GetDataEv+0x84>
    4df0:	6803      	ldr	r3, [r0, #0]
    4df2:	689b      	ldr	r3, [r3, #8]
    4df4:	4798      	blx	r3
    4df6:	0020      	movs	r0, r4
}
    4df8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

00004dfa <_ZN9RFService12milliSecondsEv>:
	//	SerialAUX->println("Sleep=false");
	RFProtocolStatus.Sleep = false;
	this->_WakeUp();
}

uint32_t RFService::milliSeconds(){
    4dfa:	b510      	push	{r4, lr}
	return millis();
    4dfc:	f001 f9b6 	bl	616c <millis>
}
    4e00:	bd10      	pop	{r4, pc}
	...

00004e04 <_ZN9RFServiceC1EP11E28_2G4M20SP11GpsDataLiteP19SystemInformation_t>:
RFService::RFService(E28_2G4M20S *Radio, GpsDataLite *GPS, SystemInformation_t *status) : RFProtocol(Radio)
    4e04:	b570      	push	{r4, r5, r6, lr}
    4e06:	0004      	movs	r4, r0
    4e08:	0016      	movs	r6, r2
    4e0a:	001d      	movs	r5, r3
    4e0c:	f7ff fe4a 	bl	4aa4 <_ZN10RFProtocolC1EP11E28_2G4M20S>
    4e10:	4b0d      	ldr	r3, [pc, #52]	; (4e48 <_ZN9RFServiceC1EP11E28_2G4M20SP11GpsDataLiteP19SystemInformation_t+0x44>)
	RFProtocol::RFProtocolStates_t TXHandler();
	uint32_t milliSeconds();
	
	private:
	
	struct RFProtocolStatus_t
    4e12:	2248      	movs	r2, #72	; 0x48
    4e14:	3308      	adds	r3, #8
    4e16:	6023      	str	r3, [r4, #0]
    4e18:	2300      	movs	r3, #0
    4e1a:	32ff      	adds	r2, #255	; 0xff
    4e1c:	54a3      	strb	r3, [r4, r2]
    4e1e:	0022      	movs	r2, r4
    4e20:	3248      	adds	r2, #72	; 0x48
    4e22:	32ff      	adds	r2, #255	; 0xff
    4e24:	7053      	strb	r3, [r2, #1]
    4e26:	7093      	strb	r3, [r2, #2]
    4e28:	0023      	movs	r3, r4
    4e2a:	4a08      	ldr	r2, [pc, #32]	; (4e4c <_ZN9RFServiceC1EP11E28_2G4M20SP11GpsDataLiteP19SystemInformation_t+0x48>)
    4e2c:	3355      	adds	r3, #85	; 0x55
{
	public:
	virtual void SerialPrintMessage( void ); // Function for each massage to print out the data to Serial.print.	
	uint32_t GetUTCTime();
	// Constructor to create empty messages. (only used for compile to allocate memory)
	Telegram_MSG_2(){};
    4e2e:	4908      	ldr	r1, [pc, #32]	; (4e50 <_ZN9RFServiceC1EP11E28_2G4M20SP11GpsDataLiteP19SystemInformation_t+0x4c>)
    4e30:	33ff      	adds	r3, #255	; 0xff
    4e32:	18a2      	adds	r2, r4, r2
    4e34:	6019      	str	r1, [r3, #0]
    4e36:	3380      	adds	r3, #128	; 0x80
    4e38:	4293      	cmp	r3, r2
    4e3a:	d1fb      	bne.n	4e34 <_ZN9RFServiceC1EP11E28_2G4M20SP11GpsDataLiteP19SystemInformation_t+0x30>
	this->GPSData = GPS;
    4e3c:	0023      	movs	r3, r4
    4e3e:	33fc      	adds	r3, #252	; 0xfc
    4e40:	651e      	str	r6, [r3, #80]	; 0x50
	this->SystemInformation = status;
    4e42:	655d      	str	r5, [r3, #84]	; 0x54
}
    4e44:	0020      	movs	r0, r4
    4e46:	bd70      	pop	{r4, r5, r6, pc}
    4e48:	0000bcdc 	.word	0x0000bcdc
    4e4c:	00001054 	.word	0x00001054
    4e50:	0000bd8c 	.word	0x0000bd8c

00004e54 <_ZN14Telegram_MSG_2aSERKS_>:
class Telegram_MSG_2 : public Telegram
    4e54:	b570      	push	{r4, r5, r6, lr}
    4e56:	000c      	movs	r4, r1
    4e58:	0005      	movs	r5, r0
	CMD_Do_Power_Off,
	CMD_Simulate_run_on_battery,
}ProtocolCMD_t;


class Telegram
    4e5a:	790b      	ldrb	r3, [r1, #4]
    4e5c:	223f      	movs	r2, #63	; 0x3f
    4e5e:	7103      	strb	r3, [r0, #4]
    4e60:	688b      	ldr	r3, [r1, #8]
    4e62:	6083      	str	r3, [r0, #8]
    4e64:	68cb      	ldr	r3, [r1, #12]
    4e66:	60c3      	str	r3, [r0, #12]
    4e68:	690b      	ldr	r3, [r1, #16]
    4e6a:	6103      	str	r3, [r0, #16]
    4e6c:	694b      	ldr	r3, [r1, #20]
    4e6e:	3118      	adds	r1, #24
    4e70:	6143      	str	r3, [r0, #20]
    4e72:	3018      	adds	r0, #24
    4e74:	f006 fa74 	bl	b360 <memcpy>
    4e78:	6da3      	ldr	r3, [r4, #88]	; 0x58
    4e7a:	0028      	movs	r0, r5
    4e7c:	65ab      	str	r3, [r5, #88]	; 0x58
    4e7e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    4e80:	65eb      	str	r3, [r5, #92]	; 0x5c
    4e82:	6e23      	ldr	r3, [r4, #96]	; 0x60
    4e84:	662b      	str	r3, [r5, #96]	; 0x60
    4e86:	0023      	movs	r3, r4
    4e88:	3364      	adds	r3, #100	; 0x64
    4e8a:	781a      	ldrb	r2, [r3, #0]
    4e8c:	002b      	movs	r3, r5
    4e8e:	3364      	adds	r3, #100	; 0x64
    4e90:	701a      	strb	r2, [r3, #0]
    4e92:	0023      	movs	r3, r4
    4e94:	3365      	adds	r3, #101	; 0x65
    4e96:	781a      	ldrb	r2, [r3, #0]
    4e98:	002b      	movs	r3, r5
    4e9a:	3365      	adds	r3, #101	; 0x65
    4e9c:	701a      	strb	r2, [r3, #0]
    4e9e:	0023      	movs	r3, r4
    4ea0:	3366      	adds	r3, #102	; 0x66
    4ea2:	781a      	ldrb	r2, [r3, #0]
    4ea4:	002b      	movs	r3, r5
    4ea6:	3366      	adds	r3, #102	; 0x66
    4ea8:	701a      	strb	r2, [r3, #0]
    4eaa:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    4eac:	66ab      	str	r3, [r5, #104]	; 0x68
    4eae:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    4eb0:	66eb      	str	r3, [r5, #108]	; 0x6c
    4eb2:	0023      	movs	r3, r4
    4eb4:	3370      	adds	r3, #112	; 0x70
    4eb6:	781a      	ldrb	r2, [r3, #0]
    4eb8:	002b      	movs	r3, r5
    4eba:	3370      	adds	r3, #112	; 0x70
    4ebc:	701a      	strb	r2, [r3, #0]
    4ebe:	6f63      	ldr	r3, [r4, #116]	; 0x74
    4ec0:	676b      	str	r3, [r5, #116]	; 0x74
    4ec2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    4ec4:	67ab      	str	r3, [r5, #120]	; 0x78
    4ec6:	0023      	movs	r3, r4
    4ec8:	337c      	adds	r3, #124	; 0x7c
    4eca:	781a      	ldrb	r2, [r3, #0]
    4ecc:	002b      	movs	r3, r5
    4ece:	337c      	adds	r3, #124	; 0x7c
    4ed0:	701a      	strb	r2, [r3, #0]
    4ed2:	227d      	movs	r2, #125	; 0x7d
    4ed4:	002b      	movs	r3, r5
    4ed6:	56a2      	ldrsb	r2, [r4, r2]
    4ed8:	337d      	adds	r3, #125	; 0x7d
    4eda:	701a      	strb	r2, [r3, #0]
    4edc:	227e      	movs	r2, #126	; 0x7e
    4ede:	56a2      	ldrsb	r2, [r4, r2]
    4ee0:	705a      	strb	r2, [r3, #1]
    4ee2:	bd70      	pop	{r4, r5, r6, pc}

00004ee4 <_ZN9RFService21SaveTransponderBeaconEP14Telegram_MSG_1.part.0>:
bool RFService::SaveTransponderBeacon(Telegram_MSG_1 *msg){
    4ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ee6:	0004      	movs	r4, r0
    4ee8:	0007      	movs	r7, r0
    4eea:	000d      	movs	r5, r1
    4eec:	2300      	movs	r3, #0
    4eee:	3455      	adds	r4, #85	; 0x55
    4ef0:	b0ab      	sub	sp, #172	; 0xac
    4ef2:	34ff      	adds	r4, #255	; 0xff
		 for(int a=0;a<RFProtocolStatus.NumberOfBeaconsToRelay; a++){
    4ef4:	2648      	movs	r6, #72	; 0x48
bool RFService::SaveTransponderBeacon(Telegram_MSG_1 *msg){
    4ef6:	9302      	str	r3, [sp, #8]
		 for(int a=0;a<RFProtocolStatus.NumberOfBeaconsToRelay; a++){
    4ef8:	36ff      	adds	r6, #255	; 0xff
    4efa:	5dbb      	ldrb	r3, [r7, r6]
    4efc:	9a02      	ldr	r2, [sp, #8]
    4efe:	4293      	cmp	r3, r2
    4f00:	dd28      	ble.n	4f54 <_ZN9RFService21SaveTransponderBeaconEP14Telegram_MSG_1.part.0+0x70>
			 if( SavedBeacons[a].TelegramMatchUniqueID(msg->GetUniqueID1(), msg->GetUniqueID2(), msg->GetUniqueID3(), msg->GetUniqueID4()) == true ){
    4f02:	0028      	movs	r0, r5
    4f04:	9404      	str	r4, [sp, #16]
    4f06:	f000 fb13 	bl	5530 <_ZN8Telegram12GetUniqueID1Ev>
    4f0a:	9003      	str	r0, [sp, #12]
    4f0c:	0028      	movs	r0, r5
    4f0e:	f000 fb11 	bl	5534 <_ZN8Telegram12GetUniqueID2Ev>
    4f12:	9005      	str	r0, [sp, #20]
    4f14:	0028      	movs	r0, r5
    4f16:	f000 fb0f 	bl	5538 <_ZN8Telegram12GetUniqueID3Ev>
    4f1a:	0006      	movs	r6, r0
    4f1c:	0028      	movs	r0, r5
    4f1e:	f000 fb0d 	bl	553c <_ZN8Telegram12GetUniqueID4Ev>
    4f22:	0033      	movs	r3, r6
    4f24:	9000      	str	r0, [sp, #0]
    4f26:	9a05      	ldr	r2, [sp, #20]
    4f28:	0020      	movs	r0, r4
    4f2a:	9903      	ldr	r1, [sp, #12]
    4f2c:	f000 fb10 	bl	5550 <_ZN8Telegram21TelegramMatchUniqueIDEmmmm>
    4f30:	3480      	adds	r4, #128	; 0x80
    4f32:	9003      	str	r0, [sp, #12]
    4f34:	2800      	cmp	r0, #0
    4f36:	d00a      	beq.n	4f4e <_ZN9RFService21SaveTransponderBeaconEP14Telegram_MSG_1.part.0+0x6a>
				 SavedBeacons[a] = Telegram_MSG_2(msg);
    4f38:	0029      	movs	r1, r5
    4f3a:	a80a      	add	r0, sp, #40	; 0x28
    4f3c:	f000 fe7a 	bl	5c34 <_ZN14Telegram_MSG_2C1EP14Telegram_MSG_1>
    4f40:	a90a      	add	r1, sp, #40	; 0x28
    4f42:	9804      	ldr	r0, [sp, #16]
    4f44:	f7ff ff86 	bl	4e54 <_ZN14Telegram_MSG_2aSERKS_>
}
    4f48:	9803      	ldr	r0, [sp, #12]
    4f4a:	b02b      	add	sp, #172	; 0xac
    4f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		 for(int a=0;a<RFProtocolStatus.NumberOfBeaconsToRelay; a++){
    4f4e:	9b02      	ldr	r3, [sp, #8]
    4f50:	3301      	adds	r3, #1
    4f52:	e7cf      	b.n	4ef4 <_ZN9RFService21SaveTransponderBeaconEP14Telegram_MSG_1.part.0+0x10>
	return false;
    4f54:	2200      	movs	r2, #0
    4f56:	9203      	str	r2, [sp, #12]
		 if(RFProtocolStatus.NumberOfBeaconsToRelay < FIFO_SIZE){
    4f58:	2b1d      	cmp	r3, #29
    4f5a:	dcf5      	bgt.n	4f48 <_ZN9RFService21SaveTransponderBeaconEP14Telegram_MSG_1.part.0+0x64>
			 SavedBeacons[RFProtocolStatus.NumberOfBeaconsToRelay] = Telegram_MSG_2(msg);
    4f5c:	01db      	lsls	r3, r3, #7
    4f5e:	3355      	adds	r3, #85	; 0x55
    4f60:	33ff      	adds	r3, #255	; 0xff
    4f62:	18fc      	adds	r4, r7, r3
    4f64:	0029      	movs	r1, r5
    4f66:	a80a      	add	r0, sp, #40	; 0x28
    4f68:	f000 fe64 	bl	5c34 <_ZN14Telegram_MSG_2C1EP14Telegram_MSG_1>
    4f6c:	a90a      	add	r1, sp, #40	; 0x28
    4f6e:	0020      	movs	r0, r4
    4f70:	f7ff ff70 	bl	4e54 <_ZN14Telegram_MSG_2aSERKS_>
	StringSumHelper(const char *p) : String(p) {}
    4f74:	490d      	ldr	r1, [pc, #52]	; (4fac <_ZN9RFService21SaveTransponderBeaconEP14Telegram_MSG_1.part.0+0xc8>)
    4f76:	a80a      	add	r0, sp, #40	; 0x28
    4f78:	f002 ff67 	bl	7e4a <_ZN6StringC1EPKc>
			 Serial.println("It was added to the list at:" + String( RFProtocolStatus.NumberOfBeaconsToRelay));
    4f7c:	220a      	movs	r2, #10
    4f7e:	5db9      	ldrb	r1, [r7, r6]
    4f80:	a807      	add	r0, sp, #28
    4f82:	f002 ff86 	bl	7e92 <_ZN6StringC1Ehh>
    4f86:	a907      	add	r1, sp, #28
    4f88:	a80a      	add	r0, sp, #40	; 0x28
    4f8a:	f002 ffd0 	bl	7f2e <_ZplRK15StringSumHelperRK6String>
    4f8e:	0001      	movs	r1, r0
    4f90:	4807      	ldr	r0, [pc, #28]	; (4fb0 <_ZN9RFService21SaveTransponderBeaconEP14Telegram_MSG_1.part.0+0xcc>)
    4f92:	f001 f96f 	bl	6274 <_ZN5Print7printlnERK6String>
    4f96:	a807      	add	r0, sp, #28
    4f98:	f002 ff0f 	bl	7dba <_ZN6StringD1Ev>
class StringSumHelper : public String
    4f9c:	a80a      	add	r0, sp, #40	; 0x28
    4f9e:	f002 ff0c 	bl	7dba <_ZN6StringD1Ev>
			 RFProtocolStatus.NumberOfBeaconsToRelay++;
    4fa2:	5dbb      	ldrb	r3, [r7, r6]
    4fa4:	3301      	adds	r3, #1
    4fa6:	55bb      	strb	r3, [r7, r6]
    4fa8:	e7ce      	b.n	4f48 <_ZN9RFService21SaveTransponderBeaconEP14Telegram_MSG_1.part.0+0x64>
    4faa:	46c0      	nop			; (mov r8, r8)
    4fac:	0000bcbf 	.word	0x0000bcbf
    4fb0:	200002b0 	.word	0x200002b0

00004fb4 <_ZN9RFService21SaveTransponderBeaconEP14Telegram_MSG_1>:
bool RFService::SaveTransponderBeacon(Telegram_MSG_1 *msg){
    4fb4:	b570      	push	{r4, r5, r6, lr}
    4fb6:	0005      	movs	r5, r0
	 if(msg->GetNumberOfSecondsSinceLastGroundStationCom() > 20){
    4fb8:	0008      	movs	r0, r1
bool RFService::SaveTransponderBeacon(Telegram_MSG_1 *msg){
    4fba:	000c      	movs	r4, r1
	 if(msg->GetNumberOfSecondsSinceLastGroundStationCom() > 20){
    4fbc:	f000 fcea 	bl	5994 <_ZN14Telegram_MSG_143GetNumberOfSecondsSinceLastGroundStationComEv>
    4fc0:	0003      	movs	r3, r0
	return false;
    4fc2:	2000      	movs	r0, #0
	 if(msg->GetNumberOfSecondsSinceLastGroundStationCom() > 20){
    4fc4:	2b14      	cmp	r3, #20
    4fc6:	dd03      	ble.n	4fd0 <_ZN9RFService21SaveTransponderBeaconEP14Telegram_MSG_1+0x1c>
    4fc8:	0021      	movs	r1, r4
    4fca:	0028      	movs	r0, r5
    4fcc:	f7ff ff8a 	bl	4ee4 <_ZN9RFService21SaveTransponderBeaconEP14Telegram_MSG_1.part.0>
}
    4fd0:	bd70      	pop	{r4, r5, r6, pc}

00004fd2 <_ZN9RFService14SeccondCounterEv>:
	if(RFProtocolStatus.SecondCounterSinceLasteGroundStationContact < 254){
    4fd2:	22a4      	movs	r2, #164	; 0xa4
    4fd4:	0052      	lsls	r2, r2, #1
    4fd6:	5c83      	ldrb	r3, [r0, r2]
    4fd8:	2bfd      	cmp	r3, #253	; 0xfd
    4fda:	dc01      	bgt.n	4fe0 <_ZN9RFService14SeccondCounterEv+0xe>
		RFProtocolStatus.SecondCounterSinceLasteGroundStationContact++;
    4fdc:	3301      	adds	r3, #1
    4fde:	5483      	strb	r3, [r0, r2]
}
    4fe0:	4770      	bx	lr

00004fe2 <_ZN9RFService9PowerDownEv>:
	RFProtocolStatus.Sleep = true;
    4fe2:	234a      	movs	r3, #74	; 0x4a
    4fe4:	2201      	movs	r2, #1
void RFService::PowerDown(){
    4fe6:	b510      	push	{r4, lr}
	RFProtocolStatus.Sleep = true;
    4fe8:	33ff      	adds	r3, #255	; 0xff
    4fea:	54c2      	strb	r2, [r0, r3]
	this->_PowerDown();
    4fec:	f7ff fe66 	bl	4cbc <_ZN10RFProtocol10_PowerDownEv>
}
    4ff0:	bd10      	pop	{r4, pc}

00004ff2 <_ZN9RFService6WakeUpEv>:
	RFProtocolStatus.Sleep = false;
    4ff2:	234a      	movs	r3, #74	; 0x4a
    4ff4:	2200      	movs	r2, #0
void RFService::WakeUp(){
    4ff6:	b510      	push	{r4, lr}
	RFProtocolStatus.Sleep = false;
    4ff8:	33ff      	adds	r3, #255	; 0xff
    4ffa:	54c2      	strb	r2, [r0, r3]
	this->_WakeUp();
    4ffc:	f7ff fdba 	bl	4b74 <_ZN10RFProtocol7_WakeUpEv>
}
    5000:	bd10      	pop	{r4, pc}
	...

00005004 <_ZN9RFService10SendBeaconEv>:
{
    5004:	b570      	push	{r4, r5, r6, lr}
    5006:	0005      	movs	r5, r0
    5008:	b08e      	sub	sp, #56	; 0x38
											 SystemInformation->FIRMWARE_VERSION, SystemInformation->pcbVersion, RFProtocolStatus.NumberOfBeaconsToRelay);
    500a:	2080      	movs	r0, #128	; 0x80
    500c:	f001 f8f0 	bl	61f0 <_Znwj>
	Telegram_MSG_1 *msg = new Telegram_MSG_1(SystemInformation->SerialNumber1, SystemInformation->SerialNumber2, SystemInformation->SerialNumber3, SystemInformation->SerialNumber4,
    5010:	002b      	movs	r3, r5
    5012:	33fc      	adds	r3, #252	; 0xfc
    5014:	6d5c      	ldr	r4, [r3, #84]	; 0x54
											 (uint32_t)GPSData->UTCTime, GPSData->Latitude, GPSData->Longitude,
    5016:	6d1a      	ldr	r2, [r3, #80]	; 0x50
											 SystemInformation->FIRMWARE_VERSION, SystemInformation->pcbVersion, RFProtocolStatus.NumberOfBeaconsToRelay);
    5018:	2348      	movs	r3, #72	; 0x48
    501a:	33ff      	adds	r3, #255	; 0xff
    501c:	5ceb      	ldrb	r3, [r5, r3]
    501e:	0006      	movs	r6, r0
    5020:	930d      	str	r3, [sp, #52]	; 0x34
    5022:	7923      	ldrb	r3, [r4, #4]
    5024:	2002      	movs	r0, #2
    5026:	930c      	str	r3, [sp, #48]	; 0x30
    5028:	6823      	ldr	r3, [r4, #0]
    502a:	930b      	str	r3, [sp, #44]	; 0x2c
    502c:	68a3      	ldr	r3, [r4, #8]
    502e:	930a      	str	r3, [sp, #40]	; 0x28
    5030:	23a4      	movs	r3, #164	; 0xa4
    5032:	005b      	lsls	r3, r3, #1
    5034:	5ceb      	ldrb	r3, [r5, r3]
    5036:	9309      	str	r3, [sp, #36]	; 0x24
    5038:	2300      	movs	r3, #0
    503a:	9308      	str	r3, [sp, #32]
    503c:	9307      	str	r3, [sp, #28]
    503e:	2300      	movs	r3, #0
											 GPSData->NumberOfSatellites, GPSData->FixDecimal, ((SystemInformation->state==RUNNING_ON_BATTERY_GPS_ON) || (SystemInformation->state==GET_READY_TO_RUN_ON_BATTERY) || (SystemInformation->state==RUNNING_ON_BATTERY_GPS_OFF)),
    5040:	79e1      	ldrb	r1, [r4, #7]
    5042:	3902      	subs	r1, #2
											 SystemInformation->FIRMWARE_VERSION, SystemInformation->pcbVersion, RFProtocolStatus.NumberOfBeaconsToRelay);
    5044:	b2c9      	uxtb	r1, r1
    5046:	4288      	cmp	r0, r1
    5048:	415b      	adcs	r3, r3
    504a:	b2db      	uxtb	r3, r3
    504c:	9306      	str	r3, [sp, #24]
    504e:	0013      	movs	r3, r2
    5050:	3331      	adds	r3, #49	; 0x31
    5052:	781b      	ldrb	r3, [r3, #0]
    5054:	9305      	str	r3, [sp, #20]
    5056:	0013      	movs	r3, r2
    5058:	3332      	adds	r3, #50	; 0x32
    505a:	781b      	ldrb	r3, [r3, #0]
    505c:	9304      	str	r3, [sp, #16]
    505e:	6a53      	ldr	r3, [r2, #36]	; 0x24
    5060:	9303      	str	r3, [sp, #12]
    5062:	6a13      	ldr	r3, [r2, #32]
    5064:	9302      	str	r3, [sp, #8]
    5066:	6810      	ldr	r0, [r2, #0]
    5068:	f003 fe90 	bl	8d8c <__aeabi_f2uiz>
    506c:	9001      	str	r0, [sp, #4]
    506e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5070:	0030      	movs	r0, r6
    5072:	9300      	str	r3, [sp, #0]
    5074:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5076:	6a22      	ldr	r2, [r4, #32]
    5078:	69a1      	ldr	r1, [r4, #24]
    507a:	f000 fb19 	bl	56b0 <_ZN14Telegram_MSG_1C1Emmmmmmmhhbffhffhh>
	if(this->txFIFO.isFull()){
    507e:	002b      	movs	r3, r5
    5080:	33fd      	adds	r3, #253	; 0xfd
    5082:	781b      	ldrb	r3, [r3, #0]
    5084:	2b1e      	cmp	r3, #30
    5086:	d106      	bne.n	5096 <_ZN9RFService10SendBeaconEv+0x92>
		SerialAUX->println("Error! - Tx FIFO Full, Unable to send Beacon message");
    5088:	4b06      	ldr	r3, [pc, #24]	; (50a4 <_ZN9RFService10SendBeaconEv+0xa0>)
    508a:	4907      	ldr	r1, [pc, #28]	; (50a8 <_ZN9RFService10SendBeaconEv+0xa4>)
    508c:	6818      	ldr	r0, [r3, #0]
    508e:	f001 f8fb 	bl	6288 <_ZN5Print7printlnEPKc>
}
    5092:	b00e      	add	sp, #56	; 0x38
    5094:	bd70      	pop	{r4, r5, r6, pc}
			this->txFIFO.push(msg);	//Add to TX FIFO
    5096:	0028      	movs	r0, r5
    5098:	0031      	movs	r1, r6
    509a:	3084      	adds	r0, #132	; 0x84
    509c:	f7ff fe1c 	bl	4cd8 <_ZN7RingBufIP8TelegramLj30EhtE4pushES1_>
}
    50a0:	e7f7      	b.n	5092 <_ZN9RFService10SendBeaconEv+0x8e>
    50a2:	46c0      	nop			; (mov r8, r8)
    50a4:	2000014c 	.word	0x2000014c
    50a8:	0000bc8a 	.word	0x0000bc8a

000050ac <_ZN9RFService9RXHandlerEv>:
{
    50ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    50ae:	0006      	movs	r6, r0
    50b0:	b0b1      	sub	sp, #196	; 0xc4
	Telegram *msg = ConvertToTelegram(Radio->GetRadioData());
    50b2:	6840      	ldr	r0, [r0, #4]
    50b4:	f7fd f91b 	bl	22ee <_ZN11E28_2G4M20S12GetRadioDataEv>
    50b8:	0001      	movs	r1, r0
    50ba:	0030      	movs	r0, r6
    50bc:	f7ff fd16 	bl	4aec <_ZN10RFProtocol17ConvertToTelegramEP11RadioData_t>
    50c0:	900e      	str	r0, [sp, #56]	; 0x38
	RFProtocolStates_t returnState =RX_IDLE; 
    50c2:	1e05      	subs	r5, r0, #0
	if(msg!=NULL)
    50c4:	d019      	beq.n	50fa <_ZN9RFService9RXHandlerEv+0x4e>
		switch(msg->GetRadioMSG_ID())
    50c6:	f000 fa31 	bl	552c <_ZN8Telegram14GetRadioMSG_IDEv>
    50ca:	2801      	cmp	r0, #1
    50cc:	d004      	beq.n	50d8 <_ZN9RFService9RXHandlerEv+0x2c>
    50ce:	2803      	cmp	r0, #3
    50d0:	d016      	beq.n	5100 <_ZN9RFService9RXHandlerEv+0x54>
		bool SaveTelegram = false;
    50d2:	2400      	movs	r4, #0
	RFProtocolStates_t returnState =RX_IDLE; 
    50d4:	0025      	movs	r5, r4
    50d6:	e005      	b.n	50e4 <_ZN9RFService9RXHandlerEv+0x38>
				SaveTelegram = SaveTransponderBeacon((Telegram_MSG_1 *)msg);
    50d8:	990e      	ldr	r1, [sp, #56]	; 0x38
    50da:	0030      	movs	r0, r6
    50dc:	f7ff ff6a 	bl	4fb4 <_ZN9RFService21SaveTransponderBeaconEP14Telegram_MSG_1>
	RFProtocolStates_t returnState =RX_IDLE; 
    50e0:	2500      	movs	r5, #0
				SaveTelegram = SaveTransponderBeacon((Telegram_MSG_1 *)msg);
    50e2:	0004      	movs	r4, r0
		if(!(rxFIFO.isFull()))
    50e4:	0033      	movs	r3, r6
    50e6:	3381      	adds	r3, #129	; 0x81
    50e8:	781b      	ldrb	r3, [r3, #0]
    50ea:	2b1e      	cmp	r3, #30
    50ec:	d100      	bne.n	50f0 <_ZN9RFService9RXHandlerEv+0x44>
    50ee:	e10d      	b.n	530c <_ZN9RFService9RXHandlerEv+0x260>
			rxFIFO.push(msg);
    50f0:	0030      	movs	r0, r6
    50f2:	990e      	ldr	r1, [sp, #56]	; 0x38
    50f4:	3008      	adds	r0, #8
    50f6:	f7ff fdef 	bl	4cd8 <_ZN7RingBufIP8TelegramLj30EhtE4pushES1_>
}
    50fa:	0028      	movs	r0, r5
    50fc:	b031      	add	sp, #196	; 0xc4
    50fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if(msg->TelegramMatchUniqueID(SystemInformation->SerialNumber1, SystemInformation->SerialNumber2, SystemInformation->SerialNumber3, SystemInformation->SerialNumber4))
    5100:	0037      	movs	r7, r6
    5102:	37fc      	adds	r7, #252	; 0xfc
    5104:	6d79      	ldr	r1, [r7, #84]	; 0x54
    5106:	980e      	ldr	r0, [sp, #56]	; 0x38
    5108:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    510a:	9300      	str	r3, [sp, #0]
    510c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    510e:	6a0a      	ldr	r2, [r1, #32]
    5110:	6989      	ldr	r1, [r1, #24]
    5112:	f000 fa1d 	bl	5550 <_ZN8Telegram21TelegramMatchUniqueIDEmmmm>
    5116:	2800      	cmp	r0, #0
    5118:	d0db      	beq.n	50d2 <_ZN9RFService9RXHandlerEv+0x26>
					RFProtocolStatus.SecondCounterSinceLasteGroundStationContact=0;
    511a:	23a4      	movs	r3, #164	; 0xa4
    511c:	2400      	movs	r4, #0
    511e:	005b      	lsls	r3, r3, #1
    5120:	54f4      	strb	r4, [r6, r3]
					switch(((Telegram_MSG_3 *)msg)->GetCommand())
    5122:	980e      	ldr	r0, [sp, #56]	; 0x38
    5124:	f000 fe10 	bl	5d48 <_ZN14Telegram_MSG_310GetCommandEv>
    5128:	3801      	subs	r0, #1
    512a:	2803      	cmp	r0, #3
    512c:	d8d2      	bhi.n	50d4 <_ZN9RFService9RXHandlerEv+0x28>
    512e:	f003 fc2b 	bl	8988 <__gnu_thumb1_case_uqi>
    5132:	4302      	.short	0x4302
    5134:	e7d6      	.short	0xe7d6
							 if(RFProtocolStatus.Sleep == true){ // don't send reply if sleep mode is requested.
    5136:	234a      	movs	r3, #74	; 0x4a
    5138:	33ff      	adds	r3, #255	; 0xff
    513a:	5cf4      	ldrb	r4, [r6, r3]
    513c:	2c00      	cmp	r4, #0
    513e:	d1c8      	bne.n	50d2 <_ZN9RFService9RXHandlerEv+0x26>
																		SystemInformation->FIRMWARE_VERSION, SystemInformation->pcbVersion, RFProtocolStatus.NumberOfBeaconsToRelay);
    5140:	2248      	movs	r2, #72	; 0x48
    5142:	32ff      	adds	r2, #255	; 0xff
    5144:	5cb2      	ldrb	r2, [r6, r2]
								Telegram_MSG_1 msgReply = Telegram_MSG_1(SystemInformation->SerialNumber1, SystemInformation->SerialNumber2,
    5146:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 																		(uint32_t)GPSData->UTCTime, GPSData->Latitude, GPSData->Longitude,
    5148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
																		SystemInformation->FIRMWARE_VERSION, SystemInformation->pcbVersion, RFProtocolStatus.NumberOfBeaconsToRelay);
    514a:	920d      	str	r2, [sp, #52]	; 0x34
    514c:	792a      	ldrb	r2, [r5, #4]
    514e:	2702      	movs	r7, #2
    5150:	920c      	str	r2, [sp, #48]	; 0x30
    5152:	682a      	ldr	r2, [r5, #0]
    5154:	0021      	movs	r1, r4
    5156:	920b      	str	r2, [sp, #44]	; 0x2c
    5158:	68aa      	ldr	r2, [r5, #8]
    515a:	920a      	str	r2, [sp, #40]	; 0x28
    515c:	2264      	movs	r2, #100	; 0x64
    515e:	9209      	str	r2, [sp, #36]	; 0x24
    5160:	2200      	movs	r2, #0
    5162:	9208      	str	r2, [sp, #32]
    5164:	9207      	str	r2, [sp, #28]
 																		GPSData->NumberOfSatellites, GPSData->FixDecimal, ((SystemInformation->state==RUNNING_ON_BATTERY_GPS_ON) || (SystemInformation->state==GET_READY_TO_RUN_ON_BATTERY) || (SystemInformation->state==RUNNING_ON_BATTERY_GPS_OFF)),
    5166:	79ea      	ldrb	r2, [r5, #7]
    5168:	3a02      	subs	r2, #2
																		SystemInformation->FIRMWARE_VERSION, SystemInformation->pcbVersion, RFProtocolStatus.NumberOfBeaconsToRelay);
    516a:	b2d2      	uxtb	r2, r2
    516c:	4297      	cmp	r7, r2
    516e:	4161      	adcs	r1, r4
    5170:	b2ca      	uxtb	r2, r1
    5172:	9206      	str	r2, [sp, #24]
    5174:	001a      	movs	r2, r3
    5176:	3231      	adds	r2, #49	; 0x31
    5178:	7812      	ldrb	r2, [r2, #0]
    517a:	9205      	str	r2, [sp, #20]
    517c:	001a      	movs	r2, r3
    517e:	3232      	adds	r2, #50	; 0x32
    5180:	7812      	ldrb	r2, [r2, #0]
    5182:	9204      	str	r2, [sp, #16]
    5184:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5186:	9203      	str	r2, [sp, #12]
    5188:	6a1a      	ldr	r2, [r3, #32]
    518a:	9202      	str	r2, [sp, #8]
    518c:	6818      	ldr	r0, [r3, #0]
    518e:	f003 fdfd 	bl	8d8c <__aeabi_f2uiz>
    5192:	9001      	str	r0, [sp, #4]
    5194:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    5196:	a810      	add	r0, sp, #64	; 0x40
    5198:	9300      	str	r3, [sp, #0]
    519a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    519c:	6a2a      	ldr	r2, [r5, #32]
    519e:	69a9      	ldr	r1, [r5, #24]
    51a0:	f000 fa86 	bl	56b0 <_ZN14Telegram_MSG_1C1Emmmmmmmhhbffhffhh>
								Radio->SendRadioData(msgReply.GetRadioData());
    51a4:	a810      	add	r0, sp, #64	; 0x40
    51a6:	6875      	ldr	r5, [r6, #4]
    51a8:	f000 f9e5 	bl	5576 <_ZN8Telegram12GetRadioDataEv>
    51ac:	0001      	movs	r1, r0
    51ae:	0028      	movs	r0, r5
    51b0:	f7fd f955 	bl	245e <_ZN11E28_2G4M20S13SendRadioDataEP11RadioData_t>
								returnState=TX_WITHOUT_REPLY;
    51b4:	003d      	movs	r5, r7
    51b6:	e795      	b.n	50e4 <_ZN9RFService9RXHandlerEv+0x38>
							if(RFProtocolStatus.Sleep == true){ // don't send reply if sleep mode is requested.
    51b8:	234a      	movs	r3, #74	; 0x4a
    51ba:	33ff      	adds	r3, #255	; 0xff
    51bc:	5cf4      	ldrb	r4, [r6, r3]
    51be:	2c00      	cmp	r4, #0
    51c0:	d000      	beq.n	51c4 <_ZN9RFService9RXHandlerEv+0x118>
    51c2:	e786      	b.n	50d2 <_ZN9RFService9RXHandlerEv+0x26>
								if(RFProtocolStatus.NumberOfBeaconsToRelay > 0){
    51c4:	2348      	movs	r3, #72	; 0x48
    51c6:	33ff      	adds	r3, #255	; 0xff
    51c8:	5cf3      	ldrb	r3, [r6, r3]
    51ca:	2b00      	cmp	r3, #0
    51cc:	d100      	bne.n	51d0 <_ZN9RFService9RXHandlerEv+0x124>
    51ce:	e780      	b.n	50d2 <_ZN9RFService9RXHandlerEv+0x26>
									Telegram_MSG_2 msgReply = SavedBeacons[RFProtocolStatus.NumberOfBeaconsToRelay-1];
    51d0:	3b01      	subs	r3, #1
    51d2:	01dd      	lsls	r5, r3, #7
    51d4:	1975      	adds	r5, r6, r5
    51d6:	930f      	str	r3, [sp, #60]	; 0x3c
    51d8:	002b      	movs	r3, r5
    51da:	3359      	adds	r3, #89	; 0x59
    51dc:	33ff      	adds	r3, #255	; 0xff
    51de:	781b      	ldrb	r3, [r3, #0]
    51e0:	af10      	add	r7, sp, #64	; 0x40
    51e2:	713b      	strb	r3, [r7, #4]
    51e4:	002b      	movs	r3, r5
    51e6:	0029      	movs	r1, r5
    51e8:	33fc      	adds	r3, #252	; 0xfc
    51ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    51ec:	316d      	adds	r1, #109	; 0x6d
    51ee:	9212      	str	r2, [sp, #72]	; 0x48
    51f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    51f2:	31ff      	adds	r1, #255	; 0xff
    51f4:	9213      	str	r2, [sp, #76]	; 0x4c
    51f6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
    51f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    51fa:	9214      	str	r2, [sp, #80]	; 0x50
    51fc:	a816      	add	r0, sp, #88	; 0x58
    51fe:	223f      	movs	r2, #63	; 0x3f
    5200:	9315      	str	r3, [sp, #84]	; 0x54
    5202:	f006 f8ad 	bl	b360 <memcpy>
    5206:	4b46      	ldr	r3, [pc, #280]	; (5320 <_ZN9RFService9RXHandlerEv+0x274>)
    5208:	a902      	add	r1, sp, #8
    520a:	9310      	str	r3, [sp, #64]	; 0x40
    520c:	002b      	movs	r3, r5
    520e:	33ad      	adds	r3, #173	; 0xad
    5210:	33ff      	adds	r3, #255	; 0xff
    5212:	681b      	ldr	r3, [r3, #0]
									if(msgReply.GetRadioMSG_ID() == MSG_Beacon_Relay)
    5214:	0038      	movs	r0, r7
    5216:	65bb      	str	r3, [r7, #88]	; 0x58
    5218:	002b      	movs	r3, r5
    521a:	33b1      	adds	r3, #177	; 0xb1
    521c:	33ff      	adds	r3, #255	; 0xff
    521e:	681b      	ldr	r3, [r3, #0]
    5220:	65fb      	str	r3, [r7, #92]	; 0x5c
    5222:	002b      	movs	r3, r5
    5224:	33b5      	adds	r3, #181	; 0xb5
    5226:	33ff      	adds	r3, #255	; 0xff
    5228:	681b      	ldr	r3, [r3, #0]
    522a:	663b      	str	r3, [r7, #96]	; 0x60
    522c:	002b      	movs	r3, r5
    522e:	33b9      	adds	r3, #185	; 0xb9
    5230:	33ff      	adds	r3, #255	; 0xff
    5232:	781a      	ldrb	r2, [r3, #0]
    5234:	ab29      	add	r3, sp, #164	; 0xa4
    5236:	701a      	strb	r2, [r3, #0]
    5238:	002b      	movs	r3, r5
    523a:	33ba      	adds	r3, #186	; 0xba
    523c:	33ff      	adds	r3, #255	; 0xff
    523e:	781a      	ldrb	r2, [r3, #0]
    5240:	239d      	movs	r3, #157	; 0x9d
    5242:	185b      	adds	r3, r3, r1
    5244:	701a      	strb	r2, [r3, #0]
    5246:	002b      	movs	r3, r5
    5248:	33bb      	adds	r3, #187	; 0xbb
    524a:	33ff      	adds	r3, #255	; 0xff
    524c:	781a      	ldrb	r2, [r3, #0]
    524e:	239e      	movs	r3, #158	; 0x9e
    5250:	185b      	adds	r3, r3, r1
    5252:	701a      	strb	r2, [r3, #0]
    5254:	002b      	movs	r3, r5
    5256:	33bd      	adds	r3, #189	; 0xbd
    5258:	33ff      	adds	r3, #255	; 0xff
    525a:	681b      	ldr	r3, [r3, #0]
    525c:	66bb      	str	r3, [r7, #104]	; 0x68
    525e:	002b      	movs	r3, r5
    5260:	33c1      	adds	r3, #193	; 0xc1
    5262:	33ff      	adds	r3, #255	; 0xff
    5264:	681b      	ldr	r3, [r3, #0]
    5266:	66fb      	str	r3, [r7, #108]	; 0x6c
    5268:	002b      	movs	r3, r5
    526a:	33c5      	adds	r3, #197	; 0xc5
    526c:	33ff      	adds	r3, #255	; 0xff
    526e:	781a      	ldrb	r2, [r3, #0]
    5270:	ab2c      	add	r3, sp, #176	; 0xb0
    5272:	701a      	strb	r2, [r3, #0]
    5274:	002b      	movs	r3, r5
    5276:	33c9      	adds	r3, #201	; 0xc9
    5278:	33ff      	adds	r3, #255	; 0xff
    527a:	681b      	ldr	r3, [r3, #0]
    527c:	677b      	str	r3, [r7, #116]	; 0x74
    527e:	002b      	movs	r3, r5
    5280:	33cd      	adds	r3, #205	; 0xcd
    5282:	33ff      	adds	r3, #255	; 0xff
    5284:	681b      	ldr	r3, [r3, #0]
    5286:	67bb      	str	r3, [r7, #120]	; 0x78
    5288:	002b      	movs	r3, r5
    528a:	33d1      	adds	r3, #209	; 0xd1
    528c:	33ff      	adds	r3, #255	; 0xff
    528e:	781a      	ldrb	r2, [r3, #0]
    5290:	ab2f      	add	r3, sp, #188	; 0xbc
    5292:	701a      	strb	r2, [r3, #0]
    5294:	002b      	movs	r3, r5
    5296:	33d2      	adds	r3, #210	; 0xd2
    5298:	33ff      	adds	r3, #255	; 0xff
    529a:	781a      	ldrb	r2, [r3, #0]
    529c:	23b5      	movs	r3, #181	; 0xb5
    529e:	185b      	adds	r3, r3, r1
    52a0:	701a      	strb	r2, [r3, #0]
    52a2:	23b6      	movs	r3, #182	; 0xb6
    52a4:	35d3      	adds	r5, #211	; 0xd3
    52a6:	35ff      	adds	r5, #255	; 0xff
    52a8:	782a      	ldrb	r2, [r5, #0]
    52aa:	185b      	adds	r3, r3, r1
    52ac:	701a      	strb	r2, [r3, #0]
									RFProtocolStatus.NumberOfBeaconsToRelay--;
    52ae:	213c      	movs	r1, #60	; 0x3c
    52b0:	466a      	mov	r2, sp
    52b2:	2348      	movs	r3, #72	; 0x48
    52b4:	1852      	adds	r2, r2, r1
    52b6:	7812      	ldrb	r2, [r2, #0]
    52b8:	33ff      	adds	r3, #255	; 0xff
    52ba:	54f2      	strb	r2, [r6, r3]
									if(msgReply.GetRadioMSG_ID() == MSG_Beacon_Relay)
    52bc:	f000 f936 	bl	552c <_ZN8Telegram14GetRadioMSG_IDEv>
	RFProtocolStates_t returnState =RX_IDLE; 
    52c0:	0025      	movs	r5, r4
									if(msgReply.GetRadioMSG_ID() == MSG_Beacon_Relay)
    52c2:	900f      	str	r0, [sp, #60]	; 0x3c
    52c4:	2802      	cmp	r0, #2
    52c6:	d000      	beq.n	52ca <_ZN9RFService9RXHandlerEv+0x21e>
    52c8:	e70c      	b.n	50e4 <_ZN9RFService9RXHandlerEv+0x38>
										Radio->SendRadioData(msgReply.GetRadioData());
    52ca:	0038      	movs	r0, r7
    52cc:	6875      	ldr	r5, [r6, #4]
    52ce:	f000 f952 	bl	5576 <_ZN8Telegram12GetRadioDataEv>
    52d2:	0001      	movs	r1, r0
    52d4:	0028      	movs	r0, r5
    52d6:	f7fd f8c2 	bl	245e <_ZN11E28_2G4M20S13SendRadioDataEP11RadioData_t>
										returnState=TX_WITHOUT_REPLY;
    52da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    52dc:	e702      	b.n	50e4 <_ZN9RFService9RXHandlerEv+0x38>
							digitalWrite(led2Pin, HIGH);	
    52de:	2101      	movs	r1, #1
    52e0:	2015      	movs	r0, #21
    52e2:	f002 fcbd 	bl	7c60 <digitalWrite>
							delay(2000);
    52e6:	20fa      	movs	r0, #250	; 0xfa
    52e8:	00c0      	lsls	r0, r0, #3
    52ea:	f000 ff45 	bl	6178 <delay>
							digitalWrite(led2Pin, LOW);	
    52ee:	2100      	movs	r1, #0
    52f0:	2015      	movs	r0, #21
    52f2:	f002 fcb5 	bl	7c60 <digitalWrite>
							SystemInformation->SaftySwitchPushed=true; // ensure next state is POWER_OFF
    52f6:	2201      	movs	r2, #1
    52f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    52fa:	333c      	adds	r3, #60	; 0x3c
							SystemInformation->SimulateRunningOnBattery = !SystemInformation->SimulateRunningOnBattery; // toggle.
    52fc:	701a      	strb	r2, [r3, #0]
    52fe:	e6e8      	b.n	50d2 <_ZN9RFService9RXHandlerEv+0x26>
    5300:	2201      	movs	r2, #1
    5302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5304:	3336      	adds	r3, #54	; 0x36
    5306:	7819      	ldrb	r1, [r3, #0]
    5308:	404a      	eors	r2, r1
    530a:	e7f7      	b.n	52fc <_ZN9RFService9RXHandlerEv+0x250>
		if(!SaveTelegram)
    530c:	2c00      	cmp	r4, #0
    530e:	d000      	beq.n	5312 <_ZN9RFService9RXHandlerEv+0x266>
    5310:	e6f3      	b.n	50fa <_ZN9RFService9RXHandlerEv+0x4e>
			delete msg;
    5312:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5314:	980e      	ldr	r0, [sp, #56]	; 0x38
    5316:	681b      	ldr	r3, [r3, #0]
    5318:	689b      	ldr	r3, [r3, #8]
    531a:	4798      	blx	r3
    531c:	e6ed      	b.n	50fa <_ZN9RFService9RXHandlerEv+0x4e>
    531e:	46c0      	nop			; (mov r8, r8)
    5320:	0000bd8c 	.word	0x0000bd8c

00005324 <_ZN9RFService9TXHandlerEv>:
	Telegram *msg = NULL;
    5324:	2300      	movs	r3, #0
RFProtocol::RFProtocolStates_t RFService::TXHandler(){
    5326:	b537      	push	{r0, r1, r2, r4, r5, lr}
	Telegram *msg = NULL;
    5328:	9301      	str	r3, [sp, #4]
	if(RFProtocolStatus.Sleep == true){
    532a:	234a      	movs	r3, #74	; 0x4a
    532c:	33ff      	adds	r3, #255	; 0xff
    532e:	5cc4      	ldrb	r4, [r0, r3]
RFProtocol::RFProtocolStates_t RFService::TXHandler(){
    5330:	0005      	movs	r5, r0
	if(RFProtocolStatus.Sleep == true){
    5332:	2c00      	cmp	r4, #0
    5334:	d002      	beq.n	533c <_ZN9RFService9TXHandlerEv+0x18>
		return _nextState;
    5336:	2400      	movs	r4, #0
}
    5338:	0020      	movs	r0, r4
    533a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	if(txFIFO.pop(msg)){
    533c:	a901      	add	r1, sp, #4
    533e:	3084      	adds	r0, #132	; 0x84
    5340:	f7ff fcfc 	bl	4d3c <_ZN7RingBufIP8TelegramLj30EhtE3popERS1_>
    5344:	2800      	cmp	r0, #0
    5346:	d0f6      	beq.n	5336 <_ZN9RFService9TXHandlerEv+0x12>
		if(msg!=NULL){
    5348:	9801      	ldr	r0, [sp, #4]
    534a:	2800      	cmp	r0, #0
    534c:	d0f3      	beq.n	5336 <_ZN9RFService9TXHandlerEv+0x12>
			switch(msg->GetRadioMSG_ID())
    534e:	f000 f8ed 	bl	552c <_ZN8Telegram14GetRadioMSG_IDEv>
    5352:	2800      	cmp	r0, #0
    5354:	d003      	beq.n	535e <_ZN9RFService9TXHandlerEv+0x3a>
    5356:	2802      	cmp	r0, #2
    5358:	d903      	bls.n	5362 <_ZN9RFService9TXHandlerEv+0x3e>
    535a:	2803      	cmp	r0, #3
    535c:	d00b      	beq.n	5376 <_ZN9RFService9TXHandlerEv+0x52>
	RFProtocolStates_t _nextState = RX_IDLE;
    535e:	2400      	movs	r4, #0
    5360:	e01c      	b.n	539c <_ZN9RFService9TXHandlerEv+0x78>
				Radio->SendRadioData(msg->GetRadioData());
    5362:	686c      	ldr	r4, [r5, #4]
						Radio->SendRadioData(msg->GetRadioData());
    5364:	9801      	ldr	r0, [sp, #4]
    5366:	f000 f906 	bl	5576 <_ZN8Telegram12GetRadioDataEv>
    536a:	0001      	movs	r1, r0
    536c:	0020      	movs	r0, r4
    536e:	f7fd f876 	bl	245e <_ZN11E28_2G4M20S13SendRadioDataEP11RadioData_t>
						_nextState=TX_WITHOUT_REPLY;
    5372:	2402      	movs	r4, #2
					break;
    5374:	e012      	b.n	539c <_ZN9RFService9TXHandlerEv+0x78>
				switch(((Telegram_MSG_3 *)msg)->GetCommand())
    5376:	9801      	ldr	r0, [sp, #4]
    5378:	f000 fce6 	bl	5d48 <_ZN14Telegram_MSG_310GetCommandEv>
    537c:	3801      	subs	r0, #1
    537e:	2803      	cmp	r0, #3
    5380:	d80c      	bhi.n	539c <_ZN9RFService9TXHandlerEv+0x78>
    5382:	686c      	ldr	r4, [r5, #4]
    5384:	f003 faf6 	bl	8974 <__gnu_thumb1_case_sqi>
    5388:	eeee0202 	.word	0xeeee0202
						Radio->SendRadioData(msg->GetRadioData());
    538c:	9801      	ldr	r0, [sp, #4]
    538e:	f000 f8f2 	bl	5576 <_ZN8Telegram12GetRadioDataEv>
    5392:	0001      	movs	r1, r0
    5394:	0020      	movs	r0, r4
    5396:	f7fd f862 	bl	245e <_ZN11E28_2G4M20S13SendRadioDataEP11RadioData_t>
						_nextState=TX_WITH_REPLY;
    539a:	2403      	movs	r4, #3
			delete msg;
    539c:	9801      	ldr	r0, [sp, #4]
    539e:	2800      	cmp	r0, #0
    53a0:	d0ca      	beq.n	5338 <_ZN9RFService9TXHandlerEv+0x14>
    53a2:	6803      	ldr	r3, [r0, #0]
    53a4:	689b      	ldr	r3, [r3, #8]
    53a6:	4798      	blx	r3
    53a8:	e7c6      	b.n	5338 <_ZN9RFService9TXHandlerEv+0x14>
	...

000053ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.14>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
    53ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
    53ae:	0004      	movs	r4, r0
    53b0:	000d      	movs	r5, r1
    53b2:	0016      	movs	r6, r2
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
    53b4:	2900      	cmp	r1, #0
    53b6:	d101      	bne.n	53bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.14+0x10>
    53b8:	2a00      	cmp	r2, #0
    53ba:	d116      	bne.n	53ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.14+0x3e>
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
    53bc:	1b73      	subs	r3, r6, r5
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
    53be:	9301      	str	r3, [sp, #4]

	if (__dnew > size_type(_S_local_capacity))
    53c0:	2b0f      	cmp	r3, #15
    53c2:	d907      	bls.n	53d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.14+0x28>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
    53c4:	2200      	movs	r2, #0
    53c6:	a901      	add	r1, sp, #4
    53c8:	0020      	movs	r0, r4
    53ca:	f003 f965 	bl	8698 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
    53ce:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
    53d0:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
    53d2:	60a3      	str	r3, [r4, #8]
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
    53d4:	0032      	movs	r2, r6
    53d6:	0029      	movs	r1, r5
    53d8:	6820      	ldr	r0, [r4, #0]
    53da:	f003 f98b 	bl	86f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
      typedef streamoff         off_type;
      typedef mbstate_t         state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
      { __c1 = __c2; }
    53de:	2100      	movs	r1, #0
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
    53e0:	9b01      	ldr	r3, [sp, #4]
    53e2:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
    53e4:	6063      	str	r3, [r4, #4]
    53e6:	54d1      	strb	r1, [r2, r3]
      }
    53e8:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
	  std::__throw_logic_error(__N("basic_string::"
    53ea:	4801      	ldr	r0, [pc, #4]	; (53f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.14+0x44>)
    53ec:	f003 f8eb 	bl	85c6 <_ZSt19__throw_logic_errorPKc>
    53f0:	0000bd45 	.word	0x0000bd45

000053f4 <_ZN8TelegramC1E13ProtocolMSG_tmmmm>:
 */ 
 #include "Telegram.h"
  
 const std::string Telegram::base64_chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

 Telegram::Telegram(ProtocolMSG_t _MSG_ID,  uint32_t _Unique_ID_1, uint32_t _Unique_ID_2, uint32_t _Unique_ID_3, uint32_t _Unique_ID_4)
    53f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    53f6:	0004      	movs	r4, r0
    53f8:	001d      	movs	r5, r3
    53fa:	0016      	movs	r6, r2
    53fc:	000f      	movs	r7, r1
    53fe:	4b20      	ldr	r3, [pc, #128]	; (5480 <_ZN8TelegramC1E13ProtocolMSG_tmmmm+0x8c>)
    5400:	6003      	str	r3, [r0, #0]
 {
 	// header:
 	this->MSG_ID = _MSG_ID;
 	this->Unique_ID_1 = _Unique_ID_1;
 	this->Unique_ID_2 = _Unique_ID_2;
 	this->Unique_ID_3 = _Unique_ID_3;
    5402:	9b06      	ldr	r3, [sp, #24]
 	this->MSG_ID = _MSG_ID;
    5404:	7121      	strb	r1, [r4, #4]
 	this->Unique_ID_1 = _Unique_ID_1;
    5406:	60a2      	str	r2, [r4, #8]
 	this->Unique_ID_3 = _Unique_ID_3;
    5408:	6103      	str	r3, [r0, #16]
 	this->Unique_ID_4 = _Unique_ID_4;
    540a:	9b07      	ldr	r3, [sp, #28]
 	this->Unique_ID_2 = _Unique_ID_2;
    540c:	60c5      	str	r5, [r0, #12]
 	this->Unique_ID_4 = _Unique_ID_4;
    540e:	6143      	str	r3, [r0, #20]

	memset(&TelegramData.payload, 0x00, MAX_PAYLOAD_LENGTH); // Zero fills the buffer
    5410:	223c      	movs	r2, #60	; 0x3c
    5412:	2100      	movs	r1, #0
    5414:	3018      	adds	r0, #24
    5416:	f005 ffac 	bl	b372 <memset>

	//Telegram MSG
	TelegramData.payload[0] = (uint8_t)MSG_ID;

	// Unique_ID_1 transformed to 32bits.
	TelegramData.payload[1] = (uint8_t)((Unique_ID_1 >> 24) & 0xFF);
    541a:	0e33      	lsrs	r3, r6, #24
    541c:	7663      	strb	r3, [r4, #25]
	TelegramData.payload[2] = (uint8_t)((Unique_ID_1 >> 16) & 0xFF);
    541e:	0c33      	lsrs	r3, r6, #16
    5420:	76a3      	strb	r3, [r4, #26]
	TelegramData.payload[3] = (uint8_t)((Unique_ID_1 >>  8) & 0xFF);
    5422:	0a33      	lsrs	r3, r6, #8
    5424:	76e3      	strb	r3, [r4, #27]
	TelegramData.payload[4] = (uint8_t)(Unique_ID_1 & 0xFF);

	// Unique_ID_1 transformed to 32bits.
	TelegramData.payload[5] = (uint8_t)((Unique_ID_2 >> 24) & 0xFF);
    5426:	0e2b      	lsrs	r3, r5, #24
    5428:	7763      	strb	r3, [r4, #29]
	TelegramData.payload[6] = (uint8_t)((Unique_ID_2 >> 16) & 0xFF);
    542a:	0c2b      	lsrs	r3, r5, #16
    542c:	77a3      	strb	r3, [r4, #30]
	TelegramData.payload[7] = (uint8_t)((Unique_ID_2 >>  8) & 0xFF);
    542e:	0a2b      	lsrs	r3, r5, #8
    5430:	77e3      	strb	r3, [r4, #31]
	TelegramData.payload[8] = (uint8_t)(Unique_ID_2 & 0xFF);
    5432:	1c63      	adds	r3, r4, #1
	TelegramData.payload[0] = (uint8_t)MSG_ID;
    5434:	7627      	strb	r7, [r4, #24]
	TelegramData.payload[4] = (uint8_t)(Unique_ID_1 & 0xFF);
    5436:	7726      	strb	r6, [r4, #28]
	TelegramData.payload[8] = (uint8_t)(Unique_ID_2 & 0xFF);
    5438:	77dd      	strb	r5, [r3, #31]

	// Unique_ID_1 transformed to 32bits.
	TelegramData.payload[9] = (uint8_t)((Unique_ID_3 >> 24) & 0xFF);
    543a:	9b06      	ldr	r3, [sp, #24]
	// Unique_ID_1 transformed to 32bits.
	TelegramData.payload[13] = (uint8_t)((Unique_ID_4 >> 24) & 0xFF);
	TelegramData.payload[14] = (uint8_t)((Unique_ID_4 >> 16) & 0xFF);
	TelegramData.payload[15] = (uint8_t)((Unique_ID_4 >>  8) & 0xFF);
	TelegramData.payload[16] = (uint8_t)(Unique_ID_4 & 0xFF);	
}
    543c:	0020      	movs	r0, r4
	TelegramData.payload[9] = (uint8_t)((Unique_ID_3 >> 24) & 0xFF);
    543e:	0e1a      	lsrs	r2, r3, #24
    5440:	1ca3      	adds	r3, r4, #2
    5442:	77da      	strb	r2, [r3, #31]
	TelegramData.payload[10] = (uint8_t)((Unique_ID_3 >> 16) & 0xFF);
    5444:	9b06      	ldr	r3, [sp, #24]
    5446:	0c1a      	lsrs	r2, r3, #16
    5448:	1ce3      	adds	r3, r4, #3
    544a:	77da      	strb	r2, [r3, #31]
	TelegramData.payload[11] = (uint8_t)((Unique_ID_3 >>  8) & 0xFF);
    544c:	9b06      	ldr	r3, [sp, #24]
    544e:	0a1a      	lsrs	r2, r3, #8
    5450:	1d23      	adds	r3, r4, #4
    5452:	77da      	strb	r2, [r3, #31]
	TelegramData.payload[12] = (uint8_t)(Unique_ID_3 & 0xFF);
    5454:	466a      	mov	r2, sp
    5456:	7e12      	ldrb	r2, [r2, #24]
    5458:	1d63      	adds	r3, r4, #5
    545a:	77da      	strb	r2, [r3, #31]
	TelegramData.payload[13] = (uint8_t)((Unique_ID_4 >> 24) & 0xFF);
    545c:	9b07      	ldr	r3, [sp, #28]
    545e:	0e1a      	lsrs	r2, r3, #24
    5460:	1da3      	adds	r3, r4, #6
    5462:	77da      	strb	r2, [r3, #31]
	TelegramData.payload[14] = (uint8_t)((Unique_ID_4 >> 16) & 0xFF);
    5464:	9b07      	ldr	r3, [sp, #28]
    5466:	0c1a      	lsrs	r2, r3, #16
    5468:	1de3      	adds	r3, r4, #7
    546a:	77da      	strb	r2, [r3, #31]
	TelegramData.payload[15] = (uint8_t)((Unique_ID_4 >>  8) & 0xFF);
    546c:	9b07      	ldr	r3, [sp, #28]
    546e:	0a1a      	lsrs	r2, r3, #8
    5470:	0023      	movs	r3, r4
    5472:	3308      	adds	r3, #8
    5474:	77da      	strb	r2, [r3, #31]
	TelegramData.payload[16] = (uint8_t)(Unique_ID_4 & 0xFF);	
    5476:	466a      	mov	r2, sp
    5478:	7f12      	ldrb	r2, [r2, #28]
    547a:	3320      	adds	r3, #32
    547c:	701a      	strb	r2, [r3, #0]
}
    547e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5480:	0000bcf8 	.word	0x0000bcf8

00005484 <_ZN8TelegramC1EP11RadioData_t>:
 

 Telegram::Telegram(RadioData_t *data)
    5484:	b570      	push	{r4, r5, r6, lr}
 {
	memcpy(&TelegramData.payload,data->payload,data->payloadLength);
    5486:	000e      	movs	r6, r1
 Telegram::Telegram(RadioData_t *data)
    5488:	0004      	movs	r4, r0
    548a:	4b27      	ldr	r3, [pc, #156]	; (5528 <_ZN8TelegramC1EP11RadioData_t+0xa4>)
	memcpy(&TelegramData.payload,data->payload,data->payloadLength);
    548c:	363c      	adds	r6, #60	; 0x3c
 Telegram::Telegram(RadioData_t *data)
    548e:	6003      	str	r3, [r0, #0]
	memcpy(&TelegramData.payload,data->payload,data->payloadLength);
    5490:	7832      	ldrb	r2, [r6, #0]
    5492:	3018      	adds	r0, #24
 Telegram::Telegram(RadioData_t *data)
    5494:	000d      	movs	r5, r1
	memcpy(&TelegramData.payload,data->payload,data->payloadLength);
    5496:	f005 ff63 	bl	b360 <memcpy>
	TelegramData.payloadLength = data->payloadLength;
    549a:	0023      	movs	r3, r4
    549c:	7832      	ldrb	r2, [r6, #0]
    549e:	3354      	adds	r3, #84	; 0x54
    54a0:	701a      	strb	r2, [r3, #0]
	TelegramData.rssi = data->rssi;
    54a2:	223d      	movs	r2, #61	; 0x3d
    54a4:	0023      	movs	r3, r4
    54a6:	56aa      	ldrsb	r2, [r5, r2]
    54a8:	3355      	adds	r3, #85	; 0x55
    54aa:	701a      	strb	r2, [r3, #0]
	TelegramData.snr = data->snr;
    54ac:	223e      	movs	r2, #62	; 0x3e
    54ae:	56aa      	ldrsb	r2, [r5, r2]
	MSG_ID = (ProtocolMSG_t)TelegramData.payload[0];
	Unique_ID_1 = (uint32_t)((TelegramData.payload[1] << 24) + (TelegramData.payload[2] << 16) + (TelegramData.payload[3] << 8) + TelegramData.payload[4]);
	Unique_ID_2 = (uint32_t)((TelegramData.payload[5] << 24) + (TelegramData.payload[6] << 16) + (TelegramData.payload[7] << 8) + TelegramData.payload[8]);
	Unique_ID_3 = (uint32_t)((TelegramData.payload[9] << 24) + (TelegramData.payload[10] << 16) + (TelegramData.payload[11] << 8) + TelegramData.payload[12]);
	Unique_ID_4 = (uint32_t)((TelegramData.payload[13] << 24) + (TelegramData.payload[14] << 16) + (TelegramData.payload[15] << 8) + TelegramData.payload[16]);	
 }
    54b0:	0020      	movs	r0, r4
	TelegramData.snr = data->snr;
    54b2:	705a      	strb	r2, [r3, #1]
	MSG_ID = (ProtocolMSG_t)TelegramData.payload[0];
    54b4:	7e23      	ldrb	r3, [r4, #24]
	Unique_ID_1 = (uint32_t)((TelegramData.payload[1] << 24) + (TelegramData.payload[2] << 16) + (TelegramData.payload[3] << 8) + TelegramData.payload[4]);
    54b6:	7ea2      	ldrb	r2, [r4, #26]
	MSG_ID = (ProtocolMSG_t)TelegramData.payload[0];
    54b8:	7123      	strb	r3, [r4, #4]
	Unique_ID_1 = (uint32_t)((TelegramData.payload[1] << 24) + (TelegramData.payload[2] << 16) + (TelegramData.payload[3] << 8) + TelegramData.payload[4]);
    54ba:	7e63      	ldrb	r3, [r4, #25]
    54bc:	0412      	lsls	r2, r2, #16
    54be:	061b      	lsls	r3, r3, #24
    54c0:	189b      	adds	r3, r3, r2
    54c2:	7ee2      	ldrb	r2, [r4, #27]
    54c4:	0212      	lsls	r2, r2, #8
    54c6:	189b      	adds	r3, r3, r2
    54c8:	7f22      	ldrb	r2, [r4, #28]
    54ca:	189b      	adds	r3, r3, r2
    54cc:	60a3      	str	r3, [r4, #8]
	Unique_ID_2 = (uint32_t)((TelegramData.payload[5] << 24) + (TelegramData.payload[6] << 16) + (TelegramData.payload[7] << 8) + TelegramData.payload[8]);
    54ce:	7fa2      	ldrb	r2, [r4, #30]
    54d0:	7f63      	ldrb	r3, [r4, #29]
    54d2:	0412      	lsls	r2, r2, #16
    54d4:	061b      	lsls	r3, r3, #24
    54d6:	189b      	adds	r3, r3, r2
    54d8:	7fe2      	ldrb	r2, [r4, #31]
    54da:	0212      	lsls	r2, r2, #8
    54dc:	189b      	adds	r3, r3, r2
    54de:	1c62      	adds	r2, r4, #1
    54e0:	7fd2      	ldrb	r2, [r2, #31]
    54e2:	189b      	adds	r3, r3, r2
    54e4:	60e3      	str	r3, [r4, #12]
	Unique_ID_3 = (uint32_t)((TelegramData.payload[9] << 24) + (TelegramData.payload[10] << 16) + (TelegramData.payload[11] << 8) + TelegramData.payload[12]);
    54e6:	1ce2      	adds	r2, r4, #3
    54e8:	1ca3      	adds	r3, r4, #2
    54ea:	7fdb      	ldrb	r3, [r3, #31]
    54ec:	7fd2      	ldrb	r2, [r2, #31]
    54ee:	061b      	lsls	r3, r3, #24
    54f0:	0412      	lsls	r2, r2, #16
    54f2:	189b      	adds	r3, r3, r2
    54f4:	1d22      	adds	r2, r4, #4
    54f6:	7fd2      	ldrb	r2, [r2, #31]
    54f8:	0212      	lsls	r2, r2, #8
    54fa:	189b      	adds	r3, r3, r2
    54fc:	1d62      	adds	r2, r4, #5
    54fe:	7fd2      	ldrb	r2, [r2, #31]
    5500:	189b      	adds	r3, r3, r2
    5502:	6123      	str	r3, [r4, #16]
	Unique_ID_4 = (uint32_t)((TelegramData.payload[13] << 24) + (TelegramData.payload[14] << 16) + (TelegramData.payload[15] << 8) + TelegramData.payload[16]);	
    5504:	1de2      	adds	r2, r4, #7
    5506:	1da3      	adds	r3, r4, #6
    5508:	7fdb      	ldrb	r3, [r3, #31]
    550a:	7fd2      	ldrb	r2, [r2, #31]
    550c:	061b      	lsls	r3, r3, #24
    550e:	0412      	lsls	r2, r2, #16
    5510:	189b      	adds	r3, r3, r2
    5512:	0022      	movs	r2, r4
    5514:	3208      	adds	r2, #8
    5516:	7fd2      	ldrb	r2, [r2, #31]
    5518:	0212      	lsls	r2, r2, #8
    551a:	189b      	adds	r3, r3, r2
    551c:	0022      	movs	r2, r4
    551e:	3228      	adds	r2, #40	; 0x28
    5520:	7812      	ldrb	r2, [r2, #0]
    5522:	189b      	adds	r3, r3, r2
    5524:	6163      	str	r3, [r4, #20]
 }
    5526:	bd70      	pop	{r4, r5, r6, pc}
    5528:	0000bcf8 	.word	0x0000bcf8

0000552c <_ZN8Telegram14GetRadioMSG_IDEv>:
	TelegramData.payload[15] = (uint8_t)((Unique_ID_4 >>  8) & 0xFF);
	TelegramData.payload[16] = (uint8_t)(Unique_ID_4 & 0xFF);
} 
 
ProtocolMSG_t Telegram::GetRadioMSG_ID(){
	return MSG_ID;
    552c:	7900      	ldrb	r0, [r0, #4]
}
    552e:	4770      	bx	lr

00005530 <_ZN8Telegram12GetUniqueID1Ev>:
 

uint32_t Telegram::GetUniqueID1(void){
	return Unique_ID_1;
    5530:	6880      	ldr	r0, [r0, #8]
}
    5532:	4770      	bx	lr

00005534 <_ZN8Telegram12GetUniqueID2Ev>:

uint32_t Telegram::GetUniqueID2(void){
	return Unique_ID_2;
    5534:	68c0      	ldr	r0, [r0, #12]
}
    5536:	4770      	bx	lr

00005538 <_ZN8Telegram12GetUniqueID3Ev>:

uint32_t Telegram::GetUniqueID3(void){
	return Unique_ID_3;
    5538:	6900      	ldr	r0, [r0, #16]
}
    553a:	4770      	bx	lr

0000553c <_ZN8Telegram12GetUniqueID4Ev>:

uint32_t Telegram::GetUniqueID4(void){
	return Unique_ID_4;
    553c:	6940      	ldr	r0, [r0, #20]
}
    553e:	4770      	bx	lr

00005540 <_ZN8Telegram7GetRSSIEv>:
  
int8_t Telegram::GetRSSI(){
	return TelegramData.rssi;
    5540:	3055      	adds	r0, #85	; 0x55
    5542:	7800      	ldrb	r0, [r0, #0]
    5544:	b240      	sxtb	r0, r0
}
    5546:	4770      	bx	lr

00005548 <_ZN8Telegram6GetSNREv>:

int8_t Telegram::GetSNR(){
	return TelegramData.snr;
    5548:	3056      	adds	r0, #86	; 0x56
    554a:	7800      	ldrb	r0, [r0, #0]
    554c:	b240      	sxtb	r0, r0
}
    554e:	4770      	bx	lr

00005550 <_ZN8Telegram21TelegramMatchUniqueIDEmmmm>:


 bool Telegram::TelegramMatchUniqueID(uint32_t _destinationID_1, uint32_t _destinationID_2, uint32_t _destinationID_3, uint32_t _destinationID_4){
    5550:	b530      	push	{r4, r5, lr}
    5552:	0004      	movs	r4, r0
	 if(_destinationID_1 == Unique_ID_1){
    5554:	68a5      	ldr	r5, [r4, #8]
					return true;
				}
			}
		 }
	 }
	 return false;
    5556:	2000      	movs	r0, #0
	 if(_destinationID_1 == Unique_ID_1){
    5558:	428d      	cmp	r5, r1
    555a:	d10b      	bne.n	5574 <_ZN8Telegram21TelegramMatchUniqueIDEmmmm+0x24>
		 if(_destinationID_2 == Unique_ID_2){
    555c:	68e1      	ldr	r1, [r4, #12]
    555e:	4291      	cmp	r1, r2
    5560:	d108      	bne.n	5574 <_ZN8Telegram21TelegramMatchUniqueIDEmmmm+0x24>
			if(_destinationID_3 == Unique_ID_3){
    5562:	6922      	ldr	r2, [r4, #16]
    5564:	429a      	cmp	r2, r3
    5566:	d105      	bne.n	5574 <_ZN8Telegram21TelegramMatchUniqueIDEmmmm+0x24>
				if(_destinationID_4 == Unique_ID_4){
    5568:	9b03      	ldr	r3, [sp, #12]
    556a:	6960      	ldr	r0, [r4, #20]
    556c:	1ac0      	subs	r0, r0, r3
    556e:	4242      	negs	r2, r0
    5570:	4142      	adcs	r2, r0
    5572:	b2d0      	uxtb	r0, r2
 }
    5574:	bd30      	pop	{r4, r5, pc}

00005576 <_ZN8Telegram12GetRadioDataEv>:
  
RadioData_t * Telegram::GetRadioData(){
	return &TelegramData;
    5576:	3018      	adds	r0, #24
}       
    5578:	4770      	bx	lr
	...

0000557c <_ZN8Telegram13base64_encodeB5cxx11EPhi>:
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
    557c:	0003      	movs	r3, r0
	return base64_encode(id,16);
}


std::string Telegram::base64_encode(uint8_t bytes_to_encode[], int in_len)
{
    557e:	b5f0      	push	{r4, r5, r6, r7, lr}
	std::string ret = "";
	int i = 0;
    5580:	2500      	movs	r5, #0
{
    5582:	b085      	sub	sp, #20
    5584:	9100      	str	r1, [sp, #0]
          _M_construct(__beg, __end, _Tag());
    5586:	4937      	ldr	r1, [pc, #220]	; (5664 <_ZN8Telegram13base64_encodeB5cxx11EPhi+0xe8>)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
    5588:	3308      	adds	r3, #8
    558a:	9201      	str	r2, [sp, #4]
	: allocator_type(__a), _M_p(__dat) { }
    558c:	6003      	str	r3, [r0, #0]
          _M_construct(__beg, __end, _Tag());
    558e:	000a      	movs	r2, r1
    5590:	0004      	movs	r4, r0
    5592:	f7ff ff0b 	bl	53ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.14>
    5596:	9e00      	ldr	r6, [sp, #0]
    5598:	9b01      	ldr	r3, [sp, #4]
    559a:	9a00      	ldr	r2, [sp, #0]
    559c:	1b9b      	subs	r3, r3, r6
    559e:	18d3      	adds	r3, r2, r3
	int j = 0;
	uint8_t char_array_3[3];
	uint8_t char_array_4[4];
	int place = 0;

	while (in_len-- > 0) {
    55a0:	2b00      	cmp	r3, #0
    55a2:	dd2a      	ble.n	55fa <_ZN8Telegram13base64_encodeB5cxx11EPhi+0x7e>
		char_array_3[i++] = bytes_to_encode[place++];
    55a4:	7832      	ldrb	r2, [r6, #0]
    55a6:	a902      	add	r1, sp, #8
    55a8:	1c6b      	adds	r3, r5, #1
    55aa:	554a      	strb	r2, [r1, r5]
		if (i == 3) {
    55ac:	2b03      	cmp	r3, #3
    55ae:	d121      	bne.n	55f4 <_ZN8Telegram13base64_encodeB5cxx11EPhi+0x78>
			char_array_4[0] = (uint8_t)((char_array_3[0] & 0xfc) >> 2);
    55b0:	780a      	ldrb	r2, [r1, #0]
    55b2:	ad03      	add	r5, sp, #12
    55b4:	0893      	lsrs	r3, r2, #2
    55b6:	702b      	strb	r3, [r5, #0]
			char_array_4[1] = (uint8_t)(((char_array_3[0] & 0x03) << 4) + ((char_array_3[1] & 0xf0) >> 4));
    55b8:	784b      	ldrb	r3, [r1, #1]
    55ba:	2130      	movs	r1, #48	; 0x30
    55bc:	0112      	lsls	r2, r2, #4
    55be:	400a      	ands	r2, r1
    55c0:	0919      	lsrs	r1, r3, #4
    55c2:	1852      	adds	r2, r2, r1
			char_array_4[2] = (uint8_t)(((char_array_3[1] & 0x0f) << 2) + ((char_array_3[2] & 0xc0) >> 6));
    55c4:	213c      	movs	r1, #60	; 0x3c
			char_array_4[1] = (uint8_t)(((char_array_3[0] & 0x03) << 4) + ((char_array_3[1] & 0xf0) >> 4));
    55c6:	706a      	strb	r2, [r5, #1]
			char_array_4[2] = (uint8_t)(((char_array_3[1] & 0x0f) << 2) + ((char_array_3[2] & 0xc0) >> 6));
    55c8:	aa02      	add	r2, sp, #8
    55ca:	7892      	ldrb	r2, [r2, #2]
    55cc:	009b      	lsls	r3, r3, #2
    55ce:	400b      	ands	r3, r1
    55d0:	0991      	lsrs	r1, r2, #6
    55d2:	185b      	adds	r3, r3, r1
    55d4:	70ab      	strb	r3, [r5, #2]
			char_array_4[3] = (uint8_t)(char_array_3[2] & 0x3f);
    55d6:	233f      	movs	r3, #63	; 0x3f

			for(i = 0; (i<4) ; i++)
    55d8:	2700      	movs	r7, #0
			char_array_4[3] = (uint8_t)(char_array_3[2] & 0x3f);
    55da:	401a      	ands	r2, r3
    55dc:	70ea      	strb	r2, [r5, #3]
			ret += base64_chars[char_array_4[i]];
    55de:	4a22      	ldr	r2, [pc, #136]	; (5668 <_ZN8Telegram13base64_encodeB5cxx11EPhi+0xec>)
    55e0:	5deb      	ldrb	r3, [r5, r7]
    55e2:	6812      	ldr	r2, [r2, #0]
       *  @return  Reference to this string.
       */
      basic_string&
      operator+=(_CharT __c)
      {
	this->push_back(__c);
    55e4:	0020      	movs	r0, r4
    55e6:	5cd1      	ldrb	r1, [r2, r3]
			for(i = 0; (i<4) ; i++)
    55e8:	3701      	adds	r7, #1
    55ea:	f003 f8cd 	bl	8788 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
    55ee:	2f04      	cmp	r7, #4
    55f0:	d1f5      	bne.n	55de <_ZN8Telegram13base64_encodeB5cxx11EPhi+0x62>
			i = 0;
    55f2:	2300      	movs	r3, #0
    55f4:	3601      	adds	r6, #1
    55f6:	001d      	movs	r5, r3
    55f8:	e7ce      	b.n	5598 <_ZN8Telegram13base64_encodeB5cxx11EPhi+0x1c>
		}
	}

	if (i > 0) {
    55fa:	2d00      	cmp	r5, #0
    55fc:	d02f      	beq.n	565e <_ZN8Telegram13base64_encodeB5cxx11EPhi+0xe2>
    55fe:	002b      	movs	r3, r5
		for(j = i; j< 3; j++)
		char_array_3[j] = 0;
    5600:	2200      	movs	r2, #0
		for(j = i; j< 3; j++)
    5602:	2b02      	cmp	r3, #2
    5604:	dc03      	bgt.n	560e <_ZN8Telegram13base64_encodeB5cxx11EPhi+0x92>
		char_array_3[j] = 0;
    5606:	a902      	add	r1, sp, #8
    5608:	54ca      	strb	r2, [r1, r3]
		for(j = i; j< 3; j++)
    560a:	3301      	adds	r3, #1
    560c:	e7f9      	b.n	5602 <_ZN8Telegram13base64_encodeB5cxx11EPhi+0x86>

		char_array_4[0] = (uint8_t)(( char_array_3[0] & 0xfc) >> 2);
		char_array_4[1] = (uint8_t)(((char_array_3[0] & 0x03) << 4) + ((char_array_3[1] & 0xf0) >> 4));
    560e:	2130      	movs	r1, #48	; 0x30
		char_array_4[0] = (uint8_t)(( char_array_3[0] & 0xfc) >> 2);
    5610:	ab02      	add	r3, sp, #8
    5612:	781a      	ldrb	r2, [r3, #0]
    5614:	ae03      	add	r6, sp, #12
    5616:	0893      	lsrs	r3, r2, #2
    5618:	7033      	strb	r3, [r6, #0]
		char_array_4[1] = (uint8_t)(((char_array_3[0] & 0x03) << 4) + ((char_array_3[1] & 0xf0) >> 4));
    561a:	ab02      	add	r3, sp, #8
    561c:	785b      	ldrb	r3, [r3, #1]
    561e:	0112      	lsls	r2, r2, #4
    5620:	400a      	ands	r2, r1
    5622:	0919      	lsrs	r1, r3, #4
    5624:	1852      	adds	r2, r2, r1
    5626:	7072      	strb	r2, [r6, #1]
		char_array_4[2] = (uint8_t)(((char_array_3[1] & 0x0f) << 2) + ((char_array_3[2] & 0xc0) >> 6));
    5628:	223c      	movs	r2, #60	; 0x3c

		for (j = 0; (j<i + 1); j++)
    562a:	2700      	movs	r7, #0
		char_array_4[2] = (uint8_t)(((char_array_3[1] & 0x0f) << 2) + ((char_array_3[2] & 0xc0) >> 6));
    562c:	009b      	lsls	r3, r3, #2
    562e:	4013      	ands	r3, r2
    5630:	aa02      	add	r2, sp, #8
    5632:	7892      	ldrb	r2, [r2, #2]
    5634:	0992      	lsrs	r2, r2, #6
    5636:	189b      	adds	r3, r3, r2
    5638:	70b3      	strb	r3, [r6, #2]
		ret += base64_chars[char_array_4[j]];
    563a:	4a0b      	ldr	r2, [pc, #44]	; (5668 <_ZN8Telegram13base64_encodeB5cxx11EPhi+0xec>)
    563c:	5df3      	ldrb	r3, [r6, r7]
    563e:	6812      	ldr	r2, [r2, #0]
    5640:	0020      	movs	r0, r4
    5642:	5cd1      	ldrb	r1, [r2, r3]
		for (j = 0; (j<i + 1); j++)
    5644:	3701      	adds	r7, #1
    5646:	f003 f89f 	bl	8788 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
    564a:	42bd      	cmp	r5, r7
    564c:	daf5      	bge.n	563a <_ZN8Telegram13base64_encodeB5cxx11EPhi+0xbe>
				
		while((i++ < 3))
    564e:	2d03      	cmp	r5, #3
    5650:	d005      	beq.n	565e <_ZN8Telegram13base64_encodeB5cxx11EPhi+0xe2>
    5652:	213d      	movs	r1, #61	; 0x3d
    5654:	0020      	movs	r0, r4
    5656:	f003 f897 	bl	8788 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
    565a:	3501      	adds	r5, #1
    565c:	e7f7      	b.n	564e <_ZN8Telegram13base64_encodeB5cxx11EPhi+0xd2>

	}

	return ret;

}
    565e:	0020      	movs	r0, r4
    5660:	b005      	add	sp, #20
    5662:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5664:	0000bdae 	.word	0x0000bdae
    5668:	20000290 	.word	0x20000290

0000566c <_GLOBAL__sub_I__ZN8Telegram12base64_charsB5cxx11E>:

		for (j = 0; (j < i - 1); j++) ret += char_array_3[j];
	}

	return ret;
    566c:	b510      	push	{r4, lr}
	: allocator_type(__a), _M_p(__dat) { }
    566e:	4c07      	ldr	r4, [pc, #28]	; (568c <_GLOBAL__sub_I__ZN8Telegram12base64_charsB5cxx11E+0x20>)
          _M_construct(__beg, __end, _Tag());
    5670:	4a07      	ldr	r2, [pc, #28]	; (5690 <_GLOBAL__sub_I__ZN8Telegram12base64_charsB5cxx11E+0x24>)
	: allocator_type(__a), _M_p(__dat) { }
    5672:	0023      	movs	r3, r4
    5674:	3308      	adds	r3, #8
    5676:	6023      	str	r3, [r4, #0]
          _M_construct(__beg, __end, _Tag());
    5678:	0020      	movs	r0, r4
    567a:	4906      	ldr	r1, [pc, #24]	; (5694 <_GLOBAL__sub_I__ZN8Telegram12base64_charsB5cxx11E+0x28>)
    567c:	f7ff fe96 	bl	53ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.14>
 const std::string Telegram::base64_chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    5680:	4a05      	ldr	r2, [pc, #20]	; (5698 <_GLOBAL__sub_I__ZN8Telegram12base64_charsB5cxx11E+0x2c>)
    5682:	4906      	ldr	r1, [pc, #24]	; (569c <_GLOBAL__sub_I__ZN8Telegram12base64_charsB5cxx11E+0x30>)
    5684:	0020      	movs	r0, r4
    5686:	f002 ff97 	bl	85b8 <__aeabi_atexit>
    568a:	bd10      	pop	{r4, pc}
    568c:	20000290 	.word	0x20000290
    5690:	0000bd44 	.word	0x0000bd44
    5694:	0000bd04 	.word	0x0000bd04
    5698:	20000000 	.word	0x20000000
    569c:	0000877d 	.word	0x0000877d

000056a0 <_ZN14Telegram_MSG_1D1Ev>:

	// Constructor to create messages from Radio data struct.
	Telegram_MSG_1(RadioData_t *radioData);

	
	virtual	~Telegram_MSG_1(){};	// destructor.
    56a0:	4770      	bx	lr

000056a2 <_ZN14Telegram_MSG_118SerialPrintMessageEv>:
	SerialAUX->println("Firmware Version      :" + String(this->FirmwareVersion));
	SerialAUX->println("PCB Version           :" + String(this->PCBVersion));
	SerialAUX->println("# of Beacons to relay :" + String(this->NumberOfBeaconsToRelay));
	SerialAUX->println("----------------------------------------------------------------");
	SerialAUX->println("");*/
}
    56a2:	4770      	bx	lr

000056a4 <_ZN14Telegram_MSG_1D0Ev>:
    56a4:	b510      	push	{r4, lr}
    56a6:	0004      	movs	r4, r0
    56a8:	f000 fda6 	bl	61f8 <_ZdlPv>
    56ac:	0020      	movs	r0, r4
    56ae:	bd10      	pop	{r4, pc}

000056b0 <_ZN14Telegram_MSG_1C1Emmmmmmmhhbffhffhh>:
Telegram_MSG_1::Telegram_MSG_1(uint32_t _Unique_ID_1, uint32_t _Unique_ID_2, uint32_t _Unique_ID_3, uint32_t _Unique_ID_4, 
    56b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    56b2:	b087      	sub	sp, #28
    56b4:	0004      	movs	r4, r0
    56b6:	a810      	add	r0, sp, #64	; 0x40
    56b8:	7800      	ldrb	r0, [r0, #0]
    56ba:	ae04      	add	r6, sp, #16
    56bc:	9003      	str	r0, [sp, #12]
    56be:	a811      	add	r0, sp, #68	; 0x44
    56c0:	7800      	ldrb	r0, [r0, #0]
    56c2:	9004      	str	r0, [sp, #16]
    56c4:	a812      	add	r0, sp, #72	; 0x48
    56c6:	7805      	ldrb	r5, [r0, #0]
    56c8:	2025      	movs	r0, #37	; 0x25
    56ca:	1980      	adds	r0, r0, r6
    56cc:	7fc7      	ldrb	r7, [r0, #31]
    56ce:	a818      	add	r0, sp, #96	; 0x60
    56d0:	7800      	ldrb	r0, [r0, #0]
    56d2:	9005      	str	r0, [sp, #20]
    56d4:	a819      	add	r0, sp, #100	; 0x64
    56d6:	7806      	ldrb	r6, [r0, #0]
							   : Telegram(MSG_Beacon_Broadcast, _Unique_ID_1, _Unique_ID_2, _Unique_ID_3, _Unique_ID_4)
    56d8:	980c      	ldr	r0, [sp, #48]	; 0x30
    56da:	9300      	str	r3, [sp, #0]
    56dc:	9001      	str	r0, [sp, #4]
    56de:	0013      	movs	r3, r2
    56e0:	0020      	movs	r0, r4
    56e2:	000a      	movs	r2, r1
    56e4:	2101      	movs	r1, #1
    56e6:	f7ff fe85 	bl	53f4 <_ZN8TelegramC1E13ProtocolMSG_tmmmm>
    56ea:	4b59      	ldr	r3, [pc, #356]	; (5850 <_ZN14Telegram_MSG_1C1Emmmmmmmhhbffhffhh+0x1a0>)
	this->NumberOfSat = _NumberOfSat;
    56ec:	466a      	mov	r2, sp
							   : Telegram(MSG_Beacon_Broadcast, _Unique_ID_1, _Unique_ID_2, _Unique_ID_3, _Unique_ID_4)
    56ee:	3308      	adds	r3, #8
    56f0:	6023      	str	r3, [r4, #0]
	this->UTCTime = _UTCTime;
    56f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	this->NumberOfSat = _NumberOfSat;
    56f4:	7b12      	ldrb	r2, [r2, #12]
	this->UTCTime = _UTCTime;
    56f6:	65a3      	str	r3, [r4, #88]	; 0x58
	this->Latitude = _Lattitude;
    56f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	TelegramData.payload[HEADER_SIZE+2] = (uint8_t)(UTCTime & 0xFF);
    56fa:	2124      	movs	r1, #36	; 0x24
	this->Latitude = _Lattitude;
    56fc:	65e3      	str	r3, [r4, #92]	; 0x5c
	this->Longitude = _Longitude;			
    56fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5700:	6623      	str	r3, [r4, #96]	; 0x60
	this->NumberOfSat = _NumberOfSat;
    5702:	0023      	movs	r3, r4
    5704:	3364      	adds	r3, #100	; 0x64
    5706:	701a      	strb	r2, [r3, #0]
	this->Fix = _Fix;
    5708:	466a      	mov	r2, sp
    570a:	7c12      	ldrb	r2, [r2, #16]
	this->RunningOnBattery = _RunningOnBattery;
    570c:	709d      	strb	r5, [r3, #2]
	this->Fix = _Fix;
    570e:	705a      	strb	r2, [r3, #1]
	this->Pressure = _Pressure;
    5710:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	this->PCBVersion = _PCBVersion;
    5712:	466a      	mov	r2, sp
	this->Pressure = _Pressure;
    5714:	66a3      	str	r3, [r4, #104]	; 0x68
	this->GroundSpeed = _GroundSpeed;
    5716:	9b14      	ldr	r3, [sp, #80]	; 0x50
	this->PCBVersion = _PCBVersion;
    5718:	7d12      	ldrb	r2, [r2, #20]
	this->GroundSpeed = _GroundSpeed;
    571a:	66e3      	str	r3, [r4, #108]	; 0x6c
	this->SecondsSinceLastGSContact = _SecondsSinceLastGSContact;
    571c:	0023      	movs	r3, r4
    571e:	3370      	adds	r3, #112	; 0x70
    5720:	701f      	strb	r7, [r3, #0]
	this->BatteryVoltage = _BatteryVoltage;
    5722:	9b16      	ldr	r3, [sp, #88]	; 0x58
    5724:	6763      	str	r3, [r4, #116]	; 0x74
	this->FirmwareVersion = _FirmwareVersion;
    5726:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    5728:	67a3      	str	r3, [r4, #120]	; 0x78
	this->PCBVersion = _PCBVersion;
    572a:	0023      	movs	r3, r4
    572c:	337c      	adds	r3, #124	; 0x7c
    572e:	701a      	strb	r2, [r3, #0]
	this->NumberOfBeaconsToRelay = _NumberOfBeaconsToRelay;	
    5730:	705e      	strb	r6, [r3, #1]
	TelegramData.payload[HEADER_SIZE+0] = (uint8_t)((UTCTime >> 16) & 0xFF);
    5732:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5734:	0c1a      	lsrs	r2, r3, #16
    5736:	0023      	movs	r3, r4
    5738:	3329      	adds	r3, #41	; 0x29
    573a:	701a      	strb	r2, [r3, #0]
	TelegramData.payload[HEADER_SIZE+1] = (uint8_t)((UTCTime >> 8) & 0xFF);
    573c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    573e:	0a1a      	lsrs	r2, r3, #8
    5740:	0023      	movs	r3, r4
    5742:	332a      	adds	r3, #42	; 0x2a
    5744:	701a      	strb	r2, [r3, #0]
	TelegramData.payload[HEADER_SIZE+2] = (uint8_t)(UTCTime & 0xFF);
    5746:	aa04      	add	r2, sp, #16
    5748:	1852      	adds	r2, r2, r1
    574a:	7812      	ldrb	r2, [r2, #0]
	TelegramData.payload[HEADER_SIZE+6] = (uint8_t)(Latitude & 0xFF);
    574c:	3104      	adds	r1, #4
	TelegramData.payload[HEADER_SIZE+2] = (uint8_t)(UTCTime & 0xFF);
    574e:	705a      	strb	r2, [r3, #1]
	TelegramData.payload[HEADER_SIZE+3] = (uint8_t)((Latitude >> 24) & 0xFF);
    5750:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5752:	0e1a      	lsrs	r2, r3, #24
    5754:	0023      	movs	r3, r4
    5756:	332c      	adds	r3, #44	; 0x2c
    5758:	701a      	strb	r2, [r3, #0]
	TelegramData.payload[HEADER_SIZE+4] = (uint8_t)((Latitude >> 16) & 0xFF);
    575a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    575c:	141a      	asrs	r2, r3, #16
    575e:	0023      	movs	r3, r4
    5760:	332d      	adds	r3, #45	; 0x2d
    5762:	701a      	strb	r2, [r3, #0]
	TelegramData.payload[HEADER_SIZE+5] = (uint8_t)((Latitude >>  8) & 0xFF);
    5764:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5766:	121a      	asrs	r2, r3, #8
    5768:	0023      	movs	r3, r4
    576a:	332e      	adds	r3, #46	; 0x2e
    576c:	701a      	strb	r2, [r3, #0]
	TelegramData.payload[HEADER_SIZE+6] = (uint8_t)(Latitude & 0xFF);
    576e:	aa04      	add	r2, sp, #16
    5770:	1852      	adds	r2, r2, r1
    5772:	7812      	ldrb	r2, [r2, #0]
	TelegramData.payload[HEADER_SIZE+10] = (uint8_t)(Longitude & 0xFF);
    5774:	3104      	adds	r1, #4
	TelegramData.payload[HEADER_SIZE+6] = (uint8_t)(Latitude & 0xFF);
    5776:	705a      	strb	r2, [r3, #1]
	TelegramData.payload[HEADER_SIZE+7]  = (uint8_t)((Longitude >> 24) & 0xFF);
    5778:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    577a:	0e1a      	lsrs	r2, r3, #24
    577c:	0023      	movs	r3, r4
    577e:	3330      	adds	r3, #48	; 0x30
    5780:	701a      	strb	r2, [r3, #0]
	TelegramData.payload[HEADER_SIZE+8]  = (uint8_t)((Longitude >> 16) & 0xFF);
    5782:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5784:	141a      	asrs	r2, r3, #16
    5786:	0023      	movs	r3, r4
    5788:	3331      	adds	r3, #49	; 0x31
    578a:	701a      	strb	r2, [r3, #0]
	TelegramData.payload[HEADER_SIZE+9]  = (uint8_t)((Longitude >>  8) & 0xFF);
    578c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    578e:	121a      	asrs	r2, r3, #8
    5790:	0023      	movs	r3, r4
    5792:	3332      	adds	r3, #50	; 0x32
    5794:	701a      	strb	r2, [r3, #0]
	TelegramData.payload[HEADER_SIZE+10] = (uint8_t)(Longitude & 0xFF);
    5796:	aa04      	add	r2, sp, #16
    5798:	1852      	adds	r2, r2, r1
    579a:	7812      	ldrb	r2, [r2, #0]
	temp_8 = NumberOfSat & 0b00011111;
    579c:	9903      	ldr	r1, [sp, #12]
	TelegramData.payload[HEADER_SIZE+10] = (uint8_t)(Longitude & 0xFF);
    579e:	705a      	strb	r2, [r3, #1]
	temp_8 |= ((Fix & 0b00000011) << 5);
    57a0:	2260      	movs	r2, #96	; 0x60
    57a2:	9b04      	ldr	r3, [sp, #16]
    57a4:	015b      	lsls	r3, r3, #5
    57a6:	4013      	ands	r3, r2
	temp_8 = NumberOfSat & 0b00011111;
    57a8:	3a41      	subs	r2, #65	; 0x41
    57aa:	400a      	ands	r2, r1
	temp_8 |= ((Fix & 0b00000011) << 5);
    57ac:	4313      	orrs	r3, r2
	if(RunningOnBattery)
    57ae:	2d00      	cmp	r5, #0
    57b0:	d001      	beq.n	57b6 <_ZN14Telegram_MSG_1C1Emmmmmmmhhbffhffhh+0x106>
	temp_8 |= 0b10000000;
    57b2:	2280      	movs	r2, #128	; 0x80
    57b4:	4313      	orrs	r3, r2
	TelegramData.payload[HEADER_SIZE+11] = temp_8;
    57b6:	0022      	movs	r2, r4
    57b8:	3234      	adds	r2, #52	; 0x34
    57ba:	7013      	strb	r3, [r2, #0]
	temp_16=(uint16_t)(Pressure);
    57bc:	9813      	ldr	r0, [sp, #76]	; 0x4c
    57be:	f003 fae5 	bl	8d8c <__aeabi_f2uiz>
	TelegramData.payload[HEADER_SIZE+12]  = (uint8_t)((temp_16 >>  8) & 0xFF);
    57c2:	0023      	movs	r3, r4
	temp_16=(uint16_t)(Pressure);
    57c4:	b280      	uxth	r0, r0
	TelegramData.payload[HEADER_SIZE+12]  = (uint8_t)((temp_16 >>  8) & 0xFF);
    57c6:	0a02      	lsrs	r2, r0, #8
    57c8:	3335      	adds	r3, #53	; 0x35
    57ca:	701a      	strb	r2, [r3, #0]
	TelegramData.payload[HEADER_SIZE+13] = (uint8_t)(temp_16 & 0xFF);
    57cc:	7058      	strb	r0, [r3, #1]
	temp_16=(uint16_t)(GroundSpeed*10);
    57ce:	4921      	ldr	r1, [pc, #132]	; (5854 <_ZN14Telegram_MSG_1C1Emmmmmmmhhbffhffhh+0x1a4>)
    57d0:	9814      	ldr	r0, [sp, #80]	; 0x50
    57d2:	f003 fe93 	bl	94fc <__aeabi_fmul>
    57d6:	f003 fad9 	bl	8d8c <__aeabi_f2uiz>
	TelegramData.payload[HEADER_SIZE+14]  = (uint8_t)(((temp_16) >>  8) & 0xFF);
    57da:	0023      	movs	r3, r4
	temp_16=(uint16_t)(GroundSpeed*10);
    57dc:	b280      	uxth	r0, r0
	TelegramData.payload[HEADER_SIZE+14]  = (uint8_t)(((temp_16) >>  8) & 0xFF);
    57de:	3337      	adds	r3, #55	; 0x37
    57e0:	0a02      	lsrs	r2, r0, #8
    57e2:	701a      	strb	r2, [r3, #0]
	TelegramData.payload[HEADER_SIZE+15] = (uint8_t)((temp_16) & 0xFF);
    57e4:	7058      	strb	r0, [r3, #1]
	TelegramData.payload[HEADER_SIZE+16] = SecondsSinceLastGSContact;
    57e6:	709f      	strb	r7, [r3, #2]
	temp_8=(uint8_t)((BatteryVoltage-2.0)*100);
    57e8:	9816      	ldr	r0, [sp, #88]	; 0x58
    57ea:	f005 fc71 	bl	b0d0 <__aeabi_f2d>
    57ee:	2380      	movs	r3, #128	; 0x80
    57f0:	2200      	movs	r2, #0
    57f2:	05db      	lsls	r3, r3, #23
    57f4:	f005 f8a8 	bl	a948 <__aeabi_dsub>
    57f8:	2200      	movs	r2, #0
    57fa:	4b17      	ldr	r3, [pc, #92]	; (5858 <_ZN14Telegram_MSG_1C1Emmmmmmmhhbffhffhh+0x1a8>)
    57fc:	f004 fe24 	bl	a448 <__aeabi_dmul>
    5800:	f003 fadc 	bl	8dbc <__aeabi_d2uiz>
	TelegramData.payload[HEADER_SIZE+17] = temp_8;
    5804:	0023      	movs	r3, r4
    5806:	333a      	adds	r3, #58	; 0x3a
    5808:	7018      	strb	r0, [r3, #0]
	temp_8 = (uint8_t)(FirmwareVersion);
    580a:	9817      	ldr	r0, [sp, #92]	; 0x5c
    580c:	f003 fabe 	bl	8d8c <__aeabi_f2uiz>
	TelegramData.payload[HEADER_SIZE+18] = temp_8;
    5810:	0023      	movs	r3, r4
	temp_8 = (uint8_t)(FirmwareVersion);
    5812:	b2c5      	uxtb	r5, r0
	TelegramData.payload[HEADER_SIZE+18] = temp_8;
    5814:	333b      	adds	r3, #59	; 0x3b
    5816:	701d      	strb	r5, [r3, #0]
	TelegramData.payload[HEADER_SIZE+19] = (uint8_t)((FirmwareVersion*100)-temp_8*100);
    5818:	4910      	ldr	r1, [pc, #64]	; (585c <_ZN14Telegram_MSG_1C1Emmmmmmmhhbffhffhh+0x1ac>)
    581a:	9817      	ldr	r0, [sp, #92]	; 0x5c
    581c:	f003 fe6e 	bl	94fc <__aeabi_fmul>
    5820:	1c07      	adds	r7, r0, #0
    5822:	2064      	movs	r0, #100	; 0x64
    5824:	4368      	muls	r0, r5
    5826:	f004 f945 	bl	9ab4 <__aeabi_i2f>
    582a:	1c01      	adds	r1, r0, #0
    582c:	1c38      	adds	r0, r7, #0
    582e:	f003 ff85 	bl	973c <__aeabi_fsub>
    5832:	f003 faab 	bl	8d8c <__aeabi_f2uiz>
	TelegramData.payload[HEADER_SIZE+20] = PCBVersion;
    5836:	466a      	mov	r2, sp
	TelegramData.payload[HEADER_SIZE+19] = (uint8_t)((FirmwareVersion*100)-temp_8*100);
    5838:	0023      	movs	r3, r4
	TelegramData.payload[HEADER_SIZE+20] = PCBVersion;
    583a:	7d12      	ldrb	r2, [r2, #20]
	TelegramData.payload[HEADER_SIZE+19] = (uint8_t)((FirmwareVersion*100)-temp_8*100);
    583c:	333c      	adds	r3, #60	; 0x3c
    583e:	7018      	strb	r0, [r3, #0]
	TelegramData.payload[HEADER_SIZE+20] = PCBVersion;
    5840:	705a      	strb	r2, [r3, #1]
}
    5842:	0020      	movs	r0, r4
	TelegramData.payloadLength = HEADER_SIZE + 21 + 1;
    5844:	2227      	movs	r2, #39	; 0x27
	TelegramData.payload[HEADER_SIZE+21] = (uint8_t)NumberOfBeaconsToRelay;
    5846:	709e      	strb	r6, [r3, #2]
	TelegramData.payloadLength = HEADER_SIZE + 21 + 1;
    5848:	761a      	strb	r2, [r3, #24]
}
    584a:	b007      	add	sp, #28
    584c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    584e:	46c0      	nop			; (mov r8, r8)
    5850:	0000bd70 	.word	0x0000bd70
    5854:	41200000 	.word	0x41200000
    5858:	40590000 	.word	0x40590000
    585c:	42c80000 	.word	0x42c80000

00005860 <_ZN14Telegram_MSG_1C1EP11RadioData_t>:
Telegram_MSG_1::Telegram_MSG_1(RadioData_t *radioData) : Telegram(radioData)
    5860:	b510      	push	{r4, lr}
    5862:	0004      	movs	r4, r0
    5864:	f7ff fe0e 	bl	5484 <_ZN8TelegramC1EP11RadioData_t>
    5868:	4b47      	ldr	r3, [pc, #284]	; (5988 <_ZN14Telegram_MSG_1C1EP11RadioData_t+0x128>)
    586a:	3308      	adds	r3, #8
    586c:	6023      	str	r3, [r4, #0]
	if( (TelegramData.payloadLength >= HEADER_SIZE+21+1)){
    586e:	0023      	movs	r3, r4
    5870:	3354      	adds	r3, #84	; 0x54
    5872:	781b      	ldrb	r3, [r3, #0]
    5874:	2b26      	cmp	r3, #38	; 0x26
    5876:	dc00      	bgt.n	587a <_ZN14Telegram_MSG_1C1EP11RadioData_t+0x1a>
    5878:	e083      	b.n	5982 <_ZN14Telegram_MSG_1C1EP11RadioData_t+0x122>
		UTCTime =   (uint32_t)((TelegramData.payload[HEADER_SIZE+0] << 16) + (TelegramData.payload[HEADER_SIZE+1] << 8) + TelegramData.payload[HEADER_SIZE+2]);
    587a:	0023      	movs	r3, r4
    587c:	0022      	movs	r2, r4
    587e:	3329      	adds	r3, #41	; 0x29
    5880:	322a      	adds	r2, #42	; 0x2a
    5882:	781b      	ldrb	r3, [r3, #0]
    5884:	7812      	ldrb	r2, [r2, #0]
    5886:	041b      	lsls	r3, r3, #16
    5888:	0212      	lsls	r2, r2, #8
    588a:	189b      	adds	r3, r3, r2
    588c:	0022      	movs	r2, r4
    588e:	322b      	adds	r2, #43	; 0x2b
    5890:	7812      	ldrb	r2, [r2, #0]
		NumberOfSat = (uint8_t)(TelegramData.payload[HEADER_SIZE+11] & 0b00011111);
    5892:	0021      	movs	r1, r4
		UTCTime =   (uint32_t)((TelegramData.payload[HEADER_SIZE+0] << 16) + (TelegramData.payload[HEADER_SIZE+1] << 8) + TelegramData.payload[HEADER_SIZE+2]);
    5894:	189b      	adds	r3, r3, r2
    5896:	65a3      	str	r3, [r4, #88]	; 0x58
		Latitude =  (uint32_t)((TelegramData.payload[HEADER_SIZE+3] << 24) + (TelegramData.payload[HEADER_SIZE+4] << 16) + (TelegramData.payload[HEADER_SIZE+5] << 8) + TelegramData.payload[HEADER_SIZE+6]);
    5898:	0022      	movs	r2, r4
    589a:	0023      	movs	r3, r4
    589c:	322d      	adds	r2, #45	; 0x2d
    589e:	332c      	adds	r3, #44	; 0x2c
    58a0:	781b      	ldrb	r3, [r3, #0]
    58a2:	7812      	ldrb	r2, [r2, #0]
    58a4:	061b      	lsls	r3, r3, #24
    58a6:	0412      	lsls	r2, r2, #16
    58a8:	189b      	adds	r3, r3, r2
    58aa:	0022      	movs	r2, r4
    58ac:	322e      	adds	r2, #46	; 0x2e
    58ae:	7812      	ldrb	r2, [r2, #0]
		NumberOfSat = (uint8_t)(TelegramData.payload[HEADER_SIZE+11] & 0b00011111);
    58b0:	3164      	adds	r1, #100	; 0x64
		Latitude =  (uint32_t)((TelegramData.payload[HEADER_SIZE+3] << 24) + (TelegramData.payload[HEADER_SIZE+4] << 16) + (TelegramData.payload[HEADER_SIZE+5] << 8) + TelegramData.payload[HEADER_SIZE+6]);
    58b2:	0212      	lsls	r2, r2, #8
    58b4:	189b      	adds	r3, r3, r2
    58b6:	0022      	movs	r2, r4
    58b8:	322f      	adds	r2, #47	; 0x2f
    58ba:	7812      	ldrb	r2, [r2, #0]
    58bc:	189b      	adds	r3, r3, r2
    58be:	65e3      	str	r3, [r4, #92]	; 0x5c
		Longitude = (uint32_t)((TelegramData.payload[HEADER_SIZE+7] << 24) + (TelegramData.payload[HEADER_SIZE+8] << 16) + (TelegramData.payload[HEADER_SIZE+9] << 8) + TelegramData.payload[HEADER_SIZE+10]);
    58c0:	0022      	movs	r2, r4
    58c2:	0023      	movs	r3, r4
    58c4:	3231      	adds	r2, #49	; 0x31
    58c6:	3330      	adds	r3, #48	; 0x30
    58c8:	781b      	ldrb	r3, [r3, #0]
    58ca:	7812      	ldrb	r2, [r2, #0]
    58cc:	061b      	lsls	r3, r3, #24
    58ce:	0412      	lsls	r2, r2, #16
    58d0:	189b      	adds	r3, r3, r2
    58d2:	0022      	movs	r2, r4
    58d4:	3232      	adds	r2, #50	; 0x32
    58d6:	7812      	ldrb	r2, [r2, #0]
    58d8:	0212      	lsls	r2, r2, #8
    58da:	189b      	adds	r3, r3, r2
    58dc:	0022      	movs	r2, r4
    58de:	3233      	adds	r2, #51	; 0x33
    58e0:	7812      	ldrb	r2, [r2, #0]
    58e2:	189b      	adds	r3, r3, r2
    58e4:	6623      	str	r3, [r4, #96]	; 0x60
		NumberOfSat = (uint8_t)(TelegramData.payload[HEADER_SIZE+11] & 0b00011111);
    58e6:	0023      	movs	r3, r4
    58e8:	221f      	movs	r2, #31
    58ea:	3334      	adds	r3, #52	; 0x34
    58ec:	781b      	ldrb	r3, [r3, #0]
    58ee:	401a      	ands	r2, r3
    58f0:	700a      	strb	r2, [r1, #0]
		Fix			= (uint8_t)((TelegramData.payload[HEADER_SIZE+11]& 0b01100000) >> 5);
    58f2:	065a      	lsls	r2, r3, #25
    58f4:	0f92      	lsrs	r2, r2, #30
		if((TelegramData.payload[HEADER_SIZE+11] & 0b10000000)){
    58f6:	b25b      	sxtb	r3, r3
		Fix			= (uint8_t)((TelegramData.payload[HEADER_SIZE+11]& 0b01100000) >> 5);
    58f8:	704a      	strb	r2, [r1, #1]
		if((TelegramData.payload[HEADER_SIZE+11] & 0b10000000)){
    58fa:	2b00      	cmp	r3, #0
    58fc:	da03      	bge.n	5906 <_ZN14Telegram_MSG_1C1EP11RadioData_t+0xa6>
			RunningOnBattery = true;
    58fe:	0023      	movs	r3, r4
    5900:	2201      	movs	r2, #1
    5902:	3366      	adds	r3, #102	; 0x66
    5904:	701a      	strb	r2, [r3, #0]
		Pressure = 	(float)((TelegramData.payload[HEADER_SIZE+12] << 8) + TelegramData.payload[HEADER_SIZE+13]);
    5906:	0023      	movs	r3, r4
    5908:	3335      	adds	r3, #53	; 0x35
    590a:	7818      	ldrb	r0, [r3, #0]
    590c:	3301      	adds	r3, #1
    590e:	781b      	ldrb	r3, [r3, #0]
    5910:	0200      	lsls	r0, r0, #8
    5912:	18c0      	adds	r0, r0, r3
    5914:	f004 f8ce 	bl	9ab4 <__aeabi_i2f>
		GroundSpeed = (float)((TelegramData.payload[HEADER_SIZE+14] << 8) + TelegramData.payload[HEADER_SIZE+15]);
    5918:	0023      	movs	r3, r4
		Pressure = 	(float)((TelegramData.payload[HEADER_SIZE+12] << 8) + TelegramData.payload[HEADER_SIZE+13]);
    591a:	66a0      	str	r0, [r4, #104]	; 0x68
		GroundSpeed = (float)((TelegramData.payload[HEADER_SIZE+14] << 8) + TelegramData.payload[HEADER_SIZE+15]);
    591c:	3337      	adds	r3, #55	; 0x37
    591e:	7818      	ldrb	r0, [r3, #0]
    5920:	3301      	adds	r3, #1
    5922:	781b      	ldrb	r3, [r3, #0]
    5924:	0200      	lsls	r0, r0, #8
    5926:	18c0      	adds	r0, r0, r3
    5928:	f004 f8c4 	bl	9ab4 <__aeabi_i2f>
		GroundSpeed = GroundSpeed / 10;
    592c:	4917      	ldr	r1, [pc, #92]	; (598c <_ZN14Telegram_MSG_1C1EP11RadioData_t+0x12c>)
    592e:	f003 fbf5 	bl	911c <__aeabi_fdiv>
		SecondsSinceLastGSContact = (uint8_t)TelegramData.payload[HEADER_SIZE+16];
    5932:	0023      	movs	r3, r4
		GroundSpeed = GroundSpeed / 10;
    5934:	66e0      	str	r0, [r4, #108]	; 0x6c
		SecondsSinceLastGSContact = (uint8_t)TelegramData.payload[HEADER_SIZE+16];
    5936:	3339      	adds	r3, #57	; 0x39
    5938:	781a      	ldrb	r2, [r3, #0]
    593a:	3337      	adds	r3, #55	; 0x37
    593c:	701a      	strb	r2, [r3, #0]
		BatteryVoltage  = (float)TelegramData.payload[HEADER_SIZE+17];
    593e:	3b36      	subs	r3, #54	; 0x36
    5940:	7818      	ldrb	r0, [r3, #0]
    5942:	f004 f907 	bl	9b54 <__aeabi_ui2f>
		BatteryVoltage = (BatteryVoltage/100)+2.0;
    5946:	4912      	ldr	r1, [pc, #72]	; (5990 <_ZN14Telegram_MSG_1C1EP11RadioData_t+0x130>)
    5948:	f003 fbe8 	bl	911c <__aeabi_fdiv>
    594c:	2180      	movs	r1, #128	; 0x80
    594e:	05c9      	lsls	r1, r1, #23
    5950:	f003 fa52 	bl	8df8 <__aeabi_fadd>
		FirmwareVersion = (float)((TelegramData.payload[HEADER_SIZE+18] << 8) + TelegramData.payload[HEADER_SIZE+19]);
    5954:	0023      	movs	r3, r4
		BatteryVoltage = (BatteryVoltage/100)+2.0;
    5956:	6760      	str	r0, [r4, #116]	; 0x74
		FirmwareVersion = (float)((TelegramData.payload[HEADER_SIZE+18] << 8) + TelegramData.payload[HEADER_SIZE+19]);
    5958:	333b      	adds	r3, #59	; 0x3b
    595a:	7818      	ldrb	r0, [r3, #0]
    595c:	3301      	adds	r3, #1
    595e:	781b      	ldrb	r3, [r3, #0]
    5960:	0200      	lsls	r0, r0, #8
    5962:	18c0      	adds	r0, r0, r3
    5964:	f004 f8a6 	bl	9ab4 <__aeabi_i2f>
		FirmwareVersion = FirmwareVersion / 100;
    5968:	4909      	ldr	r1, [pc, #36]	; (5990 <_ZN14Telegram_MSG_1C1EP11RadioData_t+0x130>)
    596a:	f003 fbd7 	bl	911c <__aeabi_fdiv>
		PCBVersion      = (uint8_t)TelegramData.payload[HEADER_SIZE+20];
    596e:	0023      	movs	r3, r4
		FirmwareVersion = FirmwareVersion / 100;
    5970:	67a0      	str	r0, [r4, #120]	; 0x78
		PCBVersion      = (uint8_t)TelegramData.payload[HEADER_SIZE+20];
    5972:	333d      	adds	r3, #61	; 0x3d
    5974:	781a      	ldrb	r2, [r3, #0]
    5976:	333f      	adds	r3, #63	; 0x3f
    5978:	701a      	strb	r2, [r3, #0]
		NumberOfBeaconsToRelay = (uint8_t)TelegramData.payload[HEADER_SIZE+21];
    597a:	3b3e      	subs	r3, #62	; 0x3e
    597c:	781a      	ldrb	r2, [r3, #0]
    597e:	333f      	adds	r3, #63	; 0x3f
    5980:	701a      	strb	r2, [r3, #0]
}
    5982:	0020      	movs	r0, r4
    5984:	bd10      	pop	{r4, pc}
    5986:	46c0      	nop			; (mov r8, r8)
    5988:	0000bd70 	.word	0x0000bd70
    598c:	41200000 	.word	0x41200000
    5990:	42c80000 	.word	0x42c80000

00005994 <_ZN14Telegram_MSG_143GetNumberOfSecondsSinceLastGroundStationComEv>:
    5994:	3070      	adds	r0, #112	; 0x70
    5996:	7800      	ldrb	r0, [r0, #0]
    5998:	4770      	bx	lr

0000599a <_ZN14Telegram_MSG_110GetUTCTimeEv>:
	return UTCTime;
    599a:	6d80      	ldr	r0, [r0, #88]	; 0x58
}
    599c:	4770      	bx	lr

0000599e <_ZN14Telegram_MSG_111GetLatitudeEv>:
	return Latitude;
    599e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
}
    59a0:	4770      	bx	lr

000059a2 <_ZN14Telegram_MSG_112GetLongitudeEv>:
	return Longitude;
    59a2:	6e00      	ldr	r0, [r0, #96]	; 0x60
}
    59a4:	4770      	bx	lr

000059a6 <_ZN14Telegram_MSG_114GetNumberOfSatEv>:
	return NumberOfSat;
    59a6:	3064      	adds	r0, #100	; 0x64
    59a8:	7800      	ldrb	r0, [r0, #0]
}
    59aa:	4770      	bx	lr

000059ac <_ZN14Telegram_MSG_16GetFixEv>:
	return Fix;
    59ac:	3065      	adds	r0, #101	; 0x65
    59ae:	7800      	ldrb	r0, [r0, #0]
}
    59b0:	4770      	bx	lr

000059b2 <_ZN14Telegram_MSG_119GetRunningOnBatteryEv>:
	return RunningOnBattery;
    59b2:	3066      	adds	r0, #102	; 0x66
    59b4:	7800      	ldrb	r0, [r0, #0]
}
    59b6:	4770      	bx	lr

000059b8 <_ZN14Telegram_MSG_111GetPressureEv>:
	return Pressure;
    59b8:	6e80      	ldr	r0, [r0, #104]	; 0x68
}
    59ba:	4770      	bx	lr

000059bc <_ZN14Telegram_MSG_114GetGroundSpeedEv>:
	return GroundSpeed;
    59bc:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
}
    59be:	4770      	bx	lr

000059c0 <_ZN14Telegram_MSG_128GetSecondsSinceLastGSContactEv>:
	return SecondsSinceLastGSContact;
    59c0:	3070      	adds	r0, #112	; 0x70
    59c2:	7800      	ldrb	r0, [r0, #0]
}
    59c4:	4770      	bx	lr

000059c6 <_ZN14Telegram_MSG_117GetBatteryVoltageEv>:
	return BatteryVoltage;
    59c6:	6f40      	ldr	r0, [r0, #116]	; 0x74
}
    59c8:	4770      	bx	lr

000059ca <_ZN14Telegram_MSG_118GetFirmwareVersionEv>:
	return FirmwareVersion;
    59ca:	6f80      	ldr	r0, [r0, #120]	; 0x78
}
    59cc:	4770      	bx	lr

000059ce <_ZN14Telegram_MSG_113GetPCBVersionEv>:
	return PCBVersion;
    59ce:	307c      	adds	r0, #124	; 0x7c
    59d0:	7800      	ldrb	r0, [r0, #0]
}
    59d2:	4770      	bx	lr

000059d4 <_ZN14Telegram_MSG_2D1Ev>:

	// Constructor to create messages from MSG 1.
	Telegram_MSG_2(Telegram_MSG_1 *msg);


	virtual	~Telegram_MSG_2(){};	// destructor.	
    59d4:	4770      	bx	lr

000059d6 <_ZN14Telegram_MSG_218SerialPrintMessageEv>:
	Serial.println("PCB Version           :" + String(this->PCBVersion));
	Serial.println("RSSI Relay            :" + String(this->RSSI_relay));
	Serial.println("SNR Relay             :" + String(this->SNR_relay));
	Serial.println("----------------------------------------------------------------");
	Serial.println("");*/
}
    59d6:	4770      	bx	lr

000059d8 <_ZN14Telegram_MSG_2D0Ev>:
    59d8:	b510      	push	{r4, lr}
    59da:	0004      	movs	r4, r0
    59dc:	f000 fc0c 	bl	61f8 <_ZdlPv>
    59e0:	0020      	movs	r0, r4
    59e2:	bd10      	pop	{r4, pc}

000059e4 <_ZN14Telegram_MSG_2C1EP11RadioData_t>:
Telegram_MSG_2::Telegram_MSG_2(RadioData_t *radioData) : Telegram(radioData)
    59e4:	b510      	push	{r4, lr}
    59e6:	0004      	movs	r4, r0
    59e8:	f7ff fd4c 	bl	5484 <_ZN8TelegramC1EP11RadioData_t>
    59ec:	4b49      	ldr	r3, [pc, #292]	; (5b14 <_ZN14Telegram_MSG_2C1EP11RadioData_t+0x130>)
    59ee:	3308      	adds	r3, #8
    59f0:	6023      	str	r3, [r4, #0]
	if( (TelegramData.payloadLength >= HEADER_SIZE+22+1)){
    59f2:	0023      	movs	r3, r4
    59f4:	3354      	adds	r3, #84	; 0x54
    59f6:	781b      	ldrb	r3, [r3, #0]
    59f8:	2b27      	cmp	r3, #39	; 0x27
    59fa:	dc00      	bgt.n	59fe <_ZN14Telegram_MSG_2C1EP11RadioData_t+0x1a>
    59fc:	e087      	b.n	5b0e <_ZN14Telegram_MSG_2C1EP11RadioData_t+0x12a>
		UTCTime =   (uint32_t)((TelegramData.payload[HEADER_SIZE+0] << 16) + (TelegramData.payload[HEADER_SIZE+1] << 8) + TelegramData.payload[HEADER_SIZE+2]);
    59fe:	0023      	movs	r3, r4
    5a00:	0022      	movs	r2, r4
    5a02:	3329      	adds	r3, #41	; 0x29
    5a04:	322a      	adds	r2, #42	; 0x2a
    5a06:	781b      	ldrb	r3, [r3, #0]
    5a08:	7812      	ldrb	r2, [r2, #0]
    5a0a:	041b      	lsls	r3, r3, #16
    5a0c:	0212      	lsls	r2, r2, #8
    5a0e:	189b      	adds	r3, r3, r2
    5a10:	0022      	movs	r2, r4
    5a12:	322b      	adds	r2, #43	; 0x2b
    5a14:	7812      	ldrb	r2, [r2, #0]
		NumberOfSat = (uint8_t)(TelegramData.payload[HEADER_SIZE+11] & 0b00011111);
    5a16:	0021      	movs	r1, r4
		UTCTime =   (uint32_t)((TelegramData.payload[HEADER_SIZE+0] << 16) + (TelegramData.payload[HEADER_SIZE+1] << 8) + TelegramData.payload[HEADER_SIZE+2]);
    5a18:	189b      	adds	r3, r3, r2
    5a1a:	65a3      	str	r3, [r4, #88]	; 0x58
		Latitude =  (uint32_t)((TelegramData.payload[HEADER_SIZE+3] << 24) + (TelegramData.payload[HEADER_SIZE+4] << 16) + (TelegramData.payload[HEADER_SIZE+5] << 8) + TelegramData.payload[HEADER_SIZE+6]);
    5a1c:	0022      	movs	r2, r4
    5a1e:	0023      	movs	r3, r4
    5a20:	322d      	adds	r2, #45	; 0x2d
    5a22:	332c      	adds	r3, #44	; 0x2c
    5a24:	781b      	ldrb	r3, [r3, #0]
    5a26:	7812      	ldrb	r2, [r2, #0]
    5a28:	061b      	lsls	r3, r3, #24
    5a2a:	0412      	lsls	r2, r2, #16
    5a2c:	189b      	adds	r3, r3, r2
    5a2e:	0022      	movs	r2, r4
    5a30:	322e      	adds	r2, #46	; 0x2e
    5a32:	7812      	ldrb	r2, [r2, #0]
		NumberOfSat = (uint8_t)(TelegramData.payload[HEADER_SIZE+11] & 0b00011111);
    5a34:	3164      	adds	r1, #100	; 0x64
		Latitude =  (uint32_t)((TelegramData.payload[HEADER_SIZE+3] << 24) + (TelegramData.payload[HEADER_SIZE+4] << 16) + (TelegramData.payload[HEADER_SIZE+5] << 8) + TelegramData.payload[HEADER_SIZE+6]);
    5a36:	0212      	lsls	r2, r2, #8
    5a38:	189b      	adds	r3, r3, r2
    5a3a:	0022      	movs	r2, r4
    5a3c:	322f      	adds	r2, #47	; 0x2f
    5a3e:	7812      	ldrb	r2, [r2, #0]
    5a40:	189b      	adds	r3, r3, r2
    5a42:	65e3      	str	r3, [r4, #92]	; 0x5c
		Longitude = (uint32_t)((TelegramData.payload[HEADER_SIZE+7] << 24) + (TelegramData.payload[HEADER_SIZE+8] << 16) + (TelegramData.payload[HEADER_SIZE+9] << 8) + TelegramData.payload[HEADER_SIZE+10]);
    5a44:	0022      	movs	r2, r4
    5a46:	0023      	movs	r3, r4
    5a48:	3231      	adds	r2, #49	; 0x31
    5a4a:	3330      	adds	r3, #48	; 0x30
    5a4c:	781b      	ldrb	r3, [r3, #0]
    5a4e:	7812      	ldrb	r2, [r2, #0]
    5a50:	061b      	lsls	r3, r3, #24
    5a52:	0412      	lsls	r2, r2, #16
    5a54:	189b      	adds	r3, r3, r2
    5a56:	0022      	movs	r2, r4
    5a58:	3232      	adds	r2, #50	; 0x32
    5a5a:	7812      	ldrb	r2, [r2, #0]
    5a5c:	0212      	lsls	r2, r2, #8
    5a5e:	189b      	adds	r3, r3, r2
    5a60:	0022      	movs	r2, r4
    5a62:	3233      	adds	r2, #51	; 0x33
    5a64:	7812      	ldrb	r2, [r2, #0]
    5a66:	189b      	adds	r3, r3, r2
    5a68:	6623      	str	r3, [r4, #96]	; 0x60
		NumberOfSat = (uint8_t)(TelegramData.payload[HEADER_SIZE+11] & 0b00011111);
    5a6a:	0023      	movs	r3, r4
    5a6c:	221f      	movs	r2, #31
    5a6e:	3334      	adds	r3, #52	; 0x34
    5a70:	781b      	ldrb	r3, [r3, #0]
    5a72:	401a      	ands	r2, r3
    5a74:	700a      	strb	r2, [r1, #0]
		Fix			= (uint8_t)((TelegramData.payload[HEADER_SIZE+11]& 0b01100000) >> 5);
    5a76:	065a      	lsls	r2, r3, #25
    5a78:	0f92      	lsrs	r2, r2, #30
		if((TelegramData.payload[HEADER_SIZE+11] & 0b10000000)){
    5a7a:	b25b      	sxtb	r3, r3
		Fix			= (uint8_t)((TelegramData.payload[HEADER_SIZE+11]& 0b01100000) >> 5);
    5a7c:	704a      	strb	r2, [r1, #1]
		if((TelegramData.payload[HEADER_SIZE+11] & 0b10000000)){
    5a7e:	2b00      	cmp	r3, #0
    5a80:	da03      	bge.n	5a8a <_ZN14Telegram_MSG_2C1EP11RadioData_t+0xa6>
			RunningOnBattery = true;
    5a82:	0023      	movs	r3, r4
    5a84:	2201      	movs	r2, #1
    5a86:	3366      	adds	r3, #102	; 0x66
    5a88:	701a      	strb	r2, [r3, #0]
		Pressure = 	(float)((TelegramData.payload[HEADER_SIZE+12] << 8) + TelegramData.payload[HEADER_SIZE+13]);
    5a8a:	0023      	movs	r3, r4
    5a8c:	3335      	adds	r3, #53	; 0x35
    5a8e:	7818      	ldrb	r0, [r3, #0]
    5a90:	3301      	adds	r3, #1
    5a92:	781b      	ldrb	r3, [r3, #0]
    5a94:	0200      	lsls	r0, r0, #8
    5a96:	18c0      	adds	r0, r0, r3
    5a98:	f004 f80c 	bl	9ab4 <__aeabi_i2f>
		GroundSpeed = (float)((TelegramData.payload[HEADER_SIZE+14] << 8) + TelegramData.payload[HEADER_SIZE+15]);
    5a9c:	0023      	movs	r3, r4
		Pressure = 	(float)((TelegramData.payload[HEADER_SIZE+12] << 8) + TelegramData.payload[HEADER_SIZE+13]);
    5a9e:	66a0      	str	r0, [r4, #104]	; 0x68
		GroundSpeed = (float)((TelegramData.payload[HEADER_SIZE+14] << 8) + TelegramData.payload[HEADER_SIZE+15]);
    5aa0:	3337      	adds	r3, #55	; 0x37
    5aa2:	7818      	ldrb	r0, [r3, #0]
    5aa4:	3301      	adds	r3, #1
    5aa6:	781b      	ldrb	r3, [r3, #0]
    5aa8:	0200      	lsls	r0, r0, #8
    5aaa:	18c0      	adds	r0, r0, r3
    5aac:	f004 f802 	bl	9ab4 <__aeabi_i2f>
		GroundSpeed = GroundSpeed / 10;
    5ab0:	4919      	ldr	r1, [pc, #100]	; (5b18 <_ZN14Telegram_MSG_2C1EP11RadioData_t+0x134>)
    5ab2:	f003 fb33 	bl	911c <__aeabi_fdiv>
		SecondsSinceLastGSContact = (uint8_t)TelegramData.payload[HEADER_SIZE+16];
    5ab6:	0023      	movs	r3, r4
		GroundSpeed = GroundSpeed / 10;
    5ab8:	66e0      	str	r0, [r4, #108]	; 0x6c
		SecondsSinceLastGSContact = (uint8_t)TelegramData.payload[HEADER_SIZE+16];
    5aba:	3339      	adds	r3, #57	; 0x39
    5abc:	781a      	ldrb	r2, [r3, #0]
    5abe:	3337      	adds	r3, #55	; 0x37
    5ac0:	701a      	strb	r2, [r3, #0]
		BatteryVoltage  = (float)TelegramData.payload[HEADER_SIZE+17];
    5ac2:	3b36      	subs	r3, #54	; 0x36
    5ac4:	7818      	ldrb	r0, [r3, #0]
    5ac6:	f004 f845 	bl	9b54 <__aeabi_ui2f>
		BatteryVoltage = (BatteryVoltage/100)+2.0;
    5aca:	4914      	ldr	r1, [pc, #80]	; (5b1c <_ZN14Telegram_MSG_2C1EP11RadioData_t+0x138>)
    5acc:	f003 fb26 	bl	911c <__aeabi_fdiv>
    5ad0:	2180      	movs	r1, #128	; 0x80
    5ad2:	05c9      	lsls	r1, r1, #23
    5ad4:	f003 f990 	bl	8df8 <__aeabi_fadd>
		FirmwareVersion = (float)((TelegramData.payload[HEADER_SIZE+18] << 8) + TelegramData.payload[HEADER_SIZE+19]);
    5ad8:	0023      	movs	r3, r4
		BatteryVoltage = (BatteryVoltage/100)+2.0;
    5ada:	6760      	str	r0, [r4, #116]	; 0x74
		FirmwareVersion = (float)((TelegramData.payload[HEADER_SIZE+18] << 8) + TelegramData.payload[HEADER_SIZE+19]);
    5adc:	333b      	adds	r3, #59	; 0x3b
    5ade:	7818      	ldrb	r0, [r3, #0]
    5ae0:	3301      	adds	r3, #1
    5ae2:	781b      	ldrb	r3, [r3, #0]
    5ae4:	0200      	lsls	r0, r0, #8
    5ae6:	18c0      	adds	r0, r0, r3
    5ae8:	f003 ffe4 	bl	9ab4 <__aeabi_i2f>
		FirmwareVersion = FirmwareVersion / 100;
    5aec:	490b      	ldr	r1, [pc, #44]	; (5b1c <_ZN14Telegram_MSG_2C1EP11RadioData_t+0x138>)
    5aee:	f003 fb15 	bl	911c <__aeabi_fdiv>
		PCBVersion      = (uint8_t)TelegramData.payload[HEADER_SIZE+20];
    5af2:	0023      	movs	r3, r4
		FirmwareVersion = FirmwareVersion / 100;
    5af4:	67a0      	str	r0, [r4, #120]	; 0x78
		PCBVersion      = (uint8_t)TelegramData.payload[HEADER_SIZE+20];
    5af6:	333d      	adds	r3, #61	; 0x3d
    5af8:	781a      	ldrb	r2, [r3, #0]
    5afa:	333f      	adds	r3, #63	; 0x3f
    5afc:	701a      	strb	r2, [r3, #0]
		RSSI_relay		= (uint8_t)TelegramData.payload[HEADER_SIZE+21]; 
    5afe:	3b3e      	subs	r3, #62	; 0x3e
    5b00:	781a      	ldrb	r2, [r3, #0]
    5b02:	333f      	adds	r3, #63	; 0x3f
    5b04:	701a      	strb	r2, [r3, #0]
		SNR_relay		= (uint8_t)TelegramData.payload[HEADER_SIZE+22]; 
    5b06:	3b3e      	subs	r3, #62	; 0x3e
    5b08:	781a      	ldrb	r2, [r3, #0]
    5b0a:	333f      	adds	r3, #63	; 0x3f
    5b0c:	701a      	strb	r2, [r3, #0]
}
    5b0e:	0020      	movs	r0, r4
    5b10:	bd10      	pop	{r4, pc}
    5b12:	46c0      	nop			; (mov r8, r8)
    5b14:	0000bd84 	.word	0x0000bd84
    5b18:	41200000 	.word	0x41200000
    5b1c:	42c80000 	.word	0x42c80000

00005b20 <_ZN14Telegram_MSG_215GeneratePayloadEv>:
	TelegramData.payload[HEADER_SIZE+0] = (uint8_t)((UTCTime >> 16) & 0xFF);
    5b20:	0002      	movs	r2, r0
    5b22:	6d83      	ldr	r3, [r0, #88]	; 0x58
    5b24:	3229      	adds	r2, #41	; 0x29
    5b26:	0c19      	lsrs	r1, r3, #16
{
    5b28:	b570      	push	{r4, r5, r6, lr}
	TelegramData.payload[HEADER_SIZE+0] = (uint8_t)((UTCTime >> 16) & 0xFF);
    5b2a:	7011      	strb	r1, [r2, #0]
	TelegramData.payload[HEADER_SIZE+1] = (uint8_t)((UTCTime >> 8) & 0xFF);
    5b2c:	0a19      	lsrs	r1, r3, #8
    5b2e:	7051      	strb	r1, [r2, #1]
	TelegramData.payload[HEADER_SIZE+2] = (uint8_t)(UTCTime & 0xFF);
    5b30:	7093      	strb	r3, [r2, #2]
	TelegramData.payload[HEADER_SIZE+3] = (uint8_t)((Latitude >> 24) & 0xFF);
    5b32:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
{
    5b34:	0004      	movs	r4, r0
	TelegramData.payload[HEADER_SIZE+3] = (uint8_t)((Latitude >> 24) & 0xFF);
    5b36:	0e19      	lsrs	r1, r3, #24
    5b38:	70d1      	strb	r1, [r2, #3]
	TelegramData.payload[HEADER_SIZE+4] = (uint8_t)((Latitude >> 16) & 0xFF);
    5b3a:	1419      	asrs	r1, r3, #16
    5b3c:	7111      	strb	r1, [r2, #4]
	TelegramData.payload[HEADER_SIZE+5] = (uint8_t)((Latitude >>  8) & 0xFF);
    5b3e:	1219      	asrs	r1, r3, #8
    5b40:	7151      	strb	r1, [r2, #5]
	TelegramData.payload[HEADER_SIZE+6] = (uint8_t)(Latitude & 0xFF);
    5b42:	7193      	strb	r3, [r2, #6]
	TelegramData.payload[HEADER_SIZE+7]  = (uint8_t)((Longitude >> 24) & 0xFF);
    5b44:	6e03      	ldr	r3, [r0, #96]	; 0x60
    5b46:	0e19      	lsrs	r1, r3, #24
    5b48:	71d1      	strb	r1, [r2, #7]
	TelegramData.payload[HEADER_SIZE+8]  = (uint8_t)((Longitude >> 16) & 0xFF);
    5b4a:	1419      	asrs	r1, r3, #16
    5b4c:	7211      	strb	r1, [r2, #8]
	TelegramData.payload[HEADER_SIZE+10] = (uint8_t)(Longitude & 0xFF);
    5b4e:	7293      	strb	r3, [r2, #10]
	TelegramData.payload[HEADER_SIZE+9]  = (uint8_t)((Longitude >>  8) & 0xFF);
    5b50:	1219      	asrs	r1, r3, #8
	temp_8 |= ((Fix & 0b00000011) << 5);
    5b52:	0003      	movs	r3, r0
	TelegramData.payload[HEADER_SIZE+9]  = (uint8_t)((Longitude >>  8) & 0xFF);
    5b54:	7251      	strb	r1, [r2, #9]
	temp_8 |= ((Fix & 0b00000011) << 5);
    5b56:	2260      	movs	r2, #96	; 0x60
    5b58:	3365      	adds	r3, #101	; 0x65
    5b5a:	781b      	ldrb	r3, [r3, #0]
	temp_8 = NumberOfSat & 0b00011111;
    5b5c:	211f      	movs	r1, #31
	temp_8 |= ((Fix & 0b00000011) << 5);
    5b5e:	015b      	lsls	r3, r3, #5
    5b60:	4013      	ands	r3, r2
	temp_8 = NumberOfSat & 0b00011111;
    5b62:	0002      	movs	r2, r0
    5b64:	3264      	adds	r2, #100	; 0x64
    5b66:	7812      	ldrb	r2, [r2, #0]
    5b68:	400a      	ands	r2, r1
	temp_8 |= ((Fix & 0b00000011) << 5);
    5b6a:	4313      	orrs	r3, r2
	if(RunningOnBattery)
    5b6c:	0002      	movs	r2, r0
    5b6e:	3266      	adds	r2, #102	; 0x66
    5b70:	7812      	ldrb	r2, [r2, #0]
    5b72:	2a00      	cmp	r2, #0
    5b74:	d001      	beq.n	5b7a <_ZN14Telegram_MSG_215GeneratePayloadEv+0x5a>
	temp_8 |= 0b10000000;
    5b76:	2280      	movs	r2, #128	; 0x80
    5b78:	4313      	orrs	r3, r2
	TelegramData.payload[HEADER_SIZE+11] = temp_8;
    5b7a:	0022      	movs	r2, r4
    5b7c:	3234      	adds	r2, #52	; 0x34
    5b7e:	7013      	strb	r3, [r2, #0]
	temp_16=(uint16_t)(Pressure);
    5b80:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    5b82:	f003 f903 	bl	8d8c <__aeabi_f2uiz>
	TelegramData.payload[HEADER_SIZE+12]  = (uint8_t)((temp_16 >>  8) & 0xFF);
    5b86:	0023      	movs	r3, r4
	temp_16=(uint16_t)(Pressure);
    5b88:	b280      	uxth	r0, r0
	TelegramData.payload[HEADER_SIZE+12]  = (uint8_t)((temp_16 >>  8) & 0xFF);
    5b8a:	0a02      	lsrs	r2, r0, #8
    5b8c:	3335      	adds	r3, #53	; 0x35
    5b8e:	701a      	strb	r2, [r3, #0]
	TelegramData.payload[HEADER_SIZE+13] = (uint8_t)(temp_16 & 0xFF);
    5b90:	7058      	strb	r0, [r3, #1]
	temp_16=(uint16_t)(GroundSpeed*10);
    5b92:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    5b94:	4924      	ldr	r1, [pc, #144]	; (5c28 <_ZN14Telegram_MSG_215GeneratePayloadEv+0x108>)
    5b96:	f003 fcb1 	bl	94fc <__aeabi_fmul>
    5b9a:	f003 f8f7 	bl	8d8c <__aeabi_f2uiz>
	TelegramData.payload[HEADER_SIZE+14]  = (uint8_t)(((temp_16) >>  8) & 0xFF);
    5b9e:	0023      	movs	r3, r4
	temp_16=(uint16_t)(GroundSpeed*10);
    5ba0:	b280      	uxth	r0, r0
	TelegramData.payload[HEADER_SIZE+14]  = (uint8_t)(((temp_16) >>  8) & 0xFF);
    5ba2:	3337      	adds	r3, #55	; 0x37
    5ba4:	0a02      	lsrs	r2, r0, #8
    5ba6:	701a      	strb	r2, [r3, #0]
	TelegramData.payload[HEADER_SIZE+16] = SecondsSinceLastGSContact;
    5ba8:	0022      	movs	r2, r4
	TelegramData.payload[HEADER_SIZE+15] = (uint8_t)((temp_16) & 0xFF);
    5baa:	7058      	strb	r0, [r3, #1]
	TelegramData.payload[HEADER_SIZE+16] = SecondsSinceLastGSContact;
    5bac:	3270      	adds	r2, #112	; 0x70
    5bae:	7812      	ldrb	r2, [r2, #0]
    5bb0:	709a      	strb	r2, [r3, #2]
	temp_8=(uint8_t)((BatteryVoltage-2.0)*100);
    5bb2:	6f60      	ldr	r0, [r4, #116]	; 0x74
    5bb4:	f005 fa8c 	bl	b0d0 <__aeabi_f2d>
    5bb8:	2380      	movs	r3, #128	; 0x80
    5bba:	2200      	movs	r2, #0
    5bbc:	05db      	lsls	r3, r3, #23
    5bbe:	f004 fec3 	bl	a948 <__aeabi_dsub>
    5bc2:	2200      	movs	r2, #0
    5bc4:	4b19      	ldr	r3, [pc, #100]	; (5c2c <_ZN14Telegram_MSG_215GeneratePayloadEv+0x10c>)
    5bc6:	f004 fc3f 	bl	a448 <__aeabi_dmul>
    5bca:	f003 f8f7 	bl	8dbc <__aeabi_d2uiz>
	TelegramData.payload[HEADER_SIZE+17] = temp_8;
    5bce:	0023      	movs	r3, r4
    5bd0:	333a      	adds	r3, #58	; 0x3a
    5bd2:	7018      	strb	r0, [r3, #0]
	temp_8 = (uint8_t)(FirmwareVersion);
    5bd4:	6fa6      	ldr	r6, [r4, #120]	; 0x78
    5bd6:	1c30      	adds	r0, r6, #0
    5bd8:	f003 f8d8 	bl	8d8c <__aeabi_f2uiz>
	TelegramData.payload[HEADER_SIZE+18] = temp_8;
    5bdc:	0023      	movs	r3, r4
	temp_8 = (uint8_t)(FirmwareVersion);
    5bde:	b2c5      	uxtb	r5, r0
	TelegramData.payload[HEADER_SIZE+18] = temp_8;
    5be0:	333b      	adds	r3, #59	; 0x3b
    5be2:	701d      	strb	r5, [r3, #0]
	TelegramData.payload[HEADER_SIZE+19] = (uint8_t)((FirmwareVersion*100)-temp_8*100);
    5be4:	4912      	ldr	r1, [pc, #72]	; (5c30 <_ZN14Telegram_MSG_215GeneratePayloadEv+0x110>)
    5be6:	1c30      	adds	r0, r6, #0
    5be8:	f003 fc88 	bl	94fc <__aeabi_fmul>
    5bec:	1c06      	adds	r6, r0, #0
    5bee:	2064      	movs	r0, #100	; 0x64
    5bf0:	4368      	muls	r0, r5
    5bf2:	f003 ff5f 	bl	9ab4 <__aeabi_i2f>
    5bf6:	1c01      	adds	r1, r0, #0
    5bf8:	1c30      	adds	r0, r6, #0
    5bfa:	f003 fd9f 	bl	973c <__aeabi_fsub>
    5bfe:	f003 f8c5 	bl	8d8c <__aeabi_f2uiz>
    5c02:	0023      	movs	r3, r4
	TelegramData.payload[HEADER_SIZE+20] = PCBVersion;
    5c04:	0022      	movs	r2, r4
	TelegramData.payload[HEADER_SIZE+19] = (uint8_t)((FirmwareVersion*100)-temp_8*100);
    5c06:	333c      	adds	r3, #60	; 0x3c
    5c08:	7018      	strb	r0, [r3, #0]
	TelegramData.payload[HEADER_SIZE+20] = PCBVersion;
    5c0a:	327c      	adds	r2, #124	; 0x7c
    5c0c:	7812      	ldrb	r2, [r2, #0]
    5c0e:	705a      	strb	r2, [r3, #1]
	TelegramData.payload[HEADER_SIZE+21] = RSSI_relay;
    5c10:	0022      	movs	r2, r4
    5c12:	327d      	adds	r2, #125	; 0x7d
    5c14:	7812      	ldrb	r2, [r2, #0]
    5c16:	709a      	strb	r2, [r3, #2]
	TelegramData.payload[HEADER_SIZE+22] = SNR_relay;
    5c18:	0022      	movs	r2, r4
    5c1a:	327e      	adds	r2, #126	; 0x7e
    5c1c:	7812      	ldrb	r2, [r2, #0]
	TelegramData.payloadLength = HEADER_SIZE + 22 + 1;
    5c1e:	3454      	adds	r4, #84	; 0x54
	TelegramData.payload[HEADER_SIZE+22] = SNR_relay;
    5c20:	70da      	strb	r2, [r3, #3]
	TelegramData.payloadLength = HEADER_SIZE + 22 + 1;
    5c22:	2328      	movs	r3, #40	; 0x28
    5c24:	7023      	strb	r3, [r4, #0]
}
    5c26:	bd70      	pop	{r4, r5, r6, pc}
    5c28:	41200000 	.word	0x41200000
    5c2c:	40590000 	.word	0x40590000
    5c30:	42c80000 	.word	0x42c80000

00005c34 <_ZN14Telegram_MSG_2C1EP14Telegram_MSG_1>:
Telegram_MSG_2::Telegram_MSG_2(Telegram_MSG_1 *msg) : Telegram(MSG_Beacon_Relay,msg->GetUniqueID1(),msg->GetUniqueID2(),msg->GetUniqueID3(),msg->GetUniqueID4()) 
    5c34:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c36:	0004      	movs	r4, r0
    5c38:	b085      	sub	sp, #20
    5c3a:	0008      	movs	r0, r1
    5c3c:	000d      	movs	r5, r1
    5c3e:	f7ff fc77 	bl	5530 <_ZN8Telegram12GetUniqueID1Ev>
    5c42:	9003      	str	r0, [sp, #12]
    5c44:	0028      	movs	r0, r5
    5c46:	f7ff fc75 	bl	5534 <_ZN8Telegram12GetUniqueID2Ev>
    5c4a:	0006      	movs	r6, r0
    5c4c:	0028      	movs	r0, r5
    5c4e:	f7ff fc73 	bl	5538 <_ZN8Telegram12GetUniqueID3Ev>
    5c52:	0007      	movs	r7, r0
    5c54:	0028      	movs	r0, r5
    5c56:	f7ff fc71 	bl	553c <_ZN8Telegram12GetUniqueID4Ev>
    5c5a:	9a03      	ldr	r2, [sp, #12]
    5c5c:	2102      	movs	r1, #2
    5c5e:	9001      	str	r0, [sp, #4]
    5c60:	0033      	movs	r3, r6
    5c62:	9700      	str	r7, [sp, #0]
    5c64:	0020      	movs	r0, r4
    5c66:	f7ff fbc5 	bl	53f4 <_ZN8TelegramC1E13ProtocolMSG_tmmmm>
    5c6a:	4b27      	ldr	r3, [pc, #156]	; (5d08 <_ZN14Telegram_MSG_2C1EP14Telegram_MSG_1+0xd4>)
	this->UTCTime = msg->GetUTCTime();
    5c6c:	0028      	movs	r0, r5
Telegram_MSG_2::Telegram_MSG_2(Telegram_MSG_1 *msg) : Telegram(MSG_Beacon_Relay,msg->GetUniqueID1(),msg->GetUniqueID2(),msg->GetUniqueID3(),msg->GetUniqueID4()) 
    5c6e:	3308      	adds	r3, #8
    5c70:	6023      	str	r3, [r4, #0]
	this->UTCTime = msg->GetUTCTime();
    5c72:	f7ff fe92 	bl	599a <_ZN14Telegram_MSG_110GetUTCTimeEv>
    5c76:	65a0      	str	r0, [r4, #88]	; 0x58
	this->Latitude = msg->GetLatitude();
    5c78:	0028      	movs	r0, r5
    5c7a:	f7ff fe90 	bl	599e <_ZN14Telegram_MSG_111GetLatitudeEv>
    5c7e:	65e0      	str	r0, [r4, #92]	; 0x5c
	this->Longitude = msg->GetLongitude();
    5c80:	0028      	movs	r0, r5
    5c82:	f7ff fe8e 	bl	59a2 <_ZN14Telegram_MSG_112GetLongitudeEv>
    5c86:	6620      	str	r0, [r4, #96]	; 0x60
	this->NumberOfSat = msg->GetNumberOfSat();
    5c88:	0028      	movs	r0, r5
    5c8a:	f7ff fe8c 	bl	59a6 <_ZN14Telegram_MSG_114GetNumberOfSatEv>
    5c8e:	0023      	movs	r3, r4
    5c90:	3364      	adds	r3, #100	; 0x64
    5c92:	7018      	strb	r0, [r3, #0]
	this->Fix = msg->GetFix();
    5c94:	0028      	movs	r0, r5
    5c96:	f7ff fe89 	bl	59ac <_ZN14Telegram_MSG_16GetFixEv>
    5c9a:	0023      	movs	r3, r4
    5c9c:	3365      	adds	r3, #101	; 0x65
    5c9e:	7018      	strb	r0, [r3, #0]
	this->RunningOnBattery = msg->GetRunningOnBattery();
    5ca0:	0028      	movs	r0, r5
    5ca2:	f7ff fe86 	bl	59b2 <_ZN14Telegram_MSG_119GetRunningOnBatteryEv>
    5ca6:	0023      	movs	r3, r4
    5ca8:	3366      	adds	r3, #102	; 0x66
    5caa:	7018      	strb	r0, [r3, #0]
	this->Pressure = msg->GetPressure();
    5cac:	0028      	movs	r0, r5
    5cae:	f7ff fe83 	bl	59b8 <_ZN14Telegram_MSG_111GetPressureEv>
    5cb2:	66a0      	str	r0, [r4, #104]	; 0x68
	this->GroundSpeed = msg->GetGroundSpeed();
    5cb4:	0028      	movs	r0, r5
    5cb6:	f7ff fe81 	bl	59bc <_ZN14Telegram_MSG_114GetGroundSpeedEv>
    5cba:	66e0      	str	r0, [r4, #108]	; 0x6c
	this->SecondsSinceLastGSContact = msg->GetSecondsSinceLastGSContact();
    5cbc:	0028      	movs	r0, r5
    5cbe:	f7ff fe7f 	bl	59c0 <_ZN14Telegram_MSG_128GetSecondsSinceLastGSContactEv>
    5cc2:	0023      	movs	r3, r4
    5cc4:	3370      	adds	r3, #112	; 0x70
    5cc6:	7018      	strb	r0, [r3, #0]
	this->BatteryVoltage = msg->GetBatteryVoltage();
    5cc8:	0028      	movs	r0, r5
    5cca:	f7ff fe7c 	bl	59c6 <_ZN14Telegram_MSG_117GetBatteryVoltageEv>
    5cce:	6760      	str	r0, [r4, #116]	; 0x74
	this->FirmwareVersion = msg->GetFirmwareVersion();
    5cd0:	0028      	movs	r0, r5
    5cd2:	f7ff fe7a 	bl	59ca <_ZN14Telegram_MSG_118GetFirmwareVersionEv>
    5cd6:	67a0      	str	r0, [r4, #120]	; 0x78
	this->PCBVersion = msg->GetPCBVersion();
    5cd8:	0028      	movs	r0, r5
    5cda:	f7ff fe78 	bl	59ce <_ZN14Telegram_MSG_113GetPCBVersionEv>
    5cde:	0023      	movs	r3, r4
    5ce0:	337c      	adds	r3, #124	; 0x7c
    5ce2:	7018      	strb	r0, [r3, #0]
	this->RSSI_relay = msg->GetRSSI();
    5ce4:	0028      	movs	r0, r5
    5ce6:	f7ff fc2b 	bl	5540 <_ZN8Telegram7GetRSSIEv>
    5cea:	0023      	movs	r3, r4
    5cec:	337d      	adds	r3, #125	; 0x7d
    5cee:	7018      	strb	r0, [r3, #0]
	this->SNR_relay = msg->GetSNR();	
    5cf0:	0028      	movs	r0, r5
    5cf2:	f7ff fc29 	bl	5548 <_ZN8Telegram6GetSNREv>
    5cf6:	0023      	movs	r3, r4
    5cf8:	337e      	adds	r3, #126	; 0x7e
    5cfa:	7018      	strb	r0, [r3, #0]
	GeneratePayload();
    5cfc:	0020      	movs	r0, r4
    5cfe:	f7ff ff0f 	bl	5b20 <_ZN14Telegram_MSG_215GeneratePayloadEv>
}
    5d02:	0020      	movs	r0, r4
    5d04:	b005      	add	sp, #20
    5d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d08:	0000bd84 	.word	0x0000bd84

00005d0c <_ZN14Telegram_MSG_3D1Ev>:
	Telegram_MSG_3(RadioData_t *radioData);
	
	// Constructor to create messages from Base64 encoded Unique ID.
	Telegram_MSG_3(std::string Unique_ID, ProtocolCMD_t cmd);
	
	virtual	~Telegram_MSG_3(){}; 	// destructor.
    5d0c:	4770      	bx	lr

00005d0e <_ZN14Telegram_MSG_318SerialPrintMessageEv>:

	Serial.println("Message Data:");
	Serial.println("Command ID             :" + String(this->cmd));
	Serial.println("----------------------------------------------");
	Serial.println("");*/
    5d0e:	4770      	bx	lr

00005d10 <_ZN14Telegram_MSG_3D0Ev>:
    5d10:	b510      	push	{r4, lr}
    5d12:	0004      	movs	r4, r0
    5d14:	f000 fa70 	bl	61f8 <_ZdlPv>
    5d18:	0020      	movs	r0, r4
    5d1a:	bd10      	pop	{r4, pc}

00005d1c <_ZN14Telegram_MSG_3C1EP11RadioData_t>:
Telegram_MSG_3::Telegram_MSG_3(RadioData_t *radioData) : Telegram(radioData)
    5d1c:	b510      	push	{r4, lr}
    5d1e:	0004      	movs	r4, r0
    5d20:	f7ff fbb0 	bl	5484 <_ZN8TelegramC1EP11RadioData_t>
    5d24:	4b07      	ldr	r3, [pc, #28]	; (5d44 <_ZN14Telegram_MSG_3C1EP11RadioData_t+0x28>)
    5d26:	3308      	adds	r3, #8
    5d28:	6023      	str	r3, [r4, #0]
	if( (TelegramData.payloadLength >= HEADER_SIZE+0+1)){
    5d2a:	0023      	movs	r3, r4
    5d2c:	3354      	adds	r3, #84	; 0x54
    5d2e:	781b      	ldrb	r3, [r3, #0]
    5d30:	2b11      	cmp	r3, #17
    5d32:	dd04      	ble.n	5d3e <_ZN14Telegram_MSG_3C1EP11RadioData_t+0x22>
		cmd  = (ProtocolCMD_t)TelegramData.payload[HEADER_SIZE+0];
    5d34:	0023      	movs	r3, r4
    5d36:	3329      	adds	r3, #41	; 0x29
    5d38:	781a      	ldrb	r2, [r3, #0]
    5d3a:	332e      	adds	r3, #46	; 0x2e
    5d3c:	701a      	strb	r2, [r3, #0]
}
    5d3e:	0020      	movs	r0, r4
    5d40:	bd10      	pop	{r4, pc}
    5d42:	46c0      	nop			; (mov r8, r8)
    5d44:	0000bd98 	.word	0x0000bd98

00005d48 <_ZN14Telegram_MSG_310GetCommandEv>:
	return cmd;
    5d48:	3057      	adds	r0, #87	; 0x57
    5d4a:	7800      	ldrb	r0, [r0, #0]
}
    5d4c:	4770      	bx	lr

00005d4e <_ZN10PCProtocolC1EP10RFProtocolP11E28_2G4M20S>:
	Not for commercial use
 */ 
#include <Arduino.h>
#include "PCProtocol.h"  // For add and get function to RF protocol RX/TX FIFO

PCProtocol::PCProtocol(RFProtocol *inout, E28_2G4M20S *radio){
    5d4e:	2300      	movs	r3, #0
    5d50:	b510      	push	{r4, lr}
    5d52:	0004      	movs	r4, r0
    5d54:	6003      	str	r3, [r0, #0]
    5d56:	7183      	strb	r3, [r0, #6]
    5d58:	30cc      	adds	r0, #204	; 0xcc
    5d5a:	8003      	strh	r3, [r0, #0]
	this->_inout = inout;
    5d5c:	64a1      	str	r1, [r4, #72]	; 0x48
	this->RadioForCRC = radio; // for CRC function.
    5d5e:	64e2      	str	r2, [r4, #76]	; 0x4c
	memset(&data, 0,  MAX_PAYLOAD_LENGTH);
    5d60:	0019      	movs	r1, r3
    5d62:	223c      	movs	r2, #60	; 0x3c
    5d64:	38c4      	subs	r0, #196	; 0xc4
    5d66:	f005 fb04 	bl	b372 <memset>
}
    5d6a:	0020      	movs	r0, r4
    5d6c:	bd10      	pop	{r4, pc}

00005d6e <_ZN10PCProtocol14clearInputDataEv>:
		Serial.write(output, data->payloadLength+4);
}

  
void PCProtocol::clearInputData(){
	dataLength = 0;    // counter number of bytes read.
    5d6e:	0003      	movs	r3, r0
void PCProtocol::clearInputData(){
    5d70:	b570      	push	{r4, r5, r6, lr}
	dataLength = 0;    // counter number of bytes read.
    5d72:	2500      	movs	r5, #0
	dataIndex = 0;
	memset(&data, 0,  MAX_PAYLOAD_LENGTH);
    5d74:	263c      	movs	r6, #60	; 0x3c
void PCProtocol::clearInputData(){
    5d76:	0004      	movs	r4, r0
	dataLength = 0;    // counter number of bytes read.
    5d78:	3344      	adds	r3, #68	; 0x44
    5d7a:	701d      	strb	r5, [r3, #0]
	dataIndex = 0;
    5d7c:	705d      	strb	r5, [r3, #1]
	memset(&data, 0,  MAX_PAYLOAD_LENGTH);
    5d7e:	0032      	movs	r2, r6
    5d80:	0029      	movs	r1, r5
    5d82:	3008      	adds	r0, #8
    5d84:	f005 faf5 	bl	b372 <memset>
	memset(&input.payload, 0,  MAX_PAYLOAD_LENGTH);
    5d88:	0020      	movs	r0, r4
    5d8a:	0032      	movs	r2, r6
    5d8c:	0029      	movs	r1, r5
    5d8e:	3050      	adds	r0, #80	; 0x50
    5d90:	f005 faef 	bl	b372 <memset>
	input.payloadLength=0;
    5d94:	0023      	movs	r3, r4
	input.rssi=0;
	input.snr=0;
	CRC = 0;	
    5d96:	34cc      	adds	r4, #204	; 0xcc
	input.payloadLength=0;
    5d98:	338c      	adds	r3, #140	; 0x8c
    5d9a:	701d      	strb	r5, [r3, #0]
	input.rssi=0;
    5d9c:	705d      	strb	r5, [r3, #1]
	input.snr=0;
    5d9e:	709d      	strb	r5, [r3, #2]
	CRC = 0;	
    5da0:	8025      	strh	r5, [r4, #0]
}
    5da2:	bd70      	pop	{r4, r5, r6, pc}

00005da4 <_ZN10PCProtocol16RadioDataHandlerEv>:
			default:		
			break;
		}	
}

void PCProtocol::RadioDataHandler(){
    5da4:	b570      	push	{r4, r5, r6, lr}
	PayloadID_t _payloadID = (PayloadID_t)data[0];
	
	switch(_payloadID) // PAyload Id eather RADIO_DATA_TO_RF or RADIO_DATA_TO_PC.
    5da6:	7a03      	ldrb	r3, [r0, #8]
void PCProtocol::RadioDataHandler(){
    5da8:	0004      	movs	r4, r0
	switch(_payloadID) // PAyload Id eather RADIO_DATA_TO_RF or RADIO_DATA_TO_PC.
    5daa:	2b01      	cmp	r3, #1
    5dac:	d117      	bne.n	5dde <_ZN10PCProtocol16RadioDataHandlerEv+0x3a>
	{
		case RADIO_DATA_TO_RF: // Application ask if we are a transponder (ground station) - Reply with same message to ack.
		{
			memcpy(&input.payload[0], &data[1], dataLength-3);   //
    5dae:	0003      	movs	r3, r0
    5db0:	0006      	movs	r6, r0
    5db2:	0001      	movs	r1, r0
    5db4:	3344      	adds	r3, #68	; 0x44
    5db6:	781d      	ldrb	r5, [r3, #0]
    5db8:	3650      	adds	r6, #80	; 0x50
    5dba:	3d03      	subs	r5, #3
    5dbc:	3109      	adds	r1, #9
    5dbe:	002a      	movs	r2, r5
    5dc0:	0030      	movs	r0, r6
    5dc2:	f005 facd 	bl	b360 <memcpy>
			input.payloadLength=dataLength-3;			 // Payload is length minus CRC (2) minus PayloadID (1), thus 3.	
    5dc6:	0023      	movs	r3, r4
			input.rssi=0;
    5dc8:	0022      	movs	r2, r4
			input.payloadLength=dataLength-3;			 // Payload is length minus CRC (2) minus PayloadID (1), thus 3.	
    5dca:	338c      	adds	r3, #140	; 0x8c
    5dcc:	701d      	strb	r5, [r3, #0]
			input.rssi=0;
    5dce:	2300      	movs	r3, #0
    5dd0:	328d      	adds	r2, #141	; 0x8d
    5dd2:	7013      	strb	r3, [r2, #0]
			input.snr=0;
    5dd4:	7053      	strb	r3, [r2, #1]
			this->_inout->AddData(&input); // Add RadioData to RF protocol.
    5dd6:	0031      	movs	r1, r6
    5dd8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    5dda:	f7fe ff95 	bl	4d08 <_ZN10RFProtocol7AddDataEP11RadioData_t>
		break;

		default:
		break;
	}
}
    5dde:	bd70      	pop	{r4, r5, r6, pc}

00005de0 <_ZN10PCProtocol13WriteToSerialEP11RadioData_t>:
{
    5de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		output[0]=0x1E; // Start byte
    5de2:	0006      	movs	r6, r0
		output[1]=data->payloadLength+2; // Length (output.payloadlength +2 byte CRC;
    5de4:	000d      	movs	r5, r1
		output[0]=0x1E; // Start byte
    5de6:	231e      	movs	r3, #30
		output[1]=data->payloadLength+2; // Length (output.payloadlength +2 byte CRC;
    5de8:	0002      	movs	r2, r0
		memcpy(&output[2], &data->payload[0], data->payloadLength);
    5dea:	0007      	movs	r7, r0
{
    5dec:	0004      	movs	r4, r0
		output[0]=0x1E; // Start byte
    5dee:	368f      	adds	r6, #143	; 0x8f
		output[1]=data->payloadLength+2; // Length (output.payloadlength +2 byte CRC;
    5df0:	353c      	adds	r5, #60	; 0x3c
		output[0]=0x1E; // Start byte
    5df2:	7033      	strb	r3, [r6, #0]
		output[1]=data->payloadLength+2; // Length (output.payloadlength +2 byte CRC;
    5df4:	782b      	ldrb	r3, [r5, #0]
    5df6:	3290      	adds	r2, #144	; 0x90
    5df8:	3302      	adds	r3, #2
    5dfa:	7013      	strb	r3, [r2, #0]
		memcpy(&output[2], &data->payload[0], data->payloadLength);
    5dfc:	3791      	adds	r7, #145	; 0x91
    5dfe:	782a      	ldrb	r2, [r5, #0]
    5e00:	0038      	movs	r0, r7
    5e02:	f005 faad 	bl	b360 <memcpy>
		uint16_t temp_crc = RadioForCRC->CalculateCRC(&output[2], data->payloadLength);
    5e06:	782a      	ldrb	r2, [r5, #0]
    5e08:	0039      	movs	r1, r7
    5e0a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    5e0c:	f7fc fa96 	bl	233c <_ZN11E28_2G4M20S12CalculateCRCEPhh>
		output[data->payloadLength+2] = (uint8_t)((temp_crc >>  8) & 0xFF);  // CRC
    5e10:	782b      	ldrb	r3, [r5, #0]
    5e12:	0a02      	lsrs	r2, r0, #8
    5e14:	18e3      	adds	r3, r4, r3
    5e16:	3391      	adds	r3, #145	; 0x91
    5e18:	701a      	strb	r2, [r3, #0]
		output[data->payloadLength+3] = (uint8_t)(temp_crc & 0xFF);		     // CRC
    5e1a:	782b      	ldrb	r3, [r5, #0]
		Serial.write(output, data->payloadLength+4);
    5e1c:	0031      	movs	r1, r6
		output[data->payloadLength+3] = (uint8_t)(temp_crc & 0xFF);		     // CRC
    5e1e:	18e4      	adds	r4, r4, r3
    5e20:	3492      	adds	r4, #146	; 0x92
    5e22:	7020      	strb	r0, [r4, #0]
		Serial.write(output, data->payloadLength+4);
    5e24:	782a      	ldrb	r2, [r5, #0]
    5e26:	4802      	ldr	r0, [pc, #8]	; (5e30 <_ZN10PCProtocol13WriteToSerialEP11RadioData_t+0x50>)
    5e28:	3204      	adds	r2, #4
    5e2a:	f000 fdc5 	bl	69b8 <_ZN7Serial_5writeEPKhj>
}
    5e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5e30:	200002b0 	.word	0x200002b0

00005e34 <_ZN10PCProtocol21ApplicationCMDHandlerEv>:
		switch(CMD) // MSG ID
    5e34:	7a03      	ldrb	r3, [r0, #8]
void PCProtocol::ApplicationCMDHandler(){
    5e36:	b510      	push	{r4, lr}
		switch(CMD) // MSG ID
    5e38:	2b00      	cmp	r3, #0
    5e3a:	d10f      	bne.n	5e5c <_ZN10PCProtocol21ApplicationCMDHandlerEv+0x28>
				input.payload[0] = RADAR_APPLICATION_ID;    // PAyload ID 0 (CMD_ID)
    5e3c:	0001      	movs	r1, r0
				input.payload[1] = HW_REPLY;			    // (HW_REPLY)
    5e3e:	0002      	movs	r2, r0
				input.payload[0] = RADAR_APPLICATION_ID;    // PAyload ID 0 (CMD_ID)
    5e40:	3150      	adds	r1, #80	; 0x50
				input.payload[1] = HW_REPLY;			    // (HW_REPLY)
    5e42:	3251      	adds	r2, #81	; 0x51
				input.payload[0] = RADAR_APPLICATION_ID;    // PAyload ID 0 (CMD_ID)
    5e44:	700b      	strb	r3, [r1, #0]
				input.payload[1] = HW_REPLY;			    // (HW_REPLY)
    5e46:	7013      	strb	r3, [r2, #0]
				input.payloadLength=2;
    5e48:	0003      	movs	r3, r0
    5e4a:	2202      	movs	r2, #2
    5e4c:	338c      	adds	r3, #140	; 0x8c
    5e4e:	701a      	strb	r2, [r3, #0]
				WriteToSerial(&input);
    5e50:	f7ff ffc6 	bl	5de0 <_ZN10PCProtocol13WriteToSerialEP11RadioData_t>
				SystemInformation.IsGroundStation=true;
    5e54:	2201      	movs	r2, #1
    5e56:	4b02      	ldr	r3, [pc, #8]	; (5e60 <_ZN10PCProtocol21ApplicationCMDHandlerEv+0x2c>)
    5e58:	3334      	adds	r3, #52	; 0x34
    5e5a:	701a      	strb	r2, [r3, #0]
}
    5e5c:	bd10      	pop	{r4, pc}
    5e5e:	46c0      	nop			; (mov r8, r8)
    5e60:	20000250 	.word	0x20000250

00005e64 <_ZN10PCProtocol7ServiceEv>:
 void PCProtocol::Service(){
    5e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NumberOfBytesToRead = Serial.available();
    5e66:	4e49      	ldr	r6, [pc, #292]	; (5f8c <_ZN10PCProtocol7ServiceEv+0x128>)
 void PCProtocol::Service(){
    5e68:	0004      	movs	r4, r0
	NumberOfBytesToRead = Serial.available();
    5e6a:	0030      	movs	r0, r6
    5e6c:	f000 fd98 	bl	69a0 <_ZN7Serial_9availableEv>
							SerialState=READ_CRC1; // Done with Data payload, now go to CRC
    5e70:	2704      	movs	r7, #4
	NumberOfBytesToRead = Serial.available();
    5e72:	6020      	str	r0, [r4, #0]
	if(NumberOfBytesToRead == 0){
    5e74:	2800      	cmp	r0, #0
    5e76:	d154      	bne.n	5f22 <_ZN10PCProtocol7ServiceEv+0xbe>
		if(_inout->Available()){
    5e78:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    5e7a:	f7fe fe33 	bl	4ae4 <_ZN10RFProtocol9AvailableEv>
    5e7e:	2800      	cmp	r0, #0
    5e80:	d015      	beq.n	5eae <_ZN10PCProtocol7ServiceEv+0x4a>
			RadioData_t *output = _inout->GetData();
    5e82:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    5e84:	f7fe ff75 	bl	4d72 <_ZN10RFProtocol7GetDataEv>
			if(output->payloadLength < MAX_PAYLOAD_LENGTH-2){
    5e88:	0002      	movs	r2, r0
    5e8a:	323c      	adds	r2, #60	; 0x3c
    5e8c:	7813      	ldrb	r3, [r2, #0]
			RadioData_t *output = _inout->GetData();
    5e8e:	0001      	movs	r1, r0
			if(output->payloadLength < MAX_PAYLOAD_LENGTH-2){
    5e90:	2b39      	cmp	r3, #57	; 0x39
    5e92:	dc0c      	bgt.n	5eae <_ZN10PCProtocol7ServiceEv+0x4a>
				output->payload[output->payloadLength+1]=(uint8_t)output->snr;
    5e94:	000d      	movs	r5, r1
				uint8_t rssi_uint8=(uint8_t)output->rssi;
    5e96:	303d      	adds	r0, #61	; 0x3d
				output->payload[output->payloadLength]=(uint8_t)output->rssi;
    5e98:	7800      	ldrb	r0, [r0, #0]
				output->payload[output->payloadLength+1]=(uint8_t)output->snr;
    5e9a:	353e      	adds	r5, #62	; 0x3e
				output->payload[output->payloadLength]=(uint8_t)output->rssi;
    5e9c:	54c8      	strb	r0, [r1, r3]
				output->payload[output->payloadLength+1]=(uint8_t)output->snr;
    5e9e:	782d      	ldrb	r5, [r5, #0]
    5ea0:	18c8      	adds	r0, r1, r3
				output->payloadLength+=2;
    5ea2:	3302      	adds	r3, #2
				output->payload[output->payloadLength+1]=(uint8_t)output->snr;
    5ea4:	7045      	strb	r5, [r0, #1]
				output->payloadLength+=2;
    5ea6:	7013      	strb	r3, [r2, #0]
				WriteToSerial(output);
    5ea8:	0020      	movs	r0, r4
    5eaa:	f7ff ff99 	bl	5de0 <_ZN10PCProtocol13WriteToSerialEP11RadioData_t>
}
    5eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if(_newChar == 0x1E)
    5eb0:	79e3      	ldrb	r3, [r4, #7]
    5eb2:	2b1e      	cmp	r3, #30
    5eb4:	d132      	bne.n	5f1c <_ZN10PCProtocol7ServiceEv+0xb8>
						clearInputData();
    5eb6:	0020      	movs	r0, r4
    5eb8:	f7ff ff59 	bl	5d6e <_ZN10PCProtocol14clearInputDataEv>
						SerialState=READ_DATA_LENGTH; // Start of string found!
    5ebc:	2301      	movs	r3, #1
					SerialState = LOOKING_FOR_START; // error, restart.
    5ebe:	71a3      	strb	r3, [r4, #6]
				break;
    5ec0:	e02c      	b.n	5f1c <_ZN10PCProtocol7ServiceEv+0xb8>
					if(_newChar >= MAX_PAYLOAD_LENGTH ){
    5ec2:	79e3      	ldrb	r3, [r4, #7]
    5ec4:	2b3b      	cmp	r3, #59	; 0x3b
    5ec6:	dd01      	ble.n	5ecc <_ZN10PCProtocol7ServiceEv+0x68>
					SerialState = LOOKING_FOR_START; // error, restart.
    5ec8:	2300      	movs	r3, #0
    5eca:	e7f8      	b.n	5ebe <_ZN10PCProtocol7ServiceEv+0x5a>
					}else if(_newChar == 0x1E){
    5ecc:	2b1e      	cmp	r3, #30
    5ece:	d0f2      	beq.n	5eb6 <_ZN10PCProtocol7ServiceEv+0x52>
						 dataLength = _newChar;
    5ed0:	0022      	movs	r2, r4
    5ed2:	3244      	adds	r2, #68	; 0x44
    5ed4:	7013      	strb	r3, [r2, #0]
						 SerialState=READ_PAYLOAD_ID; // Start of string found!						
    5ed6:	2302      	movs	r3, #2
    5ed8:	e7f1      	b.n	5ebe <_ZN10PCProtocol7ServiceEv+0x5a>
					if(_newChar == 0x1E){
    5eda:	79e2      	ldrb	r2, [r4, #7]
    5edc:	2a1e      	cmp	r2, #30
    5ede:	d0ea      	beq.n	5eb6 <_ZN10PCProtocol7ServiceEv+0x52>
						PayloadID = (PayloadID_t)_newChar;
    5ee0:	7162      	strb	r2, [r4, #5]
						if((PayloadID == RADAR_APPLICATION_ID) || (PayloadID == RADIO_DATA_TO_RF) || (PayloadID == RADIO_DATA_TO_PC)){
    5ee2:	2a02      	cmp	r2, #2
    5ee4:	d8f0      	bhi.n	5ec8 <_ZN10PCProtocol7ServiceEv+0x64>
							data[dataIndex++] = _newChar;
    5ee6:	0021      	movs	r1, r4
    5ee8:	3145      	adds	r1, #69	; 0x45
    5eea:	780b      	ldrb	r3, [r1, #0]
    5eec:	1c58      	adds	r0, r3, #1
    5eee:	18e3      	adds	r3, r4, r3
    5ef0:	7008      	strb	r0, [r1, #0]
    5ef2:	721a      	strb	r2, [r3, #8]
							SerialState=READ_PAYLOAD;		
    5ef4:	2303      	movs	r3, #3
    5ef6:	e7e2      	b.n	5ebe <_ZN10PCProtocol7ServiceEv+0x5a>
					data[dataIndex++] = _newChar;
    5ef8:	0021      	movs	r1, r4
    5efa:	3145      	adds	r1, #69	; 0x45
    5efc:	780a      	ldrb	r2, [r1, #0]
    5efe:	1c53      	adds	r3, r2, #1
    5f00:	b2db      	uxtb	r3, r3
    5f02:	700b      	strb	r3, [r1, #0]
    5f04:	79e1      	ldrb	r1, [r4, #7]
    5f06:	18a2      	adds	r2, r4, r2
    5f08:	7211      	strb	r1, [r2, #8]
					if(dataIndex < MAX_PAYLOAD_LENGTH){
    5f0a:	2b3b      	cmp	r3, #59	; 0x3b
    5f0c:	d8dc      	bhi.n	5ec8 <_ZN10PCProtocol7ServiceEv+0x64>
						if(dataIndex >= (dataLength-2)){
    5f0e:	0022      	movs	r2, r4
    5f10:	3244      	adds	r2, #68	; 0x44
    5f12:	7812      	ldrb	r2, [r2, #0]
    5f14:	3a02      	subs	r2, #2
    5f16:	4293      	cmp	r3, r2
    5f18:	db00      	blt.n	5f1c <_ZN10PCProtocol7ServiceEv+0xb8>
							SerialState=READ_CRC1; // Done with Data payload, now go to CRC
    5f1a:	71a7      	strb	r7, [r4, #6]
		}while(NumberOfBytesToRead > 0); // loop until buffer is empty		 
    5f1c:	6823      	ldr	r3, [r4, #0]
    5f1e:	2b00      	cmp	r3, #0
    5f20:	ddc5      	ble.n	5eae <_ZN10PCProtocol7ServiceEv+0x4a>
			_newChar=Serial.read(); // read char from input buffer
    5f22:	0030      	movs	r0, r6
    5f24:	f000 fd64 	bl	69f0 <_ZN7Serial_4readEv>
    5f28:	71e0      	strb	r0, [r4, #7]
			NumberOfBytesToRead = Serial.available();
    5f2a:	0030      	movs	r0, r6
    5f2c:	f000 fd38 	bl	69a0 <_ZN7Serial_9availableEv>
    5f30:	6020      	str	r0, [r4, #0]
			switch (SerialState)
    5f32:	79a0      	ldrb	r0, [r4, #6]
    5f34:	2805      	cmp	r0, #5
    5f36:	d8c7      	bhi.n	5ec8 <_ZN10PCProtocol7ServiceEv+0x64>
    5f38:	f002 fd1c 	bl	8974 <__gnu_thumb1_case_sqi>
    5f3c:	decfc3ba 	.word	0xdecfc3ba
    5f40:	0a03      	.short	0x0a03
					CRC = (uint16_t)(_newChar<< 8);
    5f42:	0022      	movs	r2, r4
    5f44:	79e3      	ldrb	r3, [r4, #7]
    5f46:	32cc      	adds	r2, #204	; 0xcc
    5f48:	021b      	lsls	r3, r3, #8
    5f4a:	8013      	strh	r3, [r2, #0]
					SerialState=READ_CRC2; 
    5f4c:	2305      	movs	r3, #5
    5f4e:	e7b6      	b.n	5ebe <_ZN10PCProtocol7ServiceEv+0x5a>
					CRC |= (uint16_t)_newChar;
    5f50:	0025      	movs	r5, r4
    5f52:	35cc      	adds	r5, #204	; 0xcc
    5f54:	882a      	ldrh	r2, [r5, #0]
    5f56:	79e3      	ldrb	r3, [r4, #7]
					if(RadioForCRC->CalculateCRC(&data[0] , dataIndex) != CRC){
    5f58:	0021      	movs	r1, r4
					CRC |= (uint16_t)_newChar;
    5f5a:	4313      	orrs	r3, r2
    5f5c:	802b      	strh	r3, [r5, #0]
					if(RadioForCRC->CalculateCRC(&data[0] , dataIndex) != CRC){
    5f5e:	0023      	movs	r3, r4
    5f60:	3345      	adds	r3, #69	; 0x45
    5f62:	781a      	ldrb	r2, [r3, #0]
    5f64:	3108      	adds	r1, #8
    5f66:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    5f68:	f7fc f9e8 	bl	233c <_ZN11E28_2G4M20S12CalculateCRCEPhh>
    5f6c:	882b      	ldrh	r3, [r5, #0]
    5f6e:	4283      	cmp	r3, r0
    5f70:	d1aa      	bne.n	5ec8 <_ZN10PCProtocol7ServiceEv+0x64>
					switch(PayloadID) // MSG ID
    5f72:	7963      	ldrb	r3, [r4, #5]
    5f74:	2b00      	cmp	r3, #0
    5f76:	d005      	beq.n	5f84 <_ZN10PCProtocol7ServiceEv+0x120>
    5f78:	2b02      	cmp	r3, #2
    5f7a:	d8a5      	bhi.n	5ec8 <_ZN10PCProtocol7ServiceEv+0x64>
							RadioDataHandler();						
    5f7c:	0020      	movs	r0, r4
    5f7e:	f7ff ff11 	bl	5da4 <_ZN10PCProtocol16RadioDataHandlerEv>
						break;
    5f82:	e7a1      	b.n	5ec8 <_ZN10PCProtocol7ServiceEv+0x64>
							ApplicationCMDHandler();
    5f84:	0020      	movs	r0, r4
    5f86:	f7ff ff55 	bl	5e34 <_ZN10PCProtocol21ApplicationCMDHandlerEv>
						break;
    5f8a:	e79d      	b.n	5ec8 <_ZN10PCProtocol7ServiceEv+0x64>
    5f8c:	200002b0 	.word	0x200002b0

00005f90 <_Z17setTimerFrequencyi>:
#include "main.h"
#include "Arduino.h"
#include "RFService.h"


void setTimerFrequency(int frequencyHz) {
    5f90:	b537      	push	{r0, r1, r2, r4, r5, lr}
	
	//int compareValue = (CPU_HZ / (TIMER_PRESCALER_DIV * frequencyHz)) - 1;
	int compareValue = (KHZ_OSC / (16 * frequencyHz)) - 1;
    5f92:	0101      	lsls	r1, r0, #4
    5f94:	2080      	movs	r0, #128	; 0x80
    5f96:	0200      	lsls	r0, r0, #8
    5f98:	f002 fd94 	bl	8ac4 <__divsi3>
	TcCount16* TC = (TcCount16*) TC3;
	
	// Make sure the count is in a proportional position to where it was
	// to prevent any jitter or disconnect when changing the compare value.
	TC->COUNT.reg = map(TC->COUNT.reg, 0, TC->CC[0].reg, 0, compareValue);
    5f9c:	2300      	movs	r3, #0
    5f9e:	4c09      	ldr	r4, [pc, #36]	; (5fc4 <_Z17setTimerFrequencyi+0x34>)
	int compareValue = (KHZ_OSC / (16 * frequencyHz)) - 1;
    5fa0:	1e45      	subs	r5, r0, #1
	TC->COUNT.reg = map(TC->COUNT.reg, 0, TC->CC[0].reg, 0, compareValue);
    5fa2:	8a20      	ldrh	r0, [r4, #16]
    5fa4:	8b22      	ldrh	r2, [r4, #24]
    5fa6:	b280      	uxth	r0, r0
    5fa8:	9500      	str	r5, [sp, #0]
    5faa:	b292      	uxth	r2, r2
    5fac:	0019      	movs	r1, r3
    5fae:	f001 fef9 	bl	7da4 <_Z3maplllll>
	TC->CC[0].reg = compareValue;
    5fb2:	b2ad      	uxth	r5, r5
	TC->COUNT.reg = map(TC->COUNT.reg, 0, TC->CC[0].reg, 0, compareValue);
    5fb4:	b280      	uxth	r0, r0
    5fb6:	8220      	strh	r0, [r4, #16]
	TC->CC[0].reg = compareValue;
    5fb8:	8325      	strh	r5, [r4, #24]
	//  Serial.println(TC->COUNT.reg);
	//  Serial.println(TC->CC[0].reg);
	while (TC->STATUS.bit.SYNCBUSY == 1);
    5fba:	7be3      	ldrb	r3, [r4, #15]
    5fbc:	09db      	lsrs	r3, r3, #7
    5fbe:	d1fc      	bne.n	5fba <_Z17setTimerFrequencyi+0x2a>
}
    5fc0:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    5fc2:	46c0      	nop			; (mov r8, r8)
    5fc4:	42002c00 	.word	0x42002c00

00005fc8 <_Z11startTimer3i>:

void startTimer3(int frequencyHz){
	// Setup Timer 3 to use internal 32khz, and ensure it runs in standby.

	// Put Generic Clock Generator 1 (32Khz) as source for Timer 3 (and 2)
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(GCM_TCC2_TC3)     | // Timer 2 and Timer 3
    5fc8:	4b20      	ldr	r3, [pc, #128]	; (604c <_Z11startTimer3i+0x84>)
    5fca:	4a21      	ldr	r2, [pc, #132]	; (6050 <_Z11startTimer3i+0x88>)
void startTimer3(int frequencyHz){
    5fcc:	b570      	push	{r4, r5, r6, lr}
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(GCM_TCC2_TC3)     | // Timer 2 and Timer 3
    5fce:	805a      	strh	r2, [r3, #2]
						GCLK_CLKCTRL_GEN_GCLK2			  | // Generic Clock Generator 2 is source (Internal 32khz).
						GCLK_CLKCTRL_CLKEN;
	
	while ( GCLK->STATUS.bit.SYNCBUSY == 1 ); // wait for sync
    5fd0:	785a      	ldrb	r2, [r3, #1]
    5fd2:	09d2      	lsrs	r2, r2, #7
    5fd4:	d1fc      	bne.n	5fd0 <_Z11startTimer3i+0x8>

	GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2)				   | // Generic Clock Generator 2
    5fd6:	4a1f      	ldr	r2, [pc, #124]	; (6054 <_Z11startTimer3i+0x8c>)
    5fd8:	605a      	str	r2, [r3, #4]
						GCLK_GENCTRL_SRC_OSCULP32K		   | // Use internal 32 Khz oscilator
						GCLK_GENCTRL_GENEN				   | // Clock Generator Enabled
						GCLK_GENCTRL_RUNSTDBY;				 // Run in standtby.

						
	while ( GCLK->STATUS.bit.SYNCBUSY == 1 ); // wait for sync
    5fda:	785a      	ldrb	r2, [r3, #1]
    5fdc:	09d2      	lsrs	r2, r2, #7
    5fde:	d1fc      	bne.n	5fda <_Z11startTimer3i+0x12>
	TcCount16* TC = (TcCount16*) TC3;

	TC->CTRLA.reg &= ~TC_CTRLA_ENABLE;
    5fe0:	4c1d      	ldr	r4, [pc, #116]	; (6058 <_Z11startTimer3i+0x90>)
    5fe2:	3202      	adds	r2, #2
    5fe4:	8823      	ldrh	r3, [r4, #0]
    5fe6:	4393      	bics	r3, r2
    5fe8:	8023      	strh	r3, [r4, #0]
	while (TC->STATUS.bit.SYNCBUSY == 1); // wait for sync
    5fea:	7be3      	ldrb	r3, [r4, #15]
    5fec:	09db      	lsrs	r3, r3, #7
    5fee:	d1fc      	bne.n	5fea <_Z11startTimer3i+0x22>

	TC->CTRLA.bit.RUNSTDBY = 1;
    5ff0:	2380      	movs	r3, #128	; 0x80
    5ff2:	8822      	ldrh	r2, [r4, #0]
    5ff4:	011b      	lsls	r3, r3, #4
    5ff6:	4313      	orrs	r3, r2
    5ff8:	8023      	strh	r3, [r4, #0]

	// Use the 16-bit timer
	TC->CTRLA.reg |= TC_CTRLA_MODE_COUNT16;
    5ffa:	8823      	ldrh	r3, [r4, #0]
    5ffc:	b29b      	uxth	r3, r3
    5ffe:	8023      	strh	r3, [r4, #0]
	while (TC->STATUS.bit.SYNCBUSY == 1); // wait for sync
    6000:	7be3      	ldrb	r3, [r4, #15]
    6002:	09db      	lsrs	r3, r3, #7
    6004:	d1fc      	bne.n	6000 <_Z11startTimer3i+0x38>

	// Use match mode so that the timer counter resets when the count matches the compare register
	TC->CTRLA.reg |= TC_CTRLA_WAVEGEN_MFRQ;
    6006:	8822      	ldrh	r2, [r4, #0]
    6008:	3320      	adds	r3, #32
    600a:	4313      	orrs	r3, r2
    600c:	8023      	strh	r3, [r4, #0]
	while (TC->STATUS.bit.SYNCBUSY == 1); // wait for sync
    600e:	7be3      	ldrb	r3, [r4, #15]
    6010:	09db      	lsrs	r3, r3, #7
    6012:	d1fc      	bne.n	600e <_Z11startTimer3i+0x46>
  
	// Set prescaler to 1024
	//	TC->CTRLA.reg |= TC_CTRLA_PRESCALER_DIV1024;
	TC->CTRLA.reg |= TC_CTRLA_PRESCALER_DIV16;
    6014:	2380      	movs	r3, #128	; 0x80
    6016:	8822      	ldrh	r2, [r4, #0]
    6018:	00db      	lsls	r3, r3, #3
    601a:	4313      	orrs	r3, r2
    601c:	8023      	strh	r3, [r4, #0]
	while (TC->STATUS.bit.SYNCBUSY == 1); // wait for sync
    601e:	7be5      	ldrb	r5, [r4, #15]
    6020:	09ed      	lsrs	r5, r5, #7
    6022:	d1fc      	bne.n	601e <_Z11startTimer3i+0x56>
	setTimerFrequency(frequencyHz);
    6024:	f7ff ffb4 	bl	5f90 <_Z17setTimerFrequencyi>

	// Enable the compare interrupt
	TC->INTENSET.reg = 0;
	TC->INTENSET.bit.MC0 = 1;
    6028:	2310      	movs	r3, #16
	TC->INTENSET.reg = 0;
    602a:	7365      	strb	r5, [r4, #13]
	TC->INTENSET.bit.MC0 = 1;
    602c:	7b62      	ldrb	r2, [r4, #13]
    602e:	4313      	orrs	r3, r2
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    6030:	2280      	movs	r2, #128	; 0x80
    6032:	7363      	strb	r3, [r4, #13]
    6034:	4b09      	ldr	r3, [pc, #36]	; (605c <_Z11startTimer3i+0x94>)
    6036:	02d2      	lsls	r2, r2, #11
    6038:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(TC3_IRQn);
	TC->CTRLA.reg |= TC_CTRLA_ENABLE;
    603a:	2302      	movs	r3, #2
    603c:	8822      	ldrh	r2, [r4, #0]
    603e:	4313      	orrs	r3, r2
    6040:	8023      	strh	r3, [r4, #0]
	while (TC->STATUS.bit.SYNCBUSY == 1); // wait for sync
    6042:	7be3      	ldrb	r3, [r4, #15]
    6044:	09db      	lsrs	r3, r3, #7
    6046:	d1fc      	bne.n	6042 <_Z11startTimer3i+0x7a>
}
    6048:	bd70      	pop	{r4, r5, r6, pc}
    604a:	46c0      	nop			; (mov r8, r8)
    604c:	40000c00 	.word	0x40000c00
    6050:	0000421b 	.word	0x0000421b
    6054:	00210302 	.word	0x00210302
    6058:	42002c00 	.word	0x42002c00
    605c:	e000e100 	.word	0xe000e100

00006060 <TC3_Handler>:

// ISR function doe timer 3
void TC3_Handler() {
    6060:	b510      	push	{r4, lr}
	TcCount16* TC = (TcCount16*) TC3;
	// If this interrupt is due to the compare register matching the timer count
	// we toggle the LED.
	if (TC->INTFLAG.bit.MC0 == 1) {
    6062:	4b0c      	ldr	r3, [pc, #48]	; (6094 <TC3_Handler+0x34>)
    6064:	7b9a      	ldrb	r2, [r3, #14]
    6066:	06d2      	lsls	r2, r2, #27
    6068:	d512      	bpl.n	6090 <TC3_Handler+0x30>
		TC->INTFLAG.bit.MC0 = 1;
    606a:	2210      	movs	r2, #16
    606c:	7b99      	ldrb	r1, [r3, #14]
    606e:	430a      	orrs	r2, r1
    6070:	739a      	strb	r2, [r3, #14]
		// Write callback here!!!
		
		RadioService->SeccondCounter(); // Count up the Seconds since laste ground contact.
    6072:	4b09      	ldr	r3, [pc, #36]	; (6098 <TC3_Handler+0x38>)
    6074:	6818      	ldr	r0, [r3, #0]
    6076:	f7fe ffac 	bl	4fd2 <_ZN9RFService14SeccondCounterEv>
		
		if(SystemInformation.SecondCounter < 254){
    607a:	4b08      	ldr	r3, [pc, #32]	; (609c <TC3_Handler+0x3c>)
    607c:	795a      	ldrb	r2, [r3, #5]
    607e:	2afd      	cmp	r2, #253	; 0xfd
    6080:	dc01      	bgt.n	6086 <TC3_Handler+0x26>
			SystemInformation.SecondCounter++;
    6082:	3201      	adds	r2, #1
    6084:	715a      	strb	r2, [r3, #5]
		}
		
		if(SystemInformation.BeaconSecondCounter < 20){
    6086:	799a      	ldrb	r2, [r3, #6]
    6088:	2a13      	cmp	r2, #19
    608a:	dc01      	bgt.n	6090 <TC3_Handler+0x30>
			SystemInformation.BeaconSecondCounter++;
    608c:	3201      	adds	r2, #1
    608e:	719a      	strb	r2, [r3, #6]
		}
	}
}
    6090:	bd10      	pop	{r4, pc}
    6092:	46c0      	nop			; (mov r8, r8)
    6094:	42002c00 	.word	0x42002c00
    6098:	20000248 	.word	0x20000248
    609c:	20000250 	.word	0x20000250

000060a0 <__cxa_pure_virtual>:
    60a0:	e7fe      	b.n	60a0 <__cxa_pure_virtual>
	...

000060a4 <USB_Handler>:

static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
  if (usb_isr)
    60a4:	4b03      	ldr	r3, [pc, #12]	; (60b4 <USB_Handler+0x10>)
{
    60a6:	b510      	push	{r4, lr}
  if (usb_isr)
    60a8:	681b      	ldr	r3, [r3, #0]
    60aa:	2b00      	cmp	r3, #0
    60ac:	d000      	beq.n	60b0 <USB_Handler+0xc>
    usb_isr();
    60ae:	4798      	blx	r3
}
    60b0:	bd10      	pop	{r4, pc}
    60b2:	46c0      	nop			; (mov r8, r8)
    60b4:	200002a8 	.word	0x200002a8

000060b8 <Dummy_Handler>:
{
    60b8:	b570      	push	{r4, r5, r6, lr}
		   digitalWrite(21, 0); 
    60ba:	2615      	movs	r6, #21
    60bc:	250a      	movs	r5, #10
{
    60be:	4c0d      	ldr	r4, [pc, #52]	; (60f4 <Dummy_Handler+0x3c>)
		   digitalWrite(21, 0); 
    60c0:	2100      	movs	r1, #0
    60c2:	0030      	movs	r0, r6
    60c4:	f001 fdcc 	bl	7c60 <digitalWrite>
		   asm volatile ("nop"::);
    60c8:	46c0      	nop			; (mov r8, r8)
    60ca:	3c01      	subs	r4, #1
		  for(a=0;a<25000;a++) 
    60cc:	2c00      	cmp	r4, #0
    60ce:	d1f7      	bne.n	60c0 <Dummy_Handler+0x8>
    60d0:	4c08      	ldr	r4, [pc, #32]	; (60f4 <Dummy_Handler+0x3c>)
			digitalWrite(21, 1); 
    60d2:	2101      	movs	r1, #1
    60d4:	0030      	movs	r0, r6
    60d6:	f001 fdc3 	bl	7c60 <digitalWrite>
		    asm volatile ("nop"::);
    60da:	46c0      	nop			; (mov r8, r8)
    60dc:	3c01      	subs	r4, #1
		  for(a=0;a<25000;a++) 
    60de:	2c00      	cmp	r4, #0
    60e0:	d1f7      	bne.n	60d2 <Dummy_Handler+0x1a>
    60e2:	3d01      	subs	r5, #1
		for(b=0;b<10;b++)
    60e4:	2d00      	cmp	r5, #0
    60e6:	d1ea      	bne.n	60be <Dummy_Handler+0x6>
    60e8:	4b03      	ldr	r3, [pc, #12]	; (60f8 <Dummy_Handler+0x40>)
		for(a=0;a<2500000;a++)  {asm volatile ("nop"::); }  
    60ea:	46c0      	nop			; (mov r8, r8)
    60ec:	3b01      	subs	r3, #1
    60ee:	2b00      	cmp	r3, #0
    60f0:	d1fb      	bne.n	60ea <Dummy_Handler+0x32>
    60f2:	e7e3      	b.n	60bc <Dummy_Handler+0x4>
    60f4:	000061a8 	.word	0x000061a8
    60f8:	002625a0 	.word	0x002625a0

000060fc <Reset_Handler>:
{
    60fc:	b570      	push	{r4, r5, r6, lr}
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    60fe:	490f      	ldr	r1, [pc, #60]	; (613c <Reset_Handler+0x40>)
    6100:	4c0f      	ldr	r4, [pc, #60]	; (6140 <Reset_Handler+0x44>)
    6102:	42a1      	cmp	r1, r4
    6104:	d104      	bne.n	6110 <Reset_Handler+0x14>
  SystemInit();
    6106:	f000 f969 	bl	63dc <SystemInit>
  main();
    610a:	f000 f851 	bl	61b0 <main>
    610e:	e7fe      	b.n	610e <Reset_Handler+0x12>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    6110:	4d0c      	ldr	r5, [pc, #48]	; (6144 <Reset_Handler+0x48>)
    6112:	2300      	movs	r3, #0
    6114:	428d      	cmp	r5, r1
    6116:	d0f6      	beq.n	6106 <Reset_Handler+0xa>
    6118:	18ca      	adds	r2, r1, r3
    611a:	18e8      	adds	r0, r5, r3
    for (; pDest < &__data_end__; pDest++, pSrc++)
    611c:	42a2      	cmp	r2, r4
    611e:	d305      	bcc.n	612c <Reset_Handler+0x30>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    6120:	4290      	cmp	r0, r2
    6122:	d0f0      	beq.n	6106 <Reset_Handler+0xa>
    6124:	4b08      	ldr	r3, [pc, #32]	; (6148 <Reset_Handler+0x4c>)
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    6126:	4909      	ldr	r1, [pc, #36]	; (614c <Reset_Handler+0x50>)
      *pDest = 0;
    6128:	2200      	movs	r2, #0
    612a:	e004      	b.n	6136 <Reset_Handler+0x3a>
      *pDest = *pSrc;
    612c:	6800      	ldr	r0, [r0, #0]
    612e:	3304      	adds	r3, #4
    6130:	6010      	str	r0, [r2, #0]
    6132:	e7f1      	b.n	6118 <Reset_Handler+0x1c>
      *pDest = 0;
    6134:	c304      	stmia	r3!, {r2}
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    6136:	428b      	cmp	r3, r1
    6138:	d3fc      	bcc.n	6134 <Reset_Handler+0x38>
    613a:	e7e4      	b.n	6106 <Reset_Handler+0xa>
    613c:	20000000 	.word	0x20000000
    6140:	20000130 	.word	0x20000130
    6144:	0000c36c 	.word	0x0000c36c
    6148:	20000130 	.word	0x20000130
    614c:	20000984 	.word	0x20000984

00006150 <SysTick_Handler>:
{
    6150:	b510      	push	{r4, lr}
  if (sysTickHook())
    6152:	f000 f82a 	bl	61aa <sysTickHook>
    6156:	2800      	cmp	r0, #0
    6158:	d101      	bne.n	615e <SysTick_Handler+0xe>
  SysTick_DefaultHandler();
    615a:	f000 f81b 	bl	6194 <SysTick_DefaultHandler>
}
    615e:	bd10      	pop	{r4, pc}

00006160 <USB_SetHandler>:

void USB_SetHandler(void (*new_usb_isr)(void))
{
  usb_isr = new_usb_isr;
    6160:	4b01      	ldr	r3, [pc, #4]	; (6168 <USB_SetHandler+0x8>)
    6162:	6018      	str	r0, [r3, #0]
}
    6164:	4770      	bx	lr
    6166:	46c0      	nop			; (mov r8, r8)
    6168:	200002a8 	.word	0x200002a8

0000616c <millis>:
static volatile uint32_t _ulTickCount=0 ;

unsigned long millis( void )
{
// todo: ensure no interrupts
  return _ulTickCount ;
    616c:	4b01      	ldr	r3, [pc, #4]	; (6174 <millis+0x8>)
    616e:	6818      	ldr	r0, [r3, #0]
}
    6170:	4770      	bx	lr
    6172:	46c0      	nop			; (mov r8, r8)
    6174:	200002ac 	.word	0x200002ac

00006178 <delay>:
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}

void delay( unsigned long ms )
{
    6178:	b570      	push	{r4, r5, r6, lr}
    617a:	1e04      	subs	r4, r0, #0
  if ( ms == 0 )
    617c:	d007      	beq.n	618e <delay+0x16>
  {
    return ;
  }

  uint32_t start = _ulTickCount ;
    617e:	4d04      	ldr	r5, [pc, #16]	; (6190 <delay+0x18>)
    6180:	682e      	ldr	r6, [r5, #0]

  do
  {
    yield() ;
    6182:	f000 f811 	bl	61a8 <yield>
  } while ( _ulTickCount - start < ms ) ;
    6186:	682b      	ldr	r3, [r5, #0]
    6188:	1b9b      	subs	r3, r3, r6
    618a:	429c      	cmp	r4, r3
    618c:	d8f9      	bhi.n	6182 <delay+0xa>
}
    618e:	bd70      	pop	{r4, r5, r6, pc}
    6190:	200002ac 	.word	0x200002ac

00006194 <SysTick_DefaultHandler>:

#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
    6194:	b510      	push	{r4, lr}
  // Increment tick count each ms
  _ulTickCount++;
    6196:	4a03      	ldr	r2, [pc, #12]	; (61a4 <SysTick_DefaultHandler+0x10>)
    6198:	6813      	ldr	r3, [r2, #0]
    619a:	3301      	adds	r3, #1
    619c:	6013      	str	r3, [r2, #0]
  tickReset();
    619e:	f000 f8e1 	bl	6364 <tickReset>
}
    61a2:	bd10      	pop	{r4, pc}
    61a4:	200002ac 	.word	0x200002ac

000061a8 <yield>:
    61a8:	4770      	bx	lr

000061aa <sysTickHook>:
    61aa:	2000      	movs	r0, #0
    61ac:	4770      	bx	lr

000061ae <_Z11initVariantv>:
#include "Arduino.h"

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    61ae:	4770      	bx	lr

000061b0 <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
    61b0:	b510      	push	{r4, lr}
  init();
    61b2:	f001 fbf7 	bl	79a4 <init>

  __libc_init_array();
    61b6:	f005 f89b 	bl	b2f0 <__libc_init_array>

  initVariant();
    61ba:	f7ff fff8 	bl	61ae <_Z11initVariantv>

  delay(1);
    61be:	2001      	movs	r0, #1
    61c0:	f7ff ffda 	bl	6178 <delay>
#if defined(USBCON)
  USBDevice.init();
    61c4:	4c08      	ldr	r4, [pc, #32]	; (61e8 <main+0x38>)
    61c6:	0020      	movs	r0, r4
    61c8:	f000 fec6 	bl	6f58 <_ZN14USBDeviceClass4initEv>
  USBDevice.attach();
    61cc:	0020      	movs	r0, r4
    61ce:	f000 ff23 	bl	7018 <_ZN14USBDeviceClass6attachEv>
#endif

  setup();
    61d2:	f7fe fa0b 	bl	45ec <setup>

  for (;;)
  {
    loop();
    61d6:	f7fe f8ed 	bl	43b4 <loop>
    if (serialEventRun) serialEventRun();
    61da:	4b04      	ldr	r3, [pc, #16]	; (61ec <main+0x3c>)
    61dc:	2b00      	cmp	r3, #0
    61de:	d0fa      	beq.n	61d6 <main+0x26>
    61e0:	e000      	b.n	61e4 <main+0x34>
    61e2:	bf00      	nop
    61e4:	e7f7      	b.n	61d6 <main+0x26>
    61e6:	46c0      	nop			; (mov r8, r8)
    61e8:	200002cc 	.word	0x200002cc
    61ec:	00000000 	.word	0x00000000

000061f0 <_Znwj>:
    61f0:	b510      	push	{r4, lr}
    61f2:	f005 f8a1 	bl	b338 <malloc>
    61f6:	bd10      	pop	{r4, pc}

000061f8 <_ZdlPv>:
    61f8:	b510      	push	{r4, lr}
    61fa:	f005 f8a7 	bl	b34c <free>
    61fe:	bd10      	pop	{r4, pc}

00006200 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    6200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6202:	0006      	movs	r6, r0
    6204:	000d      	movs	r5, r1
    6206:	000c      	movs	r4, r1
    6208:	188b      	adds	r3, r1, r2
    620a:	9301      	str	r3, [sp, #4]
  size_t n = 0;
  while (size--) {
    620c:	9b01      	ldr	r3, [sp, #4]
    620e:	1b67      	subs	r7, r4, r5
    6210:	429c      	cmp	r4, r3
    6212:	d007      	beq.n	6224 <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
    6214:	6833      	ldr	r3, [r6, #0]
    6216:	7821      	ldrb	r1, [r4, #0]
    6218:	681b      	ldr	r3, [r3, #0]
    621a:	0030      	movs	r0, r6
    621c:	4798      	blx	r3
    621e:	3401      	adds	r4, #1
    6220:	2800      	cmp	r0, #0
    6222:	d1f3      	bne.n	620c <_ZN5Print5writeEPKhj+0xc>
    else break;
  }
  return n;
}
    6224:	0038      	movs	r0, r7
    6226:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00006228 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    6228:	b570      	push	{r4, r5, r6, lr}
    622a:	0005      	movs	r5, r0
    622c:	000c      	movs	r4, r1
      if (str == NULL) return 0;
    622e:	1e08      	subs	r0, r1, #0
    6230:	d007      	beq.n	6242 <_ZN5Print5writeEPKc+0x1a>
      return write((const uint8_t *)str, strlen(str));
    6232:	f005 f9bd 	bl	b5b0 <strlen>
    6236:	682b      	ldr	r3, [r5, #0]
    6238:	0002      	movs	r2, r0
    623a:	685b      	ldr	r3, [r3, #4]
    623c:	0021      	movs	r1, r4
    623e:	0028      	movs	r0, r5
    6240:	4798      	blx	r3
    }
    6242:	bd70      	pop	{r4, r5, r6, pc}

00006244 <_ZN5Print5printERK6String>:
{
  return print(reinterpret_cast<const char *>(ifsh));
}

size_t Print::print(const String &s)
{
    6244:	b510      	push	{r4, lr}
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    6246:	6803      	ldr	r3, [r0, #0]
    6248:	688a      	ldr	r2, [r1, #8]
    624a:	685b      	ldr	r3, [r3, #4]
    624c:	6809      	ldr	r1, [r1, #0]
    624e:	4798      	blx	r3
  return write(s.c_str(), s.length());
}
    6250:	bd10      	pop	{r4, pc}

00006252 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
    6252:	b510      	push	{r4, lr}
  return write(str);
    6254:	f7ff ffe8 	bl	6228 <_ZN5Print5writeEPKc>
}
    6258:	bd10      	pop	{r4, pc}

0000625a <_ZN5Print5printEc>:

size_t Print::print(char c)
{
    625a:	b510      	push	{r4, lr}
  return write(c);
    625c:	6803      	ldr	r3, [r0, #0]
    625e:	681b      	ldr	r3, [r3, #0]
    6260:	4798      	blx	r3
}
    6262:	bd10      	pop	{r4, pc}

00006264 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    6264:	b510      	push	{r4, lr}
  return write("\r\n");
    6266:	4902      	ldr	r1, [pc, #8]	; (6270 <_ZN5Print7printlnEv+0xc>)
    6268:	f7ff ffde 	bl	6228 <_ZN5Print5writeEPKc>
}
    626c:	bd10      	pop	{r4, pc}
    626e:	46c0      	nop			; (mov r8, r8)
    6270:	0000bdac 	.word	0x0000bdac

00006274 <_ZN5Print7printlnERK6String>:

size_t Print::println(const String &s)
{
    6274:	b570      	push	{r4, r5, r6, lr}
    6276:	0005      	movs	r5, r0
  size_t n = print(s);
    6278:	f7ff ffe4 	bl	6244 <_ZN5Print5printERK6String>
    627c:	0004      	movs	r4, r0
  n += println();
    627e:	0028      	movs	r0, r5
    6280:	f7ff fff0 	bl	6264 <_ZN5Print7printlnEv>
    6284:	1820      	adds	r0, r4, r0
  return n;
}
    6286:	bd70      	pop	{r4, r5, r6, pc}

00006288 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    6288:	b570      	push	{r4, r5, r6, lr}
    628a:	0004      	movs	r4, r0
  return write(str);
    628c:	f7ff ffcc 	bl	6228 <_ZN5Print5writeEPKc>
    6290:	0005      	movs	r5, r0
  size_t n = print(c);
  n += println();
    6292:	0020      	movs	r0, r4
    6294:	f7ff ffe6 	bl	6264 <_ZN5Print7printlnEv>
    6298:	1940      	adds	r0, r0, r5
  return n;
}
    629a:	bd70      	pop	{r4, r5, r6, pc}

0000629c <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    629c:	b5f0      	push	{r4, r5, r6, r7, lr}
    629e:	0016      	movs	r6, r2
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    62a0:	2200      	movs	r2, #0
{
    62a2:	b08d      	sub	sp, #52	; 0x34
  *str = '\0';
    62a4:	ab02      	add	r3, sp, #8
    62a6:	3305      	adds	r3, #5
{
    62a8:	9001      	str	r0, [sp, #4]
    62aa:	000d      	movs	r5, r1
  *str = '\0';
    62ac:	77da      	strb	r2, [r3, #31]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    62ae:	2e01      	cmp	r6, #1
    62b0:	dc00      	bgt.n	62b4 <_ZN5Print11printNumberEmh+0x18>
    62b2:	260a      	movs	r6, #10
    62b4:	ac0b      	add	r4, sp, #44	; 0x2c

  do {
    char c = n % base;
    62b6:	0028      	movs	r0, r5
    62b8:	0031      	movs	r1, r6
    62ba:	f002 fbff 	bl	8abc <__aeabi_uidivmod>
    62be:	000f      	movs	r7, r1
    62c0:	b2cb      	uxtb	r3, r1
    n /= base;
    62c2:	0028      	movs	r0, r5
    62c4:	0031      	movs	r1, r6
    char c = n % base;
    62c6:	9300      	str	r3, [sp, #0]
    n /= base;
    62c8:	f002 fb72 	bl	89b0 <__udivsi3>

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    62cc:	b2fb      	uxtb	r3, r7
    62ce:	3337      	adds	r3, #55	; 0x37
    n /= base;
    62d0:	0005      	movs	r5, r0
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    62d2:	3c01      	subs	r4, #1
    62d4:	b2db      	uxtb	r3, r3
    62d6:	2f09      	cmp	r7, #9
    62d8:	d802      	bhi.n	62e0 <_ZN5Print11printNumberEmh+0x44>
    62da:	9b00      	ldr	r3, [sp, #0]
    62dc:	3330      	adds	r3, #48	; 0x30
    62de:	b2db      	uxtb	r3, r3
    62e0:	7023      	strb	r3, [r4, #0]
  } while(n);
    62e2:	2d00      	cmp	r5, #0
    62e4:	d1e7      	bne.n	62b6 <_ZN5Print11printNumberEmh+0x1a>

  return write(str);
    62e6:	0021      	movs	r1, r4
    62e8:	9801      	ldr	r0, [sp, #4]
    62ea:	f7ff ff9d 	bl	6228 <_ZN5Print5writeEPKc>
}
    62ee:	b00d      	add	sp, #52	; 0x34
    62f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000062f2 <_ZN5Print5printEli>:
{
    62f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    62f4:	0006      	movs	r6, r0
    62f6:	000c      	movs	r4, r1
    62f8:	1e15      	subs	r5, r2, #0
  if (base == 0) {
    62fa:	d104      	bne.n	6306 <_ZN5Print5printEli+0x14>
    return write(n);
    62fc:	6803      	ldr	r3, [r0, #0]
    62fe:	b2c9      	uxtb	r1, r1
    6300:	681b      	ldr	r3, [r3, #0]
    6302:	4798      	blx	r3
}
    6304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return printNumber(n, base);
    6306:	b2d2      	uxtb	r2, r2
  } else if (base == 10) {
    6308:	2d0a      	cmp	r5, #10
    630a:	d10d      	bne.n	6328 <_ZN5Print5printEli+0x36>
    return printNumber(n, 10);
    630c:	002a      	movs	r2, r5
    if (n < 0) {
    630e:	2900      	cmp	r1, #0
    6310:	da0a      	bge.n	6328 <_ZN5Print5printEli+0x36>
      int t = print('-');
    6312:	212d      	movs	r1, #45	; 0x2d
    6314:	f7ff ffa1 	bl	625a <_ZN5Print5printEc>
      n = -n;
    6318:	4261      	negs	r1, r4
      int t = print('-');
    631a:	0007      	movs	r7, r0
      return printNumber(n, 10) + t;
    631c:	002a      	movs	r2, r5
    631e:	0030      	movs	r0, r6
    6320:	f7ff ffbc 	bl	629c <_ZN5Print11printNumberEmh>
    6324:	1838      	adds	r0, r7, r0
    6326:	e7ed      	b.n	6304 <_ZN5Print5printEli+0x12>
    return printNumber(n, base);
    6328:	0021      	movs	r1, r4
    632a:	0030      	movs	r0, r6
    632c:	f7ff ffb6 	bl	629c <_ZN5Print11printNumberEmh>
    6330:	e7e8      	b.n	6304 <_ZN5Print5printEli+0x12>

00006332 <_ZN5Print7printlnEii>:
{
    6332:	b570      	push	{r4, r5, r6, lr}
    6334:	0004      	movs	r4, r0
  return print((long) n, base);
    6336:	f7ff ffdc 	bl	62f2 <_ZN5Print5printEli>
    633a:	0005      	movs	r5, r0
  n += println();
    633c:	0020      	movs	r0, r4
    633e:	f7ff ff91 	bl	6264 <_ZN5Print7printlnEv>
    6342:	1940      	adds	r0, r0, r5
}
    6344:	bd70      	pop	{r4, r5, r6, pc}
	...

00006348 <initiateReset>:
}

static int ticks = -1;

void initiateReset(int _ticks) {
	ticks = _ticks;
    6348:	4b01      	ldr	r3, [pc, #4]	; (6350 <initiateReset+0x8>)
    634a:	6018      	str	r0, [r3, #0]
}
    634c:	4770      	bx	lr
    634e:	46c0      	nop			; (mov r8, r8)
    6350:	20000004 	.word	0x20000004

00006354 <cancelReset>:

void cancelReset() {
	ticks = -1;
    6354:	2201      	movs	r2, #1
    6356:	4b02      	ldr	r3, [pc, #8]	; (6360 <cancelReset+0xc>)
    6358:	4252      	negs	r2, r2
    635a:	601a      	str	r2, [r3, #0]
}
    635c:	4770      	bx	lr
    635e:	46c0      	nop			; (mov r8, r8)
    6360:	20000004 	.word	0x20000004

00006364 <tickReset>:

void tickReset() {
	if (ticks == -1)
    6364:	4a16      	ldr	r2, [pc, #88]	; (63c0 <tickReset+0x5c>)
void tickReset() {
    6366:	b510      	push	{r4, lr}
	if (ticks == -1)
    6368:	6813      	ldr	r3, [r2, #0]
    636a:	1c59      	adds	r1, r3, #1
    636c:	d027      	beq.n	63be <tickReset+0x5a>
		return;
	ticks--;
    636e:	3b01      	subs	r3, #1
    6370:	6013      	str	r3, [r2, #0]
	if (ticks == 0)
    6372:	2b00      	cmp	r3, #0
    6374:	d123      	bne.n	63be <tickReset+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
    6376:	b672      	cpsid	i
	if (APP_START < (0x200 + 4)) {
    6378:	4b12      	ldr	r3, [pc, #72]	; (63c4 <tickReset+0x60>)
    637a:	4a13      	ldr	r2, [pc, #76]	; (63c8 <tickReset+0x64>)
    637c:	3304      	adds	r3, #4
    637e:	4293      	cmp	r3, r2
    6380:	d808      	bhi.n	6394 <tickReset+0x30>
  __ASM volatile ("dsb 0xF":::"memory");
    6382:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
    6386:	4a11      	ldr	r2, [pc, #68]	; (63cc <tickReset+0x68>)
    6388:	4b11      	ldr	r3, [pc, #68]	; (63d0 <tickReset+0x6c>)
    638a:	60da      	str	r2, [r3, #12]
    638c:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    6390:	46c0      	nop			; (mov r8, r8)
    6392:	e7fd      	b.n	6390 <tickReset+0x2c>
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    6394:	4a0f      	ldr	r2, [pc, #60]	; (63d4 <tickReset+0x70>)
	while (!nvmReady())
    6396:	2101      	movs	r1, #1
    6398:	0010      	movs	r0, r2
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    639a:	7d14      	ldrb	r4, [r2, #20]
	while (!nvmReady())
    639c:	420c      	tst	r4, r1
    639e:	d0fc      	beq.n	639a <tickReset+0x36>
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
    63a0:	2120      	movs	r1, #32
    63a2:	8b14      	ldrh	r4, [r2, #24]
    63a4:	31ff      	adds	r1, #255	; 0xff
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
    63a6:	089b      	lsrs	r3, r3, #2
    63a8:	005b      	lsls	r3, r3, #1
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
    63aa:	4321      	orrs	r1, r4
    63ac:	8311      	strh	r1, [r2, #24]
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
    63ae:	61d3      	str	r3, [r2, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
    63b0:	4b09      	ldr	r3, [pc, #36]	; (63d8 <tickReset+0x74>)
    63b2:	8013      	strh	r3, [r2, #0]
	while (!nvmReady())
    63b4:	2301      	movs	r3, #1
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    63b6:	7d02      	ldrb	r2, [r0, #20]
	while (!nvmReady())
    63b8:	421a      	tst	r2, r3
    63ba:	d0fc      	beq.n	63b6 <tickReset+0x52>
    63bc:	e7e1      	b.n	6382 <tickReset+0x1e>
		banzai();
}
    63be:	bd10      	pop	{r4, pc}
    63c0:	20000004 	.word	0x20000004
    63c4:	00002000 	.word	0x00002000
    63c8:	00000203 	.word	0x00000203
    63cc:	05fa0004 	.word	0x05fa0004
    63d0:	e000ed00 	.word	0xe000ed00
    63d4:	41004000 	.word	0x41004000
    63d8:	ffffa502 	.word	0xffffa502

000063dc <SystemInit>:
    63dc:	221e      	movs	r2, #30
    63de:	b570      	push	{r4, r5, r6, lr}
    63e0:	4846      	ldr	r0, [pc, #280]	; (64fc <SystemInit+0x120>)
    63e2:	4947      	ldr	r1, [pc, #284]	; (6500 <SystemInit+0x124>)
    63e4:	6843      	ldr	r3, [r0, #4]
    63e6:	4393      	bics	r3, r2
    63e8:	3a1c      	subs	r2, #28
    63ea:	4313      	orrs	r3, r2
    63ec:	6043      	str	r3, [r0, #4]
    63ee:	2308      	movs	r3, #8
    63f0:	698c      	ldr	r4, [r1, #24]
    63f2:	4323      	orrs	r3, r4
    63f4:	618b      	str	r3, [r1, #24]
    63f6:	4c43      	ldr	r4, [pc, #268]	; (6504 <SystemInit+0x128>)
    63f8:	4b43      	ldr	r3, [pc, #268]	; (6508 <SystemInit+0x12c>)
    63fa:	829c      	strh	r4, [r3, #20]
    63fc:	8a9c      	ldrh	r4, [r3, #20]
    63fe:	4314      	orrs	r4, r2
    6400:	829c      	strh	r4, [r3, #20]
    6402:	68dc      	ldr	r4, [r3, #12]
    6404:	4214      	tst	r4, r2
    6406:	d0fc      	beq.n	6402 <SystemInit+0x26>
    6408:	2401      	movs	r4, #1
    640a:	4a40      	ldr	r2, [pc, #256]	; (650c <SystemInit+0x130>)
    640c:	7014      	strb	r4, [r2, #0]
    640e:	7815      	ldrb	r5, [r2, #0]
    6410:	4225      	tst	r5, r4
    6412:	d003      	beq.n	641c <SystemInit+0x40>
    6414:	7855      	ldrb	r5, [r2, #1]
    6416:	b26d      	sxtb	r5, r5
    6418:	2d00      	cmp	r5, #0
    641a:	dbf8      	blt.n	640e <SystemInit+0x32>
    641c:	2401      	movs	r4, #1
    641e:	6094      	str	r4, [r2, #8]
    6420:	7854      	ldrb	r4, [r2, #1]
    6422:	b264      	sxtb	r4, r4
    6424:	2c00      	cmp	r4, #0
    6426:	dbfb      	blt.n	6420 <SystemInit+0x44>
    6428:	4c39      	ldr	r4, [pc, #228]	; (6510 <SystemInit+0x134>)
    642a:	6054      	str	r4, [r2, #4]
    642c:	7854      	ldrb	r4, [r2, #1]
    642e:	b264      	sxtb	r4, r4
    6430:	2c00      	cmp	r4, #0
    6432:	dbfb      	blt.n	642c <SystemInit+0x50>
    6434:	2482      	movs	r4, #130	; 0x82
    6436:	01e4      	lsls	r4, r4, #7
    6438:	8054      	strh	r4, [r2, #2]
    643a:	7854      	ldrb	r4, [r2, #1]
    643c:	b264      	sxtb	r4, r4
    643e:	2c00      	cmp	r4, #0
    6440:	dbfb      	blt.n	643a <SystemInit+0x5e>
    6442:	2402      	movs	r4, #2
    6444:	849c      	strh	r4, [r3, #36]	; 0x24
    6446:	340e      	adds	r4, #14
    6448:	68dd      	ldr	r5, [r3, #12]
    644a:	4225      	tst	r5, r4
    644c:	d0fc      	beq.n	6448 <SystemInit+0x6c>
    644e:	4c31      	ldr	r4, [pc, #196]	; (6514 <SystemInit+0x138>)
    6450:	62dc      	str	r4, [r3, #44]	; 0x2c
    6452:	2410      	movs	r4, #16
    6454:	68dd      	ldr	r5, [r3, #12]
    6456:	4225      	tst	r5, r4
    6458:	d0fc      	beq.n	6454 <SystemInit+0x78>
    645a:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
    645c:	4c2e      	ldr	r4, [pc, #184]	; (6518 <SystemInit+0x13c>)
    645e:	432c      	orrs	r4, r5
    6460:	849c      	strh	r4, [r3, #36]	; 0x24
    6462:	2410      	movs	r4, #16
    6464:	68dd      	ldr	r5, [r3, #12]
    6466:	4225      	tst	r5, r4
    6468:	d0fc      	beq.n	6464 <SystemInit+0x88>
    646a:	2402      	movs	r4, #2
    646c:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
    646e:	2680      	movs	r6, #128	; 0x80
    6470:	432c      	orrs	r4, r5
    6472:	849c      	strh	r4, [r3, #36]	; 0x24
    6474:	2440      	movs	r4, #64	; 0x40
    6476:	68dd      	ldr	r5, [r3, #12]
    6478:	4235      	tst	r5, r6
    647a:	d0fc      	beq.n	6476 <SystemInit+0x9a>
    647c:	68dd      	ldr	r5, [r3, #12]
    647e:	4225      	tst	r5, r4
    6480:	d0f9      	beq.n	6476 <SystemInit+0x9a>
    6482:	2410      	movs	r4, #16
    6484:	68dd      	ldr	r5, [r3, #12]
    6486:	4225      	tst	r5, r4
    6488:	d0fc      	beq.n	6484 <SystemInit+0xa8>
    648a:	2400      	movs	r4, #0
    648c:	6094      	str	r4, [r2, #8]
    648e:	7854      	ldrb	r4, [r2, #1]
    6490:	b264      	sxtb	r4, r4
    6492:	2c00      	cmp	r4, #0
    6494:	dbfb      	blt.n	648e <SystemInit+0xb2>
    6496:	4c21      	ldr	r4, [pc, #132]	; (651c <SystemInit+0x140>)
    6498:	6054      	str	r4, [r2, #4]
    649a:	7854      	ldrb	r4, [r2, #1]
    649c:	b264      	sxtb	r4, r4
    649e:	2c00      	cmp	r4, #0
    64a0:	dbfb      	blt.n	649a <SystemInit+0xbe>
    64a2:	6a1c      	ldr	r4, [r3, #32]
    64a4:	4d1e      	ldr	r5, [pc, #120]	; (6520 <SystemInit+0x144>)
    64a6:	402c      	ands	r4, r5
    64a8:	2580      	movs	r5, #128	; 0x80
    64aa:	621c      	str	r4, [r3, #32]
    64ac:	6a1c      	ldr	r4, [r3, #32]
    64ae:	43ac      	bics	r4, r5
    64b0:	621c      	str	r4, [r3, #32]
    64b2:	2303      	movs	r3, #3
    64b4:	6093      	str	r3, [r2, #8]
    64b6:	4b1b      	ldr	r3, [pc, #108]	; (6524 <SystemInit+0x148>)
    64b8:	6053      	str	r3, [r2, #4]
    64ba:	7853      	ldrb	r3, [r2, #1]
    64bc:	b25b      	sxtb	r3, r3
    64be:	2b00      	cmp	r3, #0
    64c0:	dbfb      	blt.n	64ba <SystemInit+0xde>
    64c2:	2300      	movs	r3, #0
    64c4:	24ff      	movs	r4, #255	; 0xff
    64c6:	720b      	strb	r3, [r1, #8]
    64c8:	4a17      	ldr	r2, [pc, #92]	; (6528 <SystemInit+0x14c>)
    64ca:	724b      	strb	r3, [r1, #9]
    64cc:	728b      	strb	r3, [r1, #10]
    64ce:	72cb      	strb	r3, [r1, #11]
    64d0:	4b16      	ldr	r3, [pc, #88]	; (652c <SystemInit+0x150>)
    64d2:	601a      	str	r2, [r3, #0]
    64d4:	4b16      	ldr	r3, [pc, #88]	; (6530 <SystemInit+0x154>)
    64d6:	4a17      	ldr	r2, [pc, #92]	; (6534 <SystemInit+0x158>)
    64d8:	681b      	ldr	r3, [r3, #0]
    64da:	6811      	ldr	r1, [r2, #0]
    64dc:	069a      	lsls	r2, r3, #26
    64de:	015b      	lsls	r3, r3, #5
    64e0:	0ec9      	lsrs	r1, r1, #27
    64e2:	4023      	ands	r3, r4
    64e4:	0f52      	lsrs	r2, r2, #29
    64e6:	0212      	lsls	r2, r2, #8
    64e8:	430b      	orrs	r3, r1
    64ea:	4313      	orrs	r3, r2
    64ec:	4a12      	ldr	r2, [pc, #72]	; (6538 <SystemInit+0x15c>)
    64ee:	8513      	strh	r3, [r2, #40]	; 0x28
    64f0:	2380      	movs	r3, #128	; 0x80
    64f2:	6842      	ldr	r2, [r0, #4]
    64f4:	4313      	orrs	r3, r2
    64f6:	6043      	str	r3, [r0, #4]
    64f8:	bd70      	pop	{r4, r5, r6, pc}
    64fa:	46c0      	nop			; (mov r8, r8)
    64fc:	41004000 	.word	0x41004000
    6500:	40000400 	.word	0x40000400
    6504:	0000060c 	.word	0x0000060c
    6508:	40000800 	.word	0x40000800
    650c:	40000c00 	.word	0x40000c00
    6510:	00010501 	.word	0x00010501
    6514:	7dff05b9 	.word	0x7dff05b9
    6518:	00000a04 	.word	0x00000a04
    651c:	00030700 	.word	0x00030700
    6520:	fffffcff 	.word	0xfffffcff
    6524:	00010603 	.word	0x00010603
    6528:	02dc6c00 	.word	0x02dc6c00
    652c:	20000084 	.word	0x20000084
    6530:	00806024 	.word	0x00806024
    6534:	00806020 	.word	0x00806020
    6538:	42004000 	.word	0x42004000

0000653c <_ZN4UartcvbEv>:
    size_t write(const uint8_t data);
    using Print::write; // pull in write(str) and write(buf, size) from Print

    void IrqHandler();

    operator bool() { return true; }
    653c:	2001      	movs	r0, #1
    653e:	4770      	bx	lr

00006540 <_ZN4Uart5beginEm>:
  uc_pinRTS = _pinRTS;
  uc_pinCTS = _pinCTS;
}

void Uart::begin(unsigned long baudrate)
{
    6540:	b510      	push	{r4, lr}
  begin(baudrate, SERIAL_8N1);
    6542:	6803      	ldr	r3, [r0, #0]
    6544:	4a01      	ldr	r2, [pc, #4]	; (654c <_ZN4Uart5beginEm+0xc>)
    6546:	6a1b      	ldr	r3, [r3, #32]
    6548:	4798      	blx	r3
}
    654a:	bd10      	pop	{r4, pc}
    654c:	00000413 	.word	0x00000413

00006550 <_ZN4Uart4peekEv>:
}

template <int N>
int RingBufferN<N>::peek()
{
  if(_iTail == _iHead)
    6550:	0003      	movs	r3, r0
    6552:	33fc      	adds	r3, #252	; 0xfc
    6554:	69d9      	ldr	r1, [r3, #28]
    6556:	699a      	ldr	r2, [r3, #24]
    6558:	4291      	cmp	r1, r2
    655a:	d003      	beq.n	6564 <_ZN4Uart4peekEv+0x14>
    return -1;

  return _aucBuffer[_iTail];
    655c:	69db      	ldr	r3, [r3, #28]
    655e:	18c0      	adds	r0, r0, r3
    6560:	7d00      	ldrb	r0, [r0, #20]
}

int Uart::peek()
{
  return rxBuffer.peek();
}
    6562:	4770      	bx	lr
    return -1;
    6564:	2001      	movs	r0, #1
    6566:	4240      	negs	r0, r0
  return rxBuffer.peek();
    6568:	e7fb      	b.n	6562 <_ZN4Uart4peekEv+0x12>

0000656a <_ZN4Uart3endEv>:
{
    656a:	b510      	push	{r4, lr}
    656c:	0004      	movs	r4, r0
  sercom->resetUART();
    656e:	6900      	ldr	r0, [r0, #16]
    6570:	f001 fe88 	bl	8284 <_ZN6SERCOM9resetUARTEv>
  _iHead = 0;
    6574:	0022      	movs	r2, r4
    6576:	2300      	movs	r3, #0
    6578:	32fc      	adds	r2, #252	; 0xfc
    657a:	6193      	str	r3, [r2, #24]
  _iTail = 0;
    657c:	61d3      	str	r3, [r2, #28]
  _iHead = 0;
    657e:	2286      	movs	r2, #134	; 0x86
    6580:	0092      	lsls	r2, r2, #2
    6582:	18a4      	adds	r4, r4, r2
    6584:	6063      	str	r3, [r4, #4]
  _iTail = 0;
    6586:	60a3      	str	r3, [r4, #8]
}
    6588:	bd10      	pop	{r4, pc}

0000658a <_ZN4Uart11enableRXPinEv>:
  return 1;
}


void Uart::enableRXPin(void)
{
    658a:	b510      	push	{r4, lr}
	sercom->enableUSARTRX();
    658c:	6900      	ldr	r0, [r0, #16]
    658e:	f001 fec3 	bl	8318 <_ZN6SERCOM13enableUSARTRXEv>
}
    6592:	bd10      	pop	{r4, pc}

00006594 <_ZN4Uart12disableRXPinEv>:

void Uart::disableRXPin(void)
{
    6594:	b510      	push	{r4, lr}
	sercom->disableUSARTRX();
    6596:	6900      	ldr	r0, [r0, #16]
    6598:	f001 fec6 	bl	8328 <_ZN6SERCOM14disableUSARTRXEv>
}
    659c:	bd10      	pop	{r4, pc}

0000659e <_ZN4Uart16extractNbStopBitEt>:


SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
  switch(config & HARDSER_STOP_BIT_MASK)
    659e:	20f0      	movs	r0, #240	; 0xf0
    65a0:	4001      	ands	r1, r0
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
    65a2:	3930      	subs	r1, #48	; 0x30
    65a4:	4248      	negs	r0, r1
    65a6:	4148      	adcs	r0, r1

    case HARDSER_STOP_BIT_2:
      return SERCOM_STOP_BITS_2;
  }
}
    65a8:	4770      	bx	lr

000065aa <_ZN4Uart15extractCharSizeEt>:

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    65aa:	23f0      	movs	r3, #240	; 0xf0
    65ac:	011b      	lsls	r3, r3, #4
    65ae:	4019      	ands	r1, r3
    65b0:	2380      	movs	r3, #128	; 0x80
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
    65b2:	2006      	movs	r0, #6
  switch(config & HARDSER_DATA_MASK)
    65b4:	009b      	lsls	r3, r3, #2
    65b6:	4299      	cmp	r1, r3
    65b8:	d00a      	beq.n	65d0 <_ZN4Uart15extractCharSizeEt+0x26>
    65ba:	3301      	adds	r3, #1
    65bc:	33ff      	adds	r3, #255	; 0xff

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
    65be:	3001      	adds	r0, #1
  switch(config & HARDSER_DATA_MASK)
    65c0:	4299      	cmp	r1, r3
    65c2:	d005      	beq.n	65d0 <_ZN4Uart15extractCharSizeEt+0x26>
    65c4:	2380      	movs	r3, #128	; 0x80
      return UART_CHAR_SIZE_5_BITS;
    65c6:	3802      	subs	r0, #2
  switch(config & HARDSER_DATA_MASK)
    65c8:	005b      	lsls	r3, r3, #1
    65ca:	4299      	cmp	r1, r3
    65cc:	d000      	beq.n	65d0 <_ZN4Uart15extractCharSizeEt+0x26>

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
    65ce:	2000      	movs	r0, #0

  }
}
    65d0:	4770      	bx	lr

000065d2 <_ZN4Uart13extractParityEt>:

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
    65d2:	200f      	movs	r0, #15
    65d4:	4001      	ands	r1, r0
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
    65d6:	2000      	movs	r0, #0
  switch(config & HARDSER_PARITY_MASK)
    65d8:	2901      	cmp	r1, #1
    65da:	d003      	beq.n	65e4 <_ZN4Uart13extractParityEt+0x12>
      return SERCOM_NO_PARITY;
    65dc:	3902      	subs	r1, #2
    65de:	1e48      	subs	r0, r1, #1
    65e0:	4181      	sbcs	r1, r0
    65e2:	1c48      	adds	r0, r1, #1

    case HARDSER_PARITY_ODD:
      return SERCOM_ODD_PARITY;
  }
}
    65e4:	4770      	bx	lr
	...

000065e8 <_ZN4Uart5beginEmt>:
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    65e8:	2389      	movs	r3, #137	; 0x89
{
    65ea:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    65ec:	2618      	movs	r6, #24
{
    65ee:	b085      	sub	sp, #20
    65f0:	9102      	str	r1, [sp, #8]
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    65f2:	009b      	lsls	r3, r3, #2
{
    65f4:	0004      	movs	r4, r0
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    65f6:	5cc0      	ldrb	r0, [r0, r3]
    65f8:	0033      	movs	r3, r6
    65fa:	2108      	movs	r1, #8
    65fc:	4343      	muls	r3, r0
    65fe:	4d32      	ldr	r5, [pc, #200]	; (66c8 <_ZN4Uart5beginEmt+0xe0>)
{
    6600:	0017      	movs	r7, r2
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    6602:	18eb      	adds	r3, r5, r3
    6604:	5659      	ldrsb	r1, [r3, r1]
    6606:	f001 fb6f 	bl	7ce8 <pinPeripheral>
  pinPeripheral(uc_pinTX, g_APinDescription[uc_pinTX].ulPinType);
    660a:	4b30      	ldr	r3, [pc, #192]	; (66cc <_ZN4Uart5beginEmt+0xe4>)
    660c:	2108      	movs	r1, #8
    660e:	5ce0      	ldrb	r0, [r4, r3]
    6610:	0033      	movs	r3, r6
    6612:	4343      	muls	r3, r0
    6614:	18eb      	adds	r3, r5, r3
    6616:	5659      	ldrsb	r1, [r3, r1]
    6618:	f001 fb66 	bl	7ce8 <pinPeripheral>
  if (uc_padTX == UART_TX_RTS_CTS_PAD_0_2_3) { 
    661c:	4b2c      	ldr	r3, [pc, #176]	; (66d0 <_ZN4Uart5beginEmt+0xe8>)
    661e:	5ce2      	ldrb	r2, [r4, r3]
    6620:	9303      	str	r3, [sp, #12]
    6622:	2a02      	cmp	r2, #2
    6624:	d109      	bne.n	663a <_ZN4Uart5beginEmt+0x52>
    if (uc_pinCTS != NO_CTS_PIN) {
    6626:	3311      	adds	r3, #17
    6628:	5ce0      	ldrb	r0, [r4, r3]
    662a:	28ff      	cmp	r0, #255	; 0xff
    662c:	d005      	beq.n	663a <_ZN4Uart5beginEmt+0x52>
      pinPeripheral(uc_pinCTS, g_APinDescription[uc_pinCTS].ulPinType);
    662e:	2108      	movs	r1, #8
    6630:	4346      	muls	r6, r0
    6632:	19ae      	adds	r6, r5, r6
    6634:	5671      	ldrsb	r1, [r6, r1]
    6636:	f001 fb57 	bl	7ce8 <pinPeripheral>
  if (uc_pinRTS != NO_RTS_PIN) {
    663a:	268a      	movs	r6, #138	; 0x8a
    663c:	00b6      	lsls	r6, r6, #2
    663e:	5da0      	ldrb	r0, [r4, r6]
    6640:	28ff      	cmp	r0, #255	; 0xff
    6642:	d019      	beq.n	6678 <_ZN4Uart5beginEmt+0x90>
    pinMode(uc_pinRTS, OUTPUT);
    6644:	2101      	movs	r1, #1
    6646:	f001 fabf 	bl	7bc8 <pinMode>
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    664a:	2218      	movs	r2, #24
    664c:	5da3      	ldrb	r3, [r4, r6]
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    664e:	4921      	ldr	r1, [pc, #132]	; (66d4 <_ZN4Uart5beginEmt+0xec>)
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    6650:	435a      	muls	r2, r3
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    6652:	56ab      	ldrsb	r3, [r5, r2]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    6654:	18ad      	adds	r5, r5, r2
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    6656:	01db      	lsls	r3, r3, #7
    6658:	1858      	adds	r0, r3, r1
    665a:	218b      	movs	r1, #139	; 0x8b
    665c:	0089      	lsls	r1, r1, #2
    665e:	5060      	str	r0, [r4, r1]
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    6660:	491d      	ldr	r1, [pc, #116]	; (66d8 <_ZN4Uart5beginEmt+0xf0>)
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    6662:	2201      	movs	r2, #1
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    6664:	185b      	adds	r3, r3, r1
    6666:	218c      	movs	r1, #140	; 0x8c
    6668:	0089      	lsls	r1, r1, #2
    666a:	5063      	str	r3, [r4, r1]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    666c:	6869      	ldr	r1, [r5, #4]
    666e:	408a      	lsls	r2, r1
    6670:	218d      	movs	r1, #141	; 0x8d
    6672:	0089      	lsls	r1, r1, #2
    6674:	5062      	str	r2, [r4, r1]
    *pul_outclrRTS = ul_pinMaskRTS;
    6676:	601a      	str	r2, [r3, #0]
  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
    6678:	2201      	movs	r2, #1
    667a:	9b02      	ldr	r3, [sp, #8]
    667c:	0011      	movs	r1, r2
    667e:	6920      	ldr	r0, [r4, #16]
    6680:	f001 feee 	bl	8460 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    6684:	0039      	movs	r1, r7
    6686:	0020      	movs	r0, r4
    6688:	f7ff ff8f 	bl	65aa <_ZN4Uart15extractCharSizeEt>
    668c:	0039      	movs	r1, r7
    668e:	0005      	movs	r5, r0
    6690:	0020      	movs	r0, r4
    6692:	f7ff ff9e 	bl	65d2 <_ZN4Uart13extractParityEt>
    6696:	0039      	movs	r1, r7
    6698:	0006      	movs	r6, r0
    669a:	0020      	movs	r0, r4
    669c:	f7ff ff7f 	bl	659e <_ZN4Uart16extractNbStopBitEt>
    66a0:	0033      	movs	r3, r6
    66a2:	9000      	str	r0, [sp, #0]
    66a4:	0029      	movs	r1, r5
    66a6:	6920      	ldr	r0, [r4, #16]
    66a8:	2201      	movs	r2, #1
    66aa:	f001 fdbf 	bl	822c <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
    66ae:	4b0b      	ldr	r3, [pc, #44]	; (66dc <_ZN4Uart5beginEmt+0xf4>)
    66b0:	6920      	ldr	r0, [r4, #16]
    66b2:	5ce2      	ldrb	r2, [r4, r3]
    66b4:	9b03      	ldr	r3, [sp, #12]
    66b6:	5ce1      	ldrb	r1, [r4, r3]
    66b8:	f001 fdd2 	bl	8260 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>
  sercom->enableUART();
    66bc:	6920      	ldr	r0, [r4, #16]
    66be:	f001 fded 	bl	829c <_ZN6SERCOM10enableUARTEv>
}
    66c2:	b005      	add	sp, #20
    66c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    66c6:	46c0      	nop			; (mov r8, r8)
    66c8:	0000be50 	.word	0x0000be50
    66cc:	00000225 	.word	0x00000225
    66d0:	00000227 	.word	0x00000227
    66d4:	41004418 	.word	0x41004418
    66d8:	41004414 	.word	0x41004414
    66dc:	00000226 	.word	0x00000226

000066e0 <_ZN11RingBufferNILi256EEC1Ev>:
    memset( _aucBuffer, 0, N ) ;
    66e0:	2280      	movs	r2, #128	; 0x80
RingBufferN<N>::RingBufferN( void )
    66e2:	b510      	push	{r4, lr}
    66e4:	0004      	movs	r4, r0
    memset( _aucBuffer, 0, N ) ;
    66e6:	0052      	lsls	r2, r2, #1
    66e8:	2100      	movs	r1, #0
    66ea:	f004 fe42 	bl	b372 <memset>
  _iHead = 0;
    66ee:	0023      	movs	r3, r4
    66f0:	2200      	movs	r2, #0
    66f2:	33fc      	adds	r3, #252	; 0xfc
    66f4:	605a      	str	r2, [r3, #4]
}
    66f6:	0020      	movs	r0, r4
  _iTail = 0;
    66f8:	609a      	str	r2, [r3, #8]
}
    66fa:	bd10      	pop	{r4, pc}

000066fc <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    66fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    66fe:	001d      	movs	r5, r3
    6700:	ab08      	add	r3, sp, #32
    6702:	781b      	ldrb	r3, [r3, #0]
    6704:	0004      	movs	r4, r0
    6706:	9300      	str	r3, [sp, #0]
    6708:	ab09      	add	r3, sp, #36	; 0x24
    670a:	781b      	ldrb	r3, [r3, #0]
    670c:	0016      	movs	r6, r2
    670e:	9301      	str	r3, [sp, #4]
    Print() : write_error(0) {}
    6710:	2300      	movs	r3, #0
    6712:	6043      	str	r3, [r0, #4]
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    6714:	23fa      	movs	r3, #250	; 0xfa
    6716:	009b      	lsls	r3, r3, #2
    6718:	6083      	str	r3, [r0, #8]
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    671a:	4b11      	ldr	r3, [pc, #68]	; (6760 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x64>)
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    671c:	000f      	movs	r7, r1
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    671e:	3308      	adds	r3, #8
    6720:	6003      	str	r3, [r0, #0]
    6722:	3014      	adds	r0, #20
    6724:	f7ff ffdc 	bl	66e0 <_ZN11RingBufferNILi256EEC1Ev>
    6728:	0020      	movs	r0, r4
    672a:	301d      	adds	r0, #29
    672c:	30ff      	adds	r0, #255	; 0xff
    672e:	f7ff ffd7 	bl	66e0 <_ZN11RingBufferNILi256EEC1Ev>
  uc_pinRX = _pinRX;
    6732:	2389      	movs	r3, #137	; 0x89
  uc_padRX = _padRX ;
    6734:	466a      	mov	r2, sp
  uc_pinRX = _pinRX;
    6736:	009b      	lsls	r3, r3, #2
  sercom = _s;
    6738:	6127      	str	r7, [r4, #16]
  uc_pinRX = _pinRX;
    673a:	54e6      	strb	r6, [r4, r3]
  uc_pinTX = _pinTX;
    673c:	4b09      	ldr	r3, [pc, #36]	; (6764 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x68>)
  uc_padRX = _padRX ;
    673e:	7812      	ldrb	r2, [r2, #0]
  uc_pinTX = _pinTX;
    6740:	54e5      	strb	r5, [r4, r3]
  uc_padRX = _padRX ;
    6742:	4b09      	ldr	r3, [pc, #36]	; (6768 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x6c>)
}
    6744:	0020      	movs	r0, r4
  uc_padRX = _padRX ;
    6746:	54e2      	strb	r2, [r4, r3]
  uc_padTX = _padTX;
    6748:	466a      	mov	r2, sp
    674a:	4b08      	ldr	r3, [pc, #32]	; (676c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x70>)
    674c:	7912      	ldrb	r2, [r2, #4]
    674e:	54e2      	strb	r2, [r4, r3]
  uc_pinRTS = _pinRTS;
    6750:	228a      	movs	r2, #138	; 0x8a
    6752:	3b29      	subs	r3, #41	; 0x29
    6754:	3bff      	subs	r3, #255	; 0xff
    6756:	0092      	lsls	r2, r2, #2
    6758:	54a3      	strb	r3, [r4, r2]
  uc_pinCTS = _pinCTS;
    675a:	3210      	adds	r2, #16
    675c:	54a3      	strb	r3, [r4, r2]
}
    675e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6760:	0000bdb0 	.word	0x0000bdb0
    6764:	00000225 	.word	0x00000225
    6768:	00000226 	.word	0x00000226
    676c:	00000227 	.word	0x00000227

00006770 <_ZN11RingBufferNILi256EE9availableEv>:
  int delta = _iHead - _iTail;
    6770:	0003      	movs	r3, r0
    6772:	33fc      	adds	r3, #252	; 0xfc
    6774:	6858      	ldr	r0, [r3, #4]
    6776:	689b      	ldr	r3, [r3, #8]
    6778:	1ac0      	subs	r0, r0, r3
  if(delta < 0)
    677a:	d501      	bpl.n	6780 <_ZN11RingBufferNILi256EE9availableEv+0x10>
    return N + delta;
    677c:	3001      	adds	r0, #1
    677e:	30ff      	adds	r0, #255	; 0xff
}
    6780:	4770      	bx	lr

00006782 <_ZN4Uart5flushEv>:
{
    6782:	b510      	push	{r4, lr}
    6784:	0004      	movs	r4, r0
  while(txBuffer.available()); // wait until TX buffer is empty
    6786:	0020      	movs	r0, r4
    6788:	301d      	adds	r0, #29
    678a:	30ff      	adds	r0, #255	; 0xff
    678c:	f7ff fff0 	bl	6770 <_ZN11RingBufferNILi256EE9availableEv>
    6790:	2800      	cmp	r0, #0
    6792:	d1f8      	bne.n	6786 <_ZN4Uart5flushEv+0x4>
  sercom->flushUART();
    6794:	6920      	ldr	r0, [r4, #16]
    6796:	f001 fd8a 	bl	82ae <_ZN6SERCOM9flushUARTEv>
}
    679a:	bd10      	pop	{r4, pc}

0000679c <_ZN4Uart9availableEv>:
{
    679c:	b510      	push	{r4, lr}
  return rxBuffer.available();
    679e:	3014      	adds	r0, #20
    67a0:	f7ff ffe6 	bl	6770 <_ZN11RingBufferNILi256EE9availableEv>
}
    67a4:	bd10      	pop	{r4, pc}

000067a6 <_ZN11RingBufferNILi256EE17availableForStoreEv>:
  if (_iHead >= _iTail)
    67a6:	0003      	movs	r3, r0
    67a8:	33fc      	adds	r3, #252	; 0xfc
    67aa:	6859      	ldr	r1, [r3, #4]
    67ac:	689a      	ldr	r2, [r3, #8]
    67ae:	4291      	cmp	r1, r2
    67b0:	db04      	blt.n	67bc <_ZN11RingBufferNILi256EE17availableForStoreEv+0x16>
    return N - 1 - _iHead + _iTail;
    67b2:	685a      	ldr	r2, [r3, #4]
    67b4:	6898      	ldr	r0, [r3, #8]
    67b6:	1a80      	subs	r0, r0, r2
    67b8:	30ff      	adds	r0, #255	; 0xff
}
    67ba:	4770      	bx	lr
    return _iTail - _iHead - 1;
    67bc:	6898      	ldr	r0, [r3, #8]
    67be:	685b      	ldr	r3, [r3, #4]
    67c0:	1ac0      	subs	r0, r0, r3
    67c2:	3801      	subs	r0, #1
    67c4:	e7f9      	b.n	67ba <_ZN11RingBufferNILi256EE17availableForStoreEv+0x14>

000067c6 <_ZN4Uart17availableForWriteEv>:
{
    67c6:	b510      	push	{r4, lr}
  return txBuffer.availableForStore();
    67c8:	301d      	adds	r0, #29
    67ca:	30ff      	adds	r0, #255	; 0xff
    67cc:	f7ff ffeb 	bl	67a6 <_ZN11RingBufferNILi256EE17availableForStoreEv>
}
    67d0:	bd10      	pop	{r4, pc}

000067d2 <_ZN4Uart10IrqHandlerEv>:
{
    67d2:	b510      	push	{r4, lr}
    67d4:	0004      	movs	r4, r0
  if (sercom->availableDataUART()) {
    67d6:	6900      	ldr	r0, [r0, #16]
    67d8:	f001 fd75 	bl	82c6 <_ZN6SERCOM17availableDataUARTEv>
    67dc:	2800      	cmp	r0, #0
    67de:	d020      	beq.n	6822 <_ZN4Uart10IrqHandlerEv+0x50>
    rxBuffer.store_char(sercom->readDataUART());
    67e0:	6920      	ldr	r0, [r4, #16]
    67e2:	f001 fd85 	bl	82f0 <_ZN6SERCOM12readDataUARTEv>
  int i = nextIndex(_iHead);
    67e6:	0022      	movs	r2, r4
    67e8:	32fc      	adds	r2, #252	; 0xfc
    67ea:	6993      	ldr	r3, [r2, #24]
  if ( i != _iTail )
    67ec:	69d1      	ldr	r1, [r2, #28]
}

template <int N>
int RingBufferN<N>::nextIndex(int index)
{
  return (uint32_t)(index + 1) % N;
    67ee:	3301      	adds	r3, #1
    67f0:	b2db      	uxtb	r3, r3
  if ( i != _iTail )
    67f2:	428b      	cmp	r3, r1
    67f4:	d003      	beq.n	67fe <_ZN4Uart10IrqHandlerEv+0x2c>
    _aucBuffer[_iHead] = c ;
    67f6:	6991      	ldr	r1, [r2, #24]
    67f8:	1861      	adds	r1, r4, r1
    67fa:	7508      	strb	r0, [r1, #20]
    _iHead = i ;
    67fc:	6193      	str	r3, [r2, #24]
    if (uc_pinRTS != NO_RTS_PIN) {
    67fe:	238a      	movs	r3, #138	; 0x8a
    6800:	009b      	lsls	r3, r3, #2
    6802:	5ce3      	ldrb	r3, [r4, r3]
    6804:	2bff      	cmp	r3, #255	; 0xff
    6806:	d00c      	beq.n	6822 <_ZN4Uart10IrqHandlerEv+0x50>
    rxBuffer.store_char(sercom->readDataUART());
    6808:	0020      	movs	r0, r4
    680a:	3014      	adds	r0, #20
      if (rxBuffer.availableForStore() < RTS_RX_THRESHOLD) {
    680c:	f7ff ffcb 	bl	67a6 <_ZN11RingBufferNILi256EE17availableForStoreEv>
    6810:	2809      	cmp	r0, #9
    6812:	dc06      	bgt.n	6822 <_ZN4Uart10IrqHandlerEv+0x50>
        *pul_outsetRTS = ul_pinMaskRTS;
    6814:	238b      	movs	r3, #139	; 0x8b
    6816:	228d      	movs	r2, #141	; 0x8d
    6818:	009b      	lsls	r3, r3, #2
    681a:	0092      	lsls	r2, r2, #2
    681c:	58e3      	ldr	r3, [r4, r3]
    681e:	58a2      	ldr	r2, [r4, r2]
    6820:	601a      	str	r2, [r3, #0]
  if (sercom->isDataRegisterEmptyUART()) {
    6822:	6920      	ldr	r0, [r4, #16]
    6824:	f001 fd5f 	bl	82e6 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    6828:	2800      	cmp	r0, #0
    682a:	d01a      	beq.n	6862 <_ZN4Uart10IrqHandlerEv+0x90>
    if (txBuffer.available()) {
    682c:	0020      	movs	r0, r4
    682e:	301d      	adds	r0, #29
    6830:	30ff      	adds	r0, #255	; 0xff
    6832:	f7ff ff9d 	bl	6770 <_ZN11RingBufferNILi256EE9availableEv>
    6836:	2800      	cmp	r0, #0
    6838:	d022      	beq.n	6880 <_ZN4Uart10IrqHandlerEv+0xae>
  if(_iTail == _iHead)
    683a:	2386      	movs	r3, #134	; 0x86
    683c:	009b      	lsls	r3, r3, #2
    683e:	18e3      	adds	r3, r4, r3
    6840:	6899      	ldr	r1, [r3, #8]
    6842:	685a      	ldr	r2, [r3, #4]
    6844:	4291      	cmp	r1, r2
    6846:	d018      	beq.n	687a <_ZN4Uart10IrqHandlerEv+0xa8>
  uint8_t value = _aucBuffer[_iTail];
    6848:	218e      	movs	r1, #142	; 0x8e
    684a:	689a      	ldr	r2, [r3, #8]
    684c:	0049      	lsls	r1, r1, #1
    684e:	18a2      	adds	r2, r4, r2
    6850:	5c51      	ldrb	r1, [r2, r1]
  _iTail = nextIndex(_iTail);
    6852:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(index + 1) % N;
    6854:	3201      	adds	r2, #1
    6856:	b2d2      	uxtb	r2, r2
  _iTail = nextIndex(_iTail);
    6858:	609a      	str	r2, [r3, #8]
      sercom->writeDataUART(data);
    685a:	b2c9      	uxtb	r1, r1
    685c:	6920      	ldr	r0, [r4, #16]
    685e:	f001 fd4b 	bl	82f8 <_ZN6SERCOM13writeDataUARTEh>
  if (sercom->isUARTError()) {
    6862:	6920      	ldr	r0, [r4, #16]
    6864:	f001 fd34 	bl	82d0 <_ZN6SERCOM11isUARTErrorEv>
    6868:	2800      	cmp	r0, #0
    686a:	d005      	beq.n	6878 <_ZN4Uart10IrqHandlerEv+0xa6>
    sercom->acknowledgeUARTError();
    686c:	6920      	ldr	r0, [r4, #16]
    686e:	f001 fd33 	bl	82d8 <_ZN6SERCOM20acknowledgeUARTErrorEv>
    sercom->clearStatusUART();
    6872:	6920      	ldr	r0, [r4, #16]
    6874:	f001 fd23 	bl	82be <_ZN6SERCOM15clearStatusUARTEv>
}
    6878:	bd10      	pop	{r4, pc}
    return -1;
    687a:	2101      	movs	r1, #1
    687c:	4249      	negs	r1, r1
    687e:	e7ec      	b.n	685a <_ZN4Uart10IrqHandlerEv+0x88>
      sercom->disableDataRegisterEmptyInterruptUART();
    6880:	6920      	ldr	r0, [r4, #16]
    6882:	f001 fd45 	bl	8310 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>
    6886:	e7ec      	b.n	6862 <_ZN4Uart10IrqHandlerEv+0x90>

00006888 <_ZN4Uart5writeEh>:
{
    6888:	b570      	push	{r4, r5, r6, lr}
    688a:	0004      	movs	r4, r0
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    688c:	6900      	ldr	r0, [r0, #16]
{
    688e:	000d      	movs	r5, r1
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    6890:	f001 fd29 	bl	82e6 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    6894:	2800      	cmp	r0, #0
    6896:	d124      	bne.n	68e2 <_ZN4Uart5writeEh+0x5a>
  return (uint32_t)(index + 1) % N;
    6898:	26ff      	movs	r6, #255	; 0xff
}

template <int N>
bool RingBufferN<N>::isFull()
{
  return (nextIndex(_iHead) == _iTail);
    689a:	2386      	movs	r3, #134	; 0x86
    689c:	009b      	lsls	r3, r3, #2
    689e:	18e3      	adds	r3, r4, r3
    68a0:	685a      	ldr	r2, [r3, #4]
    68a2:	6899      	ldr	r1, [r3, #8]
  return (uint32_t)(index + 1) % N;
    68a4:	3201      	adds	r2, #1
    68a6:	4032      	ands	r2, r6
    while(txBuffer.isFull()) {
    68a8:	428a      	cmp	r2, r1
    68aa:	d12f      	bne.n	690c <_ZN4Uart5writeEh+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    68ac:	f3ef 8310 	mrs	r3, PRIMASK
      if (interruptsEnabled) {
    68b0:	07db      	lsls	r3, r3, #31
    68b2:	d40d      	bmi.n	68d0 <_ZN4Uart5writeEh+0x48>
        uint32_t exceptionNumber = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk);
    68b4:	4b1e      	ldr	r3, [pc, #120]	; (6930 <_ZN4Uart5writeEh+0xa8>)
    68b6:	685b      	ldr	r3, [r3, #4]
    68b8:	05db      	lsls	r3, r3, #23
    68ba:	0ddb      	lsrs	r3, r3, #23
        if (exceptionNumber == 0 ||
    68bc:	d0ed      	beq.n	689a <_ZN4Uart5writeEh+0x12>
              NVIC_GetPriority((IRQn_Type)(exceptionNumber - 16)) > SERCOM_NVIC_PRIORITY) {
    68be:	3b10      	subs	r3, #16
    68c0:	b25b      	sxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
    68c2:	2b00      	cmp	r3, #0
    68c4:	db19      	blt.n	68fa <_ZN4Uart5writeEh+0x72>
    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    68c6:	089b      	lsrs	r3, r3, #2
    68c8:	33c0      	adds	r3, #192	; 0xc0
    68ca:	4a1a      	ldr	r2, [pc, #104]	; (6934 <_ZN4Uart5writeEh+0xac>)
    68cc:	009b      	lsls	r3, r3, #2
    68ce:	589b      	ldr	r3, [r3, r2]
      if (sercom->isDataRegisterEmptyUART()) {
    68d0:	6920      	ldr	r0, [r4, #16]
    68d2:	f001 fd08 	bl	82e6 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    68d6:	2800      	cmp	r0, #0
    68d8:	d0df      	beq.n	689a <_ZN4Uart5writeEh+0x12>
        IrqHandler();
    68da:	0020      	movs	r0, r4
    68dc:	f7ff ff79 	bl	67d2 <_ZN4Uart10IrqHandlerEv>
    68e0:	e7db      	b.n	689a <_ZN4Uart5writeEh+0x12>
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    68e2:	0020      	movs	r0, r4
    68e4:	301d      	adds	r0, #29
    68e6:	30ff      	adds	r0, #255	; 0xff
    68e8:	f7ff ff42 	bl	6770 <_ZN11RingBufferNILi256EE9availableEv>
    68ec:	2800      	cmp	r0, #0
    68ee:	d1d3      	bne.n	6898 <_ZN4Uart5writeEh+0x10>
    sercom->writeDataUART(data);
    68f0:	0029      	movs	r1, r5
    68f2:	6920      	ldr	r0, [r4, #16]
    68f4:	f001 fd00 	bl	82f8 <_ZN6SERCOM13writeDataUARTEh>
  return 1;
    68f8:	e017      	b.n	692a <_ZN4Uart5writeEh+0xa2>
    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    68fa:	220f      	movs	r2, #15
    68fc:	4013      	ands	r3, r2
    68fe:	3b08      	subs	r3, #8
    6900:	089b      	lsrs	r3, r3, #2
    6902:	4a0d      	ldr	r2, [pc, #52]	; (6938 <_ZN4Uart5writeEh+0xb0>)
    6904:	009b      	lsls	r3, r3, #2
    6906:	189b      	adds	r3, r3, r2
    6908:	681b      	ldr	r3, [r3, #0]
    690a:	e7e1      	b.n	68d0 <_ZN4Uart5writeEh+0x48>
  int i = nextIndex(_iHead);
    690c:	685a      	ldr	r2, [r3, #4]
  return (uint32_t)(index + 1) % N;
    690e:	3201      	adds	r2, #1
    6910:	4016      	ands	r6, r2
  if ( i != _iTail )
    6912:	689a      	ldr	r2, [r3, #8]
    6914:	4296      	cmp	r6, r2
    6916:	d005      	beq.n	6924 <_ZN4Uart5writeEh+0x9c>
    _aucBuffer[_iHead] = c ;
    6918:	218e      	movs	r1, #142	; 0x8e
    691a:	685a      	ldr	r2, [r3, #4]
    691c:	0049      	lsls	r1, r1, #1
    691e:	18a2      	adds	r2, r4, r2
    6920:	5455      	strb	r5, [r2, r1]
    _iHead = i ;
    6922:	605e      	str	r6, [r3, #4]
    sercom->enableDataRegisterEmptyInterruptUART();
    6924:	6920      	ldr	r0, [r4, #16]
    6926:	f001 fcef 	bl	8308 <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>
}
    692a:	2001      	movs	r0, #1
    692c:	bd70      	pop	{r4, r5, r6, pc}
    692e:	46c0      	nop			; (mov r8, r8)
    6930:	e000ed00 	.word	0xe000ed00
    6934:	e000e100 	.word	0xe000e100
    6938:	e000ed1c 	.word	0xe000ed1c

0000693c <_ZN4Uart4readEv>:
  if(_iTail == _iHead)
    693c:	0003      	movs	r3, r0
    693e:	33fc      	adds	r3, #252	; 0xfc
    6940:	69d9      	ldr	r1, [r3, #28]
    6942:	699a      	ldr	r2, [r3, #24]
{
    6944:	b570      	push	{r4, r5, r6, lr}
    6946:	0004      	movs	r4, r0
    6948:	4291      	cmp	r1, r2
    694a:	d01a      	beq.n	6982 <_ZN4Uart4readEv+0x46>
  uint8_t value = _aucBuffer[_iTail];
    694c:	69da      	ldr	r2, [r3, #28]
    694e:	1882      	adds	r2, r0, r2
    6950:	7d15      	ldrb	r5, [r2, #20]
  _iTail = nextIndex(_iTail);
    6952:	69da      	ldr	r2, [r3, #28]
  return (uint32_t)(index + 1) % N;
    6954:	3201      	adds	r2, #1
    6956:	b2d2      	uxtb	r2, r2
  _iTail = nextIndex(_iTail);
    6958:	61da      	str	r2, [r3, #28]
  if (uc_pinRTS != NO_RTS_PIN) {
    695a:	238a      	movs	r3, #138	; 0x8a
    695c:	009b      	lsls	r3, r3, #2
    695e:	5ce3      	ldrb	r3, [r4, r3]
    6960:	2bff      	cmp	r3, #255	; 0xff
    6962:	d00c      	beq.n	697e <_ZN4Uart4readEv+0x42>
  int c = rxBuffer.read_char();
    6964:	0020      	movs	r0, r4
    6966:	3014      	adds	r0, #20
    if (rxBuffer.availableForStore() > RTS_RX_THRESHOLD) {
    6968:	f7ff ff1d 	bl	67a6 <_ZN11RingBufferNILi256EE17availableForStoreEv>
    696c:	280a      	cmp	r0, #10
    696e:	dd06      	ble.n	697e <_ZN4Uart4readEv+0x42>
      *pul_outclrRTS = ul_pinMaskRTS;
    6970:	238c      	movs	r3, #140	; 0x8c
    6972:	228d      	movs	r2, #141	; 0x8d
    6974:	009b      	lsls	r3, r3, #2
    6976:	0092      	lsls	r2, r2, #2
    6978:	58e3      	ldr	r3, [r4, r3]
    697a:	58a2      	ldr	r2, [r4, r2]
    697c:	601a      	str	r2, [r3, #0]
}
    697e:	0028      	movs	r0, r5
    6980:	bd70      	pop	{r4, r5, r6, pc}
    return -1;
    6982:	2501      	movs	r5, #1
    6984:	426d      	negs	r5, r5
    6986:	e7e8      	b.n	695a <_ZN4Uart4readEv+0x1e>

00006988 <_ZN7Serial_17availableForWriteEv>:
int Serial_::availableForWrite(void)
{
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
}
    6988:	203f      	movs	r0, #63	; 0x3f
    698a:	4770      	bx	lr

0000698c <_ZN7Serial_5writeEh>:
		setWriteError();
		return 0;
	}
}

size_t Serial_::write(uint8_t c) {
    698c:	b513      	push	{r0, r1, r4, lr}
    698e:	466b      	mov	r3, sp
	return write(&c, 1);
    6990:	6802      	ldr	r2, [r0, #0]
size_t Serial_::write(uint8_t c) {
    6992:	71d9      	strb	r1, [r3, #7]
    6994:	3307      	adds	r3, #7
	return write(&c, 1);
    6996:	6854      	ldr	r4, [r2, #4]
    6998:	0019      	movs	r1, r3
    699a:	2201      	movs	r2, #1
    699c:	47a0      	blx	r4
}
    699e:	bd16      	pop	{r1, r2, r4, pc}

000069a0 <_ZN7Serial_9availableEv>:
{
    69a0:	b510      	push	{r4, lr}
	return usb.available(CDC_ENDPOINT_OUT);
    69a2:	2102      	movs	r1, #2
    69a4:	6900      	ldr	r0, [r0, #16]
    69a6:	f000 fc29 	bl	71fc <_ZN14USBDeviceClass9availableEm>
}
    69aa:	bd10      	pop	{r4, pc}

000069ac <_ZN7Serial_5flushEv>:
{
    69ac:	b510      	push	{r4, lr}
	usb.flush(CDC_ENDPOINT_IN);
    69ae:	2103      	movs	r1, #3
    69b0:	6900      	ldr	r0, [r0, #16]
    69b2:	f000 fc39 	bl	7228 <_ZN14USBDeviceClass5flushEm>
}
    69b6:	bd10      	pop	{r4, pc}

000069b8 <_ZN7Serial_5writeEPKhj>:
{
    69b8:	b510      	push	{r4, lr}
    69ba:	0013      	movs	r3, r2
    69bc:	0004      	movs	r4, r0
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
    69be:	000a      	movs	r2, r1
    69c0:	6900      	ldr	r0, [r0, #16]
    69c2:	2103      	movs	r1, #3
    69c4:	f000 fd1c 	bl	7400 <_ZN14USBDeviceClass4sendEmPKvm>
	if (r > 0) {
    69c8:	2800      	cmp	r0, #0
    69ca:	d101      	bne.n	69d0 <_ZN7Serial_5writeEPKhj+0x18>
    void setWriteError(int err = 1) { write_error = err; }
    69cc:	2301      	movs	r3, #1
    69ce:	6063      	str	r3, [r4, #4]
}
    69d0:	bd10      	pop	{r4, pc}
	...

000069d4 <_ZN7Serial_4peekEv>:
{
    69d4:	b510      	push	{r4, lr}
	if (_serialPeek != -1)
    69d6:	4c05      	ldr	r4, [pc, #20]	; (69ec <_ZN7Serial_4peekEv+0x18>)
    69d8:	6823      	ldr	r3, [r4, #0]
    69da:	1c5a      	adds	r2, r3, #1
    69dc:	d104      	bne.n	69e8 <_ZN7Serial_4peekEv+0x14>
	_serialPeek = read();
    69de:	6803      	ldr	r3, [r0, #0]
    69e0:	695b      	ldr	r3, [r3, #20]
    69e2:	4798      	blx	r3
    69e4:	0003      	movs	r3, r0
    69e6:	6020      	str	r0, [r4, #0]
}
    69e8:	0018      	movs	r0, r3
    69ea:	bd10      	pop	{r4, pc}
    69ec:	20000058 	.word	0x20000058

000069f0 <_ZN7Serial_4readEv>:
	if (_serialPeek != -1) {
    69f0:	4b07      	ldr	r3, [pc, #28]	; (6a10 <_ZN7Serial_4readEv+0x20>)
{
    69f2:	0002      	movs	r2, r0
	if (_serialPeek != -1) {
    69f4:	6818      	ldr	r0, [r3, #0]
{
    69f6:	b510      	push	{r4, lr}
	if (_serialPeek != -1) {
    69f8:	1c41      	adds	r1, r0, #1
    69fa:	d003      	beq.n	6a04 <_ZN7Serial_4readEv+0x14>
		_serialPeek = -1;
    69fc:	2201      	movs	r2, #1
    69fe:	4252      	negs	r2, r2
    6a00:	601a      	str	r2, [r3, #0]
}
    6a02:	bd10      	pop	{r4, pc}
	return usb.recv(CDC_ENDPOINT_OUT);
    6a04:	2102      	movs	r1, #2
    6a06:	6910      	ldr	r0, [r2, #16]
    6a08:	f000 fcec 	bl	73e4 <_ZN14USBDeviceClass4recvEm>
    6a0c:	e7f9      	b.n	6a02 <_ZN7Serial_4readEv+0x12>
    6a0e:	46c0      	nop			; (mov r8, r8)
    6a10:	20000058 	.word	0x20000058

00006a14 <_Z16CDC_GetInterfacePh>:
{
    6a14:	b510      	push	{r4, lr}
	interfaceNum[0] += 2;	// uses 2
    6a16:	7803      	ldrb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    6a18:	2242      	movs	r2, #66	; 0x42
	interfaceNum[0] += 2;	// uses 2
    6a1a:	3302      	adds	r3, #2
    6a1c:	7003      	strb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    6a1e:	4902      	ldr	r1, [pc, #8]	; (6a28 <_Z16CDC_GetInterfacePh+0x14>)
    6a20:	4802      	ldr	r0, [pc, #8]	; (6a2c <_Z16CDC_GetInterfacePh+0x18>)
    6a22:	f000 fd8d 	bl	7540 <_ZN14USBDeviceClass11sendControlEPKvm>
}
    6a26:	bd10      	pop	{r4, pc}
    6a28:	20000014 	.word	0x20000014
    6a2c:	200002cc 	.word	0x200002cc

00006a30 <_Z9CDC_SetupR8USBSetup>:
{
    6a30:	b510      	push	{r4, lr}
	uint8_t requestType = setup.bmRequestType;
    6a32:	7801      	ldrb	r1, [r0, #0]
{
    6a34:	0003      	movs	r3, r0
	uint8_t r = setup.bRequest;
    6a36:	7842      	ldrb	r2, [r0, #1]
	return false;
    6a38:	2000      	movs	r0, #0
	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
    6a3a:	29a1      	cmp	r1, #161	; 0xa1
    6a3c:	d108      	bne.n	6a50 <_Z9CDC_SetupR8USBSetup+0x20>
		if (r == CDC_GET_LINE_CODING)
    6a3e:	2a21      	cmp	r2, #33	; 0x21
    6a40:	d105      	bne.n	6a4e <_Z9CDC_SetupR8USBSetup+0x1e>
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
    6a42:	3a1a      	subs	r2, #26
    6a44:	4916      	ldr	r1, [pc, #88]	; (6aa0 <_Z9CDC_SetupR8USBSetup+0x70>)
    6a46:	4817      	ldr	r0, [pc, #92]	; (6aa4 <_Z9CDC_SetupR8USBSetup+0x74>)
    6a48:	f000 fd7a 	bl	7540 <_ZN14USBDeviceClass11sendControlEPKvm>
			return true;
    6a4c:	2001      	movs	r0, #1
}
    6a4e:	bd10      	pop	{r4, pc}
	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
    6a50:	2921      	cmp	r1, #33	; 0x21
    6a52:	d1fc      	bne.n	6a4e <_Z9CDC_SetupR8USBSetup+0x1e>
		if (r == CDC_SET_LINE_CODING)
    6a54:	2a20      	cmp	r2, #32
    6a56:	d111      	bne.n	6a7c <_Z9CDC_SetupR8USBSetup+0x4c>
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
    6a58:	3a19      	subs	r2, #25
    6a5a:	4911      	ldr	r1, [pc, #68]	; (6aa0 <_Z9CDC_SetupR8USBSetup+0x70>)
    6a5c:	4811      	ldr	r0, [pc, #68]	; (6aa4 <_Z9CDC_SetupR8USBSetup+0x74>)
    6a5e:	f000 fc27 	bl	72b0 <_ZN14USBDeviceClass11recvControlEPvm>
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & 0x01) == 0)
    6a62:	2296      	movs	r2, #150	; 0x96
    6a64:	4b0e      	ldr	r3, [pc, #56]	; (6aa0 <_Z9CDC_SetupR8USBSetup+0x70>)
    6a66:	00d2      	lsls	r2, r2, #3
    6a68:	6819      	ldr	r1, [r3, #0]
    6a6a:	4291      	cmp	r1, r2
    6a6c:	d103      	bne.n	6a76 <_Z9CDC_SetupR8USBSetup+0x46>
    6a6e:	2401      	movs	r4, #1
    6a70:	79d8      	ldrb	r0, [r3, #7]
    6a72:	4004      	ands	r4, r0
    6a74:	d00e      	beq.n	6a94 <_Z9CDC_SetupR8USBSetup+0x64>
				cancelReset();
    6a76:	f7ff fc6d 	bl	6354 <cancelReset>
    6a7a:	e00e      	b.n	6a9a <_Z9CDC_SetupR8USBSetup+0x6a>
		if (r == CDC_SET_CONTROL_LINE_STATE)
    6a7c:	2a22      	cmp	r2, #34	; 0x22
    6a7e:	d103      	bne.n	6a88 <_Z9CDC_SetupR8USBSetup+0x58>
			_usbLineInfo.lineState = setup.wValueL;
    6a80:	789a      	ldrb	r2, [r3, #2]
    6a82:	4b07      	ldr	r3, [pc, #28]	; (6aa0 <_Z9CDC_SetupR8USBSetup+0x70>)
    6a84:	71da      	strb	r2, [r3, #7]
    6a86:	e7ec      	b.n	6a62 <_Z9CDC_SetupR8USBSetup+0x32>
		if (CDC_SEND_BREAK == r)
    6a88:	2a23      	cmp	r2, #35	; 0x23
    6a8a:	d1e0      	bne.n	6a4e <_Z9CDC_SetupR8USBSetup+0x1e>
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
    6a8c:	885a      	ldrh	r2, [r3, #2]
    6a8e:	4b06      	ldr	r3, [pc, #24]	; (6aa8 <_Z9CDC_SetupR8USBSetup+0x78>)
    6a90:	601a      	str	r2, [r3, #0]
			return false;
    6a92:	e7dc      	b.n	6a4e <_Z9CDC_SetupR8USBSetup+0x1e>
				initiateReset(250);
    6a94:	20fa      	movs	r0, #250	; 0xfa
    6a96:	f7ff fc57 	bl	6348 <initiateReset>
			return false;
    6a9a:	2000      	movs	r0, #0
    6a9c:	e7d7      	b.n	6a4e <_Z9CDC_SetupR8USBSetup+0x1e>
    6a9e:	46c0      	nop			; (mov r8, r8)
    6aa0:	2000000c 	.word	0x2000000c
    6aa4:	200002cc 	.word	0x200002cc
    6aa8:	20000008 	.word	0x20000008

00006aac <_ZN7Serial_5beginEm>:
}
    6aac:	4770      	bx	lr
	...

00006ab0 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev>:
    6ab0:	22fa      	movs	r2, #250	; 0xfa
    Print() : write_error(0) {}
    6ab2:	2100      	movs	r1, #0
    6ab4:	4b05      	ldr	r3, [pc, #20]	; (6acc <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x1c>)
    6ab6:	0092      	lsls	r2, r2, #2
    6ab8:	609a      	str	r2, [r3, #8]
//	Serial over CDC (Serial1 is the physical port)

class Serial_ : public Stream
{
public:
	Serial_(USBDeviceClass &_usb) : usb(_usb), stalled(false) { }
    6aba:	4a05      	ldr	r2, [pc, #20]	; (6ad0 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x20>)
    6abc:	6059      	str	r1, [r3, #4]
    6abe:	3208      	adds	r2, #8
    6ac0:	601a      	str	r2, [r3, #0]
    6ac2:	4a04      	ldr	r2, [pc, #16]	; (6ad4 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x24>)
    6ac4:	7619      	strb	r1, [r3, #24]
    6ac6:	611a      	str	r2, [r3, #16]

bool Serial_::rts() {
	return _usbLineInfo.lineState & 0x2;
}

Serial_ SerialUSB(USBDevice);
    6ac8:	4770      	bx	lr
    6aca:	46c0      	nop			; (mov r8, r8)
    6acc:	200002b0 	.word	0x200002b0
    6ad0:	0000bde4 	.word	0x0000bde4
    6ad4:	200002cc 	.word	0x200002cc

00006ad8 <_ZL5utox8mPc>:
	packMessages(false);

	return true;
}

static void utox8(uint32_t val, char* s) {
    6ad8:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < 8; i++) {
		int d = val & 0XF;
    6ada:	250f      	movs	r5, #15
    6adc:	1dcb      	adds	r3, r1, #7
    6ade:	3901      	subs	r1, #1
    6ae0:	0002      	movs	r2, r0
    6ae2:	402a      	ands	r2, r5
		val = (val >> 4);

		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    6ae4:	0014      	movs	r4, r2
		val = (val >> 4);
    6ae6:	0900      	lsrs	r0, r0, #4
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    6ae8:	3430      	adds	r4, #48	; 0x30
    6aea:	2a09      	cmp	r2, #9
    6aec:	dd01      	ble.n	6af2 <_ZL5utox8mPc+0x1a>
    6aee:	3237      	adds	r2, #55	; 0x37
    6af0:	0014      	movs	r4, r2
    6af2:	701c      	strb	r4, [r3, #0]
    6af4:	3b01      	subs	r3, #1
	for (int i = 0; i < 8; i++) {
    6af6:	428b      	cmp	r3, r1
    6af8:	d1f2      	bne.n	6ae0 <_ZL5utox8mPc+0x8>
	}
}
    6afa:	bd30      	pop	{r4, r5, pc}

00006afc <_ZN14USBDeviceClass6initEPEmm.part.5>:
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
		initEP(i, EndPoints[i]);
	}
}

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
    6afc:	b570      	push	{r4, r5, r6, lr}
	{
		if (epHandlers[ep] == NULL) {
			epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
		}
	}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0)))
    6afe:	2982      	cmp	r1, #130	; 0x82
    6b00:	d11f      	bne.n	6b42 <_ZN14USBDeviceClass6initEPEmm.part.5+0x46>
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    6b02:	b2c3      	uxtb	r3, r0
    6b04:	4d2c      	ldr	r5, [pc, #176]	; (6bb8 <_ZN14USBDeviceClass6initEPEmm.part.5+0xbc>)
    6b06:	015a      	lsls	r2, r3, #5
    6b08:	18aa      	adds	r2, r5, r2
    6b0a:	6991      	ldr	r1, [r2, #24]
    6b0c:	4c2b      	ldr	r4, [pc, #172]	; (6bbc <_ZN14USBDeviceClass6initEPEmm.part.5+0xc0>)
	{
		usbd.epBank1SetSize(ep, 64);
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    6b0e:	0180      	lsls	r0, r0, #6
    6b10:	400c      	ands	r4, r1
    6b12:	21c0      	movs	r1, #192	; 0xc0
    6b14:	0589      	lsls	r1, r1, #22
    6b16:	4321      	orrs	r1, r4
    6b18:	6191      	str	r1, [r2, #24]
    6b1a:	4929      	ldr	r1, [pc, #164]	; (6bc0 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc4>)
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    6b1c:	3308      	adds	r3, #8
    6b1e:	1808      	adds	r0, r1, r0
    6b20:	2180      	movs	r1, #128	; 0x80
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    6b22:	6150      	str	r0, [r2, #20]
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    6b24:	682a      	ldr	r2, [r5, #0]
    6b26:	015b      	lsls	r3, r3, #5
    6b28:	18d0      	adds	r0, r2, r3
    6b2a:	7904      	ldrb	r4, [r0, #4]
    6b2c:	4249      	negs	r1, r1
    6b2e:	4321      	orrs	r1, r4
    6b30:	7101      	strb	r1, [r0, #4]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    6b32:	2070      	movs	r0, #112	; 0x70
    6b34:	5c99      	ldrb	r1, [r3, r2]
    6b36:	4381      	bics	r1, r0
    6b38:	0008      	movs	r0, r1
    6b3a:	2130      	movs	r1, #48	; 0x30
    6b3c:	4301      	orrs	r1, r0
    6b3e:	5499      	strb	r1, [r3, r2]
		usbd.epBank0SetByteCount(ep, 0);

		// NAK on endpoint OUT, the bank is full.
		usbd.epBank0SetReady(ep);
	}
}
    6b40:	bd70      	pop	{r4, r5, r6, pc}
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
    6b42:	2900      	cmp	r1, #0
    6b44:	d1fc      	bne.n	6b40 <_ZN14USBDeviceClass6initEPEmm.part.5+0x44>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    6b46:	24c0      	movs	r4, #192	; 0xc0
    6b48:	b2c1      	uxtb	r1, r0
    6b4a:	4e1b      	ldr	r6, [pc, #108]	; (6bb8 <_ZN14USBDeviceClass6initEPEmm.part.5+0xbc>)
    6b4c:	014b      	lsls	r3, r1, #5
    6b4e:	18f3      	adds	r3, r6, r3
    6b50:	689a      	ldr	r2, [r3, #8]
    6b52:	4d1a      	ldr	r5, [pc, #104]	; (6bbc <_ZN14USBDeviceClass6initEPEmm.part.5+0xc0>)
    6b54:	05a4      	lsls	r4, r4, #22
    6b56:	402a      	ands	r2, r5
    6b58:	4322      	orrs	r2, r4
    6b5a:	609a      	str	r2, [r3, #8]
		usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    6b5c:	4a19      	ldr	r2, [pc, #100]	; (6bc4 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc8>)
    6b5e:	0180      	lsls	r0, r0, #6
    6b60:	1810      	adds	r0, r2, r0
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    6b62:	000a      	movs	r2, r1
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    6b64:	6058      	str	r0, [r3, #4]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    6b66:	6830      	ldr	r0, [r6, #0]
    6b68:	2607      	movs	r6, #7
    6b6a:	3208      	adds	r2, #8
    6b6c:	0152      	lsls	r2, r2, #5
    6b6e:	5c11      	ldrb	r1, [r2, r0]
    6b70:	43b1      	bics	r1, r6
    6b72:	000e      	movs	r6, r1
    6b74:	2101      	movs	r1, #1
    6b76:	4331      	orrs	r1, r6
    6b78:	5411      	strb	r1, [r2, r0]
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    6b7a:	6999      	ldr	r1, [r3, #24]
    6b7c:	400d      	ands	r5, r1
    6b7e:	432c      	orrs	r4, r5
    6b80:	619c      	str	r4, [r3, #24]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    6b82:	2470      	movs	r4, #112	; 0x70
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    6b84:	490e      	ldr	r1, [pc, #56]	; (6bc0 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc4>)
    6b86:	6159      	str	r1, [r3, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    6b88:	5c11      	ldrb	r1, [r2, r0]
    6b8a:	43a1      	bics	r1, r4
    6b8c:	000c      	movs	r4, r1
    6b8e:	2110      	movs	r1, #16
    6b90:	4321      	orrs	r1, r4
    6b92:	5411      	strb	r1, [r2, r0]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    6b94:	6899      	ldr	r1, [r3, #8]
    6b96:	4c0c      	ldr	r4, [pc, #48]	; (6bc8 <_ZN14USBDeviceClass6initEPEmm.part.5+0xcc>)
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
    6b98:	1882      	adds	r2, r0, r2
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    6b9a:	400c      	ands	r4, r1
    6b9c:	2180      	movs	r1, #128	; 0x80
    6b9e:	0349      	lsls	r1, r1, #13
    6ba0:	4321      	orrs	r1, r4
    6ba2:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    6ba4:	6899      	ldr	r1, [r3, #8]
    6ba6:	0b89      	lsrs	r1, r1, #14
    6ba8:	0389      	lsls	r1, r1, #14
    6baa:	6099      	str	r1, [r3, #8]
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
    6bac:	2340      	movs	r3, #64	; 0x40
    6bae:	7951      	ldrb	r1, [r2, #5]
    6bb0:	430b      	orrs	r3, r1
    6bb2:	7153      	strb	r3, [r2, #5]
    6bb4:	e7c4      	b.n	6b40 <_ZN14USBDeviceClass6initEPEmm.part.5+0x44>
    6bb6:	46c0      	nop			; (mov r8, r8)
    6bb8:	20000784 	.word	0x20000784
    6bbc:	8fffffff 	.word	0x8fffffff
    6bc0:	200002f8 	.word	0x200002f8
    6bc4:	200004b8 	.word	0x200004b8
    6bc8:	f0003fff 	.word	0xf0003fff

00006bcc <_ZN20USBDevice_SAMD21G18x5resetEv>:

	// Endpoints descriptors table
	__attribute__((__aligned__(4)))	UsbDeviceDescriptor EP[USB_EPT_NUM];
};

void USBDevice_SAMD21G18x::reset() {
    6bcc:	b570      	push	{r4, r5, r6, lr}
	usb.CTRLA.bit.SWRST = 1;
    6bce:	0004      	movs	r4, r0
    6bd0:	2301      	movs	r3, #1
    6bd2:	cc20      	ldmia	r4!, {r5}
	memset(EP, 0, sizeof(EP));
    6bd4:	2100      	movs	r1, #0
	usb.CTRLA.bit.SWRST = 1;
    6bd6:	782a      	ldrb	r2, [r5, #0]
	memset(EP, 0, sizeof(EP));
    6bd8:	0020      	movs	r0, r4
	usb.CTRLA.bit.SWRST = 1;
    6bda:	4313      	orrs	r3, r2
	memset(EP, 0, sizeof(EP));
    6bdc:	2280      	movs	r2, #128	; 0x80
	usb.CTRLA.bit.SWRST = 1;
    6bde:	702b      	strb	r3, [r5, #0]
	memset(EP, 0, sizeof(EP));
    6be0:	0052      	lsls	r2, r2, #1
    6be2:	f004 fbc6 	bl	b372 <memset>
	while (usb.SYNCBUSY.bit.SWRST) {}
    6be6:	78ab      	ldrb	r3, [r5, #2]
    6be8:	07db      	lsls	r3, r3, #31
    6bea:	d4fc      	bmi.n	6be6 <_ZN20USBDevice_SAMD21G18x5resetEv+0x1a>
	usb.DESCADD.reg = (uint32_t)(&EP);
    6bec:	626c      	str	r4, [r5, #36]	; 0x24
}
    6bee:	bd70      	pop	{r4, r5, r6, pc}

00006bf0 <_ZN20USBDevice_SAMD21G18x9calibrateEv>:
	// Load Pad Calibration data from non-volatile memory
	uint32_t *pad_transn_p = (uint32_t *) USB_FUSES_TRANSN_ADDR;
	uint32_t *pad_transp_p = (uint32_t *) USB_FUSES_TRANSP_ADDR;
	uint32_t *pad_trim_p   = (uint32_t *) USB_FUSES_TRIM_ADDR;

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    6bf0:	221f      	movs	r2, #31
    6bf2:	4b14      	ldr	r3, [pc, #80]	; (6c44 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x54>)
void USBDevice_SAMD21G18x::calibrate() {
    6bf4:	b570      	push	{r4, r5, r6, lr}
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    6bf6:	681b      	ldr	r3, [r3, #0]
    6bf8:	0b59      	lsrs	r1, r3, #13
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    6bfa:	0c9c      	lsrs	r4, r3, #18
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    6bfc:	019b      	lsls	r3, r3, #6
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    6bfe:	4011      	ands	r1, r2
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    6c00:	0f5b      	lsrs	r3, r3, #29
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    6c02:	4022      	ands	r2, r4

	if (pad_transn == 0x1F)  // maximum value (31)
    6c04:	291f      	cmp	r1, #31
    6c06:	d100      	bne.n	6c0a <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x1a>
		pad_transn = 5;
    6c08:	391a      	subs	r1, #26
	if (pad_transp == 0x1F)  // maximum value (31)
    6c0a:	2a1f      	cmp	r2, #31
    6c0c:	d100      	bne.n	6c10 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x20>
		pad_transp = 29;
    6c0e:	3a02      	subs	r2, #2
	if (pad_trim == 0x7)     // maximum value (7)
    6c10:	2b07      	cmp	r3, #7
    6c12:	d100      	bne.n	6c16 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x26>
		pad_trim = 3;
    6c14:	3b04      	subs	r3, #4

	usb.PADCAL.bit.TRANSN = pad_transn;
    6c16:	251f      	movs	r5, #31
    6c18:	6800      	ldr	r0, [r0, #0]
    6c1a:	018e      	lsls	r6, r1, #6
    6c1c:	8d04      	ldrh	r4, [r0, #40]	; 0x28
    6c1e:	490a      	ldr	r1, [pc, #40]	; (6c48 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x58>)
	usb.PADCAL.bit.TRANSP = pad_transp;
    6c20:	402a      	ands	r2, r5
	usb.PADCAL.bit.TRANSN = pad_transn;
    6c22:	4021      	ands	r1, r4
    6c24:	4331      	orrs	r1, r6
    6c26:	8501      	strh	r1, [r0, #40]	; 0x28
	usb.PADCAL.bit.TRANSP = pad_transp;
    6c28:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    6c2a:	0014      	movs	r4, r2
    6c2c:	000a      	movs	r2, r1
    6c2e:	43aa      	bics	r2, r5
    6c30:	4322      	orrs	r2, r4
    6c32:	8502      	strh	r2, [r0, #40]	; 0x28
	usb.PADCAL.bit.TRIM   = pad_trim;
    6c34:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    6c36:	0319      	lsls	r1, r3, #12
    6c38:	4b04      	ldr	r3, [pc, #16]	; (6c4c <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x5c>)
    6c3a:	4013      	ands	r3, r2
    6c3c:	430b      	orrs	r3, r1
    6c3e:	8503      	strh	r3, [r0, #40]	; 0x28
}
    6c40:	bd70      	pop	{r4, r5, r6, pc}
    6c42:	46c0      	nop			; (mov r8, r8)
    6c44:	00806024 	.word	0x00806024
    6c48:	fffff83f 	.word	0xfffff83f
    6c4c:	ffff8fff 	.word	0xffff8fff

00006c50 <_ZN7__GuardC1Ev>:
    6c50:	f3ef 8310 	mrs	r3, PRIMASK
 * TODO: Move into a separate header file and make an API out of it
 */

class __Guard {
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
    6c54:	6003      	str	r3, [r0, #0]
    6c56:	2301      	movs	r3, #1
    6c58:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    6c5a:	b672      	cpsid	i
		__disable_irq();
	}
    6c5c:	4770      	bx	lr

00006c5e <_ZN7__GuardD1Ev>:
	~__Guard() {
		if (primask == 0) {
    6c5e:	6803      	ldr	r3, [r0, #0]
    6c60:	2b00      	cmp	r3, #0
    6c62:	d102      	bne.n	6c6a <_ZN7__GuardD1Ev+0xc>
  __ASM volatile ("cpsie i" : : : "memory");
    6c64:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
    6c66:	f3bf 8f6f 	isb	sy
			__enable_irq();
			// http://infocenter.arm.com/help/topic/com.arm.doc.dai0321a/BIHBFEIB.html
			__ISB();
		}
	}
    6c6a:	4770      	bx	lr

00006c6c <_ZNK26DoubleBufferedEPOutHandler9availableEv>:
			release();
		}
	}

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
    6c6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (current == 0) {
    6c6e:	6905      	ldr	r5, [r0, #16]
	virtual uint32_t available() const {
    6c70:	0004      	movs	r4, r0
			bool ready = false;
			synchronized {
    6c72:	4668      	mov	r0, sp
		if (current == 0) {
    6c74:	2d00      	cmp	r5, #0
    6c76:	d114      	bne.n	6ca2 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x36>
			synchronized {
    6c78:	f7ff ffea 	bl	6c50 <_ZN7__GuardC1Ev>
    6c7c:	9b01      	ldr	r3, [sp, #4]
				ready = ready0;
    6c7e:	1d62      	adds	r2, r4, #5
			synchronized {
    6c80:	3b01      	subs	r3, #1
    6c82:	d302      	bcc.n	6c8a <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x1e>
				ready = ready0;
    6c84:	7fd5      	ldrb	r5, [r2, #31]
    6c86:	b2ed      	uxtb	r5, r5
    6c88:	e7fa      	b.n	6c80 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x14>
			synchronized {
    6c8a:	4668      	mov	r0, sp
    6c8c:	9301      	str	r3, [sp, #4]
    6c8e:	f7ff ffe6 	bl	6c5e <_ZN7__GuardD1Ev>
			}
			return ready ? (last0 - first0) : 0;
    6c92:	2d00      	cmp	r5, #0
    6c94:	d101      	bne.n	6c9a <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2e>
    6c96:	2000      	movs	r0, #0
			synchronized {
				ready = ready1;
			}
			return ready ? (last1 - first1) : 0;
		}
	}
    6c98:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
			return ready ? (last0 - first0) : 0;
    6c9a:	6a20      	ldr	r0, [r4, #32]
    6c9c:	69e3      	ldr	r3, [r4, #28]
			return ready ? (last1 - first1) : 0;
    6c9e:	1ac0      	subs	r0, r0, r3
    6ca0:	e7fa      	b.n	6c98 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2c>
			synchronized {
    6ca2:	f7ff ffd5 	bl	6c50 <_ZN7__GuardC1Ev>
				ready = ready1;
    6ca6:	0022      	movs	r2, r4
			bool ready = false;
    6ca8:	2500      	movs	r5, #0
    6caa:	9b01      	ldr	r3, [sp, #4]
				ready = ready1;
    6cac:	3234      	adds	r2, #52	; 0x34
			synchronized {
    6cae:	3b01      	subs	r3, #1
    6cb0:	d302      	bcc.n	6cb8 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x4c>
				ready = ready1;
    6cb2:	7815      	ldrb	r5, [r2, #0]
    6cb4:	b2ed      	uxtb	r5, r5
			synchronized {
    6cb6:	e7fa      	b.n	6cae <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x42>
    6cb8:	4668      	mov	r0, sp
    6cba:	9301      	str	r3, [sp, #4]
    6cbc:	f7ff ffcf 	bl	6c5e <_ZN7__GuardD1Ev>
			return ready ? (last1 - first1) : 0;
    6cc0:	2d00      	cmp	r5, #0
    6cc2:	d0e8      	beq.n	6c96 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2a>
    6cc4:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6cc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6cc8:	e7e9      	b.n	6c9e <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x32>
	...

00006ccc <_ZN26DoubleBufferedEPOutHandler7releaseEv>:

	void release() {
    6ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    6cce:	2501      	movs	r5, #1
		// Release OUT EP
		usbd.epBank0EnableTransferComplete(ep);
    6cd0:	6846      	ldr	r6, [r0, #4]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    6cd2:	7a03      	ldrb	r3, [r0, #8]
    6cd4:	6831      	ldr	r1, [r6, #0]
    6cd6:	015a      	lsls	r2, r3, #5
    6cd8:	188c      	adds	r4, r1, r2
    6cda:	34ff      	adds	r4, #255	; 0xff
    6cdc:	7aa7      	ldrb	r7, [r4, #10]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    6cde:	18b2      	adds	r2, r6, r2
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    6ce0:	433d      	orrs	r5, r7
    6ce2:	72a5      	strb	r5, [r4, #10]
		usbd.epBank0SetMultiPacketSize(ep, size);
    6ce4:	68c4      	ldr	r4, [r0, #12]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    6ce6:	4d09      	ldr	r5, [pc, #36]	; (6d0c <_ZN26DoubleBufferedEPOutHandler7releaseEv+0x40>)
    6ce8:	6890      	ldr	r0, [r2, #8]
    6cea:	04a4      	lsls	r4, r4, #18
    6cec:	4028      	ands	r0, r5
    6cee:	0924      	lsrs	r4, r4, #4
    6cf0:	4320      	orrs	r0, r4
    6cf2:	6090      	str	r0, [r2, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    6cf4:	6890      	ldr	r0, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    6cf6:	3308      	adds	r3, #8
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    6cf8:	0b80      	lsrs	r0, r0, #14
    6cfa:	0380      	lsls	r0, r0, #14
    6cfc:	6090      	str	r0, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    6cfe:	2240      	movs	r2, #64	; 0x40
    6d00:	015b      	lsls	r3, r3, #5
    6d02:	18cb      	adds	r3, r1, r3
    6d04:	7919      	ldrb	r1, [r3, #4]
    6d06:	430a      	orrs	r2, r1
    6d08:	711a      	strb	r2, [r3, #4]
		usbd.epBank0SetByteCount(ep, 0);
		usbd.epBank0ResetReady(ep);
	}
    6d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6d0c:	f0003fff 	.word	0xf0003fff

00006d10 <_ZN26DoubleBufferedEPOutHandler4recvEPvm>:
	virtual uint32_t recv(void *_data, uint32_t len)
    6d10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if (current == 0) {
    6d12:	6903      	ldr	r3, [r0, #16]
	virtual uint32_t recv(void *_data, uint32_t len)
    6d14:	0004      	movs	r4, r0
    6d16:	000e      	movs	r6, r1
    6d18:	0017      	movs	r7, r2
			synchronized {
    6d1a:	4668      	mov	r0, sp
		if (current == 0) {
    6d1c:	2b00      	cmp	r3, #0
    6d1e:	d13d      	bne.n	6d9c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x8c>
			synchronized {
    6d20:	f7ff ff96 	bl	6c50 <_ZN7__GuardC1Ev>
    6d24:	9b01      	ldr	r3, [sp, #4]
				if (!ready0) {
    6d26:	1d61      	adds	r1, r4, #5
    6d28:	3b01      	subs	r3, #1
			synchronized {
    6d2a:	1c5a      	adds	r2, r3, #1
    6d2c:	d00c      	beq.n	6d48 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x38>
				if (!ready0) {
    6d2e:	7fcd      	ldrb	r5, [r1, #31]
    6d30:	1e5a      	subs	r2, r3, #1
    6d32:	b2ed      	uxtb	r5, r5
    6d34:	2d00      	cmp	r5, #0
    6d36:	d105      	bne.n	6d44 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x34>
				synchronized {
    6d38:	4668      	mov	r0, sp
    6d3a:	9301      	str	r3, [sp, #4]
    6d3c:	f7ff ff8f 	bl	6c5e <_ZN7__GuardD1Ev>
	}
    6d40:	0028      	movs	r0, r5
    6d42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6d44:	0013      	movs	r3, r2
    6d46:	e7f0      	b.n	6d2a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1a>
			synchronized {
    6d48:	4668      	mov	r0, sp
    6d4a:	9301      	str	r3, [sp, #4]
			for (i=0; i<len && first0 < last0; i++) {
    6d4c:	2500      	movs	r5, #0
			synchronized {
    6d4e:	f7ff ff86 	bl	6c5e <_ZN7__GuardD1Ev>
    6d52:	69e3      	ldr	r3, [r4, #28]
			for (i=0; i<len && first0 < last0; i++) {
    6d54:	42af      	cmp	r7, r5
    6d56:	d002      	beq.n	6d5e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x4e>
    6d58:	6a22      	ldr	r2, [r4, #32]
    6d5a:	4293      	cmp	r3, r2
    6d5c:	d357      	bcc.n	6e0e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xfe>
			if (first0 == last0) {
    6d5e:	6a22      	ldr	r2, [r4, #32]
    6d60:	4293      	cmp	r3, r2
    6d62:	d1ed      	bne.n	6d40 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x30>
				first0 = 0;
    6d64:	2300      	movs	r3, #0
    6d66:	61e3      	str	r3, [r4, #28]
				current = 1;
    6d68:	3301      	adds	r3, #1
    6d6a:	6123      	str	r3, [r4, #16]
				synchronized {
    6d6c:	4668      	mov	r0, sp
    6d6e:	f7ff ff6f 	bl	6c50 <_ZN7__GuardC1Ev>
					if (notify) {
    6d72:	0022      	movs	r2, r4
					ready0 = false;
    6d74:	2100      	movs	r1, #0
    6d76:	9b01      	ldr	r3, [sp, #4]
    6d78:	1d67      	adds	r7, r4, #5
    6d7a:	3b01      	subs	r3, #1
					if (notify) {
    6d7c:	3235      	adds	r2, #53	; 0x35
				synchronized {
    6d7e:	1c58      	adds	r0, r3, #1
    6d80:	d0da      	beq.n	6d38 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
					ready0 = false;
    6d82:	77f9      	strb	r1, [r7, #31]
					if (notify) {
    6d84:	7810      	ldrb	r0, [r2, #0]
    6d86:	1e5e      	subs	r6, r3, #1
    6d88:	2800      	cmp	r0, #0
    6d8a:	d005      	beq.n	6d98 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x88>
						notify = false;
    6d8c:	7011      	strb	r1, [r2, #0]
						release();
    6d8e:	0020      	movs	r0, r4
    6d90:	9301      	str	r3, [sp, #4]
    6d92:	f7ff ff9b 	bl	6ccc <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    6d96:	e7ec      	b.n	6d72 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x62>
					if (notify) {
    6d98:	0033      	movs	r3, r6
    6d9a:	e7f0      	b.n	6d7e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x6e>
			synchronized {
    6d9c:	f7ff ff58 	bl	6c50 <_ZN7__GuardC1Ev>
				if (!ready1) {
    6da0:	0021      	movs	r1, r4
    6da2:	9b01      	ldr	r3, [sp, #4]
    6da4:	3134      	adds	r1, #52	; 0x34
    6da6:	3b01      	subs	r3, #1
			synchronized {
    6da8:	1c5a      	adds	r2, r3, #1
    6daa:	d006      	beq.n	6dba <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xaa>
				if (!ready1) {
    6dac:	780d      	ldrb	r5, [r1, #0]
    6dae:	1e5a      	subs	r2, r3, #1
    6db0:	b2ed      	uxtb	r5, r5
    6db2:	2d00      	cmp	r5, #0
    6db4:	d0c0      	beq.n	6d38 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
    6db6:	0013      	movs	r3, r2
    6db8:	e7f6      	b.n	6da8 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x98>
			synchronized {
    6dba:	4668      	mov	r0, sp
    6dbc:	9301      	str	r3, [sp, #4]
			for (i=0; i<len && first1 < last1; i++) {
    6dbe:	2500      	movs	r5, #0
			synchronized {
    6dc0:	f7ff ff4d 	bl	6c5e <_ZN7__GuardD1Ev>
    6dc4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			for (i=0; i<len && first1 < last1; i++) {
    6dc6:	42bd      	cmp	r5, r7
    6dc8:	d002      	beq.n	6dd0 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xc0>
    6dca:	6b22      	ldr	r2, [r4, #48]	; 0x30
    6dcc:	4293      	cmp	r3, r2
    6dce:	d326      	bcc.n	6e1e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x10e>
			if (first1 == last1) {
    6dd0:	6b22      	ldr	r2, [r4, #48]	; 0x30
    6dd2:	4293      	cmp	r3, r2
    6dd4:	d1b4      	bne.n	6d40 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x30>
				first1 = 0;
    6dd6:	2300      	movs	r3, #0
				synchronized {
    6dd8:	4668      	mov	r0, sp
				first1 = 0;
    6dda:	62e3      	str	r3, [r4, #44]	; 0x2c
				current = 0;
    6ddc:	6123      	str	r3, [r4, #16]
				synchronized {
    6dde:	f7ff ff37 	bl	6c50 <_ZN7__GuardC1Ev>
					ready1 = false;
    6de2:	0027      	movs	r7, r4
					if (notify) {
    6de4:	0022      	movs	r2, r4
					ready1 = false;
    6de6:	2100      	movs	r1, #0
    6de8:	9b01      	ldr	r3, [sp, #4]
    6dea:	3734      	adds	r7, #52	; 0x34
    6dec:	3b01      	subs	r3, #1
					if (notify) {
    6dee:	3235      	adds	r2, #53	; 0x35
				synchronized {
    6df0:	1c58      	adds	r0, r3, #1
    6df2:	d0a1      	beq.n	6d38 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
					ready1 = false;
    6df4:	7039      	strb	r1, [r7, #0]
					if (notify) {
    6df6:	7810      	ldrb	r0, [r2, #0]
    6df8:	1e5e      	subs	r6, r3, #1
    6dfa:	2800      	cmp	r0, #0
    6dfc:	d005      	beq.n	6e0a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xfa>
						notify = false;
    6dfe:	7011      	strb	r1, [r2, #0]
						release();
    6e00:	0020      	movs	r0, r4
    6e02:	9301      	str	r3, [sp, #4]
    6e04:	f7ff ff62 	bl	6ccc <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    6e08:	e7eb      	b.n	6de2 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xd2>
    6e0a:	0033      	movs	r3, r6
    6e0c:	e7f0      	b.n	6df0 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xe0>
				data[i] = data0[first0++];
    6e0e:	1c5a      	adds	r2, r3, #1
    6e10:	61e2      	str	r2, [r4, #28]
    6e12:	69a2      	ldr	r2, [r4, #24]
    6e14:	18d3      	adds	r3, r2, r3
    6e16:	781b      	ldrb	r3, [r3, #0]
    6e18:	5573      	strb	r3, [r6, r5]
			for (i=0; i<len && first0 < last0; i++) {
    6e1a:	3501      	adds	r5, #1
    6e1c:	e799      	b.n	6d52 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x42>
				data[i] = data1[first1++];
    6e1e:	1c5a      	adds	r2, r3, #1
    6e20:	62e2      	str	r2, [r4, #44]	; 0x2c
    6e22:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    6e24:	18d3      	adds	r3, r2, r3
    6e26:	781b      	ldrb	r3, [r3, #0]
    6e28:	5573      	strb	r3, [r6, r5]
			for (i=0; i<len && first1 < last1; i++) {
    6e2a:	3501      	adds	r5, #1
    6e2c:	e7ca      	b.n	6dc4 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xb4>

00006e2e <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv>:
	virtual void handleEndpoint()
    6e2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    6e30:	7a02      	ldrb	r2, [r0, #8]
		if (usbd.epBank0IsTransferComplete(ep))
    6e32:	6843      	ldr	r3, [r0, #4]
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    6e34:	0011      	movs	r1, r2
	virtual void handleEndpoint()
    6e36:	0004      	movs	r4, r0
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    6e38:	3108      	adds	r1, #8
    6e3a:	6818      	ldr	r0, [r3, #0]
    6e3c:	0149      	lsls	r1, r1, #5
    6e3e:	1841      	adds	r1, r0, r1
    6e40:	79c8      	ldrb	r0, [r1, #7]
		if (usbd.epBank0IsTransferComplete(ep))
    6e42:	07c0      	lsls	r0, r0, #31
    6e44:	d527      	bpl.n	6e96 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    6e46:	2501      	movs	r5, #1
    6e48:	0152      	lsls	r2, r2, #5
    6e4a:	71cd      	strb	r5, [r1, #7]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    6e4c:	189b      	adds	r3, r3, r2
    6e4e:	689a      	ldr	r2, [r3, #8]
			if (incoming == 0) {
    6e50:	6961      	ldr	r1, [r4, #20]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    6e52:	0492      	lsls	r2, r2, #18
    6e54:	0c92      	lsrs	r2, r2, #18
			if (incoming == 0) {
    6e56:	2900      	cmp	r1, #0
    6e58:	d121      	bne.n	6e9e <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x70>
				last0 = usbd.epBank0ByteCount(ep);
    6e5a:	6222      	str	r2, [r4, #32]
				if (last0 != 0) {
    6e5c:	6a22      	ldr	r2, [r4, #32]
    6e5e:	2a00      	cmp	r2, #0
    6e60:	d03e      	beq.n	6ee0 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb2>
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    6e62:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					incoming = 1;
    6e64:	6165      	str	r5, [r4, #20]
					synchronized {
    6e66:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    6e68:	605a      	str	r2, [r3, #4]
					synchronized {
    6e6a:	f7ff fef1 	bl	6c50 <_ZN7__GuardC1Ev>
						if (ready1) {
    6e6e:	0027      	movs	r7, r4
    6e70:	0021      	movs	r1, r4
    6e72:	9b01      	ldr	r3, [sp, #4]
						ready0 = true;
    6e74:	1d66      	adds	r6, r4, #5
    6e76:	3b01      	subs	r3, #1
						if (ready1) {
    6e78:	3734      	adds	r7, #52	; 0x34
    6e7a:	3135      	adds	r1, #53	; 0x35
					synchronized {
    6e7c:	1c5a      	adds	r2, r3, #1
    6e7e:	d02b      	beq.n	6ed8 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xaa>
						ready0 = true;
    6e80:	77f5      	strb	r5, [r6, #31]
						if (ready1) {
    6e82:	783a      	ldrb	r2, [r7, #0]
    6e84:	1e58      	subs	r0, r3, #1
    6e86:	b2d2      	uxtb	r2, r2
    6e88:	2a00      	cmp	r2, #0
    6e8a:	d005      	beq.n	6e98 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x6a>
    6e8c:	9301      	str	r3, [sp, #4]
							return;
    6e8e:	4668      	mov	r0, sp
							notify = true;
    6e90:	700d      	strb	r5, [r1, #0]
							return;
    6e92:	f7ff fee4 	bl	6c5e <_ZN7__GuardD1Ev>
	}
    6e96:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
						notify = false;
    6e98:	700a      	strb	r2, [r1, #0]
					synchronized {
    6e9a:	0003      	movs	r3, r0
    6e9c:	e7ee      	b.n	6e7c <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x4e>
				last1 = usbd.epBank0ByteCount(ep);
    6e9e:	6322      	str	r2, [r4, #48]	; 0x30
				if (last1 != 0) {
    6ea0:	6b22      	ldr	r2, [r4, #48]	; 0x30
    6ea2:	2a00      	cmp	r2, #0
    6ea4:	d01c      	beq.n	6ee0 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb2>
					incoming = 0;
    6ea6:	2200      	movs	r2, #0
    6ea8:	6162      	str	r2, [r4, #20]
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    6eaa:	69a2      	ldr	r2, [r4, #24]
					synchronized {
    6eac:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    6eae:	605a      	str	r2, [r3, #4]
					synchronized {
    6eb0:	f7ff fece 	bl	6c50 <_ZN7__GuardC1Ev>
						ready1 = true;
    6eb4:	0026      	movs	r6, r4
    6eb6:	0021      	movs	r1, r4
    6eb8:	9b01      	ldr	r3, [sp, #4]
    6eba:	3634      	adds	r6, #52	; 0x34
    6ebc:	3b01      	subs	r3, #1
						if (ready0) {
    6ebe:	1d67      	adds	r7, r4, #5
    6ec0:	3135      	adds	r1, #53	; 0x35
					synchronized {
    6ec2:	1c5a      	adds	r2, r3, #1
    6ec4:	d008      	beq.n	6ed8 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xaa>
						ready1 = true;
    6ec6:	7035      	strb	r5, [r6, #0]
						if (ready0) {
    6ec8:	7ffa      	ldrb	r2, [r7, #31]
    6eca:	1e58      	subs	r0, r3, #1
    6ecc:	b2d2      	uxtb	r2, r2
    6ece:	2a00      	cmp	r2, #0
    6ed0:	d1dc      	bne.n	6e8c <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x5e>
						notify = false;
    6ed2:	700a      	strb	r2, [r1, #0]
					synchronized {
    6ed4:	0003      	movs	r3, r0
    6ed6:	e7f4      	b.n	6ec2 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x94>
    6ed8:	4668      	mov	r0, sp
    6eda:	9301      	str	r3, [sp, #4]
    6edc:	f7ff febf 	bl	6c5e <_ZN7__GuardD1Ev>
			release();
    6ee0:	0020      	movs	r0, r4
    6ee2:	f7ff fef3 	bl	6ccc <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    6ee6:	e7d6      	b.n	6e96 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>

00006ee8 <_ZN14USBDeviceClass14SendInterfacesEPm>:
{
    6ee8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t interfaces = 0;
    6eea:	466b      	mov	r3, sp
    6eec:	1ddc      	adds	r4, r3, #7
    6eee:	2300      	movs	r3, #0
{
    6ef0:	000d      	movs	r5, r1
	total[0] += CDC_GetInterface(&interfaces);
    6ef2:	0020      	movs	r0, r4
	uint8_t interfaces = 0;
    6ef4:	7023      	strb	r3, [r4, #0]
	total[0] += CDC_GetInterface(&interfaces);
    6ef6:	f7ff fd8d 	bl	6a14 <_Z16CDC_GetInterfacePh>
    6efa:	682b      	ldr	r3, [r5, #0]
    6efc:	1818      	adds	r0, r3, r0
    6efe:	6028      	str	r0, [r5, #0]
	total[0] += PluggableUSB().getInterface(&interfaces);
    6f00:	f001 fb48 	bl	8594 <_Z12PluggableUSBv>
    6f04:	0021      	movs	r1, r4
    6f06:	f001 fb01 	bl	850c <_ZN13PluggableUSB_12getInterfaceEPh>
    6f0a:	682b      	ldr	r3, [r5, #0]
    6f0c:	1818      	adds	r0, r3, r0
    6f0e:	6028      	str	r0, [r5, #0]
	return interfaces;
    6f10:	7820      	ldrb	r0, [r4, #0]
}
    6f12:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00006f14 <_ZN14USBDeviceClass14handleEndpointEh>:
	if (ep == CDC_ENDPOINT_IN)
    6f14:	2903      	cmp	r1, #3
    6f16:	d10e      	bne.n	6f36 <_ZN14USBDeviceClass14handleEndpointEh+0x22>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    6f18:	2280      	movs	r2, #128	; 0x80
    6f1a:	4b0e      	ldr	r3, [pc, #56]	; (6f54 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
    6f1c:	3162      	adds	r1, #98	; 0x62
    6f1e:	681b      	ldr	r3, [r3, #0]
    6f20:	31ff      	adds	r1, #255	; 0xff
    6f22:	5c58      	ldrb	r0, [r3, r1]
    6f24:	4252      	negs	r2, r2
    6f26:	4302      	orrs	r2, r0
    6f28:	545a      	strb	r2, [r3, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    6f2a:	2268      	movs	r2, #104	; 0x68
    6f2c:	3963      	subs	r1, #99	; 0x63
    6f2e:	39ff      	subs	r1, #255	; 0xff
    6f30:	32ff      	adds	r2, #255	; 0xff
    6f32:	5499      	strb	r1, [r3, r2]
}
    6f34:	4770      	bx	lr
	if (ep == CDC_ENDPOINT_ACM)
    6f36:	2901      	cmp	r1, #1
    6f38:	d1fc      	bne.n	6f34 <_ZN14USBDeviceClass14handleEndpointEh+0x20>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    6f3a:	2280      	movs	r2, #128	; 0x80
    6f3c:	4b05      	ldr	r3, [pc, #20]	; (6f54 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
    6f3e:	3124      	adds	r1, #36	; 0x24
    6f40:	681b      	ldr	r3, [r3, #0]
    6f42:	31ff      	adds	r1, #255	; 0xff
    6f44:	5c58      	ldrb	r0, [r3, r1]
    6f46:	4252      	negs	r2, r2
    6f48:	4302      	orrs	r2, r0
    6f4a:	545a      	strb	r2, [r3, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    6f4c:	3923      	subs	r1, #35	; 0x23
    6f4e:	39ff      	subs	r1, #255	; 0xff
    6f50:	2228      	movs	r2, #40	; 0x28
    6f52:	e7ed      	b.n	6f30 <_ZN14USBDeviceClass14handleEndpointEh+0x1c>
    6f54:	20000784 	.word	0x20000784

00006f58 <_ZN14USBDeviceClass4initEv>:
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    6f58:	2320      	movs	r3, #32
{
    6f5a:	b570      	push	{r4, r5, r6, lr}
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    6f5c:	4a25      	ldr	r2, [pc, #148]	; (6ff4 <_ZN14USBDeviceClass4initEv+0x9c>)
{
    6f5e:	0004      	movs	r4, r0
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    6f60:	69d1      	ldr	r1, [r2, #28]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    6f62:	200f      	movs	r0, #15
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    6f64:	430b      	orrs	r3, r1
    6f66:	61d3      	str	r3, [r2, #28]
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
    6f68:	2201      	movs	r2, #1
    6f6a:	4923      	ldr	r1, [pc, #140]	; (6ff8 <_ZN14USBDeviceClass4initEv+0xa0>)
    6f6c:	780b      	ldrb	r3, [r1, #0]
    6f6e:	4313      	orrs	r3, r2
    6f70:	700b      	strb	r3, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    6f72:	4b22      	ldr	r3, [pc, #136]	; (6ffc <_ZN14USBDeviceClass4initEv+0xa4>)
    6f74:	7819      	ldrb	r1, [r3, #0]
    6f76:	4381      	bics	r1, r0
    6f78:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
    6f7a:	2106      	movs	r1, #6
    6f7c:	781d      	ldrb	r5, [r3, #0]
    6f7e:	4329      	orrs	r1, r5
    6f80:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].bit.PMUXEN = 1;
    6f82:	491f      	ldr	r1, [pc, #124]	; (7000 <_ZN14USBDeviceClass4initEv+0xa8>)
    6f84:	780d      	ldrb	r5, [r1, #0]
    6f86:	432a      	orrs	r2, r5
    6f88:	700a      	strb	r2, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg &= ~(0xF << (4 * (PIN_PA25G_USB_DP & 0x01u)));
    6f8a:	781a      	ldrb	r2, [r3, #0]
    6f8c:	4002      	ands	r2, r0
    6f8e:	701a      	strb	r2, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg |= MUX_PA25G_USB_DP << (4 * (PIN_PA25G_USB_DP & 0x01u));
    6f90:	2260      	movs	r2, #96	; 0x60
    6f92:	7819      	ldrb	r1, [r3, #0]
    6f94:	430a      	orrs	r2, r1
    6f96:	701a      	strb	r2, [r3, #0]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(6)     | // Generic Clock Multiplexer 6
    6f98:	4b1a      	ldr	r3, [pc, #104]	; (7004 <_ZN14USBDeviceClass4initEv+0xac>)
    6f9a:	4a1b      	ldr	r2, [pc, #108]	; (7008 <_ZN14USBDeviceClass4initEv+0xb0>)
    6f9c:	805a      	strh	r2, [r3, #2]
	while (GCLK->STATUS.bit.SYNCBUSY)
    6f9e:	785a      	ldrb	r2, [r3, #1]
    6fa0:	09d2      	lsrs	r2, r2, #7
    6fa2:	d1fc      	bne.n	6f9e <_ZN14USBDeviceClass4initEv+0x46>
	USB_SetHandler(&UDD_Handler);
    6fa4:	4819      	ldr	r0, [pc, #100]	; (700c <_ZN14USBDeviceClass4initEv+0xb4>)
    6fa6:	f7ff f8db 	bl	6160 <USB_SetHandler>
	usbd.reset();
    6faa:	4d19      	ldr	r5, [pc, #100]	; (7010 <_ZN14USBDeviceClass4initEv+0xb8>)
    6fac:	0028      	movs	r0, r5
    6fae:	f7ff fe0d 	bl	6bcc <_ZN20USBDevice_SAMD21G18x5resetEv>
	usbd.calibrate();
    6fb2:	0028      	movs	r0, r5
    6fb4:	f7ff fe1c 	bl	6bf0 <_ZN20USBDevice_SAMD21G18x9calibrateEv>
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    6fb8:	217f      	movs	r1, #127	; 0x7f
    6fba:	682b      	ldr	r3, [r5, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    6fbc:	20c1      	movs	r0, #193	; 0xc1
    6fbe:	781a      	ldrb	r2, [r3, #0]
    6fc0:	0080      	lsls	r0, r0, #2
    6fc2:	400a      	ands	r2, r1
    6fc4:	701a      	strb	r2, [r3, #0]
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    6fc6:	2204      	movs	r2, #4
    6fc8:	7819      	ldrb	r1, [r3, #0]
    6fca:	430a      	orrs	r2, r1
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    6fcc:	210c      	movs	r1, #12
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    6fce:	701a      	strb	r2, [r3, #0]
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    6fd0:	891a      	ldrh	r2, [r3, #8]
    6fd2:	438a      	bics	r2, r1
    6fd4:	490f      	ldr	r1, [pc, #60]	; (7014 <_ZN14USBDeviceClass4initEv+0xbc>)
    6fd6:	811a      	strh	r2, [r3, #8]
    6fd8:	580a      	ldr	r2, [r1, r0]
    6fda:	0212      	lsls	r2, r2, #8
    6fdc:	0a12      	lsrs	r2, r2, #8
    6fde:	500a      	str	r2, [r1, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    6fe0:	2280      	movs	r2, #128	; 0x80
    6fe2:	600a      	str	r2, [r1, #0]
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
    6fe4:	7819      	ldrb	r1, [r3, #0]
    6fe6:	3a7e      	subs	r2, #126	; 0x7e
    6fe8:	430a      	orrs	r2, r1
    6fea:	701a      	strb	r2, [r3, #0]
	initialized = true;
    6fec:	2301      	movs	r3, #1
    6fee:	7023      	strb	r3, [r4, #0]
}
    6ff0:	bd70      	pop	{r4, r5, r6, pc}
    6ff2:	46c0      	nop			; (mov r8, r8)
    6ff4:	40000400 	.word	0x40000400
    6ff8:	41004458 	.word	0x41004458
    6ffc:	4100443c 	.word	0x4100443c
    7000:	41004459 	.word	0x41004459
    7004:	40000c00 	.word	0x40000c00
    7008:	00004006 	.word	0x00004006
    700c:	00007985 	.word	0x00007985
    7010:	20000784 	.word	0x20000784
    7014:	e000e100 	.word	0xe000e100

00007018 <_ZN14USBDeviceClass6attachEv>:
	if (!initialized)
    7018:	7800      	ldrb	r0, [r0, #0]
    701a:	2800      	cmp	r0, #0
    701c:	d010      	beq.n	7040 <_ZN14USBDeviceClass6attachEv+0x28>
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
    701e:	2101      	movs	r1, #1
    7020:	4b08      	ldr	r3, [pc, #32]	; (7044 <_ZN14USBDeviceClass6attachEv+0x2c>)
    7022:	681b      	ldr	r3, [r3, #0]
    7024:	891a      	ldrh	r2, [r3, #8]
    7026:	438a      	bics	r2, r1
    7028:	811a      	strh	r2, [r3, #8]
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
    702a:	2208      	movs	r2, #8
    702c:	8b19      	ldrh	r1, [r3, #24]
    702e:	430a      	orrs	r2, r1
    7030:	831a      	strh	r2, [r3, #24]
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
    7032:	2204      	movs	r2, #4
    7034:	8b19      	ldrh	r1, [r3, #24]
    7036:	430a      	orrs	r2, r1
    7038:	831a      	strh	r2, [r3, #24]
	_usbConfiguration = 0;
    703a:	2200      	movs	r2, #0
    703c:	4b02      	ldr	r3, [pc, #8]	; (7048 <_ZN14USBDeviceClass6attachEv+0x30>)
    703e:	601a      	str	r2, [r3, #0]
}
    7040:	4770      	bx	lr
    7042:	46c0      	nop			; (mov r8, r8)
    7044:	20000784 	.word	0x20000784
    7048:	2000077c 	.word	0x2000077c

0000704c <_ZN14USBDeviceClass10setAddressEm>:
{
    704c:	b510      	push	{r4, lr}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    704e:	4a0f      	ldr	r2, [pc, #60]	; (708c <_ZN14USBDeviceClass10setAddressEm+0x40>)
    7050:	6993      	ldr	r3, [r2, #24]
    7052:	0b9b      	lsrs	r3, r3, #14
    7054:	039b      	lsls	r3, r3, #14
    7056:	6193      	str	r3, [r2, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    7058:	6813      	ldr	r3, [r2, #0]
    705a:	2202      	movs	r2, #2
    705c:	33ff      	adds	r3, #255	; 0xff
    705e:	721a      	strb	r2, [r3, #8]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    7060:	7998      	ldrb	r0, [r3, #6]
    7062:	3a82      	subs	r2, #130	; 0x82
    7064:	4302      	orrs	r2, r0
    7066:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    7068:	7a1a      	ldrb	r2, [r3, #8]
	while (!usbd.epBank1IsTransferComplete(0)) {}
    706a:	0792      	lsls	r2, r2, #30
    706c:	d5fc      	bpl.n	7068 <_ZN14USBDeviceClass10setAddressEm+0x1c>
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    706e:	247f      	movs	r4, #127	; 0x7f
    7070:	4a07      	ldr	r2, [pc, #28]	; (7090 <_ZN14USBDeviceClass10setAddressEm+0x44>)
    7072:	4021      	ands	r1, r4
    7074:	7a93      	ldrb	r3, [r2, #10]
    7076:	0008      	movs	r0, r1
    7078:	43a3      	bics	r3, r4
    707a:	0019      	movs	r1, r3
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    707c:	2380      	movs	r3, #128	; 0x80
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    707e:	4301      	orrs	r1, r0
    7080:	7291      	strb	r1, [r2, #10]
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    7082:	7a91      	ldrb	r1, [r2, #10]
    7084:	425b      	negs	r3, r3
    7086:	430b      	orrs	r3, r1
    7088:	7293      	strb	r3, [r2, #10]
}
    708a:	bd10      	pop	{r4, pc}
    708c:	20000784 	.word	0x20000784
    7090:	41005000 	.word	0x41005000

00007094 <_ZN14USBDeviceClass6detachEv>:
	if (!initialized)
    7094:	7800      	ldrb	r0, [r0, #0]
    7096:	2800      	cmp	r0, #0
    7098:	d005      	beq.n	70a6 <_ZN14USBDeviceClass6detachEv+0x12>
	inline void detach() { usb.CTRLB.bit.DETACH = 1; }
    709a:	4b03      	ldr	r3, [pc, #12]	; (70a8 <_ZN14USBDeviceClass6detachEv+0x14>)
    709c:	681a      	ldr	r2, [r3, #0]
    709e:	2301      	movs	r3, #1
    70a0:	8911      	ldrh	r1, [r2, #8]
    70a2:	430b      	orrs	r3, r1
    70a4:	8113      	strh	r3, [r2, #8]
}
    70a6:	4770      	bx	lr
    70a8:	20000784 	.word	0x20000784

000070ac <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>:
{
    70ac:	b510      	push	{r4, lr}
	if (CDC_ACM_INTERFACE == i)
    70ae:	790b      	ldrb	r3, [r1, #4]
{
    70b0:	000c      	movs	r4, r1
	if (CDC_ACM_INTERFACE == i)
    70b2:	2b00      	cmp	r3, #0
    70b4:	d10c      	bne.n	70d0 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x24>
		if (CDC_Setup(setup) == false) {
    70b6:	0008      	movs	r0, r1
    70b8:	f7ff fcba 	bl	6a30 <_Z9CDC_SetupR8USBSetup>
    70bc:	2800      	cmp	r0, #0
    70be:	d001      	beq.n	70c4 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x18>
		return true;
    70c0:	2001      	movs	r0, #1
}
    70c2:	bd10      	pop	{r4, pc}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    70c4:	4a09      	ldr	r2, [pc, #36]	; (70ec <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x40>)
    70c6:	6993      	ldr	r3, [r2, #24]
    70c8:	0b9b      	lsrs	r3, r3, #14
    70ca:	039b      	lsls	r3, r3, #14
    70cc:	6193      	str	r3, [r2, #24]
    70ce:	e7f7      	b.n	70c0 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x14>
	bool ret = PluggableUSB().setup(setup);
    70d0:	f001 fa60 	bl	8594 <_Z12PluggableUSBv>
    70d4:	0021      	movs	r1, r4
    70d6:	f001 fa4c 	bl	8572 <_ZN13PluggableUSB_5setupER8USBSetup>
	if ( ret == false) {
    70da:	2800      	cmp	r0, #0
    70dc:	d1f0      	bne.n	70c0 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x14>
    70de:	4a03      	ldr	r2, [pc, #12]	; (70ec <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x40>)
    70e0:	6993      	ldr	r3, [r2, #24]
    70e2:	0b9b      	lsrs	r3, r3, #14
    70e4:	039b      	lsls	r3, r3, #14
    70e6:	6193      	str	r3, [r2, #24]
    70e8:	e7eb      	b.n	70c2 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x16>
    70ea:	46c0      	nop			; (mov r8, r8)
    70ec:	20000784 	.word	0x20000784

000070f0 <_ZN14USBDeviceClass6initEPEmm>:
{
    70f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    70f2:	000d      	movs	r5, r1
	if (config == (USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0)))
    70f4:	2a83      	cmp	r2, #131	; 0x83
    70f6:	d119      	bne.n	712c <_ZN14USBDeviceClass6initEPEmm+0x3c>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    70f8:	b2cb      	uxtb	r3, r1
    70fa:	4c32      	ldr	r4, [pc, #200]	; (71c4 <_ZN14USBDeviceClass6initEPEmm+0xd4>)
    70fc:	015a      	lsls	r2, r3, #5
    70fe:	18a2      	adds	r2, r4, r2
    7100:	6991      	ldr	r1, [r2, #24]
    7102:	4831      	ldr	r0, [pc, #196]	; (71c8 <_ZN14USBDeviceClass6initEPEmm+0xd8>)
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    7104:	01ad      	lsls	r5, r5, #6
    7106:	4008      	ands	r0, r1
    7108:	21c0      	movs	r1, #192	; 0xc0
    710a:	0589      	lsls	r1, r1, #22
    710c:	4301      	orrs	r1, r0
    710e:	6191      	str	r1, [r2, #24]
    7110:	492e      	ldr	r1, [pc, #184]	; (71cc <_ZN14USBDeviceClass6initEPEmm+0xdc>)
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    7112:	6820      	ldr	r0, [r4, #0]
    7114:	194d      	adds	r5, r1, r5
    7116:	2170      	movs	r1, #112	; 0x70
    7118:	3308      	adds	r3, #8
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    711a:	6155      	str	r5, [r2, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    711c:	015b      	lsls	r3, r3, #5
    711e:	5c1a      	ldrb	r2, [r3, r0]
    7120:	438a      	bics	r2, r1
    7122:	0011      	movs	r1, r2
    7124:	2240      	movs	r2, #64	; 0x40
    7126:	430a      	orrs	r2, r1
    7128:	541a      	strb	r2, [r3, r0]
}
    712a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
    712c:	2a02      	cmp	r2, #2
    712e:	d144      	bne.n	71ba <_ZN14USBDeviceClass6initEPEmm+0xca>
		if (epHandlers[ep] == NULL) {
    7130:	008b      	lsls	r3, r1, #2
    7132:	9301      	str	r3, [sp, #4]
    7134:	4b26      	ldr	r3, [pc, #152]	; (71d0 <_ZN14USBDeviceClass6initEPEmm+0xe0>)
    7136:	008a      	lsls	r2, r1, #2
    7138:	58d6      	ldr	r6, [r2, r3]
    713a:	2e00      	cmp	r6, #0
    713c:	d1f5      	bne.n	712a <_ZN14USBDeviceClass6initEPEmm+0x3a>
			epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
    713e:	2038      	movs	r0, #56	; 0x38
    7140:	f7ff f856 	bl	61f0 <_Znwj>
		notify(false)
    7144:	4b23      	ldr	r3, [pc, #140]	; (71d4 <_ZN14USBDeviceClass6initEPEmm+0xe4>)
    7146:	4f1f      	ldr	r7, [pc, #124]	; (71c4 <_ZN14USBDeviceClass6initEPEmm+0xd4>)
    7148:	6003      	str	r3, [r0, #0]
    714a:	2380      	movs	r3, #128	; 0x80
    714c:	005b      	lsls	r3, r3, #1
    714e:	60c3      	str	r3, [r0, #12]
    7150:	1d43      	adds	r3, r0, #5
    7152:	6206      	str	r6, [r0, #32]
    7154:	6085      	str	r5, [r0, #8]
    7156:	6106      	str	r6, [r0, #16]
    7158:	6146      	str	r6, [r0, #20]
    715a:	61c6      	str	r6, [r0, #28]
    715c:	0004      	movs	r4, r0
    715e:	6047      	str	r7, [r0, #4]
    7160:	77de      	strb	r6, [r3, #31]
    7162:	62c6      	str	r6, [r0, #44]	; 0x2c
    7164:	6306      	str	r6, [r0, #48]	; 0x30
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    7166:	2080      	movs	r0, #128	; 0x80
		notify(false)
    7168:	332f      	adds	r3, #47	; 0x2f
    716a:	701e      	strb	r6, [r3, #0]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    716c:	0040      	lsls	r0, r0, #1
		notify(false)
    716e:	705e      	strb	r6, [r3, #1]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    7170:	f004 f8e2 	bl	b338 <malloc>
    7174:	0006      	movs	r6, r0
    7176:	61a0      	str	r0, [r4, #24]
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    7178:	2080      	movs	r0, #128	; 0x80
    717a:	0040      	lsls	r0, r0, #1
    717c:	f004 f8dc 	bl	b338 <malloc>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    7180:	b2ed      	uxtb	r5, r5
    7182:	016b      	lsls	r3, r5, #5
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    7184:	62a0      	str	r0, [r4, #40]	; 0x28
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    7186:	18fb      	adds	r3, r7, r3
    7188:	689a      	ldr	r2, [r3, #8]
    718a:	490f      	ldr	r1, [pc, #60]	; (71c8 <_ZN14USBDeviceClass6initEPEmm+0xd8>)
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    718c:	2007      	movs	r0, #7
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    718e:	4011      	ands	r1, r2
    7190:	22c0      	movs	r2, #192	; 0xc0
    7192:	0592      	lsls	r2, r2, #22
    7194:	430a      	orrs	r2, r1
    7196:	609a      	str	r2, [r3, #8]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    7198:	683a      	ldr	r2, [r7, #0]
    719a:	3508      	adds	r5, #8
    719c:	016d      	lsls	r5, r5, #5
    719e:	5ca9      	ldrb	r1, [r5, r2]
    71a0:	4381      	bics	r1, r0
    71a2:	0008      	movs	r0, r1
    71a4:	2103      	movs	r1, #3
    71a6:	4301      	orrs	r1, r0
    71a8:	54a9      	strb	r1, [r5, r2]
		release();
    71aa:	0020      	movs	r0, r4
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    71ac:	605e      	str	r6, [r3, #4]
		release();
    71ae:	f7ff fd8d 	bl	6ccc <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    71b2:	4b07      	ldr	r3, [pc, #28]	; (71d0 <_ZN14USBDeviceClass6initEPEmm+0xe0>)
    71b4:	9a01      	ldr	r2, [sp, #4]
    71b6:	50d4      	str	r4, [r2, r3]
    71b8:	e7b7      	b.n	712a <_ZN14USBDeviceClass6initEPEmm+0x3a>
    71ba:	0011      	movs	r1, r2
    71bc:	0028      	movs	r0, r5
    71be:	f7ff fc9d 	bl	6afc <_ZN14USBDeviceClass6initEPEmm.part.5>
}
    71c2:	e7b2      	b.n	712a <_ZN14USBDeviceClass6initEPEmm+0x3a>
    71c4:	20000784 	.word	0x20000784
    71c8:	8fffffff 	.word	0x8fffffff
    71cc:	200002f8 	.word	0x200002f8
    71d0:	200002d0 	.word	0x200002d0
    71d4:	0000be10 	.word	0x0000be10

000071d8 <_ZN14USBDeviceClass13initEndpointsEv>:
void USBDeviceClass::initEndpoints() {
    71d8:	b570      	push	{r4, r5, r6, lr}
    71da:	0005      	movs	r5, r0
    71dc:	2401      	movs	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    71de:	4b06      	ldr	r3, [pc, #24]	; (71f8 <_ZN14USBDeviceClass13initEndpointsEv+0x20>)
    71e0:	00a2      	lsls	r2, r4, #2
    71e2:	58d2      	ldr	r2, [r2, r3]
    71e4:	2a00      	cmp	r2, #0
    71e6:	d005      	beq.n	71f4 <_ZN14USBDeviceClass13initEndpointsEv+0x1c>
		initEP(i, EndPoints[i]);
    71e8:	0021      	movs	r1, r4
    71ea:	0028      	movs	r0, r5
    71ec:	f7ff ff80 	bl	70f0 <_ZN14USBDeviceClass6initEPEmm>
    71f0:	3401      	adds	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    71f2:	e7f4      	b.n	71de <_ZN14USBDeviceClass13initEndpointsEv+0x6>
}
    71f4:	bd70      	pop	{r4, r5, r6, pc}
    71f6:	46c0      	nop			; (mov r8, r8)
    71f8:	2000005c 	.word	0x2000005c

000071fc <_ZN14USBDeviceClass9availableEm>:
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
	if (epHandlers[ep]) {
    71fc:	4b08      	ldr	r3, [pc, #32]	; (7220 <_ZN14USBDeviceClass9availableEm+0x24>)
    71fe:	008a      	lsls	r2, r1, #2
    7200:	58d0      	ldr	r0, [r2, r3]
{
    7202:	b510      	push	{r4, lr}
	if (epHandlers[ep]) {
    7204:	2800      	cmp	r0, #0
    7206:	d003      	beq.n	7210 <_ZN14USBDeviceClass9availableEm+0x14>
		return epHandlers[ep]->available();
    7208:	6803      	ldr	r3, [r0, #0]
    720a:	689b      	ldr	r3, [r3, #8]
    720c:	4798      	blx	r3
	} else {
		return usbd.epBank0ByteCount(ep);
	}
}
    720e:	bd10      	pop	{r4, pc}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    7210:	b2c9      	uxtb	r1, r1
    7212:	4b04      	ldr	r3, [pc, #16]	; (7224 <_ZN14USBDeviceClass9availableEm+0x28>)
    7214:	0149      	lsls	r1, r1, #5
    7216:	1859      	adds	r1, r3, r1
    7218:	6888      	ldr	r0, [r1, #8]
    721a:	0480      	lsls	r0, r0, #18
    721c:	0c80      	lsrs	r0, r0, #18
		return usbd.epBank0ByteCount(ep);
    721e:	e7f6      	b.n	720e <_ZN14USBDeviceClass9availableEm+0x12>
    7220:	200002d0 	.word	0x200002d0
    7224:	20000784 	.word	0x20000784

00007228 <_ZN14USBDeviceClass5flushEm>:
{
    7228:	b510      	push	{r4, lr}
    722a:	000c      	movs	r4, r1
	if (available(ep)) {
    722c:	f7ff ffe6 	bl	71fc <_ZN14USBDeviceClass9availableEm>
    7230:	2800      	cmp	r0, #0
    7232:	d00c      	beq.n	724e <_ZN14USBDeviceClass5flushEm+0x26>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    7234:	4b06      	ldr	r3, [pc, #24]	; (7250 <_ZN14USBDeviceClass5flushEm+0x28>)
    7236:	b2e4      	uxtb	r4, r4
    7238:	681b      	ldr	r3, [r3, #0]
    723a:	3408      	adds	r4, #8
    723c:	0164      	lsls	r4, r4, #5
    723e:	191c      	adds	r4, r3, r4
    7240:	2380      	movs	r3, #128	; 0x80
    7242:	7962      	ldrb	r2, [r4, #5]
    7244:	425b      	negs	r3, r3
    7246:	4313      	orrs	r3, r2
    7248:	7163      	strb	r3, [r4, #5]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    724a:	2302      	movs	r3, #2
    724c:	71e3      	strb	r3, [r4, #7]
}
    724e:	bd10      	pop	{r4, pc}
    7250:	20000784 	.word	0x20000784

00007254 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>:
		return c;
	}
}

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
    7254:	b570      	push	{r4, r5, r6, lr}
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    7256:	4b13      	ldr	r3, [pc, #76]	; (72a4 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x50>)
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    7258:	b2cc      	uxtb	r4, r1
    725a:	4a13      	ldr	r2, [pc, #76]	; (72a8 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x54>)
    725c:	0160      	lsls	r0, r4, #5
    725e:	0189      	lsls	r1, r1, #6
    7260:	1859      	adds	r1, r3, r1
    7262:	1813      	adds	r3, r2, r0
    7264:	6059      	str	r1, [r3, #4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    7266:	6899      	ldr	r1, [r3, #8]
    7268:	4d10      	ldr	r5, [pc, #64]	; (72ac <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x58>)
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    726a:	3408      	adds	r4, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    726c:	400d      	ands	r5, r1
    726e:	2180      	movs	r1, #128	; 0x80
    7270:	0289      	lsls	r1, r1, #10
    7272:	4329      	orrs	r1, r5
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    7274:	2540      	movs	r5, #64	; 0x40
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    7276:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    7278:	6899      	ldr	r1, [r3, #8]
    727a:	0b89      	lsrs	r1, r1, #14
    727c:	0389      	lsls	r1, r1, #14
    727e:	6099      	str	r1, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    7280:	6811      	ldr	r1, [r2, #0]
    7282:	0163      	lsls	r3, r4, #5
    7284:	18cb      	adds	r3, r1, r3
    7286:	791e      	ldrb	r6, [r3, #4]
    7288:	4335      	orrs	r5, r6
    728a:	711d      	strb	r5, [r3, #4]
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
    728c:	799d      	ldrb	r5, [r3, #6]
	usbd.epBank0SetByteCount(ep, 0);

	usbd.epBank0ResetReady(ep);

	// Wait OUT
	while (!usbd.epBank0IsReady(ep)) {}
    728e:	066d      	lsls	r5, r5, #25
    7290:	d5fc      	bpl.n	728c <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x38>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    7292:	0164      	lsls	r4, r4, #5
    7294:	1909      	adds	r1, r1, r4
    7296:	79cb      	ldrb	r3, [r1, #7]
	while (!usbd.epBank0IsTransferComplete(ep)) {}
    7298:	07db      	lsls	r3, r3, #31
    729a:	d5fc      	bpl.n	7296 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x42>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    729c:	1812      	adds	r2, r2, r0
    729e:	6890      	ldr	r0, [r2, #8]
	return usbd.epBank0ByteCount(ep);
    72a0:	b2c0      	uxtb	r0, r0
}
    72a2:	bd70      	pop	{r4, r5, r6, pc}
    72a4:	200004b8 	.word	0x200004b8
    72a8:	20000784 	.word	0x20000784
    72ac:	f0003fff 	.word	0xf0003fff

000072b0 <_ZN14USBDeviceClass11recvControlEPvm>:
{
    72b0:	b570      	push	{r4, r5, r6, lr}
    72b2:	0014      	movs	r4, r2
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    72b4:	2240      	movs	r2, #64	; 0x40
    72b6:	4b0b      	ldr	r3, [pc, #44]	; (72e4 <_ZN14USBDeviceClass11recvControlEPvm+0x34>)
    72b8:	000d      	movs	r5, r1
    72ba:	681b      	ldr	r3, [r3, #0]
    72bc:	33ff      	adds	r3, #255	; 0xff
    72be:	7959      	ldrb	r1, [r3, #5]
    72c0:	430a      	orrs	r2, r1
    72c2:	715a      	strb	r2, [r3, #5]
	uint32_t read = armRecvCtrlOUT(0);
    72c4:	2100      	movs	r1, #0
    72c6:	f7ff ffc5 	bl	7254 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>
    72ca:	42a0      	cmp	r0, r4
    72cc:	d900      	bls.n	72d0 <_ZN14USBDeviceClass11recvControlEPvm+0x20>
    72ce:	0020      	movs	r0, r4
	for (uint32_t i=0; i<len; i++) {
    72d0:	2300      	movs	r3, #0
		data[i] = buffer[i];
    72d2:	4905      	ldr	r1, [pc, #20]	; (72e8 <_ZN14USBDeviceClass11recvControlEPvm+0x38>)
	for (uint32_t i=0; i<len; i++) {
    72d4:	42a3      	cmp	r3, r4
    72d6:	d003      	beq.n	72e0 <_ZN14USBDeviceClass11recvControlEPvm+0x30>
		data[i] = buffer[i];
    72d8:	5c5a      	ldrb	r2, [r3, r1]
    72da:	54ea      	strb	r2, [r5, r3]
	for (uint32_t i=0; i<len; i++) {
    72dc:	3301      	adds	r3, #1
    72de:	e7f9      	b.n	72d4 <_ZN14USBDeviceClass11recvControlEPvm+0x24>
}
    72e0:	bd70      	pop	{r4, r5, r6, pc}
    72e2:	46c0      	nop			; (mov r8, r8)
    72e4:	20000784 	.word	0x20000784
    72e8:	200004b8 	.word	0x200004b8

000072ec <_ZN14USBDeviceClass7armRecvEm>:

uint8_t USBDeviceClass::armRecv(uint32_t ep)
{
    72ec:	b510      	push	{r4, lr}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    72ee:	b2c9      	uxtb	r1, r1
    72f0:	480b      	ldr	r0, [pc, #44]	; (7320 <_ZN14USBDeviceClass7armRecvEm+0x34>)
    72f2:	0149      	lsls	r1, r1, #5
    72f4:	1842      	adds	r2, r0, r1
    72f6:	6893      	ldr	r3, [r2, #8]
    72f8:	049b      	lsls	r3, r3, #18
    72fa:	0c9b      	lsrs	r3, r3, #18
	uint16_t count = usbd.epBank0ByteCount(ep);
	if (count >= 64) {
    72fc:	2b3f      	cmp	r3, #63	; 0x3f
    72fe:	dd0b      	ble.n	7318 <_ZN14USBDeviceClass7armRecvEm+0x2c>
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    7300:	6894      	ldr	r4, [r2, #8]
		usbd.epBank0SetByteCount(ep, count - 64);
    7302:	3b40      	subs	r3, #64	; 0x40
    7304:	049b      	lsls	r3, r3, #18
    7306:	0ba4      	lsrs	r4, r4, #14
    7308:	0c9b      	lsrs	r3, r3, #18
    730a:	03a4      	lsls	r4, r4, #14
    730c:	4323      	orrs	r3, r4
    730e:	6093      	str	r3, [r2, #8]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    7310:	1841      	adds	r1, r0, r1
    7312:	6888      	ldr	r0, [r1, #8]
	} else {
		usbd.epBank0SetByteCount(ep, 0);
	}
	return usbd.epBank0ByteCount(ep);
    7314:	b2c0      	uxtb	r0, r0
}
    7316:	bd10      	pop	{r4, pc}
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    7318:	6893      	ldr	r3, [r2, #8]
    731a:	0b9b      	lsrs	r3, r3, #14
    731c:	039b      	lsls	r3, r3, #14
    731e:	e7f6      	b.n	730e <_ZN14USBDeviceClass7armRecvEm+0x22>
    7320:	20000784 	.word	0x20000784

00007324 <_ZN14USBDeviceClass4recvEmPvm>:
{
    7324:	b5f0      	push	{r4, r5, r6, r7, lr}
    7326:	001c      	movs	r4, r3
	if (!_usbConfiguration)
    7328:	4b2a      	ldr	r3, [pc, #168]	; (73d4 <_ZN14USBDeviceClass4recvEmPvm+0xb0>)
{
    732a:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    732c:	681b      	ldr	r3, [r3, #0]
{
    732e:	0006      	movs	r6, r0
    7330:	000d      	movs	r5, r1
    7332:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
    7334:	2b00      	cmp	r3, #0
    7336:	d04a      	beq.n	73ce <_ZN14USBDeviceClass4recvEmPvm+0xaa>
	if (epHandlers[ep]) {
    7338:	4b27      	ldr	r3, [pc, #156]	; (73d8 <_ZN14USBDeviceClass4recvEmPvm+0xb4>)
    733a:	008a      	lsls	r2, r1, #2
    733c:	58d0      	ldr	r0, [r2, r3]
    733e:	2800      	cmp	r0, #0
    7340:	d008      	beq.n	7354 <_ZN14USBDeviceClass4recvEmPvm+0x30>
		return epHandlers[ep]->recv(_data, len);
    7342:	6803      	ldr	r3, [r0, #0]
    7344:	0022      	movs	r2, r4
    7346:	685b      	ldr	r3, [r3, #4]
    7348:	9901      	ldr	r1, [sp, #4]
    734a:	4798      	blx	r3
    734c:	0004      	movs	r4, r0
}
    734e:	0020      	movs	r0, r4
    7350:	b005      	add	sp, #20
    7352:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (available(ep) < len)
    7354:	0030      	movs	r0, r6
    7356:	f7ff ff51 	bl	71fc <_ZN14USBDeviceClass9availableEm>
    735a:	4284      	cmp	r4, r0
    735c:	d904      	bls.n	7368 <_ZN14USBDeviceClass4recvEmPvm+0x44>
		len = available(ep);
    735e:	0029      	movs	r1, r5
    7360:	0030      	movs	r0, r6
    7362:	f7ff ff4b 	bl	71fc <_ZN14USBDeviceClass9availableEm>
    7366:	0004      	movs	r4, r0
	armRecv(ep);
    7368:	0029      	movs	r1, r5
    736a:	0030      	movs	r0, r6
    736c:	f7ff ffbe 	bl	72ec <_ZN14USBDeviceClass7armRecvEm>
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    7370:	2101      	movs	r1, #1
    7372:	b2eb      	uxtb	r3, r5
    7374:	4f19      	ldr	r7, [pc, #100]	; (73dc <_ZN14USBDeviceClass4recvEmPvm+0xb8>)
    7376:	9303      	str	r3, [sp, #12]
    7378:	015b      	lsls	r3, r3, #5
    737a:	9302      	str	r3, [sp, #8]
    737c:	9a02      	ldr	r2, [sp, #8]
    737e:	683b      	ldr	r3, [r7, #0]
	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
    7380:	9801      	ldr	r0, [sp, #4]
    7382:	189b      	adds	r3, r3, r2
    7384:	33ff      	adds	r3, #255	; 0xff
    7386:	7a5a      	ldrb	r2, [r3, #9]
    7388:	430a      	orrs	r2, r1
    738a:	4915      	ldr	r1, [pc, #84]	; (73e0 <_ZN14USBDeviceClass4recvEmPvm+0xbc>)
    738c:	725a      	strb	r2, [r3, #9]
    738e:	01ab      	lsls	r3, r5, #6
    7390:	18c9      	adds	r1, r1, r3
    7392:	0022      	movs	r2, r4
    7394:	f003 ffe4 	bl	b360 <memcpy>
	if (len && !available(ep)) {
    7398:	2c00      	cmp	r4, #0
    739a:	d0d8      	beq.n	734e <_ZN14USBDeviceClass4recvEmPvm+0x2a>
    739c:	0029      	movs	r1, r5
    739e:	0030      	movs	r0, r6
    73a0:	f7ff ff2c 	bl	71fc <_ZN14USBDeviceClass9availableEm>
    73a4:	2800      	cmp	r0, #0
    73a6:	d1d2      	bne.n	734e <_ZN14USBDeviceClass4recvEmPvm+0x2a>
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    73a8:	2140      	movs	r1, #64	; 0x40
    73aa:	9b03      	ldr	r3, [sp, #12]
    73ac:	683a      	ldr	r2, [r7, #0]
    73ae:	3308      	adds	r3, #8
    73b0:	015b      	lsls	r3, r3, #5
    73b2:	18d3      	adds	r3, r2, r3
    73b4:	7918      	ldrb	r0, [r3, #4]
    73b6:	4301      	orrs	r1, r0
    73b8:	7119      	strb	r1, [r3, #4]
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    73ba:	2101      	movs	r1, #1
    73bc:	71d9      	strb	r1, [r3, #7]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    73be:	2101      	movs	r1, #1
    73c0:	9b02      	ldr	r3, [sp, #8]
    73c2:	18d3      	adds	r3, r2, r3
    73c4:	33ff      	adds	r3, #255	; 0xff
    73c6:	7a9a      	ldrb	r2, [r3, #10]
    73c8:	430a      	orrs	r2, r1
    73ca:	729a      	strb	r2, [r3, #10]
    73cc:	e7bf      	b.n	734e <_ZN14USBDeviceClass4recvEmPvm+0x2a>
		return -1;
    73ce:	2401      	movs	r4, #1
    73d0:	4264      	negs	r4, r4
    73d2:	e7bc      	b.n	734e <_ZN14USBDeviceClass4recvEmPvm+0x2a>
    73d4:	2000077c 	.word	0x2000077c
    73d8:	200002d0 	.word	0x200002d0
    73dc:	20000784 	.word	0x20000784
    73e0:	200004b8 	.word	0x200004b8

000073e4 <_ZN14USBDeviceClass4recvEm>:
{
    73e4:	b513      	push	{r0, r1, r4, lr}
	if (recv(ep, &c, 1) != 1) {
    73e6:	466b      	mov	r3, sp
    73e8:	1ddc      	adds	r4, r3, #7
    73ea:	0022      	movs	r2, r4
    73ec:	2301      	movs	r3, #1
    73ee:	f7ff ff99 	bl	7324 <_ZN14USBDeviceClass4recvEmPvm>
    73f2:	2801      	cmp	r0, #1
    73f4:	d101      	bne.n	73fa <_ZN14USBDeviceClass4recvEm+0x16>
		return c;
    73f6:	7820      	ldrb	r0, [r4, #0]
}
    73f8:	bd16      	pop	{r1, r2, r4, pc}
		return -1;
    73fa:	2001      	movs	r0, #1
    73fc:	4240      	negs	r0, r0
    73fe:	e7fb      	b.n	73f8 <_ZN14USBDeviceClass4recvEm+0x14>

00007400 <_ZN14USBDeviceClass4sendEmPKvm>:
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
    7400:	b5f0      	push	{r4, r5, r6, r7, lr}
    7402:	001e      	movs	r6, r3
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
    7404:	4b35      	ldr	r3, [pc, #212]	; (74dc <_ZN14USBDeviceClass4sendEmPKvm+0xdc>)
{
    7406:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    7408:	681b      	ldr	r3, [r3, #0]
{
    740a:	000f      	movs	r7, r1
    740c:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
    740e:	2b00      	cmp	r3, #0
    7410:	d035      	beq.n	747e <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
		return -1;
	if (len > 16384)
    7412:	2380      	movs	r3, #128	; 0x80
    7414:	01db      	lsls	r3, r3, #7
    7416:	429e      	cmp	r6, r3
    7418:	d831      	bhi.n	747e <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    741a:	2500      	movs	r5, #0
		} else {
			length = len;
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    741c:	4a30      	ldr	r2, [pc, #192]	; (74e0 <_ZN14USBDeviceClass4sendEmPKvm+0xe0>)
    741e:	018b      	lsls	r3, r1, #6
    7420:	18d3      	adds	r3, r2, r3
    7422:	9302      	str	r3, [sp, #8]
	while (len != 0)
    7424:	2e00      	cmp	r6, #0
    7426:	d02c      	beq.n	7482 <_ZN14USBDeviceClass4sendEmPKvm+0x82>
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
    7428:	4b2e      	ldr	r3, [pc, #184]	; (74e4 <_ZN14USBDeviceClass4sendEmPKvm+0xe4>)
    742a:	681b      	ldr	r3, [r3, #0]
    742c:	9303      	str	r3, [sp, #12]
    742e:	23ff      	movs	r3, #255	; 0xff
    7430:	403b      	ands	r3, r7
    7432:	001c      	movs	r4, r3
    7434:	9300      	str	r3, [sp, #0]
    7436:	3408      	adds	r4, #8
    7438:	9b03      	ldr	r3, [sp, #12]
    743a:	0164      	lsls	r4, r4, #5
    743c:	191c      	adds	r4, r3, r4
    743e:	79a3      	ldrb	r3, [r4, #6]
    7440:	09db      	lsrs	r3, r3, #7
		if (usbd.epBank1IsReady(ep)) {
    7442:	d021      	beq.n	7488 <_ZN14USBDeviceClass4sendEmPKvm+0x88>
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
    7444:	4b28      	ldr	r3, [pc, #160]	; (74e8 <_ZN14USBDeviceClass4sendEmPKvm+0xe8>)
    7446:	4929      	ldr	r1, [pc, #164]	; (74ec <_ZN14USBDeviceClass4sendEmPKvm+0xec>)
    7448:	6818      	ldr	r0, [r3, #0]
    744a:	f001 fab1 	bl	89b0 <__udivsi3>
    744e:	4b28      	ldr	r3, [pc, #160]	; (74f0 <_ZN14USBDeviceClass4sendEmPKvm+0xf0>)
    7450:	2117      	movs	r1, #23
    7452:	4358      	muls	r0, r3
    7454:	f001 faac 	bl	89b0 <__udivsi3>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    7458:	4b26      	ldr	r3, [pc, #152]	; (74f4 <_ZN14USBDeviceClass4sendEmPKvm+0xf4>)
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    745a:	79e2      	ldrb	r2, [r4, #7]
			while (!usbd.epBank1IsTransferComplete(ep)) {
    745c:	0792      	lsls	r2, r2, #30
    745e:	d413      	bmi.n	7488 <_ZN14USBDeviceClass4sendEmPKvm+0x88>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    7460:	5dda      	ldrb	r2, [r3, r7]
    7462:	2a00      	cmp	r2, #0
    7464:	d101      	bne.n	746a <_ZN14USBDeviceClass4sendEmPKvm+0x6a>
    7466:	3801      	subs	r0, #1
    7468:	d2f7      	bcs.n	745a <_ZN14USBDeviceClass4sendEmPKvm+0x5a>
					LastTransmitTimedOut[ep] = 1;
    746a:	2201      	movs	r2, #1
    746c:	55da      	strb	r2, [r3, r7]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    746e:	9b00      	ldr	r3, [sp, #0]
    7470:	015a      	lsls	r2, r3, #5
    7472:	4b1c      	ldr	r3, [pc, #112]	; (74e4 <_ZN14USBDeviceClass4sendEmPKvm+0xe4>)
    7474:	189b      	adds	r3, r3, r2
    7476:	699a      	ldr	r2, [r3, #24]
    7478:	0b92      	lsrs	r2, r2, #14
    747a:	0392      	lsls	r2, r2, #14
    747c:	619a      	str	r2, [r3, #24]
					return -1;
    747e:	2501      	movs	r5, #1
    7480:	426d      	negs	r5, r5
		written += length;
		len -= length;
		data = (char *)data + length;
	}
	return written;
}
    7482:	0028      	movs	r0, r5
    7484:	b005      	add	sp, #20
    7486:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LastTransmitTimedOut[ep] = 0;
    7488:	2200      	movs	r2, #0
    748a:	4b1a      	ldr	r3, [pc, #104]	; (74f4 <_ZN14USBDeviceClass4sendEmPKvm+0xf4>)
    748c:	0034      	movs	r4, r6
    748e:	55da      	strb	r2, [r3, r7]
    7490:	2e3f      	cmp	r6, #63	; 0x3f
    7492:	d900      	bls.n	7496 <_ZN14USBDeviceClass4sendEmPKvm+0x96>
    7494:	243f      	movs	r4, #63	; 0x3f
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    7496:	0022      	movs	r2, r4
    7498:	9901      	ldr	r1, [sp, #4]
    749a:	9802      	ldr	r0, [sp, #8]
    749c:	f003 ff60 	bl	b360 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    74a0:	9b00      	ldr	r3, [sp, #0]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    74a2:	04a1      	lsls	r1, r4, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    74a4:	015a      	lsls	r2, r3, #5
    74a6:	4b0f      	ldr	r3, [pc, #60]	; (74e4 <_ZN14USBDeviceClass4sendEmPKvm+0xe4>)
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    74a8:	0c89      	lsrs	r1, r1, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    74aa:	189b      	adds	r3, r3, r2
    74ac:	9a02      	ldr	r2, [sp, #8]
		written += length;
    74ae:	192d      	adds	r5, r5, r4
    74b0:	615a      	str	r2, [r3, #20]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    74b2:	699a      	ldr	r2, [r3, #24]
		len -= length;
    74b4:	1b36      	subs	r6, r6, r4
    74b6:	0b92      	lsrs	r2, r2, #14
    74b8:	0392      	lsls	r2, r2, #14
    74ba:	430a      	orrs	r2, r1
    74bc:	619a      	str	r2, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    74be:	9b00      	ldr	r3, [sp, #0]
    74c0:	9a03      	ldr	r2, [sp, #12]
    74c2:	3308      	adds	r3, #8
    74c4:	015b      	lsls	r3, r3, #5
    74c6:	18d3      	adds	r3, r2, r3
    74c8:	2202      	movs	r2, #2
    74ca:	71da      	strb	r2, [r3, #7]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    74cc:	7959      	ldrb	r1, [r3, #5]
    74ce:	3a82      	subs	r2, #130	; 0x82
    74d0:	430a      	orrs	r2, r1
    74d2:	715a      	strb	r2, [r3, #5]
		data = (char *)data + length;
    74d4:	9b01      	ldr	r3, [sp, #4]
    74d6:	191b      	adds	r3, r3, r4
    74d8:	9301      	str	r3, [sp, #4]
	while (len != 0)
    74da:	e7a3      	b.n	7424 <_ZN14USBDeviceClass4sendEmPKvm+0x24>
    74dc:	2000077c 	.word	0x2000077c
    74e0:	200002f8 	.word	0x200002f8
    74e4:	20000784 	.word	0x20000784
    74e8:	20000084 	.word	0x20000084
    74ec:	000f4240 	.word	0x000f4240
    74f0:	00011170 	.word	0x00011170
    74f4:	200002ed 	.word	0x200002ed

000074f8 <_ZN14USBDeviceClass7armSendEmPKvm>:

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
    74f8:	b570      	push	{r4, r5, r6, lr}
    74fa:	000d      	movs	r5, r1
    74fc:	001c      	movs	r4, r3
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    74fe:	4e0d      	ldr	r6, [pc, #52]	; (7534 <_ZN14USBDeviceClass7armSendEmPKvm+0x3c>)
    7500:	01ab      	lsls	r3, r5, #6
    7502:	18f6      	adds	r6, r6, r3
{
    7504:	0011      	movs	r1, r2
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    7506:	0030      	movs	r0, r6
    7508:	0022      	movs	r2, r4
    750a:	f003 ff29 	bl	b360 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    750e:	b2ed      	uxtb	r5, r5
    7510:	4909      	ldr	r1, [pc, #36]	; (7538 <_ZN14USBDeviceClass7armSendEmPKvm+0x40>)
    7512:	016d      	lsls	r5, r5, #5
    7514:	194d      	adds	r5, r1, r5
    7516:	616e      	str	r6, [r5, #20]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    7518:	69ab      	ldr	r3, [r5, #24]
    751a:	4a08      	ldr	r2, [pc, #32]	; (753c <_ZN14USBDeviceClass7armSendEmPKvm+0x44>)
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
	usbd.epBank1SetMultiPacketSize(ep, 0);
	usbd.epBank1SetByteCount(ep, len);

	return len;
}
    751c:	0020      	movs	r0, r4
    751e:	4013      	ands	r3, r2
    7520:	61ab      	str	r3, [r5, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    7522:	69ab      	ldr	r3, [r5, #24]
    7524:	04a2      	lsls	r2, r4, #18
    7526:	0b9b      	lsrs	r3, r3, #14
    7528:	0c92      	lsrs	r2, r2, #18
    752a:	039b      	lsls	r3, r3, #14
    752c:	4313      	orrs	r3, r2
    752e:	61ab      	str	r3, [r5, #24]
    7530:	bd70      	pop	{r4, r5, r6, pc}
    7532:	46c0      	nop			; (mov r8, r8)
    7534:	200002f8 	.word	0x200002f8
    7538:	20000784 	.word	0x20000784
    753c:	f0003fff 	.word	0xf0003fff

00007540 <_ZN14USBDeviceClass11sendControlEPKvm>:

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    7540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    7542:	4b10      	ldr	r3, [pc, #64]	; (7584 <_ZN14USBDeviceClass11sendControlEPKvm+0x44>)
{
    7544:	9001      	str	r0, [sp, #4]
	if (_dry_run == true)
    7546:	781b      	ldrb	r3, [r3, #0]
{
    7548:	000f      	movs	r7, r1
    754a:	0015      	movs	r5, r2
	if (_dry_run == true)
    754c:	2b00      	cmp	r3, #0
    754e:	d10c      	bne.n	756a <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		return length;

	if (_pack_message == true) {
    7550:	4b0d      	ldr	r3, [pc, #52]	; (7588 <_ZN14USBDeviceClass11sendControlEPKvm+0x48>)
    7552:	0016      	movs	r6, r2
    7554:	781c      	ldrb	r4, [r3, #0]
    7556:	2c00      	cmp	r4, #0
    7558:	d009      	beq.n	756e <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
		memcpy(&_pack_buffer[_pack_size], data, len);
    755a:	4e0c      	ldr	r6, [pc, #48]	; (758c <_ZN14USBDeviceClass11sendControlEPKvm+0x4c>)
    755c:	480c      	ldr	r0, [pc, #48]	; (7590 <_ZN14USBDeviceClass11sendControlEPKvm+0x50>)
    755e:	8834      	ldrh	r4, [r6, #0]
    7560:	1900      	adds	r0, r0, r4
		_pack_size += len;
    7562:	1964      	adds	r4, r4, r5
		memcpy(&_pack_buffer[_pack_size], data, len);
    7564:	f003 fefc 	bl	b360 <memcpy>
		_pack_size += len;
    7568:	8034      	strh	r4, [r6, #0]
		pos += sent;
		len -= sent;
 	}

	return length;
}
    756a:	0028      	movs	r0, r5
    756c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 	while (len > 0)
    756e:	2e00      	cmp	r6, #0
    7570:	d0fb      	beq.n	756a <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		sent = armSend(EP0, data + pos, len);
    7572:	193a      	adds	r2, r7, r4
    7574:	0033      	movs	r3, r6
    7576:	2100      	movs	r1, #0
    7578:	9801      	ldr	r0, [sp, #4]
    757a:	f7ff ffbd 	bl	74f8 <_ZN14USBDeviceClass7armSendEmPKvm>
		pos += sent;
    757e:	1824      	adds	r4, r4, r0
		len -= sent;
    7580:	1a36      	subs	r6, r6, r0
 	while (len > 0)
    7582:	e7f4      	b.n	756e <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
    7584:	20000678 	.word	0x20000678
    7588:	20000779 	.word	0x20000779
    758c:	2000077a 	.word	0x2000077a
    7590:	20000679 	.word	0x20000679

00007594 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>:
{
    7594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return false;
    7596:	2000      	movs	r0, #0
{
    7598:	af00      	add	r7, sp, #0
    759a:	000e      	movs	r6, r1
    759c:	0015      	movs	r5, r2
	if (maxlen < 2)
    759e:	2a01      	cmp	r2, #1
    75a0:	dd26      	ble.n	75f0 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x5c>
	uint8_t buffer[maxlen];
    75a2:	1dd3      	adds	r3, r2, #7
    75a4:	466a      	mov	r2, sp
    75a6:	08db      	lsrs	r3, r3, #3
    75a8:	00db      	lsls	r3, r3, #3
    75aa:	1ad3      	subs	r3, r2, r3
    75ac:	469d      	mov	sp, r3
	buffer[0] = strlen((const char*)string) * 2 + 2;
    75ae:	0008      	movs	r0, r1
    75b0:	f003 fffe 	bl	b5b0 <strlen>
	uint8_t buffer[maxlen];
    75b4:	466c      	mov	r4, sp
	buffer[1] = 0x03;
    75b6:	2303      	movs	r3, #3
		buffer[i] = 0;
    75b8:	2100      	movs	r1, #0
	buffer[0] = strlen((const char*)string) * 2 + 2;
    75ba:	3001      	adds	r0, #1
    75bc:	0040      	lsls	r0, r0, #1
    75be:	7020      	strb	r0, [r4, #0]
	buffer[1] = 0x03;
    75c0:	7063      	strb	r3, [r4, #1]
    75c2:	1e5a      	subs	r2, r3, #1
    75c4:	b2d2      	uxtb	r2, r2
	for (i = 2; i < maxlen && *string; i++) {
    75c6:	4295      	cmp	r5, r2
    75c8:	dd0b      	ble.n	75e2 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
    75ca:	7830      	ldrb	r0, [r6, #0]
    75cc:	2800      	cmp	r0, #0
    75ce:	d008      	beq.n	75e2 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
		buffer[i++] = *string++;
    75d0:	3601      	adds	r6, #1
    75d2:	54a0      	strb	r0, [r4, r2]
		if (i == maxlen) break;
    75d4:	429d      	cmp	r5, r3
    75d6:	d003      	beq.n	75e0 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4c>
		buffer[i] = 0;
    75d8:	54e1      	strb	r1, [r4, r3]
    75da:	3302      	adds	r3, #2
    75dc:	b2db      	uxtb	r3, r3
	for (i = 2; i < maxlen && *string; i++) {
    75de:	e7f0      	b.n	75c2 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x2e>
    75e0:	002a      	movs	r2, r5
	return USBDevice.sendControl(buffer, i);
    75e2:	0021      	movs	r1, r4
    75e4:	4803      	ldr	r0, [pc, #12]	; (75f4 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x60>)
    75e6:	f7ff ffab 	bl	7540 <_ZN14USBDeviceClass11sendControlEPKvm>
    75ea:	1e43      	subs	r3, r0, #1
    75ec:	4198      	sbcs	r0, r3
    75ee:	b2c0      	uxtb	r0, r0
}
    75f0:	46bd      	mov	sp, r7
    75f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    75f4:	200002cc 	.word	0x200002cc

000075f8 <_ZN14USBDeviceClass17sendConfigurationEm>:
{
    75f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t total = 0;
    75fa:	2700      	movs	r7, #0
	_dry_run = true;
    75fc:	2601      	movs	r6, #1
{
    75fe:	b087      	sub	sp, #28
	_dry_run = true;
    7600:	4b1e      	ldr	r3, [pc, #120]	; (767c <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
{
    7602:	9100      	str	r1, [sp, #0]
	uint8_t interfaces = SendInterfaces(&total);
    7604:	a902      	add	r1, sp, #8
	_dry_run = true;
    7606:	701e      	strb	r6, [r3, #0]
{
    7608:	0005      	movs	r5, r0
	uint32_t total = 0;
    760a:	9702      	str	r7, [sp, #8]
	uint8_t interfaces = SendInterfaces(&total);
    760c:	f7ff fc6c 	bl	6ee8 <_ZN14USBDeviceClass14SendInterfacesEPm>
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    7610:	ac03      	add	r4, sp, #12
	uint8_t interfaces = SendInterfaces(&total);
    7612:	9001      	str	r0, [sp, #4]
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    7614:	2209      	movs	r2, #9
    7616:	0039      	movs	r1, r7
    7618:	0020      	movs	r0, r4
    761a:	f003 feaa 	bl	b372 <memset>
    761e:	2309      	movs	r3, #9
    7620:	7023      	strb	r3, [r4, #0]
    7622:	2302      	movs	r3, #2
    7624:	7063      	strb	r3, [r4, #1]
    7626:	339e      	adds	r3, #158	; 0x9e
    7628:	71e3      	strb	r3, [r4, #7]
    762a:	335a      	adds	r3, #90	; 0x5a
    762c:	7223      	strb	r3, [r4, #8]
    762e:	9b02      	ldr	r3, [sp, #8]
    7630:	7166      	strb	r6, [r4, #5]
    7632:	3309      	adds	r3, #9
    7634:	8063      	strh	r3, [r4, #2]
    7636:	466b      	mov	r3, sp
    7638:	791b      	ldrb	r3, [r3, #4]
    763a:	7123      	strb	r3, [r4, #4]
	_dry_run = false;
    763c:	4b0f      	ldr	r3, [pc, #60]	; (767c <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
    763e:	701f      	strb	r7, [r3, #0]
	if (maxlen == sizeof(ConfigDescriptor)) {
    7640:	9b00      	ldr	r3, [sp, #0]
    7642:	2b09      	cmp	r3, #9
    7644:	d107      	bne.n	7656 <_ZN14USBDeviceClass17sendConfigurationEm+0x5e>
		sendControl(&config, sizeof(ConfigDescriptor));
    7646:	001a      	movs	r2, r3
    7648:	0021      	movs	r1, r4
		sendControl(_pack_buffer, _pack_size);
    764a:	0028      	movs	r0, r5
    764c:	f7ff ff78 	bl	7540 <_ZN14USBDeviceClass11sendControlEPKvm>
}
    7650:	2001      	movs	r0, #1
    7652:	b007      	add	sp, #28
    7654:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_pack_message = true;
    7656:	4b0a      	ldr	r3, [pc, #40]	; (7680 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
	sendControl(&config, sizeof(ConfigDescriptor));
    7658:	2209      	movs	r2, #9
		_pack_message = true;
    765a:	701e      	strb	r6, [r3, #0]
		_pack_size = 0;
    765c:	4e09      	ldr	r6, [pc, #36]	; (7684 <_ZN14USBDeviceClass17sendConfigurationEm+0x8c>)
	sendControl(&config, sizeof(ConfigDescriptor));
    765e:	0021      	movs	r1, r4
    7660:	0028      	movs	r0, r5
	total = 0;
    7662:	9702      	str	r7, [sp, #8]
		_pack_size = 0;
    7664:	8037      	strh	r7, [r6, #0]
	sendControl(&config, sizeof(ConfigDescriptor));
    7666:	f7ff ff6b 	bl	7540 <_ZN14USBDeviceClass11sendControlEPKvm>
	SendInterfaces(&total);
    766a:	a902      	add	r1, sp, #8
    766c:	0028      	movs	r0, r5
    766e:	f7ff fc3b 	bl	6ee8 <_ZN14USBDeviceClass14SendInterfacesEPm>
		_pack_message = false;
    7672:	4b03      	ldr	r3, [pc, #12]	; (7680 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
		sendControl(_pack_buffer, _pack_size);
    7674:	8832      	ldrh	r2, [r6, #0]
		_pack_message = false;
    7676:	701f      	strb	r7, [r3, #0]
		sendControl(_pack_buffer, _pack_size);
    7678:	4903      	ldr	r1, [pc, #12]	; (7688 <_ZN14USBDeviceClass17sendConfigurationEm+0x90>)
    767a:	e7e6      	b.n	764a <_ZN14USBDeviceClass17sendConfigurationEm+0x52>
    767c:	20000678 	.word	0x20000678
    7680:	20000779 	.word	0x20000779
    7684:	2000077a 	.word	0x2000077a
    7688:	20000679 	.word	0x20000679

0000768c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>:
{
    768c:	b570      	push	{r4, r5, r6, lr}
	uint8_t t = setup.wValueH;
    768e:	78ce      	ldrb	r6, [r1, #3]
{
    7690:	b092      	sub	sp, #72	; 0x48
    7692:	0005      	movs	r5, r0
    7694:	000c      	movs	r4, r1
	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
    7696:	2e02      	cmp	r6, #2
    7698:	d108      	bne.n	76ac <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x20>
		return USBDevice.sendConfiguration(setup.wLength);
    769a:	88c9      	ldrh	r1, [r1, #6]
    769c:	482b      	ldr	r0, [pc, #172]	; (774c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc0>)
    769e:	f7ff ffab 	bl	75f8 <_ZN14USBDeviceClass17sendConfigurationEm>
    76a2:	1e43      	subs	r3, r0, #1
    76a4:	4198      	sbcs	r0, r3
    76a6:	b2c0      	uxtb	r0, r0
}
    76a8:	b012      	add	sp, #72	; 0x48
    76aa:	bd70      	pop	{r4, r5, r6, pc}
	ret = PluggableUSB().getDescriptor(setup);
    76ac:	f000 ff72 	bl	8594 <_Z12PluggableUSBv>
    76b0:	0021      	movs	r1, r4
    76b2:	f000 ff3f 	bl	8534 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
	if (ret != 0) {
    76b6:	2800      	cmp	r0, #0
    76b8:	d003      	beq.n	76c2 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x36>
		return (ret > 0 ? true : false);
    76ba:	17c3      	asrs	r3, r0, #31
    76bc:	1a18      	subs	r0, r3, r0
    76be:	0fc0      	lsrs	r0, r0, #31
    76c0:	e7f2      	b.n	76a8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
    76c2:	2e01      	cmp	r6, #1
    76c4:	d10b      	bne.n	76de <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x52>
		if (setup.wLength == 8)
    76c6:	88e2      	ldrh	r2, [r4, #6]
    76c8:	4921      	ldr	r1, [pc, #132]	; (7750 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc4>)
		if (*desc_addr > setup.wLength) {
    76ca:	2a11      	cmp	r2, #17
    76cc:	dc10      	bgt.n	76f0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x64>
			desc_length = setup.wLength;
    76ce:	b2d2      	uxtb	r2, r2
	if (desc_length == 0) {
    76d0:	2a00      	cmp	r2, #0
    76d2:	d00d      	beq.n	76f0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x64>
	sendControl(desc_addr, desc_length);
    76d4:	0028      	movs	r0, r5
    76d6:	f7ff ff33 	bl	7540 <_ZN14USBDeviceClass11sendControlEPKvm>
	return true;
    76da:	2001      	movs	r0, #1
    76dc:	e7e4      	b.n	76a8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    76de:	2e03      	cmp	r6, #3
    76e0:	d1e2      	bne.n	76a8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
		if (setup.wValueL == 0) {
    76e2:	78a3      	ldrb	r3, [r4, #2]
    76e4:	2b00      	cmp	r3, #0
    76e6:	d105      	bne.n	76f4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x68>
		if (*desc_addr > setup.wLength) {
    76e8:	88e2      	ldrh	r2, [r4, #6]
    76ea:	491a      	ldr	r1, [pc, #104]	; (7754 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc8>)
    76ec:	2a03      	cmp	r2, #3
    76ee:	ddee      	ble.n	76ce <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x42>
		desc_length = *desc_addr;
    76f0:	780a      	ldrb	r2, [r1, #0]
    76f2:	e7ef      	b.n	76d4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x48>
		else if (setup.wValueL == IPRODUCT) {
    76f4:	2b02      	cmp	r3, #2
    76f6:	d105      	bne.n	7704 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x78>
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
    76f8:	79a2      	ldrb	r2, [r4, #6]
    76fa:	4917      	ldr	r1, [pc, #92]	; (7758 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xcc>)
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    76fc:	0028      	movs	r0, r5
    76fe:	f7ff ff49 	bl	7594 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    7702:	e7d1      	b.n	76a8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
		else if (setup.wValueL == IMANUFACTURER) {
    7704:	2b01      	cmp	r3, #1
    7706:	d102      	bne.n	770e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x82>
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    7708:	79a2      	ldrb	r2, [r4, #6]
    770a:	4914      	ldr	r1, [pc, #80]	; (775c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd0>)
    770c:	e7f6      	b.n	76fc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
		else if (setup.wValueL == ISERIAL) {
    770e:	2b03      	cmp	r3, #3
    7710:	d1ca      	bne.n	76a8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
			utox8(SERIAL_NUMBER_WORD_0, &name[0]);
    7712:	4b13      	ldr	r3, [pc, #76]	; (7760 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd4>)
    7714:	a901      	add	r1, sp, #4
    7716:	6818      	ldr	r0, [r3, #0]
    7718:	f7ff f9de 	bl	6ad8 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_1, &name[8]);
    771c:	4b11      	ldr	r3, [pc, #68]	; (7764 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd8>)
    771e:	a903      	add	r1, sp, #12
    7720:	6818      	ldr	r0, [r3, #0]
    7722:	f7ff f9d9 	bl	6ad8 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_2, &name[16]);
    7726:	4b10      	ldr	r3, [pc, #64]	; (7768 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xdc>)
    7728:	a905      	add	r1, sp, #20
    772a:	6818      	ldr	r0, [r3, #0]
    772c:	f7ff f9d4 	bl	6ad8 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_3, &name[24]);
    7730:	4b0e      	ldr	r3, [pc, #56]	; (776c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xe0>)
    7732:	a907      	add	r1, sp, #28
    7734:	6818      	ldr	r0, [r3, #0]
    7736:	f7ff f9cf 	bl	6ad8 <_ZL5utox8mPc>
			PluggableUSB().getShortName(&name[32]);
    773a:	f000 ff2b 	bl	8594 <_Z12PluggableUSBv>
    773e:	a909      	add	r1, sp, #36	; 0x24
    7740:	f000 ff08 	bl	8554 <_ZN13PluggableUSB_12getShortNameEPc>
			return sendStringDescriptor((uint8_t*)name, setup.wLength);
    7744:	79a2      	ldrb	r2, [r4, #6]
    7746:	a901      	add	r1, sp, #4
    7748:	e7d8      	b.n	76fc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
    774a:	46c0      	nop			; (mov r8, r8)
    774c:	200002cc 	.word	0x200002cc
    7750:	0000be3c 	.word	0x0000be3c
    7754:	0000be2c 	.word	0x0000be2c
    7758:	0000be1c 	.word	0x0000be1c
    775c:	0000be30 	.word	0x0000be30
    7760:	0080a00c 	.word	0x0080a00c
    7764:	0080a040 	.word	0x0080a040
    7768:	0080a044 	.word	0x0080a044
    776c:	0080a048 	.word	0x0080a048

00007770 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>:
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
}

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    7770:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7772:	0006      	movs	r6, r0
	switch (setup.bRequest) {
    7774:	7848      	ldrb	r0, [r1, #1]
{
    7776:	000d      	movs	r5, r1
	switch (setup.bRequest) {
    7778:	280b      	cmp	r0, #11
    777a:	d811      	bhi.n	77a0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
    777c:	f001 f904 	bl	8988 <__gnu_thumb1_case_uqi>
    7780:	2e101d06 	.word	0x2e101d06
    7784:	70484310 	.word	0x70484310
    7788:	6c694f4c 	.word	0x6c694f4c
	case GET_STATUS:
		if (setup.bmRequestType == 0)  // device
    778c:	7809      	ldrb	r1, [r1, #0]
    778e:	aa01      	add	r2, sp, #4
    7790:	2900      	cmp	r1, #0
    7792:	d107      	bne.n	77a4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x34>
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
			armSend(0, buff, 2);
    7794:	2302      	movs	r3, #2
			uint8_t buff[] = { 0, 0 };
    7796:	7011      	strb	r1, [r2, #0]
    7798:	7051      	strb	r1, [r2, #1]
			armSend(0, buff, 2);
    779a:	0030      	movs	r0, r6
    779c:	f7ff feac 	bl	74f8 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    77a0:	2001      	movs	r0, #1
		return true;

	default:
		return true;
	}
}
    77a2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
			uint8_t buff[] = { 0, 0 };
    77a4:	2300      	movs	r3, #0
    77a6:	7013      	strb	r3, [r2, #0]
    77a8:	7053      	strb	r3, [r2, #1]
			if (isEndpointHalt == 1)
    77aa:	4b2e      	ldr	r3, [pc, #184]	; (7864 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
			if (isRemoteWakeUpEnabled == 1)
    77ac:	781b      	ldrb	r3, [r3, #0]
    77ae:	2b01      	cmp	r3, #1
    77b0:	d100      	bne.n	77b4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x44>
				buff[0] = 1;
    77b2:	7013      	strb	r3, [r2, #0]
			armSend(0, buff, 2);
    77b4:	2302      	movs	r3, #2
		armSend(0, (void*)&_usbSetInterface, 1);
    77b6:	2100      	movs	r1, #0
    77b8:	e7ef      	b.n	779a <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    77ba:	788a      	ldrb	r2, [r1, #2]
    77bc:	2300      	movs	r3, #0
    77be:	2a01      	cmp	r2, #1
    77c0:	d104      	bne.n	77cc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x5c>
			uint8_t buff[] = { 0, 0 };
    77c2:	aa01      	add	r2, sp, #4
    77c4:	7013      	strb	r3, [r2, #0]
    77c6:	7053      	strb	r3, [r2, #1]
			if (isRemoteWakeUpEnabled == 1)
    77c8:	4b27      	ldr	r3, [pc, #156]	; (7868 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
    77ca:	e7ef      	b.n	77ac <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x3c>
			isEndpointHalt = 0;
    77cc:	4a25      	ldr	r2, [pc, #148]	; (7864 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    77ce:	7013      	strb	r3, [r2, #0]
    77d0:	4a26      	ldr	r2, [pc, #152]	; (786c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    77d2:	6993      	ldr	r3, [r2, #24]
    77d4:	0b9b      	lsrs	r3, r3, #14
    77d6:	039b      	lsls	r3, r3, #14
    77d8:	6193      	str	r3, [r2, #24]
    77da:	e7e1      	b.n	77a0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    77dc:	788c      	ldrb	r4, [r1, #2]
    77de:	2c01      	cmp	r4, #1
    77e0:	d106      	bne.n	77f0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x80>
			uint8_t buff[] = { 0 };
    77e2:	2100      	movs	r1, #0
			isRemoteWakeUpEnabled = 1;
    77e4:	4b20      	ldr	r3, [pc, #128]	; (7868 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
			uint8_t buff[] = { 0 };
    77e6:	aa01      	add	r2, sp, #4
			isRemoteWakeUpEnabled = 1;
    77e8:	701c      	strb	r4, [r3, #0]
			uint8_t buff[] = { 0 };
    77ea:	7011      	strb	r1, [r2, #0]
			armSend(0, buff, 1);
    77ec:	0023      	movs	r3, r4
    77ee:	e7d4      	b.n	779a <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 0) // ENDPOINTHALT
    77f0:	2c00      	cmp	r4, #0
    77f2:	d108      	bne.n	7806 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x96>
			isEndpointHalt = 1;
    77f4:	2001      	movs	r0, #1
    77f6:	4b1b      	ldr	r3, [pc, #108]	; (7864 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    77f8:	4a1c      	ldr	r2, [pc, #112]	; (786c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    77fa:	7018      	strb	r0, [r3, #0]
    77fc:	6993      	ldr	r3, [r2, #24]
    77fe:	0b9b      	lsrs	r3, r3, #14
    7800:	039b      	lsls	r3, r3, #14
    7802:	6193      	str	r3, [r2, #24]
			return true;
    7804:	e7cd      	b.n	77a2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		setAddress(setup.wValueL);
    7806:	78a9      	ldrb	r1, [r5, #2]
    7808:	0030      	movs	r0, r6
    780a:	f7ff fc1f 	bl	704c <_ZN14USBDeviceClass10setAddressEm>
    780e:	e7c7      	b.n	77a0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		return sendDescriptor(setup);
    7810:	0030      	movs	r0, r6
    7812:	f7ff ff3b 	bl	768c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>
    7816:	e7c4      	b.n	77a2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		armSend(0, (void*)&_usbConfiguration, 1);
    7818:	2301      	movs	r3, #1
    781a:	4a15      	ldr	r2, [pc, #84]	; (7870 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    781c:	e7cb      	b.n	77b6 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    781e:	780b      	ldrb	r3, [r1, #0]
			return false;
    7820:	2000      	movs	r0, #0
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    7822:	06db      	lsls	r3, r3, #27
    7824:	d1bd      	bne.n	77a2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
			initEndpoints();
    7826:	0030      	movs	r0, r6
    7828:	f7ff fcd6 	bl	71d8 <_ZN14USBDeviceClass13initEndpointsEv>
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    782c:	202a      	movs	r0, #42	; 0x2a
    782e:	2102      	movs	r1, #2
			_usbConfiguration = setup.wValueL;
    7830:	78aa      	ldrb	r2, [r5, #2]
    7832:	4b0f      	ldr	r3, [pc, #60]	; (7870 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    7834:	30ff      	adds	r0, #255	; 0xff
    7836:	601a      	str	r2, [r3, #0]
    7838:	4a0c      	ldr	r2, [pc, #48]	; (786c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    783a:	6813      	ldr	r3, [r2, #0]
    783c:	5c1c      	ldrb	r4, [r3, r0]
    783e:	4321      	orrs	r1, r4
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    7840:	244a      	movs	r4, #74	; 0x4a
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    7842:	5419      	strb	r1, [r3, r0]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    7844:	34ff      	adds	r4, #255	; 0xff
    7846:	5d19      	ldrb	r1, [r3, r4]
    7848:	3829      	subs	r0, #41	; 0x29
    784a:	38ff      	subs	r0, #255	; 0xff
    784c:	4301      	orrs	r1, r0
    784e:	5519      	strb	r1, [r3, r4]
    7850:	e7d4      	b.n	77fc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x8c>
		armSend(0, (void*)&_usbSetInterface, 1);
    7852:	2301      	movs	r3, #1
    7854:	4a07      	ldr	r2, [pc, #28]	; (7874 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    7856:	e7ae      	b.n	77b6 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		_usbSetInterface = setup.wValueL;
    7858:	788a      	ldrb	r2, [r1, #2]
    785a:	4b06      	ldr	r3, [pc, #24]	; (7874 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    785c:	601a      	str	r2, [r3, #0]
    785e:	e7b7      	b.n	77d0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x60>
		return false;
    7860:	2000      	movs	r0, #0
    7862:	e79e      	b.n	77a2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
    7864:	200002ec 	.word	0x200002ec
    7868:	200002f4 	.word	0x200002f4
    786c:	20000784 	.word	0x20000784
    7870:	2000077c 	.word	0x2000077c
    7874:	20000780 	.word	0x20000780

00007878 <_ZN14USBDeviceClass10ISRHandlerEv>:

void USBDeviceClass::ISRHandler()
{

	if (_pack_message == true) {
    7878:	4b3c      	ldr	r3, [pc, #240]	; (796c <_ZN14USBDeviceClass10ISRHandlerEv+0xf4>)
{
    787a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (_pack_message == true) {
    787c:	781c      	ldrb	r4, [r3, #0]
{
    787e:	0007      	movs	r7, r0
	if (_pack_message == true) {
    7880:	2c00      	cmp	r4, #0
    7882:	d15e      	bne.n	7942 <_ZN14USBDeviceClass10ISRHandlerEv+0xca>
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
    7884:	4e3a      	ldr	r6, [pc, #232]	; (7970 <_ZN14USBDeviceClass10ISRHandlerEv+0xf8>)
    7886:	6833      	ldr	r3, [r6, #0]
    7888:	8b9b      	ldrh	r3, [r3, #28]
		return;
	}
	// End-Of-Reset
	if (usbd.isEndOfResetInterrupt())
    788a:	071b      	lsls	r3, r3, #28
    788c:	d50e      	bpl.n	78ac <_ZN14USBDeviceClass10ISRHandlerEv+0x34>
    788e:	0021      	movs	r1, r4
    7890:	0020      	movs	r0, r4
    7892:	f7ff f933 	bl	6afc <_ZN14USBDeviceClass6initEPEmm.part.5>
	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
    7896:	6832      	ldr	r2, [r6, #0]
    7898:	2310      	movs	r3, #16
    789a:	0011      	movs	r1, r2
    789c:	31ff      	adds	r1, #255	; 0xff
    789e:	7a88      	ldrb	r0, [r1, #10]
    78a0:	4303      	orrs	r3, r0
    78a2:	728b      	strb	r3, [r1, #10]
		initEP(0, USB_ENDPOINT_TYPE_CONTROL);

		// Enable Setup-Received interrupt
		usbd.epBank0EnableSetupReceived(0);

		_usbConfiguration = 0;
    78a4:	4b33      	ldr	r3, [pc, #204]	; (7974 <_ZN14USBDeviceClass10ISRHandlerEv+0xfc>)
    78a6:	601c      	str	r4, [r3, #0]
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
    78a8:	2308      	movs	r3, #8
    78aa:	8393      	strh	r3, [r2, #28]
	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
    78ac:	6833      	ldr	r3, [r6, #0]
    78ae:	8b9a      	ldrh	r2, [r3, #28]

		usbd.ackEndOfResetInterrupt();
	}

	// Start-Of-Frame
	if (usbd.isStartOfFrameInterrupt())
    78b0:	0752      	lsls	r2, r2, #29
    78b2:	d501      	bpl.n	78b8 <_ZN14USBDeviceClass10ISRHandlerEv+0x40>
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
    78b4:	2204      	movs	r2, #4
    78b6:	839a      	strh	r2, [r3, #28]
	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
    78b8:	33ff      	adds	r3, #255	; 0xff
    78ba:	7a1a      	ldrb	r2, [r3, #8]
		}
#endif
	}

	// Endpoint 0 Received Setup interrupt
	if (usbd.epBank0IsSetupReceived(0))
    78bc:	06d2      	lsls	r2, r2, #27
    78be:	d520      	bpl.n	7902 <_ZN14USBDeviceClass10ISRHandlerEv+0x8a>
	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
    78c0:	2210      	movs	r2, #16
    78c2:	721a      	strb	r2, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    78c4:	7959      	ldrb	r1, [r3, #5]
    78c6:	3230      	adds	r2, #48	; 0x30
    78c8:	430a      	orrs	r2, r1
    78ca:	715a      	strb	r2, [r3, #5]
		/* Clear the Bank 0 ready flag on Control OUT */
		// The RAM Buffer is empty: we can receive data
		usbd.epBank0ResetReady(0);

		bool ok;
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    78cc:	2360      	movs	r3, #96	; 0x60
    78ce:	492a      	ldr	r1, [pc, #168]	; (7978 <_ZN14USBDeviceClass10ISRHandlerEv+0x100>)
			// Standard Requests
			ok = handleStandardSetup(*setup);
    78d0:	0038      	movs	r0, r7
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    78d2:	780a      	ldrb	r2, [r1, #0]
    78d4:	421a      	tst	r2, r3
    78d6:	d135      	bne.n	7944 <_ZN14USBDeviceClass10ISRHandlerEv+0xcc>
			ok = handleStandardSetup(*setup);
    78d8:	f7ff ff4a 	bl	7770 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>
		} else {
			// Class Interface Requests
			ok = handleClassInterfaceSetup(*setup);
		}

		if (ok) {
    78dc:	2800      	cmp	r0, #0
    78de:	d034      	beq.n	794a <_ZN14USBDeviceClass10ISRHandlerEv+0xd2>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    78e0:	2280      	movs	r2, #128	; 0x80
    78e2:	6833      	ldr	r3, [r6, #0]
    78e4:	4252      	negs	r2, r2
    78e6:	33ff      	adds	r3, #255	; 0xff
    78e8:	7999      	ldrb	r1, [r3, #6]
    78ea:	430a      	orrs	r2, r1
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    78ec:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
    78ee:	6833      	ldr	r3, [r6, #0]
    78f0:	33ff      	adds	r3, #255	; 0xff
    78f2:	7a1a      	ldrb	r2, [r3, #8]
			usbd.epBank1SetReady(0);
		} else {
			stall(0);
		}

		if (usbd.epBank1IsStalled(0))
    78f4:	0652      	lsls	r2, r2, #25
    78f6:	d504      	bpl.n	7902 <_ZN14USBDeviceClass10ISRHandlerEv+0x8a>
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
    78f8:	2240      	movs	r2, #64	; 0x40
    78fa:	721a      	strb	r2, [r3, #8]
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    78fc:	7a59      	ldrb	r1, [r3, #9]
    78fe:	430a      	orrs	r2, r1
    7900:	725a      	strb	r2, [r3, #9]
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }
    7902:	6833      	ldr	r3, [r6, #0]
		}

	} // end Received Setup handler

	uint8_t i=0;
	uint8_t ept_int = usbd.epInterruptSummary() & 0xFE; // Remove endpoint number 0 (setup)
    7904:	2500      	movs	r5, #0
    7906:	8c1c      	ldrh	r4, [r3, #32]
    7908:	2301      	movs	r3, #1
    790a:	439c      	bics	r4, r3
    790c:	b2e4      	uxtb	r4, r4
	while (ept_int != 0)
	{
		// Check if endpoint has a pending interrupt
		if ((ept_int & (1 << i)) != 0)
    790e:	9301      	str	r3, [sp, #4]
    7910:	b2e9      	uxtb	r1, r5
	while (ept_int != 0)
    7912:	2c00      	cmp	r4, #0
    7914:	d015      	beq.n	7942 <_ZN14USBDeviceClass10ISRHandlerEv+0xca>
		if ((ept_int & (1 << i)) != 0)
    7916:	0023      	movs	r3, r4
    7918:	412b      	asrs	r3, r5
    791a:	9a01      	ldr	r2, [sp, #4]
    791c:	4213      	tst	r3, r2
    791e:	d00d      	beq.n	793c <_ZN14USBDeviceClass10ISRHandlerEv+0xc4>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    7920:	002b      	movs	r3, r5
    7922:	6832      	ldr	r2, [r6, #0]
    7924:	3308      	adds	r3, #8
    7926:	015b      	lsls	r3, r3, #5
    7928:	18d3      	adds	r3, r2, r3
    792a:	79da      	ldrb	r2, [r3, #7]
		{
			// Endpoint Transfer Complete (0/1) Interrupt
			if (usbd.epBank0IsTransferComplete(i) ||
    792c:	07d2      	lsls	r2, r2, #31
    792e:	d413      	bmi.n	7958 <_ZN14USBDeviceClass10ISRHandlerEv+0xe0>
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    7930:	79db      	ldrb	r3, [r3, #7]
    7932:	079b      	lsls	r3, r3, #30
    7934:	d410      	bmi.n	7958 <_ZN14USBDeviceClass10ISRHandlerEv+0xe0>
					epHandlers[i]->handleEndpoint();
				} else {
					handleEndpoint(i);
				}
			}
			ept_int &= ~(1 << i);
    7936:	9b01      	ldr	r3, [sp, #4]
    7938:	40ab      	lsls	r3, r5
    793a:	439c      	bics	r4, r3
    793c:	3501      	adds	r5, #1
		}
		i++;
		if (i > USB_EPT_NUM)
    793e:	2d09      	cmp	r5, #9
    7940:	d1e6      	bne.n	7910 <_ZN14USBDeviceClass10ISRHandlerEv+0x98>
			break;  // fire exit
	}
}
    7942:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			ok = handleClassInterfaceSetup(*setup);
    7944:	f7ff fbb2 	bl	70ac <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>
    7948:	e7c8      	b.n	78dc <_ZN14USBDeviceClass10ISRHandlerEv+0x64>
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    794a:	2220      	movs	r2, #32
    794c:	4b0b      	ldr	r3, [pc, #44]	; (797c <_ZN14USBDeviceClass10ISRHandlerEv+0x104>)
    794e:	e7cd      	b.n	78ec <_ZN14USBDeviceClass10ISRHandlerEv+0x74>
					epHandlers[i]->handleEndpoint();
    7950:	6803      	ldr	r3, [r0, #0]
    7952:	681b      	ldr	r3, [r3, #0]
    7954:	4798      	blx	r3
    7956:	e7ee      	b.n	7936 <_ZN14USBDeviceClass10ISRHandlerEv+0xbe>
				if (epHandlers[i]) {
    7958:	4b09      	ldr	r3, [pc, #36]	; (7980 <_ZN14USBDeviceClass10ISRHandlerEv+0x108>)
    795a:	00aa      	lsls	r2, r5, #2
    795c:	58d0      	ldr	r0, [r2, r3]
    795e:	2800      	cmp	r0, #0
    7960:	d1f6      	bne.n	7950 <_ZN14USBDeviceClass10ISRHandlerEv+0xd8>
					handleEndpoint(i);
    7962:	0038      	movs	r0, r7
    7964:	f7ff fad6 	bl	6f14 <_ZN14USBDeviceClass14handleEndpointEh>
    7968:	e7e5      	b.n	7936 <_ZN14USBDeviceClass10ISRHandlerEv+0xbe>
    796a:	46c0      	nop			; (mov r8, r8)
    796c:	20000779 	.word	0x20000779
    7970:	20000784 	.word	0x20000784
    7974:	2000077c 	.word	0x2000077c
    7978:	200004b8 	.word	0x200004b8
    797c:	410050ff 	.word	0x410050ff
    7980:	200002d0 	.word	0x200002d0

00007984 <UDD_Handler>:
extern "C" void UDD_Handler(void) {
    7984:	b510      	push	{r4, lr}
	USBDevice.ISRHandler();
    7986:	4802      	ldr	r0, [pc, #8]	; (7990 <UDD_Handler+0xc>)
    7988:	f7ff ff76 	bl	7878 <_ZN14USBDeviceClass10ISRHandlerEv>
}
    798c:	bd10      	pop	{r4, pc}
    798e:	46c0      	nop			; (mov r8, r8)
    7990:	200002cc 	.word	0x200002cc

00007994 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv>:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
    7994:	4a01      	ldr	r2, [pc, #4]	; (799c <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0x8>)
    7996:	4b02      	ldr	r3, [pc, #8]	; (79a0 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0xc>)
    7998:	601a      	str	r2, [r3, #0]
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    799a:	4770      	bx	lr
    799c:	41005000 	.word	0x41005000
    79a0:	20000784 	.word	0x20000784

000079a4 <init>:
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
  // Set Systick to 1ms interval, common to all Cortex-M variants
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    79a4:	21fa      	movs	r1, #250	; 0xfa
    79a6:	4b2d      	ldr	r3, [pc, #180]	; (7a5c <init+0xb8>)
{
    79a8:	b510      	push	{r4, lr}
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    79aa:	6818      	ldr	r0, [r3, #0]
    79ac:	0089      	lsls	r1, r1, #2
    79ae:	f000 ffff 	bl	89b0 <__udivsi3>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    79b2:	4b2b      	ldr	r3, [pc, #172]	; (7a60 <init+0xbc>)
    79b4:	3801      	subs	r0, #1
    79b6:	4298      	cmp	r0, r3
    79b8:	d84f      	bhi.n	7a5a <init+0xb6>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    79ba:	492a      	ldr	r1, [pc, #168]	; (7a64 <init+0xc0>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    79bc:	4a2a      	ldr	r2, [pc, #168]	; (7a68 <init+0xc4>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    79be:	6048      	str	r0, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    79c0:	20c0      	movs	r0, #192	; 0xc0
    79c2:	6a13      	ldr	r3, [r2, #32]
    79c4:	0600      	lsls	r0, r0, #24
    79c6:	021b      	lsls	r3, r3, #8
    79c8:	0a1b      	lsrs	r3, r3, #8
    79ca:	4303      	orrs	r3, r0
    79cc:	6213      	str	r3, [r2, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    79ce:	2300      	movs	r3, #0
    79d0:	608b      	str	r3, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    79d2:	3307      	adds	r3, #7
    79d4:	600b      	str	r3, [r1, #0]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    79d6:	2180      	movs	r1, #128	; 0x80
    79d8:	6a13      	ldr	r3, [r2, #32]
    79da:	0609      	lsls	r1, r1, #24
    79dc:	021b      	lsls	r3, r3, #8
    79de:	0a1b      	lsrs	r3, r3, #8
    79e0:	430b      	orrs	r3, r1
    79e2:	6213      	str	r3, [r2, #32]
//
//  // Clock EIC for I/O interrupts
//  PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    79e4:	22fc      	movs	r2, #252	; 0xfc
    79e6:	4b21      	ldr	r3, [pc, #132]	; (7a6c <init+0xc8>)
    79e8:	6a19      	ldr	r1, [r3, #32]
    79ea:	430a      	orrs	r2, r1
    79ec:	621a      	str	r2, [r3, #32]

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    79ee:	22fc      	movs	r2, #252	; 0xfc
    79f0:	6a19      	ldr	r1, [r3, #32]
    79f2:	0192      	lsls	r2, r2, #6
    79f4:	430a      	orrs	r2, r1
    79f6:	621a      	str	r2, [r3, #32]

  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
    79f8:	22a0      	movs	r2, #160	; 0xa0
    79fa:	6a19      	ldr	r1, [r3, #32]
    79fc:	02d2      	lsls	r2, r2, #11
    79fe:	430a      	orrs	r2, r1
    7a00:	621a      	str	r2, [r3, #32]
//    pinMode( ul, INPUT ) ; // Don't do this if low power is needed.
  }

  // Initialize Analog Controller
  // Setting clock
  while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    7a02:	4b1b      	ldr	r3, [pc, #108]	; (7a70 <init+0xcc>)
    7a04:	001c      	movs	r4, r3
    7a06:	785a      	ldrb	r2, [r3, #1]
    7a08:	b252      	sxtb	r2, r2
    7a0a:	2a00      	cmp	r2, #0
    7a0c:	dbfb      	blt.n	7a06 <init+0x62>

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_ADC ) | // Generic Clock ADC
    7a0e:	4a19      	ldr	r2, [pc, #100]	; (7a74 <init+0xd0>)
    7a10:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    7a12:	4b19      	ldr	r3, [pc, #100]	; (7a78 <init+0xd4>)
    7a14:	001a      	movs	r2, r3
    7a16:	7e59      	ldrb	r1, [r3, #25]
    7a18:	09c9      	lsrs	r1, r1, #7
    7a1a:	2901      	cmp	r1, #1
    7a1c:	d0fb      	beq.n	7a16 <init+0x72>

  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |    // Divide Clock by 512.
    7a1e:	21e4      	movs	r1, #228	; 0xe4
    7a20:	00c9      	lsls	r1, r1, #3
    7a22:	8099      	strh	r1, [r3, #4]
                   ADC_CTRLB_RESSEL_10BIT;         // 10 bits resolution as default

  ADC->SAMPCTRL.reg = 0x3f;                        // Set max Sampling Time Length
    7a24:	213f      	movs	r1, #63	; 0x3f
    7a26:	70d9      	strb	r1, [r3, #3]

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    7a28:	7e53      	ldrb	r3, [r2, #25]
    7a2a:	09db      	lsrs	r3, r3, #7
    7a2c:	2b01      	cmp	r3, #1
    7a2e:	d0fb      	beq.n	7a28 <init+0x84>

  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    7a30:	23c0      	movs	r3, #192	; 0xc0

  // Averaging (see datasheet table in AVGCTRL register description)
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    7a32:	2000      	movs	r0, #0
  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    7a34:	015b      	lsls	r3, r3, #5
    7a36:	6113      	str	r3, [r2, #16]
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    7a38:	7090      	strb	r0, [r2, #2]
                     ADC_AVGCTRL_ADJRES(0x0ul);   // Adjusting result by 0

  analogReference( AR_DEFAULT ) ; // Analog Reference is AREF pin (3.3v)
    7a3a:	f000 f82d 	bl	7a98 <analogReference>

  // Initialize DAC
  // Setting clock
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
    7a3e:	7863      	ldrb	r3, [r4, #1]
    7a40:	b25b      	sxtb	r3, r3
    7a42:	2b00      	cmp	r3, #0
    7a44:	dbfb      	blt.n	7a3e <init+0x9a>
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    7a46:	4b0d      	ldr	r3, [pc, #52]	; (7a7c <init+0xd8>)
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    7a48:	4a0d      	ldr	r2, [pc, #52]	; (7a80 <init+0xdc>)
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    7a4a:	8063      	strh	r3, [r4, #2]
  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    7a4c:	79d3      	ldrb	r3, [r2, #7]
    7a4e:	09db      	lsrs	r3, r3, #7
    7a50:	2b01      	cmp	r3, #1
    7a52:	d0fb      	beq.n	7a4c <init+0xa8>
  DAC->CTRLB.reg = DAC_CTRLB_REFSEL_AVCC | // Using the 3.3V reference
    7a54:	2341      	movs	r3, #65	; 0x41
    7a56:	7053      	strb	r3, [r2, #1]
                   DAC_CTRLB_EOEN ;        // External Output Enable (Vout)
}
    7a58:	bd10      	pop	{r4, pc}
    7a5a:	e7fe      	b.n	7a5a <init+0xb6>
    7a5c:	20000084 	.word	0x20000084
    7a60:	00ffffff 	.word	0x00ffffff
    7a64:	e000e010 	.word	0xe000e010
    7a68:	e000ed00 	.word	0xe000ed00
    7a6c:	40000400 	.word	0x40000400
    7a70:	40000c00 	.word	0x40000c00
    7a74:	0000401e 	.word	0x0000401e
    7a78:	42004000 	.word	0x42004000
    7a7c:	00004021 	.word	0x00004021
    7a80:	42004800 	.word	0x42004800

00007a84 <mapResolution>:
  _writeResolution = res;
}

static inline uint32_t mapResolution(uint32_t value, uint32_t from, uint32_t to)
{
  if (from == to) {
    7a84:	4291      	cmp	r1, r2
    7a86:	d002      	beq.n	7a8e <mapResolution+0xa>
    return value;
  }
  if (from > to) {
    7a88:	d902      	bls.n	7a90 <mapResolution+0xc>
    return value >> (from-to);
    7a8a:	1a8a      	subs	r2, r1, r2
    7a8c:	40d0      	lsrs	r0, r2
  }
  return value << (to-from);
}
    7a8e:	4770      	bx	lr
  return value << (to-from);
    7a90:	1a52      	subs	r2, r2, r1
    7a92:	4090      	lsls	r0, r2
    7a94:	e7fb      	b.n	7a8e <mapResolution+0xa>
	...

00007a98 <analogReference>:
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    7a98:	4a16      	ldr	r2, [pc, #88]	; (7af4 <analogReference+0x5c>)
 * External Reference should be between 1v and VDDANA-0.6v=2.7v
 *
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
    7a9a:	b500      	push	{lr}
    7a9c:	0013      	movs	r3, r2
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    7a9e:	7e51      	ldrb	r1, [r2, #25]
    7aa0:	09c9      	lsrs	r1, r1, #7
    7aa2:	2901      	cmp	r1, #1
    7aa4:	d0fb      	beq.n	7a9e <analogReference+0x6>
  syncADC();
  switch (mode)
    7aa6:	3801      	subs	r0, #1
    7aa8:	2804      	cmp	r0, #4
    7aaa:	d816      	bhi.n	7ada <analogReference+0x42>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
      break;

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    7aac:	6919      	ldr	r1, [r3, #16]
    7aae:	4a12      	ldr	r2, [pc, #72]	; (7af8 <analogReference+0x60>)
    7ab0:	400a      	ands	r2, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    7ab2:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    7ab4:	611a      	str	r2, [r3, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    7ab6:	785a      	ldrb	r2, [r3, #1]
    7ab8:	438a      	bics	r2, r1
  switch (mode)
    7aba:	f000 ff65 	bl	8988 <__gnu_thumb1_case_uqi>
    7abe:	0803      	.short	0x0803
    7ac0:	0b06      	.short	0x0b06
    7ac2:	03          	.byte	0x03
    7ac3:	00          	.byte	0x00
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; // 1/1.48 VDDANA = 1/1.48* 3V3 = 2.2297
    7ac4:	0011      	movs	r1, r2
    7ac6:	2201      	movs	r2, #1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    7ac8:	430a      	orrs	r2, r1
    7aca:	705a      	strb	r2, [r3, #1]
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
      break;
  }
}
    7acc:	bd00      	pop	{pc}
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;
    7ace:	0011      	movs	r1, r2
    7ad0:	2203      	movs	r2, #3
    7ad2:	e7f9      	b.n	7ac8 <analogReference+0x30>
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    7ad4:	0011      	movs	r1, r2
    7ad6:	2202      	movs	r2, #2
    7ad8:	e7f6      	b.n	7ac8 <analogReference+0x30>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    7ada:	23f0      	movs	r3, #240	; 0xf0
    7adc:	6911      	ldr	r1, [r2, #16]
    7ade:	051b      	lsls	r3, r3, #20
    7ae0:	430b      	orrs	r3, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    7ae2:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    7ae4:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    7ae6:	7853      	ldrb	r3, [r2, #1]
    7ae8:	438b      	bics	r3, r1
    7aea:	0019      	movs	r1, r3
    7aec:	2302      	movs	r3, #2
    7aee:	430b      	orrs	r3, r1
    7af0:	7053      	strb	r3, [r2, #1]
}
    7af2:	e7eb      	b.n	7acc <analogReference+0x34>
    7af4:	42004000 	.word	0x42004000
    7af8:	f0ffffff 	.word	0xf0ffffff

00007afc <analogRead>:

uint32_t analogRead(uint32_t pin)
{
    7afc:	b510      	push	{r4, lr}
    7afe:	0004      	movs	r4, r0
  uint32_t valueRead = 0;

  if (pin < A0) {
    7b00:	280e      	cmp	r0, #14
    7b02:	d800      	bhi.n	7b06 <analogRead+0xa>
    pin += A0;
    7b04:	340f      	adds	r4, #15
  }

  pinPeripheral(pin, PIO_ANALOG);
    7b06:	2101      	movs	r1, #1
    7b08:	0020      	movs	r0, r4
    7b0a:	f000 f8ed 	bl	7ce8 <pinPeripheral>

  if (pin == A0) { // Disable DAC, if analogWrite(A0,dval) used previously the DAC is enabled
    7b0e:	2c0f      	cmp	r4, #15
    7b10:	d10d      	bne.n	7b2e <analogRead+0x32>
  while (DAC->STATUS.bit.SYNCBUSY == 1)
    7b12:	4b28      	ldr	r3, [pc, #160]	; (7bb4 <analogRead+0xb8>)
    7b14:	0019      	movs	r1, r3
    7b16:	79da      	ldrb	r2, [r3, #7]
    7b18:	09d2      	lsrs	r2, r2, #7
    7b1a:	2a01      	cmp	r2, #1
    7b1c:	d0fb      	beq.n	7b16 <analogRead+0x1a>
    syncDAC();
    DAC->CTRLA.bit.ENABLE = 0x00; // Disable DAC
    7b1e:	2002      	movs	r0, #2
    7b20:	781a      	ldrb	r2, [r3, #0]
    7b22:	4382      	bics	r2, r0
    7b24:	701a      	strb	r2, [r3, #0]
  while (DAC->STATUS.bit.SYNCBUSY == 1)
    7b26:	79cb      	ldrb	r3, [r1, #7]
    7b28:	09db      	lsrs	r3, r3, #7
    7b2a:	2b01      	cmp	r3, #1
    7b2c:	d0fb      	beq.n	7b26 <analogRead+0x2a>
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    7b2e:	4922      	ldr	r1, [pc, #136]	; (7bb8 <analogRead+0xbc>)
    7b30:	000b      	movs	r3, r1
    7b32:	7e4a      	ldrb	r2, [r1, #25]
    7b34:	09d2      	lsrs	r2, r2, #7
    7b36:	2a01      	cmp	r2, #1
    7b38:	d0fb      	beq.n	7b32 <analogRead+0x36>
    //DAC->CTRLB.bit.EOEN = 0x00; // The DAC output is turned off.
    syncDAC();
  }

  syncADC();
  ADC->INPUTCTRL.bit.MUXPOS = g_APinDescription[pin].ulADCChannelNumber; // Selection for the positive ADC input
    7b3a:	2218      	movs	r2, #24
    7b3c:	4362      	muls	r2, r4
    7b3e:	4c1f      	ldr	r4, [pc, #124]	; (7bbc <analogRead+0xc0>)
    7b40:	18a4      	adds	r4, r4, r2
    7b42:	7c20      	ldrb	r0, [r4, #16]
    7b44:	241f      	movs	r4, #31
    7b46:	690a      	ldr	r2, [r1, #16]
    7b48:	4020      	ands	r0, r4
    7b4a:	43a2      	bics	r2, r4
    7b4c:	4302      	orrs	r2, r0
    7b4e:	610a      	str	r2, [r1, #16]
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    7b50:	7e5a      	ldrb	r2, [r3, #25]
    7b52:	09d2      	lsrs	r2, r2, #7
    7b54:	2a01      	cmp	r2, #1
    7b56:	d0fb      	beq.n	7b50 <analogRead+0x54>
   *
   * Before enabling the ADC, the asynchronous clock source must be selected and enabled, and the ADC reference must be
   * configured. The first conversion after the reference is changed must not be used.
   */
  syncADC();
  ADC->CTRLA.bit.ENABLE = 0x01;             // Enable ADC
    7b58:	2202      	movs	r2, #2
    7b5a:	7819      	ldrb	r1, [r3, #0]
    7b5c:	430a      	orrs	r2, r1
    7b5e:	701a      	strb	r2, [r3, #0]
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    7b60:	7e5a      	ldrb	r2, [r3, #25]
    7b62:	09d2      	lsrs	r2, r2, #7
    7b64:	2a01      	cmp	r2, #1
    7b66:	d0fb      	beq.n	7b60 <analogRead+0x64>

  // Start conversion
  syncADC();
  ADC->SWTRIG.bit.START = 1;
    7b68:	2202      	movs	r2, #2
    7b6a:	7b19      	ldrb	r1, [r3, #12]
    7b6c:	430a      	orrs	r2, r1
    7b6e:	731a      	strb	r2, [r3, #12]

  // Clear the Data Ready flag
  ADC->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    7b70:	2201      	movs	r2, #1
    7b72:	761a      	strb	r2, [r3, #24]
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    7b74:	7e5a      	ldrb	r2, [r3, #25]
    7b76:	09d2      	lsrs	r2, r2, #7
    7b78:	2a01      	cmp	r2, #1
    7b7a:	d0fb      	beq.n	7b74 <analogRead+0x78>

  // Start conversion again, since The first conversion after the reference is changed must not be used.
  syncADC();
  ADC->SWTRIG.bit.START = 1;
    7b7c:	2202      	movs	r2, #2
    7b7e:	7b19      	ldrb	r1, [r3, #12]
    7b80:	430a      	orrs	r2, r1
    7b82:	731a      	strb	r2, [r3, #12]

  // Store the value
  while (ADC->INTFLAG.bit.RESRDY == 0);   // Waiting for conversion to complete
    7b84:	7e1a      	ldrb	r2, [r3, #24]
    7b86:	07d2      	lsls	r2, r2, #31
    7b88:	d5fc      	bpl.n	7b84 <analogRead+0x88>
  valueRead = ADC->RESULT.reg;
    7b8a:	8b58      	ldrh	r0, [r3, #26]
    7b8c:	b280      	uxth	r0, r0
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    7b8e:	7e5a      	ldrb	r2, [r3, #25]
    7b90:	09d2      	lsrs	r2, r2, #7
    7b92:	2a01      	cmp	r2, #1
    7b94:	d0fb      	beq.n	7b8e <analogRead+0x92>

  syncADC();
  ADC->CTRLA.bit.ENABLE = 0x00;             // Disable ADC
    7b96:	2102      	movs	r1, #2
    7b98:	781a      	ldrb	r2, [r3, #0]
    7b9a:	438a      	bics	r2, r1
    7b9c:	701a      	strb	r2, [r3, #0]
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    7b9e:	7e5a      	ldrb	r2, [r3, #25]
    7ba0:	09d2      	lsrs	r2, r2, #7
    7ba2:	2a01      	cmp	r2, #1
    7ba4:	d0fb      	beq.n	7b9e <analogRead+0xa2>
  syncADC();

  return mapResolution(valueRead, _ADCResolution, _readResolution);
    7ba6:	4b06      	ldr	r3, [pc, #24]	; (7bc0 <analogRead+0xc4>)
    7ba8:	681a      	ldr	r2, [r3, #0]
    7baa:	4b06      	ldr	r3, [pc, #24]	; (7bc4 <analogRead+0xc8>)
    7bac:	6819      	ldr	r1, [r3, #0]
    7bae:	f7ff ff69 	bl	7a84 <mapResolution>
}
    7bb2:	bd10      	pop	{r4, pc}
    7bb4:	42004800 	.word	0x42004800
    7bb8:	42004000 	.word	0x42004000
    7bbc:	0000be50 	.word	0x0000be50
    7bc0:	2000008c 	.word	0x2000008c
    7bc4:	20000088 	.word	0x20000088

00007bc8 <pinMode>:
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    7bc8:	2318      	movs	r3, #24
{
    7bca:	b530      	push	{r4, r5, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    7bcc:	001d      	movs	r5, r3
{
    7bce:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    7bd0:	4345      	muls	r5, r0
    7bd2:	2008      	movs	r0, #8
    7bd4:	4a20      	ldr	r2, [pc, #128]	; (7c58 <pinMode+0x90>)
    7bd6:	1955      	adds	r5, r2, r5
    7bd8:	5628      	ldrsb	r0, [r5, r0]
    7bda:	3001      	adds	r0, #1
    7bdc:	d014      	beq.n	7c08 <pinMode+0x40>
  {
    return ;
  }

  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
    7bde:	2903      	cmp	r1, #3
    7be0:	d812      	bhi.n	7c08 <pinMode+0x40>
    7be2:	0008      	movs	r0, r1
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    break ;

    case INPUT_PULLDOWN:
      // Set pin to input mode with pull-down resistor enabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    7be4:	4363      	muls	r3, r4
    7be6:	56d1      	ldrsb	r1, [r2, r3]
    7be8:	18d3      	adds	r3, r2, r3
  switch ( ulMode )
    7bea:	f000 fecd 	bl	8988 <__gnu_thumb1_case_uqi>
    7bee:	2802      	.short	0x2802
    7bf0:	1b0e      	.short	0x1b0e
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    7bf2:	6858      	ldr	r0, [r3, #4]
    7bf4:	01cb      	lsls	r3, r1, #7
    7bf6:	2102      	movs	r1, #2
    7bf8:	4a18      	ldr	r2, [pc, #96]	; (7c5c <pinMode+0x94>)
    7bfa:	189b      	adds	r3, r3, r2
    7bfc:	181a      	adds	r2, r3, r0
    7bfe:	3240      	adds	r2, #64	; 0x40
    7c00:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    7c02:	2201      	movs	r2, #1
    7c04:	4082      	lsls	r2, r0
    7c06:	605a      	str	r2, [r3, #4]

    default:
      // do nothing
    break ;
  }
}
    7c08:	bd30      	pop	{r4, r5, pc}
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    7c0a:	6858      	ldr	r0, [r3, #4]
    7c0c:	01cb      	lsls	r3, r1, #7
    7c0e:	2106      	movs	r1, #6
    7c10:	4a12      	ldr	r2, [pc, #72]	; (7c5c <pinMode+0x94>)
    7c12:	189b      	adds	r3, r3, r2
    7c14:	181a      	adds	r2, r3, r0
    7c16:	3240      	adds	r2, #64	; 0x40
    7c18:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    7c1a:	2201      	movs	r2, #1
    7c1c:	4082      	lsls	r2, r0
    7c1e:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    7c20:	619a      	str	r2, [r3, #24]
    break ;
    7c22:	e7f1      	b.n	7c08 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    7c24:	6858      	ldr	r0, [r3, #4]
    7c26:	01cb      	lsls	r3, r1, #7
    7c28:	2106      	movs	r1, #6
    7c2a:	4a0c      	ldr	r2, [pc, #48]	; (7c5c <pinMode+0x94>)
    7c2c:	189b      	adds	r3, r3, r2
    7c2e:	181a      	adds	r2, r3, r0
    7c30:	3240      	adds	r2, #64	; 0x40
    7c32:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    7c34:	2201      	movs	r2, #1
    7c36:	4082      	lsls	r2, r0
    7c38:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    7c3a:	615a      	str	r2, [r3, #20]
    break ;
    7c3c:	e7e4      	b.n	7c08 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    7c3e:	6858      	ldr	r0, [r3, #4]
    7c40:	01cb      	lsls	r3, r1, #7
    7c42:	2102      	movs	r1, #2
    7c44:	4a05      	ldr	r2, [pc, #20]	; (7c5c <pinMode+0x94>)
    7c46:	189b      	adds	r3, r3, r2
    7c48:	181a      	adds	r2, r3, r0
    7c4a:	3240      	adds	r2, #64	; 0x40
    7c4c:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    7c4e:	2201      	movs	r2, #1
    7c50:	4082      	lsls	r2, r0
    7c52:	609a      	str	r2, [r3, #8]
    break ;
    7c54:	e7d8      	b.n	7c08 <pinMode+0x40>
    7c56:	46c0      	nop			; (mov r8, r8)
    7c58:	0000be50 	.word	0x0000be50
    7c5c:	41004400 	.word	0x41004400

00007c60 <digitalWrite>:

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    7c60:	2318      	movs	r3, #24
{
    7c62:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    7c64:	2408      	movs	r4, #8
    7c66:	4358      	muls	r0, r3
    7c68:	4a11      	ldr	r2, [pc, #68]	; (7cb0 <digitalWrite+0x50>)
    7c6a:	1813      	adds	r3, r2, r0
    7c6c:	571c      	ldrsb	r4, [r3, r4]
    7c6e:	3401      	adds	r4, #1
    7c70:	d01b      	beq.n	7caa <digitalWrite+0x4a>
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
  uint32_t pin = g_APinDescription[ulPin].ulPin;
  uint32_t pinMask = (1ul << pin);
    7c72:	2601      	movs	r6, #1
    7c74:	0035      	movs	r5, r6
  uint32_t pin = g_APinDescription[ulPin].ulPin;
    7c76:	685f      	ldr	r7, [r3, #4]

  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    7c78:	5683      	ldrsb	r3, [r0, r2]
  uint32_t pinMask = (1ul << pin);
    7c7a:	40bd      	lsls	r5, r7
  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    7c7c:	4a0d      	ldr	r2, [pc, #52]	; (7cb4 <digitalWrite+0x54>)
    7c7e:	01db      	lsls	r3, r3, #7
    7c80:	189a      	adds	r2, r3, r2
    7c82:	6890      	ldr	r0, [r2, #8]
    7c84:	4228      	tst	r0, r5
    7c86:	d10b      	bne.n	7ca0 <digitalWrite+0x40>
    // the pin is not an output, disable pull-up if val is LOW, otherwise enable pull-up
    PORT->Group[port].PINCFG[pin].bit.PULLEN = ((ulVal == LOW) ? 0 : 1) ;
    7c88:	000c      	movs	r4, r1
    7c8a:	1e60      	subs	r0, r4, #1
    7c8c:	4184      	sbcs	r4, r0
    7c8e:	19d2      	adds	r2, r2, r7
    7c90:	3240      	adds	r2, #64	; 0x40
    7c92:	7810      	ldrb	r0, [r2, #0]
    7c94:	4034      	ands	r4, r6
    7c96:	3603      	adds	r6, #3
    7c98:	00a4      	lsls	r4, r4, #2
    7c9a:	43b0      	bics	r0, r6
    7c9c:	4320      	orrs	r0, r4
    7c9e:	7010      	strb	r0, [r2, #0]
  }

  switch ( ulVal )
  {
    case LOW:
      PORT->Group[port].OUTCLR.reg = pinMask;
    7ca0:	4a04      	ldr	r2, [pc, #16]	; (7cb4 <digitalWrite+0x54>)
    7ca2:	189b      	adds	r3, r3, r2
  switch ( ulVal )
    7ca4:	2900      	cmp	r1, #0
    7ca6:	d101      	bne.n	7cac <digitalWrite+0x4c>
      PORT->Group[port].OUTCLR.reg = pinMask;
    7ca8:	615d      	str	r5, [r3, #20]
      PORT->Group[port].OUTSET.reg = pinMask;
    break ;
  }

  return ;
}
    7caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PORT->Group[port].OUTSET.reg = pinMask;
    7cac:	619d      	str	r5, [r3, #24]
    break ;
    7cae:	e7fc      	b.n	7caa <digitalWrite+0x4a>
    7cb0:	0000be50 	.word	0x0000be50
    7cb4:	41004400 	.word	0x41004400

00007cb8 <digitalRead>:

int digitalRead( uint32_t ulPin )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    7cb8:	2318      	movs	r3, #24
{
    7cba:	b510      	push	{r4, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    7cbc:	2408      	movs	r4, #8
    7cbe:	4358      	muls	r0, r3
    7cc0:	4907      	ldr	r1, [pc, #28]	; (7ce0 <digitalRead+0x28>)
    7cc2:	2300      	movs	r3, #0
    7cc4:	180a      	adds	r2, r1, r0
    7cc6:	5714      	ldrsb	r4, [r2, r4]
    7cc8:	3401      	adds	r4, #1
    7cca:	d006      	beq.n	7cda <digitalRead+0x22>
  {
    return LOW ;
  }

  if ( (PORT->Group[g_APinDescription[ulPin].ulPort].IN.reg & (1ul << g_APinDescription[ulPin].ulPin)) != 0 )
    7ccc:	5643      	ldrsb	r3, [r0, r1]
    7cce:	4905      	ldr	r1, [pc, #20]	; (7ce4 <digitalRead+0x2c>)
    7cd0:	01db      	lsls	r3, r3, #7
    7cd2:	185b      	adds	r3, r3, r1
    7cd4:	6a1b      	ldr	r3, [r3, #32]
    7cd6:	6852      	ldr	r2, [r2, #4]
    7cd8:	40d3      	lsrs	r3, r2
    7cda:	2001      	movs	r0, #1
  {
    return HIGH ;
  }

  return LOW ;
}
    7cdc:	4018      	ands	r0, r3
    7cde:	bd10      	pop	{r4, pc}
    7ce0:	0000be50 	.word	0x0000be50
    7ce4:	41004400 	.word	0x41004400

00007ce8 <pinPeripheral>:

#include "Arduino.h"
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
    7ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7cea:	0003      	movs	r3, r0
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    7cec:	2018      	movs	r0, #24
    7cee:	4358      	muls	r0, r3
    7cf0:	4a2a      	ldr	r2, [pc, #168]	; (7d9c <pinPeripheral+0xb4>)
    7cf2:	1810      	adds	r0, r2, r0
    7cf4:	7a00      	ldrb	r0, [r0, #8]
    7cf6:	b240      	sxtb	r0, r0
  {
    return -1 ;
    7cf8:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    7cfa:	3001      	adds	r0, #1
    7cfc:	d013      	beq.n	7d26 <pinPeripheral+0x3e>
  }

  switch ( ulPeripheral )
    7cfe:	1c48      	adds	r0, r1, #1
    case PIO_NOT_A_PIN:
      return -1l ;
    break ;
  }

  return 0l ;
    7d00:	2400      	movs	r4, #0
  switch ( ulPeripheral )
    7d02:	280c      	cmp	r0, #12
    7d04:	d80f      	bhi.n	7d26 <pinPeripheral+0x3e>
    7d06:	f000 fe3f 	bl	8988 <__gnu_thumb1_case_uqi>
    7d0a:	1c45      	.short	0x1c45
    7d0c:	1c1c1c1c 	.word	0x1c1c1c1c
    7d10:	071c1c1c 	.word	0x071c1c1c
    7d14:	0707      	.short	0x0707
    7d16:	07          	.byte	0x07
    7d17:	00          	.byte	0x00
      if ( ulPeripheral == PIO_INPUT )
    7d18:	2909      	cmp	r1, #9
    7d1a:	d106      	bne.n	7d2a <pinPeripheral+0x42>
        pinMode( ulPin, INPUT ) ;
    7d1c:	2100      	movs	r1, #0
          pinMode( ulPin, INPUT_PULLUP ) ;
    7d1e:	0018      	movs	r0, r3
    7d20:	f7ff ff52 	bl	7bc8 <pinMode>
  return 0l ;
    7d24:	2400      	movs	r4, #0
}
    7d26:	0020      	movs	r0, r4
    7d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ( ulPeripheral == PIO_INPUT_PULLUP )
    7d2a:	290a      	cmp	r1, #10
    7d2c:	d101      	bne.n	7d32 <pinPeripheral+0x4a>
          pinMode( ulPin, INPUT_PULLUP ) ;
    7d2e:	3908      	subs	r1, #8
    7d30:	e7f5      	b.n	7d1e <pinPeripheral+0x36>
  return 0l ;
    7d32:	2400      	movs	r4, #0
          if ( ulPeripheral == PIO_OUTPUT )
    7d34:	290b      	cmp	r1, #11
    7d36:	d1f6      	bne.n	7d26 <pinPeripheral+0x3e>
            pinMode( ulPin, OUTPUT ) ;
    7d38:	390a      	subs	r1, #10
    7d3a:	0018      	movs	r0, r3
    7d3c:	f7ff ff44 	bl	7bc8 <pinMode>
    7d40:	e7f1      	b.n	7d26 <pinPeripheral+0x3e>
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    7d42:	2018      	movs	r0, #24
    7d44:	4343      	muls	r3, r0
    7d46:	18d0      	adds	r0, r2, r3
    7d48:	6846      	ldr	r6, [r0, #4]
    7d4a:	2501      	movs	r5, #1
    7d4c:	0034      	movs	r4, r6
    7d4e:	56d2      	ldrsb	r2, [r2, r3]
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    7d50:	4813      	ldr	r0, [pc, #76]	; (7da0 <pinPeripheral+0xb8>)
    7d52:	01d2      	lsls	r2, r2, #7
    7d54:	1812      	adds	r2, r2, r0
    7d56:	0873      	lsrs	r3, r6, #1
    7d58:	18d3      	adds	r3, r2, r3
    7d5a:	3330      	adds	r3, #48	; 0x30
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    7d5c:	402c      	ands	r4, r5
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    7d5e:	7818      	ldrb	r0, [r3, #0]
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    7d60:	2c00      	cmp	r4, #0
    7d62:	d00b      	beq.n	7d7c <pinPeripheral+0x94>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    7d64:	240f      	movs	r4, #15
    7d66:	0109      	lsls	r1, r1, #4
    7d68:	4020      	ands	r0, r4
    7d6a:	4301      	orrs	r1, r0
    7d6c:	b2c9      	uxtb	r1, r1
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    7d6e:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    7d70:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    7d72:	3240      	adds	r2, #64	; 0x40
    7d74:	7813      	ldrb	r3, [r2, #0]
    7d76:	431d      	orrs	r5, r3
    7d78:	7015      	strb	r5, [r2, #0]
    7d7a:	e7d3      	b.n	7d24 <pinPeripheral+0x3c>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    7d7c:	270f      	movs	r7, #15
    7d7e:	43b8      	bics	r0, r7
    7d80:	4301      	orrs	r1, r0
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    7d82:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    7d84:	b2c9      	uxtb	r1, r1
    7d86:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    7d88:	0013      	movs	r3, r2
    7d8a:	3340      	adds	r3, #64	; 0x40
    7d8c:	781a      	ldrb	r2, [r3, #0]
    7d8e:	4315      	orrs	r5, r2
    7d90:	701d      	strb	r5, [r3, #0]
    7d92:	e7c8      	b.n	7d26 <pinPeripheral+0x3e>
      return -1l ;
    7d94:	2401      	movs	r4, #1
    7d96:	4264      	negs	r4, r4
    7d98:	e7c5      	b.n	7d26 <pinPeripheral+0x3e>
    7d9a:	46c0      	nop			; (mov r8, r8)
    7d9c:	0000be50 	.word	0x0000be50
    7da0:	41004400 	.word	0x41004400

00007da4 <_Z3maplllll>:
    7da4:	b510      	push	{r4, lr}
    7da6:	001c      	movs	r4, r3
    7da8:	1a43      	subs	r3, r0, r1
    7daa:	9802      	ldr	r0, [sp, #8]
    7dac:	1a51      	subs	r1, r2, r1
    7dae:	1b00      	subs	r0, r0, r4
    7db0:	4358      	muls	r0, r3
    7db2:	f000 fe87 	bl	8ac4 <__divsi3>
    7db6:	1900      	adds	r0, r0, r4
    7db8:	bd10      	pop	{r4, pc}

00007dba <_ZN6StringD1Ev>:
    7dba:	b510      	push	{r4, lr}
    7dbc:	0004      	movs	r4, r0
    7dbe:	6800      	ldr	r0, [r0, #0]
    7dc0:	f003 fac4 	bl	b34c <free>
    7dc4:	0020      	movs	r0, r4
    7dc6:	bd10      	pop	{r4, pc}

00007dc8 <_ZN6String10invalidateEv>:
    7dc8:	b510      	push	{r4, lr}
    7dca:	0004      	movs	r4, r0
    7dcc:	6800      	ldr	r0, [r0, #0]
    7dce:	2800      	cmp	r0, #0
    7dd0:	d001      	beq.n	7dd6 <_ZN6String10invalidateEv+0xe>
    7dd2:	f003 fabb 	bl	b34c <free>
    7dd6:	2300      	movs	r3, #0
    7dd8:	6023      	str	r3, [r4, #0]
    7dda:	60a3      	str	r3, [r4, #8]
    7ddc:	6063      	str	r3, [r4, #4]
    7dde:	bd10      	pop	{r4, pc}

00007de0 <_ZN6String12changeBufferEj>:
    7de0:	b570      	push	{r4, r5, r6, lr}
    7de2:	0004      	movs	r4, r0
    7de4:	000d      	movs	r5, r1
    7de6:	6800      	ldr	r0, [r0, #0]
    7de8:	3101      	adds	r1, #1
    7dea:	f003 fb73 	bl	b4d4 <realloc>
    7dee:	1e03      	subs	r3, r0, #0
    7df0:	d001      	beq.n	7df6 <_ZN6String12changeBufferEj+0x16>
    7df2:	2001      	movs	r0, #1
    7df4:	c428      	stmia	r4!, {r3, r5}
    7df6:	bd70      	pop	{r4, r5, r6, pc}

00007df8 <_ZN6String7reserveEj>:
    7df8:	6803      	ldr	r3, [r0, #0]
    7dfa:	b510      	push	{r4, lr}
    7dfc:	0004      	movs	r4, r0
    7dfe:	2b00      	cmp	r3, #0
    7e00:	d004      	beq.n	7e0c <_ZN6String7reserveEj+0x14>
    7e02:	6843      	ldr	r3, [r0, #4]
    7e04:	428b      	cmp	r3, r1
    7e06:	d301      	bcc.n	7e0c <_ZN6String7reserveEj+0x14>
    7e08:	2001      	movs	r0, #1
    7e0a:	bd10      	pop	{r4, pc}
    7e0c:	0020      	movs	r0, r4
    7e0e:	f7ff ffe7 	bl	7de0 <_ZN6String12changeBufferEj>
    7e12:	2800      	cmp	r0, #0
    7e14:	d0f9      	beq.n	7e0a <_ZN6String7reserveEj+0x12>
    7e16:	68a3      	ldr	r3, [r4, #8]
    7e18:	2b00      	cmp	r3, #0
    7e1a:	d1f5      	bne.n	7e08 <_ZN6String7reserveEj+0x10>
    7e1c:	6822      	ldr	r2, [r4, #0]
    7e1e:	7013      	strb	r3, [r2, #0]
    7e20:	e7f2      	b.n	7e08 <_ZN6String7reserveEj+0x10>

00007e22 <_ZN6String4copyEPKcj>:
    7e22:	b570      	push	{r4, r5, r6, lr}
    7e24:	000e      	movs	r6, r1
    7e26:	0011      	movs	r1, r2
    7e28:	0004      	movs	r4, r0
    7e2a:	0015      	movs	r5, r2
    7e2c:	f7ff ffe4 	bl	7df8 <_ZN6String7reserveEj>
    7e30:	2800      	cmp	r0, #0
    7e32:	d104      	bne.n	7e3e <_ZN6String4copyEPKcj+0x1c>
    7e34:	0020      	movs	r0, r4
    7e36:	f7ff ffc7 	bl	7dc8 <_ZN6String10invalidateEv>
    7e3a:	0020      	movs	r0, r4
    7e3c:	bd70      	pop	{r4, r5, r6, pc}
    7e3e:	60a5      	str	r5, [r4, #8]
    7e40:	0031      	movs	r1, r6
    7e42:	6820      	ldr	r0, [r4, #0]
    7e44:	f003 fbac 	bl	b5a0 <strcpy>
    7e48:	e7f7      	b.n	7e3a <_ZN6String4copyEPKcj+0x18>

00007e4a <_ZN6StringC1EPKc>:
    7e4a:	2300      	movs	r3, #0
    7e4c:	b570      	push	{r4, r5, r6, lr}
    7e4e:	0004      	movs	r4, r0
    7e50:	000d      	movs	r5, r1
    7e52:	6003      	str	r3, [r0, #0]
    7e54:	6043      	str	r3, [r0, #4]
    7e56:	6083      	str	r3, [r0, #8]
    7e58:	4299      	cmp	r1, r3
    7e5a:	d007      	beq.n	7e6c <_ZN6StringC1EPKc+0x22>
    7e5c:	0008      	movs	r0, r1
    7e5e:	f003 fba7 	bl	b5b0 <strlen>
    7e62:	0029      	movs	r1, r5
    7e64:	0002      	movs	r2, r0
    7e66:	0020      	movs	r0, r4
    7e68:	f7ff ffdb 	bl	7e22 <_ZN6String4copyEPKcj>
    7e6c:	0020      	movs	r0, r4
    7e6e:	bd70      	pop	{r4, r5, r6, pc}

00007e70 <_ZN6StringaSEPKc>:
    7e70:	b570      	push	{r4, r5, r6, lr}
    7e72:	0004      	movs	r4, r0
    7e74:	1e0d      	subs	r5, r1, #0
    7e76:	d009      	beq.n	7e8c <_ZN6StringaSEPKc+0x1c>
    7e78:	0008      	movs	r0, r1
    7e7a:	f003 fb99 	bl	b5b0 <strlen>
    7e7e:	0029      	movs	r1, r5
    7e80:	0002      	movs	r2, r0
    7e82:	0020      	movs	r0, r4
    7e84:	f7ff ffcd 	bl	7e22 <_ZN6String4copyEPKcj>
    7e88:	0020      	movs	r0, r4
    7e8a:	bd70      	pop	{r4, r5, r6, pc}
    7e8c:	f7ff ff9c 	bl	7dc8 <_ZN6String10invalidateEv>
    7e90:	e7fa      	b.n	7e88 <_ZN6StringaSEPKc+0x18>

00007e92 <_ZN6StringC1Ehh>:
    7e92:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    7e94:	0004      	movs	r4, r0
    7e96:	2300      	movs	r3, #0
    7e98:	0008      	movs	r0, r1
    7e9a:	6023      	str	r3, [r4, #0]
    7e9c:	6063      	str	r3, [r4, #4]
    7e9e:	60a3      	str	r3, [r4, #8]
    7ea0:	a901      	add	r1, sp, #4
    7ea2:	f000 f9bd 	bl	8220 <utoa>
    7ea6:	a901      	add	r1, sp, #4
    7ea8:	0020      	movs	r0, r4
    7eaa:	f7ff ffe1 	bl	7e70 <_ZN6StringaSEPKc>
    7eae:	0020      	movs	r0, r4
    7eb0:	b004      	add	sp, #16
    7eb2:	bd10      	pop	{r4, pc}

00007eb4 <_ZN6StringC1Eih>:
    7eb4:	b510      	push	{r4, lr}
    7eb6:	2300      	movs	r3, #0
    7eb8:	0004      	movs	r4, r0
    7eba:	b08a      	sub	sp, #40	; 0x28
    7ebc:	6023      	str	r3, [r4, #0]
    7ebe:	6063      	str	r3, [r4, #4]
    7ec0:	60a3      	str	r3, [r4, #8]
    7ec2:	0008      	movs	r0, r1
    7ec4:	a901      	add	r1, sp, #4
    7ec6:	f000 f975 	bl	81b4 <itoa>
    7eca:	a901      	add	r1, sp, #4
    7ecc:	0020      	movs	r0, r4
    7ece:	f7ff ffcf 	bl	7e70 <_ZN6StringaSEPKc>
    7ed2:	0020      	movs	r0, r4
    7ed4:	b00a      	add	sp, #40	; 0x28
    7ed6:	bd10      	pop	{r4, pc}

00007ed8 <_ZN6StringC1Emh>:
    7ed8:	b510      	push	{r4, lr}
    7eda:	2300      	movs	r3, #0
    7edc:	0004      	movs	r4, r0
    7ede:	b08a      	sub	sp, #40	; 0x28
    7ee0:	6023      	str	r3, [r4, #0]
    7ee2:	6063      	str	r3, [r4, #4]
    7ee4:	60a3      	str	r3, [r4, #8]
    7ee6:	0008      	movs	r0, r1
    7ee8:	a901      	add	r1, sp, #4
    7eea:	f000 f967 	bl	81bc <ultoa>
    7eee:	a901      	add	r1, sp, #4
    7ef0:	0020      	movs	r0, r4
    7ef2:	f7ff ffbd 	bl	7e70 <_ZN6StringaSEPKc>
    7ef6:	0020      	movs	r0, r4
    7ef8:	b00a      	add	sp, #40	; 0x28
    7efa:	bd10      	pop	{r4, pc}

00007efc <_ZN6String6concatEPKcj>:
    7efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7efe:	0004      	movs	r4, r0
    7f00:	1e0f      	subs	r7, r1, #0
    7f02:	d102      	bne.n	7f0a <_ZN6String6concatEPKcj+0xe>
    7f04:	2600      	movs	r6, #0
    7f06:	0030      	movs	r0, r6
    7f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7f0a:	2601      	movs	r6, #1
    7f0c:	2a00      	cmp	r2, #0
    7f0e:	d0fa      	beq.n	7f06 <_ZN6String6concatEPKcj+0xa>
    7f10:	6883      	ldr	r3, [r0, #8]
    7f12:	18d5      	adds	r5, r2, r3
    7f14:	0029      	movs	r1, r5
    7f16:	f7ff ff6f 	bl	7df8 <_ZN6String7reserveEj>
    7f1a:	2800      	cmp	r0, #0
    7f1c:	d0f2      	beq.n	7f04 <_ZN6String6concatEPKcj+0x8>
    7f1e:	6823      	ldr	r3, [r4, #0]
    7f20:	68a2      	ldr	r2, [r4, #8]
    7f22:	0039      	movs	r1, r7
    7f24:	1898      	adds	r0, r3, r2
    7f26:	f003 fb3b 	bl	b5a0 <strcpy>
    7f2a:	60a5      	str	r5, [r4, #8]
    7f2c:	e7eb      	b.n	7f06 <_ZN6String6concatEPKcj+0xa>

00007f2e <_ZplRK15StringSumHelperRK6String>:
    7f2e:	b510      	push	{r4, lr}
    7f30:	688a      	ldr	r2, [r1, #8]
    7f32:	6809      	ldr	r1, [r1, #0]
    7f34:	0004      	movs	r4, r0
    7f36:	f7ff ffe1 	bl	7efc <_ZN6String6concatEPKcj>
    7f3a:	2800      	cmp	r0, #0
    7f3c:	d102      	bne.n	7f44 <_ZplRK15StringSumHelperRK6String+0x16>
    7f3e:	0020      	movs	r0, r4
    7f40:	f7ff ff42 	bl	7dc8 <_ZN6String10invalidateEv>
    7f44:	0020      	movs	r0, r4
    7f46:	bd10      	pop	{r4, pc}

00007f48 <_ZplRK15StringSumHelperPKc>:
    7f48:	b570      	push	{r4, r5, r6, lr}
    7f4a:	0004      	movs	r4, r0
    7f4c:	1e0d      	subs	r5, r1, #0
    7f4e:	d009      	beq.n	7f64 <_ZplRK15StringSumHelperPKc+0x1c>
    7f50:	0008      	movs	r0, r1
    7f52:	f003 fb2d 	bl	b5b0 <strlen>
    7f56:	0029      	movs	r1, r5
    7f58:	0002      	movs	r2, r0
    7f5a:	0020      	movs	r0, r4
    7f5c:	f7ff ffce 	bl	7efc <_ZN6String6concatEPKcj>
    7f60:	2800      	cmp	r0, #0
    7f62:	d102      	bne.n	7f6a <_ZplRK15StringSumHelperPKc+0x22>
    7f64:	0020      	movs	r0, r4
    7f66:	f7ff ff2f 	bl	7dc8 <_ZN6String10invalidateEv>
    7f6a:	0020      	movs	r0, r4
    7f6c:	bd70      	pop	{r4, r5, r6, pc}

00007f6e <_ZN8SPIClass4initEv>:
  config(DEFAULT_SPI_SETTINGS);
}

void SPIClass::init()
{
  if (initialized)
    7f6e:	7a43      	ldrb	r3, [r0, #9]
    7f70:	2b00      	cmp	r3, #0
    7f72:	d104      	bne.n	7f7e <_ZN8SPIClass4initEv+0x10>
    return;
  interruptMode = SPI_IMODE_NONE;
    7f74:	7283      	strb	r3, [r0, #10]
  interruptSave = 0;
    7f76:	72c3      	strb	r3, [r0, #11]
  interruptMask = 0;
    7f78:	60c3      	str	r3, [r0, #12]
  initialized = true;
    7f7a:	3301      	adds	r3, #1
    7f7c:	7243      	strb	r3, [r0, #9]
}
    7f7e:	4770      	bx	lr

00007f80 <_ZN8SPIClass6configE11SPISettings>:

void SPIClass::config(SPISettings settings)
{
    7f80:	b530      	push	{r4, r5, lr}
    7f82:	0004      	movs	r4, r0
    7f84:	b085      	sub	sp, #20
    7f86:	ad02      	add	r5, sp, #8
  _p_sercom->disableSPI();
    7f88:	6800      	ldr	r0, [r0, #0]
{
    7f8a:	9102      	str	r1, [sp, #8]
    7f8c:	9203      	str	r2, [sp, #12]
  _p_sercom->disableSPI();
    7f8e:	f000 f9fe 	bl	838e <_ZN6SERCOM10disableSPIEv>

  _p_sercom->initSPI(_padTx, _padRx, SPI_CHAR_SIZE_8_BITS, settings.bitOrder);
    7f92:	796b      	ldrb	r3, [r5, #5]
    7f94:	7a22      	ldrb	r2, [r4, #8]
    7f96:	79e1      	ldrb	r1, [r4, #7]
    7f98:	9300      	str	r3, [sp, #0]
    7f9a:	6820      	ldr	r0, [r4, #0]
    7f9c:	2300      	movs	r3, #0
    7f9e:	f000 fa91 	bl	84c4 <_ZN6SERCOM7initSPIE14SercomSpiTXPad11SercomRXPad17SercomSpiCharSize15SercomDataOrder>
  _p_sercom->initSPIClock(settings.dataMode, settings.clockFreq);
    7fa2:	7929      	ldrb	r1, [r5, #4]
    7fa4:	9a02      	ldr	r2, [sp, #8]
    7fa6:	6820      	ldr	r0, [r4, #0]
    7fa8:	f000 f9c6 	bl	8338 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem>

  _p_sercom->enableSPI();
    7fac:	6820      	ldr	r0, [r4, #0]
    7fae:	f000 f9e5 	bl	837c <_ZN6SERCOM9enableSPIEv>
}
    7fb2:	b005      	add	sp, #20
    7fb4:	bd30      	pop	{r4, r5, pc}
	...

00007fb8 <_ZN8SPIClass5beginEv>:
{
    7fb8:	b570      	push	{r4, r5, r6, lr}
  pinPeripheral(_uc_pinMiso, g_APinDescription[_uc_pinMiso].ulPinType);
    7fba:	2618      	movs	r6, #24
{
    7fbc:	0004      	movs	r4, r0
  init();
    7fbe:	f7ff ffd6 	bl	7f6e <_ZN8SPIClass4initEv>
  pinPeripheral(_uc_pinMiso, g_APinDescription[_uc_pinMiso].ulPinType);
    7fc2:	0033      	movs	r3, r6
    7fc4:	2108      	movs	r1, #8
    7fc6:	7920      	ldrb	r0, [r4, #4]
    7fc8:	4d0d      	ldr	r5, [pc, #52]	; (8000 <_ZN8SPIClass5beginEv+0x48>)
    7fca:	4343      	muls	r3, r0
    7fcc:	18eb      	adds	r3, r5, r3
    7fce:	5659      	ldrsb	r1, [r3, r1]
    7fd0:	f7ff fe8a 	bl	7ce8 <pinPeripheral>
  pinPeripheral(_uc_pinSCK, g_APinDescription[_uc_pinSCK].ulPinType);
    7fd4:	0033      	movs	r3, r6
    7fd6:	2108      	movs	r1, #8
    7fd8:	79a0      	ldrb	r0, [r4, #6]
    7fda:	4343      	muls	r3, r0
    7fdc:	18eb      	adds	r3, r5, r3
    7fde:	5659      	ldrsb	r1, [r3, r1]
    7fe0:	f7ff fe82 	bl	7ce8 <pinPeripheral>
  pinPeripheral(_uc_pinMosi, g_APinDescription[_uc_pinMosi].ulPinType);
    7fe4:	2108      	movs	r1, #8
    7fe6:	7960      	ldrb	r0, [r4, #5]
    7fe8:	4346      	muls	r6, r0
    7fea:	19ad      	adds	r5, r5, r6
    7fec:	5669      	ldrsb	r1, [r5, r1]
    7fee:	f7ff fe7b 	bl	7ce8 <pinPeripheral>
  config(DEFAULT_SPI_SETTINGS);
    7ff2:	4b04      	ldr	r3, [pc, #16]	; (8004 <_ZN8SPIClass5beginEv+0x4c>)
    7ff4:	0020      	movs	r0, r4
    7ff6:	cb06      	ldmia	r3!, {r1, r2}
    7ff8:	f7ff ffc2 	bl	7f80 <_ZN8SPIClass6configE11SPISettings>
}
    7ffc:	bd70      	pop	{r4, r5, r6, pc}
    7ffe:	46c0      	nop			; (mov r8, r8)
    8000:	0000be50 	.word	0x0000be50
    8004:	200008a8 	.word	0x200008a8

00008008 <_ZN8SPIClass16beginTransactionE11SPISettings>:
  if (irestore)
    interrupts();
}

void SPIClass::beginTransaction(SPISettings settings)
{
    8008:	b507      	push	{r0, r1, r2, lr}
  if (interruptMode != SPI_IMODE_NONE)
    800a:	7a83      	ldrb	r3, [r0, #10]
{
    800c:	9100      	str	r1, [sp, #0]
    800e:	9201      	str	r2, [sp, #4]
  if (interruptMode != SPI_IMODE_NONE)
    8010:	2b00      	cmp	r3, #0
    8012:	d007      	beq.n	8024 <_ZN8SPIClass16beginTransactionE11SPISettings+0x1c>
  {
    if (interruptMode & SPI_IMODE_GLOBAL)
    8014:	079a      	lsls	r2, r3, #30
    8016:	d50a      	bpl.n	802e <_ZN8SPIClass16beginTransactionE11SPISettings+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    8018:	f3ef 8210 	mrs	r2, PRIMASK
  return (__get_PRIMASK() ? 0 : 1);
    801c:	4253      	negs	r3, r2
    801e:	4153      	adcs	r3, r2
    {
      interruptSave = interruptsStatus();
    8020:	72c3      	strb	r3, [r0, #11]
  __ASM volatile ("cpsid i" : : : "memory");
    8022:	b672      	cpsid	i
    }
    else if (interruptMode & SPI_IMODE_EXTINT)
      EIC->INTENCLR.reg = EIC_INTENCLR_EXTINT(interruptMask);
  }

  config(settings);
    8024:	9900      	ldr	r1, [sp, #0]
    8026:	9a01      	ldr	r2, [sp, #4]
    8028:	f7ff ffaa 	bl	7f80 <_ZN8SPIClass6configE11SPISettings>
}
    802c:	bd07      	pop	{r0, r1, r2, pc}
    else if (interruptMode & SPI_IMODE_EXTINT)
    802e:	07db      	lsls	r3, r3, #31
    8030:	d5f8      	bpl.n	8024 <_ZN8SPIClass16beginTransactionE11SPISettings+0x1c>
      EIC->INTENCLR.reg = EIC_INTENCLR_EXTINT(interruptMask);
    8032:	8983      	ldrh	r3, [r0, #12]
    8034:	4a01      	ldr	r2, [pc, #4]	; (803c <_ZN8SPIClass16beginTransactionE11SPISettings+0x34>)
    8036:	6093      	str	r3, [r2, #8]
    8038:	e7f4      	b.n	8024 <_ZN8SPIClass16beginTransactionE11SPISettings+0x1c>
    803a:	46c0      	nop			; (mov r8, r8)
    803c:	40001800 	.word	0x40001800

00008040 <_ZN8SPIClass14endTransactionEv>:

void SPIClass::endTransaction(void)
{
  if (interruptMode != SPI_IMODE_NONE)
    8040:	7a83      	ldrb	r3, [r0, #10]
    8042:	2b00      	cmp	r3, #0
    8044:	d005      	beq.n	8052 <_ZN8SPIClass14endTransactionEv+0x12>
  {
    if (interruptMode & SPI_IMODE_GLOBAL)
    8046:	079a      	lsls	r2, r3, #30
    8048:	d504      	bpl.n	8054 <_ZN8SPIClass14endTransactionEv+0x14>
    {
      if (interruptSave)
    804a:	7ac3      	ldrb	r3, [r0, #11]
    804c:	2b00      	cmp	r3, #0
    804e:	d000      	beq.n	8052 <_ZN8SPIClass14endTransactionEv+0x12>
  __ASM volatile ("cpsie i" : : : "memory");
    8050:	b662      	cpsie	i
        interrupts();
    }
    else if (interruptMode & SPI_IMODE_EXTINT)
      EIC->INTENSET.reg = EIC_INTENSET_EXTINT(interruptMask);
  }
}
    8052:	4770      	bx	lr
    else if (interruptMode & SPI_IMODE_EXTINT)
    8054:	07db      	lsls	r3, r3, #31
    8056:	d5fc      	bpl.n	8052 <_ZN8SPIClass14endTransactionEv+0x12>
      EIC->INTENSET.reg = EIC_INTENSET_EXTINT(interruptMask);
    8058:	68c3      	ldr	r3, [r0, #12]
    805a:	4a02      	ldr	r2, [pc, #8]	; (8064 <_ZN8SPIClass14endTransactionEv+0x24>)
    805c:	b29b      	uxth	r3, r3
    805e:	60d3      	str	r3, [r2, #12]
}
    8060:	e7f7      	b.n	8052 <_ZN8SPIClass14endTransactionEv+0x12>
    8062:	46c0      	nop			; (mov r8, r8)
    8064:	40001800 	.word	0x40001800

00008068 <_ZN8SPIClass8transferEh>:
    _p_sercom->setBaudrateSPI(div);
  }
}

byte SPIClass::transfer(uint8_t data)
{
    8068:	b510      	push	{r4, lr}
  return _p_sercom->transferDataSPI(data);
    806a:	6800      	ldr	r0, [r0, #0]
    806c:	f000 f998 	bl	83a0 <_ZN6SERCOM15transferDataSPIEh>
}
    8070:	bd10      	pop	{r4, pc}
	...

00008074 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad>:
  void init_MightInline(uint32_t clock, BitOrder bitOrder, uint8_t dataMode) {
    init_AlwaysInline(clock, bitOrder, dataMode);
  }

  void init_AlwaysInline(uint32_t clock, BitOrder bitOrder, uint8_t dataMode) __attribute__((__always_inline__)) {
    this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? F_CPU / SPI_MIN_CLOCK_DIVIDER : clock);
    8074:	4b0f      	ldr	r3, [pc, #60]	; (80b4 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x40>)
    8076:	4a10      	ldr	r2, [pc, #64]	; (80b8 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x44>)
  _p_sercom = p_sercom;
    8078:	4910      	ldr	r1, [pc, #64]	; (80bc <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x48>)
    807a:	601a      	str	r2, [r3, #0]

    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    807c:	2200      	movs	r2, #0
    807e:	715a      	strb	r2, [r3, #5]

    switch (dataMode)
    {
      case SPI_MODE0:
        this->dataMode = SERCOM_SPI_MODE_0; break;
    8080:	711a      	strb	r2, [r3, #4]
  initialized = false;
    8082:	4b0f      	ldr	r3, [pc, #60]	; (80c0 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x4c>)
  _p_sercom = p_sercom;
    8084:	480f      	ldr	r0, [pc, #60]	; (80c4 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x50>)
    8086:	6019      	str	r1, [r3, #0]
  _uc_pinMiso = uc_pinMISO;
    8088:	210a      	movs	r1, #10
    808a:	7119      	strb	r1, [r3, #4]
  _uc_pinSCK = uc_pinSCK;
    808c:	3901      	subs	r1, #1
    808e:	7199      	strb	r1, [r3, #6]
  _uc_pinMosi = uc_pinMOSI;
    8090:	3901      	subs	r1, #1
    8092:	7159      	strb	r1, [r3, #5]
  _padRx=PadRx;
    8094:	3905      	subs	r1, #5
  initialized = false;
    8096:	725a      	strb	r2, [r3, #9]
  _padTx=PadTx;
    8098:	71da      	strb	r2, [r3, #7]
  _padRx=PadRx;
    809a:	7219      	strb	r1, [r3, #8]
  initialized = false;
    809c:	4b0a      	ldr	r3, [pc, #40]	; (80c8 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x54>)
  _p_sercom = p_sercom;
    809e:	6018      	str	r0, [r3, #0]
  _uc_pinMiso = uc_pinMISO;
    80a0:	201d      	movs	r0, #29
    80a2:	7118      	strb	r0, [r3, #4]
  _uc_pinSCK = uc_pinSCK;
    80a4:	3802      	subs	r0, #2
    80a6:	7198      	strb	r0, [r3, #6]
  _uc_pinMosi = uc_pinMOSI;
    80a8:	3801      	subs	r0, #1
  initialized = false;
    80aa:	725a      	strb	r2, [r3, #9]
  _uc_pinMosi = uc_pinMOSI;
    80ac:	7158      	strb	r0, [r3, #5]
  _padTx=PadTx;
    80ae:	71da      	strb	r2, [r3, #7]
  _padRx=PadRx;
    80b0:	7219      	strb	r1, [r3, #8]
    #define PAD_SPI_RX           SERCOM_RX_PAD_0
  #endif // PERIPH_SPI
  SPIClass SPI (&PERIPH_SPI,  PIN_SPI_MISO,  PIN_SPI_SCK,  PIN_SPI_MOSI,  PAD_SPI_TX,  PAD_SPI_RX);
#endif
#if SPI_INTERFACES_COUNT > 1
  SPIClass SPI1(&PERIPH_SPI1, PIN_SPI1_MISO, PIN_SPI1_SCK, PIN_SPI1_MOSI, PAD_SPI1_TX, PAD_SPI1_RX);
    80b2:	4770      	bx	lr
    80b4:	200008a8 	.word	0x200008a8
    80b8:	003d0900 	.word	0x003d0900
    80bc:	200008b4 	.word	0x200008b4
    80c0:	20000888 	.word	0x20000888
    80c4:	200008b8 	.word	0x200008b8
    80c8:	20000898 	.word	0x20000898

000080cc <_GLOBAL__sub_I_g_APinDescription>:
    80cc:	b510      	push	{r4, lr}
    80ce:	490c      	ldr	r1, [pc, #48]	; (8100 <_GLOBAL__sub_I_g_APinDescription+0x34>)
    80d0:	480c      	ldr	r0, [pc, #48]	; (8104 <_GLOBAL__sub_I_g_APinDescription+0x38>)
    80d2:	f000 f8a9 	bl	8228 <_ZN6SERCOMC1EP6Sercom>
    80d6:	490c      	ldr	r1, [pc, #48]	; (8108 <_GLOBAL__sub_I_g_APinDescription+0x3c>)
    80d8:	480c      	ldr	r0, [pc, #48]	; (810c <_GLOBAL__sub_I_g_APinDescription+0x40>)
    80da:	f000 f8a5 	bl	8228 <_ZN6SERCOMC1EP6Sercom>
    80de:	490c      	ldr	r1, [pc, #48]	; (8110 <_GLOBAL__sub_I_g_APinDescription+0x44>)
    80e0:	480c      	ldr	r0, [pc, #48]	; (8114 <_GLOBAL__sub_I_g_APinDescription+0x48>)
    80e2:	f000 f8a1 	bl	8228 <_ZN6SERCOMC1EP6Sercom>
    80e6:	490c      	ldr	r1, [pc, #48]	; (8118 <_GLOBAL__sub_I_g_APinDescription+0x4c>)
    80e8:	480c      	ldr	r0, [pc, #48]	; (811c <_GLOBAL__sub_I_g_APinDescription+0x50>)
    80ea:	f000 f89d 	bl	8228 <_ZN6SERCOMC1EP6Sercom>
    80ee:	490c      	ldr	r1, [pc, #48]	; (8120 <_GLOBAL__sub_I_g_APinDescription+0x54>)
    80f0:	480c      	ldr	r0, [pc, #48]	; (8124 <_GLOBAL__sub_I_g_APinDescription+0x58>)
    80f2:	f000 f899 	bl	8228 <_ZN6SERCOMC1EP6Sercom>
    80f6:	490c      	ldr	r1, [pc, #48]	; (8128 <_GLOBAL__sub_I_g_APinDescription+0x5c>)
    80f8:	480c      	ldr	r0, [pc, #48]	; (812c <_GLOBAL__sub_I_g_APinDescription+0x60>)
    80fa:	f000 f895 	bl	8228 <_ZN6SERCOMC1EP6Sercom>
    80fe:	bd10      	pop	{r4, pc}
    8100:	42000800 	.word	0x42000800
    8104:	200008b0 	.word	0x200008b0
    8108:	42000c00 	.word	0x42000c00
    810c:	200008b4 	.word	0x200008b4
    8110:	42001000 	.word	0x42001000
    8114:	200008b8 	.word	0x200008b8
    8118:	42001400 	.word	0x42001400
    811c:	200008bc 	.word	0x200008bc
    8120:	42001800 	.word	0x42001800
    8124:	200008c0 	.word	0x200008c0
    8128:	42001c00 	.word	0x42001c00
    812c:	200008c4 	.word	0x200008c4

00008130 <ltoa>:
    8130:	b5f0      	push	{r4, r5, r6, r7, lr}
    8132:	b08d      	sub	sp, #52	; 0x34
    8134:	1e0e      	subs	r6, r1, #0
    8136:	9200      	str	r2, [sp, #0]
    8138:	d02d      	beq.n	8196 <ltoa+0x66>
    813a:	0013      	movs	r3, r2
    813c:	3b02      	subs	r3, #2
    813e:	2b22      	cmp	r3, #34	; 0x22
    8140:	d833      	bhi.n	81aa <ltoa+0x7a>
    8142:	2a0a      	cmp	r2, #10
    8144:	d133      	bne.n	81ae <ltoa+0x7e>
    8146:	2800      	cmp	r0, #0
    8148:	da31      	bge.n	81ae <ltoa+0x7e>
    814a:	2301      	movs	r3, #1
    814c:	4244      	negs	r4, r0
    814e:	9301      	str	r3, [sp, #4]
    8150:	af03      	add	r7, sp, #12
    8152:	e00e      	b.n	8172 <ltoa+0x42>
    8154:	0020      	movs	r0, r4
    8156:	9900      	ldr	r1, [sp, #0]
    8158:	f000 fcb0 	bl	8abc <__aeabi_uidivmod>
    815c:	0020      	movs	r0, r4
    815e:	000d      	movs	r5, r1
    8160:	9900      	ldr	r1, [sp, #0]
    8162:	f000 fc25 	bl	89b0 <__udivsi3>
    8166:	0004      	movs	r4, r0
    8168:	2d09      	cmp	r5, #9
    816a:	d817      	bhi.n	819c <ltoa+0x6c>
    816c:	3530      	adds	r5, #48	; 0x30
    816e:	703d      	strb	r5, [r7, #0]
    8170:	3701      	adds	r7, #1
    8172:	003a      	movs	r2, r7
    8174:	2c00      	cmp	r4, #0
    8176:	d1ed      	bne.n	8154 <ltoa+0x24>
    8178:	ab03      	add	r3, sp, #12
    817a:	42bb      	cmp	r3, r7
    817c:	d0ea      	beq.n	8154 <ltoa+0x24>
    817e:	9901      	ldr	r1, [sp, #4]
    8180:	0033      	movs	r3, r6
    8182:	2900      	cmp	r1, #0
    8184:	d002      	beq.n	818c <ltoa+0x5c>
    8186:	212d      	movs	r1, #45	; 0x2d
    8188:	1c73      	adds	r3, r6, #1
    818a:	7031      	strb	r1, [r6, #0]
    818c:	a903      	add	r1, sp, #12
    818e:	428a      	cmp	r2, r1
    8190:	d806      	bhi.n	81a0 <ltoa+0x70>
    8192:	2200      	movs	r2, #0
    8194:	701a      	strb	r2, [r3, #0]
    8196:	0030      	movs	r0, r6
    8198:	b00d      	add	sp, #52	; 0x34
    819a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    819c:	3557      	adds	r5, #87	; 0x57
    819e:	e7e6      	b.n	816e <ltoa+0x3e>
    81a0:	3a01      	subs	r2, #1
    81a2:	7811      	ldrb	r1, [r2, #0]
    81a4:	7019      	strb	r1, [r3, #0]
    81a6:	3301      	adds	r3, #1
    81a8:	e7f0      	b.n	818c <ltoa+0x5c>
    81aa:	2600      	movs	r6, #0
    81ac:	e7f3      	b.n	8196 <ltoa+0x66>
    81ae:	0004      	movs	r4, r0
    81b0:	2300      	movs	r3, #0
    81b2:	e7cc      	b.n	814e <ltoa+0x1e>

000081b4 <itoa>:
    81b4:	b510      	push	{r4, lr}
    81b6:	f7ff ffbb 	bl	8130 <ltoa>
    81ba:	bd10      	pop	{r4, pc}

000081bc <ultoa>:
    81bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    81be:	b08d      	sub	sp, #52	; 0x34
    81c0:	0007      	movs	r7, r0
    81c2:	1e0e      	subs	r6, r1, #0
    81c4:	9201      	str	r2, [sp, #4]
    81c6:	d021      	beq.n	820c <ultoa+0x50>
    81c8:	0013      	movs	r3, r2
    81ca:	3b02      	subs	r3, #2
    81cc:	ad03      	add	r5, sp, #12
    81ce:	2b22      	cmp	r3, #34	; 0x22
    81d0:	d910      	bls.n	81f4 <ultoa+0x38>
    81d2:	2600      	movs	r6, #0
    81d4:	e01a      	b.n	820c <ultoa+0x50>
    81d6:	0038      	movs	r0, r7
    81d8:	9901      	ldr	r1, [sp, #4]
    81da:	f000 fc6f 	bl	8abc <__aeabi_uidivmod>
    81de:	0038      	movs	r0, r7
    81e0:	000c      	movs	r4, r1
    81e2:	9901      	ldr	r1, [sp, #4]
    81e4:	f000 fbe4 	bl	89b0 <__udivsi3>
    81e8:	0007      	movs	r7, r0
    81ea:	2c09      	cmp	r4, #9
    81ec:	d811      	bhi.n	8212 <ultoa+0x56>
    81ee:	3430      	adds	r4, #48	; 0x30
    81f0:	702c      	strb	r4, [r5, #0]
    81f2:	3501      	adds	r5, #1
    81f4:	002b      	movs	r3, r5
    81f6:	2f00      	cmp	r7, #0
    81f8:	d1ed      	bne.n	81d6 <ultoa+0x1a>
    81fa:	aa03      	add	r2, sp, #12
    81fc:	42aa      	cmp	r2, r5
    81fe:	d0ea      	beq.n	81d6 <ultoa+0x1a>
    8200:	0032      	movs	r2, r6
    8202:	a903      	add	r1, sp, #12
    8204:	428b      	cmp	r3, r1
    8206:	d806      	bhi.n	8216 <ultoa+0x5a>
    8208:	2300      	movs	r3, #0
    820a:	7013      	strb	r3, [r2, #0]
    820c:	0030      	movs	r0, r6
    820e:	b00d      	add	sp, #52	; 0x34
    8210:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8212:	3457      	adds	r4, #87	; 0x57
    8214:	e7ec      	b.n	81f0 <ultoa+0x34>
    8216:	3b01      	subs	r3, #1
    8218:	7819      	ldrb	r1, [r3, #0]
    821a:	7011      	strb	r1, [r2, #0]
    821c:	3201      	adds	r2, #1
    821e:	e7f0      	b.n	8202 <ultoa+0x46>

00008220 <utoa>:
    8220:	b510      	push	{r4, lr}
    8222:	f7ff ffcb 	bl	81bc <ultoa>
    8226:	bd10      	pop	{r4, pc}

00008228 <_ZN6SERCOMC1EP6Sercom>:
    8228:	6001      	str	r1, [r0, #0]
    822a:	4770      	bx	lr

0000822c <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
    822c:	b5f0      	push	{r4, r5, r6, r7, lr}
    822e:	ac05      	add	r4, sp, #20
    8230:	7825      	ldrb	r5, [r4, #0]
    8232:	6804      	ldr	r4, [r0, #0]
    8234:	1e98      	subs	r0, r3, #2
    8236:	1e47      	subs	r7, r0, #1
    8238:	41b8      	sbcs	r0, r7
    823a:	6826      	ldr	r6, [r4, #0]
    823c:	0792      	lsls	r2, r2, #30
    823e:	0600      	lsls	r0, r0, #24
    8240:	4332      	orrs	r2, r6
    8242:	4302      	orrs	r2, r0
    8244:	2007      	movs	r0, #7
    8246:	6022      	str	r2, [r4, #0]
    8248:	4001      	ands	r1, r0
    824a:	01ad      	lsls	r5, r5, #6
    824c:	6862      	ldr	r2, [r4, #4]
    824e:	4329      	orrs	r1, r5
    8250:	2000      	movs	r0, #0
    8252:	2b02      	cmp	r3, #2
    8254:	d000      	beq.n	8258 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x2c>
    8256:	0358      	lsls	r0, r3, #13
    8258:	4311      	orrs	r1, r2
    825a:	4301      	orrs	r1, r0
    825c:	6061      	str	r1, [r4, #4]
    825e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008260 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:
    8260:	b510      	push	{r4, lr}
    8262:	24c0      	movs	r4, #192	; 0xc0
    8264:	6803      	ldr	r3, [r0, #0]
    8266:	03a4      	lsls	r4, r4, #14
    8268:	6818      	ldr	r0, [r3, #0]
    826a:	0512      	lsls	r2, r2, #20
    826c:	4022      	ands	r2, r4
    826e:	4302      	orrs	r2, r0
    8270:	20c0      	movs	r0, #192	; 0xc0
    8272:	0409      	lsls	r1, r1, #16
    8274:	0280      	lsls	r0, r0, #10
    8276:	4001      	ands	r1, r0
    8278:	4311      	orrs	r1, r2
    827a:	6019      	str	r1, [r3, #0]
    827c:	685a      	ldr	r2, [r3, #4]
    827e:	4310      	orrs	r0, r2
    8280:	6058      	str	r0, [r3, #4]
    8282:	bd10      	pop	{r4, pc}

00008284 <_ZN6SERCOM9resetUARTEv>:
    8284:	2201      	movs	r2, #1
    8286:	6803      	ldr	r3, [r0, #0]
    8288:	6819      	ldr	r1, [r3, #0]
    828a:	430a      	orrs	r2, r1
    828c:	601a      	str	r2, [r3, #0]
    828e:	681a      	ldr	r2, [r3, #0]
    8290:	07d2      	lsls	r2, r2, #31
    8292:	d4fc      	bmi.n	828e <_ZN6SERCOM9resetUARTEv+0xa>
    8294:	69da      	ldr	r2, [r3, #28]
    8296:	07d2      	lsls	r2, r2, #31
    8298:	d4f9      	bmi.n	828e <_ZN6SERCOM9resetUARTEv+0xa>
    829a:	4770      	bx	lr

0000829c <_ZN6SERCOM10enableUARTEv>:
    829c:	2202      	movs	r2, #2
    829e:	6803      	ldr	r3, [r0, #0]
    82a0:	6819      	ldr	r1, [r3, #0]
    82a2:	430a      	orrs	r2, r1
    82a4:	601a      	str	r2, [r3, #0]
    82a6:	69da      	ldr	r2, [r3, #28]
    82a8:	0792      	lsls	r2, r2, #30
    82aa:	d4fc      	bmi.n	82a6 <_ZN6SERCOM10enableUARTEv+0xa>
    82ac:	4770      	bx	lr

000082ae <_ZN6SERCOM9flushUARTEv>:
    82ae:	6803      	ldr	r3, [r0, #0]
    82b0:	7e1a      	ldrb	r2, [r3, #24]
    82b2:	07d2      	lsls	r2, r2, #31
    82b4:	d402      	bmi.n	82bc <_ZN6SERCOM9flushUARTEv+0xe>
    82b6:	7e1a      	ldrb	r2, [r3, #24]
    82b8:	0792      	lsls	r2, r2, #30
    82ba:	d5fc      	bpl.n	82b6 <_ZN6SERCOM9flushUARTEv+0x8>
    82bc:	4770      	bx	lr

000082be <_ZN6SERCOM15clearStatusUARTEv>:
    82be:	2200      	movs	r2, #0
    82c0:	6803      	ldr	r3, [r0, #0]
    82c2:	835a      	strh	r2, [r3, #26]
    82c4:	4770      	bx	lr

000082c6 <_ZN6SERCOM17availableDataUARTEv>:
    82c6:	6803      	ldr	r3, [r0, #0]
    82c8:	7e18      	ldrb	r0, [r3, #24]
    82ca:	0740      	lsls	r0, r0, #29
    82cc:	0fc0      	lsrs	r0, r0, #31
    82ce:	4770      	bx	lr

000082d0 <_ZN6SERCOM11isUARTErrorEv>:
    82d0:	6803      	ldr	r3, [r0, #0]
    82d2:	7e18      	ldrb	r0, [r3, #24]
    82d4:	09c0      	lsrs	r0, r0, #7
    82d6:	4770      	bx	lr

000082d8 <_ZN6SERCOM20acknowledgeUARTErrorEv>:
    82d8:	2380      	movs	r3, #128	; 0x80
    82da:	6802      	ldr	r2, [r0, #0]
    82dc:	425b      	negs	r3, r3
    82de:	7e11      	ldrb	r1, [r2, #24]
    82e0:	430b      	orrs	r3, r1
    82e2:	7613      	strb	r3, [r2, #24]
    82e4:	4770      	bx	lr

000082e6 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>:
    82e6:	6803      	ldr	r3, [r0, #0]
    82e8:	7e18      	ldrb	r0, [r3, #24]
    82ea:	07c0      	lsls	r0, r0, #31
    82ec:	0fc0      	lsrs	r0, r0, #31
    82ee:	4770      	bx	lr

000082f0 <_ZN6SERCOM12readDataUARTEv>:
    82f0:	6803      	ldr	r3, [r0, #0]
    82f2:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    82f4:	b2c0      	uxtb	r0, r0
    82f6:	4770      	bx	lr

000082f8 <_ZN6SERCOM13writeDataUARTEh>:
    82f8:	6803      	ldr	r3, [r0, #0]
    82fa:	7e1a      	ldrb	r2, [r3, #24]
    82fc:	07d2      	lsls	r2, r2, #31
    82fe:	d5fc      	bpl.n	82fa <_ZN6SERCOM13writeDataUARTEh+0x2>
    8300:	b289      	uxth	r1, r1
    8302:	2001      	movs	r0, #1
    8304:	8519      	strh	r1, [r3, #40]	; 0x28
    8306:	4770      	bx	lr

00008308 <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>:
    8308:	2201      	movs	r2, #1
    830a:	6803      	ldr	r3, [r0, #0]
    830c:	759a      	strb	r2, [r3, #22]
    830e:	4770      	bx	lr

00008310 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>:
    8310:	2201      	movs	r2, #1
    8312:	6803      	ldr	r3, [r0, #0]
    8314:	751a      	strb	r2, [r3, #20]
    8316:	4770      	bx	lr

00008318 <_ZN6SERCOM13enableUSARTRXEv>:
    8318:	2380      	movs	r3, #128	; 0x80
    831a:	6802      	ldr	r2, [r0, #0]
    831c:	029b      	lsls	r3, r3, #10
    831e:	6851      	ldr	r1, [r2, #4]
    8320:	430b      	orrs	r3, r1
    8322:	6053      	str	r3, [r2, #4]
    8324:	4770      	bx	lr
	...

00008328 <_ZN6SERCOM14disableUSARTRXEv>:
    8328:	6802      	ldr	r2, [r0, #0]
    832a:	4902      	ldr	r1, [pc, #8]	; (8334 <_ZN6SERCOM14disableUSARTRXEv+0xc>)
    832c:	6853      	ldr	r3, [r2, #4]
    832e:	400b      	ands	r3, r1
    8330:	6053      	str	r3, [r2, #4]
    8332:	4770      	bx	lr
    8334:	fffdffff 	.word	0xfffdffff

00008338 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem>:
    8338:	b570      	push	{r4, r5, r6, lr}
    833a:	2501      	movs	r5, #1
    833c:	6804      	ldr	r4, [r0, #0]
    833e:	084b      	lsrs	r3, r1, #1
    8340:	402b      	ands	r3, r5
    8342:	4029      	ands	r1, r5
    8344:	6820      	ldr	r0, [r4, #0]
    8346:	0709      	lsls	r1, r1, #28
    8348:	075b      	lsls	r3, r3, #29
    834a:	430b      	orrs	r3, r1
    834c:	4303      	orrs	r3, r0
    834e:	6023      	str	r3, [r4, #0]
    8350:	0051      	lsls	r1, r2, #1
    8352:	4803      	ldr	r0, [pc, #12]	; (8360 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem+0x28>)
    8354:	f000 fb2c 	bl	89b0 <__udivsi3>
    8358:	3801      	subs	r0, #1
    835a:	b2c0      	uxtb	r0, r0
    835c:	7320      	strb	r0, [r4, #12]
    835e:	bd70      	pop	{r4, r5, r6, pc}
    8360:	02dc6c00 	.word	0x02dc6c00

00008364 <_ZN6SERCOM8resetSPIEv>:
    8364:	2201      	movs	r2, #1
    8366:	6803      	ldr	r3, [r0, #0]
    8368:	6819      	ldr	r1, [r3, #0]
    836a:	430a      	orrs	r2, r1
    836c:	601a      	str	r2, [r3, #0]
    836e:	681a      	ldr	r2, [r3, #0]
    8370:	07d2      	lsls	r2, r2, #31
    8372:	d4fc      	bmi.n	836e <_ZN6SERCOM8resetSPIEv+0xa>
    8374:	69da      	ldr	r2, [r3, #28]
    8376:	07d2      	lsls	r2, r2, #31
    8378:	d4f9      	bmi.n	836e <_ZN6SERCOM8resetSPIEv+0xa>
    837a:	4770      	bx	lr

0000837c <_ZN6SERCOM9enableSPIEv>:
    837c:	2202      	movs	r2, #2
    837e:	6803      	ldr	r3, [r0, #0]
    8380:	6819      	ldr	r1, [r3, #0]
    8382:	430a      	orrs	r2, r1
    8384:	601a      	str	r2, [r3, #0]
    8386:	69da      	ldr	r2, [r3, #28]
    8388:	0792      	lsls	r2, r2, #30
    838a:	d4fc      	bmi.n	8386 <_ZN6SERCOM9enableSPIEv+0xa>
    838c:	4770      	bx	lr

0000838e <_ZN6SERCOM10disableSPIEv>:
    838e:	6803      	ldr	r3, [r0, #0]
    8390:	69da      	ldr	r2, [r3, #28]
    8392:	0792      	lsls	r2, r2, #30
    8394:	d4fc      	bmi.n	8390 <_ZN6SERCOM10disableSPIEv+0x2>
    8396:	2102      	movs	r1, #2
    8398:	681a      	ldr	r2, [r3, #0]
    839a:	438a      	bics	r2, r1
    839c:	601a      	str	r2, [r3, #0]
    839e:	4770      	bx	lr

000083a0 <_ZN6SERCOM15transferDataSPIEh>:
    83a0:	6802      	ldr	r2, [r0, #0]
    83a2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    83a4:	0a5b      	lsrs	r3, r3, #9
    83a6:	025b      	lsls	r3, r3, #9
    83a8:	4319      	orrs	r1, r3
    83aa:	6291      	str	r1, [r2, #40]	; 0x28
    83ac:	7e13      	ldrb	r3, [r2, #24]
    83ae:	075b      	lsls	r3, r3, #29
    83b0:	d5fc      	bpl.n	83ac <_ZN6SERCOM15transferDataSPIEh+0xc>
    83b2:	6a90      	ldr	r0, [r2, #40]	; 0x28
    83b4:	b2c0      	uxtb	r0, r0
    83b6:	4770      	bx	lr

000083b8 <_ZN6SERCOM13initClockNVICEv>:
    83b8:	6803      	ldr	r3, [r0, #0]
    83ba:	4a21      	ldr	r2, [pc, #132]	; (8440 <_ZN6SERCOM13initClockNVICEv+0x88>)
    83bc:	b530      	push	{r4, r5, lr}
    83be:	4293      	cmp	r3, r2
    83c0:	d011      	beq.n	83e6 <_ZN6SERCOM13initClockNVICEv+0x2e>
    83c2:	4a20      	ldr	r2, [pc, #128]	; (8444 <_ZN6SERCOM13initClockNVICEv+0x8c>)
    83c4:	4293      	cmp	r3, r2
    83c6:	d02f      	beq.n	8428 <_ZN6SERCOM13initClockNVICEv+0x70>
    83c8:	4a1f      	ldr	r2, [pc, #124]	; (8448 <_ZN6SERCOM13initClockNVICEv+0x90>)
    83ca:	4293      	cmp	r3, r2
    83cc:	d02f      	beq.n	842e <_ZN6SERCOM13initClockNVICEv+0x76>
    83ce:	4a1f      	ldr	r2, [pc, #124]	; (844c <_ZN6SERCOM13initClockNVICEv+0x94>)
    83d0:	4293      	cmp	r3, r2
    83d2:	d02f      	beq.n	8434 <_ZN6SERCOM13initClockNVICEv+0x7c>
    83d4:	4a1e      	ldr	r2, [pc, #120]	; (8450 <_ZN6SERCOM13initClockNVICEv+0x98>)
    83d6:	4293      	cmp	r3, r2
    83d8:	d02f      	beq.n	843a <_ZN6SERCOM13initClockNVICEv+0x82>
    83da:	4a1e      	ldr	r2, [pc, #120]	; (8454 <_ZN6SERCOM13initClockNVICEv+0x9c>)
    83dc:	4293      	cmp	r3, r2
    83de:	d122      	bne.n	8426 <_ZN6SERCOM13initClockNVICEv+0x6e>
    83e0:	230e      	movs	r3, #14
    83e2:	2219      	movs	r2, #25
    83e4:	e001      	b.n	83ea <_ZN6SERCOM13initClockNVICEv+0x32>
    83e6:	2309      	movs	r3, #9
    83e8:	2214      	movs	r2, #20
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    83ea:	2101      	movs	r1, #1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    83ec:	2503      	movs	r5, #3
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    83ee:	4099      	lsls	r1, r3
    83f0:	4819      	ldr	r0, [pc, #100]	; (8458 <_ZN6SERCOM13initClockNVICEv+0xa0>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    83f2:	24c0      	movs	r4, #192	; 0xc0
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    83f4:	6001      	str	r1, [r0, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    83f6:	0899      	lsrs	r1, r3, #2
    83f8:	402b      	ands	r3, r5
    83fa:	40ab      	lsls	r3, r5
    83fc:	35fc      	adds	r5, #252	; 0xfc
    83fe:	409d      	lsls	r5, r3
    8400:	0089      	lsls	r1, r1, #2
    8402:	1809      	adds	r1, r1, r0
    8404:	00a4      	lsls	r4, r4, #2
    8406:	5908      	ldr	r0, [r1, r4]
    8408:	43a8      	bics	r0, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    840a:	25c0      	movs	r5, #192	; 0xc0
    840c:	409d      	lsls	r5, r3
    840e:	002b      	movs	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    8410:	4303      	orrs	r3, r0
    8412:	510b      	str	r3, [r1, r4]
    8414:	2380      	movs	r3, #128	; 0x80
    8416:	01db      	lsls	r3, r3, #7
    8418:	431a      	orrs	r2, r3
    841a:	4b10      	ldr	r3, [pc, #64]	; (845c <_ZN6SERCOM13initClockNVICEv+0xa4>)
    841c:	805a      	strh	r2, [r3, #2]
    841e:	785a      	ldrb	r2, [r3, #1]
    8420:	b252      	sxtb	r2, r2
    8422:	2a00      	cmp	r2, #0
    8424:	dbfb      	blt.n	841e <_ZN6SERCOM13initClockNVICEv+0x66>
    8426:	bd30      	pop	{r4, r5, pc}
    8428:	230a      	movs	r3, #10
    842a:	2215      	movs	r2, #21
    842c:	e7dd      	b.n	83ea <_ZN6SERCOM13initClockNVICEv+0x32>
    842e:	230b      	movs	r3, #11
    8430:	2216      	movs	r2, #22
    8432:	e7da      	b.n	83ea <_ZN6SERCOM13initClockNVICEv+0x32>
    8434:	230c      	movs	r3, #12
    8436:	2217      	movs	r2, #23
    8438:	e7d7      	b.n	83ea <_ZN6SERCOM13initClockNVICEv+0x32>
    843a:	230d      	movs	r3, #13
    843c:	2218      	movs	r2, #24
    843e:	e7d4      	b.n	83ea <_ZN6SERCOM13initClockNVICEv+0x32>
    8440:	42000800 	.word	0x42000800
    8444:	42000c00 	.word	0x42000c00
    8448:	42001000 	.word	0x42001000
    844c:	42001400 	.word	0x42001400
    8450:	42001800 	.word	0x42001800
    8454:	42001c00 	.word	0x42001c00
    8458:	e000e100 	.word	0xe000e100
    845c:	40000c00 	.word	0x40000c00

00008460 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
    8460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8462:	0004      	movs	r4, r0
    8464:	0016      	movs	r6, r2
    8466:	000f      	movs	r7, r1
    8468:	001d      	movs	r5, r3
    846a:	f7ff ffa5 	bl	83b8 <_ZN6SERCOM13initClockNVICEv>
    846e:	0020      	movs	r0, r4
    8470:	f7ff ff08 	bl	8284 <_ZN6SERCOM9resetUARTEv>
    8474:	221c      	movs	r2, #28
    8476:	00bb      	lsls	r3, r7, #2
    8478:	4013      	ands	r3, r2
    847a:	0772      	lsls	r2, r6, #29
    847c:	6824      	ldr	r4, [r4, #0]
    847e:	0c12      	lsrs	r2, r2, #16
    8480:	4313      	orrs	r3, r2
    8482:	6023      	str	r3, [r4, #0]
    8484:	2384      	movs	r3, #132	; 0x84
    8486:	75a3      	strb	r3, [r4, #22]
    8488:	2f01      	cmp	r7, #1
    848a:	d118      	bne.n	84be <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x5e>
    848c:	2110      	movs	r1, #16
    848e:	2e01      	cmp	r6, #1
    8490:	d000      	beq.n	8494 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x34>
    8492:	3908      	subs	r1, #8
    8494:	4b0a      	ldr	r3, [pc, #40]	; (84c0 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x60>)
    8496:	4369      	muls	r1, r5
    8498:	6818      	ldr	r0, [r3, #0]
    849a:	00c0      	lsls	r0, r0, #3
    849c:	f000 fa88 	bl	89b0 <__udivsi3>
    84a0:	2207      	movs	r2, #7
    84a2:	89a3      	ldrh	r3, [r4, #12]
    84a4:	4002      	ands	r2, r0
    84a6:	04db      	lsls	r3, r3, #19
    84a8:	0352      	lsls	r2, r2, #13
    84aa:	0cdb      	lsrs	r3, r3, #19
    84ac:	4313      	orrs	r3, r2
    84ae:	81a3      	strh	r3, [r4, #12]
    84b0:	0403      	lsls	r3, r0, #16
    84b2:	89a0      	ldrh	r0, [r4, #12]
    84b4:	0cdb      	lsrs	r3, r3, #19
    84b6:	0b40      	lsrs	r0, r0, #13
    84b8:	0340      	lsls	r0, r0, #13
    84ba:	4318      	orrs	r0, r3
    84bc:	81a0      	strh	r0, [r4, #12]
    84be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    84c0:	20000084 	.word	0x20000084

000084c4 <_ZN6SERCOM7initSPIE14SercomSpiTXPad11SercomRXPad17SercomSpiCharSize15SercomDataOrder>:
    84c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    84c6:	0007      	movs	r7, r0
    84c8:	9301      	str	r3, [sp, #4]
    84ca:	ab08      	add	r3, sp, #32
    84cc:	781e      	ldrb	r6, [r3, #0]
    84ce:	000d      	movs	r5, r1
    84d0:	0014      	movs	r4, r2
    84d2:	f7ff ff47 	bl	8364 <_ZN6SERCOM8resetSPIEv>
    84d6:	0038      	movs	r0, r7
    84d8:	f7ff ff6e 	bl	83b8 <_ZN6SERCOM13initClockNVICEv>
    84dc:	22c0      	movs	r2, #192	; 0xc0
    84de:	0524      	lsls	r4, r4, #20
    84e0:	0392      	lsls	r2, r2, #14
    84e2:	4014      	ands	r4, r2
    84e4:	07b2      	lsls	r2, r6, #30
    84e6:	260c      	movs	r6, #12
    84e8:	2107      	movs	r1, #7
    84ea:	4316      	orrs	r6, r2
    84ec:	9a01      	ldr	r2, [sp, #4]
    84ee:	4334      	orrs	r4, r6
    84f0:	400a      	ands	r2, r1
    84f2:	26c0      	movs	r6, #192	; 0xc0
    84f4:	0011      	movs	r1, r2
    84f6:	2280      	movs	r2, #128	; 0x80
    84f8:	02b6      	lsls	r6, r6, #10
    84fa:	042d      	lsls	r5, r5, #16
    84fc:	683b      	ldr	r3, [r7, #0]
    84fe:	4035      	ands	r5, r6
    8500:	0292      	lsls	r2, r2, #10
    8502:	4325      	orrs	r5, r4
    8504:	430a      	orrs	r2, r1
    8506:	601d      	str	r5, [r3, #0]
    8508:	605a      	str	r2, [r3, #4]
    850a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

0000850c <_ZN13PluggableUSB_12getInterfaceEPh>:
    850c:	b570      	push	{r4, r5, r6, lr}
    850e:	000e      	movs	r6, r1
    8510:	2500      	movs	r5, #0
    8512:	6844      	ldr	r4, [r0, #4]
    8514:	2c00      	cmp	r4, #0
    8516:	d00b      	beq.n	8530 <_ZN13PluggableUSB_12getInterfaceEPh+0x24>
    8518:	6823      	ldr	r3, [r4, #0]
    851a:	0031      	movs	r1, r6
    851c:	685b      	ldr	r3, [r3, #4]
    851e:	0020      	movs	r0, r4
    8520:	4798      	blx	r3
    8522:	2800      	cmp	r0, #0
    8524:	db02      	blt.n	852c <_ZN13PluggableUSB_12getInterfaceEPh+0x20>
    8526:	182d      	adds	r5, r5, r0
    8528:	68e4      	ldr	r4, [r4, #12]
    852a:	e7f3      	b.n	8514 <_ZN13PluggableUSB_12getInterfaceEPh+0x8>
    852c:	2501      	movs	r5, #1
    852e:	426d      	negs	r5, r5
    8530:	0028      	movs	r0, r5
    8532:	bd70      	pop	{r4, r5, r6, pc}

00008534 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:
    8534:	b570      	push	{r4, r5, r6, lr}
    8536:	000d      	movs	r5, r1
    8538:	6844      	ldr	r4, [r0, #4]
    853a:	2c00      	cmp	r4, #0
    853c:	d008      	beq.n	8550 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1c>
    853e:	6823      	ldr	r3, [r4, #0]
    8540:	0029      	movs	r1, r5
    8542:	689b      	ldr	r3, [r3, #8]
    8544:	0020      	movs	r0, r4
    8546:	4798      	blx	r3
    8548:	2800      	cmp	r0, #0
    854a:	d102      	bne.n	8552 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1e>
    854c:	68e4      	ldr	r4, [r4, #12]
    854e:	e7f4      	b.n	853a <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x6>
    8550:	0020      	movs	r0, r4
    8552:	bd70      	pop	{r4, r5, r6, pc}

00008554 <_ZN13PluggableUSB_12getShortNameEPc>:
    8554:	b570      	push	{r4, r5, r6, lr}
    8556:	000d      	movs	r5, r1
    8558:	6844      	ldr	r4, [r0, #4]
    855a:	2c00      	cmp	r4, #0
    855c:	d007      	beq.n	856e <_ZN13PluggableUSB_12getShortNameEPc+0x1a>
    855e:	6823      	ldr	r3, [r4, #0]
    8560:	0029      	movs	r1, r5
    8562:	0020      	movs	r0, r4
    8564:	68db      	ldr	r3, [r3, #12]
    8566:	4798      	blx	r3
    8568:	68e4      	ldr	r4, [r4, #12]
    856a:	182d      	adds	r5, r5, r0
    856c:	e7f5      	b.n	855a <_ZN13PluggableUSB_12getShortNameEPc+0x6>
    856e:	702c      	strb	r4, [r5, #0]
    8570:	bd70      	pop	{r4, r5, r6, pc}

00008572 <_ZN13PluggableUSB_5setupER8USBSetup>:
    8572:	b570      	push	{r4, r5, r6, lr}
    8574:	000d      	movs	r5, r1
    8576:	6844      	ldr	r4, [r0, #4]
    8578:	2c00      	cmp	r4, #0
    857a:	d008      	beq.n	858e <_ZN13PluggableUSB_5setupER8USBSetup+0x1c>
    857c:	6823      	ldr	r3, [r4, #0]
    857e:	0029      	movs	r1, r5
    8580:	681b      	ldr	r3, [r3, #0]
    8582:	0020      	movs	r0, r4
    8584:	4798      	blx	r3
    8586:	2800      	cmp	r0, #0
    8588:	d102      	bne.n	8590 <_ZN13PluggableUSB_5setupER8USBSetup+0x1e>
    858a:	68e4      	ldr	r4, [r4, #12]
    858c:	e7f4      	b.n	8578 <_ZN13PluggableUSB_5setupER8USBSetup+0x6>
    858e:	0020      	movs	r0, r4
    8590:	bd70      	pop	{r4, r5, r6, pc}
	...

00008594 <_Z12PluggableUSBv>:
    8594:	2101      	movs	r1, #1
    8596:	4a06      	ldr	r2, [pc, #24]	; (85b0 <_Z12PluggableUSBv+0x1c>)
    8598:	b510      	push	{r4, lr}
    859a:	6813      	ldr	r3, [r2, #0]
    859c:	4805      	ldr	r0, [pc, #20]	; (85b4 <_Z12PluggableUSBv+0x20>)
    859e:	400b      	ands	r3, r1
    85a0:	d105      	bne.n	85ae <_Z12PluggableUSBv+0x1a>
    85a2:	2402      	movs	r4, #2
    85a4:	7004      	strb	r4, [r0, #0]
    85a6:	1924      	adds	r4, r4, r4
    85a8:	7044      	strb	r4, [r0, #1]
    85aa:	6043      	str	r3, [r0, #4]
    85ac:	6011      	str	r1, [r2, #0]
    85ae:	bd10      	pop	{r4, pc}
    85b0:	200008c8 	.word	0x200008c8
    85b4:	200008cc 	.word	0x200008cc

000085b8 <__aeabi_atexit>:
    85b8:	000b      	movs	r3, r1
    85ba:	b510      	push	{r4, lr}
    85bc:	0001      	movs	r1, r0
    85be:	0018      	movs	r0, r3
    85c0:	f002 fe88 	bl	b2d4 <__cxa_atexit>
    85c4:	bd10      	pop	{r4, pc}

000085c6 <_ZSt19__throw_logic_errorPKc>:
    85c6:	b510      	push	{r4, lr}
    85c8:	f002 fe7c 	bl	b2c4 <abort>

000085cc <_ZSt20__throw_length_errorPKc>:
    85cc:	b510      	push	{r4, lr}
    85ce:	f002 fe79 	bl	b2c4 <abort>

000085d2 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
    85d2:	b510      	push	{r4, lr}
    85d4:	2a00      	cmp	r2, #0
    85d6:	d001      	beq.n	85dc <_ZNSt11char_traitsIcE4copyEPcPKcj+0xa>
    85d8:	f002 fec2 	bl	b360 <memcpy>
    85dc:	bd10      	pop	{r4, pc}
	...

000085e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
    85e0:	2301      	movs	r3, #1
    85e2:	4a21      	ldr	r2, [pc, #132]	; (8668 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x88>)
    85e4:	6811      	ldr	r1, [r2, #0]
    85e6:	4219      	tst	r1, r3
    85e8:	d100      	bne.n	85ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc>
    85ea:	6013      	str	r3, [r2, #0]
    85ec:	4a1f      	ldr	r2, [pc, #124]	; (866c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x8c>)
    85ee:	6811      	ldr	r1, [r2, #0]
    85f0:	4219      	tst	r1, r3
    85f2:	d100      	bne.n	85f6 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x16>
    85f4:	6013      	str	r3, [r2, #0]
    85f6:	2301      	movs	r3, #1
    85f8:	4a1d      	ldr	r2, [pc, #116]	; (8670 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x90>)
    85fa:	6811      	ldr	r1, [r2, #0]
    85fc:	4219      	tst	r1, r3
    85fe:	d100      	bne.n	8602 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x22>
    8600:	6013      	str	r3, [r2, #0]
    8602:	4a1c      	ldr	r2, [pc, #112]	; (8674 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
    8604:	6811      	ldr	r1, [r2, #0]
    8606:	4219      	tst	r1, r3
    8608:	d100      	bne.n	860c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x2c>
    860a:	6013      	str	r3, [r2, #0]
    860c:	2301      	movs	r3, #1
    860e:	4a1a      	ldr	r2, [pc, #104]	; (8678 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
    8610:	6811      	ldr	r1, [r2, #0]
    8612:	4219      	tst	r1, r3
    8614:	d100      	bne.n	8618 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x38>
    8616:	6013      	str	r3, [r2, #0]
    8618:	4a18      	ldr	r2, [pc, #96]	; (867c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
    861a:	6811      	ldr	r1, [r2, #0]
    861c:	4219      	tst	r1, r3
    861e:	d100      	bne.n	8622 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x42>
    8620:	6013      	str	r3, [r2, #0]
    8622:	2301      	movs	r3, #1
    8624:	4a16      	ldr	r2, [pc, #88]	; (8680 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
    8626:	6811      	ldr	r1, [r2, #0]
    8628:	4219      	tst	r1, r3
    862a:	d100      	bne.n	862e <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x4e>
    862c:	6013      	str	r3, [r2, #0]
    862e:	4a15      	ldr	r2, [pc, #84]	; (8684 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
    8630:	6811      	ldr	r1, [r2, #0]
    8632:	4219      	tst	r1, r3
    8634:	d100      	bne.n	8638 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x58>
    8636:	6013      	str	r3, [r2, #0]
    8638:	2301      	movs	r3, #1
    863a:	4a13      	ldr	r2, [pc, #76]	; (8688 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
    863c:	6811      	ldr	r1, [r2, #0]
    863e:	4219      	tst	r1, r3
    8640:	d100      	bne.n	8644 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x64>
    8642:	6013      	str	r3, [r2, #0]
    8644:	4a11      	ldr	r2, [pc, #68]	; (868c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
    8646:	6811      	ldr	r1, [r2, #0]
    8648:	4219      	tst	r1, r3
    864a:	d100      	bne.n	864e <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x6e>
    864c:	6013      	str	r3, [r2, #0]
    864e:	2301      	movs	r3, #1
    8650:	4a0f      	ldr	r2, [pc, #60]	; (8690 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
    8652:	6811      	ldr	r1, [r2, #0]
    8654:	4219      	tst	r1, r3
    8656:	d100      	bne.n	865a <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x7a>
    8658:	6013      	str	r3, [r2, #0]
    865a:	4a0e      	ldr	r2, [pc, #56]	; (8694 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
    865c:	6811      	ldr	r1, [r2, #0]
    865e:	4219      	tst	r1, r3
    8660:	d100      	bne.n	8664 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x84>
    8662:	6013      	str	r3, [r2, #0]
    8664:	4770      	bx	lr
    8666:	46c0      	nop			; (mov r8, r8)
    8668:	20000900 	.word	0x20000900
    866c:	200008fc 	.word	0x200008fc
    8670:	200008f8 	.word	0x200008f8
    8674:	200008f4 	.word	0x200008f4
    8678:	200008f0 	.word	0x200008f0
    867c:	200008ec 	.word	0x200008ec
    8680:	200008e8 	.word	0x200008e8
    8684:	200008e4 	.word	0x200008e4
    8688:	200008e0 	.word	0x200008e0
    868c:	200008dc 	.word	0x200008dc
    8690:	200008d8 	.word	0x200008d8
    8694:	200008d4 	.word	0x200008d4

00008698 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
    8698:	680b      	ldr	r3, [r1, #0]
    869a:	b510      	push	{r4, lr}
    869c:	2b00      	cmp	r3, #0
    869e:	da02      	bge.n	86a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
    86a0:	4809      	ldr	r0, [pc, #36]	; (86c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
    86a2:	f7ff ff93 	bl	85cc <_ZSt20__throw_length_errorPKc>
    86a6:	4293      	cmp	r3, r2
    86a8:	d905      	bls.n	86b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x1e>
    86aa:	0052      	lsls	r2, r2, #1
    86ac:	4293      	cmp	r3, r2
    86ae:	d202      	bcs.n	86b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x1e>
    86b0:	2a00      	cmp	r2, #0
    86b2:	db05      	blt.n	86c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x28>
    86b4:	600a      	str	r2, [r1, #0]
    86b6:	6808      	ldr	r0, [r1, #0]
    86b8:	3001      	adds	r0, #1
    86ba:	f7fd fd99 	bl	61f0 <_Znwj>
    86be:	bd10      	pop	{r4, pc}
    86c0:	4b02      	ldr	r3, [pc, #8]	; (86cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x34>)
    86c2:	600b      	str	r3, [r1, #0]
    86c4:	e7f7      	b.n	86b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x1e>
    86c6:	46c0      	nop			; (mov r8, r8)
    86c8:	0000c1b0 	.word	0x0000c1b0
    86cc:	7fffffff 	.word	0x7fffffff

000086d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
    86d0:	0003      	movs	r3, r0
    86d2:	6800      	ldr	r0, [r0, #0]
    86d4:	3308      	adds	r3, #8
    86d6:	b510      	push	{r4, lr}
    86d8:	4298      	cmp	r0, r3
    86da:	d001      	beq.n	86e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x10>
    86dc:	f7fd fd8c 	bl	61f8 <_ZdlPv>
    86e0:	bd10      	pop	{r4, pc}

000086e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
    86e2:	b510      	push	{r4, lr}
    86e4:	2a01      	cmp	r2, #1
    86e6:	d102      	bne.n	86ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
    86e8:	780b      	ldrb	r3, [r1, #0]
    86ea:	7003      	strb	r3, [r0, #0]
    86ec:	bd10      	pop	{r4, pc}
    86ee:	f7ff ff70 	bl	85d2 <_ZNSt11char_traitsIcE4copyEPcPKcj>
    86f2:	e7fb      	b.n	86ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

000086f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
    86f4:	b510      	push	{r4, lr}
    86f6:	1a52      	subs	r2, r2, r1
    86f8:	f7ff fff3 	bl	86e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
    86fc:	bd10      	pop	{r4, pc}

000086fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
    86fe:	b5f0      	push	{r4, r5, r6, r7, lr}
    8700:	0016      	movs	r6, r2
    8702:	6842      	ldr	r2, [r0, #4]
    8704:	b085      	sub	sp, #20
    8706:	9301      	str	r3, [sp, #4]
    8708:	1a53      	subs	r3, r2, r1
    870a:	1b9b      	subs	r3, r3, r6
    870c:	9300      	str	r3, [sp, #0]
    870e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8710:	000d      	movs	r5, r1
    8712:	1b9b      	subs	r3, r3, r6
    8714:	189b      	adds	r3, r3, r2
    8716:	9303      	str	r3, [sp, #12]
    8718:	0003      	movs	r3, r0
    871a:	6801      	ldr	r1, [r0, #0]
    871c:	3308      	adds	r3, #8
    871e:	0004      	movs	r4, r0
    8720:	220f      	movs	r2, #15
    8722:	4299      	cmp	r1, r3
    8724:	d000      	beq.n	8728 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x2a>
    8726:	6882      	ldr	r2, [r0, #8]
    8728:	a903      	add	r1, sp, #12
    872a:	0020      	movs	r0, r4
    872c:	f7ff ffb4 	bl	8698 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
    8730:	0007      	movs	r7, r0
    8732:	2d00      	cmp	r5, #0
    8734:	d003      	beq.n	873e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x40>
    8736:	002a      	movs	r2, r5
    8738:	6821      	ldr	r1, [r4, #0]
    873a:	f7ff ffd2 	bl	86e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
    873e:	9b01      	ldr	r3, [sp, #4]
    8740:	2b00      	cmp	r3, #0
    8742:	d007      	beq.n	8754 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
    8744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8746:	2b00      	cmp	r3, #0
    8748:	d004      	beq.n	8754 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
    874a:	1978      	adds	r0, r7, r5
    874c:	001a      	movs	r2, r3
    874e:	9901      	ldr	r1, [sp, #4]
    8750:	f7ff ffc7 	bl	86e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
    8754:	9b00      	ldr	r3, [sp, #0]
    8756:	2b00      	cmp	r3, #0
    8758:	d008      	beq.n	876c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6e>
    875a:	6823      	ldr	r3, [r4, #0]
    875c:	19ae      	adds	r6, r5, r6
    875e:	1999      	adds	r1, r3, r6
    8760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8762:	9a00      	ldr	r2, [sp, #0]
    8764:	18ed      	adds	r5, r5, r3
    8766:	1978      	adds	r0, r7, r5
    8768:	f7ff ffbb 	bl	86e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
    876c:	0020      	movs	r0, r4
    876e:	f7ff ffaf 	bl	86d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
    8772:	9b03      	ldr	r3, [sp, #12]
    8774:	6027      	str	r7, [r4, #0]
    8776:	60a3      	str	r3, [r4, #8]
    8778:	b005      	add	sp, #20
    877a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000877c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
    877c:	b510      	push	{r4, lr}
    877e:	0004      	movs	r4, r0
    8780:	f7ff ffa6 	bl	86d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
    8784:	0020      	movs	r0, r4
    8786:	bd10      	pop	{r4, pc}

00008788 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
    8788:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    878a:	0002      	movs	r2, r0
    878c:	000f      	movs	r7, r1
    878e:	6846      	ldr	r6, [r0, #4]
    8790:	6801      	ldr	r1, [r0, #0]
    8792:	3208      	adds	r2, #8
    8794:	0004      	movs	r4, r0
    8796:	1c75      	adds	r5, r6, #1
    8798:	230f      	movs	r3, #15
    879a:	4291      	cmp	r1, r2
    879c:	d000      	beq.n	87a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x18>
    879e:	6883      	ldr	r3, [r0, #8]
    87a0:	429d      	cmp	r5, r3
    87a2:	d907      	bls.n	87b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2c>
    87a4:	2301      	movs	r3, #1
    87a6:	9300      	str	r3, [sp, #0]
    87a8:	2300      	movs	r3, #0
    87aa:	0031      	movs	r1, r6
    87ac:	001a      	movs	r2, r3
    87ae:	0020      	movs	r0, r4
    87b0:	f7ff ffa5 	bl	86fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
    87b4:	2200      	movs	r2, #0
    87b6:	6823      	ldr	r3, [r4, #0]
    87b8:	559f      	strb	r7, [r3, r6]
    87ba:	6823      	ldr	r3, [r4, #0]
    87bc:	6065      	str	r5, [r4, #4]
    87be:	555a      	strb	r2, [r3, r5]
    87c0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	...

000087c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
    87c4:	2301      	movs	r3, #1
    87c6:	4a16      	ldr	r2, [pc, #88]	; (8820 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x5c>)
    87c8:	6811      	ldr	r1, [r2, #0]
    87ca:	4219      	tst	r1, r3
    87cc:	d100      	bne.n	87d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0xc>
    87ce:	6013      	str	r3, [r2, #0]
    87d0:	4a14      	ldr	r2, [pc, #80]	; (8824 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x60>)
    87d2:	6811      	ldr	r1, [r2, #0]
    87d4:	4219      	tst	r1, r3
    87d6:	d100      	bne.n	87da <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x16>
    87d8:	6013      	str	r3, [r2, #0]
    87da:	2301      	movs	r3, #1
    87dc:	4a12      	ldr	r2, [pc, #72]	; (8828 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
    87de:	6811      	ldr	r1, [r2, #0]
    87e0:	4219      	tst	r1, r3
    87e2:	d100      	bne.n	87e6 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x22>
    87e4:	6013      	str	r3, [r2, #0]
    87e6:	4a11      	ldr	r2, [pc, #68]	; (882c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
    87e8:	6811      	ldr	r1, [r2, #0]
    87ea:	4219      	tst	r1, r3
    87ec:	d100      	bne.n	87f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x2c>
    87ee:	6013      	str	r3, [r2, #0]
    87f0:	2301      	movs	r3, #1
    87f2:	4a0f      	ldr	r2, [pc, #60]	; (8830 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
    87f4:	6811      	ldr	r1, [r2, #0]
    87f6:	4219      	tst	r1, r3
    87f8:	d100      	bne.n	87fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x38>
    87fa:	6013      	str	r3, [r2, #0]
    87fc:	4a0d      	ldr	r2, [pc, #52]	; (8834 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
    87fe:	6811      	ldr	r1, [r2, #0]
    8800:	4219      	tst	r1, r3
    8802:	d100      	bne.n	8806 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x42>
    8804:	6013      	str	r3, [r2, #0]
    8806:	2301      	movs	r3, #1
    8808:	4a0b      	ldr	r2, [pc, #44]	; (8838 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
    880a:	6811      	ldr	r1, [r2, #0]
    880c:	4219      	tst	r1, r3
    880e:	d100      	bne.n	8812 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x4e>
    8810:	6013      	str	r3, [r2, #0]
    8812:	4a0a      	ldr	r2, [pc, #40]	; (883c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
    8814:	6811      	ldr	r1, [r2, #0]
    8816:	4219      	tst	r1, r3
    8818:	d100      	bne.n	881c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x58>
    881a:	6013      	str	r3, [r2, #0]
    881c:	4770      	bx	lr
    881e:	46c0      	nop			; (mov r8, r8)
    8820:	20000920 	.word	0x20000920
    8824:	2000091c 	.word	0x2000091c
    8828:	20000918 	.word	0x20000918
    882c:	20000914 	.word	0x20000914
    8830:	20000910 	.word	0x20000910
    8834:	2000090c 	.word	0x2000090c
    8838:	20000908 	.word	0x20000908
    883c:	20000904 	.word	0x20000904

00008840 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
    8840:	2301      	movs	r3, #1
    8842:	4a16      	ldr	r2, [pc, #88]	; (889c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x5c>)
    8844:	6811      	ldr	r1, [r2, #0]
    8846:	4219      	tst	r1, r3
    8848:	d100      	bne.n	884c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0xc>
    884a:	6013      	str	r3, [r2, #0]
    884c:	4a14      	ldr	r2, [pc, #80]	; (88a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x60>)
    884e:	6811      	ldr	r1, [r2, #0]
    8850:	4219      	tst	r1, r3
    8852:	d100      	bne.n	8856 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x16>
    8854:	6013      	str	r3, [r2, #0]
    8856:	2301      	movs	r3, #1
    8858:	4a12      	ldr	r2, [pc, #72]	; (88a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
    885a:	6811      	ldr	r1, [r2, #0]
    885c:	4219      	tst	r1, r3
    885e:	d100      	bne.n	8862 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x22>
    8860:	6013      	str	r3, [r2, #0]
    8862:	4a11      	ldr	r2, [pc, #68]	; (88a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
    8864:	6811      	ldr	r1, [r2, #0]
    8866:	4219      	tst	r1, r3
    8868:	d100      	bne.n	886c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x2c>
    886a:	6013      	str	r3, [r2, #0]
    886c:	2301      	movs	r3, #1
    886e:	4a0f      	ldr	r2, [pc, #60]	; (88ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
    8870:	6811      	ldr	r1, [r2, #0]
    8872:	4219      	tst	r1, r3
    8874:	d100      	bne.n	8878 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x38>
    8876:	6013      	str	r3, [r2, #0]
    8878:	4a0d      	ldr	r2, [pc, #52]	; (88b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
    887a:	6811      	ldr	r1, [r2, #0]
    887c:	4219      	tst	r1, r3
    887e:	d100      	bne.n	8882 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x42>
    8880:	6013      	str	r3, [r2, #0]
    8882:	2301      	movs	r3, #1
    8884:	4a0b      	ldr	r2, [pc, #44]	; (88b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
    8886:	6811      	ldr	r1, [r2, #0]
    8888:	4219      	tst	r1, r3
    888a:	d100      	bne.n	888e <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x4e>
    888c:	6013      	str	r3, [r2, #0]
    888e:	4a0a      	ldr	r2, [pc, #40]	; (88b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
    8890:	6811      	ldr	r1, [r2, #0]
    8892:	4219      	tst	r1, r3
    8894:	d100      	bne.n	8898 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x58>
    8896:	6013      	str	r3, [r2, #0]
    8898:	4770      	bx	lr
    889a:	46c0      	nop			; (mov r8, r8)
    889c:	20000940 	.word	0x20000940
    88a0:	2000093c 	.word	0x2000093c
    88a4:	20000938 	.word	0x20000938
    88a8:	20000934 	.word	0x20000934
    88ac:	20000930 	.word	0x20000930
    88b0:	2000092c 	.word	0x2000092c
    88b4:	20000928 	.word	0x20000928
    88b8:	20000924 	.word	0x20000924

000088bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
    88bc:	2301      	movs	r3, #1
    88be:	4a21      	ldr	r2, [pc, #132]	; (8944 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x88>)
    88c0:	6811      	ldr	r1, [r2, #0]
    88c2:	4219      	tst	r1, r3
    88c4:	d100      	bne.n	88c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc>
    88c6:	6013      	str	r3, [r2, #0]
    88c8:	4a1f      	ldr	r2, [pc, #124]	; (8948 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x8c>)
    88ca:	6811      	ldr	r1, [r2, #0]
    88cc:	4219      	tst	r1, r3
    88ce:	d100      	bne.n	88d2 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x16>
    88d0:	6013      	str	r3, [r2, #0]
    88d2:	2301      	movs	r3, #1
    88d4:	4a1d      	ldr	r2, [pc, #116]	; (894c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x90>)
    88d6:	6811      	ldr	r1, [r2, #0]
    88d8:	4219      	tst	r1, r3
    88da:	d100      	bne.n	88de <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x22>
    88dc:	6013      	str	r3, [r2, #0]
    88de:	4a1c      	ldr	r2, [pc, #112]	; (8950 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
    88e0:	6811      	ldr	r1, [r2, #0]
    88e2:	4219      	tst	r1, r3
    88e4:	d100      	bne.n	88e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x2c>
    88e6:	6013      	str	r3, [r2, #0]
    88e8:	2301      	movs	r3, #1
    88ea:	4a1a      	ldr	r2, [pc, #104]	; (8954 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
    88ec:	6811      	ldr	r1, [r2, #0]
    88ee:	4219      	tst	r1, r3
    88f0:	d100      	bne.n	88f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x38>
    88f2:	6013      	str	r3, [r2, #0]
    88f4:	4a18      	ldr	r2, [pc, #96]	; (8958 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
    88f6:	6811      	ldr	r1, [r2, #0]
    88f8:	4219      	tst	r1, r3
    88fa:	d100      	bne.n	88fe <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x42>
    88fc:	6013      	str	r3, [r2, #0]
    88fe:	2301      	movs	r3, #1
    8900:	4a16      	ldr	r2, [pc, #88]	; (895c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
    8902:	6811      	ldr	r1, [r2, #0]
    8904:	4219      	tst	r1, r3
    8906:	d100      	bne.n	890a <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x4e>
    8908:	6013      	str	r3, [r2, #0]
    890a:	4a15      	ldr	r2, [pc, #84]	; (8960 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
    890c:	6811      	ldr	r1, [r2, #0]
    890e:	4219      	tst	r1, r3
    8910:	d100      	bne.n	8914 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x58>
    8912:	6013      	str	r3, [r2, #0]
    8914:	2301      	movs	r3, #1
    8916:	4a13      	ldr	r2, [pc, #76]	; (8964 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
    8918:	6811      	ldr	r1, [r2, #0]
    891a:	4219      	tst	r1, r3
    891c:	d100      	bne.n	8920 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x64>
    891e:	6013      	str	r3, [r2, #0]
    8920:	4a11      	ldr	r2, [pc, #68]	; (8968 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
    8922:	6811      	ldr	r1, [r2, #0]
    8924:	4219      	tst	r1, r3
    8926:	d100      	bne.n	892a <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x6e>
    8928:	6013      	str	r3, [r2, #0]
    892a:	2301      	movs	r3, #1
    892c:	4a0f      	ldr	r2, [pc, #60]	; (896c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
    892e:	6811      	ldr	r1, [r2, #0]
    8930:	4219      	tst	r1, r3
    8932:	d100      	bne.n	8936 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x7a>
    8934:	6013      	str	r3, [r2, #0]
    8936:	4a0e      	ldr	r2, [pc, #56]	; (8970 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
    8938:	6811      	ldr	r1, [r2, #0]
    893a:	4219      	tst	r1, r3
    893c:	d100      	bne.n	8940 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x84>
    893e:	6013      	str	r3, [r2, #0]
    8940:	4770      	bx	lr
    8942:	46c0      	nop			; (mov r8, r8)
    8944:	20000970 	.word	0x20000970
    8948:	2000096c 	.word	0x2000096c
    894c:	20000968 	.word	0x20000968
    8950:	20000964 	.word	0x20000964
    8954:	20000960 	.word	0x20000960
    8958:	2000095c 	.word	0x2000095c
    895c:	20000958 	.word	0x20000958
    8960:	20000954 	.word	0x20000954
    8964:	20000950 	.word	0x20000950
    8968:	2000094c 	.word	0x2000094c
    896c:	20000948 	.word	0x20000948
    8970:	20000944 	.word	0x20000944

00008974 <__gnu_thumb1_case_sqi>:
    8974:	b402      	push	{r1}
    8976:	4671      	mov	r1, lr
    8978:	0849      	lsrs	r1, r1, #1
    897a:	0049      	lsls	r1, r1, #1
    897c:	5609      	ldrsb	r1, [r1, r0]
    897e:	0049      	lsls	r1, r1, #1
    8980:	448e      	add	lr, r1
    8982:	bc02      	pop	{r1}
    8984:	4770      	bx	lr
    8986:	46c0      	nop			; (mov r8, r8)

00008988 <__gnu_thumb1_case_uqi>:
    8988:	b402      	push	{r1}
    898a:	4671      	mov	r1, lr
    898c:	0849      	lsrs	r1, r1, #1
    898e:	0049      	lsls	r1, r1, #1
    8990:	5c09      	ldrb	r1, [r1, r0]
    8992:	0049      	lsls	r1, r1, #1
    8994:	448e      	add	lr, r1
    8996:	bc02      	pop	{r1}
    8998:	4770      	bx	lr
    899a:	46c0      	nop			; (mov r8, r8)

0000899c <__gnu_thumb1_case_uhi>:
    899c:	b403      	push	{r0, r1}
    899e:	4671      	mov	r1, lr
    89a0:	0849      	lsrs	r1, r1, #1
    89a2:	0040      	lsls	r0, r0, #1
    89a4:	0049      	lsls	r1, r1, #1
    89a6:	5a09      	ldrh	r1, [r1, r0]
    89a8:	0049      	lsls	r1, r1, #1
    89aa:	448e      	add	lr, r1
    89ac:	bc03      	pop	{r0, r1}
    89ae:	4770      	bx	lr

000089b0 <__udivsi3>:
    89b0:	2200      	movs	r2, #0
    89b2:	0843      	lsrs	r3, r0, #1
    89b4:	428b      	cmp	r3, r1
    89b6:	d374      	bcc.n	8aa2 <__udivsi3+0xf2>
    89b8:	0903      	lsrs	r3, r0, #4
    89ba:	428b      	cmp	r3, r1
    89bc:	d35f      	bcc.n	8a7e <__udivsi3+0xce>
    89be:	0a03      	lsrs	r3, r0, #8
    89c0:	428b      	cmp	r3, r1
    89c2:	d344      	bcc.n	8a4e <__udivsi3+0x9e>
    89c4:	0b03      	lsrs	r3, r0, #12
    89c6:	428b      	cmp	r3, r1
    89c8:	d328      	bcc.n	8a1c <__udivsi3+0x6c>
    89ca:	0c03      	lsrs	r3, r0, #16
    89cc:	428b      	cmp	r3, r1
    89ce:	d30d      	bcc.n	89ec <__udivsi3+0x3c>
    89d0:	22ff      	movs	r2, #255	; 0xff
    89d2:	0209      	lsls	r1, r1, #8
    89d4:	ba12      	rev	r2, r2
    89d6:	0c03      	lsrs	r3, r0, #16
    89d8:	428b      	cmp	r3, r1
    89da:	d302      	bcc.n	89e2 <__udivsi3+0x32>
    89dc:	1212      	asrs	r2, r2, #8
    89de:	0209      	lsls	r1, r1, #8
    89e0:	d065      	beq.n	8aae <__udivsi3+0xfe>
    89e2:	0b03      	lsrs	r3, r0, #12
    89e4:	428b      	cmp	r3, r1
    89e6:	d319      	bcc.n	8a1c <__udivsi3+0x6c>
    89e8:	e000      	b.n	89ec <__udivsi3+0x3c>
    89ea:	0a09      	lsrs	r1, r1, #8
    89ec:	0bc3      	lsrs	r3, r0, #15
    89ee:	428b      	cmp	r3, r1
    89f0:	d301      	bcc.n	89f6 <__udivsi3+0x46>
    89f2:	03cb      	lsls	r3, r1, #15
    89f4:	1ac0      	subs	r0, r0, r3
    89f6:	4152      	adcs	r2, r2
    89f8:	0b83      	lsrs	r3, r0, #14
    89fa:	428b      	cmp	r3, r1
    89fc:	d301      	bcc.n	8a02 <__udivsi3+0x52>
    89fe:	038b      	lsls	r3, r1, #14
    8a00:	1ac0      	subs	r0, r0, r3
    8a02:	4152      	adcs	r2, r2
    8a04:	0b43      	lsrs	r3, r0, #13
    8a06:	428b      	cmp	r3, r1
    8a08:	d301      	bcc.n	8a0e <__udivsi3+0x5e>
    8a0a:	034b      	lsls	r3, r1, #13
    8a0c:	1ac0      	subs	r0, r0, r3
    8a0e:	4152      	adcs	r2, r2
    8a10:	0b03      	lsrs	r3, r0, #12
    8a12:	428b      	cmp	r3, r1
    8a14:	d301      	bcc.n	8a1a <__udivsi3+0x6a>
    8a16:	030b      	lsls	r3, r1, #12
    8a18:	1ac0      	subs	r0, r0, r3
    8a1a:	4152      	adcs	r2, r2
    8a1c:	0ac3      	lsrs	r3, r0, #11
    8a1e:	428b      	cmp	r3, r1
    8a20:	d301      	bcc.n	8a26 <__udivsi3+0x76>
    8a22:	02cb      	lsls	r3, r1, #11
    8a24:	1ac0      	subs	r0, r0, r3
    8a26:	4152      	adcs	r2, r2
    8a28:	0a83      	lsrs	r3, r0, #10
    8a2a:	428b      	cmp	r3, r1
    8a2c:	d301      	bcc.n	8a32 <__udivsi3+0x82>
    8a2e:	028b      	lsls	r3, r1, #10
    8a30:	1ac0      	subs	r0, r0, r3
    8a32:	4152      	adcs	r2, r2
    8a34:	0a43      	lsrs	r3, r0, #9
    8a36:	428b      	cmp	r3, r1
    8a38:	d301      	bcc.n	8a3e <__udivsi3+0x8e>
    8a3a:	024b      	lsls	r3, r1, #9
    8a3c:	1ac0      	subs	r0, r0, r3
    8a3e:	4152      	adcs	r2, r2
    8a40:	0a03      	lsrs	r3, r0, #8
    8a42:	428b      	cmp	r3, r1
    8a44:	d301      	bcc.n	8a4a <__udivsi3+0x9a>
    8a46:	020b      	lsls	r3, r1, #8
    8a48:	1ac0      	subs	r0, r0, r3
    8a4a:	4152      	adcs	r2, r2
    8a4c:	d2cd      	bcs.n	89ea <__udivsi3+0x3a>
    8a4e:	09c3      	lsrs	r3, r0, #7
    8a50:	428b      	cmp	r3, r1
    8a52:	d301      	bcc.n	8a58 <__udivsi3+0xa8>
    8a54:	01cb      	lsls	r3, r1, #7
    8a56:	1ac0      	subs	r0, r0, r3
    8a58:	4152      	adcs	r2, r2
    8a5a:	0983      	lsrs	r3, r0, #6
    8a5c:	428b      	cmp	r3, r1
    8a5e:	d301      	bcc.n	8a64 <__udivsi3+0xb4>
    8a60:	018b      	lsls	r3, r1, #6
    8a62:	1ac0      	subs	r0, r0, r3
    8a64:	4152      	adcs	r2, r2
    8a66:	0943      	lsrs	r3, r0, #5
    8a68:	428b      	cmp	r3, r1
    8a6a:	d301      	bcc.n	8a70 <__udivsi3+0xc0>
    8a6c:	014b      	lsls	r3, r1, #5
    8a6e:	1ac0      	subs	r0, r0, r3
    8a70:	4152      	adcs	r2, r2
    8a72:	0903      	lsrs	r3, r0, #4
    8a74:	428b      	cmp	r3, r1
    8a76:	d301      	bcc.n	8a7c <__udivsi3+0xcc>
    8a78:	010b      	lsls	r3, r1, #4
    8a7a:	1ac0      	subs	r0, r0, r3
    8a7c:	4152      	adcs	r2, r2
    8a7e:	08c3      	lsrs	r3, r0, #3
    8a80:	428b      	cmp	r3, r1
    8a82:	d301      	bcc.n	8a88 <__udivsi3+0xd8>
    8a84:	00cb      	lsls	r3, r1, #3
    8a86:	1ac0      	subs	r0, r0, r3
    8a88:	4152      	adcs	r2, r2
    8a8a:	0883      	lsrs	r3, r0, #2
    8a8c:	428b      	cmp	r3, r1
    8a8e:	d301      	bcc.n	8a94 <__udivsi3+0xe4>
    8a90:	008b      	lsls	r3, r1, #2
    8a92:	1ac0      	subs	r0, r0, r3
    8a94:	4152      	adcs	r2, r2
    8a96:	0843      	lsrs	r3, r0, #1
    8a98:	428b      	cmp	r3, r1
    8a9a:	d301      	bcc.n	8aa0 <__udivsi3+0xf0>
    8a9c:	004b      	lsls	r3, r1, #1
    8a9e:	1ac0      	subs	r0, r0, r3
    8aa0:	4152      	adcs	r2, r2
    8aa2:	1a41      	subs	r1, r0, r1
    8aa4:	d200      	bcs.n	8aa8 <__udivsi3+0xf8>
    8aa6:	4601      	mov	r1, r0
    8aa8:	4152      	adcs	r2, r2
    8aaa:	4610      	mov	r0, r2
    8aac:	4770      	bx	lr
    8aae:	e7ff      	b.n	8ab0 <__udivsi3+0x100>
    8ab0:	b501      	push	{r0, lr}
    8ab2:	2000      	movs	r0, #0
    8ab4:	f000 f8f0 	bl	8c98 <__aeabi_idiv0>
    8ab8:	bd02      	pop	{r1, pc}
    8aba:	46c0      	nop			; (mov r8, r8)

00008abc <__aeabi_uidivmod>:
    8abc:	2900      	cmp	r1, #0
    8abe:	d0f7      	beq.n	8ab0 <__udivsi3+0x100>
    8ac0:	e776      	b.n	89b0 <__udivsi3>
    8ac2:	4770      	bx	lr

00008ac4 <__divsi3>:
    8ac4:	4603      	mov	r3, r0
    8ac6:	430b      	orrs	r3, r1
    8ac8:	d47f      	bmi.n	8bca <__divsi3+0x106>
    8aca:	2200      	movs	r2, #0
    8acc:	0843      	lsrs	r3, r0, #1
    8ace:	428b      	cmp	r3, r1
    8ad0:	d374      	bcc.n	8bbc <__divsi3+0xf8>
    8ad2:	0903      	lsrs	r3, r0, #4
    8ad4:	428b      	cmp	r3, r1
    8ad6:	d35f      	bcc.n	8b98 <__divsi3+0xd4>
    8ad8:	0a03      	lsrs	r3, r0, #8
    8ada:	428b      	cmp	r3, r1
    8adc:	d344      	bcc.n	8b68 <__divsi3+0xa4>
    8ade:	0b03      	lsrs	r3, r0, #12
    8ae0:	428b      	cmp	r3, r1
    8ae2:	d328      	bcc.n	8b36 <__divsi3+0x72>
    8ae4:	0c03      	lsrs	r3, r0, #16
    8ae6:	428b      	cmp	r3, r1
    8ae8:	d30d      	bcc.n	8b06 <__divsi3+0x42>
    8aea:	22ff      	movs	r2, #255	; 0xff
    8aec:	0209      	lsls	r1, r1, #8
    8aee:	ba12      	rev	r2, r2
    8af0:	0c03      	lsrs	r3, r0, #16
    8af2:	428b      	cmp	r3, r1
    8af4:	d302      	bcc.n	8afc <__divsi3+0x38>
    8af6:	1212      	asrs	r2, r2, #8
    8af8:	0209      	lsls	r1, r1, #8
    8afa:	d065      	beq.n	8bc8 <__divsi3+0x104>
    8afc:	0b03      	lsrs	r3, r0, #12
    8afe:	428b      	cmp	r3, r1
    8b00:	d319      	bcc.n	8b36 <__divsi3+0x72>
    8b02:	e000      	b.n	8b06 <__divsi3+0x42>
    8b04:	0a09      	lsrs	r1, r1, #8
    8b06:	0bc3      	lsrs	r3, r0, #15
    8b08:	428b      	cmp	r3, r1
    8b0a:	d301      	bcc.n	8b10 <__divsi3+0x4c>
    8b0c:	03cb      	lsls	r3, r1, #15
    8b0e:	1ac0      	subs	r0, r0, r3
    8b10:	4152      	adcs	r2, r2
    8b12:	0b83      	lsrs	r3, r0, #14
    8b14:	428b      	cmp	r3, r1
    8b16:	d301      	bcc.n	8b1c <__divsi3+0x58>
    8b18:	038b      	lsls	r3, r1, #14
    8b1a:	1ac0      	subs	r0, r0, r3
    8b1c:	4152      	adcs	r2, r2
    8b1e:	0b43      	lsrs	r3, r0, #13
    8b20:	428b      	cmp	r3, r1
    8b22:	d301      	bcc.n	8b28 <__divsi3+0x64>
    8b24:	034b      	lsls	r3, r1, #13
    8b26:	1ac0      	subs	r0, r0, r3
    8b28:	4152      	adcs	r2, r2
    8b2a:	0b03      	lsrs	r3, r0, #12
    8b2c:	428b      	cmp	r3, r1
    8b2e:	d301      	bcc.n	8b34 <__divsi3+0x70>
    8b30:	030b      	lsls	r3, r1, #12
    8b32:	1ac0      	subs	r0, r0, r3
    8b34:	4152      	adcs	r2, r2
    8b36:	0ac3      	lsrs	r3, r0, #11
    8b38:	428b      	cmp	r3, r1
    8b3a:	d301      	bcc.n	8b40 <__divsi3+0x7c>
    8b3c:	02cb      	lsls	r3, r1, #11
    8b3e:	1ac0      	subs	r0, r0, r3
    8b40:	4152      	adcs	r2, r2
    8b42:	0a83      	lsrs	r3, r0, #10
    8b44:	428b      	cmp	r3, r1
    8b46:	d301      	bcc.n	8b4c <__divsi3+0x88>
    8b48:	028b      	lsls	r3, r1, #10
    8b4a:	1ac0      	subs	r0, r0, r3
    8b4c:	4152      	adcs	r2, r2
    8b4e:	0a43      	lsrs	r3, r0, #9
    8b50:	428b      	cmp	r3, r1
    8b52:	d301      	bcc.n	8b58 <__divsi3+0x94>
    8b54:	024b      	lsls	r3, r1, #9
    8b56:	1ac0      	subs	r0, r0, r3
    8b58:	4152      	adcs	r2, r2
    8b5a:	0a03      	lsrs	r3, r0, #8
    8b5c:	428b      	cmp	r3, r1
    8b5e:	d301      	bcc.n	8b64 <__divsi3+0xa0>
    8b60:	020b      	lsls	r3, r1, #8
    8b62:	1ac0      	subs	r0, r0, r3
    8b64:	4152      	adcs	r2, r2
    8b66:	d2cd      	bcs.n	8b04 <__divsi3+0x40>
    8b68:	09c3      	lsrs	r3, r0, #7
    8b6a:	428b      	cmp	r3, r1
    8b6c:	d301      	bcc.n	8b72 <__divsi3+0xae>
    8b6e:	01cb      	lsls	r3, r1, #7
    8b70:	1ac0      	subs	r0, r0, r3
    8b72:	4152      	adcs	r2, r2
    8b74:	0983      	lsrs	r3, r0, #6
    8b76:	428b      	cmp	r3, r1
    8b78:	d301      	bcc.n	8b7e <__divsi3+0xba>
    8b7a:	018b      	lsls	r3, r1, #6
    8b7c:	1ac0      	subs	r0, r0, r3
    8b7e:	4152      	adcs	r2, r2
    8b80:	0943      	lsrs	r3, r0, #5
    8b82:	428b      	cmp	r3, r1
    8b84:	d301      	bcc.n	8b8a <__divsi3+0xc6>
    8b86:	014b      	lsls	r3, r1, #5
    8b88:	1ac0      	subs	r0, r0, r3
    8b8a:	4152      	adcs	r2, r2
    8b8c:	0903      	lsrs	r3, r0, #4
    8b8e:	428b      	cmp	r3, r1
    8b90:	d301      	bcc.n	8b96 <__divsi3+0xd2>
    8b92:	010b      	lsls	r3, r1, #4
    8b94:	1ac0      	subs	r0, r0, r3
    8b96:	4152      	adcs	r2, r2
    8b98:	08c3      	lsrs	r3, r0, #3
    8b9a:	428b      	cmp	r3, r1
    8b9c:	d301      	bcc.n	8ba2 <__divsi3+0xde>
    8b9e:	00cb      	lsls	r3, r1, #3
    8ba0:	1ac0      	subs	r0, r0, r3
    8ba2:	4152      	adcs	r2, r2
    8ba4:	0883      	lsrs	r3, r0, #2
    8ba6:	428b      	cmp	r3, r1
    8ba8:	d301      	bcc.n	8bae <__divsi3+0xea>
    8baa:	008b      	lsls	r3, r1, #2
    8bac:	1ac0      	subs	r0, r0, r3
    8bae:	4152      	adcs	r2, r2
    8bb0:	0843      	lsrs	r3, r0, #1
    8bb2:	428b      	cmp	r3, r1
    8bb4:	d301      	bcc.n	8bba <__divsi3+0xf6>
    8bb6:	004b      	lsls	r3, r1, #1
    8bb8:	1ac0      	subs	r0, r0, r3
    8bba:	4152      	adcs	r2, r2
    8bbc:	1a41      	subs	r1, r0, r1
    8bbe:	d200      	bcs.n	8bc2 <__divsi3+0xfe>
    8bc0:	4601      	mov	r1, r0
    8bc2:	4152      	adcs	r2, r2
    8bc4:	4610      	mov	r0, r2
    8bc6:	4770      	bx	lr
    8bc8:	e05d      	b.n	8c86 <__divsi3+0x1c2>
    8bca:	0fca      	lsrs	r2, r1, #31
    8bcc:	d000      	beq.n	8bd0 <__divsi3+0x10c>
    8bce:	4249      	negs	r1, r1
    8bd0:	1003      	asrs	r3, r0, #32
    8bd2:	d300      	bcc.n	8bd6 <__divsi3+0x112>
    8bd4:	4240      	negs	r0, r0
    8bd6:	4053      	eors	r3, r2
    8bd8:	2200      	movs	r2, #0
    8bda:	469c      	mov	ip, r3
    8bdc:	0903      	lsrs	r3, r0, #4
    8bde:	428b      	cmp	r3, r1
    8be0:	d32d      	bcc.n	8c3e <__divsi3+0x17a>
    8be2:	0a03      	lsrs	r3, r0, #8
    8be4:	428b      	cmp	r3, r1
    8be6:	d312      	bcc.n	8c0e <__divsi3+0x14a>
    8be8:	22fc      	movs	r2, #252	; 0xfc
    8bea:	0189      	lsls	r1, r1, #6
    8bec:	ba12      	rev	r2, r2
    8bee:	0a03      	lsrs	r3, r0, #8
    8bf0:	428b      	cmp	r3, r1
    8bf2:	d30c      	bcc.n	8c0e <__divsi3+0x14a>
    8bf4:	0189      	lsls	r1, r1, #6
    8bf6:	1192      	asrs	r2, r2, #6
    8bf8:	428b      	cmp	r3, r1
    8bfa:	d308      	bcc.n	8c0e <__divsi3+0x14a>
    8bfc:	0189      	lsls	r1, r1, #6
    8bfe:	1192      	asrs	r2, r2, #6
    8c00:	428b      	cmp	r3, r1
    8c02:	d304      	bcc.n	8c0e <__divsi3+0x14a>
    8c04:	0189      	lsls	r1, r1, #6
    8c06:	d03a      	beq.n	8c7e <__divsi3+0x1ba>
    8c08:	1192      	asrs	r2, r2, #6
    8c0a:	e000      	b.n	8c0e <__divsi3+0x14a>
    8c0c:	0989      	lsrs	r1, r1, #6
    8c0e:	09c3      	lsrs	r3, r0, #7
    8c10:	428b      	cmp	r3, r1
    8c12:	d301      	bcc.n	8c18 <__divsi3+0x154>
    8c14:	01cb      	lsls	r3, r1, #7
    8c16:	1ac0      	subs	r0, r0, r3
    8c18:	4152      	adcs	r2, r2
    8c1a:	0983      	lsrs	r3, r0, #6
    8c1c:	428b      	cmp	r3, r1
    8c1e:	d301      	bcc.n	8c24 <__divsi3+0x160>
    8c20:	018b      	lsls	r3, r1, #6
    8c22:	1ac0      	subs	r0, r0, r3
    8c24:	4152      	adcs	r2, r2
    8c26:	0943      	lsrs	r3, r0, #5
    8c28:	428b      	cmp	r3, r1
    8c2a:	d301      	bcc.n	8c30 <__divsi3+0x16c>
    8c2c:	014b      	lsls	r3, r1, #5
    8c2e:	1ac0      	subs	r0, r0, r3
    8c30:	4152      	adcs	r2, r2
    8c32:	0903      	lsrs	r3, r0, #4
    8c34:	428b      	cmp	r3, r1
    8c36:	d301      	bcc.n	8c3c <__divsi3+0x178>
    8c38:	010b      	lsls	r3, r1, #4
    8c3a:	1ac0      	subs	r0, r0, r3
    8c3c:	4152      	adcs	r2, r2
    8c3e:	08c3      	lsrs	r3, r0, #3
    8c40:	428b      	cmp	r3, r1
    8c42:	d301      	bcc.n	8c48 <__divsi3+0x184>
    8c44:	00cb      	lsls	r3, r1, #3
    8c46:	1ac0      	subs	r0, r0, r3
    8c48:	4152      	adcs	r2, r2
    8c4a:	0883      	lsrs	r3, r0, #2
    8c4c:	428b      	cmp	r3, r1
    8c4e:	d301      	bcc.n	8c54 <__divsi3+0x190>
    8c50:	008b      	lsls	r3, r1, #2
    8c52:	1ac0      	subs	r0, r0, r3
    8c54:	4152      	adcs	r2, r2
    8c56:	d2d9      	bcs.n	8c0c <__divsi3+0x148>
    8c58:	0843      	lsrs	r3, r0, #1
    8c5a:	428b      	cmp	r3, r1
    8c5c:	d301      	bcc.n	8c62 <__divsi3+0x19e>
    8c5e:	004b      	lsls	r3, r1, #1
    8c60:	1ac0      	subs	r0, r0, r3
    8c62:	4152      	adcs	r2, r2
    8c64:	1a41      	subs	r1, r0, r1
    8c66:	d200      	bcs.n	8c6a <__divsi3+0x1a6>
    8c68:	4601      	mov	r1, r0
    8c6a:	4663      	mov	r3, ip
    8c6c:	4152      	adcs	r2, r2
    8c6e:	105b      	asrs	r3, r3, #1
    8c70:	4610      	mov	r0, r2
    8c72:	d301      	bcc.n	8c78 <__divsi3+0x1b4>
    8c74:	4240      	negs	r0, r0
    8c76:	2b00      	cmp	r3, #0
    8c78:	d500      	bpl.n	8c7c <__divsi3+0x1b8>
    8c7a:	4249      	negs	r1, r1
    8c7c:	4770      	bx	lr
    8c7e:	4663      	mov	r3, ip
    8c80:	105b      	asrs	r3, r3, #1
    8c82:	d300      	bcc.n	8c86 <__divsi3+0x1c2>
    8c84:	4240      	negs	r0, r0
    8c86:	b501      	push	{r0, lr}
    8c88:	2000      	movs	r0, #0
    8c8a:	f000 f805 	bl	8c98 <__aeabi_idiv0>
    8c8e:	bd02      	pop	{r1, pc}

00008c90 <__aeabi_idivmod>:
    8c90:	2900      	cmp	r1, #0
    8c92:	d0f8      	beq.n	8c86 <__divsi3+0x1c2>
    8c94:	e716      	b.n	8ac4 <__divsi3>
    8c96:	4770      	bx	lr

00008c98 <__aeabi_idiv0>:
    8c98:	4770      	bx	lr
    8c9a:	46c0      	nop			; (mov r8, r8)

00008c9c <__aeabi_cdrcmple>:
    8c9c:	4684      	mov	ip, r0
    8c9e:	1c10      	adds	r0, r2, #0
    8ca0:	4662      	mov	r2, ip
    8ca2:	468c      	mov	ip, r1
    8ca4:	1c19      	adds	r1, r3, #0
    8ca6:	4663      	mov	r3, ip
    8ca8:	e000      	b.n	8cac <__aeabi_cdcmpeq>
    8caa:	46c0      	nop			; (mov r8, r8)

00008cac <__aeabi_cdcmpeq>:
    8cac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    8cae:	f001 fb69 	bl	a384 <__ledf2>
    8cb2:	2800      	cmp	r0, #0
    8cb4:	d401      	bmi.n	8cba <__aeabi_cdcmpeq+0xe>
    8cb6:	2100      	movs	r1, #0
    8cb8:	42c8      	cmn	r0, r1
    8cba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00008cbc <__aeabi_dcmpeq>:
    8cbc:	b510      	push	{r4, lr}
    8cbe:	f001 fac3 	bl	a248 <__eqdf2>
    8cc2:	4240      	negs	r0, r0
    8cc4:	3001      	adds	r0, #1
    8cc6:	bd10      	pop	{r4, pc}

00008cc8 <__aeabi_dcmplt>:
    8cc8:	b510      	push	{r4, lr}
    8cca:	f001 fb5b 	bl	a384 <__ledf2>
    8cce:	2800      	cmp	r0, #0
    8cd0:	db01      	blt.n	8cd6 <__aeabi_dcmplt+0xe>
    8cd2:	2000      	movs	r0, #0
    8cd4:	bd10      	pop	{r4, pc}
    8cd6:	2001      	movs	r0, #1
    8cd8:	bd10      	pop	{r4, pc}
    8cda:	46c0      	nop			; (mov r8, r8)

00008cdc <__aeabi_dcmple>:
    8cdc:	b510      	push	{r4, lr}
    8cde:	f001 fb51 	bl	a384 <__ledf2>
    8ce2:	2800      	cmp	r0, #0
    8ce4:	dd01      	ble.n	8cea <__aeabi_dcmple+0xe>
    8ce6:	2000      	movs	r0, #0
    8ce8:	bd10      	pop	{r4, pc}
    8cea:	2001      	movs	r0, #1
    8cec:	bd10      	pop	{r4, pc}
    8cee:	46c0      	nop			; (mov r8, r8)

00008cf0 <__aeabi_dcmpgt>:
    8cf0:	b510      	push	{r4, lr}
    8cf2:	f001 fae3 	bl	a2bc <__gedf2>
    8cf6:	2800      	cmp	r0, #0
    8cf8:	dc01      	bgt.n	8cfe <__aeabi_dcmpgt+0xe>
    8cfa:	2000      	movs	r0, #0
    8cfc:	bd10      	pop	{r4, pc}
    8cfe:	2001      	movs	r0, #1
    8d00:	bd10      	pop	{r4, pc}
    8d02:	46c0      	nop			; (mov r8, r8)

00008d04 <__aeabi_dcmpge>:
    8d04:	b510      	push	{r4, lr}
    8d06:	f001 fad9 	bl	a2bc <__gedf2>
    8d0a:	2800      	cmp	r0, #0
    8d0c:	da01      	bge.n	8d12 <__aeabi_dcmpge+0xe>
    8d0e:	2000      	movs	r0, #0
    8d10:	bd10      	pop	{r4, pc}
    8d12:	2001      	movs	r0, #1
    8d14:	bd10      	pop	{r4, pc}
    8d16:	46c0      	nop			; (mov r8, r8)

00008d18 <__aeabi_cfrcmple>:
    8d18:	4684      	mov	ip, r0
    8d1a:	1c08      	adds	r0, r1, #0
    8d1c:	4661      	mov	r1, ip
    8d1e:	e7ff      	b.n	8d20 <__aeabi_cfcmpeq>

00008d20 <__aeabi_cfcmpeq>:
    8d20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    8d22:	f000 fba9 	bl	9478 <__lesf2>
    8d26:	2800      	cmp	r0, #0
    8d28:	d401      	bmi.n	8d2e <__aeabi_cfcmpeq+0xe>
    8d2a:	2100      	movs	r1, #0
    8d2c:	42c8      	cmn	r0, r1
    8d2e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00008d30 <__aeabi_fcmpeq>:
    8d30:	b510      	push	{r4, lr}
    8d32:	f000 fb3b 	bl	93ac <__eqsf2>
    8d36:	4240      	negs	r0, r0
    8d38:	3001      	adds	r0, #1
    8d3a:	bd10      	pop	{r4, pc}

00008d3c <__aeabi_fcmplt>:
    8d3c:	b510      	push	{r4, lr}
    8d3e:	f000 fb9b 	bl	9478 <__lesf2>
    8d42:	2800      	cmp	r0, #0
    8d44:	db01      	blt.n	8d4a <__aeabi_fcmplt+0xe>
    8d46:	2000      	movs	r0, #0
    8d48:	bd10      	pop	{r4, pc}
    8d4a:	2001      	movs	r0, #1
    8d4c:	bd10      	pop	{r4, pc}
    8d4e:	46c0      	nop			; (mov r8, r8)

00008d50 <__aeabi_fcmple>:
    8d50:	b510      	push	{r4, lr}
    8d52:	f000 fb91 	bl	9478 <__lesf2>
    8d56:	2800      	cmp	r0, #0
    8d58:	dd01      	ble.n	8d5e <__aeabi_fcmple+0xe>
    8d5a:	2000      	movs	r0, #0
    8d5c:	bd10      	pop	{r4, pc}
    8d5e:	2001      	movs	r0, #1
    8d60:	bd10      	pop	{r4, pc}
    8d62:	46c0      	nop			; (mov r8, r8)

00008d64 <__aeabi_fcmpgt>:
    8d64:	b510      	push	{r4, lr}
    8d66:	f000 fb47 	bl	93f8 <__gesf2>
    8d6a:	2800      	cmp	r0, #0
    8d6c:	dc01      	bgt.n	8d72 <__aeabi_fcmpgt+0xe>
    8d6e:	2000      	movs	r0, #0
    8d70:	bd10      	pop	{r4, pc}
    8d72:	2001      	movs	r0, #1
    8d74:	bd10      	pop	{r4, pc}
    8d76:	46c0      	nop			; (mov r8, r8)

00008d78 <__aeabi_fcmpge>:
    8d78:	b510      	push	{r4, lr}
    8d7a:	f000 fb3d 	bl	93f8 <__gesf2>
    8d7e:	2800      	cmp	r0, #0
    8d80:	da01      	bge.n	8d86 <__aeabi_fcmpge+0xe>
    8d82:	2000      	movs	r0, #0
    8d84:	bd10      	pop	{r4, pc}
    8d86:	2001      	movs	r0, #1
    8d88:	bd10      	pop	{r4, pc}
    8d8a:	46c0      	nop			; (mov r8, r8)

00008d8c <__aeabi_f2uiz>:
    8d8c:	219e      	movs	r1, #158	; 0x9e
    8d8e:	b510      	push	{r4, lr}
    8d90:	05c9      	lsls	r1, r1, #23
    8d92:	1c04      	adds	r4, r0, #0
    8d94:	f7ff fff0 	bl	8d78 <__aeabi_fcmpge>
    8d98:	2800      	cmp	r0, #0
    8d9a:	d103      	bne.n	8da4 <__aeabi_f2uiz+0x18>
    8d9c:	1c20      	adds	r0, r4, #0
    8d9e:	f000 fe69 	bl	9a74 <__aeabi_f2iz>
    8da2:	bd10      	pop	{r4, pc}
    8da4:	219e      	movs	r1, #158	; 0x9e
    8da6:	1c20      	adds	r0, r4, #0
    8da8:	05c9      	lsls	r1, r1, #23
    8daa:	f000 fcc7 	bl	973c <__aeabi_fsub>
    8dae:	f000 fe61 	bl	9a74 <__aeabi_f2iz>
    8db2:	2380      	movs	r3, #128	; 0x80
    8db4:	061b      	lsls	r3, r3, #24
    8db6:	469c      	mov	ip, r3
    8db8:	4460      	add	r0, ip
    8dba:	e7f2      	b.n	8da2 <__aeabi_f2uiz+0x16>

00008dbc <__aeabi_d2uiz>:
    8dbc:	b570      	push	{r4, r5, r6, lr}
    8dbe:	2200      	movs	r2, #0
    8dc0:	4b0c      	ldr	r3, [pc, #48]	; (8df4 <__aeabi_d2uiz+0x38>)
    8dc2:	0004      	movs	r4, r0
    8dc4:	000d      	movs	r5, r1
    8dc6:	f7ff ff9d 	bl	8d04 <__aeabi_dcmpge>
    8dca:	2800      	cmp	r0, #0
    8dcc:	d104      	bne.n	8dd8 <__aeabi_d2uiz+0x1c>
    8dce:	0020      	movs	r0, r4
    8dd0:	0029      	movs	r1, r5
    8dd2:	f002 f8cf 	bl	af74 <__aeabi_d2iz>
    8dd6:	bd70      	pop	{r4, r5, r6, pc}
    8dd8:	4b06      	ldr	r3, [pc, #24]	; (8df4 <__aeabi_d2uiz+0x38>)
    8dda:	2200      	movs	r2, #0
    8ddc:	0020      	movs	r0, r4
    8dde:	0029      	movs	r1, r5
    8de0:	f001 fdb2 	bl	a948 <__aeabi_dsub>
    8de4:	f002 f8c6 	bl	af74 <__aeabi_d2iz>
    8de8:	2380      	movs	r3, #128	; 0x80
    8dea:	061b      	lsls	r3, r3, #24
    8dec:	469c      	mov	ip, r3
    8dee:	4460      	add	r0, ip
    8df0:	e7f1      	b.n	8dd6 <__aeabi_d2uiz+0x1a>
    8df2:	46c0      	nop			; (mov r8, r8)
    8df4:	41e00000 	.word	0x41e00000

00008df8 <__aeabi_fadd>:
    8df8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8dfa:	46c6      	mov	lr, r8
    8dfc:	024e      	lsls	r6, r1, #9
    8dfe:	0247      	lsls	r7, r0, #9
    8e00:	0a76      	lsrs	r6, r6, #9
    8e02:	0a7b      	lsrs	r3, r7, #9
    8e04:	0044      	lsls	r4, r0, #1
    8e06:	0fc5      	lsrs	r5, r0, #31
    8e08:	00f7      	lsls	r7, r6, #3
    8e0a:	0048      	lsls	r0, r1, #1
    8e0c:	4698      	mov	r8, r3
    8e0e:	b500      	push	{lr}
    8e10:	0e24      	lsrs	r4, r4, #24
    8e12:	002a      	movs	r2, r5
    8e14:	00db      	lsls	r3, r3, #3
    8e16:	0e00      	lsrs	r0, r0, #24
    8e18:	0fc9      	lsrs	r1, r1, #31
    8e1a:	46bc      	mov	ip, r7
    8e1c:	428d      	cmp	r5, r1
    8e1e:	d067      	beq.n	8ef0 <__aeabi_fadd+0xf8>
    8e20:	1a22      	subs	r2, r4, r0
    8e22:	2a00      	cmp	r2, #0
    8e24:	dc00      	bgt.n	8e28 <__aeabi_fadd+0x30>
    8e26:	e0a5      	b.n	8f74 <__aeabi_fadd+0x17c>
    8e28:	2800      	cmp	r0, #0
    8e2a:	d13a      	bne.n	8ea2 <__aeabi_fadd+0xaa>
    8e2c:	2f00      	cmp	r7, #0
    8e2e:	d100      	bne.n	8e32 <__aeabi_fadd+0x3a>
    8e30:	e093      	b.n	8f5a <__aeabi_fadd+0x162>
    8e32:	1e51      	subs	r1, r2, #1
    8e34:	2900      	cmp	r1, #0
    8e36:	d000      	beq.n	8e3a <__aeabi_fadd+0x42>
    8e38:	e0bc      	b.n	8fb4 <__aeabi_fadd+0x1bc>
    8e3a:	2401      	movs	r4, #1
    8e3c:	1bdb      	subs	r3, r3, r7
    8e3e:	015a      	lsls	r2, r3, #5
    8e40:	d546      	bpl.n	8ed0 <__aeabi_fadd+0xd8>
    8e42:	019b      	lsls	r3, r3, #6
    8e44:	099e      	lsrs	r6, r3, #6
    8e46:	0030      	movs	r0, r6
    8e48:	f002 fa1e 	bl	b288 <__clzsi2>
    8e4c:	3805      	subs	r0, #5
    8e4e:	4086      	lsls	r6, r0
    8e50:	4284      	cmp	r4, r0
    8e52:	dd00      	ble.n	8e56 <__aeabi_fadd+0x5e>
    8e54:	e09d      	b.n	8f92 <__aeabi_fadd+0x19a>
    8e56:	1b04      	subs	r4, r0, r4
    8e58:	0032      	movs	r2, r6
    8e5a:	2020      	movs	r0, #32
    8e5c:	3401      	adds	r4, #1
    8e5e:	40e2      	lsrs	r2, r4
    8e60:	1b04      	subs	r4, r0, r4
    8e62:	40a6      	lsls	r6, r4
    8e64:	0033      	movs	r3, r6
    8e66:	1e5e      	subs	r6, r3, #1
    8e68:	41b3      	sbcs	r3, r6
    8e6a:	2400      	movs	r4, #0
    8e6c:	4313      	orrs	r3, r2
    8e6e:	075a      	lsls	r2, r3, #29
    8e70:	d004      	beq.n	8e7c <__aeabi_fadd+0x84>
    8e72:	220f      	movs	r2, #15
    8e74:	401a      	ands	r2, r3
    8e76:	2a04      	cmp	r2, #4
    8e78:	d000      	beq.n	8e7c <__aeabi_fadd+0x84>
    8e7a:	3304      	adds	r3, #4
    8e7c:	015a      	lsls	r2, r3, #5
    8e7e:	d529      	bpl.n	8ed4 <__aeabi_fadd+0xdc>
    8e80:	3401      	adds	r4, #1
    8e82:	2cff      	cmp	r4, #255	; 0xff
    8e84:	d100      	bne.n	8e88 <__aeabi_fadd+0x90>
    8e86:	e081      	b.n	8f8c <__aeabi_fadd+0x194>
    8e88:	002a      	movs	r2, r5
    8e8a:	019b      	lsls	r3, r3, #6
    8e8c:	0a5b      	lsrs	r3, r3, #9
    8e8e:	b2e4      	uxtb	r4, r4
    8e90:	025b      	lsls	r3, r3, #9
    8e92:	05e4      	lsls	r4, r4, #23
    8e94:	0a58      	lsrs	r0, r3, #9
    8e96:	07d2      	lsls	r2, r2, #31
    8e98:	4320      	orrs	r0, r4
    8e9a:	4310      	orrs	r0, r2
    8e9c:	bc04      	pop	{r2}
    8e9e:	4690      	mov	r8, r2
    8ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8ea2:	2cff      	cmp	r4, #255	; 0xff
    8ea4:	d0e3      	beq.n	8e6e <__aeabi_fadd+0x76>
    8ea6:	2180      	movs	r1, #128	; 0x80
    8ea8:	0038      	movs	r0, r7
    8eaa:	04c9      	lsls	r1, r1, #19
    8eac:	4308      	orrs	r0, r1
    8eae:	4684      	mov	ip, r0
    8eb0:	2a1b      	cmp	r2, #27
    8eb2:	dd00      	ble.n	8eb6 <__aeabi_fadd+0xbe>
    8eb4:	e082      	b.n	8fbc <__aeabi_fadd+0x1c4>
    8eb6:	2020      	movs	r0, #32
    8eb8:	4661      	mov	r1, ip
    8eba:	40d1      	lsrs	r1, r2
    8ebc:	1a82      	subs	r2, r0, r2
    8ebe:	4660      	mov	r0, ip
    8ec0:	4090      	lsls	r0, r2
    8ec2:	0002      	movs	r2, r0
    8ec4:	1e50      	subs	r0, r2, #1
    8ec6:	4182      	sbcs	r2, r0
    8ec8:	430a      	orrs	r2, r1
    8eca:	1a9b      	subs	r3, r3, r2
    8ecc:	015a      	lsls	r2, r3, #5
    8ece:	d4b8      	bmi.n	8e42 <__aeabi_fadd+0x4a>
    8ed0:	075a      	lsls	r2, r3, #29
    8ed2:	d1ce      	bne.n	8e72 <__aeabi_fadd+0x7a>
    8ed4:	08de      	lsrs	r6, r3, #3
    8ed6:	002a      	movs	r2, r5
    8ed8:	2cff      	cmp	r4, #255	; 0xff
    8eda:	d13a      	bne.n	8f52 <__aeabi_fadd+0x15a>
    8edc:	2e00      	cmp	r6, #0
    8ede:	d100      	bne.n	8ee2 <__aeabi_fadd+0xea>
    8ee0:	e0ae      	b.n	9040 <__aeabi_fadd+0x248>
    8ee2:	2380      	movs	r3, #128	; 0x80
    8ee4:	03db      	lsls	r3, r3, #15
    8ee6:	4333      	orrs	r3, r6
    8ee8:	025b      	lsls	r3, r3, #9
    8eea:	0a5b      	lsrs	r3, r3, #9
    8eec:	24ff      	movs	r4, #255	; 0xff
    8eee:	e7cf      	b.n	8e90 <__aeabi_fadd+0x98>
    8ef0:	1a21      	subs	r1, r4, r0
    8ef2:	2900      	cmp	r1, #0
    8ef4:	dd52      	ble.n	8f9c <__aeabi_fadd+0x1a4>
    8ef6:	2800      	cmp	r0, #0
    8ef8:	d031      	beq.n	8f5e <__aeabi_fadd+0x166>
    8efa:	2cff      	cmp	r4, #255	; 0xff
    8efc:	d0b7      	beq.n	8e6e <__aeabi_fadd+0x76>
    8efe:	2080      	movs	r0, #128	; 0x80
    8f00:	003e      	movs	r6, r7
    8f02:	04c0      	lsls	r0, r0, #19
    8f04:	4306      	orrs	r6, r0
    8f06:	46b4      	mov	ip, r6
    8f08:	291b      	cmp	r1, #27
    8f0a:	dd00      	ble.n	8f0e <__aeabi_fadd+0x116>
    8f0c:	e0aa      	b.n	9064 <__aeabi_fadd+0x26c>
    8f0e:	2620      	movs	r6, #32
    8f10:	4660      	mov	r0, ip
    8f12:	40c8      	lsrs	r0, r1
    8f14:	1a71      	subs	r1, r6, r1
    8f16:	4666      	mov	r6, ip
    8f18:	408e      	lsls	r6, r1
    8f1a:	0031      	movs	r1, r6
    8f1c:	1e4e      	subs	r6, r1, #1
    8f1e:	41b1      	sbcs	r1, r6
    8f20:	4301      	orrs	r1, r0
    8f22:	185b      	adds	r3, r3, r1
    8f24:	0159      	lsls	r1, r3, #5
    8f26:	d5d3      	bpl.n	8ed0 <__aeabi_fadd+0xd8>
    8f28:	3401      	adds	r4, #1
    8f2a:	2cff      	cmp	r4, #255	; 0xff
    8f2c:	d100      	bne.n	8f30 <__aeabi_fadd+0x138>
    8f2e:	e087      	b.n	9040 <__aeabi_fadd+0x248>
    8f30:	2201      	movs	r2, #1
    8f32:	4978      	ldr	r1, [pc, #480]	; (9114 <__aeabi_fadd+0x31c>)
    8f34:	401a      	ands	r2, r3
    8f36:	085b      	lsrs	r3, r3, #1
    8f38:	400b      	ands	r3, r1
    8f3a:	4313      	orrs	r3, r2
    8f3c:	e797      	b.n	8e6e <__aeabi_fadd+0x76>
    8f3e:	2c00      	cmp	r4, #0
    8f40:	d000      	beq.n	8f44 <__aeabi_fadd+0x14c>
    8f42:	e0a7      	b.n	9094 <__aeabi_fadd+0x29c>
    8f44:	2b00      	cmp	r3, #0
    8f46:	d000      	beq.n	8f4a <__aeabi_fadd+0x152>
    8f48:	e0b6      	b.n	90b8 <__aeabi_fadd+0x2c0>
    8f4a:	1e3b      	subs	r3, r7, #0
    8f4c:	d162      	bne.n	9014 <__aeabi_fadd+0x21c>
    8f4e:	2600      	movs	r6, #0
    8f50:	2200      	movs	r2, #0
    8f52:	0273      	lsls	r3, r6, #9
    8f54:	0a5b      	lsrs	r3, r3, #9
    8f56:	b2e4      	uxtb	r4, r4
    8f58:	e79a      	b.n	8e90 <__aeabi_fadd+0x98>
    8f5a:	0014      	movs	r4, r2
    8f5c:	e787      	b.n	8e6e <__aeabi_fadd+0x76>
    8f5e:	2f00      	cmp	r7, #0
    8f60:	d04d      	beq.n	8ffe <__aeabi_fadd+0x206>
    8f62:	1e48      	subs	r0, r1, #1
    8f64:	2800      	cmp	r0, #0
    8f66:	d157      	bne.n	9018 <__aeabi_fadd+0x220>
    8f68:	4463      	add	r3, ip
    8f6a:	2401      	movs	r4, #1
    8f6c:	015a      	lsls	r2, r3, #5
    8f6e:	d5af      	bpl.n	8ed0 <__aeabi_fadd+0xd8>
    8f70:	2402      	movs	r4, #2
    8f72:	e7dd      	b.n	8f30 <__aeabi_fadd+0x138>
    8f74:	2a00      	cmp	r2, #0
    8f76:	d124      	bne.n	8fc2 <__aeabi_fadd+0x1ca>
    8f78:	1c62      	adds	r2, r4, #1
    8f7a:	b2d2      	uxtb	r2, r2
    8f7c:	2a01      	cmp	r2, #1
    8f7e:	ddde      	ble.n	8f3e <__aeabi_fadd+0x146>
    8f80:	1bde      	subs	r6, r3, r7
    8f82:	0172      	lsls	r2, r6, #5
    8f84:	d535      	bpl.n	8ff2 <__aeabi_fadd+0x1fa>
    8f86:	1afe      	subs	r6, r7, r3
    8f88:	000d      	movs	r5, r1
    8f8a:	e75c      	b.n	8e46 <__aeabi_fadd+0x4e>
    8f8c:	002a      	movs	r2, r5
    8f8e:	2300      	movs	r3, #0
    8f90:	e77e      	b.n	8e90 <__aeabi_fadd+0x98>
    8f92:	0033      	movs	r3, r6
    8f94:	4a60      	ldr	r2, [pc, #384]	; (9118 <__aeabi_fadd+0x320>)
    8f96:	1a24      	subs	r4, r4, r0
    8f98:	4013      	ands	r3, r2
    8f9a:	e768      	b.n	8e6e <__aeabi_fadd+0x76>
    8f9c:	2900      	cmp	r1, #0
    8f9e:	d163      	bne.n	9068 <__aeabi_fadd+0x270>
    8fa0:	1c61      	adds	r1, r4, #1
    8fa2:	b2c8      	uxtb	r0, r1
    8fa4:	2801      	cmp	r0, #1
    8fa6:	dd4e      	ble.n	9046 <__aeabi_fadd+0x24e>
    8fa8:	29ff      	cmp	r1, #255	; 0xff
    8faa:	d049      	beq.n	9040 <__aeabi_fadd+0x248>
    8fac:	4463      	add	r3, ip
    8fae:	085b      	lsrs	r3, r3, #1
    8fb0:	000c      	movs	r4, r1
    8fb2:	e75c      	b.n	8e6e <__aeabi_fadd+0x76>
    8fb4:	2aff      	cmp	r2, #255	; 0xff
    8fb6:	d041      	beq.n	903c <__aeabi_fadd+0x244>
    8fb8:	000a      	movs	r2, r1
    8fba:	e779      	b.n	8eb0 <__aeabi_fadd+0xb8>
    8fbc:	2201      	movs	r2, #1
    8fbe:	1a9b      	subs	r3, r3, r2
    8fc0:	e784      	b.n	8ecc <__aeabi_fadd+0xd4>
    8fc2:	2c00      	cmp	r4, #0
    8fc4:	d01d      	beq.n	9002 <__aeabi_fadd+0x20a>
    8fc6:	28ff      	cmp	r0, #255	; 0xff
    8fc8:	d022      	beq.n	9010 <__aeabi_fadd+0x218>
    8fca:	2480      	movs	r4, #128	; 0x80
    8fcc:	04e4      	lsls	r4, r4, #19
    8fce:	4252      	negs	r2, r2
    8fd0:	4323      	orrs	r3, r4
    8fd2:	2a1b      	cmp	r2, #27
    8fd4:	dd00      	ble.n	8fd8 <__aeabi_fadd+0x1e0>
    8fd6:	e08a      	b.n	90ee <__aeabi_fadd+0x2f6>
    8fd8:	001c      	movs	r4, r3
    8fda:	2520      	movs	r5, #32
    8fdc:	40d4      	lsrs	r4, r2
    8fde:	1aaa      	subs	r2, r5, r2
    8fe0:	4093      	lsls	r3, r2
    8fe2:	1e5a      	subs	r2, r3, #1
    8fe4:	4193      	sbcs	r3, r2
    8fe6:	4323      	orrs	r3, r4
    8fe8:	4662      	mov	r2, ip
    8fea:	0004      	movs	r4, r0
    8fec:	1ad3      	subs	r3, r2, r3
    8fee:	000d      	movs	r5, r1
    8ff0:	e725      	b.n	8e3e <__aeabi_fadd+0x46>
    8ff2:	2e00      	cmp	r6, #0
    8ff4:	d000      	beq.n	8ff8 <__aeabi_fadd+0x200>
    8ff6:	e726      	b.n	8e46 <__aeabi_fadd+0x4e>
    8ff8:	2200      	movs	r2, #0
    8ffa:	2400      	movs	r4, #0
    8ffc:	e7a9      	b.n	8f52 <__aeabi_fadd+0x15a>
    8ffe:	000c      	movs	r4, r1
    9000:	e735      	b.n	8e6e <__aeabi_fadd+0x76>
    9002:	2b00      	cmp	r3, #0
    9004:	d04d      	beq.n	90a2 <__aeabi_fadd+0x2aa>
    9006:	43d2      	mvns	r2, r2
    9008:	2a00      	cmp	r2, #0
    900a:	d0ed      	beq.n	8fe8 <__aeabi_fadd+0x1f0>
    900c:	28ff      	cmp	r0, #255	; 0xff
    900e:	d1e0      	bne.n	8fd2 <__aeabi_fadd+0x1da>
    9010:	4663      	mov	r3, ip
    9012:	24ff      	movs	r4, #255	; 0xff
    9014:	000d      	movs	r5, r1
    9016:	e72a      	b.n	8e6e <__aeabi_fadd+0x76>
    9018:	29ff      	cmp	r1, #255	; 0xff
    901a:	d00f      	beq.n	903c <__aeabi_fadd+0x244>
    901c:	0001      	movs	r1, r0
    901e:	e773      	b.n	8f08 <__aeabi_fadd+0x110>
    9020:	2b00      	cmp	r3, #0
    9022:	d061      	beq.n	90e8 <__aeabi_fadd+0x2f0>
    9024:	24ff      	movs	r4, #255	; 0xff
    9026:	2f00      	cmp	r7, #0
    9028:	d100      	bne.n	902c <__aeabi_fadd+0x234>
    902a:	e720      	b.n	8e6e <__aeabi_fadd+0x76>
    902c:	2280      	movs	r2, #128	; 0x80
    902e:	4641      	mov	r1, r8
    9030:	03d2      	lsls	r2, r2, #15
    9032:	4211      	tst	r1, r2
    9034:	d002      	beq.n	903c <__aeabi_fadd+0x244>
    9036:	4216      	tst	r6, r2
    9038:	d100      	bne.n	903c <__aeabi_fadd+0x244>
    903a:	003b      	movs	r3, r7
    903c:	24ff      	movs	r4, #255	; 0xff
    903e:	e716      	b.n	8e6e <__aeabi_fadd+0x76>
    9040:	24ff      	movs	r4, #255	; 0xff
    9042:	2300      	movs	r3, #0
    9044:	e724      	b.n	8e90 <__aeabi_fadd+0x98>
    9046:	2c00      	cmp	r4, #0
    9048:	d1ea      	bne.n	9020 <__aeabi_fadd+0x228>
    904a:	2b00      	cmp	r3, #0
    904c:	d058      	beq.n	9100 <__aeabi_fadd+0x308>
    904e:	2f00      	cmp	r7, #0
    9050:	d100      	bne.n	9054 <__aeabi_fadd+0x25c>
    9052:	e70c      	b.n	8e6e <__aeabi_fadd+0x76>
    9054:	4463      	add	r3, ip
    9056:	015a      	lsls	r2, r3, #5
    9058:	d400      	bmi.n	905c <__aeabi_fadd+0x264>
    905a:	e739      	b.n	8ed0 <__aeabi_fadd+0xd8>
    905c:	4a2e      	ldr	r2, [pc, #184]	; (9118 <__aeabi_fadd+0x320>)
    905e:	000c      	movs	r4, r1
    9060:	4013      	ands	r3, r2
    9062:	e704      	b.n	8e6e <__aeabi_fadd+0x76>
    9064:	2101      	movs	r1, #1
    9066:	e75c      	b.n	8f22 <__aeabi_fadd+0x12a>
    9068:	2c00      	cmp	r4, #0
    906a:	d11e      	bne.n	90aa <__aeabi_fadd+0x2b2>
    906c:	2b00      	cmp	r3, #0
    906e:	d040      	beq.n	90f2 <__aeabi_fadd+0x2fa>
    9070:	43c9      	mvns	r1, r1
    9072:	2900      	cmp	r1, #0
    9074:	d00b      	beq.n	908e <__aeabi_fadd+0x296>
    9076:	28ff      	cmp	r0, #255	; 0xff
    9078:	d036      	beq.n	90e8 <__aeabi_fadd+0x2f0>
    907a:	291b      	cmp	r1, #27
    907c:	dc47      	bgt.n	910e <__aeabi_fadd+0x316>
    907e:	001c      	movs	r4, r3
    9080:	2620      	movs	r6, #32
    9082:	40cc      	lsrs	r4, r1
    9084:	1a71      	subs	r1, r6, r1
    9086:	408b      	lsls	r3, r1
    9088:	1e59      	subs	r1, r3, #1
    908a:	418b      	sbcs	r3, r1
    908c:	4323      	orrs	r3, r4
    908e:	4463      	add	r3, ip
    9090:	0004      	movs	r4, r0
    9092:	e747      	b.n	8f24 <__aeabi_fadd+0x12c>
    9094:	2b00      	cmp	r3, #0
    9096:	d118      	bne.n	90ca <__aeabi_fadd+0x2d2>
    9098:	1e3b      	subs	r3, r7, #0
    909a:	d02d      	beq.n	90f8 <__aeabi_fadd+0x300>
    909c:	000d      	movs	r5, r1
    909e:	24ff      	movs	r4, #255	; 0xff
    90a0:	e6e5      	b.n	8e6e <__aeabi_fadd+0x76>
    90a2:	003b      	movs	r3, r7
    90a4:	0004      	movs	r4, r0
    90a6:	000d      	movs	r5, r1
    90a8:	e6e1      	b.n	8e6e <__aeabi_fadd+0x76>
    90aa:	28ff      	cmp	r0, #255	; 0xff
    90ac:	d01c      	beq.n	90e8 <__aeabi_fadd+0x2f0>
    90ae:	2480      	movs	r4, #128	; 0x80
    90b0:	04e4      	lsls	r4, r4, #19
    90b2:	4249      	negs	r1, r1
    90b4:	4323      	orrs	r3, r4
    90b6:	e7e0      	b.n	907a <__aeabi_fadd+0x282>
    90b8:	2f00      	cmp	r7, #0
    90ba:	d100      	bne.n	90be <__aeabi_fadd+0x2c6>
    90bc:	e6d7      	b.n	8e6e <__aeabi_fadd+0x76>
    90be:	1bde      	subs	r6, r3, r7
    90c0:	0172      	lsls	r2, r6, #5
    90c2:	d51f      	bpl.n	9104 <__aeabi_fadd+0x30c>
    90c4:	1afb      	subs	r3, r7, r3
    90c6:	000d      	movs	r5, r1
    90c8:	e6d1      	b.n	8e6e <__aeabi_fadd+0x76>
    90ca:	24ff      	movs	r4, #255	; 0xff
    90cc:	2f00      	cmp	r7, #0
    90ce:	d100      	bne.n	90d2 <__aeabi_fadd+0x2da>
    90d0:	e6cd      	b.n	8e6e <__aeabi_fadd+0x76>
    90d2:	2280      	movs	r2, #128	; 0x80
    90d4:	4640      	mov	r0, r8
    90d6:	03d2      	lsls	r2, r2, #15
    90d8:	4210      	tst	r0, r2
    90da:	d0af      	beq.n	903c <__aeabi_fadd+0x244>
    90dc:	4216      	tst	r6, r2
    90de:	d1ad      	bne.n	903c <__aeabi_fadd+0x244>
    90e0:	003b      	movs	r3, r7
    90e2:	000d      	movs	r5, r1
    90e4:	24ff      	movs	r4, #255	; 0xff
    90e6:	e6c2      	b.n	8e6e <__aeabi_fadd+0x76>
    90e8:	4663      	mov	r3, ip
    90ea:	24ff      	movs	r4, #255	; 0xff
    90ec:	e6bf      	b.n	8e6e <__aeabi_fadd+0x76>
    90ee:	2301      	movs	r3, #1
    90f0:	e77a      	b.n	8fe8 <__aeabi_fadd+0x1f0>
    90f2:	003b      	movs	r3, r7
    90f4:	0004      	movs	r4, r0
    90f6:	e6ba      	b.n	8e6e <__aeabi_fadd+0x76>
    90f8:	2680      	movs	r6, #128	; 0x80
    90fa:	2200      	movs	r2, #0
    90fc:	03f6      	lsls	r6, r6, #15
    90fe:	e6f0      	b.n	8ee2 <__aeabi_fadd+0xea>
    9100:	003b      	movs	r3, r7
    9102:	e6b4      	b.n	8e6e <__aeabi_fadd+0x76>
    9104:	1e33      	subs	r3, r6, #0
    9106:	d000      	beq.n	910a <__aeabi_fadd+0x312>
    9108:	e6e2      	b.n	8ed0 <__aeabi_fadd+0xd8>
    910a:	2200      	movs	r2, #0
    910c:	e721      	b.n	8f52 <__aeabi_fadd+0x15a>
    910e:	2301      	movs	r3, #1
    9110:	e7bd      	b.n	908e <__aeabi_fadd+0x296>
    9112:	46c0      	nop			; (mov r8, r8)
    9114:	7dffffff 	.word	0x7dffffff
    9118:	fbffffff 	.word	0xfbffffff

0000911c <__aeabi_fdiv>:
    911c:	b5f0      	push	{r4, r5, r6, r7, lr}
    911e:	4657      	mov	r7, sl
    9120:	464e      	mov	r6, r9
    9122:	46de      	mov	lr, fp
    9124:	4645      	mov	r5, r8
    9126:	b5e0      	push	{r5, r6, r7, lr}
    9128:	0244      	lsls	r4, r0, #9
    912a:	0043      	lsls	r3, r0, #1
    912c:	0fc6      	lsrs	r6, r0, #31
    912e:	b083      	sub	sp, #12
    9130:	1c0f      	adds	r7, r1, #0
    9132:	0a64      	lsrs	r4, r4, #9
    9134:	0e1b      	lsrs	r3, r3, #24
    9136:	46b2      	mov	sl, r6
    9138:	d053      	beq.n	91e2 <__aeabi_fdiv+0xc6>
    913a:	2bff      	cmp	r3, #255	; 0xff
    913c:	d027      	beq.n	918e <__aeabi_fdiv+0x72>
    913e:	2280      	movs	r2, #128	; 0x80
    9140:	00e4      	lsls	r4, r4, #3
    9142:	04d2      	lsls	r2, r2, #19
    9144:	4314      	orrs	r4, r2
    9146:	227f      	movs	r2, #127	; 0x7f
    9148:	4252      	negs	r2, r2
    914a:	4690      	mov	r8, r2
    914c:	4498      	add	r8, r3
    914e:	2300      	movs	r3, #0
    9150:	4699      	mov	r9, r3
    9152:	469b      	mov	fp, r3
    9154:	027d      	lsls	r5, r7, #9
    9156:	0078      	lsls	r0, r7, #1
    9158:	0ffb      	lsrs	r3, r7, #31
    915a:	0a6d      	lsrs	r5, r5, #9
    915c:	0e00      	lsrs	r0, r0, #24
    915e:	9300      	str	r3, [sp, #0]
    9160:	d024      	beq.n	91ac <__aeabi_fdiv+0x90>
    9162:	28ff      	cmp	r0, #255	; 0xff
    9164:	d046      	beq.n	91f4 <__aeabi_fdiv+0xd8>
    9166:	2380      	movs	r3, #128	; 0x80
    9168:	2100      	movs	r1, #0
    916a:	00ed      	lsls	r5, r5, #3
    916c:	04db      	lsls	r3, r3, #19
    916e:	431d      	orrs	r5, r3
    9170:	387f      	subs	r0, #127	; 0x7f
    9172:	4647      	mov	r7, r8
    9174:	1a38      	subs	r0, r7, r0
    9176:	464f      	mov	r7, r9
    9178:	430f      	orrs	r7, r1
    917a:	00bf      	lsls	r7, r7, #2
    917c:	46b9      	mov	r9, r7
    917e:	0033      	movs	r3, r6
    9180:	9a00      	ldr	r2, [sp, #0]
    9182:	4f87      	ldr	r7, [pc, #540]	; (93a0 <__aeabi_fdiv+0x284>)
    9184:	4053      	eors	r3, r2
    9186:	464a      	mov	r2, r9
    9188:	58ba      	ldr	r2, [r7, r2]
    918a:	9301      	str	r3, [sp, #4]
    918c:	4697      	mov	pc, r2
    918e:	2c00      	cmp	r4, #0
    9190:	d14e      	bne.n	9230 <__aeabi_fdiv+0x114>
    9192:	2308      	movs	r3, #8
    9194:	4699      	mov	r9, r3
    9196:	33f7      	adds	r3, #247	; 0xf7
    9198:	4698      	mov	r8, r3
    919a:	3bfd      	subs	r3, #253	; 0xfd
    919c:	469b      	mov	fp, r3
    919e:	027d      	lsls	r5, r7, #9
    91a0:	0078      	lsls	r0, r7, #1
    91a2:	0ffb      	lsrs	r3, r7, #31
    91a4:	0a6d      	lsrs	r5, r5, #9
    91a6:	0e00      	lsrs	r0, r0, #24
    91a8:	9300      	str	r3, [sp, #0]
    91aa:	d1da      	bne.n	9162 <__aeabi_fdiv+0x46>
    91ac:	2d00      	cmp	r5, #0
    91ae:	d126      	bne.n	91fe <__aeabi_fdiv+0xe2>
    91b0:	2000      	movs	r0, #0
    91b2:	2101      	movs	r1, #1
    91b4:	0033      	movs	r3, r6
    91b6:	9a00      	ldr	r2, [sp, #0]
    91b8:	4f7a      	ldr	r7, [pc, #488]	; (93a4 <__aeabi_fdiv+0x288>)
    91ba:	4053      	eors	r3, r2
    91bc:	4642      	mov	r2, r8
    91be:	1a10      	subs	r0, r2, r0
    91c0:	464a      	mov	r2, r9
    91c2:	430a      	orrs	r2, r1
    91c4:	0092      	lsls	r2, r2, #2
    91c6:	58ba      	ldr	r2, [r7, r2]
    91c8:	001d      	movs	r5, r3
    91ca:	4697      	mov	pc, r2
    91cc:	9b00      	ldr	r3, [sp, #0]
    91ce:	002c      	movs	r4, r5
    91d0:	469a      	mov	sl, r3
    91d2:	468b      	mov	fp, r1
    91d4:	465b      	mov	r3, fp
    91d6:	2b02      	cmp	r3, #2
    91d8:	d131      	bne.n	923e <__aeabi_fdiv+0x122>
    91da:	4653      	mov	r3, sl
    91dc:	21ff      	movs	r1, #255	; 0xff
    91de:	2400      	movs	r4, #0
    91e0:	e038      	b.n	9254 <__aeabi_fdiv+0x138>
    91e2:	2c00      	cmp	r4, #0
    91e4:	d117      	bne.n	9216 <__aeabi_fdiv+0xfa>
    91e6:	2304      	movs	r3, #4
    91e8:	4699      	mov	r9, r3
    91ea:	2300      	movs	r3, #0
    91ec:	4698      	mov	r8, r3
    91ee:	3301      	adds	r3, #1
    91f0:	469b      	mov	fp, r3
    91f2:	e7af      	b.n	9154 <__aeabi_fdiv+0x38>
    91f4:	20ff      	movs	r0, #255	; 0xff
    91f6:	2d00      	cmp	r5, #0
    91f8:	d10b      	bne.n	9212 <__aeabi_fdiv+0xf6>
    91fa:	2102      	movs	r1, #2
    91fc:	e7da      	b.n	91b4 <__aeabi_fdiv+0x98>
    91fe:	0028      	movs	r0, r5
    9200:	f002 f842 	bl	b288 <__clzsi2>
    9204:	1f43      	subs	r3, r0, #5
    9206:	409d      	lsls	r5, r3
    9208:	2376      	movs	r3, #118	; 0x76
    920a:	425b      	negs	r3, r3
    920c:	1a18      	subs	r0, r3, r0
    920e:	2100      	movs	r1, #0
    9210:	e7af      	b.n	9172 <__aeabi_fdiv+0x56>
    9212:	2103      	movs	r1, #3
    9214:	e7ad      	b.n	9172 <__aeabi_fdiv+0x56>
    9216:	0020      	movs	r0, r4
    9218:	f002 f836 	bl	b288 <__clzsi2>
    921c:	1f43      	subs	r3, r0, #5
    921e:	409c      	lsls	r4, r3
    9220:	2376      	movs	r3, #118	; 0x76
    9222:	425b      	negs	r3, r3
    9224:	1a1b      	subs	r3, r3, r0
    9226:	4698      	mov	r8, r3
    9228:	2300      	movs	r3, #0
    922a:	4699      	mov	r9, r3
    922c:	469b      	mov	fp, r3
    922e:	e791      	b.n	9154 <__aeabi_fdiv+0x38>
    9230:	230c      	movs	r3, #12
    9232:	4699      	mov	r9, r3
    9234:	33f3      	adds	r3, #243	; 0xf3
    9236:	4698      	mov	r8, r3
    9238:	3bfc      	subs	r3, #252	; 0xfc
    923a:	469b      	mov	fp, r3
    923c:	e78a      	b.n	9154 <__aeabi_fdiv+0x38>
    923e:	2b03      	cmp	r3, #3
    9240:	d100      	bne.n	9244 <__aeabi_fdiv+0x128>
    9242:	e0a5      	b.n	9390 <__aeabi_fdiv+0x274>
    9244:	4655      	mov	r5, sl
    9246:	2b01      	cmp	r3, #1
    9248:	d000      	beq.n	924c <__aeabi_fdiv+0x130>
    924a:	e081      	b.n	9350 <__aeabi_fdiv+0x234>
    924c:	2301      	movs	r3, #1
    924e:	2100      	movs	r1, #0
    9250:	2400      	movs	r4, #0
    9252:	402b      	ands	r3, r5
    9254:	0264      	lsls	r4, r4, #9
    9256:	05c9      	lsls	r1, r1, #23
    9258:	0a60      	lsrs	r0, r4, #9
    925a:	07db      	lsls	r3, r3, #31
    925c:	4308      	orrs	r0, r1
    925e:	4318      	orrs	r0, r3
    9260:	b003      	add	sp, #12
    9262:	bc3c      	pop	{r2, r3, r4, r5}
    9264:	4690      	mov	r8, r2
    9266:	4699      	mov	r9, r3
    9268:	46a2      	mov	sl, r4
    926a:	46ab      	mov	fp, r5
    926c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    926e:	2480      	movs	r4, #128	; 0x80
    9270:	2300      	movs	r3, #0
    9272:	03e4      	lsls	r4, r4, #15
    9274:	21ff      	movs	r1, #255	; 0xff
    9276:	e7ed      	b.n	9254 <__aeabi_fdiv+0x138>
    9278:	21ff      	movs	r1, #255	; 0xff
    927a:	2400      	movs	r4, #0
    927c:	e7ea      	b.n	9254 <__aeabi_fdiv+0x138>
    927e:	2301      	movs	r3, #1
    9280:	1a59      	subs	r1, r3, r1
    9282:	291b      	cmp	r1, #27
    9284:	dd66      	ble.n	9354 <__aeabi_fdiv+0x238>
    9286:	9a01      	ldr	r2, [sp, #4]
    9288:	4013      	ands	r3, r2
    928a:	2100      	movs	r1, #0
    928c:	2400      	movs	r4, #0
    928e:	e7e1      	b.n	9254 <__aeabi_fdiv+0x138>
    9290:	2380      	movs	r3, #128	; 0x80
    9292:	03db      	lsls	r3, r3, #15
    9294:	421c      	tst	r4, r3
    9296:	d038      	beq.n	930a <__aeabi_fdiv+0x1ee>
    9298:	421d      	tst	r5, r3
    929a:	d051      	beq.n	9340 <__aeabi_fdiv+0x224>
    929c:	431c      	orrs	r4, r3
    929e:	0264      	lsls	r4, r4, #9
    92a0:	0a64      	lsrs	r4, r4, #9
    92a2:	0033      	movs	r3, r6
    92a4:	21ff      	movs	r1, #255	; 0xff
    92a6:	e7d5      	b.n	9254 <__aeabi_fdiv+0x138>
    92a8:	0163      	lsls	r3, r4, #5
    92aa:	016c      	lsls	r4, r5, #5
    92ac:	42a3      	cmp	r3, r4
    92ae:	d23b      	bcs.n	9328 <__aeabi_fdiv+0x20c>
    92b0:	261b      	movs	r6, #27
    92b2:	2100      	movs	r1, #0
    92b4:	3801      	subs	r0, #1
    92b6:	2501      	movs	r5, #1
    92b8:	001f      	movs	r7, r3
    92ba:	0049      	lsls	r1, r1, #1
    92bc:	005b      	lsls	r3, r3, #1
    92be:	2f00      	cmp	r7, #0
    92c0:	db01      	blt.n	92c6 <__aeabi_fdiv+0x1aa>
    92c2:	429c      	cmp	r4, r3
    92c4:	d801      	bhi.n	92ca <__aeabi_fdiv+0x1ae>
    92c6:	1b1b      	subs	r3, r3, r4
    92c8:	4329      	orrs	r1, r5
    92ca:	3e01      	subs	r6, #1
    92cc:	2e00      	cmp	r6, #0
    92ce:	d1f3      	bne.n	92b8 <__aeabi_fdiv+0x19c>
    92d0:	001c      	movs	r4, r3
    92d2:	1e63      	subs	r3, r4, #1
    92d4:	419c      	sbcs	r4, r3
    92d6:	430c      	orrs	r4, r1
    92d8:	0001      	movs	r1, r0
    92da:	317f      	adds	r1, #127	; 0x7f
    92dc:	2900      	cmp	r1, #0
    92de:	ddce      	ble.n	927e <__aeabi_fdiv+0x162>
    92e0:	0763      	lsls	r3, r4, #29
    92e2:	d004      	beq.n	92ee <__aeabi_fdiv+0x1d2>
    92e4:	230f      	movs	r3, #15
    92e6:	4023      	ands	r3, r4
    92e8:	2b04      	cmp	r3, #4
    92ea:	d000      	beq.n	92ee <__aeabi_fdiv+0x1d2>
    92ec:	3404      	adds	r4, #4
    92ee:	0123      	lsls	r3, r4, #4
    92f0:	d503      	bpl.n	92fa <__aeabi_fdiv+0x1de>
    92f2:	0001      	movs	r1, r0
    92f4:	4b2c      	ldr	r3, [pc, #176]	; (93a8 <__aeabi_fdiv+0x28c>)
    92f6:	3180      	adds	r1, #128	; 0x80
    92f8:	401c      	ands	r4, r3
    92fa:	29fe      	cmp	r1, #254	; 0xfe
    92fc:	dd0d      	ble.n	931a <__aeabi_fdiv+0x1fe>
    92fe:	2301      	movs	r3, #1
    9300:	9a01      	ldr	r2, [sp, #4]
    9302:	21ff      	movs	r1, #255	; 0xff
    9304:	4013      	ands	r3, r2
    9306:	2400      	movs	r4, #0
    9308:	e7a4      	b.n	9254 <__aeabi_fdiv+0x138>
    930a:	2380      	movs	r3, #128	; 0x80
    930c:	03db      	lsls	r3, r3, #15
    930e:	431c      	orrs	r4, r3
    9310:	0264      	lsls	r4, r4, #9
    9312:	0a64      	lsrs	r4, r4, #9
    9314:	0033      	movs	r3, r6
    9316:	21ff      	movs	r1, #255	; 0xff
    9318:	e79c      	b.n	9254 <__aeabi_fdiv+0x138>
    931a:	2301      	movs	r3, #1
    931c:	9a01      	ldr	r2, [sp, #4]
    931e:	01a4      	lsls	r4, r4, #6
    9320:	0a64      	lsrs	r4, r4, #9
    9322:	b2c9      	uxtb	r1, r1
    9324:	4013      	ands	r3, r2
    9326:	e795      	b.n	9254 <__aeabi_fdiv+0x138>
    9328:	1b1b      	subs	r3, r3, r4
    932a:	261a      	movs	r6, #26
    932c:	2101      	movs	r1, #1
    932e:	e7c2      	b.n	92b6 <__aeabi_fdiv+0x19a>
    9330:	9b00      	ldr	r3, [sp, #0]
    9332:	468b      	mov	fp, r1
    9334:	469a      	mov	sl, r3
    9336:	2400      	movs	r4, #0
    9338:	e74c      	b.n	91d4 <__aeabi_fdiv+0xb8>
    933a:	0263      	lsls	r3, r4, #9
    933c:	d5e5      	bpl.n	930a <__aeabi_fdiv+0x1ee>
    933e:	2500      	movs	r5, #0
    9340:	2480      	movs	r4, #128	; 0x80
    9342:	03e4      	lsls	r4, r4, #15
    9344:	432c      	orrs	r4, r5
    9346:	0264      	lsls	r4, r4, #9
    9348:	0a64      	lsrs	r4, r4, #9
    934a:	9b00      	ldr	r3, [sp, #0]
    934c:	21ff      	movs	r1, #255	; 0xff
    934e:	e781      	b.n	9254 <__aeabi_fdiv+0x138>
    9350:	9501      	str	r5, [sp, #4]
    9352:	e7c1      	b.n	92d8 <__aeabi_fdiv+0x1bc>
    9354:	0023      	movs	r3, r4
    9356:	2020      	movs	r0, #32
    9358:	40cb      	lsrs	r3, r1
    935a:	1a41      	subs	r1, r0, r1
    935c:	408c      	lsls	r4, r1
    935e:	1e61      	subs	r1, r4, #1
    9360:	418c      	sbcs	r4, r1
    9362:	431c      	orrs	r4, r3
    9364:	0763      	lsls	r3, r4, #29
    9366:	d004      	beq.n	9372 <__aeabi_fdiv+0x256>
    9368:	230f      	movs	r3, #15
    936a:	4023      	ands	r3, r4
    936c:	2b04      	cmp	r3, #4
    936e:	d000      	beq.n	9372 <__aeabi_fdiv+0x256>
    9370:	3404      	adds	r4, #4
    9372:	0163      	lsls	r3, r4, #5
    9374:	d505      	bpl.n	9382 <__aeabi_fdiv+0x266>
    9376:	2301      	movs	r3, #1
    9378:	9a01      	ldr	r2, [sp, #4]
    937a:	2101      	movs	r1, #1
    937c:	4013      	ands	r3, r2
    937e:	2400      	movs	r4, #0
    9380:	e768      	b.n	9254 <__aeabi_fdiv+0x138>
    9382:	2301      	movs	r3, #1
    9384:	9a01      	ldr	r2, [sp, #4]
    9386:	01a4      	lsls	r4, r4, #6
    9388:	0a64      	lsrs	r4, r4, #9
    938a:	4013      	ands	r3, r2
    938c:	2100      	movs	r1, #0
    938e:	e761      	b.n	9254 <__aeabi_fdiv+0x138>
    9390:	2380      	movs	r3, #128	; 0x80
    9392:	03db      	lsls	r3, r3, #15
    9394:	431c      	orrs	r4, r3
    9396:	0264      	lsls	r4, r4, #9
    9398:	0a64      	lsrs	r4, r4, #9
    939a:	4653      	mov	r3, sl
    939c:	21ff      	movs	r1, #255	; 0xff
    939e:	e759      	b.n	9254 <__aeabi_fdiv+0x138>
    93a0:	0000c1c8 	.word	0x0000c1c8
    93a4:	0000c208 	.word	0x0000c208
    93a8:	f7ffffff 	.word	0xf7ffffff

000093ac <__eqsf2>:
    93ac:	b570      	push	{r4, r5, r6, lr}
    93ae:	0042      	lsls	r2, r0, #1
    93b0:	0245      	lsls	r5, r0, #9
    93b2:	024e      	lsls	r6, r1, #9
    93b4:	004c      	lsls	r4, r1, #1
    93b6:	0fc3      	lsrs	r3, r0, #31
    93b8:	0a6d      	lsrs	r5, r5, #9
    93ba:	0e12      	lsrs	r2, r2, #24
    93bc:	0a76      	lsrs	r6, r6, #9
    93be:	0e24      	lsrs	r4, r4, #24
    93c0:	0fc9      	lsrs	r1, r1, #31
    93c2:	2001      	movs	r0, #1
    93c4:	2aff      	cmp	r2, #255	; 0xff
    93c6:	d006      	beq.n	93d6 <__eqsf2+0x2a>
    93c8:	2cff      	cmp	r4, #255	; 0xff
    93ca:	d003      	beq.n	93d4 <__eqsf2+0x28>
    93cc:	42a2      	cmp	r2, r4
    93ce:	d101      	bne.n	93d4 <__eqsf2+0x28>
    93d0:	42b5      	cmp	r5, r6
    93d2:	d006      	beq.n	93e2 <__eqsf2+0x36>
    93d4:	bd70      	pop	{r4, r5, r6, pc}
    93d6:	2d00      	cmp	r5, #0
    93d8:	d1fc      	bne.n	93d4 <__eqsf2+0x28>
    93da:	2cff      	cmp	r4, #255	; 0xff
    93dc:	d1fa      	bne.n	93d4 <__eqsf2+0x28>
    93de:	2e00      	cmp	r6, #0
    93e0:	d1f8      	bne.n	93d4 <__eqsf2+0x28>
    93e2:	428b      	cmp	r3, r1
    93e4:	d006      	beq.n	93f4 <__eqsf2+0x48>
    93e6:	2001      	movs	r0, #1
    93e8:	2a00      	cmp	r2, #0
    93ea:	d1f3      	bne.n	93d4 <__eqsf2+0x28>
    93ec:	0028      	movs	r0, r5
    93ee:	1e45      	subs	r5, r0, #1
    93f0:	41a8      	sbcs	r0, r5
    93f2:	e7ef      	b.n	93d4 <__eqsf2+0x28>
    93f4:	2000      	movs	r0, #0
    93f6:	e7ed      	b.n	93d4 <__eqsf2+0x28>

000093f8 <__gesf2>:
    93f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    93fa:	0042      	lsls	r2, r0, #1
    93fc:	0245      	lsls	r5, r0, #9
    93fe:	024c      	lsls	r4, r1, #9
    9400:	0fc3      	lsrs	r3, r0, #31
    9402:	0048      	lsls	r0, r1, #1
    9404:	0a6d      	lsrs	r5, r5, #9
    9406:	0e12      	lsrs	r2, r2, #24
    9408:	0a64      	lsrs	r4, r4, #9
    940a:	0e00      	lsrs	r0, r0, #24
    940c:	0fc9      	lsrs	r1, r1, #31
    940e:	2aff      	cmp	r2, #255	; 0xff
    9410:	d01e      	beq.n	9450 <__gesf2+0x58>
    9412:	28ff      	cmp	r0, #255	; 0xff
    9414:	d021      	beq.n	945a <__gesf2+0x62>
    9416:	2a00      	cmp	r2, #0
    9418:	d10a      	bne.n	9430 <__gesf2+0x38>
    941a:	426e      	negs	r6, r5
    941c:	416e      	adcs	r6, r5
    941e:	b2f6      	uxtb	r6, r6
    9420:	2800      	cmp	r0, #0
    9422:	d10f      	bne.n	9444 <__gesf2+0x4c>
    9424:	2c00      	cmp	r4, #0
    9426:	d10d      	bne.n	9444 <__gesf2+0x4c>
    9428:	2000      	movs	r0, #0
    942a:	2d00      	cmp	r5, #0
    942c:	d009      	beq.n	9442 <__gesf2+0x4a>
    942e:	e005      	b.n	943c <__gesf2+0x44>
    9430:	2800      	cmp	r0, #0
    9432:	d101      	bne.n	9438 <__gesf2+0x40>
    9434:	2c00      	cmp	r4, #0
    9436:	d001      	beq.n	943c <__gesf2+0x44>
    9438:	428b      	cmp	r3, r1
    943a:	d011      	beq.n	9460 <__gesf2+0x68>
    943c:	2101      	movs	r1, #1
    943e:	4258      	negs	r0, r3
    9440:	4308      	orrs	r0, r1
    9442:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9444:	2e00      	cmp	r6, #0
    9446:	d0f7      	beq.n	9438 <__gesf2+0x40>
    9448:	2001      	movs	r0, #1
    944a:	3901      	subs	r1, #1
    944c:	4308      	orrs	r0, r1
    944e:	e7f8      	b.n	9442 <__gesf2+0x4a>
    9450:	2d00      	cmp	r5, #0
    9452:	d0de      	beq.n	9412 <__gesf2+0x1a>
    9454:	2002      	movs	r0, #2
    9456:	4240      	negs	r0, r0
    9458:	e7f3      	b.n	9442 <__gesf2+0x4a>
    945a:	2c00      	cmp	r4, #0
    945c:	d0db      	beq.n	9416 <__gesf2+0x1e>
    945e:	e7f9      	b.n	9454 <__gesf2+0x5c>
    9460:	4282      	cmp	r2, r0
    9462:	dceb      	bgt.n	943c <__gesf2+0x44>
    9464:	db04      	blt.n	9470 <__gesf2+0x78>
    9466:	42a5      	cmp	r5, r4
    9468:	d8e8      	bhi.n	943c <__gesf2+0x44>
    946a:	2000      	movs	r0, #0
    946c:	42a5      	cmp	r5, r4
    946e:	d2e8      	bcs.n	9442 <__gesf2+0x4a>
    9470:	2101      	movs	r1, #1
    9472:	1e58      	subs	r0, r3, #1
    9474:	4308      	orrs	r0, r1
    9476:	e7e4      	b.n	9442 <__gesf2+0x4a>

00009478 <__lesf2>:
    9478:	b5f0      	push	{r4, r5, r6, r7, lr}
    947a:	0042      	lsls	r2, r0, #1
    947c:	024d      	lsls	r5, r1, #9
    947e:	004c      	lsls	r4, r1, #1
    9480:	0246      	lsls	r6, r0, #9
    9482:	0a76      	lsrs	r6, r6, #9
    9484:	0e12      	lsrs	r2, r2, #24
    9486:	0fc3      	lsrs	r3, r0, #31
    9488:	0a6d      	lsrs	r5, r5, #9
    948a:	0e24      	lsrs	r4, r4, #24
    948c:	0fc9      	lsrs	r1, r1, #31
    948e:	2aff      	cmp	r2, #255	; 0xff
    9490:	d016      	beq.n	94c0 <__lesf2+0x48>
    9492:	2cff      	cmp	r4, #255	; 0xff
    9494:	d018      	beq.n	94c8 <__lesf2+0x50>
    9496:	2a00      	cmp	r2, #0
    9498:	d10a      	bne.n	94b0 <__lesf2+0x38>
    949a:	4270      	negs	r0, r6
    949c:	4170      	adcs	r0, r6
    949e:	b2c0      	uxtb	r0, r0
    94a0:	2c00      	cmp	r4, #0
    94a2:	d015      	beq.n	94d0 <__lesf2+0x58>
    94a4:	2800      	cmp	r0, #0
    94a6:	d005      	beq.n	94b4 <__lesf2+0x3c>
    94a8:	2001      	movs	r0, #1
    94aa:	3901      	subs	r1, #1
    94ac:	4308      	orrs	r0, r1
    94ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    94b0:	2c00      	cmp	r4, #0
    94b2:	d013      	beq.n	94dc <__lesf2+0x64>
    94b4:	4299      	cmp	r1, r3
    94b6:	d014      	beq.n	94e2 <__lesf2+0x6a>
    94b8:	2001      	movs	r0, #1
    94ba:	425b      	negs	r3, r3
    94bc:	4318      	orrs	r0, r3
    94be:	e7f6      	b.n	94ae <__lesf2+0x36>
    94c0:	2002      	movs	r0, #2
    94c2:	2e00      	cmp	r6, #0
    94c4:	d1f3      	bne.n	94ae <__lesf2+0x36>
    94c6:	e7e4      	b.n	9492 <__lesf2+0x1a>
    94c8:	2002      	movs	r0, #2
    94ca:	2d00      	cmp	r5, #0
    94cc:	d1ef      	bne.n	94ae <__lesf2+0x36>
    94ce:	e7e2      	b.n	9496 <__lesf2+0x1e>
    94d0:	2d00      	cmp	r5, #0
    94d2:	d1e7      	bne.n	94a4 <__lesf2+0x2c>
    94d4:	2000      	movs	r0, #0
    94d6:	2e00      	cmp	r6, #0
    94d8:	d0e9      	beq.n	94ae <__lesf2+0x36>
    94da:	e7ed      	b.n	94b8 <__lesf2+0x40>
    94dc:	2d00      	cmp	r5, #0
    94de:	d1e9      	bne.n	94b4 <__lesf2+0x3c>
    94e0:	e7ea      	b.n	94b8 <__lesf2+0x40>
    94e2:	42a2      	cmp	r2, r4
    94e4:	dc06      	bgt.n	94f4 <__lesf2+0x7c>
    94e6:	dbdf      	blt.n	94a8 <__lesf2+0x30>
    94e8:	42ae      	cmp	r6, r5
    94ea:	d803      	bhi.n	94f4 <__lesf2+0x7c>
    94ec:	2000      	movs	r0, #0
    94ee:	42ae      	cmp	r6, r5
    94f0:	d3da      	bcc.n	94a8 <__lesf2+0x30>
    94f2:	e7dc      	b.n	94ae <__lesf2+0x36>
    94f4:	2001      	movs	r0, #1
    94f6:	4249      	negs	r1, r1
    94f8:	4308      	orrs	r0, r1
    94fa:	e7d8      	b.n	94ae <__lesf2+0x36>

000094fc <__aeabi_fmul>:
    94fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    94fe:	4657      	mov	r7, sl
    9500:	464e      	mov	r6, r9
    9502:	4645      	mov	r5, r8
    9504:	46de      	mov	lr, fp
    9506:	b5e0      	push	{r5, r6, r7, lr}
    9508:	0247      	lsls	r7, r0, #9
    950a:	0046      	lsls	r6, r0, #1
    950c:	4688      	mov	r8, r1
    950e:	0a7f      	lsrs	r7, r7, #9
    9510:	0e36      	lsrs	r6, r6, #24
    9512:	0fc4      	lsrs	r4, r0, #31
    9514:	2e00      	cmp	r6, #0
    9516:	d047      	beq.n	95a8 <__aeabi_fmul+0xac>
    9518:	2eff      	cmp	r6, #255	; 0xff
    951a:	d024      	beq.n	9566 <__aeabi_fmul+0x6a>
    951c:	00fb      	lsls	r3, r7, #3
    951e:	2780      	movs	r7, #128	; 0x80
    9520:	04ff      	lsls	r7, r7, #19
    9522:	431f      	orrs	r7, r3
    9524:	2300      	movs	r3, #0
    9526:	4699      	mov	r9, r3
    9528:	469a      	mov	sl, r3
    952a:	3e7f      	subs	r6, #127	; 0x7f
    952c:	4643      	mov	r3, r8
    952e:	025d      	lsls	r5, r3, #9
    9530:	0058      	lsls	r0, r3, #1
    9532:	0fdb      	lsrs	r3, r3, #31
    9534:	0a6d      	lsrs	r5, r5, #9
    9536:	0e00      	lsrs	r0, r0, #24
    9538:	4698      	mov	r8, r3
    953a:	d043      	beq.n	95c4 <__aeabi_fmul+0xc8>
    953c:	28ff      	cmp	r0, #255	; 0xff
    953e:	d03b      	beq.n	95b8 <__aeabi_fmul+0xbc>
    9540:	00eb      	lsls	r3, r5, #3
    9542:	2580      	movs	r5, #128	; 0x80
    9544:	2200      	movs	r2, #0
    9546:	04ed      	lsls	r5, r5, #19
    9548:	431d      	orrs	r5, r3
    954a:	387f      	subs	r0, #127	; 0x7f
    954c:	1836      	adds	r6, r6, r0
    954e:	1c73      	adds	r3, r6, #1
    9550:	4641      	mov	r1, r8
    9552:	469b      	mov	fp, r3
    9554:	464b      	mov	r3, r9
    9556:	4061      	eors	r1, r4
    9558:	4313      	orrs	r3, r2
    955a:	2b0f      	cmp	r3, #15
    955c:	d864      	bhi.n	9628 <__aeabi_fmul+0x12c>
    955e:	4875      	ldr	r0, [pc, #468]	; (9734 <__aeabi_fmul+0x238>)
    9560:	009b      	lsls	r3, r3, #2
    9562:	58c3      	ldr	r3, [r0, r3]
    9564:	469f      	mov	pc, r3
    9566:	2f00      	cmp	r7, #0
    9568:	d142      	bne.n	95f0 <__aeabi_fmul+0xf4>
    956a:	2308      	movs	r3, #8
    956c:	4699      	mov	r9, r3
    956e:	3b06      	subs	r3, #6
    9570:	26ff      	movs	r6, #255	; 0xff
    9572:	469a      	mov	sl, r3
    9574:	e7da      	b.n	952c <__aeabi_fmul+0x30>
    9576:	4641      	mov	r1, r8
    9578:	2a02      	cmp	r2, #2
    957a:	d028      	beq.n	95ce <__aeabi_fmul+0xd2>
    957c:	2a03      	cmp	r2, #3
    957e:	d100      	bne.n	9582 <__aeabi_fmul+0x86>
    9580:	e0ce      	b.n	9720 <__aeabi_fmul+0x224>
    9582:	2a01      	cmp	r2, #1
    9584:	d000      	beq.n	9588 <__aeabi_fmul+0x8c>
    9586:	e0ac      	b.n	96e2 <__aeabi_fmul+0x1e6>
    9588:	4011      	ands	r1, r2
    958a:	2000      	movs	r0, #0
    958c:	2200      	movs	r2, #0
    958e:	b2cc      	uxtb	r4, r1
    9590:	0240      	lsls	r0, r0, #9
    9592:	05d2      	lsls	r2, r2, #23
    9594:	0a40      	lsrs	r0, r0, #9
    9596:	07e4      	lsls	r4, r4, #31
    9598:	4310      	orrs	r0, r2
    959a:	4320      	orrs	r0, r4
    959c:	bc3c      	pop	{r2, r3, r4, r5}
    959e:	4690      	mov	r8, r2
    95a0:	4699      	mov	r9, r3
    95a2:	46a2      	mov	sl, r4
    95a4:	46ab      	mov	fp, r5
    95a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    95a8:	2f00      	cmp	r7, #0
    95aa:	d115      	bne.n	95d8 <__aeabi_fmul+0xdc>
    95ac:	2304      	movs	r3, #4
    95ae:	4699      	mov	r9, r3
    95b0:	3b03      	subs	r3, #3
    95b2:	2600      	movs	r6, #0
    95b4:	469a      	mov	sl, r3
    95b6:	e7b9      	b.n	952c <__aeabi_fmul+0x30>
    95b8:	20ff      	movs	r0, #255	; 0xff
    95ba:	2202      	movs	r2, #2
    95bc:	2d00      	cmp	r5, #0
    95be:	d0c5      	beq.n	954c <__aeabi_fmul+0x50>
    95c0:	2203      	movs	r2, #3
    95c2:	e7c3      	b.n	954c <__aeabi_fmul+0x50>
    95c4:	2d00      	cmp	r5, #0
    95c6:	d119      	bne.n	95fc <__aeabi_fmul+0x100>
    95c8:	2000      	movs	r0, #0
    95ca:	2201      	movs	r2, #1
    95cc:	e7be      	b.n	954c <__aeabi_fmul+0x50>
    95ce:	2401      	movs	r4, #1
    95d0:	22ff      	movs	r2, #255	; 0xff
    95d2:	400c      	ands	r4, r1
    95d4:	2000      	movs	r0, #0
    95d6:	e7db      	b.n	9590 <__aeabi_fmul+0x94>
    95d8:	0038      	movs	r0, r7
    95da:	f001 fe55 	bl	b288 <__clzsi2>
    95de:	2676      	movs	r6, #118	; 0x76
    95e0:	1f43      	subs	r3, r0, #5
    95e2:	409f      	lsls	r7, r3
    95e4:	2300      	movs	r3, #0
    95e6:	4276      	negs	r6, r6
    95e8:	1a36      	subs	r6, r6, r0
    95ea:	4699      	mov	r9, r3
    95ec:	469a      	mov	sl, r3
    95ee:	e79d      	b.n	952c <__aeabi_fmul+0x30>
    95f0:	230c      	movs	r3, #12
    95f2:	4699      	mov	r9, r3
    95f4:	3b09      	subs	r3, #9
    95f6:	26ff      	movs	r6, #255	; 0xff
    95f8:	469a      	mov	sl, r3
    95fa:	e797      	b.n	952c <__aeabi_fmul+0x30>
    95fc:	0028      	movs	r0, r5
    95fe:	f001 fe43 	bl	b288 <__clzsi2>
    9602:	1f43      	subs	r3, r0, #5
    9604:	409d      	lsls	r5, r3
    9606:	2376      	movs	r3, #118	; 0x76
    9608:	425b      	negs	r3, r3
    960a:	1a18      	subs	r0, r3, r0
    960c:	2200      	movs	r2, #0
    960e:	e79d      	b.n	954c <__aeabi_fmul+0x50>
    9610:	2080      	movs	r0, #128	; 0x80
    9612:	2400      	movs	r4, #0
    9614:	03c0      	lsls	r0, r0, #15
    9616:	22ff      	movs	r2, #255	; 0xff
    9618:	e7ba      	b.n	9590 <__aeabi_fmul+0x94>
    961a:	003d      	movs	r5, r7
    961c:	4652      	mov	r2, sl
    961e:	e7ab      	b.n	9578 <__aeabi_fmul+0x7c>
    9620:	003d      	movs	r5, r7
    9622:	0021      	movs	r1, r4
    9624:	4652      	mov	r2, sl
    9626:	e7a7      	b.n	9578 <__aeabi_fmul+0x7c>
    9628:	0c3b      	lsrs	r3, r7, #16
    962a:	469c      	mov	ip, r3
    962c:	042a      	lsls	r2, r5, #16
    962e:	0c12      	lsrs	r2, r2, #16
    9630:	0c2b      	lsrs	r3, r5, #16
    9632:	0014      	movs	r4, r2
    9634:	4660      	mov	r0, ip
    9636:	4665      	mov	r5, ip
    9638:	043f      	lsls	r7, r7, #16
    963a:	0c3f      	lsrs	r7, r7, #16
    963c:	437c      	muls	r4, r7
    963e:	4342      	muls	r2, r0
    9640:	435d      	muls	r5, r3
    9642:	437b      	muls	r3, r7
    9644:	0c27      	lsrs	r7, r4, #16
    9646:	189b      	adds	r3, r3, r2
    9648:	18ff      	adds	r7, r7, r3
    964a:	42ba      	cmp	r2, r7
    964c:	d903      	bls.n	9656 <__aeabi_fmul+0x15a>
    964e:	2380      	movs	r3, #128	; 0x80
    9650:	025b      	lsls	r3, r3, #9
    9652:	469c      	mov	ip, r3
    9654:	4465      	add	r5, ip
    9656:	0424      	lsls	r4, r4, #16
    9658:	043a      	lsls	r2, r7, #16
    965a:	0c24      	lsrs	r4, r4, #16
    965c:	1912      	adds	r2, r2, r4
    965e:	0193      	lsls	r3, r2, #6
    9660:	1e5c      	subs	r4, r3, #1
    9662:	41a3      	sbcs	r3, r4
    9664:	0c3f      	lsrs	r7, r7, #16
    9666:	0e92      	lsrs	r2, r2, #26
    9668:	197d      	adds	r5, r7, r5
    966a:	431a      	orrs	r2, r3
    966c:	01ad      	lsls	r5, r5, #6
    966e:	4315      	orrs	r5, r2
    9670:	012b      	lsls	r3, r5, #4
    9672:	d504      	bpl.n	967e <__aeabi_fmul+0x182>
    9674:	2301      	movs	r3, #1
    9676:	465e      	mov	r6, fp
    9678:	086a      	lsrs	r2, r5, #1
    967a:	401d      	ands	r5, r3
    967c:	4315      	orrs	r5, r2
    967e:	0032      	movs	r2, r6
    9680:	327f      	adds	r2, #127	; 0x7f
    9682:	2a00      	cmp	r2, #0
    9684:	dd25      	ble.n	96d2 <__aeabi_fmul+0x1d6>
    9686:	076b      	lsls	r3, r5, #29
    9688:	d004      	beq.n	9694 <__aeabi_fmul+0x198>
    968a:	230f      	movs	r3, #15
    968c:	402b      	ands	r3, r5
    968e:	2b04      	cmp	r3, #4
    9690:	d000      	beq.n	9694 <__aeabi_fmul+0x198>
    9692:	3504      	adds	r5, #4
    9694:	012b      	lsls	r3, r5, #4
    9696:	d503      	bpl.n	96a0 <__aeabi_fmul+0x1a4>
    9698:	0032      	movs	r2, r6
    969a:	4b27      	ldr	r3, [pc, #156]	; (9738 <__aeabi_fmul+0x23c>)
    969c:	3280      	adds	r2, #128	; 0x80
    969e:	401d      	ands	r5, r3
    96a0:	2afe      	cmp	r2, #254	; 0xfe
    96a2:	dc94      	bgt.n	95ce <__aeabi_fmul+0xd2>
    96a4:	2401      	movs	r4, #1
    96a6:	01a8      	lsls	r0, r5, #6
    96a8:	0a40      	lsrs	r0, r0, #9
    96aa:	b2d2      	uxtb	r2, r2
    96ac:	400c      	ands	r4, r1
    96ae:	e76f      	b.n	9590 <__aeabi_fmul+0x94>
    96b0:	2080      	movs	r0, #128	; 0x80
    96b2:	03c0      	lsls	r0, r0, #15
    96b4:	4207      	tst	r7, r0
    96b6:	d007      	beq.n	96c8 <__aeabi_fmul+0x1cc>
    96b8:	4205      	tst	r5, r0
    96ba:	d105      	bne.n	96c8 <__aeabi_fmul+0x1cc>
    96bc:	4328      	orrs	r0, r5
    96be:	0240      	lsls	r0, r0, #9
    96c0:	0a40      	lsrs	r0, r0, #9
    96c2:	4644      	mov	r4, r8
    96c4:	22ff      	movs	r2, #255	; 0xff
    96c6:	e763      	b.n	9590 <__aeabi_fmul+0x94>
    96c8:	4338      	orrs	r0, r7
    96ca:	0240      	lsls	r0, r0, #9
    96cc:	0a40      	lsrs	r0, r0, #9
    96ce:	22ff      	movs	r2, #255	; 0xff
    96d0:	e75e      	b.n	9590 <__aeabi_fmul+0x94>
    96d2:	2401      	movs	r4, #1
    96d4:	1aa3      	subs	r3, r4, r2
    96d6:	2b1b      	cmp	r3, #27
    96d8:	dd05      	ble.n	96e6 <__aeabi_fmul+0x1ea>
    96da:	400c      	ands	r4, r1
    96dc:	2200      	movs	r2, #0
    96de:	2000      	movs	r0, #0
    96e0:	e756      	b.n	9590 <__aeabi_fmul+0x94>
    96e2:	465e      	mov	r6, fp
    96e4:	e7cb      	b.n	967e <__aeabi_fmul+0x182>
    96e6:	002a      	movs	r2, r5
    96e8:	2020      	movs	r0, #32
    96ea:	40da      	lsrs	r2, r3
    96ec:	1ac3      	subs	r3, r0, r3
    96ee:	409d      	lsls	r5, r3
    96f0:	002b      	movs	r3, r5
    96f2:	1e5d      	subs	r5, r3, #1
    96f4:	41ab      	sbcs	r3, r5
    96f6:	4313      	orrs	r3, r2
    96f8:	075a      	lsls	r2, r3, #29
    96fa:	d004      	beq.n	9706 <__aeabi_fmul+0x20a>
    96fc:	220f      	movs	r2, #15
    96fe:	401a      	ands	r2, r3
    9700:	2a04      	cmp	r2, #4
    9702:	d000      	beq.n	9706 <__aeabi_fmul+0x20a>
    9704:	3304      	adds	r3, #4
    9706:	015a      	lsls	r2, r3, #5
    9708:	d504      	bpl.n	9714 <__aeabi_fmul+0x218>
    970a:	2401      	movs	r4, #1
    970c:	2201      	movs	r2, #1
    970e:	400c      	ands	r4, r1
    9710:	2000      	movs	r0, #0
    9712:	e73d      	b.n	9590 <__aeabi_fmul+0x94>
    9714:	2401      	movs	r4, #1
    9716:	019b      	lsls	r3, r3, #6
    9718:	0a58      	lsrs	r0, r3, #9
    971a:	400c      	ands	r4, r1
    971c:	2200      	movs	r2, #0
    971e:	e737      	b.n	9590 <__aeabi_fmul+0x94>
    9720:	2080      	movs	r0, #128	; 0x80
    9722:	2401      	movs	r4, #1
    9724:	03c0      	lsls	r0, r0, #15
    9726:	4328      	orrs	r0, r5
    9728:	0240      	lsls	r0, r0, #9
    972a:	0a40      	lsrs	r0, r0, #9
    972c:	400c      	ands	r4, r1
    972e:	22ff      	movs	r2, #255	; 0xff
    9730:	e72e      	b.n	9590 <__aeabi_fmul+0x94>
    9732:	46c0      	nop			; (mov r8, r8)
    9734:	0000c248 	.word	0x0000c248
    9738:	f7ffffff 	.word	0xf7ffffff

0000973c <__aeabi_fsub>:
    973c:	b5f0      	push	{r4, r5, r6, r7, lr}
    973e:	464f      	mov	r7, r9
    9740:	46d6      	mov	lr, sl
    9742:	4646      	mov	r6, r8
    9744:	0044      	lsls	r4, r0, #1
    9746:	b5c0      	push	{r6, r7, lr}
    9748:	0fc2      	lsrs	r2, r0, #31
    974a:	0247      	lsls	r7, r0, #9
    974c:	0248      	lsls	r0, r1, #9
    974e:	0a40      	lsrs	r0, r0, #9
    9750:	4684      	mov	ip, r0
    9752:	4666      	mov	r6, ip
    9754:	0a7b      	lsrs	r3, r7, #9
    9756:	0048      	lsls	r0, r1, #1
    9758:	0fc9      	lsrs	r1, r1, #31
    975a:	469a      	mov	sl, r3
    975c:	0e24      	lsrs	r4, r4, #24
    975e:	0015      	movs	r5, r2
    9760:	00db      	lsls	r3, r3, #3
    9762:	0e00      	lsrs	r0, r0, #24
    9764:	4689      	mov	r9, r1
    9766:	00f6      	lsls	r6, r6, #3
    9768:	28ff      	cmp	r0, #255	; 0xff
    976a:	d100      	bne.n	976e <__aeabi_fsub+0x32>
    976c:	e08f      	b.n	988e <__aeabi_fsub+0x152>
    976e:	2101      	movs	r1, #1
    9770:	464f      	mov	r7, r9
    9772:	404f      	eors	r7, r1
    9774:	0039      	movs	r1, r7
    9776:	4291      	cmp	r1, r2
    9778:	d066      	beq.n	9848 <__aeabi_fsub+0x10c>
    977a:	1a22      	subs	r2, r4, r0
    977c:	2a00      	cmp	r2, #0
    977e:	dc00      	bgt.n	9782 <__aeabi_fsub+0x46>
    9780:	e09d      	b.n	98be <__aeabi_fsub+0x182>
    9782:	2800      	cmp	r0, #0
    9784:	d13d      	bne.n	9802 <__aeabi_fsub+0xc6>
    9786:	2e00      	cmp	r6, #0
    9788:	d100      	bne.n	978c <__aeabi_fsub+0x50>
    978a:	e08b      	b.n	98a4 <__aeabi_fsub+0x168>
    978c:	1e51      	subs	r1, r2, #1
    978e:	2900      	cmp	r1, #0
    9790:	d000      	beq.n	9794 <__aeabi_fsub+0x58>
    9792:	e0b5      	b.n	9900 <__aeabi_fsub+0x1c4>
    9794:	2401      	movs	r4, #1
    9796:	1b9b      	subs	r3, r3, r6
    9798:	015a      	lsls	r2, r3, #5
    979a:	d544      	bpl.n	9826 <__aeabi_fsub+0xea>
    979c:	019b      	lsls	r3, r3, #6
    979e:	099f      	lsrs	r7, r3, #6
    97a0:	0038      	movs	r0, r7
    97a2:	f001 fd71 	bl	b288 <__clzsi2>
    97a6:	3805      	subs	r0, #5
    97a8:	4087      	lsls	r7, r0
    97aa:	4284      	cmp	r4, r0
    97ac:	dd00      	ble.n	97b0 <__aeabi_fsub+0x74>
    97ae:	e096      	b.n	98de <__aeabi_fsub+0x1a2>
    97b0:	1b04      	subs	r4, r0, r4
    97b2:	003a      	movs	r2, r7
    97b4:	2020      	movs	r0, #32
    97b6:	3401      	adds	r4, #1
    97b8:	40e2      	lsrs	r2, r4
    97ba:	1b04      	subs	r4, r0, r4
    97bc:	40a7      	lsls	r7, r4
    97be:	003b      	movs	r3, r7
    97c0:	1e5f      	subs	r7, r3, #1
    97c2:	41bb      	sbcs	r3, r7
    97c4:	2400      	movs	r4, #0
    97c6:	4313      	orrs	r3, r2
    97c8:	075a      	lsls	r2, r3, #29
    97ca:	d004      	beq.n	97d6 <__aeabi_fsub+0x9a>
    97cc:	220f      	movs	r2, #15
    97ce:	401a      	ands	r2, r3
    97d0:	2a04      	cmp	r2, #4
    97d2:	d000      	beq.n	97d6 <__aeabi_fsub+0x9a>
    97d4:	3304      	adds	r3, #4
    97d6:	015a      	lsls	r2, r3, #5
    97d8:	d527      	bpl.n	982a <__aeabi_fsub+0xee>
    97da:	3401      	adds	r4, #1
    97dc:	2cff      	cmp	r4, #255	; 0xff
    97de:	d100      	bne.n	97e2 <__aeabi_fsub+0xa6>
    97e0:	e079      	b.n	98d6 <__aeabi_fsub+0x19a>
    97e2:	2201      	movs	r2, #1
    97e4:	019b      	lsls	r3, r3, #6
    97e6:	0a5b      	lsrs	r3, r3, #9
    97e8:	b2e4      	uxtb	r4, r4
    97ea:	402a      	ands	r2, r5
    97ec:	025b      	lsls	r3, r3, #9
    97ee:	05e4      	lsls	r4, r4, #23
    97f0:	0a58      	lsrs	r0, r3, #9
    97f2:	07d2      	lsls	r2, r2, #31
    97f4:	4320      	orrs	r0, r4
    97f6:	4310      	orrs	r0, r2
    97f8:	bc1c      	pop	{r2, r3, r4}
    97fa:	4690      	mov	r8, r2
    97fc:	4699      	mov	r9, r3
    97fe:	46a2      	mov	sl, r4
    9800:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9802:	2cff      	cmp	r4, #255	; 0xff
    9804:	d0e0      	beq.n	97c8 <__aeabi_fsub+0x8c>
    9806:	2180      	movs	r1, #128	; 0x80
    9808:	04c9      	lsls	r1, r1, #19
    980a:	430e      	orrs	r6, r1
    980c:	2a1b      	cmp	r2, #27
    980e:	dc7b      	bgt.n	9908 <__aeabi_fsub+0x1cc>
    9810:	0031      	movs	r1, r6
    9812:	2020      	movs	r0, #32
    9814:	40d1      	lsrs	r1, r2
    9816:	1a82      	subs	r2, r0, r2
    9818:	4096      	lsls	r6, r2
    981a:	1e72      	subs	r2, r6, #1
    981c:	4196      	sbcs	r6, r2
    981e:	430e      	orrs	r6, r1
    9820:	1b9b      	subs	r3, r3, r6
    9822:	015a      	lsls	r2, r3, #5
    9824:	d4ba      	bmi.n	979c <__aeabi_fsub+0x60>
    9826:	075a      	lsls	r2, r3, #29
    9828:	d1d0      	bne.n	97cc <__aeabi_fsub+0x90>
    982a:	2201      	movs	r2, #1
    982c:	08df      	lsrs	r7, r3, #3
    982e:	402a      	ands	r2, r5
    9830:	2cff      	cmp	r4, #255	; 0xff
    9832:	d133      	bne.n	989c <__aeabi_fsub+0x160>
    9834:	2f00      	cmp	r7, #0
    9836:	d100      	bne.n	983a <__aeabi_fsub+0xfe>
    9838:	e0a8      	b.n	998c <__aeabi_fsub+0x250>
    983a:	2380      	movs	r3, #128	; 0x80
    983c:	03db      	lsls	r3, r3, #15
    983e:	433b      	orrs	r3, r7
    9840:	025b      	lsls	r3, r3, #9
    9842:	0a5b      	lsrs	r3, r3, #9
    9844:	24ff      	movs	r4, #255	; 0xff
    9846:	e7d1      	b.n	97ec <__aeabi_fsub+0xb0>
    9848:	1a21      	subs	r1, r4, r0
    984a:	2900      	cmp	r1, #0
    984c:	dd4c      	ble.n	98e8 <__aeabi_fsub+0x1ac>
    984e:	2800      	cmp	r0, #0
    9850:	d02a      	beq.n	98a8 <__aeabi_fsub+0x16c>
    9852:	2cff      	cmp	r4, #255	; 0xff
    9854:	d0b8      	beq.n	97c8 <__aeabi_fsub+0x8c>
    9856:	2080      	movs	r0, #128	; 0x80
    9858:	04c0      	lsls	r0, r0, #19
    985a:	4306      	orrs	r6, r0
    985c:	291b      	cmp	r1, #27
    985e:	dd00      	ble.n	9862 <__aeabi_fsub+0x126>
    9860:	e0af      	b.n	99c2 <__aeabi_fsub+0x286>
    9862:	0030      	movs	r0, r6
    9864:	2720      	movs	r7, #32
    9866:	40c8      	lsrs	r0, r1
    9868:	1a79      	subs	r1, r7, r1
    986a:	408e      	lsls	r6, r1
    986c:	1e71      	subs	r1, r6, #1
    986e:	418e      	sbcs	r6, r1
    9870:	4306      	orrs	r6, r0
    9872:	199b      	adds	r3, r3, r6
    9874:	0159      	lsls	r1, r3, #5
    9876:	d5d6      	bpl.n	9826 <__aeabi_fsub+0xea>
    9878:	3401      	adds	r4, #1
    987a:	2cff      	cmp	r4, #255	; 0xff
    987c:	d100      	bne.n	9880 <__aeabi_fsub+0x144>
    987e:	e085      	b.n	998c <__aeabi_fsub+0x250>
    9880:	2201      	movs	r2, #1
    9882:	497a      	ldr	r1, [pc, #488]	; (9a6c <__aeabi_fsub+0x330>)
    9884:	401a      	ands	r2, r3
    9886:	085b      	lsrs	r3, r3, #1
    9888:	400b      	ands	r3, r1
    988a:	4313      	orrs	r3, r2
    988c:	e79c      	b.n	97c8 <__aeabi_fsub+0x8c>
    988e:	2e00      	cmp	r6, #0
    9890:	d000      	beq.n	9894 <__aeabi_fsub+0x158>
    9892:	e770      	b.n	9776 <__aeabi_fsub+0x3a>
    9894:	e76b      	b.n	976e <__aeabi_fsub+0x32>
    9896:	1e3b      	subs	r3, r7, #0
    9898:	d1c5      	bne.n	9826 <__aeabi_fsub+0xea>
    989a:	2200      	movs	r2, #0
    989c:	027b      	lsls	r3, r7, #9
    989e:	0a5b      	lsrs	r3, r3, #9
    98a0:	b2e4      	uxtb	r4, r4
    98a2:	e7a3      	b.n	97ec <__aeabi_fsub+0xb0>
    98a4:	0014      	movs	r4, r2
    98a6:	e78f      	b.n	97c8 <__aeabi_fsub+0x8c>
    98a8:	2e00      	cmp	r6, #0
    98aa:	d04d      	beq.n	9948 <__aeabi_fsub+0x20c>
    98ac:	1e48      	subs	r0, r1, #1
    98ae:	2800      	cmp	r0, #0
    98b0:	d157      	bne.n	9962 <__aeabi_fsub+0x226>
    98b2:	199b      	adds	r3, r3, r6
    98b4:	2401      	movs	r4, #1
    98b6:	015a      	lsls	r2, r3, #5
    98b8:	d5b5      	bpl.n	9826 <__aeabi_fsub+0xea>
    98ba:	2402      	movs	r4, #2
    98bc:	e7e0      	b.n	9880 <__aeabi_fsub+0x144>
    98be:	2a00      	cmp	r2, #0
    98c0:	d125      	bne.n	990e <__aeabi_fsub+0x1d2>
    98c2:	1c62      	adds	r2, r4, #1
    98c4:	b2d2      	uxtb	r2, r2
    98c6:	2a01      	cmp	r2, #1
    98c8:	dd72      	ble.n	99b0 <__aeabi_fsub+0x274>
    98ca:	1b9f      	subs	r7, r3, r6
    98cc:	017a      	lsls	r2, r7, #5
    98ce:	d535      	bpl.n	993c <__aeabi_fsub+0x200>
    98d0:	1af7      	subs	r7, r6, r3
    98d2:	000d      	movs	r5, r1
    98d4:	e764      	b.n	97a0 <__aeabi_fsub+0x64>
    98d6:	2201      	movs	r2, #1
    98d8:	2300      	movs	r3, #0
    98da:	402a      	ands	r2, r5
    98dc:	e786      	b.n	97ec <__aeabi_fsub+0xb0>
    98de:	003b      	movs	r3, r7
    98e0:	4a63      	ldr	r2, [pc, #396]	; (9a70 <__aeabi_fsub+0x334>)
    98e2:	1a24      	subs	r4, r4, r0
    98e4:	4013      	ands	r3, r2
    98e6:	e76f      	b.n	97c8 <__aeabi_fsub+0x8c>
    98e8:	2900      	cmp	r1, #0
    98ea:	d16c      	bne.n	99c6 <__aeabi_fsub+0x28a>
    98ec:	1c61      	adds	r1, r4, #1
    98ee:	b2c8      	uxtb	r0, r1
    98f0:	2801      	cmp	r0, #1
    98f2:	dd4e      	ble.n	9992 <__aeabi_fsub+0x256>
    98f4:	29ff      	cmp	r1, #255	; 0xff
    98f6:	d049      	beq.n	998c <__aeabi_fsub+0x250>
    98f8:	199b      	adds	r3, r3, r6
    98fa:	085b      	lsrs	r3, r3, #1
    98fc:	000c      	movs	r4, r1
    98fe:	e763      	b.n	97c8 <__aeabi_fsub+0x8c>
    9900:	2aff      	cmp	r2, #255	; 0xff
    9902:	d041      	beq.n	9988 <__aeabi_fsub+0x24c>
    9904:	000a      	movs	r2, r1
    9906:	e781      	b.n	980c <__aeabi_fsub+0xd0>
    9908:	2601      	movs	r6, #1
    990a:	1b9b      	subs	r3, r3, r6
    990c:	e789      	b.n	9822 <__aeabi_fsub+0xe6>
    990e:	2c00      	cmp	r4, #0
    9910:	d01c      	beq.n	994c <__aeabi_fsub+0x210>
    9912:	28ff      	cmp	r0, #255	; 0xff
    9914:	d021      	beq.n	995a <__aeabi_fsub+0x21e>
    9916:	2480      	movs	r4, #128	; 0x80
    9918:	04e4      	lsls	r4, r4, #19
    991a:	4252      	negs	r2, r2
    991c:	4323      	orrs	r3, r4
    991e:	2a1b      	cmp	r2, #27
    9920:	dd00      	ble.n	9924 <__aeabi_fsub+0x1e8>
    9922:	e096      	b.n	9a52 <__aeabi_fsub+0x316>
    9924:	001c      	movs	r4, r3
    9926:	2520      	movs	r5, #32
    9928:	40d4      	lsrs	r4, r2
    992a:	1aaa      	subs	r2, r5, r2
    992c:	4093      	lsls	r3, r2
    992e:	1e5a      	subs	r2, r3, #1
    9930:	4193      	sbcs	r3, r2
    9932:	4323      	orrs	r3, r4
    9934:	1af3      	subs	r3, r6, r3
    9936:	0004      	movs	r4, r0
    9938:	000d      	movs	r5, r1
    993a:	e72d      	b.n	9798 <__aeabi_fsub+0x5c>
    993c:	2f00      	cmp	r7, #0
    993e:	d000      	beq.n	9942 <__aeabi_fsub+0x206>
    9940:	e72e      	b.n	97a0 <__aeabi_fsub+0x64>
    9942:	2200      	movs	r2, #0
    9944:	2400      	movs	r4, #0
    9946:	e7a9      	b.n	989c <__aeabi_fsub+0x160>
    9948:	000c      	movs	r4, r1
    994a:	e73d      	b.n	97c8 <__aeabi_fsub+0x8c>
    994c:	2b00      	cmp	r3, #0
    994e:	d058      	beq.n	9a02 <__aeabi_fsub+0x2c6>
    9950:	43d2      	mvns	r2, r2
    9952:	2a00      	cmp	r2, #0
    9954:	d0ee      	beq.n	9934 <__aeabi_fsub+0x1f8>
    9956:	28ff      	cmp	r0, #255	; 0xff
    9958:	d1e1      	bne.n	991e <__aeabi_fsub+0x1e2>
    995a:	0033      	movs	r3, r6
    995c:	24ff      	movs	r4, #255	; 0xff
    995e:	000d      	movs	r5, r1
    9960:	e732      	b.n	97c8 <__aeabi_fsub+0x8c>
    9962:	29ff      	cmp	r1, #255	; 0xff
    9964:	d010      	beq.n	9988 <__aeabi_fsub+0x24c>
    9966:	0001      	movs	r1, r0
    9968:	e778      	b.n	985c <__aeabi_fsub+0x120>
    996a:	2b00      	cmp	r3, #0
    996c:	d06e      	beq.n	9a4c <__aeabi_fsub+0x310>
    996e:	24ff      	movs	r4, #255	; 0xff
    9970:	2e00      	cmp	r6, #0
    9972:	d100      	bne.n	9976 <__aeabi_fsub+0x23a>
    9974:	e728      	b.n	97c8 <__aeabi_fsub+0x8c>
    9976:	2280      	movs	r2, #128	; 0x80
    9978:	4651      	mov	r1, sl
    997a:	03d2      	lsls	r2, r2, #15
    997c:	4211      	tst	r1, r2
    997e:	d003      	beq.n	9988 <__aeabi_fsub+0x24c>
    9980:	4661      	mov	r1, ip
    9982:	4211      	tst	r1, r2
    9984:	d100      	bne.n	9988 <__aeabi_fsub+0x24c>
    9986:	0033      	movs	r3, r6
    9988:	24ff      	movs	r4, #255	; 0xff
    998a:	e71d      	b.n	97c8 <__aeabi_fsub+0x8c>
    998c:	24ff      	movs	r4, #255	; 0xff
    998e:	2300      	movs	r3, #0
    9990:	e72c      	b.n	97ec <__aeabi_fsub+0xb0>
    9992:	2c00      	cmp	r4, #0
    9994:	d1e9      	bne.n	996a <__aeabi_fsub+0x22e>
    9996:	2b00      	cmp	r3, #0
    9998:	d063      	beq.n	9a62 <__aeabi_fsub+0x326>
    999a:	2e00      	cmp	r6, #0
    999c:	d100      	bne.n	99a0 <__aeabi_fsub+0x264>
    999e:	e713      	b.n	97c8 <__aeabi_fsub+0x8c>
    99a0:	199b      	adds	r3, r3, r6
    99a2:	015a      	lsls	r2, r3, #5
    99a4:	d400      	bmi.n	99a8 <__aeabi_fsub+0x26c>
    99a6:	e73e      	b.n	9826 <__aeabi_fsub+0xea>
    99a8:	4a31      	ldr	r2, [pc, #196]	; (9a70 <__aeabi_fsub+0x334>)
    99aa:	000c      	movs	r4, r1
    99ac:	4013      	ands	r3, r2
    99ae:	e70b      	b.n	97c8 <__aeabi_fsub+0x8c>
    99b0:	2c00      	cmp	r4, #0
    99b2:	d11e      	bne.n	99f2 <__aeabi_fsub+0x2b6>
    99b4:	2b00      	cmp	r3, #0
    99b6:	d12f      	bne.n	9a18 <__aeabi_fsub+0x2dc>
    99b8:	2e00      	cmp	r6, #0
    99ba:	d04f      	beq.n	9a5c <__aeabi_fsub+0x320>
    99bc:	0033      	movs	r3, r6
    99be:	000d      	movs	r5, r1
    99c0:	e702      	b.n	97c8 <__aeabi_fsub+0x8c>
    99c2:	2601      	movs	r6, #1
    99c4:	e755      	b.n	9872 <__aeabi_fsub+0x136>
    99c6:	2c00      	cmp	r4, #0
    99c8:	d11f      	bne.n	9a0a <__aeabi_fsub+0x2ce>
    99ca:	2b00      	cmp	r3, #0
    99cc:	d043      	beq.n	9a56 <__aeabi_fsub+0x31a>
    99ce:	43c9      	mvns	r1, r1
    99d0:	2900      	cmp	r1, #0
    99d2:	d00b      	beq.n	99ec <__aeabi_fsub+0x2b0>
    99d4:	28ff      	cmp	r0, #255	; 0xff
    99d6:	d039      	beq.n	9a4c <__aeabi_fsub+0x310>
    99d8:	291b      	cmp	r1, #27
    99da:	dc44      	bgt.n	9a66 <__aeabi_fsub+0x32a>
    99dc:	001c      	movs	r4, r3
    99de:	2720      	movs	r7, #32
    99e0:	40cc      	lsrs	r4, r1
    99e2:	1a79      	subs	r1, r7, r1
    99e4:	408b      	lsls	r3, r1
    99e6:	1e59      	subs	r1, r3, #1
    99e8:	418b      	sbcs	r3, r1
    99ea:	4323      	orrs	r3, r4
    99ec:	199b      	adds	r3, r3, r6
    99ee:	0004      	movs	r4, r0
    99f0:	e740      	b.n	9874 <__aeabi_fsub+0x138>
    99f2:	2b00      	cmp	r3, #0
    99f4:	d11a      	bne.n	9a2c <__aeabi_fsub+0x2f0>
    99f6:	2e00      	cmp	r6, #0
    99f8:	d124      	bne.n	9a44 <__aeabi_fsub+0x308>
    99fa:	2780      	movs	r7, #128	; 0x80
    99fc:	2200      	movs	r2, #0
    99fe:	03ff      	lsls	r7, r7, #15
    9a00:	e71b      	b.n	983a <__aeabi_fsub+0xfe>
    9a02:	0033      	movs	r3, r6
    9a04:	0004      	movs	r4, r0
    9a06:	000d      	movs	r5, r1
    9a08:	e6de      	b.n	97c8 <__aeabi_fsub+0x8c>
    9a0a:	28ff      	cmp	r0, #255	; 0xff
    9a0c:	d01e      	beq.n	9a4c <__aeabi_fsub+0x310>
    9a0e:	2480      	movs	r4, #128	; 0x80
    9a10:	04e4      	lsls	r4, r4, #19
    9a12:	4249      	negs	r1, r1
    9a14:	4323      	orrs	r3, r4
    9a16:	e7df      	b.n	99d8 <__aeabi_fsub+0x29c>
    9a18:	2e00      	cmp	r6, #0
    9a1a:	d100      	bne.n	9a1e <__aeabi_fsub+0x2e2>
    9a1c:	e6d4      	b.n	97c8 <__aeabi_fsub+0x8c>
    9a1e:	1b9f      	subs	r7, r3, r6
    9a20:	017a      	lsls	r2, r7, #5
    9a22:	d400      	bmi.n	9a26 <__aeabi_fsub+0x2ea>
    9a24:	e737      	b.n	9896 <__aeabi_fsub+0x15a>
    9a26:	1af3      	subs	r3, r6, r3
    9a28:	000d      	movs	r5, r1
    9a2a:	e6cd      	b.n	97c8 <__aeabi_fsub+0x8c>
    9a2c:	24ff      	movs	r4, #255	; 0xff
    9a2e:	2e00      	cmp	r6, #0
    9a30:	d100      	bne.n	9a34 <__aeabi_fsub+0x2f8>
    9a32:	e6c9      	b.n	97c8 <__aeabi_fsub+0x8c>
    9a34:	2280      	movs	r2, #128	; 0x80
    9a36:	4650      	mov	r0, sl
    9a38:	03d2      	lsls	r2, r2, #15
    9a3a:	4210      	tst	r0, r2
    9a3c:	d0a4      	beq.n	9988 <__aeabi_fsub+0x24c>
    9a3e:	4660      	mov	r0, ip
    9a40:	4210      	tst	r0, r2
    9a42:	d1a1      	bne.n	9988 <__aeabi_fsub+0x24c>
    9a44:	0033      	movs	r3, r6
    9a46:	000d      	movs	r5, r1
    9a48:	24ff      	movs	r4, #255	; 0xff
    9a4a:	e6bd      	b.n	97c8 <__aeabi_fsub+0x8c>
    9a4c:	0033      	movs	r3, r6
    9a4e:	24ff      	movs	r4, #255	; 0xff
    9a50:	e6ba      	b.n	97c8 <__aeabi_fsub+0x8c>
    9a52:	2301      	movs	r3, #1
    9a54:	e76e      	b.n	9934 <__aeabi_fsub+0x1f8>
    9a56:	0033      	movs	r3, r6
    9a58:	0004      	movs	r4, r0
    9a5a:	e6b5      	b.n	97c8 <__aeabi_fsub+0x8c>
    9a5c:	2700      	movs	r7, #0
    9a5e:	2200      	movs	r2, #0
    9a60:	e71c      	b.n	989c <__aeabi_fsub+0x160>
    9a62:	0033      	movs	r3, r6
    9a64:	e6b0      	b.n	97c8 <__aeabi_fsub+0x8c>
    9a66:	2301      	movs	r3, #1
    9a68:	e7c0      	b.n	99ec <__aeabi_fsub+0x2b0>
    9a6a:	46c0      	nop			; (mov r8, r8)
    9a6c:	7dffffff 	.word	0x7dffffff
    9a70:	fbffffff 	.word	0xfbffffff

00009a74 <__aeabi_f2iz>:
    9a74:	0241      	lsls	r1, r0, #9
    9a76:	0043      	lsls	r3, r0, #1
    9a78:	0fc2      	lsrs	r2, r0, #31
    9a7a:	0a49      	lsrs	r1, r1, #9
    9a7c:	0e1b      	lsrs	r3, r3, #24
    9a7e:	2000      	movs	r0, #0
    9a80:	2b7e      	cmp	r3, #126	; 0x7e
    9a82:	dd0d      	ble.n	9aa0 <__aeabi_f2iz+0x2c>
    9a84:	2b9d      	cmp	r3, #157	; 0x9d
    9a86:	dc0c      	bgt.n	9aa2 <__aeabi_f2iz+0x2e>
    9a88:	2080      	movs	r0, #128	; 0x80
    9a8a:	0400      	lsls	r0, r0, #16
    9a8c:	4301      	orrs	r1, r0
    9a8e:	2b95      	cmp	r3, #149	; 0x95
    9a90:	dc0a      	bgt.n	9aa8 <__aeabi_f2iz+0x34>
    9a92:	2096      	movs	r0, #150	; 0x96
    9a94:	1ac3      	subs	r3, r0, r3
    9a96:	40d9      	lsrs	r1, r3
    9a98:	4248      	negs	r0, r1
    9a9a:	2a00      	cmp	r2, #0
    9a9c:	d100      	bne.n	9aa0 <__aeabi_f2iz+0x2c>
    9a9e:	0008      	movs	r0, r1
    9aa0:	4770      	bx	lr
    9aa2:	4b03      	ldr	r3, [pc, #12]	; (9ab0 <__aeabi_f2iz+0x3c>)
    9aa4:	18d0      	adds	r0, r2, r3
    9aa6:	e7fb      	b.n	9aa0 <__aeabi_f2iz+0x2c>
    9aa8:	3b96      	subs	r3, #150	; 0x96
    9aaa:	4099      	lsls	r1, r3
    9aac:	e7f4      	b.n	9a98 <__aeabi_f2iz+0x24>
    9aae:	46c0      	nop			; (mov r8, r8)
    9ab0:	7fffffff 	.word	0x7fffffff

00009ab4 <__aeabi_i2f>:
    9ab4:	b570      	push	{r4, r5, r6, lr}
    9ab6:	2800      	cmp	r0, #0
    9ab8:	d030      	beq.n	9b1c <__aeabi_i2f+0x68>
    9aba:	17c3      	asrs	r3, r0, #31
    9abc:	18c4      	adds	r4, r0, r3
    9abe:	405c      	eors	r4, r3
    9ac0:	0fc5      	lsrs	r5, r0, #31
    9ac2:	0020      	movs	r0, r4
    9ac4:	f001 fbe0 	bl	b288 <__clzsi2>
    9ac8:	239e      	movs	r3, #158	; 0x9e
    9aca:	1a1b      	subs	r3, r3, r0
    9acc:	2b96      	cmp	r3, #150	; 0x96
    9ace:	dc0d      	bgt.n	9aec <__aeabi_i2f+0x38>
    9ad0:	2296      	movs	r2, #150	; 0x96
    9ad2:	1ad2      	subs	r2, r2, r3
    9ad4:	4094      	lsls	r4, r2
    9ad6:	002a      	movs	r2, r5
    9ad8:	0264      	lsls	r4, r4, #9
    9ada:	0a64      	lsrs	r4, r4, #9
    9adc:	b2db      	uxtb	r3, r3
    9ade:	0264      	lsls	r4, r4, #9
    9ae0:	05db      	lsls	r3, r3, #23
    9ae2:	0a60      	lsrs	r0, r4, #9
    9ae4:	07d2      	lsls	r2, r2, #31
    9ae6:	4318      	orrs	r0, r3
    9ae8:	4310      	orrs	r0, r2
    9aea:	bd70      	pop	{r4, r5, r6, pc}
    9aec:	2b99      	cmp	r3, #153	; 0x99
    9aee:	dc19      	bgt.n	9b24 <__aeabi_i2f+0x70>
    9af0:	2299      	movs	r2, #153	; 0x99
    9af2:	1ad2      	subs	r2, r2, r3
    9af4:	2a00      	cmp	r2, #0
    9af6:	dd29      	ble.n	9b4c <__aeabi_i2f+0x98>
    9af8:	4094      	lsls	r4, r2
    9afa:	0022      	movs	r2, r4
    9afc:	4c14      	ldr	r4, [pc, #80]	; (9b50 <__aeabi_i2f+0x9c>)
    9afe:	4014      	ands	r4, r2
    9b00:	0751      	lsls	r1, r2, #29
    9b02:	d004      	beq.n	9b0e <__aeabi_i2f+0x5a>
    9b04:	210f      	movs	r1, #15
    9b06:	400a      	ands	r2, r1
    9b08:	2a04      	cmp	r2, #4
    9b0a:	d000      	beq.n	9b0e <__aeabi_i2f+0x5a>
    9b0c:	3404      	adds	r4, #4
    9b0e:	0162      	lsls	r2, r4, #5
    9b10:	d413      	bmi.n	9b3a <__aeabi_i2f+0x86>
    9b12:	01a4      	lsls	r4, r4, #6
    9b14:	0a64      	lsrs	r4, r4, #9
    9b16:	b2db      	uxtb	r3, r3
    9b18:	002a      	movs	r2, r5
    9b1a:	e7e0      	b.n	9ade <__aeabi_i2f+0x2a>
    9b1c:	2200      	movs	r2, #0
    9b1e:	2300      	movs	r3, #0
    9b20:	2400      	movs	r4, #0
    9b22:	e7dc      	b.n	9ade <__aeabi_i2f+0x2a>
    9b24:	2205      	movs	r2, #5
    9b26:	0021      	movs	r1, r4
    9b28:	1a12      	subs	r2, r2, r0
    9b2a:	40d1      	lsrs	r1, r2
    9b2c:	22b9      	movs	r2, #185	; 0xb9
    9b2e:	1ad2      	subs	r2, r2, r3
    9b30:	4094      	lsls	r4, r2
    9b32:	1e62      	subs	r2, r4, #1
    9b34:	4194      	sbcs	r4, r2
    9b36:	430c      	orrs	r4, r1
    9b38:	e7da      	b.n	9af0 <__aeabi_i2f+0x3c>
    9b3a:	4b05      	ldr	r3, [pc, #20]	; (9b50 <__aeabi_i2f+0x9c>)
    9b3c:	002a      	movs	r2, r5
    9b3e:	401c      	ands	r4, r3
    9b40:	239f      	movs	r3, #159	; 0x9f
    9b42:	01a4      	lsls	r4, r4, #6
    9b44:	1a1b      	subs	r3, r3, r0
    9b46:	0a64      	lsrs	r4, r4, #9
    9b48:	b2db      	uxtb	r3, r3
    9b4a:	e7c8      	b.n	9ade <__aeabi_i2f+0x2a>
    9b4c:	0022      	movs	r2, r4
    9b4e:	e7d5      	b.n	9afc <__aeabi_i2f+0x48>
    9b50:	fbffffff 	.word	0xfbffffff

00009b54 <__aeabi_ui2f>:
    9b54:	b510      	push	{r4, lr}
    9b56:	1e04      	subs	r4, r0, #0
    9b58:	d027      	beq.n	9baa <__aeabi_ui2f+0x56>
    9b5a:	f001 fb95 	bl	b288 <__clzsi2>
    9b5e:	239e      	movs	r3, #158	; 0x9e
    9b60:	1a1b      	subs	r3, r3, r0
    9b62:	2b96      	cmp	r3, #150	; 0x96
    9b64:	dc0a      	bgt.n	9b7c <__aeabi_ui2f+0x28>
    9b66:	2296      	movs	r2, #150	; 0x96
    9b68:	1ad2      	subs	r2, r2, r3
    9b6a:	4094      	lsls	r4, r2
    9b6c:	0264      	lsls	r4, r4, #9
    9b6e:	0a64      	lsrs	r4, r4, #9
    9b70:	b2db      	uxtb	r3, r3
    9b72:	0264      	lsls	r4, r4, #9
    9b74:	05db      	lsls	r3, r3, #23
    9b76:	0a60      	lsrs	r0, r4, #9
    9b78:	4318      	orrs	r0, r3
    9b7a:	bd10      	pop	{r4, pc}
    9b7c:	2b99      	cmp	r3, #153	; 0x99
    9b7e:	dc17      	bgt.n	9bb0 <__aeabi_ui2f+0x5c>
    9b80:	2299      	movs	r2, #153	; 0x99
    9b82:	1ad2      	subs	r2, r2, r3
    9b84:	2a00      	cmp	r2, #0
    9b86:	dd27      	ble.n	9bd8 <__aeabi_ui2f+0x84>
    9b88:	4094      	lsls	r4, r2
    9b8a:	0022      	movs	r2, r4
    9b8c:	4c13      	ldr	r4, [pc, #76]	; (9bdc <__aeabi_ui2f+0x88>)
    9b8e:	4014      	ands	r4, r2
    9b90:	0751      	lsls	r1, r2, #29
    9b92:	d004      	beq.n	9b9e <__aeabi_ui2f+0x4a>
    9b94:	210f      	movs	r1, #15
    9b96:	400a      	ands	r2, r1
    9b98:	2a04      	cmp	r2, #4
    9b9a:	d000      	beq.n	9b9e <__aeabi_ui2f+0x4a>
    9b9c:	3404      	adds	r4, #4
    9b9e:	0162      	lsls	r2, r4, #5
    9ba0:	d412      	bmi.n	9bc8 <__aeabi_ui2f+0x74>
    9ba2:	01a4      	lsls	r4, r4, #6
    9ba4:	0a64      	lsrs	r4, r4, #9
    9ba6:	b2db      	uxtb	r3, r3
    9ba8:	e7e3      	b.n	9b72 <__aeabi_ui2f+0x1e>
    9baa:	2300      	movs	r3, #0
    9bac:	2400      	movs	r4, #0
    9bae:	e7e0      	b.n	9b72 <__aeabi_ui2f+0x1e>
    9bb0:	22b9      	movs	r2, #185	; 0xb9
    9bb2:	0021      	movs	r1, r4
    9bb4:	1ad2      	subs	r2, r2, r3
    9bb6:	4091      	lsls	r1, r2
    9bb8:	000a      	movs	r2, r1
    9bba:	1e51      	subs	r1, r2, #1
    9bbc:	418a      	sbcs	r2, r1
    9bbe:	2105      	movs	r1, #5
    9bc0:	1a09      	subs	r1, r1, r0
    9bc2:	40cc      	lsrs	r4, r1
    9bc4:	4314      	orrs	r4, r2
    9bc6:	e7db      	b.n	9b80 <__aeabi_ui2f+0x2c>
    9bc8:	4b04      	ldr	r3, [pc, #16]	; (9bdc <__aeabi_ui2f+0x88>)
    9bca:	401c      	ands	r4, r3
    9bcc:	239f      	movs	r3, #159	; 0x9f
    9bce:	01a4      	lsls	r4, r4, #6
    9bd0:	1a1b      	subs	r3, r3, r0
    9bd2:	0a64      	lsrs	r4, r4, #9
    9bd4:	b2db      	uxtb	r3, r3
    9bd6:	e7cc      	b.n	9b72 <__aeabi_ui2f+0x1e>
    9bd8:	0022      	movs	r2, r4
    9bda:	e7d7      	b.n	9b8c <__aeabi_ui2f+0x38>
    9bdc:	fbffffff 	.word	0xfbffffff

00009be0 <__aeabi_ddiv>:
    9be0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9be2:	4657      	mov	r7, sl
    9be4:	4645      	mov	r5, r8
    9be6:	46de      	mov	lr, fp
    9be8:	464e      	mov	r6, r9
    9bea:	b5e0      	push	{r5, r6, r7, lr}
    9bec:	004c      	lsls	r4, r1, #1
    9bee:	030e      	lsls	r6, r1, #12
    9bf0:	b087      	sub	sp, #28
    9bf2:	4683      	mov	fp, r0
    9bf4:	4692      	mov	sl, r2
    9bf6:	001d      	movs	r5, r3
    9bf8:	4680      	mov	r8, r0
    9bfa:	0b36      	lsrs	r6, r6, #12
    9bfc:	0d64      	lsrs	r4, r4, #21
    9bfe:	0fcf      	lsrs	r7, r1, #31
    9c00:	2c00      	cmp	r4, #0
    9c02:	d04f      	beq.n	9ca4 <__aeabi_ddiv+0xc4>
    9c04:	4b6f      	ldr	r3, [pc, #444]	; (9dc4 <__aeabi_ddiv+0x1e4>)
    9c06:	429c      	cmp	r4, r3
    9c08:	d035      	beq.n	9c76 <__aeabi_ddiv+0x96>
    9c0a:	2380      	movs	r3, #128	; 0x80
    9c0c:	0f42      	lsrs	r2, r0, #29
    9c0e:	041b      	lsls	r3, r3, #16
    9c10:	00f6      	lsls	r6, r6, #3
    9c12:	4313      	orrs	r3, r2
    9c14:	4333      	orrs	r3, r6
    9c16:	4699      	mov	r9, r3
    9c18:	00c3      	lsls	r3, r0, #3
    9c1a:	4698      	mov	r8, r3
    9c1c:	4b6a      	ldr	r3, [pc, #424]	; (9dc8 <__aeabi_ddiv+0x1e8>)
    9c1e:	2600      	movs	r6, #0
    9c20:	469c      	mov	ip, r3
    9c22:	2300      	movs	r3, #0
    9c24:	4464      	add	r4, ip
    9c26:	9303      	str	r3, [sp, #12]
    9c28:	032b      	lsls	r3, r5, #12
    9c2a:	0b1b      	lsrs	r3, r3, #12
    9c2c:	469b      	mov	fp, r3
    9c2e:	006b      	lsls	r3, r5, #1
    9c30:	0fed      	lsrs	r5, r5, #31
    9c32:	4650      	mov	r0, sl
    9c34:	0d5b      	lsrs	r3, r3, #21
    9c36:	9501      	str	r5, [sp, #4]
    9c38:	d05e      	beq.n	9cf8 <__aeabi_ddiv+0x118>
    9c3a:	4a62      	ldr	r2, [pc, #392]	; (9dc4 <__aeabi_ddiv+0x1e4>)
    9c3c:	4293      	cmp	r3, r2
    9c3e:	d053      	beq.n	9ce8 <__aeabi_ddiv+0x108>
    9c40:	465a      	mov	r2, fp
    9c42:	00d1      	lsls	r1, r2, #3
    9c44:	2280      	movs	r2, #128	; 0x80
    9c46:	0f40      	lsrs	r0, r0, #29
    9c48:	0412      	lsls	r2, r2, #16
    9c4a:	4302      	orrs	r2, r0
    9c4c:	430a      	orrs	r2, r1
    9c4e:	4693      	mov	fp, r2
    9c50:	4652      	mov	r2, sl
    9c52:	00d1      	lsls	r1, r2, #3
    9c54:	4a5c      	ldr	r2, [pc, #368]	; (9dc8 <__aeabi_ddiv+0x1e8>)
    9c56:	4694      	mov	ip, r2
    9c58:	2200      	movs	r2, #0
    9c5a:	4463      	add	r3, ip
    9c5c:	0038      	movs	r0, r7
    9c5e:	4068      	eors	r0, r5
    9c60:	4684      	mov	ip, r0
    9c62:	9002      	str	r0, [sp, #8]
    9c64:	1ae4      	subs	r4, r4, r3
    9c66:	4316      	orrs	r6, r2
    9c68:	2e0f      	cmp	r6, #15
    9c6a:	d900      	bls.n	9c6e <__aeabi_ddiv+0x8e>
    9c6c:	e0b4      	b.n	9dd8 <__aeabi_ddiv+0x1f8>
    9c6e:	4b57      	ldr	r3, [pc, #348]	; (9dcc <__aeabi_ddiv+0x1ec>)
    9c70:	00b6      	lsls	r6, r6, #2
    9c72:	599b      	ldr	r3, [r3, r6]
    9c74:	469f      	mov	pc, r3
    9c76:	0003      	movs	r3, r0
    9c78:	4333      	orrs	r3, r6
    9c7a:	4699      	mov	r9, r3
    9c7c:	d16c      	bne.n	9d58 <__aeabi_ddiv+0x178>
    9c7e:	2300      	movs	r3, #0
    9c80:	4698      	mov	r8, r3
    9c82:	3302      	adds	r3, #2
    9c84:	2608      	movs	r6, #8
    9c86:	9303      	str	r3, [sp, #12]
    9c88:	e7ce      	b.n	9c28 <__aeabi_ddiv+0x48>
    9c8a:	46cb      	mov	fp, r9
    9c8c:	4641      	mov	r1, r8
    9c8e:	9a03      	ldr	r2, [sp, #12]
    9c90:	9701      	str	r7, [sp, #4]
    9c92:	2a02      	cmp	r2, #2
    9c94:	d165      	bne.n	9d62 <__aeabi_ddiv+0x182>
    9c96:	9b01      	ldr	r3, [sp, #4]
    9c98:	4c4a      	ldr	r4, [pc, #296]	; (9dc4 <__aeabi_ddiv+0x1e4>)
    9c9a:	469c      	mov	ip, r3
    9c9c:	2300      	movs	r3, #0
    9c9e:	2200      	movs	r2, #0
    9ca0:	4698      	mov	r8, r3
    9ca2:	e06b      	b.n	9d7c <__aeabi_ddiv+0x19c>
    9ca4:	0003      	movs	r3, r0
    9ca6:	4333      	orrs	r3, r6
    9ca8:	4699      	mov	r9, r3
    9caa:	d04e      	beq.n	9d4a <__aeabi_ddiv+0x16a>
    9cac:	2e00      	cmp	r6, #0
    9cae:	d100      	bne.n	9cb2 <__aeabi_ddiv+0xd2>
    9cb0:	e1bc      	b.n	a02c <__aeabi_ddiv+0x44c>
    9cb2:	0030      	movs	r0, r6
    9cb4:	f001 fae8 	bl	b288 <__clzsi2>
    9cb8:	0003      	movs	r3, r0
    9cba:	3b0b      	subs	r3, #11
    9cbc:	2b1c      	cmp	r3, #28
    9cbe:	dd00      	ble.n	9cc2 <__aeabi_ddiv+0xe2>
    9cc0:	e1ac      	b.n	a01c <__aeabi_ddiv+0x43c>
    9cc2:	221d      	movs	r2, #29
    9cc4:	1ad3      	subs	r3, r2, r3
    9cc6:	465a      	mov	r2, fp
    9cc8:	0001      	movs	r1, r0
    9cca:	40da      	lsrs	r2, r3
    9ccc:	3908      	subs	r1, #8
    9cce:	408e      	lsls	r6, r1
    9cd0:	0013      	movs	r3, r2
    9cd2:	4333      	orrs	r3, r6
    9cd4:	4699      	mov	r9, r3
    9cd6:	465b      	mov	r3, fp
    9cd8:	408b      	lsls	r3, r1
    9cda:	4698      	mov	r8, r3
    9cdc:	2300      	movs	r3, #0
    9cde:	4c3c      	ldr	r4, [pc, #240]	; (9dd0 <__aeabi_ddiv+0x1f0>)
    9ce0:	2600      	movs	r6, #0
    9ce2:	1a24      	subs	r4, r4, r0
    9ce4:	9303      	str	r3, [sp, #12]
    9ce6:	e79f      	b.n	9c28 <__aeabi_ddiv+0x48>
    9ce8:	4651      	mov	r1, sl
    9cea:	465a      	mov	r2, fp
    9cec:	4311      	orrs	r1, r2
    9cee:	d129      	bne.n	9d44 <__aeabi_ddiv+0x164>
    9cf0:	2200      	movs	r2, #0
    9cf2:	4693      	mov	fp, r2
    9cf4:	3202      	adds	r2, #2
    9cf6:	e7b1      	b.n	9c5c <__aeabi_ddiv+0x7c>
    9cf8:	4659      	mov	r1, fp
    9cfa:	4301      	orrs	r1, r0
    9cfc:	d01e      	beq.n	9d3c <__aeabi_ddiv+0x15c>
    9cfe:	465b      	mov	r3, fp
    9d00:	2b00      	cmp	r3, #0
    9d02:	d100      	bne.n	9d06 <__aeabi_ddiv+0x126>
    9d04:	e19e      	b.n	a044 <__aeabi_ddiv+0x464>
    9d06:	4658      	mov	r0, fp
    9d08:	f001 fabe 	bl	b288 <__clzsi2>
    9d0c:	0003      	movs	r3, r0
    9d0e:	3b0b      	subs	r3, #11
    9d10:	2b1c      	cmp	r3, #28
    9d12:	dd00      	ble.n	9d16 <__aeabi_ddiv+0x136>
    9d14:	e18f      	b.n	a036 <__aeabi_ddiv+0x456>
    9d16:	0002      	movs	r2, r0
    9d18:	4659      	mov	r1, fp
    9d1a:	3a08      	subs	r2, #8
    9d1c:	4091      	lsls	r1, r2
    9d1e:	468b      	mov	fp, r1
    9d20:	211d      	movs	r1, #29
    9d22:	1acb      	subs	r3, r1, r3
    9d24:	4651      	mov	r1, sl
    9d26:	40d9      	lsrs	r1, r3
    9d28:	000b      	movs	r3, r1
    9d2a:	4659      	mov	r1, fp
    9d2c:	430b      	orrs	r3, r1
    9d2e:	4651      	mov	r1, sl
    9d30:	469b      	mov	fp, r3
    9d32:	4091      	lsls	r1, r2
    9d34:	4b26      	ldr	r3, [pc, #152]	; (9dd0 <__aeabi_ddiv+0x1f0>)
    9d36:	2200      	movs	r2, #0
    9d38:	1a1b      	subs	r3, r3, r0
    9d3a:	e78f      	b.n	9c5c <__aeabi_ddiv+0x7c>
    9d3c:	2300      	movs	r3, #0
    9d3e:	2201      	movs	r2, #1
    9d40:	469b      	mov	fp, r3
    9d42:	e78b      	b.n	9c5c <__aeabi_ddiv+0x7c>
    9d44:	4651      	mov	r1, sl
    9d46:	2203      	movs	r2, #3
    9d48:	e788      	b.n	9c5c <__aeabi_ddiv+0x7c>
    9d4a:	2300      	movs	r3, #0
    9d4c:	4698      	mov	r8, r3
    9d4e:	3301      	adds	r3, #1
    9d50:	2604      	movs	r6, #4
    9d52:	2400      	movs	r4, #0
    9d54:	9303      	str	r3, [sp, #12]
    9d56:	e767      	b.n	9c28 <__aeabi_ddiv+0x48>
    9d58:	2303      	movs	r3, #3
    9d5a:	46b1      	mov	r9, r6
    9d5c:	9303      	str	r3, [sp, #12]
    9d5e:	260c      	movs	r6, #12
    9d60:	e762      	b.n	9c28 <__aeabi_ddiv+0x48>
    9d62:	2a03      	cmp	r2, #3
    9d64:	d100      	bne.n	9d68 <__aeabi_ddiv+0x188>
    9d66:	e25c      	b.n	a222 <__aeabi_ddiv+0x642>
    9d68:	9b01      	ldr	r3, [sp, #4]
    9d6a:	2a01      	cmp	r2, #1
    9d6c:	d000      	beq.n	9d70 <__aeabi_ddiv+0x190>
    9d6e:	e1e4      	b.n	a13a <__aeabi_ddiv+0x55a>
    9d70:	4013      	ands	r3, r2
    9d72:	469c      	mov	ip, r3
    9d74:	2300      	movs	r3, #0
    9d76:	2400      	movs	r4, #0
    9d78:	2200      	movs	r2, #0
    9d7a:	4698      	mov	r8, r3
    9d7c:	2100      	movs	r1, #0
    9d7e:	0312      	lsls	r2, r2, #12
    9d80:	0b13      	lsrs	r3, r2, #12
    9d82:	0d0a      	lsrs	r2, r1, #20
    9d84:	0512      	lsls	r2, r2, #20
    9d86:	431a      	orrs	r2, r3
    9d88:	0523      	lsls	r3, r4, #20
    9d8a:	4c12      	ldr	r4, [pc, #72]	; (9dd4 <__aeabi_ddiv+0x1f4>)
    9d8c:	4640      	mov	r0, r8
    9d8e:	4022      	ands	r2, r4
    9d90:	4313      	orrs	r3, r2
    9d92:	4662      	mov	r2, ip
    9d94:	005b      	lsls	r3, r3, #1
    9d96:	07d2      	lsls	r2, r2, #31
    9d98:	085b      	lsrs	r3, r3, #1
    9d9a:	4313      	orrs	r3, r2
    9d9c:	0019      	movs	r1, r3
    9d9e:	b007      	add	sp, #28
    9da0:	bc3c      	pop	{r2, r3, r4, r5}
    9da2:	4690      	mov	r8, r2
    9da4:	4699      	mov	r9, r3
    9da6:	46a2      	mov	sl, r4
    9da8:	46ab      	mov	fp, r5
    9daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9dac:	2300      	movs	r3, #0
    9dae:	2280      	movs	r2, #128	; 0x80
    9db0:	469c      	mov	ip, r3
    9db2:	0312      	lsls	r2, r2, #12
    9db4:	4698      	mov	r8, r3
    9db6:	4c03      	ldr	r4, [pc, #12]	; (9dc4 <__aeabi_ddiv+0x1e4>)
    9db8:	e7e0      	b.n	9d7c <__aeabi_ddiv+0x19c>
    9dba:	2300      	movs	r3, #0
    9dbc:	4c01      	ldr	r4, [pc, #4]	; (9dc4 <__aeabi_ddiv+0x1e4>)
    9dbe:	2200      	movs	r2, #0
    9dc0:	4698      	mov	r8, r3
    9dc2:	e7db      	b.n	9d7c <__aeabi_ddiv+0x19c>
    9dc4:	000007ff 	.word	0x000007ff
    9dc8:	fffffc01 	.word	0xfffffc01
    9dcc:	0000c288 	.word	0x0000c288
    9dd0:	fffffc0d 	.word	0xfffffc0d
    9dd4:	800fffff 	.word	0x800fffff
    9dd8:	45d9      	cmp	r9, fp
    9dda:	d900      	bls.n	9dde <__aeabi_ddiv+0x1fe>
    9ddc:	e139      	b.n	a052 <__aeabi_ddiv+0x472>
    9dde:	d100      	bne.n	9de2 <__aeabi_ddiv+0x202>
    9de0:	e134      	b.n	a04c <__aeabi_ddiv+0x46c>
    9de2:	2300      	movs	r3, #0
    9de4:	4646      	mov	r6, r8
    9de6:	464d      	mov	r5, r9
    9de8:	469a      	mov	sl, r3
    9dea:	3c01      	subs	r4, #1
    9dec:	465b      	mov	r3, fp
    9dee:	0e0a      	lsrs	r2, r1, #24
    9df0:	021b      	lsls	r3, r3, #8
    9df2:	431a      	orrs	r2, r3
    9df4:	020b      	lsls	r3, r1, #8
    9df6:	0c17      	lsrs	r7, r2, #16
    9df8:	9303      	str	r3, [sp, #12]
    9dfa:	0413      	lsls	r3, r2, #16
    9dfc:	0c1b      	lsrs	r3, r3, #16
    9dfe:	0039      	movs	r1, r7
    9e00:	0028      	movs	r0, r5
    9e02:	4690      	mov	r8, r2
    9e04:	9301      	str	r3, [sp, #4]
    9e06:	f7fe fdd3 	bl	89b0 <__udivsi3>
    9e0a:	0002      	movs	r2, r0
    9e0c:	9b01      	ldr	r3, [sp, #4]
    9e0e:	4683      	mov	fp, r0
    9e10:	435a      	muls	r2, r3
    9e12:	0028      	movs	r0, r5
    9e14:	0039      	movs	r1, r7
    9e16:	4691      	mov	r9, r2
    9e18:	f7fe fe50 	bl	8abc <__aeabi_uidivmod>
    9e1c:	0c35      	lsrs	r5, r6, #16
    9e1e:	0409      	lsls	r1, r1, #16
    9e20:	430d      	orrs	r5, r1
    9e22:	45a9      	cmp	r9, r5
    9e24:	d90d      	bls.n	9e42 <__aeabi_ddiv+0x262>
    9e26:	465b      	mov	r3, fp
    9e28:	4445      	add	r5, r8
    9e2a:	3b01      	subs	r3, #1
    9e2c:	45a8      	cmp	r8, r5
    9e2e:	d900      	bls.n	9e32 <__aeabi_ddiv+0x252>
    9e30:	e13a      	b.n	a0a8 <__aeabi_ddiv+0x4c8>
    9e32:	45a9      	cmp	r9, r5
    9e34:	d800      	bhi.n	9e38 <__aeabi_ddiv+0x258>
    9e36:	e137      	b.n	a0a8 <__aeabi_ddiv+0x4c8>
    9e38:	2302      	movs	r3, #2
    9e3a:	425b      	negs	r3, r3
    9e3c:	469c      	mov	ip, r3
    9e3e:	4445      	add	r5, r8
    9e40:	44e3      	add	fp, ip
    9e42:	464b      	mov	r3, r9
    9e44:	1aeb      	subs	r3, r5, r3
    9e46:	0039      	movs	r1, r7
    9e48:	0018      	movs	r0, r3
    9e4a:	9304      	str	r3, [sp, #16]
    9e4c:	f7fe fdb0 	bl	89b0 <__udivsi3>
    9e50:	9b01      	ldr	r3, [sp, #4]
    9e52:	0005      	movs	r5, r0
    9e54:	4343      	muls	r3, r0
    9e56:	0039      	movs	r1, r7
    9e58:	9804      	ldr	r0, [sp, #16]
    9e5a:	4699      	mov	r9, r3
    9e5c:	f7fe fe2e 	bl	8abc <__aeabi_uidivmod>
    9e60:	0433      	lsls	r3, r6, #16
    9e62:	0409      	lsls	r1, r1, #16
    9e64:	0c1b      	lsrs	r3, r3, #16
    9e66:	430b      	orrs	r3, r1
    9e68:	4599      	cmp	r9, r3
    9e6a:	d909      	bls.n	9e80 <__aeabi_ddiv+0x2a0>
    9e6c:	4443      	add	r3, r8
    9e6e:	1e6a      	subs	r2, r5, #1
    9e70:	4598      	cmp	r8, r3
    9e72:	d900      	bls.n	9e76 <__aeabi_ddiv+0x296>
    9e74:	e11a      	b.n	a0ac <__aeabi_ddiv+0x4cc>
    9e76:	4599      	cmp	r9, r3
    9e78:	d800      	bhi.n	9e7c <__aeabi_ddiv+0x29c>
    9e7a:	e117      	b.n	a0ac <__aeabi_ddiv+0x4cc>
    9e7c:	3d02      	subs	r5, #2
    9e7e:	4443      	add	r3, r8
    9e80:	464a      	mov	r2, r9
    9e82:	1a9b      	subs	r3, r3, r2
    9e84:	465a      	mov	r2, fp
    9e86:	0412      	lsls	r2, r2, #16
    9e88:	432a      	orrs	r2, r5
    9e8a:	9903      	ldr	r1, [sp, #12]
    9e8c:	4693      	mov	fp, r2
    9e8e:	0c10      	lsrs	r0, r2, #16
    9e90:	0c0a      	lsrs	r2, r1, #16
    9e92:	4691      	mov	r9, r2
    9e94:	0409      	lsls	r1, r1, #16
    9e96:	465a      	mov	r2, fp
    9e98:	0c09      	lsrs	r1, r1, #16
    9e9a:	464e      	mov	r6, r9
    9e9c:	000d      	movs	r5, r1
    9e9e:	0412      	lsls	r2, r2, #16
    9ea0:	0c12      	lsrs	r2, r2, #16
    9ea2:	4345      	muls	r5, r0
    9ea4:	9105      	str	r1, [sp, #20]
    9ea6:	4351      	muls	r1, r2
    9ea8:	4372      	muls	r2, r6
    9eaa:	4370      	muls	r0, r6
    9eac:	1952      	adds	r2, r2, r5
    9eae:	0c0e      	lsrs	r6, r1, #16
    9eb0:	18b2      	adds	r2, r6, r2
    9eb2:	4295      	cmp	r5, r2
    9eb4:	d903      	bls.n	9ebe <__aeabi_ddiv+0x2de>
    9eb6:	2580      	movs	r5, #128	; 0x80
    9eb8:	026d      	lsls	r5, r5, #9
    9eba:	46ac      	mov	ip, r5
    9ebc:	4460      	add	r0, ip
    9ebe:	0c15      	lsrs	r5, r2, #16
    9ec0:	0409      	lsls	r1, r1, #16
    9ec2:	0412      	lsls	r2, r2, #16
    9ec4:	0c09      	lsrs	r1, r1, #16
    9ec6:	1828      	adds	r0, r5, r0
    9ec8:	1852      	adds	r2, r2, r1
    9eca:	4283      	cmp	r3, r0
    9ecc:	d200      	bcs.n	9ed0 <__aeabi_ddiv+0x2f0>
    9ece:	e0ce      	b.n	a06e <__aeabi_ddiv+0x48e>
    9ed0:	d100      	bne.n	9ed4 <__aeabi_ddiv+0x2f4>
    9ed2:	e0c8      	b.n	a066 <__aeabi_ddiv+0x486>
    9ed4:	1a1d      	subs	r5, r3, r0
    9ed6:	4653      	mov	r3, sl
    9ed8:	1a9e      	subs	r6, r3, r2
    9eda:	45b2      	cmp	sl, r6
    9edc:	4192      	sbcs	r2, r2
    9ede:	4252      	negs	r2, r2
    9ee0:	1aab      	subs	r3, r5, r2
    9ee2:	469a      	mov	sl, r3
    9ee4:	4598      	cmp	r8, r3
    9ee6:	d100      	bne.n	9eea <__aeabi_ddiv+0x30a>
    9ee8:	e117      	b.n	a11a <__aeabi_ddiv+0x53a>
    9eea:	0039      	movs	r1, r7
    9eec:	0018      	movs	r0, r3
    9eee:	f7fe fd5f 	bl	89b0 <__udivsi3>
    9ef2:	9b01      	ldr	r3, [sp, #4]
    9ef4:	0005      	movs	r5, r0
    9ef6:	4343      	muls	r3, r0
    9ef8:	0039      	movs	r1, r7
    9efa:	4650      	mov	r0, sl
    9efc:	9304      	str	r3, [sp, #16]
    9efe:	f7fe fddd 	bl	8abc <__aeabi_uidivmod>
    9f02:	9804      	ldr	r0, [sp, #16]
    9f04:	040b      	lsls	r3, r1, #16
    9f06:	0c31      	lsrs	r1, r6, #16
    9f08:	4319      	orrs	r1, r3
    9f0a:	4288      	cmp	r0, r1
    9f0c:	d909      	bls.n	9f22 <__aeabi_ddiv+0x342>
    9f0e:	4441      	add	r1, r8
    9f10:	1e6b      	subs	r3, r5, #1
    9f12:	4588      	cmp	r8, r1
    9f14:	d900      	bls.n	9f18 <__aeabi_ddiv+0x338>
    9f16:	e107      	b.n	a128 <__aeabi_ddiv+0x548>
    9f18:	4288      	cmp	r0, r1
    9f1a:	d800      	bhi.n	9f1e <__aeabi_ddiv+0x33e>
    9f1c:	e104      	b.n	a128 <__aeabi_ddiv+0x548>
    9f1e:	3d02      	subs	r5, #2
    9f20:	4441      	add	r1, r8
    9f22:	9b04      	ldr	r3, [sp, #16]
    9f24:	1acb      	subs	r3, r1, r3
    9f26:	0018      	movs	r0, r3
    9f28:	0039      	movs	r1, r7
    9f2a:	9304      	str	r3, [sp, #16]
    9f2c:	f7fe fd40 	bl	89b0 <__udivsi3>
    9f30:	9b01      	ldr	r3, [sp, #4]
    9f32:	4682      	mov	sl, r0
    9f34:	4343      	muls	r3, r0
    9f36:	0039      	movs	r1, r7
    9f38:	9804      	ldr	r0, [sp, #16]
    9f3a:	9301      	str	r3, [sp, #4]
    9f3c:	f7fe fdbe 	bl	8abc <__aeabi_uidivmod>
    9f40:	9801      	ldr	r0, [sp, #4]
    9f42:	040b      	lsls	r3, r1, #16
    9f44:	0431      	lsls	r1, r6, #16
    9f46:	0c09      	lsrs	r1, r1, #16
    9f48:	4319      	orrs	r1, r3
    9f4a:	4288      	cmp	r0, r1
    9f4c:	d90d      	bls.n	9f6a <__aeabi_ddiv+0x38a>
    9f4e:	4653      	mov	r3, sl
    9f50:	4441      	add	r1, r8
    9f52:	3b01      	subs	r3, #1
    9f54:	4588      	cmp	r8, r1
    9f56:	d900      	bls.n	9f5a <__aeabi_ddiv+0x37a>
    9f58:	e0e8      	b.n	a12c <__aeabi_ddiv+0x54c>
    9f5a:	4288      	cmp	r0, r1
    9f5c:	d800      	bhi.n	9f60 <__aeabi_ddiv+0x380>
    9f5e:	e0e5      	b.n	a12c <__aeabi_ddiv+0x54c>
    9f60:	2302      	movs	r3, #2
    9f62:	425b      	negs	r3, r3
    9f64:	469c      	mov	ip, r3
    9f66:	4441      	add	r1, r8
    9f68:	44e2      	add	sl, ip
    9f6a:	9b01      	ldr	r3, [sp, #4]
    9f6c:	042d      	lsls	r5, r5, #16
    9f6e:	1ace      	subs	r6, r1, r3
    9f70:	4651      	mov	r1, sl
    9f72:	4329      	orrs	r1, r5
    9f74:	9d05      	ldr	r5, [sp, #20]
    9f76:	464f      	mov	r7, r9
    9f78:	002a      	movs	r2, r5
    9f7a:	040b      	lsls	r3, r1, #16
    9f7c:	0c08      	lsrs	r0, r1, #16
    9f7e:	0c1b      	lsrs	r3, r3, #16
    9f80:	435a      	muls	r2, r3
    9f82:	4345      	muls	r5, r0
    9f84:	437b      	muls	r3, r7
    9f86:	4378      	muls	r0, r7
    9f88:	195b      	adds	r3, r3, r5
    9f8a:	0c17      	lsrs	r7, r2, #16
    9f8c:	18fb      	adds	r3, r7, r3
    9f8e:	429d      	cmp	r5, r3
    9f90:	d903      	bls.n	9f9a <__aeabi_ddiv+0x3ba>
    9f92:	2580      	movs	r5, #128	; 0x80
    9f94:	026d      	lsls	r5, r5, #9
    9f96:	46ac      	mov	ip, r5
    9f98:	4460      	add	r0, ip
    9f9a:	0c1d      	lsrs	r5, r3, #16
    9f9c:	0412      	lsls	r2, r2, #16
    9f9e:	041b      	lsls	r3, r3, #16
    9fa0:	0c12      	lsrs	r2, r2, #16
    9fa2:	1828      	adds	r0, r5, r0
    9fa4:	189b      	adds	r3, r3, r2
    9fa6:	4286      	cmp	r6, r0
    9fa8:	d200      	bcs.n	9fac <__aeabi_ddiv+0x3cc>
    9faa:	e093      	b.n	a0d4 <__aeabi_ddiv+0x4f4>
    9fac:	d100      	bne.n	9fb0 <__aeabi_ddiv+0x3d0>
    9fae:	e08e      	b.n	a0ce <__aeabi_ddiv+0x4ee>
    9fb0:	2301      	movs	r3, #1
    9fb2:	4319      	orrs	r1, r3
    9fb4:	4ba0      	ldr	r3, [pc, #640]	; (a238 <__aeabi_ddiv+0x658>)
    9fb6:	18e3      	adds	r3, r4, r3
    9fb8:	2b00      	cmp	r3, #0
    9fba:	dc00      	bgt.n	9fbe <__aeabi_ddiv+0x3de>
    9fbc:	e099      	b.n	a0f2 <__aeabi_ddiv+0x512>
    9fbe:	074a      	lsls	r2, r1, #29
    9fc0:	d000      	beq.n	9fc4 <__aeabi_ddiv+0x3e4>
    9fc2:	e09e      	b.n	a102 <__aeabi_ddiv+0x522>
    9fc4:	465a      	mov	r2, fp
    9fc6:	01d2      	lsls	r2, r2, #7
    9fc8:	d506      	bpl.n	9fd8 <__aeabi_ddiv+0x3f8>
    9fca:	465a      	mov	r2, fp
    9fcc:	4b9b      	ldr	r3, [pc, #620]	; (a23c <__aeabi_ddiv+0x65c>)
    9fce:	401a      	ands	r2, r3
    9fd0:	2380      	movs	r3, #128	; 0x80
    9fd2:	4693      	mov	fp, r2
    9fd4:	00db      	lsls	r3, r3, #3
    9fd6:	18e3      	adds	r3, r4, r3
    9fd8:	4a99      	ldr	r2, [pc, #612]	; (a240 <__aeabi_ddiv+0x660>)
    9fda:	4293      	cmp	r3, r2
    9fdc:	dd68      	ble.n	a0b0 <__aeabi_ddiv+0x4d0>
    9fde:	2301      	movs	r3, #1
    9fe0:	9a02      	ldr	r2, [sp, #8]
    9fe2:	4c98      	ldr	r4, [pc, #608]	; (a244 <__aeabi_ddiv+0x664>)
    9fe4:	401a      	ands	r2, r3
    9fe6:	2300      	movs	r3, #0
    9fe8:	4694      	mov	ip, r2
    9fea:	4698      	mov	r8, r3
    9fec:	2200      	movs	r2, #0
    9fee:	e6c5      	b.n	9d7c <__aeabi_ddiv+0x19c>
    9ff0:	2280      	movs	r2, #128	; 0x80
    9ff2:	464b      	mov	r3, r9
    9ff4:	0312      	lsls	r2, r2, #12
    9ff6:	4213      	tst	r3, r2
    9ff8:	d00a      	beq.n	a010 <__aeabi_ddiv+0x430>
    9ffa:	465b      	mov	r3, fp
    9ffc:	4213      	tst	r3, r2
    9ffe:	d106      	bne.n	a00e <__aeabi_ddiv+0x42e>
    a000:	431a      	orrs	r2, r3
    a002:	0312      	lsls	r2, r2, #12
    a004:	0b12      	lsrs	r2, r2, #12
    a006:	46ac      	mov	ip, r5
    a008:	4688      	mov	r8, r1
    a00a:	4c8e      	ldr	r4, [pc, #568]	; (a244 <__aeabi_ddiv+0x664>)
    a00c:	e6b6      	b.n	9d7c <__aeabi_ddiv+0x19c>
    a00e:	464b      	mov	r3, r9
    a010:	431a      	orrs	r2, r3
    a012:	0312      	lsls	r2, r2, #12
    a014:	0b12      	lsrs	r2, r2, #12
    a016:	46bc      	mov	ip, r7
    a018:	4c8a      	ldr	r4, [pc, #552]	; (a244 <__aeabi_ddiv+0x664>)
    a01a:	e6af      	b.n	9d7c <__aeabi_ddiv+0x19c>
    a01c:	0003      	movs	r3, r0
    a01e:	465a      	mov	r2, fp
    a020:	3b28      	subs	r3, #40	; 0x28
    a022:	409a      	lsls	r2, r3
    a024:	2300      	movs	r3, #0
    a026:	4691      	mov	r9, r2
    a028:	4698      	mov	r8, r3
    a02a:	e657      	b.n	9cdc <__aeabi_ddiv+0xfc>
    a02c:	4658      	mov	r0, fp
    a02e:	f001 f92b 	bl	b288 <__clzsi2>
    a032:	3020      	adds	r0, #32
    a034:	e640      	b.n	9cb8 <__aeabi_ddiv+0xd8>
    a036:	0003      	movs	r3, r0
    a038:	4652      	mov	r2, sl
    a03a:	3b28      	subs	r3, #40	; 0x28
    a03c:	409a      	lsls	r2, r3
    a03e:	2100      	movs	r1, #0
    a040:	4693      	mov	fp, r2
    a042:	e677      	b.n	9d34 <__aeabi_ddiv+0x154>
    a044:	f001 f920 	bl	b288 <__clzsi2>
    a048:	3020      	adds	r0, #32
    a04a:	e65f      	b.n	9d0c <__aeabi_ddiv+0x12c>
    a04c:	4588      	cmp	r8, r1
    a04e:	d200      	bcs.n	a052 <__aeabi_ddiv+0x472>
    a050:	e6c7      	b.n	9de2 <__aeabi_ddiv+0x202>
    a052:	464b      	mov	r3, r9
    a054:	07de      	lsls	r6, r3, #31
    a056:	085d      	lsrs	r5, r3, #1
    a058:	4643      	mov	r3, r8
    a05a:	085b      	lsrs	r3, r3, #1
    a05c:	431e      	orrs	r6, r3
    a05e:	4643      	mov	r3, r8
    a060:	07db      	lsls	r3, r3, #31
    a062:	469a      	mov	sl, r3
    a064:	e6c2      	b.n	9dec <__aeabi_ddiv+0x20c>
    a066:	2500      	movs	r5, #0
    a068:	4592      	cmp	sl, r2
    a06a:	d300      	bcc.n	a06e <__aeabi_ddiv+0x48e>
    a06c:	e733      	b.n	9ed6 <__aeabi_ddiv+0x2f6>
    a06e:	9e03      	ldr	r6, [sp, #12]
    a070:	4659      	mov	r1, fp
    a072:	46b4      	mov	ip, r6
    a074:	44e2      	add	sl, ip
    a076:	45b2      	cmp	sl, r6
    a078:	41ad      	sbcs	r5, r5
    a07a:	426d      	negs	r5, r5
    a07c:	4445      	add	r5, r8
    a07e:	18eb      	adds	r3, r5, r3
    a080:	3901      	subs	r1, #1
    a082:	4598      	cmp	r8, r3
    a084:	d207      	bcs.n	a096 <__aeabi_ddiv+0x4b6>
    a086:	4298      	cmp	r0, r3
    a088:	d900      	bls.n	a08c <__aeabi_ddiv+0x4ac>
    a08a:	e07f      	b.n	a18c <__aeabi_ddiv+0x5ac>
    a08c:	d100      	bne.n	a090 <__aeabi_ddiv+0x4b0>
    a08e:	e0bc      	b.n	a20a <__aeabi_ddiv+0x62a>
    a090:	1a1d      	subs	r5, r3, r0
    a092:	468b      	mov	fp, r1
    a094:	e71f      	b.n	9ed6 <__aeabi_ddiv+0x2f6>
    a096:	4598      	cmp	r8, r3
    a098:	d1fa      	bne.n	a090 <__aeabi_ddiv+0x4b0>
    a09a:	9d03      	ldr	r5, [sp, #12]
    a09c:	4555      	cmp	r5, sl
    a09e:	d9f2      	bls.n	a086 <__aeabi_ddiv+0x4a6>
    a0a0:	4643      	mov	r3, r8
    a0a2:	468b      	mov	fp, r1
    a0a4:	1a1d      	subs	r5, r3, r0
    a0a6:	e716      	b.n	9ed6 <__aeabi_ddiv+0x2f6>
    a0a8:	469b      	mov	fp, r3
    a0aa:	e6ca      	b.n	9e42 <__aeabi_ddiv+0x262>
    a0ac:	0015      	movs	r5, r2
    a0ae:	e6e7      	b.n	9e80 <__aeabi_ddiv+0x2a0>
    a0b0:	465a      	mov	r2, fp
    a0b2:	08c9      	lsrs	r1, r1, #3
    a0b4:	0752      	lsls	r2, r2, #29
    a0b6:	430a      	orrs	r2, r1
    a0b8:	055b      	lsls	r3, r3, #21
    a0ba:	4690      	mov	r8, r2
    a0bc:	0d5c      	lsrs	r4, r3, #21
    a0be:	465a      	mov	r2, fp
    a0c0:	2301      	movs	r3, #1
    a0c2:	9902      	ldr	r1, [sp, #8]
    a0c4:	0252      	lsls	r2, r2, #9
    a0c6:	4019      	ands	r1, r3
    a0c8:	0b12      	lsrs	r2, r2, #12
    a0ca:	468c      	mov	ip, r1
    a0cc:	e656      	b.n	9d7c <__aeabi_ddiv+0x19c>
    a0ce:	2b00      	cmp	r3, #0
    a0d0:	d100      	bne.n	a0d4 <__aeabi_ddiv+0x4f4>
    a0d2:	e76f      	b.n	9fb4 <__aeabi_ddiv+0x3d4>
    a0d4:	4446      	add	r6, r8
    a0d6:	1e4a      	subs	r2, r1, #1
    a0d8:	45b0      	cmp	r8, r6
    a0da:	d929      	bls.n	a130 <__aeabi_ddiv+0x550>
    a0dc:	0011      	movs	r1, r2
    a0de:	4286      	cmp	r6, r0
    a0e0:	d000      	beq.n	a0e4 <__aeabi_ddiv+0x504>
    a0e2:	e765      	b.n	9fb0 <__aeabi_ddiv+0x3d0>
    a0e4:	9a03      	ldr	r2, [sp, #12]
    a0e6:	4293      	cmp	r3, r2
    a0e8:	d000      	beq.n	a0ec <__aeabi_ddiv+0x50c>
    a0ea:	e761      	b.n	9fb0 <__aeabi_ddiv+0x3d0>
    a0ec:	e762      	b.n	9fb4 <__aeabi_ddiv+0x3d4>
    a0ee:	2101      	movs	r1, #1
    a0f0:	4249      	negs	r1, r1
    a0f2:	2001      	movs	r0, #1
    a0f4:	1ac2      	subs	r2, r0, r3
    a0f6:	2a38      	cmp	r2, #56	; 0x38
    a0f8:	dd21      	ble.n	a13e <__aeabi_ddiv+0x55e>
    a0fa:	9b02      	ldr	r3, [sp, #8]
    a0fc:	4003      	ands	r3, r0
    a0fe:	469c      	mov	ip, r3
    a100:	e638      	b.n	9d74 <__aeabi_ddiv+0x194>
    a102:	220f      	movs	r2, #15
    a104:	400a      	ands	r2, r1
    a106:	2a04      	cmp	r2, #4
    a108:	d100      	bne.n	a10c <__aeabi_ddiv+0x52c>
    a10a:	e75b      	b.n	9fc4 <__aeabi_ddiv+0x3e4>
    a10c:	000a      	movs	r2, r1
    a10e:	1d11      	adds	r1, r2, #4
    a110:	4291      	cmp	r1, r2
    a112:	4192      	sbcs	r2, r2
    a114:	4252      	negs	r2, r2
    a116:	4493      	add	fp, r2
    a118:	e754      	b.n	9fc4 <__aeabi_ddiv+0x3e4>
    a11a:	4b47      	ldr	r3, [pc, #284]	; (a238 <__aeabi_ddiv+0x658>)
    a11c:	18e3      	adds	r3, r4, r3
    a11e:	2b00      	cmp	r3, #0
    a120:	dde5      	ble.n	a0ee <__aeabi_ddiv+0x50e>
    a122:	2201      	movs	r2, #1
    a124:	4252      	negs	r2, r2
    a126:	e7f2      	b.n	a10e <__aeabi_ddiv+0x52e>
    a128:	001d      	movs	r5, r3
    a12a:	e6fa      	b.n	9f22 <__aeabi_ddiv+0x342>
    a12c:	469a      	mov	sl, r3
    a12e:	e71c      	b.n	9f6a <__aeabi_ddiv+0x38a>
    a130:	42b0      	cmp	r0, r6
    a132:	d839      	bhi.n	a1a8 <__aeabi_ddiv+0x5c8>
    a134:	d06e      	beq.n	a214 <__aeabi_ddiv+0x634>
    a136:	0011      	movs	r1, r2
    a138:	e73a      	b.n	9fb0 <__aeabi_ddiv+0x3d0>
    a13a:	9302      	str	r3, [sp, #8]
    a13c:	e73a      	b.n	9fb4 <__aeabi_ddiv+0x3d4>
    a13e:	2a1f      	cmp	r2, #31
    a140:	dc3c      	bgt.n	a1bc <__aeabi_ddiv+0x5dc>
    a142:	2320      	movs	r3, #32
    a144:	1a9b      	subs	r3, r3, r2
    a146:	000c      	movs	r4, r1
    a148:	4658      	mov	r0, fp
    a14a:	4099      	lsls	r1, r3
    a14c:	4098      	lsls	r0, r3
    a14e:	1e4b      	subs	r3, r1, #1
    a150:	4199      	sbcs	r1, r3
    a152:	465b      	mov	r3, fp
    a154:	40d4      	lsrs	r4, r2
    a156:	40d3      	lsrs	r3, r2
    a158:	4320      	orrs	r0, r4
    a15a:	4308      	orrs	r0, r1
    a15c:	001a      	movs	r2, r3
    a15e:	0743      	lsls	r3, r0, #29
    a160:	d009      	beq.n	a176 <__aeabi_ddiv+0x596>
    a162:	230f      	movs	r3, #15
    a164:	4003      	ands	r3, r0
    a166:	2b04      	cmp	r3, #4
    a168:	d005      	beq.n	a176 <__aeabi_ddiv+0x596>
    a16a:	0001      	movs	r1, r0
    a16c:	1d08      	adds	r0, r1, #4
    a16e:	4288      	cmp	r0, r1
    a170:	419b      	sbcs	r3, r3
    a172:	425b      	negs	r3, r3
    a174:	18d2      	adds	r2, r2, r3
    a176:	0213      	lsls	r3, r2, #8
    a178:	d53a      	bpl.n	a1f0 <__aeabi_ddiv+0x610>
    a17a:	2301      	movs	r3, #1
    a17c:	9a02      	ldr	r2, [sp, #8]
    a17e:	2401      	movs	r4, #1
    a180:	401a      	ands	r2, r3
    a182:	2300      	movs	r3, #0
    a184:	4694      	mov	ip, r2
    a186:	4698      	mov	r8, r3
    a188:	2200      	movs	r2, #0
    a18a:	e5f7      	b.n	9d7c <__aeabi_ddiv+0x19c>
    a18c:	2102      	movs	r1, #2
    a18e:	4249      	negs	r1, r1
    a190:	468c      	mov	ip, r1
    a192:	9d03      	ldr	r5, [sp, #12]
    a194:	44e3      	add	fp, ip
    a196:	46ac      	mov	ip, r5
    a198:	44e2      	add	sl, ip
    a19a:	45aa      	cmp	sl, r5
    a19c:	41ad      	sbcs	r5, r5
    a19e:	426d      	negs	r5, r5
    a1a0:	4445      	add	r5, r8
    a1a2:	18ed      	adds	r5, r5, r3
    a1a4:	1a2d      	subs	r5, r5, r0
    a1a6:	e696      	b.n	9ed6 <__aeabi_ddiv+0x2f6>
    a1a8:	1e8a      	subs	r2, r1, #2
    a1aa:	9903      	ldr	r1, [sp, #12]
    a1ac:	004d      	lsls	r5, r1, #1
    a1ae:	428d      	cmp	r5, r1
    a1b0:	4189      	sbcs	r1, r1
    a1b2:	4249      	negs	r1, r1
    a1b4:	4441      	add	r1, r8
    a1b6:	1876      	adds	r6, r6, r1
    a1b8:	9503      	str	r5, [sp, #12]
    a1ba:	e78f      	b.n	a0dc <__aeabi_ddiv+0x4fc>
    a1bc:	201f      	movs	r0, #31
    a1be:	4240      	negs	r0, r0
    a1c0:	1ac3      	subs	r3, r0, r3
    a1c2:	4658      	mov	r0, fp
    a1c4:	40d8      	lsrs	r0, r3
    a1c6:	0003      	movs	r3, r0
    a1c8:	2a20      	cmp	r2, #32
    a1ca:	d028      	beq.n	a21e <__aeabi_ddiv+0x63e>
    a1cc:	2040      	movs	r0, #64	; 0x40
    a1ce:	465d      	mov	r5, fp
    a1d0:	1a82      	subs	r2, r0, r2
    a1d2:	4095      	lsls	r5, r2
    a1d4:	4329      	orrs	r1, r5
    a1d6:	1e4a      	subs	r2, r1, #1
    a1d8:	4191      	sbcs	r1, r2
    a1da:	4319      	orrs	r1, r3
    a1dc:	2307      	movs	r3, #7
    a1de:	2200      	movs	r2, #0
    a1e0:	400b      	ands	r3, r1
    a1e2:	d009      	beq.n	a1f8 <__aeabi_ddiv+0x618>
    a1e4:	230f      	movs	r3, #15
    a1e6:	2200      	movs	r2, #0
    a1e8:	400b      	ands	r3, r1
    a1ea:	0008      	movs	r0, r1
    a1ec:	2b04      	cmp	r3, #4
    a1ee:	d1bd      	bne.n	a16c <__aeabi_ddiv+0x58c>
    a1f0:	0001      	movs	r1, r0
    a1f2:	0753      	lsls	r3, r2, #29
    a1f4:	0252      	lsls	r2, r2, #9
    a1f6:	0b12      	lsrs	r2, r2, #12
    a1f8:	08c9      	lsrs	r1, r1, #3
    a1fa:	4319      	orrs	r1, r3
    a1fc:	2301      	movs	r3, #1
    a1fe:	4688      	mov	r8, r1
    a200:	9902      	ldr	r1, [sp, #8]
    a202:	2400      	movs	r4, #0
    a204:	4019      	ands	r1, r3
    a206:	468c      	mov	ip, r1
    a208:	e5b8      	b.n	9d7c <__aeabi_ddiv+0x19c>
    a20a:	4552      	cmp	r2, sl
    a20c:	d8be      	bhi.n	a18c <__aeabi_ddiv+0x5ac>
    a20e:	468b      	mov	fp, r1
    a210:	2500      	movs	r5, #0
    a212:	e660      	b.n	9ed6 <__aeabi_ddiv+0x2f6>
    a214:	9d03      	ldr	r5, [sp, #12]
    a216:	429d      	cmp	r5, r3
    a218:	d3c6      	bcc.n	a1a8 <__aeabi_ddiv+0x5c8>
    a21a:	0011      	movs	r1, r2
    a21c:	e762      	b.n	a0e4 <__aeabi_ddiv+0x504>
    a21e:	2500      	movs	r5, #0
    a220:	e7d8      	b.n	a1d4 <__aeabi_ddiv+0x5f4>
    a222:	2280      	movs	r2, #128	; 0x80
    a224:	465b      	mov	r3, fp
    a226:	0312      	lsls	r2, r2, #12
    a228:	431a      	orrs	r2, r3
    a22a:	9b01      	ldr	r3, [sp, #4]
    a22c:	0312      	lsls	r2, r2, #12
    a22e:	0b12      	lsrs	r2, r2, #12
    a230:	469c      	mov	ip, r3
    a232:	4688      	mov	r8, r1
    a234:	4c03      	ldr	r4, [pc, #12]	; (a244 <__aeabi_ddiv+0x664>)
    a236:	e5a1      	b.n	9d7c <__aeabi_ddiv+0x19c>
    a238:	000003ff 	.word	0x000003ff
    a23c:	feffffff 	.word	0xfeffffff
    a240:	000007fe 	.word	0x000007fe
    a244:	000007ff 	.word	0x000007ff

0000a248 <__eqdf2>:
    a248:	b5f0      	push	{r4, r5, r6, r7, lr}
    a24a:	464f      	mov	r7, r9
    a24c:	4646      	mov	r6, r8
    a24e:	46d6      	mov	lr, sl
    a250:	005c      	lsls	r4, r3, #1
    a252:	b5c0      	push	{r6, r7, lr}
    a254:	031f      	lsls	r7, r3, #12
    a256:	0fdb      	lsrs	r3, r3, #31
    a258:	469a      	mov	sl, r3
    a25a:	4b17      	ldr	r3, [pc, #92]	; (a2b8 <__eqdf2+0x70>)
    a25c:	030e      	lsls	r6, r1, #12
    a25e:	004d      	lsls	r5, r1, #1
    a260:	4684      	mov	ip, r0
    a262:	4680      	mov	r8, r0
    a264:	0b36      	lsrs	r6, r6, #12
    a266:	0d6d      	lsrs	r5, r5, #21
    a268:	0fc9      	lsrs	r1, r1, #31
    a26a:	4691      	mov	r9, r2
    a26c:	0b3f      	lsrs	r7, r7, #12
    a26e:	0d64      	lsrs	r4, r4, #21
    a270:	2001      	movs	r0, #1
    a272:	429d      	cmp	r5, r3
    a274:	d008      	beq.n	a288 <__eqdf2+0x40>
    a276:	429c      	cmp	r4, r3
    a278:	d001      	beq.n	a27e <__eqdf2+0x36>
    a27a:	42a5      	cmp	r5, r4
    a27c:	d00b      	beq.n	a296 <__eqdf2+0x4e>
    a27e:	bc1c      	pop	{r2, r3, r4}
    a280:	4690      	mov	r8, r2
    a282:	4699      	mov	r9, r3
    a284:	46a2      	mov	sl, r4
    a286:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a288:	4663      	mov	r3, ip
    a28a:	4333      	orrs	r3, r6
    a28c:	d1f7      	bne.n	a27e <__eqdf2+0x36>
    a28e:	42ac      	cmp	r4, r5
    a290:	d1f5      	bne.n	a27e <__eqdf2+0x36>
    a292:	433a      	orrs	r2, r7
    a294:	d1f3      	bne.n	a27e <__eqdf2+0x36>
    a296:	2001      	movs	r0, #1
    a298:	42be      	cmp	r6, r7
    a29a:	d1f0      	bne.n	a27e <__eqdf2+0x36>
    a29c:	45c8      	cmp	r8, r9
    a29e:	d1ee      	bne.n	a27e <__eqdf2+0x36>
    a2a0:	4551      	cmp	r1, sl
    a2a2:	d007      	beq.n	a2b4 <__eqdf2+0x6c>
    a2a4:	2d00      	cmp	r5, #0
    a2a6:	d1ea      	bne.n	a27e <__eqdf2+0x36>
    a2a8:	4663      	mov	r3, ip
    a2aa:	431e      	orrs	r6, r3
    a2ac:	0030      	movs	r0, r6
    a2ae:	1e46      	subs	r6, r0, #1
    a2b0:	41b0      	sbcs	r0, r6
    a2b2:	e7e4      	b.n	a27e <__eqdf2+0x36>
    a2b4:	2000      	movs	r0, #0
    a2b6:	e7e2      	b.n	a27e <__eqdf2+0x36>
    a2b8:	000007ff 	.word	0x000007ff

0000a2bc <__gedf2>:
    a2bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a2be:	4645      	mov	r5, r8
    a2c0:	46de      	mov	lr, fp
    a2c2:	4657      	mov	r7, sl
    a2c4:	464e      	mov	r6, r9
    a2c6:	b5e0      	push	{r5, r6, r7, lr}
    a2c8:	031f      	lsls	r7, r3, #12
    a2ca:	0b3d      	lsrs	r5, r7, #12
    a2cc:	4f2c      	ldr	r7, [pc, #176]	; (a380 <__gedf2+0xc4>)
    a2ce:	030e      	lsls	r6, r1, #12
    a2d0:	004c      	lsls	r4, r1, #1
    a2d2:	46ab      	mov	fp, r5
    a2d4:	005d      	lsls	r5, r3, #1
    a2d6:	4684      	mov	ip, r0
    a2d8:	0b36      	lsrs	r6, r6, #12
    a2da:	0d64      	lsrs	r4, r4, #21
    a2dc:	0fc9      	lsrs	r1, r1, #31
    a2de:	4690      	mov	r8, r2
    a2e0:	0d6d      	lsrs	r5, r5, #21
    a2e2:	0fdb      	lsrs	r3, r3, #31
    a2e4:	42bc      	cmp	r4, r7
    a2e6:	d02a      	beq.n	a33e <__gedf2+0x82>
    a2e8:	4f25      	ldr	r7, [pc, #148]	; (a380 <__gedf2+0xc4>)
    a2ea:	42bd      	cmp	r5, r7
    a2ec:	d02d      	beq.n	a34a <__gedf2+0x8e>
    a2ee:	2c00      	cmp	r4, #0
    a2f0:	d10f      	bne.n	a312 <__gedf2+0x56>
    a2f2:	4330      	orrs	r0, r6
    a2f4:	0007      	movs	r7, r0
    a2f6:	4681      	mov	r9, r0
    a2f8:	4278      	negs	r0, r7
    a2fa:	4178      	adcs	r0, r7
    a2fc:	b2c0      	uxtb	r0, r0
    a2fe:	2d00      	cmp	r5, #0
    a300:	d117      	bne.n	a332 <__gedf2+0x76>
    a302:	465f      	mov	r7, fp
    a304:	433a      	orrs	r2, r7
    a306:	d114      	bne.n	a332 <__gedf2+0x76>
    a308:	464b      	mov	r3, r9
    a30a:	2000      	movs	r0, #0
    a30c:	2b00      	cmp	r3, #0
    a30e:	d00a      	beq.n	a326 <__gedf2+0x6a>
    a310:	e006      	b.n	a320 <__gedf2+0x64>
    a312:	2d00      	cmp	r5, #0
    a314:	d102      	bne.n	a31c <__gedf2+0x60>
    a316:	4658      	mov	r0, fp
    a318:	4302      	orrs	r2, r0
    a31a:	d001      	beq.n	a320 <__gedf2+0x64>
    a31c:	4299      	cmp	r1, r3
    a31e:	d018      	beq.n	a352 <__gedf2+0x96>
    a320:	4248      	negs	r0, r1
    a322:	2101      	movs	r1, #1
    a324:	4308      	orrs	r0, r1
    a326:	bc3c      	pop	{r2, r3, r4, r5}
    a328:	4690      	mov	r8, r2
    a32a:	4699      	mov	r9, r3
    a32c:	46a2      	mov	sl, r4
    a32e:	46ab      	mov	fp, r5
    a330:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a332:	2800      	cmp	r0, #0
    a334:	d0f2      	beq.n	a31c <__gedf2+0x60>
    a336:	2001      	movs	r0, #1
    a338:	3b01      	subs	r3, #1
    a33a:	4318      	orrs	r0, r3
    a33c:	e7f3      	b.n	a326 <__gedf2+0x6a>
    a33e:	0037      	movs	r7, r6
    a340:	4307      	orrs	r7, r0
    a342:	d0d1      	beq.n	a2e8 <__gedf2+0x2c>
    a344:	2002      	movs	r0, #2
    a346:	4240      	negs	r0, r0
    a348:	e7ed      	b.n	a326 <__gedf2+0x6a>
    a34a:	465f      	mov	r7, fp
    a34c:	4317      	orrs	r7, r2
    a34e:	d0ce      	beq.n	a2ee <__gedf2+0x32>
    a350:	e7f8      	b.n	a344 <__gedf2+0x88>
    a352:	42ac      	cmp	r4, r5
    a354:	dce4      	bgt.n	a320 <__gedf2+0x64>
    a356:	da03      	bge.n	a360 <__gedf2+0xa4>
    a358:	1e48      	subs	r0, r1, #1
    a35a:	2101      	movs	r1, #1
    a35c:	4308      	orrs	r0, r1
    a35e:	e7e2      	b.n	a326 <__gedf2+0x6a>
    a360:	455e      	cmp	r6, fp
    a362:	d8dd      	bhi.n	a320 <__gedf2+0x64>
    a364:	d006      	beq.n	a374 <__gedf2+0xb8>
    a366:	2000      	movs	r0, #0
    a368:	455e      	cmp	r6, fp
    a36a:	d2dc      	bcs.n	a326 <__gedf2+0x6a>
    a36c:	2301      	movs	r3, #1
    a36e:	1e48      	subs	r0, r1, #1
    a370:	4318      	orrs	r0, r3
    a372:	e7d8      	b.n	a326 <__gedf2+0x6a>
    a374:	45c4      	cmp	ip, r8
    a376:	d8d3      	bhi.n	a320 <__gedf2+0x64>
    a378:	2000      	movs	r0, #0
    a37a:	45c4      	cmp	ip, r8
    a37c:	d3f6      	bcc.n	a36c <__gedf2+0xb0>
    a37e:	e7d2      	b.n	a326 <__gedf2+0x6a>
    a380:	000007ff 	.word	0x000007ff

0000a384 <__ledf2>:
    a384:	b5f0      	push	{r4, r5, r6, r7, lr}
    a386:	464e      	mov	r6, r9
    a388:	4645      	mov	r5, r8
    a38a:	46de      	mov	lr, fp
    a38c:	4657      	mov	r7, sl
    a38e:	005c      	lsls	r4, r3, #1
    a390:	b5e0      	push	{r5, r6, r7, lr}
    a392:	031f      	lsls	r7, r3, #12
    a394:	0fdb      	lsrs	r3, r3, #31
    a396:	4699      	mov	r9, r3
    a398:	4b2a      	ldr	r3, [pc, #168]	; (a444 <__ledf2+0xc0>)
    a39a:	030e      	lsls	r6, r1, #12
    a39c:	004d      	lsls	r5, r1, #1
    a39e:	0fc9      	lsrs	r1, r1, #31
    a3a0:	4684      	mov	ip, r0
    a3a2:	0b36      	lsrs	r6, r6, #12
    a3a4:	0d6d      	lsrs	r5, r5, #21
    a3a6:	468b      	mov	fp, r1
    a3a8:	4690      	mov	r8, r2
    a3aa:	0b3f      	lsrs	r7, r7, #12
    a3ac:	0d64      	lsrs	r4, r4, #21
    a3ae:	429d      	cmp	r5, r3
    a3b0:	d020      	beq.n	a3f4 <__ledf2+0x70>
    a3b2:	4b24      	ldr	r3, [pc, #144]	; (a444 <__ledf2+0xc0>)
    a3b4:	429c      	cmp	r4, r3
    a3b6:	d022      	beq.n	a3fe <__ledf2+0x7a>
    a3b8:	2d00      	cmp	r5, #0
    a3ba:	d112      	bne.n	a3e2 <__ledf2+0x5e>
    a3bc:	4330      	orrs	r0, r6
    a3be:	4243      	negs	r3, r0
    a3c0:	4143      	adcs	r3, r0
    a3c2:	b2db      	uxtb	r3, r3
    a3c4:	2c00      	cmp	r4, #0
    a3c6:	d01f      	beq.n	a408 <__ledf2+0x84>
    a3c8:	2b00      	cmp	r3, #0
    a3ca:	d00c      	beq.n	a3e6 <__ledf2+0x62>
    a3cc:	464b      	mov	r3, r9
    a3ce:	2001      	movs	r0, #1
    a3d0:	3b01      	subs	r3, #1
    a3d2:	4303      	orrs	r3, r0
    a3d4:	0018      	movs	r0, r3
    a3d6:	bc3c      	pop	{r2, r3, r4, r5}
    a3d8:	4690      	mov	r8, r2
    a3da:	4699      	mov	r9, r3
    a3dc:	46a2      	mov	sl, r4
    a3de:	46ab      	mov	fp, r5
    a3e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a3e2:	2c00      	cmp	r4, #0
    a3e4:	d016      	beq.n	a414 <__ledf2+0x90>
    a3e6:	45cb      	cmp	fp, r9
    a3e8:	d017      	beq.n	a41a <__ledf2+0x96>
    a3ea:	465b      	mov	r3, fp
    a3ec:	4259      	negs	r1, r3
    a3ee:	2301      	movs	r3, #1
    a3f0:	430b      	orrs	r3, r1
    a3f2:	e7ef      	b.n	a3d4 <__ledf2+0x50>
    a3f4:	0031      	movs	r1, r6
    a3f6:	2302      	movs	r3, #2
    a3f8:	4301      	orrs	r1, r0
    a3fa:	d1eb      	bne.n	a3d4 <__ledf2+0x50>
    a3fc:	e7d9      	b.n	a3b2 <__ledf2+0x2e>
    a3fe:	0039      	movs	r1, r7
    a400:	2302      	movs	r3, #2
    a402:	4311      	orrs	r1, r2
    a404:	d1e6      	bne.n	a3d4 <__ledf2+0x50>
    a406:	e7d7      	b.n	a3b8 <__ledf2+0x34>
    a408:	433a      	orrs	r2, r7
    a40a:	d1dd      	bne.n	a3c8 <__ledf2+0x44>
    a40c:	2300      	movs	r3, #0
    a40e:	2800      	cmp	r0, #0
    a410:	d0e0      	beq.n	a3d4 <__ledf2+0x50>
    a412:	e7ea      	b.n	a3ea <__ledf2+0x66>
    a414:	433a      	orrs	r2, r7
    a416:	d1e6      	bne.n	a3e6 <__ledf2+0x62>
    a418:	e7e7      	b.n	a3ea <__ledf2+0x66>
    a41a:	42a5      	cmp	r5, r4
    a41c:	dce5      	bgt.n	a3ea <__ledf2+0x66>
    a41e:	db05      	blt.n	a42c <__ledf2+0xa8>
    a420:	42be      	cmp	r6, r7
    a422:	d8e2      	bhi.n	a3ea <__ledf2+0x66>
    a424:	d007      	beq.n	a436 <__ledf2+0xb2>
    a426:	2300      	movs	r3, #0
    a428:	42be      	cmp	r6, r7
    a42a:	d2d3      	bcs.n	a3d4 <__ledf2+0x50>
    a42c:	4659      	mov	r1, fp
    a42e:	2301      	movs	r3, #1
    a430:	3901      	subs	r1, #1
    a432:	430b      	orrs	r3, r1
    a434:	e7ce      	b.n	a3d4 <__ledf2+0x50>
    a436:	45c4      	cmp	ip, r8
    a438:	d8d7      	bhi.n	a3ea <__ledf2+0x66>
    a43a:	2300      	movs	r3, #0
    a43c:	45c4      	cmp	ip, r8
    a43e:	d3f5      	bcc.n	a42c <__ledf2+0xa8>
    a440:	e7c8      	b.n	a3d4 <__ledf2+0x50>
    a442:	46c0      	nop			; (mov r8, r8)
    a444:	000007ff 	.word	0x000007ff

0000a448 <__aeabi_dmul>:
    a448:	b5f0      	push	{r4, r5, r6, r7, lr}
    a44a:	4657      	mov	r7, sl
    a44c:	4645      	mov	r5, r8
    a44e:	46de      	mov	lr, fp
    a450:	464e      	mov	r6, r9
    a452:	b5e0      	push	{r5, r6, r7, lr}
    a454:	030c      	lsls	r4, r1, #12
    a456:	4698      	mov	r8, r3
    a458:	004e      	lsls	r6, r1, #1
    a45a:	0b23      	lsrs	r3, r4, #12
    a45c:	b087      	sub	sp, #28
    a45e:	0007      	movs	r7, r0
    a460:	4692      	mov	sl, r2
    a462:	469b      	mov	fp, r3
    a464:	0d76      	lsrs	r6, r6, #21
    a466:	0fcd      	lsrs	r5, r1, #31
    a468:	2e00      	cmp	r6, #0
    a46a:	d06b      	beq.n	a544 <__aeabi_dmul+0xfc>
    a46c:	4b6d      	ldr	r3, [pc, #436]	; (a624 <__aeabi_dmul+0x1dc>)
    a46e:	429e      	cmp	r6, r3
    a470:	d035      	beq.n	a4de <__aeabi_dmul+0x96>
    a472:	2480      	movs	r4, #128	; 0x80
    a474:	465b      	mov	r3, fp
    a476:	0f42      	lsrs	r2, r0, #29
    a478:	0424      	lsls	r4, r4, #16
    a47a:	00db      	lsls	r3, r3, #3
    a47c:	4314      	orrs	r4, r2
    a47e:	431c      	orrs	r4, r3
    a480:	00c3      	lsls	r3, r0, #3
    a482:	4699      	mov	r9, r3
    a484:	4b68      	ldr	r3, [pc, #416]	; (a628 <__aeabi_dmul+0x1e0>)
    a486:	46a3      	mov	fp, r4
    a488:	469c      	mov	ip, r3
    a48a:	2300      	movs	r3, #0
    a48c:	2700      	movs	r7, #0
    a48e:	4466      	add	r6, ip
    a490:	9302      	str	r3, [sp, #8]
    a492:	4643      	mov	r3, r8
    a494:	031c      	lsls	r4, r3, #12
    a496:	005a      	lsls	r2, r3, #1
    a498:	0fdb      	lsrs	r3, r3, #31
    a49a:	4650      	mov	r0, sl
    a49c:	0b24      	lsrs	r4, r4, #12
    a49e:	0d52      	lsrs	r2, r2, #21
    a4a0:	4698      	mov	r8, r3
    a4a2:	d100      	bne.n	a4a6 <__aeabi_dmul+0x5e>
    a4a4:	e076      	b.n	a594 <__aeabi_dmul+0x14c>
    a4a6:	4b5f      	ldr	r3, [pc, #380]	; (a624 <__aeabi_dmul+0x1dc>)
    a4a8:	429a      	cmp	r2, r3
    a4aa:	d06d      	beq.n	a588 <__aeabi_dmul+0x140>
    a4ac:	2380      	movs	r3, #128	; 0x80
    a4ae:	0f41      	lsrs	r1, r0, #29
    a4b0:	041b      	lsls	r3, r3, #16
    a4b2:	430b      	orrs	r3, r1
    a4b4:	495c      	ldr	r1, [pc, #368]	; (a628 <__aeabi_dmul+0x1e0>)
    a4b6:	00e4      	lsls	r4, r4, #3
    a4b8:	468c      	mov	ip, r1
    a4ba:	431c      	orrs	r4, r3
    a4bc:	00c3      	lsls	r3, r0, #3
    a4be:	2000      	movs	r0, #0
    a4c0:	4462      	add	r2, ip
    a4c2:	4641      	mov	r1, r8
    a4c4:	18b6      	adds	r6, r6, r2
    a4c6:	4069      	eors	r1, r5
    a4c8:	1c72      	adds	r2, r6, #1
    a4ca:	9101      	str	r1, [sp, #4]
    a4cc:	4694      	mov	ip, r2
    a4ce:	4307      	orrs	r7, r0
    a4d0:	2f0f      	cmp	r7, #15
    a4d2:	d900      	bls.n	a4d6 <__aeabi_dmul+0x8e>
    a4d4:	e0b0      	b.n	a638 <__aeabi_dmul+0x1f0>
    a4d6:	4a55      	ldr	r2, [pc, #340]	; (a62c <__aeabi_dmul+0x1e4>)
    a4d8:	00bf      	lsls	r7, r7, #2
    a4da:	59d2      	ldr	r2, [r2, r7]
    a4dc:	4697      	mov	pc, r2
    a4de:	465b      	mov	r3, fp
    a4e0:	4303      	orrs	r3, r0
    a4e2:	4699      	mov	r9, r3
    a4e4:	d000      	beq.n	a4e8 <__aeabi_dmul+0xa0>
    a4e6:	e087      	b.n	a5f8 <__aeabi_dmul+0x1b0>
    a4e8:	2300      	movs	r3, #0
    a4ea:	469b      	mov	fp, r3
    a4ec:	3302      	adds	r3, #2
    a4ee:	2708      	movs	r7, #8
    a4f0:	9302      	str	r3, [sp, #8]
    a4f2:	e7ce      	b.n	a492 <__aeabi_dmul+0x4a>
    a4f4:	4642      	mov	r2, r8
    a4f6:	9201      	str	r2, [sp, #4]
    a4f8:	2802      	cmp	r0, #2
    a4fa:	d067      	beq.n	a5cc <__aeabi_dmul+0x184>
    a4fc:	2803      	cmp	r0, #3
    a4fe:	d100      	bne.n	a502 <__aeabi_dmul+0xba>
    a500:	e20e      	b.n	a920 <__aeabi_dmul+0x4d8>
    a502:	2801      	cmp	r0, #1
    a504:	d000      	beq.n	a508 <__aeabi_dmul+0xc0>
    a506:	e162      	b.n	a7ce <__aeabi_dmul+0x386>
    a508:	2300      	movs	r3, #0
    a50a:	2400      	movs	r4, #0
    a50c:	2200      	movs	r2, #0
    a50e:	4699      	mov	r9, r3
    a510:	9901      	ldr	r1, [sp, #4]
    a512:	4001      	ands	r1, r0
    a514:	b2cd      	uxtb	r5, r1
    a516:	2100      	movs	r1, #0
    a518:	0312      	lsls	r2, r2, #12
    a51a:	0d0b      	lsrs	r3, r1, #20
    a51c:	0b12      	lsrs	r2, r2, #12
    a51e:	051b      	lsls	r3, r3, #20
    a520:	4313      	orrs	r3, r2
    a522:	4a43      	ldr	r2, [pc, #268]	; (a630 <__aeabi_dmul+0x1e8>)
    a524:	0524      	lsls	r4, r4, #20
    a526:	4013      	ands	r3, r2
    a528:	431c      	orrs	r4, r3
    a52a:	0064      	lsls	r4, r4, #1
    a52c:	07ed      	lsls	r5, r5, #31
    a52e:	0864      	lsrs	r4, r4, #1
    a530:	432c      	orrs	r4, r5
    a532:	4648      	mov	r0, r9
    a534:	0021      	movs	r1, r4
    a536:	b007      	add	sp, #28
    a538:	bc3c      	pop	{r2, r3, r4, r5}
    a53a:	4690      	mov	r8, r2
    a53c:	4699      	mov	r9, r3
    a53e:	46a2      	mov	sl, r4
    a540:	46ab      	mov	fp, r5
    a542:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a544:	4303      	orrs	r3, r0
    a546:	4699      	mov	r9, r3
    a548:	d04f      	beq.n	a5ea <__aeabi_dmul+0x1a2>
    a54a:	465b      	mov	r3, fp
    a54c:	2b00      	cmp	r3, #0
    a54e:	d100      	bne.n	a552 <__aeabi_dmul+0x10a>
    a550:	e189      	b.n	a866 <__aeabi_dmul+0x41e>
    a552:	4658      	mov	r0, fp
    a554:	f000 fe98 	bl	b288 <__clzsi2>
    a558:	0003      	movs	r3, r0
    a55a:	3b0b      	subs	r3, #11
    a55c:	2b1c      	cmp	r3, #28
    a55e:	dd00      	ble.n	a562 <__aeabi_dmul+0x11a>
    a560:	e17a      	b.n	a858 <__aeabi_dmul+0x410>
    a562:	221d      	movs	r2, #29
    a564:	1ad3      	subs	r3, r2, r3
    a566:	003a      	movs	r2, r7
    a568:	0001      	movs	r1, r0
    a56a:	465c      	mov	r4, fp
    a56c:	40da      	lsrs	r2, r3
    a56e:	3908      	subs	r1, #8
    a570:	408c      	lsls	r4, r1
    a572:	0013      	movs	r3, r2
    a574:	408f      	lsls	r7, r1
    a576:	4323      	orrs	r3, r4
    a578:	469b      	mov	fp, r3
    a57a:	46b9      	mov	r9, r7
    a57c:	2300      	movs	r3, #0
    a57e:	4e2d      	ldr	r6, [pc, #180]	; (a634 <__aeabi_dmul+0x1ec>)
    a580:	2700      	movs	r7, #0
    a582:	1a36      	subs	r6, r6, r0
    a584:	9302      	str	r3, [sp, #8]
    a586:	e784      	b.n	a492 <__aeabi_dmul+0x4a>
    a588:	4653      	mov	r3, sl
    a58a:	4323      	orrs	r3, r4
    a58c:	d12a      	bne.n	a5e4 <__aeabi_dmul+0x19c>
    a58e:	2400      	movs	r4, #0
    a590:	2002      	movs	r0, #2
    a592:	e796      	b.n	a4c2 <__aeabi_dmul+0x7a>
    a594:	4653      	mov	r3, sl
    a596:	4323      	orrs	r3, r4
    a598:	d020      	beq.n	a5dc <__aeabi_dmul+0x194>
    a59a:	2c00      	cmp	r4, #0
    a59c:	d100      	bne.n	a5a0 <__aeabi_dmul+0x158>
    a59e:	e157      	b.n	a850 <__aeabi_dmul+0x408>
    a5a0:	0020      	movs	r0, r4
    a5a2:	f000 fe71 	bl	b288 <__clzsi2>
    a5a6:	0003      	movs	r3, r0
    a5a8:	3b0b      	subs	r3, #11
    a5aa:	2b1c      	cmp	r3, #28
    a5ac:	dd00      	ble.n	a5b0 <__aeabi_dmul+0x168>
    a5ae:	e149      	b.n	a844 <__aeabi_dmul+0x3fc>
    a5b0:	211d      	movs	r1, #29
    a5b2:	1acb      	subs	r3, r1, r3
    a5b4:	4651      	mov	r1, sl
    a5b6:	0002      	movs	r2, r0
    a5b8:	40d9      	lsrs	r1, r3
    a5ba:	4653      	mov	r3, sl
    a5bc:	3a08      	subs	r2, #8
    a5be:	4094      	lsls	r4, r2
    a5c0:	4093      	lsls	r3, r2
    a5c2:	430c      	orrs	r4, r1
    a5c4:	4a1b      	ldr	r2, [pc, #108]	; (a634 <__aeabi_dmul+0x1ec>)
    a5c6:	1a12      	subs	r2, r2, r0
    a5c8:	2000      	movs	r0, #0
    a5ca:	e77a      	b.n	a4c2 <__aeabi_dmul+0x7a>
    a5cc:	2501      	movs	r5, #1
    a5ce:	9b01      	ldr	r3, [sp, #4]
    a5d0:	4c14      	ldr	r4, [pc, #80]	; (a624 <__aeabi_dmul+0x1dc>)
    a5d2:	401d      	ands	r5, r3
    a5d4:	2300      	movs	r3, #0
    a5d6:	2200      	movs	r2, #0
    a5d8:	4699      	mov	r9, r3
    a5da:	e79c      	b.n	a516 <__aeabi_dmul+0xce>
    a5dc:	2400      	movs	r4, #0
    a5de:	2200      	movs	r2, #0
    a5e0:	2001      	movs	r0, #1
    a5e2:	e76e      	b.n	a4c2 <__aeabi_dmul+0x7a>
    a5e4:	4653      	mov	r3, sl
    a5e6:	2003      	movs	r0, #3
    a5e8:	e76b      	b.n	a4c2 <__aeabi_dmul+0x7a>
    a5ea:	2300      	movs	r3, #0
    a5ec:	469b      	mov	fp, r3
    a5ee:	3301      	adds	r3, #1
    a5f0:	2704      	movs	r7, #4
    a5f2:	2600      	movs	r6, #0
    a5f4:	9302      	str	r3, [sp, #8]
    a5f6:	e74c      	b.n	a492 <__aeabi_dmul+0x4a>
    a5f8:	2303      	movs	r3, #3
    a5fa:	4681      	mov	r9, r0
    a5fc:	270c      	movs	r7, #12
    a5fe:	9302      	str	r3, [sp, #8]
    a600:	e747      	b.n	a492 <__aeabi_dmul+0x4a>
    a602:	2280      	movs	r2, #128	; 0x80
    a604:	2300      	movs	r3, #0
    a606:	2500      	movs	r5, #0
    a608:	0312      	lsls	r2, r2, #12
    a60a:	4699      	mov	r9, r3
    a60c:	4c05      	ldr	r4, [pc, #20]	; (a624 <__aeabi_dmul+0x1dc>)
    a60e:	e782      	b.n	a516 <__aeabi_dmul+0xce>
    a610:	465c      	mov	r4, fp
    a612:	464b      	mov	r3, r9
    a614:	9802      	ldr	r0, [sp, #8]
    a616:	e76f      	b.n	a4f8 <__aeabi_dmul+0xb0>
    a618:	465c      	mov	r4, fp
    a61a:	464b      	mov	r3, r9
    a61c:	9501      	str	r5, [sp, #4]
    a61e:	9802      	ldr	r0, [sp, #8]
    a620:	e76a      	b.n	a4f8 <__aeabi_dmul+0xb0>
    a622:	46c0      	nop			; (mov r8, r8)
    a624:	000007ff 	.word	0x000007ff
    a628:	fffffc01 	.word	0xfffffc01
    a62c:	0000c2c8 	.word	0x0000c2c8
    a630:	800fffff 	.word	0x800fffff
    a634:	fffffc0d 	.word	0xfffffc0d
    a638:	464a      	mov	r2, r9
    a63a:	4649      	mov	r1, r9
    a63c:	0c17      	lsrs	r7, r2, #16
    a63e:	0c1a      	lsrs	r2, r3, #16
    a640:	041b      	lsls	r3, r3, #16
    a642:	0c1b      	lsrs	r3, r3, #16
    a644:	0408      	lsls	r0, r1, #16
    a646:	0019      	movs	r1, r3
    a648:	0c00      	lsrs	r0, r0, #16
    a64a:	4341      	muls	r1, r0
    a64c:	0015      	movs	r5, r2
    a64e:	4688      	mov	r8, r1
    a650:	0019      	movs	r1, r3
    a652:	437d      	muls	r5, r7
    a654:	4379      	muls	r1, r7
    a656:	9503      	str	r5, [sp, #12]
    a658:	4689      	mov	r9, r1
    a65a:	0029      	movs	r1, r5
    a65c:	0015      	movs	r5, r2
    a65e:	4345      	muls	r5, r0
    a660:	444d      	add	r5, r9
    a662:	9502      	str	r5, [sp, #8]
    a664:	4645      	mov	r5, r8
    a666:	0c2d      	lsrs	r5, r5, #16
    a668:	46aa      	mov	sl, r5
    a66a:	9d02      	ldr	r5, [sp, #8]
    a66c:	4455      	add	r5, sl
    a66e:	45a9      	cmp	r9, r5
    a670:	d906      	bls.n	a680 <__aeabi_dmul+0x238>
    a672:	468a      	mov	sl, r1
    a674:	2180      	movs	r1, #128	; 0x80
    a676:	0249      	lsls	r1, r1, #9
    a678:	4689      	mov	r9, r1
    a67a:	44ca      	add	sl, r9
    a67c:	4651      	mov	r1, sl
    a67e:	9103      	str	r1, [sp, #12]
    a680:	0c29      	lsrs	r1, r5, #16
    a682:	9104      	str	r1, [sp, #16]
    a684:	4641      	mov	r1, r8
    a686:	0409      	lsls	r1, r1, #16
    a688:	042d      	lsls	r5, r5, #16
    a68a:	0c09      	lsrs	r1, r1, #16
    a68c:	4688      	mov	r8, r1
    a68e:	0029      	movs	r1, r5
    a690:	0c25      	lsrs	r5, r4, #16
    a692:	0424      	lsls	r4, r4, #16
    a694:	4441      	add	r1, r8
    a696:	0c24      	lsrs	r4, r4, #16
    a698:	9105      	str	r1, [sp, #20]
    a69a:	0021      	movs	r1, r4
    a69c:	4341      	muls	r1, r0
    a69e:	4688      	mov	r8, r1
    a6a0:	0021      	movs	r1, r4
    a6a2:	4379      	muls	r1, r7
    a6a4:	468a      	mov	sl, r1
    a6a6:	4368      	muls	r0, r5
    a6a8:	4641      	mov	r1, r8
    a6aa:	4450      	add	r0, sl
    a6ac:	4681      	mov	r9, r0
    a6ae:	0c08      	lsrs	r0, r1, #16
    a6b0:	4448      	add	r0, r9
    a6b2:	436f      	muls	r7, r5
    a6b4:	4582      	cmp	sl, r0
    a6b6:	d903      	bls.n	a6c0 <__aeabi_dmul+0x278>
    a6b8:	2180      	movs	r1, #128	; 0x80
    a6ba:	0249      	lsls	r1, r1, #9
    a6bc:	4689      	mov	r9, r1
    a6be:	444f      	add	r7, r9
    a6c0:	0c01      	lsrs	r1, r0, #16
    a6c2:	4689      	mov	r9, r1
    a6c4:	0039      	movs	r1, r7
    a6c6:	4449      	add	r1, r9
    a6c8:	9102      	str	r1, [sp, #8]
    a6ca:	4641      	mov	r1, r8
    a6cc:	040f      	lsls	r7, r1, #16
    a6ce:	9904      	ldr	r1, [sp, #16]
    a6d0:	0c3f      	lsrs	r7, r7, #16
    a6d2:	4688      	mov	r8, r1
    a6d4:	0400      	lsls	r0, r0, #16
    a6d6:	19c0      	adds	r0, r0, r7
    a6d8:	4480      	add	r8, r0
    a6da:	4641      	mov	r1, r8
    a6dc:	9104      	str	r1, [sp, #16]
    a6de:	4659      	mov	r1, fp
    a6e0:	0c0f      	lsrs	r7, r1, #16
    a6e2:	0409      	lsls	r1, r1, #16
    a6e4:	0c09      	lsrs	r1, r1, #16
    a6e6:	4688      	mov	r8, r1
    a6e8:	4359      	muls	r1, r3
    a6ea:	468a      	mov	sl, r1
    a6ec:	0039      	movs	r1, r7
    a6ee:	4351      	muls	r1, r2
    a6f0:	4689      	mov	r9, r1
    a6f2:	4641      	mov	r1, r8
    a6f4:	434a      	muls	r2, r1
    a6f6:	4651      	mov	r1, sl
    a6f8:	0c09      	lsrs	r1, r1, #16
    a6fa:	468b      	mov	fp, r1
    a6fc:	437b      	muls	r3, r7
    a6fe:	18d2      	adds	r2, r2, r3
    a700:	445a      	add	r2, fp
    a702:	4293      	cmp	r3, r2
    a704:	d903      	bls.n	a70e <__aeabi_dmul+0x2c6>
    a706:	2380      	movs	r3, #128	; 0x80
    a708:	025b      	lsls	r3, r3, #9
    a70a:	469b      	mov	fp, r3
    a70c:	44d9      	add	r9, fp
    a70e:	4651      	mov	r1, sl
    a710:	0409      	lsls	r1, r1, #16
    a712:	0c09      	lsrs	r1, r1, #16
    a714:	468a      	mov	sl, r1
    a716:	4641      	mov	r1, r8
    a718:	4361      	muls	r1, r4
    a71a:	437c      	muls	r4, r7
    a71c:	0c13      	lsrs	r3, r2, #16
    a71e:	0412      	lsls	r2, r2, #16
    a720:	444b      	add	r3, r9
    a722:	4452      	add	r2, sl
    a724:	46a1      	mov	r9, r4
    a726:	468a      	mov	sl, r1
    a728:	003c      	movs	r4, r7
    a72a:	4641      	mov	r1, r8
    a72c:	436c      	muls	r4, r5
    a72e:	434d      	muls	r5, r1
    a730:	4651      	mov	r1, sl
    a732:	444d      	add	r5, r9
    a734:	0c0f      	lsrs	r7, r1, #16
    a736:	197d      	adds	r5, r7, r5
    a738:	45a9      	cmp	r9, r5
    a73a:	d903      	bls.n	a744 <__aeabi_dmul+0x2fc>
    a73c:	2180      	movs	r1, #128	; 0x80
    a73e:	0249      	lsls	r1, r1, #9
    a740:	4688      	mov	r8, r1
    a742:	4444      	add	r4, r8
    a744:	9f04      	ldr	r7, [sp, #16]
    a746:	9903      	ldr	r1, [sp, #12]
    a748:	46b8      	mov	r8, r7
    a74a:	4441      	add	r1, r8
    a74c:	468b      	mov	fp, r1
    a74e:	4583      	cmp	fp, r0
    a750:	4180      	sbcs	r0, r0
    a752:	4241      	negs	r1, r0
    a754:	4688      	mov	r8, r1
    a756:	4651      	mov	r1, sl
    a758:	0408      	lsls	r0, r1, #16
    a75a:	042f      	lsls	r7, r5, #16
    a75c:	0c00      	lsrs	r0, r0, #16
    a75e:	183f      	adds	r7, r7, r0
    a760:	4658      	mov	r0, fp
    a762:	9902      	ldr	r1, [sp, #8]
    a764:	1810      	adds	r0, r2, r0
    a766:	4689      	mov	r9, r1
    a768:	4290      	cmp	r0, r2
    a76a:	4192      	sbcs	r2, r2
    a76c:	444f      	add	r7, r9
    a76e:	46ba      	mov	sl, r7
    a770:	4252      	negs	r2, r2
    a772:	4699      	mov	r9, r3
    a774:	4693      	mov	fp, r2
    a776:	44c2      	add	sl, r8
    a778:	44d1      	add	r9, sl
    a77a:	44cb      	add	fp, r9
    a77c:	428f      	cmp	r7, r1
    a77e:	41bf      	sbcs	r7, r7
    a780:	45c2      	cmp	sl, r8
    a782:	4189      	sbcs	r1, r1
    a784:	4599      	cmp	r9, r3
    a786:	419b      	sbcs	r3, r3
    a788:	4593      	cmp	fp, r2
    a78a:	4192      	sbcs	r2, r2
    a78c:	427f      	negs	r7, r7
    a78e:	4249      	negs	r1, r1
    a790:	0c2d      	lsrs	r5, r5, #16
    a792:	4252      	negs	r2, r2
    a794:	430f      	orrs	r7, r1
    a796:	425b      	negs	r3, r3
    a798:	4313      	orrs	r3, r2
    a79a:	197f      	adds	r7, r7, r5
    a79c:	18ff      	adds	r7, r7, r3
    a79e:	465b      	mov	r3, fp
    a7a0:	193c      	adds	r4, r7, r4
    a7a2:	0ddb      	lsrs	r3, r3, #23
    a7a4:	9a05      	ldr	r2, [sp, #20]
    a7a6:	0264      	lsls	r4, r4, #9
    a7a8:	431c      	orrs	r4, r3
    a7aa:	0243      	lsls	r3, r0, #9
    a7ac:	4313      	orrs	r3, r2
    a7ae:	1e5d      	subs	r5, r3, #1
    a7b0:	41ab      	sbcs	r3, r5
    a7b2:	465a      	mov	r2, fp
    a7b4:	0dc0      	lsrs	r0, r0, #23
    a7b6:	4303      	orrs	r3, r0
    a7b8:	0252      	lsls	r2, r2, #9
    a7ba:	4313      	orrs	r3, r2
    a7bc:	01e2      	lsls	r2, r4, #7
    a7be:	d556      	bpl.n	a86e <__aeabi_dmul+0x426>
    a7c0:	2001      	movs	r0, #1
    a7c2:	085a      	lsrs	r2, r3, #1
    a7c4:	4003      	ands	r3, r0
    a7c6:	4313      	orrs	r3, r2
    a7c8:	07e2      	lsls	r2, r4, #31
    a7ca:	4313      	orrs	r3, r2
    a7cc:	0864      	lsrs	r4, r4, #1
    a7ce:	485a      	ldr	r0, [pc, #360]	; (a938 <__aeabi_dmul+0x4f0>)
    a7d0:	4460      	add	r0, ip
    a7d2:	2800      	cmp	r0, #0
    a7d4:	dd4d      	ble.n	a872 <__aeabi_dmul+0x42a>
    a7d6:	075a      	lsls	r2, r3, #29
    a7d8:	d009      	beq.n	a7ee <__aeabi_dmul+0x3a6>
    a7da:	220f      	movs	r2, #15
    a7dc:	401a      	ands	r2, r3
    a7de:	2a04      	cmp	r2, #4
    a7e0:	d005      	beq.n	a7ee <__aeabi_dmul+0x3a6>
    a7e2:	1d1a      	adds	r2, r3, #4
    a7e4:	429a      	cmp	r2, r3
    a7e6:	419b      	sbcs	r3, r3
    a7e8:	425b      	negs	r3, r3
    a7ea:	18e4      	adds	r4, r4, r3
    a7ec:	0013      	movs	r3, r2
    a7ee:	01e2      	lsls	r2, r4, #7
    a7f0:	d504      	bpl.n	a7fc <__aeabi_dmul+0x3b4>
    a7f2:	2080      	movs	r0, #128	; 0x80
    a7f4:	4a51      	ldr	r2, [pc, #324]	; (a93c <__aeabi_dmul+0x4f4>)
    a7f6:	00c0      	lsls	r0, r0, #3
    a7f8:	4014      	ands	r4, r2
    a7fa:	4460      	add	r0, ip
    a7fc:	4a50      	ldr	r2, [pc, #320]	; (a940 <__aeabi_dmul+0x4f8>)
    a7fe:	4290      	cmp	r0, r2
    a800:	dd00      	ble.n	a804 <__aeabi_dmul+0x3bc>
    a802:	e6e3      	b.n	a5cc <__aeabi_dmul+0x184>
    a804:	2501      	movs	r5, #1
    a806:	08db      	lsrs	r3, r3, #3
    a808:	0762      	lsls	r2, r4, #29
    a80a:	431a      	orrs	r2, r3
    a80c:	0264      	lsls	r4, r4, #9
    a80e:	9b01      	ldr	r3, [sp, #4]
    a810:	4691      	mov	r9, r2
    a812:	0b22      	lsrs	r2, r4, #12
    a814:	0544      	lsls	r4, r0, #21
    a816:	0d64      	lsrs	r4, r4, #21
    a818:	401d      	ands	r5, r3
    a81a:	e67c      	b.n	a516 <__aeabi_dmul+0xce>
    a81c:	2280      	movs	r2, #128	; 0x80
    a81e:	4659      	mov	r1, fp
    a820:	0312      	lsls	r2, r2, #12
    a822:	4211      	tst	r1, r2
    a824:	d008      	beq.n	a838 <__aeabi_dmul+0x3f0>
    a826:	4214      	tst	r4, r2
    a828:	d106      	bne.n	a838 <__aeabi_dmul+0x3f0>
    a82a:	4322      	orrs	r2, r4
    a82c:	0312      	lsls	r2, r2, #12
    a82e:	0b12      	lsrs	r2, r2, #12
    a830:	4645      	mov	r5, r8
    a832:	4699      	mov	r9, r3
    a834:	4c43      	ldr	r4, [pc, #268]	; (a944 <__aeabi_dmul+0x4fc>)
    a836:	e66e      	b.n	a516 <__aeabi_dmul+0xce>
    a838:	465b      	mov	r3, fp
    a83a:	431a      	orrs	r2, r3
    a83c:	0312      	lsls	r2, r2, #12
    a83e:	0b12      	lsrs	r2, r2, #12
    a840:	4c40      	ldr	r4, [pc, #256]	; (a944 <__aeabi_dmul+0x4fc>)
    a842:	e668      	b.n	a516 <__aeabi_dmul+0xce>
    a844:	0003      	movs	r3, r0
    a846:	4654      	mov	r4, sl
    a848:	3b28      	subs	r3, #40	; 0x28
    a84a:	409c      	lsls	r4, r3
    a84c:	2300      	movs	r3, #0
    a84e:	e6b9      	b.n	a5c4 <__aeabi_dmul+0x17c>
    a850:	f000 fd1a 	bl	b288 <__clzsi2>
    a854:	3020      	adds	r0, #32
    a856:	e6a6      	b.n	a5a6 <__aeabi_dmul+0x15e>
    a858:	0003      	movs	r3, r0
    a85a:	3b28      	subs	r3, #40	; 0x28
    a85c:	409f      	lsls	r7, r3
    a85e:	2300      	movs	r3, #0
    a860:	46bb      	mov	fp, r7
    a862:	4699      	mov	r9, r3
    a864:	e68a      	b.n	a57c <__aeabi_dmul+0x134>
    a866:	f000 fd0f 	bl	b288 <__clzsi2>
    a86a:	3020      	adds	r0, #32
    a86c:	e674      	b.n	a558 <__aeabi_dmul+0x110>
    a86e:	46b4      	mov	ip, r6
    a870:	e7ad      	b.n	a7ce <__aeabi_dmul+0x386>
    a872:	2501      	movs	r5, #1
    a874:	1a2a      	subs	r2, r5, r0
    a876:	2a38      	cmp	r2, #56	; 0x38
    a878:	dd06      	ble.n	a888 <__aeabi_dmul+0x440>
    a87a:	9b01      	ldr	r3, [sp, #4]
    a87c:	2400      	movs	r4, #0
    a87e:	401d      	ands	r5, r3
    a880:	2300      	movs	r3, #0
    a882:	2200      	movs	r2, #0
    a884:	4699      	mov	r9, r3
    a886:	e646      	b.n	a516 <__aeabi_dmul+0xce>
    a888:	2a1f      	cmp	r2, #31
    a88a:	dc21      	bgt.n	a8d0 <__aeabi_dmul+0x488>
    a88c:	2520      	movs	r5, #32
    a88e:	0020      	movs	r0, r4
    a890:	1aad      	subs	r5, r5, r2
    a892:	001e      	movs	r6, r3
    a894:	40ab      	lsls	r3, r5
    a896:	40a8      	lsls	r0, r5
    a898:	40d6      	lsrs	r6, r2
    a89a:	1e5d      	subs	r5, r3, #1
    a89c:	41ab      	sbcs	r3, r5
    a89e:	4330      	orrs	r0, r6
    a8a0:	4318      	orrs	r0, r3
    a8a2:	40d4      	lsrs	r4, r2
    a8a4:	0743      	lsls	r3, r0, #29
    a8a6:	d009      	beq.n	a8bc <__aeabi_dmul+0x474>
    a8a8:	230f      	movs	r3, #15
    a8aa:	4003      	ands	r3, r0
    a8ac:	2b04      	cmp	r3, #4
    a8ae:	d005      	beq.n	a8bc <__aeabi_dmul+0x474>
    a8b0:	0003      	movs	r3, r0
    a8b2:	1d18      	adds	r0, r3, #4
    a8b4:	4298      	cmp	r0, r3
    a8b6:	419b      	sbcs	r3, r3
    a8b8:	425b      	negs	r3, r3
    a8ba:	18e4      	adds	r4, r4, r3
    a8bc:	0223      	lsls	r3, r4, #8
    a8be:	d521      	bpl.n	a904 <__aeabi_dmul+0x4bc>
    a8c0:	2501      	movs	r5, #1
    a8c2:	9b01      	ldr	r3, [sp, #4]
    a8c4:	2401      	movs	r4, #1
    a8c6:	401d      	ands	r5, r3
    a8c8:	2300      	movs	r3, #0
    a8ca:	2200      	movs	r2, #0
    a8cc:	4699      	mov	r9, r3
    a8ce:	e622      	b.n	a516 <__aeabi_dmul+0xce>
    a8d0:	251f      	movs	r5, #31
    a8d2:	0021      	movs	r1, r4
    a8d4:	426d      	negs	r5, r5
    a8d6:	1a28      	subs	r0, r5, r0
    a8d8:	40c1      	lsrs	r1, r0
    a8da:	0008      	movs	r0, r1
    a8dc:	2a20      	cmp	r2, #32
    a8de:	d01d      	beq.n	a91c <__aeabi_dmul+0x4d4>
    a8e0:	355f      	adds	r5, #95	; 0x5f
    a8e2:	1aaa      	subs	r2, r5, r2
    a8e4:	4094      	lsls	r4, r2
    a8e6:	4323      	orrs	r3, r4
    a8e8:	1e5c      	subs	r4, r3, #1
    a8ea:	41a3      	sbcs	r3, r4
    a8ec:	2507      	movs	r5, #7
    a8ee:	4303      	orrs	r3, r0
    a8f0:	401d      	ands	r5, r3
    a8f2:	2200      	movs	r2, #0
    a8f4:	2d00      	cmp	r5, #0
    a8f6:	d009      	beq.n	a90c <__aeabi_dmul+0x4c4>
    a8f8:	220f      	movs	r2, #15
    a8fa:	2400      	movs	r4, #0
    a8fc:	401a      	ands	r2, r3
    a8fe:	0018      	movs	r0, r3
    a900:	2a04      	cmp	r2, #4
    a902:	d1d6      	bne.n	a8b2 <__aeabi_dmul+0x46a>
    a904:	0003      	movs	r3, r0
    a906:	0765      	lsls	r5, r4, #29
    a908:	0264      	lsls	r4, r4, #9
    a90a:	0b22      	lsrs	r2, r4, #12
    a90c:	08db      	lsrs	r3, r3, #3
    a90e:	432b      	orrs	r3, r5
    a910:	2501      	movs	r5, #1
    a912:	4699      	mov	r9, r3
    a914:	9b01      	ldr	r3, [sp, #4]
    a916:	2400      	movs	r4, #0
    a918:	401d      	ands	r5, r3
    a91a:	e5fc      	b.n	a516 <__aeabi_dmul+0xce>
    a91c:	2400      	movs	r4, #0
    a91e:	e7e2      	b.n	a8e6 <__aeabi_dmul+0x49e>
    a920:	2280      	movs	r2, #128	; 0x80
    a922:	2501      	movs	r5, #1
    a924:	0312      	lsls	r2, r2, #12
    a926:	4322      	orrs	r2, r4
    a928:	9901      	ldr	r1, [sp, #4]
    a92a:	0312      	lsls	r2, r2, #12
    a92c:	0b12      	lsrs	r2, r2, #12
    a92e:	400d      	ands	r5, r1
    a930:	4699      	mov	r9, r3
    a932:	4c04      	ldr	r4, [pc, #16]	; (a944 <__aeabi_dmul+0x4fc>)
    a934:	e5ef      	b.n	a516 <__aeabi_dmul+0xce>
    a936:	46c0      	nop			; (mov r8, r8)
    a938:	000003ff 	.word	0x000003ff
    a93c:	feffffff 	.word	0xfeffffff
    a940:	000007fe 	.word	0x000007fe
    a944:	000007ff 	.word	0x000007ff

0000a948 <__aeabi_dsub>:
    a948:	b5f0      	push	{r4, r5, r6, r7, lr}
    a94a:	4646      	mov	r6, r8
    a94c:	46d6      	mov	lr, sl
    a94e:	464f      	mov	r7, r9
    a950:	030c      	lsls	r4, r1, #12
    a952:	b5c0      	push	{r6, r7, lr}
    a954:	0fcd      	lsrs	r5, r1, #31
    a956:	004e      	lsls	r6, r1, #1
    a958:	0a61      	lsrs	r1, r4, #9
    a95a:	0f44      	lsrs	r4, r0, #29
    a95c:	430c      	orrs	r4, r1
    a95e:	00c1      	lsls	r1, r0, #3
    a960:	0058      	lsls	r0, r3, #1
    a962:	0d40      	lsrs	r0, r0, #21
    a964:	4684      	mov	ip, r0
    a966:	468a      	mov	sl, r1
    a968:	000f      	movs	r7, r1
    a96a:	0319      	lsls	r1, r3, #12
    a96c:	0f50      	lsrs	r0, r2, #29
    a96e:	0a49      	lsrs	r1, r1, #9
    a970:	4301      	orrs	r1, r0
    a972:	48c6      	ldr	r0, [pc, #792]	; (ac8c <__aeabi_dsub+0x344>)
    a974:	0d76      	lsrs	r6, r6, #21
    a976:	46a8      	mov	r8, r5
    a978:	0fdb      	lsrs	r3, r3, #31
    a97a:	00d2      	lsls	r2, r2, #3
    a97c:	4584      	cmp	ip, r0
    a97e:	d100      	bne.n	a982 <__aeabi_dsub+0x3a>
    a980:	e0d8      	b.n	ab34 <__aeabi_dsub+0x1ec>
    a982:	2001      	movs	r0, #1
    a984:	4043      	eors	r3, r0
    a986:	42ab      	cmp	r3, r5
    a988:	d100      	bne.n	a98c <__aeabi_dsub+0x44>
    a98a:	e0a6      	b.n	aada <__aeabi_dsub+0x192>
    a98c:	4660      	mov	r0, ip
    a98e:	1a35      	subs	r5, r6, r0
    a990:	2d00      	cmp	r5, #0
    a992:	dc00      	bgt.n	a996 <__aeabi_dsub+0x4e>
    a994:	e105      	b.n	aba2 <__aeabi_dsub+0x25a>
    a996:	2800      	cmp	r0, #0
    a998:	d110      	bne.n	a9bc <__aeabi_dsub+0x74>
    a99a:	000b      	movs	r3, r1
    a99c:	4313      	orrs	r3, r2
    a99e:	d100      	bne.n	a9a2 <__aeabi_dsub+0x5a>
    a9a0:	e0d7      	b.n	ab52 <__aeabi_dsub+0x20a>
    a9a2:	1e6b      	subs	r3, r5, #1
    a9a4:	2b00      	cmp	r3, #0
    a9a6:	d000      	beq.n	a9aa <__aeabi_dsub+0x62>
    a9a8:	e14b      	b.n	ac42 <__aeabi_dsub+0x2fa>
    a9aa:	4653      	mov	r3, sl
    a9ac:	1a9f      	subs	r7, r3, r2
    a9ae:	45ba      	cmp	sl, r7
    a9b0:	4180      	sbcs	r0, r0
    a9b2:	1a64      	subs	r4, r4, r1
    a9b4:	4240      	negs	r0, r0
    a9b6:	1a24      	subs	r4, r4, r0
    a9b8:	2601      	movs	r6, #1
    a9ba:	e01e      	b.n	a9fa <__aeabi_dsub+0xb2>
    a9bc:	4bb3      	ldr	r3, [pc, #716]	; (ac8c <__aeabi_dsub+0x344>)
    a9be:	429e      	cmp	r6, r3
    a9c0:	d048      	beq.n	aa54 <__aeabi_dsub+0x10c>
    a9c2:	2380      	movs	r3, #128	; 0x80
    a9c4:	041b      	lsls	r3, r3, #16
    a9c6:	4319      	orrs	r1, r3
    a9c8:	2d38      	cmp	r5, #56	; 0x38
    a9ca:	dd00      	ble.n	a9ce <__aeabi_dsub+0x86>
    a9cc:	e119      	b.n	ac02 <__aeabi_dsub+0x2ba>
    a9ce:	2d1f      	cmp	r5, #31
    a9d0:	dd00      	ble.n	a9d4 <__aeabi_dsub+0x8c>
    a9d2:	e14c      	b.n	ac6e <__aeabi_dsub+0x326>
    a9d4:	2320      	movs	r3, #32
    a9d6:	000f      	movs	r7, r1
    a9d8:	1b5b      	subs	r3, r3, r5
    a9da:	0010      	movs	r0, r2
    a9dc:	409a      	lsls	r2, r3
    a9de:	409f      	lsls	r7, r3
    a9e0:	40e8      	lsrs	r0, r5
    a9e2:	1e53      	subs	r3, r2, #1
    a9e4:	419a      	sbcs	r2, r3
    a9e6:	40e9      	lsrs	r1, r5
    a9e8:	4307      	orrs	r7, r0
    a9ea:	4317      	orrs	r7, r2
    a9ec:	4653      	mov	r3, sl
    a9ee:	1bdf      	subs	r7, r3, r7
    a9f0:	1a61      	subs	r1, r4, r1
    a9f2:	45ba      	cmp	sl, r7
    a9f4:	41a4      	sbcs	r4, r4
    a9f6:	4264      	negs	r4, r4
    a9f8:	1b0c      	subs	r4, r1, r4
    a9fa:	0223      	lsls	r3, r4, #8
    a9fc:	d400      	bmi.n	aa00 <__aeabi_dsub+0xb8>
    a9fe:	e0c5      	b.n	ab8c <__aeabi_dsub+0x244>
    aa00:	0264      	lsls	r4, r4, #9
    aa02:	0a65      	lsrs	r5, r4, #9
    aa04:	2d00      	cmp	r5, #0
    aa06:	d100      	bne.n	aa0a <__aeabi_dsub+0xc2>
    aa08:	e0f6      	b.n	abf8 <__aeabi_dsub+0x2b0>
    aa0a:	0028      	movs	r0, r5
    aa0c:	f000 fc3c 	bl	b288 <__clzsi2>
    aa10:	0003      	movs	r3, r0
    aa12:	3b08      	subs	r3, #8
    aa14:	2b1f      	cmp	r3, #31
    aa16:	dd00      	ble.n	aa1a <__aeabi_dsub+0xd2>
    aa18:	e0e9      	b.n	abee <__aeabi_dsub+0x2a6>
    aa1a:	2220      	movs	r2, #32
    aa1c:	003c      	movs	r4, r7
    aa1e:	1ad2      	subs	r2, r2, r3
    aa20:	409d      	lsls	r5, r3
    aa22:	40d4      	lsrs	r4, r2
    aa24:	409f      	lsls	r7, r3
    aa26:	4325      	orrs	r5, r4
    aa28:	429e      	cmp	r6, r3
    aa2a:	dd00      	ble.n	aa2e <__aeabi_dsub+0xe6>
    aa2c:	e0db      	b.n	abe6 <__aeabi_dsub+0x29e>
    aa2e:	1b9e      	subs	r6, r3, r6
    aa30:	1c73      	adds	r3, r6, #1
    aa32:	2b1f      	cmp	r3, #31
    aa34:	dd00      	ble.n	aa38 <__aeabi_dsub+0xf0>
    aa36:	e10a      	b.n	ac4e <__aeabi_dsub+0x306>
    aa38:	2220      	movs	r2, #32
    aa3a:	0038      	movs	r0, r7
    aa3c:	1ad2      	subs	r2, r2, r3
    aa3e:	0029      	movs	r1, r5
    aa40:	4097      	lsls	r7, r2
    aa42:	002c      	movs	r4, r5
    aa44:	4091      	lsls	r1, r2
    aa46:	40d8      	lsrs	r0, r3
    aa48:	1e7a      	subs	r2, r7, #1
    aa4a:	4197      	sbcs	r7, r2
    aa4c:	40dc      	lsrs	r4, r3
    aa4e:	2600      	movs	r6, #0
    aa50:	4301      	orrs	r1, r0
    aa52:	430f      	orrs	r7, r1
    aa54:	077b      	lsls	r3, r7, #29
    aa56:	d009      	beq.n	aa6c <__aeabi_dsub+0x124>
    aa58:	230f      	movs	r3, #15
    aa5a:	403b      	ands	r3, r7
    aa5c:	2b04      	cmp	r3, #4
    aa5e:	d005      	beq.n	aa6c <__aeabi_dsub+0x124>
    aa60:	1d3b      	adds	r3, r7, #4
    aa62:	42bb      	cmp	r3, r7
    aa64:	41bf      	sbcs	r7, r7
    aa66:	427f      	negs	r7, r7
    aa68:	19e4      	adds	r4, r4, r7
    aa6a:	001f      	movs	r7, r3
    aa6c:	0223      	lsls	r3, r4, #8
    aa6e:	d525      	bpl.n	aabc <__aeabi_dsub+0x174>
    aa70:	4b86      	ldr	r3, [pc, #536]	; (ac8c <__aeabi_dsub+0x344>)
    aa72:	3601      	adds	r6, #1
    aa74:	429e      	cmp	r6, r3
    aa76:	d100      	bne.n	aa7a <__aeabi_dsub+0x132>
    aa78:	e0af      	b.n	abda <__aeabi_dsub+0x292>
    aa7a:	4b85      	ldr	r3, [pc, #532]	; (ac90 <__aeabi_dsub+0x348>)
    aa7c:	2501      	movs	r5, #1
    aa7e:	401c      	ands	r4, r3
    aa80:	4643      	mov	r3, r8
    aa82:	0762      	lsls	r2, r4, #29
    aa84:	08ff      	lsrs	r7, r7, #3
    aa86:	0264      	lsls	r4, r4, #9
    aa88:	0576      	lsls	r6, r6, #21
    aa8a:	4317      	orrs	r7, r2
    aa8c:	0b24      	lsrs	r4, r4, #12
    aa8e:	0d76      	lsrs	r6, r6, #21
    aa90:	401d      	ands	r5, r3
    aa92:	2100      	movs	r1, #0
    aa94:	0324      	lsls	r4, r4, #12
    aa96:	0b23      	lsrs	r3, r4, #12
    aa98:	0d0c      	lsrs	r4, r1, #20
    aa9a:	4a7e      	ldr	r2, [pc, #504]	; (ac94 <__aeabi_dsub+0x34c>)
    aa9c:	0524      	lsls	r4, r4, #20
    aa9e:	431c      	orrs	r4, r3
    aaa0:	4014      	ands	r4, r2
    aaa2:	0533      	lsls	r3, r6, #20
    aaa4:	4323      	orrs	r3, r4
    aaa6:	005b      	lsls	r3, r3, #1
    aaa8:	07ed      	lsls	r5, r5, #31
    aaaa:	085b      	lsrs	r3, r3, #1
    aaac:	432b      	orrs	r3, r5
    aaae:	0038      	movs	r0, r7
    aab0:	0019      	movs	r1, r3
    aab2:	bc1c      	pop	{r2, r3, r4}
    aab4:	4690      	mov	r8, r2
    aab6:	4699      	mov	r9, r3
    aab8:	46a2      	mov	sl, r4
    aaba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aabc:	2501      	movs	r5, #1
    aabe:	4643      	mov	r3, r8
    aac0:	0762      	lsls	r2, r4, #29
    aac2:	08ff      	lsrs	r7, r7, #3
    aac4:	4317      	orrs	r7, r2
    aac6:	08e4      	lsrs	r4, r4, #3
    aac8:	401d      	ands	r5, r3
    aaca:	4b70      	ldr	r3, [pc, #448]	; (ac8c <__aeabi_dsub+0x344>)
    aacc:	429e      	cmp	r6, r3
    aace:	d036      	beq.n	ab3e <__aeabi_dsub+0x1f6>
    aad0:	0324      	lsls	r4, r4, #12
    aad2:	0576      	lsls	r6, r6, #21
    aad4:	0b24      	lsrs	r4, r4, #12
    aad6:	0d76      	lsrs	r6, r6, #21
    aad8:	e7db      	b.n	aa92 <__aeabi_dsub+0x14a>
    aada:	4663      	mov	r3, ip
    aadc:	1af3      	subs	r3, r6, r3
    aade:	2b00      	cmp	r3, #0
    aae0:	dc00      	bgt.n	aae4 <__aeabi_dsub+0x19c>
    aae2:	e094      	b.n	ac0e <__aeabi_dsub+0x2c6>
    aae4:	4660      	mov	r0, ip
    aae6:	2800      	cmp	r0, #0
    aae8:	d035      	beq.n	ab56 <__aeabi_dsub+0x20e>
    aaea:	4868      	ldr	r0, [pc, #416]	; (ac8c <__aeabi_dsub+0x344>)
    aaec:	4286      	cmp	r6, r0
    aaee:	d0b1      	beq.n	aa54 <__aeabi_dsub+0x10c>
    aaf0:	2780      	movs	r7, #128	; 0x80
    aaf2:	043f      	lsls	r7, r7, #16
    aaf4:	4339      	orrs	r1, r7
    aaf6:	2b38      	cmp	r3, #56	; 0x38
    aaf8:	dc00      	bgt.n	aafc <__aeabi_dsub+0x1b4>
    aafa:	e0fd      	b.n	acf8 <__aeabi_dsub+0x3b0>
    aafc:	430a      	orrs	r2, r1
    aafe:	0017      	movs	r7, r2
    ab00:	2100      	movs	r1, #0
    ab02:	1e7a      	subs	r2, r7, #1
    ab04:	4197      	sbcs	r7, r2
    ab06:	4457      	add	r7, sl
    ab08:	4557      	cmp	r7, sl
    ab0a:	4180      	sbcs	r0, r0
    ab0c:	1909      	adds	r1, r1, r4
    ab0e:	4244      	negs	r4, r0
    ab10:	190c      	adds	r4, r1, r4
    ab12:	0223      	lsls	r3, r4, #8
    ab14:	d53a      	bpl.n	ab8c <__aeabi_dsub+0x244>
    ab16:	4b5d      	ldr	r3, [pc, #372]	; (ac8c <__aeabi_dsub+0x344>)
    ab18:	3601      	adds	r6, #1
    ab1a:	429e      	cmp	r6, r3
    ab1c:	d100      	bne.n	ab20 <__aeabi_dsub+0x1d8>
    ab1e:	e14b      	b.n	adb8 <__aeabi_dsub+0x470>
    ab20:	2201      	movs	r2, #1
    ab22:	4b5b      	ldr	r3, [pc, #364]	; (ac90 <__aeabi_dsub+0x348>)
    ab24:	401c      	ands	r4, r3
    ab26:	087b      	lsrs	r3, r7, #1
    ab28:	4017      	ands	r7, r2
    ab2a:	431f      	orrs	r7, r3
    ab2c:	07e2      	lsls	r2, r4, #31
    ab2e:	4317      	orrs	r7, r2
    ab30:	0864      	lsrs	r4, r4, #1
    ab32:	e78f      	b.n	aa54 <__aeabi_dsub+0x10c>
    ab34:	0008      	movs	r0, r1
    ab36:	4310      	orrs	r0, r2
    ab38:	d000      	beq.n	ab3c <__aeabi_dsub+0x1f4>
    ab3a:	e724      	b.n	a986 <__aeabi_dsub+0x3e>
    ab3c:	e721      	b.n	a982 <__aeabi_dsub+0x3a>
    ab3e:	0023      	movs	r3, r4
    ab40:	433b      	orrs	r3, r7
    ab42:	d100      	bne.n	ab46 <__aeabi_dsub+0x1fe>
    ab44:	e1b9      	b.n	aeba <__aeabi_dsub+0x572>
    ab46:	2280      	movs	r2, #128	; 0x80
    ab48:	0312      	lsls	r2, r2, #12
    ab4a:	4314      	orrs	r4, r2
    ab4c:	0324      	lsls	r4, r4, #12
    ab4e:	0b24      	lsrs	r4, r4, #12
    ab50:	e79f      	b.n	aa92 <__aeabi_dsub+0x14a>
    ab52:	002e      	movs	r6, r5
    ab54:	e77e      	b.n	aa54 <__aeabi_dsub+0x10c>
    ab56:	0008      	movs	r0, r1
    ab58:	4310      	orrs	r0, r2
    ab5a:	d100      	bne.n	ab5e <__aeabi_dsub+0x216>
    ab5c:	e0ca      	b.n	acf4 <__aeabi_dsub+0x3ac>
    ab5e:	1e58      	subs	r0, r3, #1
    ab60:	4684      	mov	ip, r0
    ab62:	2800      	cmp	r0, #0
    ab64:	d000      	beq.n	ab68 <__aeabi_dsub+0x220>
    ab66:	e0e7      	b.n	ad38 <__aeabi_dsub+0x3f0>
    ab68:	4452      	add	r2, sl
    ab6a:	4552      	cmp	r2, sl
    ab6c:	4180      	sbcs	r0, r0
    ab6e:	1864      	adds	r4, r4, r1
    ab70:	4240      	negs	r0, r0
    ab72:	1824      	adds	r4, r4, r0
    ab74:	0017      	movs	r7, r2
    ab76:	2601      	movs	r6, #1
    ab78:	0223      	lsls	r3, r4, #8
    ab7a:	d507      	bpl.n	ab8c <__aeabi_dsub+0x244>
    ab7c:	2602      	movs	r6, #2
    ab7e:	e7cf      	b.n	ab20 <__aeabi_dsub+0x1d8>
    ab80:	4664      	mov	r4, ip
    ab82:	432c      	orrs	r4, r5
    ab84:	d100      	bne.n	ab88 <__aeabi_dsub+0x240>
    ab86:	e1b3      	b.n	aef0 <__aeabi_dsub+0x5a8>
    ab88:	002c      	movs	r4, r5
    ab8a:	4667      	mov	r7, ip
    ab8c:	077b      	lsls	r3, r7, #29
    ab8e:	d000      	beq.n	ab92 <__aeabi_dsub+0x24a>
    ab90:	e762      	b.n	aa58 <__aeabi_dsub+0x110>
    ab92:	0763      	lsls	r3, r4, #29
    ab94:	08ff      	lsrs	r7, r7, #3
    ab96:	431f      	orrs	r7, r3
    ab98:	2501      	movs	r5, #1
    ab9a:	4643      	mov	r3, r8
    ab9c:	08e4      	lsrs	r4, r4, #3
    ab9e:	401d      	ands	r5, r3
    aba0:	e793      	b.n	aaca <__aeabi_dsub+0x182>
    aba2:	2d00      	cmp	r5, #0
    aba4:	d178      	bne.n	ac98 <__aeabi_dsub+0x350>
    aba6:	1c75      	adds	r5, r6, #1
    aba8:	056d      	lsls	r5, r5, #21
    abaa:	0d6d      	lsrs	r5, r5, #21
    abac:	2d01      	cmp	r5, #1
    abae:	dc00      	bgt.n	abb2 <__aeabi_dsub+0x26a>
    abb0:	e0f2      	b.n	ad98 <__aeabi_dsub+0x450>
    abb2:	4650      	mov	r0, sl
    abb4:	1a80      	subs	r0, r0, r2
    abb6:	4582      	cmp	sl, r0
    abb8:	41bf      	sbcs	r7, r7
    abba:	1a65      	subs	r5, r4, r1
    abbc:	427f      	negs	r7, r7
    abbe:	1bed      	subs	r5, r5, r7
    abc0:	4684      	mov	ip, r0
    abc2:	0228      	lsls	r0, r5, #8
    abc4:	d400      	bmi.n	abc8 <__aeabi_dsub+0x280>
    abc6:	e08c      	b.n	ace2 <__aeabi_dsub+0x39a>
    abc8:	4650      	mov	r0, sl
    abca:	1a17      	subs	r7, r2, r0
    abcc:	42ba      	cmp	r2, r7
    abce:	4192      	sbcs	r2, r2
    abd0:	1b0c      	subs	r4, r1, r4
    abd2:	4255      	negs	r5, r2
    abd4:	1b65      	subs	r5, r4, r5
    abd6:	4698      	mov	r8, r3
    abd8:	e714      	b.n	aa04 <__aeabi_dsub+0xbc>
    abda:	2501      	movs	r5, #1
    abdc:	4643      	mov	r3, r8
    abde:	2400      	movs	r4, #0
    abe0:	401d      	ands	r5, r3
    abe2:	2700      	movs	r7, #0
    abe4:	e755      	b.n	aa92 <__aeabi_dsub+0x14a>
    abe6:	4c2a      	ldr	r4, [pc, #168]	; (ac90 <__aeabi_dsub+0x348>)
    abe8:	1af6      	subs	r6, r6, r3
    abea:	402c      	ands	r4, r5
    abec:	e732      	b.n	aa54 <__aeabi_dsub+0x10c>
    abee:	003d      	movs	r5, r7
    abf0:	3828      	subs	r0, #40	; 0x28
    abf2:	4085      	lsls	r5, r0
    abf4:	2700      	movs	r7, #0
    abf6:	e717      	b.n	aa28 <__aeabi_dsub+0xe0>
    abf8:	0038      	movs	r0, r7
    abfa:	f000 fb45 	bl	b288 <__clzsi2>
    abfe:	3020      	adds	r0, #32
    ac00:	e706      	b.n	aa10 <__aeabi_dsub+0xc8>
    ac02:	430a      	orrs	r2, r1
    ac04:	0017      	movs	r7, r2
    ac06:	2100      	movs	r1, #0
    ac08:	1e7a      	subs	r2, r7, #1
    ac0a:	4197      	sbcs	r7, r2
    ac0c:	e6ee      	b.n	a9ec <__aeabi_dsub+0xa4>
    ac0e:	2b00      	cmp	r3, #0
    ac10:	d000      	beq.n	ac14 <__aeabi_dsub+0x2cc>
    ac12:	e0e5      	b.n	ade0 <__aeabi_dsub+0x498>
    ac14:	1c73      	adds	r3, r6, #1
    ac16:	469c      	mov	ip, r3
    ac18:	055b      	lsls	r3, r3, #21
    ac1a:	0d5b      	lsrs	r3, r3, #21
    ac1c:	2b01      	cmp	r3, #1
    ac1e:	dc00      	bgt.n	ac22 <__aeabi_dsub+0x2da>
    ac20:	e09f      	b.n	ad62 <__aeabi_dsub+0x41a>
    ac22:	4b1a      	ldr	r3, [pc, #104]	; (ac8c <__aeabi_dsub+0x344>)
    ac24:	459c      	cmp	ip, r3
    ac26:	d100      	bne.n	ac2a <__aeabi_dsub+0x2e2>
    ac28:	e0c5      	b.n	adb6 <__aeabi_dsub+0x46e>
    ac2a:	4452      	add	r2, sl
    ac2c:	4552      	cmp	r2, sl
    ac2e:	4180      	sbcs	r0, r0
    ac30:	1864      	adds	r4, r4, r1
    ac32:	4240      	negs	r0, r0
    ac34:	1824      	adds	r4, r4, r0
    ac36:	07e7      	lsls	r7, r4, #31
    ac38:	0852      	lsrs	r2, r2, #1
    ac3a:	4317      	orrs	r7, r2
    ac3c:	0864      	lsrs	r4, r4, #1
    ac3e:	4666      	mov	r6, ip
    ac40:	e708      	b.n	aa54 <__aeabi_dsub+0x10c>
    ac42:	4812      	ldr	r0, [pc, #72]	; (ac8c <__aeabi_dsub+0x344>)
    ac44:	4285      	cmp	r5, r0
    ac46:	d100      	bne.n	ac4a <__aeabi_dsub+0x302>
    ac48:	e085      	b.n	ad56 <__aeabi_dsub+0x40e>
    ac4a:	001d      	movs	r5, r3
    ac4c:	e6bc      	b.n	a9c8 <__aeabi_dsub+0x80>
    ac4e:	0029      	movs	r1, r5
    ac50:	3e1f      	subs	r6, #31
    ac52:	40f1      	lsrs	r1, r6
    ac54:	2b20      	cmp	r3, #32
    ac56:	d100      	bne.n	ac5a <__aeabi_dsub+0x312>
    ac58:	e07f      	b.n	ad5a <__aeabi_dsub+0x412>
    ac5a:	2240      	movs	r2, #64	; 0x40
    ac5c:	1ad3      	subs	r3, r2, r3
    ac5e:	409d      	lsls	r5, r3
    ac60:	432f      	orrs	r7, r5
    ac62:	1e7d      	subs	r5, r7, #1
    ac64:	41af      	sbcs	r7, r5
    ac66:	2400      	movs	r4, #0
    ac68:	430f      	orrs	r7, r1
    ac6a:	2600      	movs	r6, #0
    ac6c:	e78e      	b.n	ab8c <__aeabi_dsub+0x244>
    ac6e:	002b      	movs	r3, r5
    ac70:	000f      	movs	r7, r1
    ac72:	3b20      	subs	r3, #32
    ac74:	40df      	lsrs	r7, r3
    ac76:	2d20      	cmp	r5, #32
    ac78:	d071      	beq.n	ad5e <__aeabi_dsub+0x416>
    ac7a:	2340      	movs	r3, #64	; 0x40
    ac7c:	1b5d      	subs	r5, r3, r5
    ac7e:	40a9      	lsls	r1, r5
    ac80:	430a      	orrs	r2, r1
    ac82:	1e51      	subs	r1, r2, #1
    ac84:	418a      	sbcs	r2, r1
    ac86:	2100      	movs	r1, #0
    ac88:	4317      	orrs	r7, r2
    ac8a:	e6af      	b.n	a9ec <__aeabi_dsub+0xa4>
    ac8c:	000007ff 	.word	0x000007ff
    ac90:	ff7fffff 	.word	0xff7fffff
    ac94:	800fffff 	.word	0x800fffff
    ac98:	2e00      	cmp	r6, #0
    ac9a:	d03e      	beq.n	ad1a <__aeabi_dsub+0x3d2>
    ac9c:	4eb3      	ldr	r6, [pc, #716]	; (af6c <__aeabi_dsub+0x624>)
    ac9e:	45b4      	cmp	ip, r6
    aca0:	d045      	beq.n	ad2e <__aeabi_dsub+0x3e6>
    aca2:	2680      	movs	r6, #128	; 0x80
    aca4:	0436      	lsls	r6, r6, #16
    aca6:	426d      	negs	r5, r5
    aca8:	4334      	orrs	r4, r6
    acaa:	2d38      	cmp	r5, #56	; 0x38
    acac:	dd00      	ble.n	acb0 <__aeabi_dsub+0x368>
    acae:	e0a8      	b.n	ae02 <__aeabi_dsub+0x4ba>
    acb0:	2d1f      	cmp	r5, #31
    acb2:	dd00      	ble.n	acb6 <__aeabi_dsub+0x36e>
    acb4:	e11f      	b.n	aef6 <__aeabi_dsub+0x5ae>
    acb6:	2620      	movs	r6, #32
    acb8:	0027      	movs	r7, r4
    acba:	4650      	mov	r0, sl
    acbc:	1b76      	subs	r6, r6, r5
    acbe:	40b7      	lsls	r7, r6
    acc0:	40e8      	lsrs	r0, r5
    acc2:	4307      	orrs	r7, r0
    acc4:	4650      	mov	r0, sl
    acc6:	40b0      	lsls	r0, r6
    acc8:	1e46      	subs	r6, r0, #1
    acca:	41b0      	sbcs	r0, r6
    accc:	40ec      	lsrs	r4, r5
    acce:	4338      	orrs	r0, r7
    acd0:	1a17      	subs	r7, r2, r0
    acd2:	42ba      	cmp	r2, r7
    acd4:	4192      	sbcs	r2, r2
    acd6:	1b0c      	subs	r4, r1, r4
    acd8:	4252      	negs	r2, r2
    acda:	1aa4      	subs	r4, r4, r2
    acdc:	4666      	mov	r6, ip
    acde:	4698      	mov	r8, r3
    ace0:	e68b      	b.n	a9fa <__aeabi_dsub+0xb2>
    ace2:	4664      	mov	r4, ip
    ace4:	4667      	mov	r7, ip
    ace6:	432c      	orrs	r4, r5
    ace8:	d000      	beq.n	acec <__aeabi_dsub+0x3a4>
    acea:	e68b      	b.n	aa04 <__aeabi_dsub+0xbc>
    acec:	2500      	movs	r5, #0
    acee:	2600      	movs	r6, #0
    acf0:	2700      	movs	r7, #0
    acf2:	e6ea      	b.n	aaca <__aeabi_dsub+0x182>
    acf4:	001e      	movs	r6, r3
    acf6:	e6ad      	b.n	aa54 <__aeabi_dsub+0x10c>
    acf8:	2b1f      	cmp	r3, #31
    acfa:	dc60      	bgt.n	adbe <__aeabi_dsub+0x476>
    acfc:	2720      	movs	r7, #32
    acfe:	1af8      	subs	r0, r7, r3
    ad00:	000f      	movs	r7, r1
    ad02:	4684      	mov	ip, r0
    ad04:	4087      	lsls	r7, r0
    ad06:	0010      	movs	r0, r2
    ad08:	40d8      	lsrs	r0, r3
    ad0a:	4307      	orrs	r7, r0
    ad0c:	4660      	mov	r0, ip
    ad0e:	4082      	lsls	r2, r0
    ad10:	1e50      	subs	r0, r2, #1
    ad12:	4182      	sbcs	r2, r0
    ad14:	40d9      	lsrs	r1, r3
    ad16:	4317      	orrs	r7, r2
    ad18:	e6f5      	b.n	ab06 <__aeabi_dsub+0x1be>
    ad1a:	0026      	movs	r6, r4
    ad1c:	4650      	mov	r0, sl
    ad1e:	4306      	orrs	r6, r0
    ad20:	d005      	beq.n	ad2e <__aeabi_dsub+0x3e6>
    ad22:	43ed      	mvns	r5, r5
    ad24:	2d00      	cmp	r5, #0
    ad26:	d0d3      	beq.n	acd0 <__aeabi_dsub+0x388>
    ad28:	4e90      	ldr	r6, [pc, #576]	; (af6c <__aeabi_dsub+0x624>)
    ad2a:	45b4      	cmp	ip, r6
    ad2c:	d1bd      	bne.n	acaa <__aeabi_dsub+0x362>
    ad2e:	000c      	movs	r4, r1
    ad30:	0017      	movs	r7, r2
    ad32:	4666      	mov	r6, ip
    ad34:	4698      	mov	r8, r3
    ad36:	e68d      	b.n	aa54 <__aeabi_dsub+0x10c>
    ad38:	488c      	ldr	r0, [pc, #560]	; (af6c <__aeabi_dsub+0x624>)
    ad3a:	4283      	cmp	r3, r0
    ad3c:	d00b      	beq.n	ad56 <__aeabi_dsub+0x40e>
    ad3e:	4663      	mov	r3, ip
    ad40:	e6d9      	b.n	aaf6 <__aeabi_dsub+0x1ae>
    ad42:	2d00      	cmp	r5, #0
    ad44:	d000      	beq.n	ad48 <__aeabi_dsub+0x400>
    ad46:	e096      	b.n	ae76 <__aeabi_dsub+0x52e>
    ad48:	0008      	movs	r0, r1
    ad4a:	4310      	orrs	r0, r2
    ad4c:	d100      	bne.n	ad50 <__aeabi_dsub+0x408>
    ad4e:	e0e2      	b.n	af16 <__aeabi_dsub+0x5ce>
    ad50:	000c      	movs	r4, r1
    ad52:	0017      	movs	r7, r2
    ad54:	4698      	mov	r8, r3
    ad56:	4e85      	ldr	r6, [pc, #532]	; (af6c <__aeabi_dsub+0x624>)
    ad58:	e67c      	b.n	aa54 <__aeabi_dsub+0x10c>
    ad5a:	2500      	movs	r5, #0
    ad5c:	e780      	b.n	ac60 <__aeabi_dsub+0x318>
    ad5e:	2100      	movs	r1, #0
    ad60:	e78e      	b.n	ac80 <__aeabi_dsub+0x338>
    ad62:	0023      	movs	r3, r4
    ad64:	4650      	mov	r0, sl
    ad66:	4303      	orrs	r3, r0
    ad68:	2e00      	cmp	r6, #0
    ad6a:	d000      	beq.n	ad6e <__aeabi_dsub+0x426>
    ad6c:	e0a8      	b.n	aec0 <__aeabi_dsub+0x578>
    ad6e:	2b00      	cmp	r3, #0
    ad70:	d100      	bne.n	ad74 <__aeabi_dsub+0x42c>
    ad72:	e0de      	b.n	af32 <__aeabi_dsub+0x5ea>
    ad74:	000b      	movs	r3, r1
    ad76:	4313      	orrs	r3, r2
    ad78:	d100      	bne.n	ad7c <__aeabi_dsub+0x434>
    ad7a:	e66b      	b.n	aa54 <__aeabi_dsub+0x10c>
    ad7c:	4452      	add	r2, sl
    ad7e:	4552      	cmp	r2, sl
    ad80:	4180      	sbcs	r0, r0
    ad82:	1864      	adds	r4, r4, r1
    ad84:	4240      	negs	r0, r0
    ad86:	1824      	adds	r4, r4, r0
    ad88:	0017      	movs	r7, r2
    ad8a:	0223      	lsls	r3, r4, #8
    ad8c:	d400      	bmi.n	ad90 <__aeabi_dsub+0x448>
    ad8e:	e6fd      	b.n	ab8c <__aeabi_dsub+0x244>
    ad90:	4b77      	ldr	r3, [pc, #476]	; (af70 <__aeabi_dsub+0x628>)
    ad92:	4666      	mov	r6, ip
    ad94:	401c      	ands	r4, r3
    ad96:	e65d      	b.n	aa54 <__aeabi_dsub+0x10c>
    ad98:	0025      	movs	r5, r4
    ad9a:	4650      	mov	r0, sl
    ad9c:	4305      	orrs	r5, r0
    ad9e:	2e00      	cmp	r6, #0
    ada0:	d1cf      	bne.n	ad42 <__aeabi_dsub+0x3fa>
    ada2:	2d00      	cmp	r5, #0
    ada4:	d14f      	bne.n	ae46 <__aeabi_dsub+0x4fe>
    ada6:	000c      	movs	r4, r1
    ada8:	4314      	orrs	r4, r2
    adaa:	d100      	bne.n	adae <__aeabi_dsub+0x466>
    adac:	e0a0      	b.n	aef0 <__aeabi_dsub+0x5a8>
    adae:	000c      	movs	r4, r1
    adb0:	0017      	movs	r7, r2
    adb2:	4698      	mov	r8, r3
    adb4:	e64e      	b.n	aa54 <__aeabi_dsub+0x10c>
    adb6:	4666      	mov	r6, ip
    adb8:	2400      	movs	r4, #0
    adba:	2700      	movs	r7, #0
    adbc:	e685      	b.n	aaca <__aeabi_dsub+0x182>
    adbe:	001f      	movs	r7, r3
    adc0:	0008      	movs	r0, r1
    adc2:	3f20      	subs	r7, #32
    adc4:	40f8      	lsrs	r0, r7
    adc6:	0007      	movs	r7, r0
    adc8:	2b20      	cmp	r3, #32
    adca:	d100      	bne.n	adce <__aeabi_dsub+0x486>
    adcc:	e08e      	b.n	aeec <__aeabi_dsub+0x5a4>
    adce:	2040      	movs	r0, #64	; 0x40
    add0:	1ac3      	subs	r3, r0, r3
    add2:	4099      	lsls	r1, r3
    add4:	430a      	orrs	r2, r1
    add6:	1e51      	subs	r1, r2, #1
    add8:	418a      	sbcs	r2, r1
    adda:	2100      	movs	r1, #0
    addc:	4317      	orrs	r7, r2
    adde:	e692      	b.n	ab06 <__aeabi_dsub+0x1be>
    ade0:	2e00      	cmp	r6, #0
    ade2:	d114      	bne.n	ae0e <__aeabi_dsub+0x4c6>
    ade4:	0026      	movs	r6, r4
    ade6:	4650      	mov	r0, sl
    ade8:	4306      	orrs	r6, r0
    adea:	d062      	beq.n	aeb2 <__aeabi_dsub+0x56a>
    adec:	43db      	mvns	r3, r3
    adee:	2b00      	cmp	r3, #0
    adf0:	d15c      	bne.n	aeac <__aeabi_dsub+0x564>
    adf2:	1887      	adds	r7, r0, r2
    adf4:	4297      	cmp	r7, r2
    adf6:	4192      	sbcs	r2, r2
    adf8:	1864      	adds	r4, r4, r1
    adfa:	4252      	negs	r2, r2
    adfc:	18a4      	adds	r4, r4, r2
    adfe:	4666      	mov	r6, ip
    ae00:	e687      	b.n	ab12 <__aeabi_dsub+0x1ca>
    ae02:	4650      	mov	r0, sl
    ae04:	4320      	orrs	r0, r4
    ae06:	1e44      	subs	r4, r0, #1
    ae08:	41a0      	sbcs	r0, r4
    ae0a:	2400      	movs	r4, #0
    ae0c:	e760      	b.n	acd0 <__aeabi_dsub+0x388>
    ae0e:	4e57      	ldr	r6, [pc, #348]	; (af6c <__aeabi_dsub+0x624>)
    ae10:	45b4      	cmp	ip, r6
    ae12:	d04e      	beq.n	aeb2 <__aeabi_dsub+0x56a>
    ae14:	2680      	movs	r6, #128	; 0x80
    ae16:	0436      	lsls	r6, r6, #16
    ae18:	425b      	negs	r3, r3
    ae1a:	4334      	orrs	r4, r6
    ae1c:	2b38      	cmp	r3, #56	; 0x38
    ae1e:	dd00      	ble.n	ae22 <__aeabi_dsub+0x4da>
    ae20:	e07f      	b.n	af22 <__aeabi_dsub+0x5da>
    ae22:	2b1f      	cmp	r3, #31
    ae24:	dd00      	ble.n	ae28 <__aeabi_dsub+0x4e0>
    ae26:	e08b      	b.n	af40 <__aeabi_dsub+0x5f8>
    ae28:	2620      	movs	r6, #32
    ae2a:	0027      	movs	r7, r4
    ae2c:	4650      	mov	r0, sl
    ae2e:	1af6      	subs	r6, r6, r3
    ae30:	40b7      	lsls	r7, r6
    ae32:	40d8      	lsrs	r0, r3
    ae34:	4307      	orrs	r7, r0
    ae36:	4650      	mov	r0, sl
    ae38:	40b0      	lsls	r0, r6
    ae3a:	1e46      	subs	r6, r0, #1
    ae3c:	41b0      	sbcs	r0, r6
    ae3e:	4307      	orrs	r7, r0
    ae40:	40dc      	lsrs	r4, r3
    ae42:	18bf      	adds	r7, r7, r2
    ae44:	e7d6      	b.n	adf4 <__aeabi_dsub+0x4ac>
    ae46:	000d      	movs	r5, r1
    ae48:	4315      	orrs	r5, r2
    ae4a:	d100      	bne.n	ae4e <__aeabi_dsub+0x506>
    ae4c:	e602      	b.n	aa54 <__aeabi_dsub+0x10c>
    ae4e:	4650      	mov	r0, sl
    ae50:	1a80      	subs	r0, r0, r2
    ae52:	4582      	cmp	sl, r0
    ae54:	41bf      	sbcs	r7, r7
    ae56:	1a65      	subs	r5, r4, r1
    ae58:	427f      	negs	r7, r7
    ae5a:	1bed      	subs	r5, r5, r7
    ae5c:	4684      	mov	ip, r0
    ae5e:	0228      	lsls	r0, r5, #8
    ae60:	d400      	bmi.n	ae64 <__aeabi_dsub+0x51c>
    ae62:	e68d      	b.n	ab80 <__aeabi_dsub+0x238>
    ae64:	4650      	mov	r0, sl
    ae66:	1a17      	subs	r7, r2, r0
    ae68:	42ba      	cmp	r2, r7
    ae6a:	4192      	sbcs	r2, r2
    ae6c:	1b0c      	subs	r4, r1, r4
    ae6e:	4252      	negs	r2, r2
    ae70:	1aa4      	subs	r4, r4, r2
    ae72:	4698      	mov	r8, r3
    ae74:	e5ee      	b.n	aa54 <__aeabi_dsub+0x10c>
    ae76:	000d      	movs	r5, r1
    ae78:	4315      	orrs	r5, r2
    ae7a:	d100      	bne.n	ae7e <__aeabi_dsub+0x536>
    ae7c:	e76b      	b.n	ad56 <__aeabi_dsub+0x40e>
    ae7e:	4650      	mov	r0, sl
    ae80:	0767      	lsls	r7, r4, #29
    ae82:	08c0      	lsrs	r0, r0, #3
    ae84:	4307      	orrs	r7, r0
    ae86:	2080      	movs	r0, #128	; 0x80
    ae88:	08e4      	lsrs	r4, r4, #3
    ae8a:	0300      	lsls	r0, r0, #12
    ae8c:	4204      	tst	r4, r0
    ae8e:	d007      	beq.n	aea0 <__aeabi_dsub+0x558>
    ae90:	08cd      	lsrs	r5, r1, #3
    ae92:	4205      	tst	r5, r0
    ae94:	d104      	bne.n	aea0 <__aeabi_dsub+0x558>
    ae96:	002c      	movs	r4, r5
    ae98:	4698      	mov	r8, r3
    ae9a:	08d7      	lsrs	r7, r2, #3
    ae9c:	0749      	lsls	r1, r1, #29
    ae9e:	430f      	orrs	r7, r1
    aea0:	0f7b      	lsrs	r3, r7, #29
    aea2:	00e4      	lsls	r4, r4, #3
    aea4:	431c      	orrs	r4, r3
    aea6:	00ff      	lsls	r7, r7, #3
    aea8:	4e30      	ldr	r6, [pc, #192]	; (af6c <__aeabi_dsub+0x624>)
    aeaa:	e5d3      	b.n	aa54 <__aeabi_dsub+0x10c>
    aeac:	4e2f      	ldr	r6, [pc, #188]	; (af6c <__aeabi_dsub+0x624>)
    aeae:	45b4      	cmp	ip, r6
    aeb0:	d1b4      	bne.n	ae1c <__aeabi_dsub+0x4d4>
    aeb2:	000c      	movs	r4, r1
    aeb4:	0017      	movs	r7, r2
    aeb6:	4666      	mov	r6, ip
    aeb8:	e5cc      	b.n	aa54 <__aeabi_dsub+0x10c>
    aeba:	2700      	movs	r7, #0
    aebc:	2400      	movs	r4, #0
    aebe:	e5e8      	b.n	aa92 <__aeabi_dsub+0x14a>
    aec0:	2b00      	cmp	r3, #0
    aec2:	d039      	beq.n	af38 <__aeabi_dsub+0x5f0>
    aec4:	000b      	movs	r3, r1
    aec6:	4313      	orrs	r3, r2
    aec8:	d100      	bne.n	aecc <__aeabi_dsub+0x584>
    aeca:	e744      	b.n	ad56 <__aeabi_dsub+0x40e>
    aecc:	08c0      	lsrs	r0, r0, #3
    aece:	0767      	lsls	r7, r4, #29
    aed0:	4307      	orrs	r7, r0
    aed2:	2080      	movs	r0, #128	; 0x80
    aed4:	08e4      	lsrs	r4, r4, #3
    aed6:	0300      	lsls	r0, r0, #12
    aed8:	4204      	tst	r4, r0
    aeda:	d0e1      	beq.n	aea0 <__aeabi_dsub+0x558>
    aedc:	08cb      	lsrs	r3, r1, #3
    aede:	4203      	tst	r3, r0
    aee0:	d1de      	bne.n	aea0 <__aeabi_dsub+0x558>
    aee2:	08d7      	lsrs	r7, r2, #3
    aee4:	0749      	lsls	r1, r1, #29
    aee6:	430f      	orrs	r7, r1
    aee8:	001c      	movs	r4, r3
    aeea:	e7d9      	b.n	aea0 <__aeabi_dsub+0x558>
    aeec:	2100      	movs	r1, #0
    aeee:	e771      	b.n	add4 <__aeabi_dsub+0x48c>
    aef0:	2500      	movs	r5, #0
    aef2:	2700      	movs	r7, #0
    aef4:	e5e9      	b.n	aaca <__aeabi_dsub+0x182>
    aef6:	002e      	movs	r6, r5
    aef8:	0027      	movs	r7, r4
    aefa:	3e20      	subs	r6, #32
    aefc:	40f7      	lsrs	r7, r6
    aefe:	2d20      	cmp	r5, #32
    af00:	d02f      	beq.n	af62 <__aeabi_dsub+0x61a>
    af02:	2640      	movs	r6, #64	; 0x40
    af04:	1b75      	subs	r5, r6, r5
    af06:	40ac      	lsls	r4, r5
    af08:	4650      	mov	r0, sl
    af0a:	4320      	orrs	r0, r4
    af0c:	1e44      	subs	r4, r0, #1
    af0e:	41a0      	sbcs	r0, r4
    af10:	2400      	movs	r4, #0
    af12:	4338      	orrs	r0, r7
    af14:	e6dc      	b.n	acd0 <__aeabi_dsub+0x388>
    af16:	2480      	movs	r4, #128	; 0x80
    af18:	2500      	movs	r5, #0
    af1a:	0324      	lsls	r4, r4, #12
    af1c:	4e13      	ldr	r6, [pc, #76]	; (af6c <__aeabi_dsub+0x624>)
    af1e:	2700      	movs	r7, #0
    af20:	e5d3      	b.n	aaca <__aeabi_dsub+0x182>
    af22:	4650      	mov	r0, sl
    af24:	4320      	orrs	r0, r4
    af26:	0007      	movs	r7, r0
    af28:	1e78      	subs	r0, r7, #1
    af2a:	4187      	sbcs	r7, r0
    af2c:	2400      	movs	r4, #0
    af2e:	18bf      	adds	r7, r7, r2
    af30:	e760      	b.n	adf4 <__aeabi_dsub+0x4ac>
    af32:	000c      	movs	r4, r1
    af34:	0017      	movs	r7, r2
    af36:	e58d      	b.n	aa54 <__aeabi_dsub+0x10c>
    af38:	000c      	movs	r4, r1
    af3a:	0017      	movs	r7, r2
    af3c:	4e0b      	ldr	r6, [pc, #44]	; (af6c <__aeabi_dsub+0x624>)
    af3e:	e589      	b.n	aa54 <__aeabi_dsub+0x10c>
    af40:	001e      	movs	r6, r3
    af42:	0027      	movs	r7, r4
    af44:	3e20      	subs	r6, #32
    af46:	40f7      	lsrs	r7, r6
    af48:	2b20      	cmp	r3, #32
    af4a:	d00c      	beq.n	af66 <__aeabi_dsub+0x61e>
    af4c:	2640      	movs	r6, #64	; 0x40
    af4e:	1af3      	subs	r3, r6, r3
    af50:	409c      	lsls	r4, r3
    af52:	4650      	mov	r0, sl
    af54:	4320      	orrs	r0, r4
    af56:	1e44      	subs	r4, r0, #1
    af58:	41a0      	sbcs	r0, r4
    af5a:	4307      	orrs	r7, r0
    af5c:	2400      	movs	r4, #0
    af5e:	18bf      	adds	r7, r7, r2
    af60:	e748      	b.n	adf4 <__aeabi_dsub+0x4ac>
    af62:	2400      	movs	r4, #0
    af64:	e7d0      	b.n	af08 <__aeabi_dsub+0x5c0>
    af66:	2400      	movs	r4, #0
    af68:	e7f3      	b.n	af52 <__aeabi_dsub+0x60a>
    af6a:	46c0      	nop			; (mov r8, r8)
    af6c:	000007ff 	.word	0x000007ff
    af70:	ff7fffff 	.word	0xff7fffff

0000af74 <__aeabi_d2iz>:
    af74:	b530      	push	{r4, r5, lr}
    af76:	4d13      	ldr	r5, [pc, #76]	; (afc4 <__aeabi_d2iz+0x50>)
    af78:	030a      	lsls	r2, r1, #12
    af7a:	004b      	lsls	r3, r1, #1
    af7c:	0b12      	lsrs	r2, r2, #12
    af7e:	0d5b      	lsrs	r3, r3, #21
    af80:	0fc9      	lsrs	r1, r1, #31
    af82:	2400      	movs	r4, #0
    af84:	42ab      	cmp	r3, r5
    af86:	dd10      	ble.n	afaa <__aeabi_d2iz+0x36>
    af88:	4c0f      	ldr	r4, [pc, #60]	; (afc8 <__aeabi_d2iz+0x54>)
    af8a:	42a3      	cmp	r3, r4
    af8c:	dc0f      	bgt.n	afae <__aeabi_d2iz+0x3a>
    af8e:	2480      	movs	r4, #128	; 0x80
    af90:	4d0e      	ldr	r5, [pc, #56]	; (afcc <__aeabi_d2iz+0x58>)
    af92:	0364      	lsls	r4, r4, #13
    af94:	4322      	orrs	r2, r4
    af96:	1aed      	subs	r5, r5, r3
    af98:	2d1f      	cmp	r5, #31
    af9a:	dd0b      	ble.n	afb4 <__aeabi_d2iz+0x40>
    af9c:	480c      	ldr	r0, [pc, #48]	; (afd0 <__aeabi_d2iz+0x5c>)
    af9e:	1ac3      	subs	r3, r0, r3
    afa0:	40da      	lsrs	r2, r3
    afa2:	4254      	negs	r4, r2
    afa4:	2900      	cmp	r1, #0
    afa6:	d100      	bne.n	afaa <__aeabi_d2iz+0x36>
    afa8:	0014      	movs	r4, r2
    afaa:	0020      	movs	r0, r4
    afac:	bd30      	pop	{r4, r5, pc}
    afae:	4b09      	ldr	r3, [pc, #36]	; (afd4 <__aeabi_d2iz+0x60>)
    afb0:	18cc      	adds	r4, r1, r3
    afb2:	e7fa      	b.n	afaa <__aeabi_d2iz+0x36>
    afb4:	4c08      	ldr	r4, [pc, #32]	; (afd8 <__aeabi_d2iz+0x64>)
    afb6:	40e8      	lsrs	r0, r5
    afb8:	46a4      	mov	ip, r4
    afba:	4463      	add	r3, ip
    afbc:	409a      	lsls	r2, r3
    afbe:	4302      	orrs	r2, r0
    afc0:	e7ef      	b.n	afa2 <__aeabi_d2iz+0x2e>
    afc2:	46c0      	nop			; (mov r8, r8)
    afc4:	000003fe 	.word	0x000003fe
    afc8:	0000041d 	.word	0x0000041d
    afcc:	00000433 	.word	0x00000433
    afd0:	00000413 	.word	0x00000413
    afd4:	7fffffff 	.word	0x7fffffff
    afd8:	fffffbed 	.word	0xfffffbed

0000afdc <__aeabi_i2d>:
    afdc:	b570      	push	{r4, r5, r6, lr}
    afde:	2800      	cmp	r0, #0
    afe0:	d030      	beq.n	b044 <__aeabi_i2d+0x68>
    afe2:	17c3      	asrs	r3, r0, #31
    afe4:	18c4      	adds	r4, r0, r3
    afe6:	405c      	eors	r4, r3
    afe8:	0fc5      	lsrs	r5, r0, #31
    afea:	0020      	movs	r0, r4
    afec:	f000 f94c 	bl	b288 <__clzsi2>
    aff0:	4b17      	ldr	r3, [pc, #92]	; (b050 <__aeabi_i2d+0x74>)
    aff2:	4a18      	ldr	r2, [pc, #96]	; (b054 <__aeabi_i2d+0x78>)
    aff4:	1a1b      	subs	r3, r3, r0
    aff6:	1ad2      	subs	r2, r2, r3
    aff8:	2a1f      	cmp	r2, #31
    affa:	dd18      	ble.n	b02e <__aeabi_i2d+0x52>
    affc:	4a16      	ldr	r2, [pc, #88]	; (b058 <__aeabi_i2d+0x7c>)
    affe:	1ad2      	subs	r2, r2, r3
    b000:	4094      	lsls	r4, r2
    b002:	2200      	movs	r2, #0
    b004:	0324      	lsls	r4, r4, #12
    b006:	055b      	lsls	r3, r3, #21
    b008:	0b24      	lsrs	r4, r4, #12
    b00a:	0d5b      	lsrs	r3, r3, #21
    b00c:	2100      	movs	r1, #0
    b00e:	0010      	movs	r0, r2
    b010:	0324      	lsls	r4, r4, #12
    b012:	0d0a      	lsrs	r2, r1, #20
    b014:	0b24      	lsrs	r4, r4, #12
    b016:	0512      	lsls	r2, r2, #20
    b018:	4322      	orrs	r2, r4
    b01a:	4c10      	ldr	r4, [pc, #64]	; (b05c <__aeabi_i2d+0x80>)
    b01c:	051b      	lsls	r3, r3, #20
    b01e:	4022      	ands	r2, r4
    b020:	4313      	orrs	r3, r2
    b022:	005b      	lsls	r3, r3, #1
    b024:	07ed      	lsls	r5, r5, #31
    b026:	085b      	lsrs	r3, r3, #1
    b028:	432b      	orrs	r3, r5
    b02a:	0019      	movs	r1, r3
    b02c:	bd70      	pop	{r4, r5, r6, pc}
    b02e:	0021      	movs	r1, r4
    b030:	4091      	lsls	r1, r2
    b032:	000a      	movs	r2, r1
    b034:	210b      	movs	r1, #11
    b036:	1a08      	subs	r0, r1, r0
    b038:	40c4      	lsrs	r4, r0
    b03a:	055b      	lsls	r3, r3, #21
    b03c:	0324      	lsls	r4, r4, #12
    b03e:	0b24      	lsrs	r4, r4, #12
    b040:	0d5b      	lsrs	r3, r3, #21
    b042:	e7e3      	b.n	b00c <__aeabi_i2d+0x30>
    b044:	2500      	movs	r5, #0
    b046:	2300      	movs	r3, #0
    b048:	2400      	movs	r4, #0
    b04a:	2200      	movs	r2, #0
    b04c:	e7de      	b.n	b00c <__aeabi_i2d+0x30>
    b04e:	46c0      	nop			; (mov r8, r8)
    b050:	0000041e 	.word	0x0000041e
    b054:	00000433 	.word	0x00000433
    b058:	00000413 	.word	0x00000413
    b05c:	800fffff 	.word	0x800fffff

0000b060 <__aeabi_ui2d>:
    b060:	b510      	push	{r4, lr}
    b062:	1e04      	subs	r4, r0, #0
    b064:	d028      	beq.n	b0b8 <__aeabi_ui2d+0x58>
    b066:	f000 f90f 	bl	b288 <__clzsi2>
    b06a:	4b15      	ldr	r3, [pc, #84]	; (b0c0 <__aeabi_ui2d+0x60>)
    b06c:	4a15      	ldr	r2, [pc, #84]	; (b0c4 <__aeabi_ui2d+0x64>)
    b06e:	1a1b      	subs	r3, r3, r0
    b070:	1ad2      	subs	r2, r2, r3
    b072:	2a1f      	cmp	r2, #31
    b074:	dd15      	ble.n	b0a2 <__aeabi_ui2d+0x42>
    b076:	4a14      	ldr	r2, [pc, #80]	; (b0c8 <__aeabi_ui2d+0x68>)
    b078:	1ad2      	subs	r2, r2, r3
    b07a:	4094      	lsls	r4, r2
    b07c:	2200      	movs	r2, #0
    b07e:	0324      	lsls	r4, r4, #12
    b080:	055b      	lsls	r3, r3, #21
    b082:	0b24      	lsrs	r4, r4, #12
    b084:	0d5b      	lsrs	r3, r3, #21
    b086:	2100      	movs	r1, #0
    b088:	0010      	movs	r0, r2
    b08a:	0324      	lsls	r4, r4, #12
    b08c:	0d0a      	lsrs	r2, r1, #20
    b08e:	0b24      	lsrs	r4, r4, #12
    b090:	0512      	lsls	r2, r2, #20
    b092:	4322      	orrs	r2, r4
    b094:	4c0d      	ldr	r4, [pc, #52]	; (b0cc <__aeabi_ui2d+0x6c>)
    b096:	051b      	lsls	r3, r3, #20
    b098:	4022      	ands	r2, r4
    b09a:	4313      	orrs	r3, r2
    b09c:	005b      	lsls	r3, r3, #1
    b09e:	0859      	lsrs	r1, r3, #1
    b0a0:	bd10      	pop	{r4, pc}
    b0a2:	0021      	movs	r1, r4
    b0a4:	4091      	lsls	r1, r2
    b0a6:	000a      	movs	r2, r1
    b0a8:	210b      	movs	r1, #11
    b0aa:	1a08      	subs	r0, r1, r0
    b0ac:	40c4      	lsrs	r4, r0
    b0ae:	055b      	lsls	r3, r3, #21
    b0b0:	0324      	lsls	r4, r4, #12
    b0b2:	0b24      	lsrs	r4, r4, #12
    b0b4:	0d5b      	lsrs	r3, r3, #21
    b0b6:	e7e6      	b.n	b086 <__aeabi_ui2d+0x26>
    b0b8:	2300      	movs	r3, #0
    b0ba:	2400      	movs	r4, #0
    b0bc:	2200      	movs	r2, #0
    b0be:	e7e2      	b.n	b086 <__aeabi_ui2d+0x26>
    b0c0:	0000041e 	.word	0x0000041e
    b0c4:	00000433 	.word	0x00000433
    b0c8:	00000413 	.word	0x00000413
    b0cc:	800fffff 	.word	0x800fffff

0000b0d0 <__aeabi_f2d>:
    b0d0:	0041      	lsls	r1, r0, #1
    b0d2:	0e09      	lsrs	r1, r1, #24
    b0d4:	1c4b      	adds	r3, r1, #1
    b0d6:	b570      	push	{r4, r5, r6, lr}
    b0d8:	b2db      	uxtb	r3, r3
    b0da:	0246      	lsls	r6, r0, #9
    b0dc:	0a75      	lsrs	r5, r6, #9
    b0de:	0fc4      	lsrs	r4, r0, #31
    b0e0:	2b01      	cmp	r3, #1
    b0e2:	dd14      	ble.n	b10e <__aeabi_f2d+0x3e>
    b0e4:	23e0      	movs	r3, #224	; 0xe0
    b0e6:	009b      	lsls	r3, r3, #2
    b0e8:	076d      	lsls	r5, r5, #29
    b0ea:	0b36      	lsrs	r6, r6, #12
    b0ec:	18cb      	adds	r3, r1, r3
    b0ee:	2100      	movs	r1, #0
    b0f0:	0d0a      	lsrs	r2, r1, #20
    b0f2:	0028      	movs	r0, r5
    b0f4:	0512      	lsls	r2, r2, #20
    b0f6:	4d1c      	ldr	r5, [pc, #112]	; (b168 <__aeabi_f2d+0x98>)
    b0f8:	4332      	orrs	r2, r6
    b0fa:	055b      	lsls	r3, r3, #21
    b0fc:	402a      	ands	r2, r5
    b0fe:	085b      	lsrs	r3, r3, #1
    b100:	4313      	orrs	r3, r2
    b102:	005b      	lsls	r3, r3, #1
    b104:	07e4      	lsls	r4, r4, #31
    b106:	085b      	lsrs	r3, r3, #1
    b108:	4323      	orrs	r3, r4
    b10a:	0019      	movs	r1, r3
    b10c:	bd70      	pop	{r4, r5, r6, pc}
    b10e:	2900      	cmp	r1, #0
    b110:	d114      	bne.n	b13c <__aeabi_f2d+0x6c>
    b112:	2d00      	cmp	r5, #0
    b114:	d01e      	beq.n	b154 <__aeabi_f2d+0x84>
    b116:	0028      	movs	r0, r5
    b118:	f000 f8b6 	bl	b288 <__clzsi2>
    b11c:	280a      	cmp	r0, #10
    b11e:	dc1c      	bgt.n	b15a <__aeabi_f2d+0x8a>
    b120:	230b      	movs	r3, #11
    b122:	002a      	movs	r2, r5
    b124:	1a1b      	subs	r3, r3, r0
    b126:	40da      	lsrs	r2, r3
    b128:	0003      	movs	r3, r0
    b12a:	3315      	adds	r3, #21
    b12c:	409d      	lsls	r5, r3
    b12e:	4b0f      	ldr	r3, [pc, #60]	; (b16c <__aeabi_f2d+0x9c>)
    b130:	0312      	lsls	r2, r2, #12
    b132:	1a1b      	subs	r3, r3, r0
    b134:	055b      	lsls	r3, r3, #21
    b136:	0b16      	lsrs	r6, r2, #12
    b138:	0d5b      	lsrs	r3, r3, #21
    b13a:	e7d8      	b.n	b0ee <__aeabi_f2d+0x1e>
    b13c:	2d00      	cmp	r5, #0
    b13e:	d006      	beq.n	b14e <__aeabi_f2d+0x7e>
    b140:	0b32      	lsrs	r2, r6, #12
    b142:	2680      	movs	r6, #128	; 0x80
    b144:	0336      	lsls	r6, r6, #12
    b146:	076d      	lsls	r5, r5, #29
    b148:	4316      	orrs	r6, r2
    b14a:	4b09      	ldr	r3, [pc, #36]	; (b170 <__aeabi_f2d+0xa0>)
    b14c:	e7cf      	b.n	b0ee <__aeabi_f2d+0x1e>
    b14e:	4b08      	ldr	r3, [pc, #32]	; (b170 <__aeabi_f2d+0xa0>)
    b150:	2600      	movs	r6, #0
    b152:	e7cc      	b.n	b0ee <__aeabi_f2d+0x1e>
    b154:	2300      	movs	r3, #0
    b156:	2600      	movs	r6, #0
    b158:	e7c9      	b.n	b0ee <__aeabi_f2d+0x1e>
    b15a:	0003      	movs	r3, r0
    b15c:	002a      	movs	r2, r5
    b15e:	3b0b      	subs	r3, #11
    b160:	409a      	lsls	r2, r3
    b162:	2500      	movs	r5, #0
    b164:	e7e3      	b.n	b12e <__aeabi_f2d+0x5e>
    b166:	46c0      	nop			; (mov r8, r8)
    b168:	800fffff 	.word	0x800fffff
    b16c:	00000389 	.word	0x00000389
    b170:	000007ff 	.word	0x000007ff

0000b174 <__aeabi_d2f>:
    b174:	b5f0      	push	{r4, r5, r6, r7, lr}
    b176:	004c      	lsls	r4, r1, #1
    b178:	0d64      	lsrs	r4, r4, #21
    b17a:	030b      	lsls	r3, r1, #12
    b17c:	1c62      	adds	r2, r4, #1
    b17e:	0f45      	lsrs	r5, r0, #29
    b180:	0a5b      	lsrs	r3, r3, #9
    b182:	0552      	lsls	r2, r2, #21
    b184:	432b      	orrs	r3, r5
    b186:	0fc9      	lsrs	r1, r1, #31
    b188:	00c5      	lsls	r5, r0, #3
    b18a:	0d52      	lsrs	r2, r2, #21
    b18c:	2a01      	cmp	r2, #1
    b18e:	dd28      	ble.n	b1e2 <__aeabi_d2f+0x6e>
    b190:	4a3a      	ldr	r2, [pc, #232]	; (b27c <__aeabi_d2f+0x108>)
    b192:	18a6      	adds	r6, r4, r2
    b194:	2efe      	cmp	r6, #254	; 0xfe
    b196:	dc1b      	bgt.n	b1d0 <__aeabi_d2f+0x5c>
    b198:	2e00      	cmp	r6, #0
    b19a:	dd3e      	ble.n	b21a <__aeabi_d2f+0xa6>
    b19c:	0180      	lsls	r0, r0, #6
    b19e:	0002      	movs	r2, r0
    b1a0:	1e50      	subs	r0, r2, #1
    b1a2:	4182      	sbcs	r2, r0
    b1a4:	0f6d      	lsrs	r5, r5, #29
    b1a6:	432a      	orrs	r2, r5
    b1a8:	00db      	lsls	r3, r3, #3
    b1aa:	4313      	orrs	r3, r2
    b1ac:	075a      	lsls	r2, r3, #29
    b1ae:	d004      	beq.n	b1ba <__aeabi_d2f+0x46>
    b1b0:	220f      	movs	r2, #15
    b1b2:	401a      	ands	r2, r3
    b1b4:	2a04      	cmp	r2, #4
    b1b6:	d000      	beq.n	b1ba <__aeabi_d2f+0x46>
    b1b8:	3304      	adds	r3, #4
    b1ba:	2280      	movs	r2, #128	; 0x80
    b1bc:	04d2      	lsls	r2, r2, #19
    b1be:	401a      	ands	r2, r3
    b1c0:	d05a      	beq.n	b278 <__aeabi_d2f+0x104>
    b1c2:	3601      	adds	r6, #1
    b1c4:	2eff      	cmp	r6, #255	; 0xff
    b1c6:	d003      	beq.n	b1d0 <__aeabi_d2f+0x5c>
    b1c8:	019b      	lsls	r3, r3, #6
    b1ca:	0a5b      	lsrs	r3, r3, #9
    b1cc:	b2f4      	uxtb	r4, r6
    b1ce:	e001      	b.n	b1d4 <__aeabi_d2f+0x60>
    b1d0:	24ff      	movs	r4, #255	; 0xff
    b1d2:	2300      	movs	r3, #0
    b1d4:	0258      	lsls	r0, r3, #9
    b1d6:	05e4      	lsls	r4, r4, #23
    b1d8:	0a40      	lsrs	r0, r0, #9
    b1da:	07c9      	lsls	r1, r1, #31
    b1dc:	4320      	orrs	r0, r4
    b1de:	4308      	orrs	r0, r1
    b1e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b1e2:	2c00      	cmp	r4, #0
    b1e4:	d007      	beq.n	b1f6 <__aeabi_d2f+0x82>
    b1e6:	431d      	orrs	r5, r3
    b1e8:	d0f2      	beq.n	b1d0 <__aeabi_d2f+0x5c>
    b1ea:	2080      	movs	r0, #128	; 0x80
    b1ec:	00db      	lsls	r3, r3, #3
    b1ee:	0480      	lsls	r0, r0, #18
    b1f0:	4303      	orrs	r3, r0
    b1f2:	26ff      	movs	r6, #255	; 0xff
    b1f4:	e7da      	b.n	b1ac <__aeabi_d2f+0x38>
    b1f6:	432b      	orrs	r3, r5
    b1f8:	d003      	beq.n	b202 <__aeabi_d2f+0x8e>
    b1fa:	2305      	movs	r3, #5
    b1fc:	08db      	lsrs	r3, r3, #3
    b1fe:	2cff      	cmp	r4, #255	; 0xff
    b200:	d003      	beq.n	b20a <__aeabi_d2f+0x96>
    b202:	025b      	lsls	r3, r3, #9
    b204:	0a5b      	lsrs	r3, r3, #9
    b206:	b2e4      	uxtb	r4, r4
    b208:	e7e4      	b.n	b1d4 <__aeabi_d2f+0x60>
    b20a:	2b00      	cmp	r3, #0
    b20c:	d032      	beq.n	b274 <__aeabi_d2f+0x100>
    b20e:	2080      	movs	r0, #128	; 0x80
    b210:	03c0      	lsls	r0, r0, #15
    b212:	4303      	orrs	r3, r0
    b214:	025b      	lsls	r3, r3, #9
    b216:	0a5b      	lsrs	r3, r3, #9
    b218:	e7dc      	b.n	b1d4 <__aeabi_d2f+0x60>
    b21a:	0032      	movs	r2, r6
    b21c:	3217      	adds	r2, #23
    b21e:	db14      	blt.n	b24a <__aeabi_d2f+0xd6>
    b220:	2280      	movs	r2, #128	; 0x80
    b222:	271e      	movs	r7, #30
    b224:	0412      	lsls	r2, r2, #16
    b226:	4313      	orrs	r3, r2
    b228:	1bbf      	subs	r7, r7, r6
    b22a:	2f1f      	cmp	r7, #31
    b22c:	dc0f      	bgt.n	b24e <__aeabi_d2f+0xda>
    b22e:	4a14      	ldr	r2, [pc, #80]	; (b280 <__aeabi_d2f+0x10c>)
    b230:	4694      	mov	ip, r2
    b232:	4464      	add	r4, ip
    b234:	002a      	movs	r2, r5
    b236:	40a5      	lsls	r5, r4
    b238:	002e      	movs	r6, r5
    b23a:	40a3      	lsls	r3, r4
    b23c:	1e75      	subs	r5, r6, #1
    b23e:	41ae      	sbcs	r6, r5
    b240:	40fa      	lsrs	r2, r7
    b242:	4333      	orrs	r3, r6
    b244:	4313      	orrs	r3, r2
    b246:	2600      	movs	r6, #0
    b248:	e7b0      	b.n	b1ac <__aeabi_d2f+0x38>
    b24a:	2400      	movs	r4, #0
    b24c:	e7d5      	b.n	b1fa <__aeabi_d2f+0x86>
    b24e:	2202      	movs	r2, #2
    b250:	4252      	negs	r2, r2
    b252:	1b96      	subs	r6, r2, r6
    b254:	001a      	movs	r2, r3
    b256:	40f2      	lsrs	r2, r6
    b258:	2f20      	cmp	r7, #32
    b25a:	d009      	beq.n	b270 <__aeabi_d2f+0xfc>
    b25c:	4809      	ldr	r0, [pc, #36]	; (b284 <__aeabi_d2f+0x110>)
    b25e:	4684      	mov	ip, r0
    b260:	4464      	add	r4, ip
    b262:	40a3      	lsls	r3, r4
    b264:	432b      	orrs	r3, r5
    b266:	1e5d      	subs	r5, r3, #1
    b268:	41ab      	sbcs	r3, r5
    b26a:	2600      	movs	r6, #0
    b26c:	4313      	orrs	r3, r2
    b26e:	e79d      	b.n	b1ac <__aeabi_d2f+0x38>
    b270:	2300      	movs	r3, #0
    b272:	e7f7      	b.n	b264 <__aeabi_d2f+0xf0>
    b274:	2300      	movs	r3, #0
    b276:	e7ad      	b.n	b1d4 <__aeabi_d2f+0x60>
    b278:	0034      	movs	r4, r6
    b27a:	e7bf      	b.n	b1fc <__aeabi_d2f+0x88>
    b27c:	fffffc80 	.word	0xfffffc80
    b280:	fffffc82 	.word	0xfffffc82
    b284:	fffffca2 	.word	0xfffffca2

0000b288 <__clzsi2>:
    b288:	211c      	movs	r1, #28
    b28a:	2301      	movs	r3, #1
    b28c:	041b      	lsls	r3, r3, #16
    b28e:	4298      	cmp	r0, r3
    b290:	d301      	bcc.n	b296 <__clzsi2+0xe>
    b292:	0c00      	lsrs	r0, r0, #16
    b294:	3910      	subs	r1, #16
    b296:	0a1b      	lsrs	r3, r3, #8
    b298:	4298      	cmp	r0, r3
    b29a:	d301      	bcc.n	b2a0 <__clzsi2+0x18>
    b29c:	0a00      	lsrs	r0, r0, #8
    b29e:	3908      	subs	r1, #8
    b2a0:	091b      	lsrs	r3, r3, #4
    b2a2:	4298      	cmp	r0, r3
    b2a4:	d301      	bcc.n	b2aa <__clzsi2+0x22>
    b2a6:	0900      	lsrs	r0, r0, #4
    b2a8:	3904      	subs	r1, #4
    b2aa:	a202      	add	r2, pc, #8	; (adr r2, b2b4 <__clzsi2+0x2c>)
    b2ac:	5c10      	ldrb	r0, [r2, r0]
    b2ae:	1840      	adds	r0, r0, r1
    b2b0:	4770      	bx	lr
    b2b2:	46c0      	nop			; (mov r8, r8)
    b2b4:	02020304 	.word	0x02020304
    b2b8:	01010101 	.word	0x01010101
	...

0000b2c4 <abort>:
    b2c4:	b510      	push	{r4, lr}
    b2c6:	2006      	movs	r0, #6
    b2c8:	f000 f94a 	bl	b560 <raise>
    b2cc:	2001      	movs	r0, #1
    b2ce:	f000 f9cf 	bl	b670 <_exit>
	...

0000b2d4 <__cxa_atexit>:
    b2d4:	b570      	push	{r4, r5, r6, lr}
    b2d6:	4c05      	ldr	r4, [pc, #20]	; (b2ec <__cxa_atexit+0x18>)
    b2d8:	0005      	movs	r5, r0
    b2da:	0013      	movs	r3, r2
    b2dc:	1e20      	subs	r0, r4, #0
    b2de:	d004      	beq.n	b2ea <__cxa_atexit+0x16>
    b2e0:	000a      	movs	r2, r1
    b2e2:	2002      	movs	r0, #2
    b2e4:	0029      	movs	r1, r5
    b2e6:	e000      	b.n	b2ea <__cxa_atexit+0x16>
    b2e8:	bf00      	nop
    b2ea:	bd70      	pop	{r4, r5, r6, pc}
    b2ec:	00000000 	.word	0x00000000

0000b2f0 <__libc_init_array>:
    b2f0:	b570      	push	{r4, r5, r6, lr}
    b2f2:	2600      	movs	r6, #0
    b2f4:	4d0c      	ldr	r5, [pc, #48]	; (b328 <__libc_init_array+0x38>)
    b2f6:	4c0d      	ldr	r4, [pc, #52]	; (b32c <__libc_init_array+0x3c>)
    b2f8:	1b64      	subs	r4, r4, r5
    b2fa:	10a4      	asrs	r4, r4, #2
    b2fc:	42a6      	cmp	r6, r4
    b2fe:	d109      	bne.n	b314 <__libc_init_array+0x24>
    b300:	2600      	movs	r6, #0
    b302:	f000 f9b7 	bl	b674 <_init>
    b306:	4d0a      	ldr	r5, [pc, #40]	; (b330 <__libc_init_array+0x40>)
    b308:	4c0a      	ldr	r4, [pc, #40]	; (b334 <__libc_init_array+0x44>)
    b30a:	1b64      	subs	r4, r4, r5
    b30c:	10a4      	asrs	r4, r4, #2
    b30e:	42a6      	cmp	r6, r4
    b310:	d105      	bne.n	b31e <__libc_init_array+0x2e>
    b312:	bd70      	pop	{r4, r5, r6, pc}
    b314:	00b3      	lsls	r3, r6, #2
    b316:	58eb      	ldr	r3, [r5, r3]
    b318:	4798      	blx	r3
    b31a:	3601      	adds	r6, #1
    b31c:	e7ee      	b.n	b2fc <__libc_init_array+0xc>
    b31e:	00b3      	lsls	r3, r6, #2
    b320:	58eb      	ldr	r3, [r5, r3]
    b322:	4798      	blx	r3
    b324:	3601      	adds	r6, #1
    b326:	e7f2      	b.n	b30e <__libc_init_array+0x1e>
    b328:	200000f4 	.word	0x200000f4
    b32c:	200000f4 	.word	0x200000f4
    b330:	200000f4 	.word	0x200000f4
    b334:	20000120 	.word	0x20000120

0000b338 <malloc>:
    b338:	b510      	push	{r4, lr}
    b33a:	4b03      	ldr	r3, [pc, #12]	; (b348 <malloc+0x10>)
    b33c:	0001      	movs	r1, r0
    b33e:	6818      	ldr	r0, [r3, #0]
    b340:	f000 f86a 	bl	b418 <_malloc_r>
    b344:	bd10      	pop	{r4, pc}
    b346:	46c0      	nop			; (mov r8, r8)
    b348:	20000090 	.word	0x20000090

0000b34c <free>:
    b34c:	b510      	push	{r4, lr}
    b34e:	4b03      	ldr	r3, [pc, #12]	; (b35c <free+0x10>)
    b350:	0001      	movs	r1, r0
    b352:	6818      	ldr	r0, [r3, #0]
    b354:	f000 f816 	bl	b384 <_free_r>
    b358:	bd10      	pop	{r4, pc}
    b35a:	46c0      	nop			; (mov r8, r8)
    b35c:	20000090 	.word	0x20000090

0000b360 <memcpy>:
    b360:	2300      	movs	r3, #0
    b362:	b510      	push	{r4, lr}
    b364:	429a      	cmp	r2, r3
    b366:	d100      	bne.n	b36a <memcpy+0xa>
    b368:	bd10      	pop	{r4, pc}
    b36a:	5ccc      	ldrb	r4, [r1, r3]
    b36c:	54c4      	strb	r4, [r0, r3]
    b36e:	3301      	adds	r3, #1
    b370:	e7f8      	b.n	b364 <memcpy+0x4>

0000b372 <memset>:
    b372:	0003      	movs	r3, r0
    b374:	1882      	adds	r2, r0, r2
    b376:	4293      	cmp	r3, r2
    b378:	d100      	bne.n	b37c <memset+0xa>
    b37a:	4770      	bx	lr
    b37c:	7019      	strb	r1, [r3, #0]
    b37e:	3301      	adds	r3, #1
    b380:	e7f9      	b.n	b376 <memset+0x4>
	...

0000b384 <_free_r>:
    b384:	b570      	push	{r4, r5, r6, lr}
    b386:	0005      	movs	r5, r0
    b388:	2900      	cmp	r1, #0
    b38a:	d010      	beq.n	b3ae <_free_r+0x2a>
    b38c:	1f0c      	subs	r4, r1, #4
    b38e:	6823      	ldr	r3, [r4, #0]
    b390:	2b00      	cmp	r3, #0
    b392:	da00      	bge.n	b396 <_free_r+0x12>
    b394:	18e4      	adds	r4, r4, r3
    b396:	0028      	movs	r0, r5
    b398:	f000 f91c 	bl	b5d4 <__malloc_lock>
    b39c:	4a1d      	ldr	r2, [pc, #116]	; (b414 <_free_r+0x90>)
    b39e:	6813      	ldr	r3, [r2, #0]
    b3a0:	2b00      	cmp	r3, #0
    b3a2:	d105      	bne.n	b3b0 <_free_r+0x2c>
    b3a4:	6063      	str	r3, [r4, #4]
    b3a6:	6014      	str	r4, [r2, #0]
    b3a8:	0028      	movs	r0, r5
    b3aa:	f000 f914 	bl	b5d6 <__malloc_unlock>
    b3ae:	bd70      	pop	{r4, r5, r6, pc}
    b3b0:	42a3      	cmp	r3, r4
    b3b2:	d909      	bls.n	b3c8 <_free_r+0x44>
    b3b4:	6821      	ldr	r1, [r4, #0]
    b3b6:	1860      	adds	r0, r4, r1
    b3b8:	4283      	cmp	r3, r0
    b3ba:	d1f3      	bne.n	b3a4 <_free_r+0x20>
    b3bc:	6818      	ldr	r0, [r3, #0]
    b3be:	685b      	ldr	r3, [r3, #4]
    b3c0:	1841      	adds	r1, r0, r1
    b3c2:	6021      	str	r1, [r4, #0]
    b3c4:	e7ee      	b.n	b3a4 <_free_r+0x20>
    b3c6:	0013      	movs	r3, r2
    b3c8:	685a      	ldr	r2, [r3, #4]
    b3ca:	2a00      	cmp	r2, #0
    b3cc:	d001      	beq.n	b3d2 <_free_r+0x4e>
    b3ce:	42a2      	cmp	r2, r4
    b3d0:	d9f9      	bls.n	b3c6 <_free_r+0x42>
    b3d2:	6819      	ldr	r1, [r3, #0]
    b3d4:	1858      	adds	r0, r3, r1
    b3d6:	42a0      	cmp	r0, r4
    b3d8:	d10b      	bne.n	b3f2 <_free_r+0x6e>
    b3da:	6820      	ldr	r0, [r4, #0]
    b3dc:	1809      	adds	r1, r1, r0
    b3de:	1858      	adds	r0, r3, r1
    b3e0:	6019      	str	r1, [r3, #0]
    b3e2:	4282      	cmp	r2, r0
    b3e4:	d1e0      	bne.n	b3a8 <_free_r+0x24>
    b3e6:	6810      	ldr	r0, [r2, #0]
    b3e8:	6852      	ldr	r2, [r2, #4]
    b3ea:	1841      	adds	r1, r0, r1
    b3ec:	6019      	str	r1, [r3, #0]
    b3ee:	605a      	str	r2, [r3, #4]
    b3f0:	e7da      	b.n	b3a8 <_free_r+0x24>
    b3f2:	42a0      	cmp	r0, r4
    b3f4:	d902      	bls.n	b3fc <_free_r+0x78>
    b3f6:	230c      	movs	r3, #12
    b3f8:	602b      	str	r3, [r5, #0]
    b3fa:	e7d5      	b.n	b3a8 <_free_r+0x24>
    b3fc:	6821      	ldr	r1, [r4, #0]
    b3fe:	1860      	adds	r0, r4, r1
    b400:	4282      	cmp	r2, r0
    b402:	d103      	bne.n	b40c <_free_r+0x88>
    b404:	6810      	ldr	r0, [r2, #0]
    b406:	6852      	ldr	r2, [r2, #4]
    b408:	1841      	adds	r1, r0, r1
    b40a:	6021      	str	r1, [r4, #0]
    b40c:	6062      	str	r2, [r4, #4]
    b40e:	605c      	str	r4, [r3, #4]
    b410:	e7ca      	b.n	b3a8 <_free_r+0x24>
    b412:	46c0      	nop			; (mov r8, r8)
    b414:	20000974 	.word	0x20000974

0000b418 <_malloc_r>:
    b418:	2303      	movs	r3, #3
    b41a:	b570      	push	{r4, r5, r6, lr}
    b41c:	1ccd      	adds	r5, r1, #3
    b41e:	439d      	bics	r5, r3
    b420:	3508      	adds	r5, #8
    b422:	0006      	movs	r6, r0
    b424:	2d0c      	cmp	r5, #12
    b426:	d21e      	bcs.n	b466 <_malloc_r+0x4e>
    b428:	250c      	movs	r5, #12
    b42a:	42a9      	cmp	r1, r5
    b42c:	d81d      	bhi.n	b46a <_malloc_r+0x52>
    b42e:	0030      	movs	r0, r6
    b430:	f000 f8d0 	bl	b5d4 <__malloc_lock>
    b434:	4a25      	ldr	r2, [pc, #148]	; (b4cc <_malloc_r+0xb4>)
    b436:	6814      	ldr	r4, [r2, #0]
    b438:	0021      	movs	r1, r4
    b43a:	2900      	cmp	r1, #0
    b43c:	d119      	bne.n	b472 <_malloc_r+0x5a>
    b43e:	4c24      	ldr	r4, [pc, #144]	; (b4d0 <_malloc_r+0xb8>)
    b440:	6823      	ldr	r3, [r4, #0]
    b442:	2b00      	cmp	r3, #0
    b444:	d103      	bne.n	b44e <_malloc_r+0x36>
    b446:	0030      	movs	r0, r6
    b448:	f000 f84e 	bl	b4e8 <_sbrk_r>
    b44c:	6020      	str	r0, [r4, #0]
    b44e:	0029      	movs	r1, r5
    b450:	0030      	movs	r0, r6
    b452:	f000 f849 	bl	b4e8 <_sbrk_r>
    b456:	1c43      	adds	r3, r0, #1
    b458:	d12c      	bne.n	b4b4 <_malloc_r+0x9c>
    b45a:	230c      	movs	r3, #12
    b45c:	0030      	movs	r0, r6
    b45e:	6033      	str	r3, [r6, #0]
    b460:	f000 f8b9 	bl	b5d6 <__malloc_unlock>
    b464:	e003      	b.n	b46e <_malloc_r+0x56>
    b466:	2d00      	cmp	r5, #0
    b468:	dadf      	bge.n	b42a <_malloc_r+0x12>
    b46a:	230c      	movs	r3, #12
    b46c:	6033      	str	r3, [r6, #0]
    b46e:	2000      	movs	r0, #0
    b470:	bd70      	pop	{r4, r5, r6, pc}
    b472:	680b      	ldr	r3, [r1, #0]
    b474:	1b5b      	subs	r3, r3, r5
    b476:	d41a      	bmi.n	b4ae <_malloc_r+0x96>
    b478:	2b0b      	cmp	r3, #11
    b47a:	d903      	bls.n	b484 <_malloc_r+0x6c>
    b47c:	600b      	str	r3, [r1, #0]
    b47e:	18cc      	adds	r4, r1, r3
    b480:	6025      	str	r5, [r4, #0]
    b482:	e003      	b.n	b48c <_malloc_r+0x74>
    b484:	428c      	cmp	r4, r1
    b486:	d10e      	bne.n	b4a6 <_malloc_r+0x8e>
    b488:	6863      	ldr	r3, [r4, #4]
    b48a:	6013      	str	r3, [r2, #0]
    b48c:	0030      	movs	r0, r6
    b48e:	f000 f8a2 	bl	b5d6 <__malloc_unlock>
    b492:	0020      	movs	r0, r4
    b494:	2207      	movs	r2, #7
    b496:	300b      	adds	r0, #11
    b498:	1d23      	adds	r3, r4, #4
    b49a:	4390      	bics	r0, r2
    b49c:	1ac3      	subs	r3, r0, r3
    b49e:	d0e7      	beq.n	b470 <_malloc_r+0x58>
    b4a0:	425a      	negs	r2, r3
    b4a2:	50e2      	str	r2, [r4, r3]
    b4a4:	e7e4      	b.n	b470 <_malloc_r+0x58>
    b4a6:	684b      	ldr	r3, [r1, #4]
    b4a8:	6063      	str	r3, [r4, #4]
    b4aa:	000c      	movs	r4, r1
    b4ac:	e7ee      	b.n	b48c <_malloc_r+0x74>
    b4ae:	000c      	movs	r4, r1
    b4b0:	6849      	ldr	r1, [r1, #4]
    b4b2:	e7c2      	b.n	b43a <_malloc_r+0x22>
    b4b4:	2303      	movs	r3, #3
    b4b6:	1cc4      	adds	r4, r0, #3
    b4b8:	439c      	bics	r4, r3
    b4ba:	42a0      	cmp	r0, r4
    b4bc:	d0e0      	beq.n	b480 <_malloc_r+0x68>
    b4be:	1a21      	subs	r1, r4, r0
    b4c0:	0030      	movs	r0, r6
    b4c2:	f000 f811 	bl	b4e8 <_sbrk_r>
    b4c6:	1c43      	adds	r3, r0, #1
    b4c8:	d1da      	bne.n	b480 <_malloc_r+0x68>
    b4ca:	e7c6      	b.n	b45a <_malloc_r+0x42>
    b4cc:	20000974 	.word	0x20000974
    b4d0:	20000978 	.word	0x20000978

0000b4d4 <realloc>:
    b4d4:	b510      	push	{r4, lr}
    b4d6:	4b03      	ldr	r3, [pc, #12]	; (b4e4 <realloc+0x10>)
    b4d8:	000a      	movs	r2, r1
    b4da:	0001      	movs	r1, r0
    b4dc:	6818      	ldr	r0, [r3, #0]
    b4de:	f000 f87b 	bl	b5d8 <_realloc_r>
    b4e2:	bd10      	pop	{r4, pc}
    b4e4:	20000090 	.word	0x20000090

0000b4e8 <_sbrk_r>:
    b4e8:	2300      	movs	r3, #0
    b4ea:	b570      	push	{r4, r5, r6, lr}
    b4ec:	4c06      	ldr	r4, [pc, #24]	; (b508 <_sbrk_r+0x20>)
    b4ee:	0005      	movs	r5, r0
    b4f0:	0008      	movs	r0, r1
    b4f2:	6023      	str	r3, [r4, #0]
    b4f4:	f000 f8ae 	bl	b654 <_sbrk>
    b4f8:	1c43      	adds	r3, r0, #1
    b4fa:	d103      	bne.n	b504 <_sbrk_r+0x1c>
    b4fc:	6823      	ldr	r3, [r4, #0]
    b4fe:	2b00      	cmp	r3, #0
    b500:	d000      	beq.n	b504 <_sbrk_r+0x1c>
    b502:	602b      	str	r3, [r5, #0]
    b504:	bd70      	pop	{r4, r5, r6, pc}
    b506:	46c0      	nop			; (mov r8, r8)
    b508:	20000980 	.word	0x20000980

0000b50c <_raise_r>:
    b50c:	b570      	push	{r4, r5, r6, lr}
    b50e:	0004      	movs	r4, r0
    b510:	000d      	movs	r5, r1
    b512:	291f      	cmp	r1, #31
    b514:	d904      	bls.n	b520 <_raise_r+0x14>
    b516:	2316      	movs	r3, #22
    b518:	6003      	str	r3, [r0, #0]
    b51a:	2001      	movs	r0, #1
    b51c:	4240      	negs	r0, r0
    b51e:	bd70      	pop	{r4, r5, r6, pc}
    b520:	6c43      	ldr	r3, [r0, #68]	; 0x44
    b522:	2b00      	cmp	r3, #0
    b524:	d004      	beq.n	b530 <_raise_r+0x24>
    b526:	008a      	lsls	r2, r1, #2
    b528:	189b      	adds	r3, r3, r2
    b52a:	681a      	ldr	r2, [r3, #0]
    b52c:	2a00      	cmp	r2, #0
    b52e:	d108      	bne.n	b542 <_raise_r+0x36>
    b530:	0020      	movs	r0, r4
    b532:	f000 f831 	bl	b598 <_getpid_r>
    b536:	002a      	movs	r2, r5
    b538:	0001      	movs	r1, r0
    b53a:	0020      	movs	r0, r4
    b53c:	f000 f81a 	bl	b574 <_kill_r>
    b540:	e7ed      	b.n	b51e <_raise_r+0x12>
    b542:	2000      	movs	r0, #0
    b544:	2a01      	cmp	r2, #1
    b546:	d0ea      	beq.n	b51e <_raise_r+0x12>
    b548:	1c51      	adds	r1, r2, #1
    b54a:	d103      	bne.n	b554 <_raise_r+0x48>
    b54c:	2316      	movs	r3, #22
    b54e:	3001      	adds	r0, #1
    b550:	6023      	str	r3, [r4, #0]
    b552:	e7e4      	b.n	b51e <_raise_r+0x12>
    b554:	2400      	movs	r4, #0
    b556:	0028      	movs	r0, r5
    b558:	601c      	str	r4, [r3, #0]
    b55a:	4790      	blx	r2
    b55c:	0020      	movs	r0, r4
    b55e:	e7de      	b.n	b51e <_raise_r+0x12>

0000b560 <raise>:
    b560:	b510      	push	{r4, lr}
    b562:	4b03      	ldr	r3, [pc, #12]	; (b570 <raise+0x10>)
    b564:	0001      	movs	r1, r0
    b566:	6818      	ldr	r0, [r3, #0]
    b568:	f7ff ffd0 	bl	b50c <_raise_r>
    b56c:	bd10      	pop	{r4, pc}
    b56e:	46c0      	nop			; (mov r8, r8)
    b570:	20000090 	.word	0x20000090

0000b574 <_kill_r>:
    b574:	2300      	movs	r3, #0
    b576:	b570      	push	{r4, r5, r6, lr}
    b578:	4c06      	ldr	r4, [pc, #24]	; (b594 <_kill_r+0x20>)
    b57a:	0005      	movs	r5, r0
    b57c:	0008      	movs	r0, r1
    b57e:	0011      	movs	r1, r2
    b580:	6023      	str	r3, [r4, #0]
    b582:	f000 f85f 	bl	b644 <_kill>
    b586:	1c43      	adds	r3, r0, #1
    b588:	d103      	bne.n	b592 <_kill_r+0x1e>
    b58a:	6823      	ldr	r3, [r4, #0]
    b58c:	2b00      	cmp	r3, #0
    b58e:	d000      	beq.n	b592 <_kill_r+0x1e>
    b590:	602b      	str	r3, [r5, #0]
    b592:	bd70      	pop	{r4, r5, r6, pc}
    b594:	20000980 	.word	0x20000980

0000b598 <_getpid_r>:
    b598:	b510      	push	{r4, lr}
    b59a:	f000 f84b 	bl	b634 <_getpid>
    b59e:	bd10      	pop	{r4, pc}

0000b5a0 <strcpy>:
    b5a0:	1c03      	adds	r3, r0, #0
    b5a2:	780a      	ldrb	r2, [r1, #0]
    b5a4:	3101      	adds	r1, #1
    b5a6:	701a      	strb	r2, [r3, #0]
    b5a8:	3301      	adds	r3, #1
    b5aa:	2a00      	cmp	r2, #0
    b5ac:	d1f9      	bne.n	b5a2 <strcpy+0x2>
    b5ae:	4770      	bx	lr

0000b5b0 <strlen>:
    b5b0:	2300      	movs	r3, #0
    b5b2:	5cc2      	ldrb	r2, [r0, r3]
    b5b4:	3301      	adds	r3, #1
    b5b6:	2a00      	cmp	r2, #0
    b5b8:	d1fb      	bne.n	b5b2 <strlen+0x2>
    b5ba:	1e58      	subs	r0, r3, #1
    b5bc:	4770      	bx	lr
	...

0000b5c0 <sbrk>:
    b5c0:	b510      	push	{r4, lr}
    b5c2:	4b03      	ldr	r3, [pc, #12]	; (b5d0 <sbrk+0x10>)
    b5c4:	0001      	movs	r1, r0
    b5c6:	6818      	ldr	r0, [r3, #0]
    b5c8:	f7ff ff8e 	bl	b4e8 <_sbrk_r>
    b5cc:	bd10      	pop	{r4, pc}
    b5ce:	46c0      	nop			; (mov r8, r8)
    b5d0:	20000090 	.word	0x20000090

0000b5d4 <__malloc_lock>:
    b5d4:	4770      	bx	lr

0000b5d6 <__malloc_unlock>:
    b5d6:	4770      	bx	lr

0000b5d8 <_realloc_r>:
    b5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b5da:	0007      	movs	r7, r0
    b5dc:	000d      	movs	r5, r1
    b5de:	0016      	movs	r6, r2
    b5e0:	2900      	cmp	r1, #0
    b5e2:	d105      	bne.n	b5f0 <_realloc_r+0x18>
    b5e4:	0011      	movs	r1, r2
    b5e6:	f7ff ff17 	bl	b418 <_malloc_r>
    b5ea:	0004      	movs	r4, r0
    b5ec:	0020      	movs	r0, r4
    b5ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b5f0:	2a00      	cmp	r2, #0
    b5f2:	d103      	bne.n	b5fc <_realloc_r+0x24>
    b5f4:	f7ff fec6 	bl	b384 <_free_r>
    b5f8:	0034      	movs	r4, r6
    b5fa:	e7f7      	b.n	b5ec <_realloc_r+0x14>
    b5fc:	f000 f812 	bl	b624 <_malloc_usable_size_r>
    b600:	002c      	movs	r4, r5
    b602:	4286      	cmp	r6, r0
    b604:	d9f2      	bls.n	b5ec <_realloc_r+0x14>
    b606:	0031      	movs	r1, r6
    b608:	0038      	movs	r0, r7
    b60a:	f7ff ff05 	bl	b418 <_malloc_r>
    b60e:	1e04      	subs	r4, r0, #0
    b610:	d0ec      	beq.n	b5ec <_realloc_r+0x14>
    b612:	0029      	movs	r1, r5
    b614:	0032      	movs	r2, r6
    b616:	f7ff fea3 	bl	b360 <memcpy>
    b61a:	0029      	movs	r1, r5
    b61c:	0038      	movs	r0, r7
    b61e:	f7ff feb1 	bl	b384 <_free_r>
    b622:	e7e3      	b.n	b5ec <_realloc_r+0x14>

0000b624 <_malloc_usable_size_r>:
    b624:	1f0b      	subs	r3, r1, #4
    b626:	681b      	ldr	r3, [r3, #0]
    b628:	1f18      	subs	r0, r3, #4
    b62a:	2b00      	cmp	r3, #0
    b62c:	da01      	bge.n	b632 <_malloc_usable_size_r+0xe>
    b62e:	580b      	ldr	r3, [r1, r0]
    b630:	18c0      	adds	r0, r0, r3
    b632:	4770      	bx	lr

0000b634 <_getpid>:
    b634:	2258      	movs	r2, #88	; 0x58
    b636:	2001      	movs	r0, #1
    b638:	4b01      	ldr	r3, [pc, #4]	; (b640 <_getpid+0xc>)
    b63a:	4240      	negs	r0, r0
    b63c:	601a      	str	r2, [r3, #0]
    b63e:	4770      	bx	lr
    b640:	20000980 	.word	0x20000980

0000b644 <_kill>:
    b644:	2258      	movs	r2, #88	; 0x58
    b646:	2001      	movs	r0, #1
    b648:	4b01      	ldr	r3, [pc, #4]	; (b650 <_kill+0xc>)
    b64a:	4240      	negs	r0, r0
    b64c:	601a      	str	r2, [r3, #0]
    b64e:	4770      	bx	lr
    b650:	20000980 	.word	0x20000980

0000b654 <_sbrk>:
    b654:	4a04      	ldr	r2, [pc, #16]	; (b668 <_sbrk+0x14>)
    b656:	6813      	ldr	r3, [r2, #0]
    b658:	2b00      	cmp	r3, #0
    b65a:	d003      	beq.n	b664 <_sbrk+0x10>
    b65c:	1818      	adds	r0, r3, r0
    b65e:	6010      	str	r0, [r2, #0]
    b660:	0018      	movs	r0, r3
    b662:	4770      	bx	lr
    b664:	4b01      	ldr	r3, [pc, #4]	; (b66c <_sbrk+0x18>)
    b666:	e7f9      	b.n	b65c <_sbrk+0x8>
    b668:	2000097c 	.word	0x2000097c
    b66c:	20000984 	.word	0x20000984

0000b670 <_exit>:
    b670:	e7fe      	b.n	b670 <_exit>
    b672:	46c0      	nop			; (mov r8, r8)

0000b674 <_init>:
    b674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b676:	46c0      	nop			; (mov r8, r8)
    b678:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b67a:	bc08      	pop	{r3}
    b67c:	469e      	mov	lr, r3
    b67e:	4770      	bx	lr

0000b680 <_fini>:
    b680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b682:	46c0      	nop			; (mov r8, r8)
    b684:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b686:	bc08      	pop	{r3}
    b688:	469e      	mov	lr, r3
    b68a:	4770      	bx	lr

0000b68c <_ZL9crc_table>:
    b68c:	0000 1021 2042 3063 4084 50a5 60c6 70e7     ..!.B c0.@.P.`.p
    b69c:	8108 9129 a14a b16b c18c d1ad e1ce f1ef     ..).J.k.........
    b6ac:	1231 0210 3273 2252 52b5 4294 72f7 62d6     1...s2R".R.B.r.b
    b6bc:	9339 8318 b37b a35a d3bd c39c f3ff e3de     9...{.Z.........
    b6cc:	2462 3443 0420 1401 64e6 74c7 44a4 5485     b$C4 ....d.t.D.T
    b6dc:	a56a b54b 8528 9509 e5ee f5cf c5ac d58d     j.K.(...........
    b6ec:	3653 2672 1611 0630 76d7 66f6 5695 46b4     S6r&..0..v.f.V.F
    b6fc:	b75b a77a 9719 8738 f7df e7fe d79d c7bc     [.z...8.........
    b70c:	48c4 58e5 6886 78a7 0840 1861 2802 3823     .H.X.h.x@.a..(#8
    b71c:	c9cc d9ed e98e f9af 8948 9969 a90a b92b     ........H.i...+.
    b72c:	5af5 4ad4 7ab7 6a96 1a71 0a50 3a33 2a12     .Z.J.z.jq.P.3:.*
    b73c:	dbfd cbdc fbbf eb9e 9b79 8b58 bb3b ab1a     ........y.X.;...
    b74c:	6ca6 7c87 4ce4 5cc5 2c22 3c03 0c60 1c41     .l.|.L.\",.<`.A.
    b75c:	edae fd8f cdec ddcd ad2a bd0b 8d68 9d49     ........*...h.I.
    b76c:	7e97 6eb6 5ed5 4ef4 3e13 2e32 1e51 0e70     .~.n.^.N.>2.Q.p.
    b77c:	ff9f efbe dfdd cffc bf1b af3a 9f59 8f78     ..........:.Y.x.
    b78c:	9188 81a9 b1ca a1eb d10c c12d f14e e16f     ..........-.N.o.
    b79c:	1080 00a1 30c2 20e3 5004 4025 7046 6067     .....0. .P%@Fpg`
    b7ac:	83b9 9398 a3fb b3da c33d d31c e37f f35e     ........=.....^.
    b7bc:	02b1 1290 22f3 32d2 4235 5214 6277 7256     .....".25B.RwbVr
    b7cc:	b5ea a5cb 95a8 8589 f56e e54f d52c c50d     ........n.O.,...
    b7dc:	34e2 24c3 14a0 0481 7466 6447 5424 4405     .4.$....ftGd$T.D
    b7ec:	a7db b7fa 8799 97b8 e75f f77e c71d d73c     ........_.~...<.
    b7fc:	26d3 36f2 0691 16b0 6657 7676 4615 5634     .&.6....Wfvv.F4V
    b80c:	d94c c96d f90e e92f 99c8 89e9 b98a a9ab     L.m.../.........
    b81c:	5844 4865 7806 6827 18c0 08e1 3882 28a3     DXeH.x'h.....8.(
    b82c:	cb7d db5c eb3f fb1e 8bf9 9bd8 abbb bb9a     }.\.?...........
    b83c:	4a75 5a54 6a37 7a16 0af1 1ad0 2ab3 3a92     uJTZ7j.z.....*.:
    b84c:	fd2e ed0f dd6c cd4d bdaa ad8b 9de8 8dc9     ....l.M.........
    b85c:	7c26 6c07 5c64 4c45 3ca2 2c83 1ce0 0cc1     &|.ld\EL.<.,....
    b86c:	ef1f ff3e cf5d df7c af9b bfba 8fd9 9ff8     ..>.].|.........
    b87c:	6e17 7e36 4e55 5e74 2e93 3eb2 0ed1 1ef0     .n6~UNt^...>....

0000b88c <_ZTV9SX1280Hal>:
	...
    b894:	24f7 0000 2521 0000 252d 0000 29f3 0000     .$..!%..-%...)..
    b8a4:	25c1 0000 2639 0000 26d5 0000 24f9 0000     .%..9&...&...$..
    b8b4:	2759 0000 250d 0000 27e9 0000 2865 0000     Y'...%...'..e(..
    b8c4:	29cf 0000 2565 0000 2a0d 0000               .)..e%...*..

0000b8d0 <_ZTV16FrSkySportSensor>:
	...
    b8d8:	3155 0000 3157 0000                         U1..W1..

0000b8e0 <_ZTV19FrSkySportSensorGps>:
	...
    b8e8:	3261 0000 3171 0000 5024 544d 334b 3431     a2..q1..$PMTK314
    b8f8:	302c 302c 302c 312c 302c 302c 302c 302c     ,0,0,0,1,0,0,0,0
    b908:	302c 302c 302c 302c 302c 302c 302c 302c     ,0,0,0,0,0,0,0,0
    b918:	302c 302c 302c 322a 0039 5024 544d 324b     ,0,0,0*29.$PMTK2
    b928:	3135 312c 3239 3030 322a 0032 5024 544d     51,19200*22.$PMT
    b938:	324b 3135 332c 3438 3030 322a 0037 5024     K251,38400*27.$P
    b948:	544d 324b 3135 352c 3637 3030 322a 0043     MTK251,57600*2C.
    b958:	4320 4352 4f20 2c4b 5520 6470 7461 6e69      CRC OK, Updatin
    b968:	2067 5047 2053 6164 6174 5400 6d69 2065     g GPS data.Time 
    b978:	6f74 6d20 6b61 2065 6562 6361 6e6f 6d20     to make beacon m
    b988:	7365 6173 6567 2e2e 002e 6d49 6720 6f72     essage....Im gro
    b998:	6e75 7364 6174 6974 6e6f 202c 6f4e 6950     undstation, NoPi
    b9a8:	676e 0021 6e4f 5f65 6553 6f63 646e 555f     ng!.One_Second_U
    b9b8:	6470 7461 6465 2e2e 002e 6142 7474 7265     pdated....Batter
    b9c8:	2079 6f56 746c 6761 2e65 2e2e 4900 706e     y Voltage....Inp
    b9d8:	7475 5620 6c6f 6174 6567 2e2e 002e 5355     ut Voltage....US
    b9e8:	2042 6f56 746c 6761 2e65 2e2e 4600 7352     B Voltage....FRs
    b9f8:	796b 4420 7461 2061 7075 6164 6574 2e2e     ky Data update..
    ba08:	002e 7246 6565 5220 4d41 3d20 0020 6f47     ..Free RAM = .Go
    ba18:	6e69 2067 6f74 7320 656c 7065 0021 6157     ing to sleep!.Wa
    ba28:	656b 752d 2e70 2e2e 4400 6e6f 2165 5300     ke-up....Done!.S
    ba38:	7379 6574 206d 202d 7542 7474 6e6f 7020     ystem - Button p
    ba48:	7375 6568 2164 2d20 6720 206f 6f74 5020     ushed! - go to P
    ba58:	574f 5245 4f5f 4646 4d00 6961 206e 7453     OWER_OFF.Main St
    ba68:	7461 3a65 5220 4e55 494e 474e 4f5f 5f4e     ate: RUNNING_ON_
    ba78:	4142 5454 5245 5f59 5047 5f53 4e4f 2d20     BATTERY_GPS_ON -
    ba88:	203e 5453 5241 4954 474e 555f 0050 614d     > STARTING_UP.Ma
    ba98:	6e69 5320 6174 6574 203a 5552 4e4e 4e49     in State: RUNNIN
    baa8:	5f47 4e4f 425f 5441 4554 5952 475f 5350     G_ON_BATTERY_GPS
    bab8:	4f5f 204e 3e2d 5020 574f 5245 4f5f 4646     _ON -> POWER_OFF
    bac8:	5300 6174 7472 6e69 2067 4352 5420 6172     .Starting RC Tra
    bad8:	736e 6f70 646e 7265 7620 7265 202e 4300     nsponder ver. .C
    bae8:	6968 2070 6e75 7169 6575 7320 7265 6169     hip unique seria
    baf8:	206c 756e 626d 7265 7020 7261 2074 3a31     l number part 1:
    bb08:	4300 6968 2070 6e75 7169 6575 7320 7265     .Chip unique ser
    bb18:	6169 206c 756e 626d 7265 7020 7261 2074     ial number part 
    bb28:	3a32 4300 6968 2070 6e75 7169 6575 7320     2:.Chip unique s
    bb38:	7265 6169 206c 756e 626d 7265 7020 7261     erial number par
    bb48:	2074 3a33 4300 6968 2070 6e75 7169 6575     t 3:.Chip unique
    bb58:	7320 7265 6169 206c 756e 626d 7265 7020      serial number p
    bb68:	7261 2074 3a34 4300 6968 2070 6e75 7169     art 4:.Chip uniq
    bb78:	6575 7320 7265 6169 206c 756e 626d 7265     ue serial number
    bb88:	203a 0022 6843 7069 7520 696e 7571 2065     : ".Chip unique 
    bb98:	6573 6972 6c61 6e20 6d75 6562 2072 6e69     serial number in
    bba8:	4220 7361 3665 2034 6e65 6f63 6564 223a      Base64 encode:"
    bbb8:	0000 0000                                   ....

0000bbbc <_ZTV10RFProtocol>:
	...
    bbc4:	60a1 0000 60a1 0000 60a1 0000 654e 2077     .`...`...`..New 
    bbd4:	656d 7373 6761 2065 7369 2e2e 002e 554e     message is....NU
    bbe4:	4c4c 0021 534d 2047 0031 534d 2047 0032     LL!.MSG 1.MSG 2.
    bbf4:	534d 2047 0033 6e55 6e6b 776f 2f6e 754e     MSG 3.Unknown/Nu
    bc04:	6c6c 0021 7245 6f72 2172 2d20 5420 2078     ll!.Error! - Tx 
    bc14:	4946 4f46 4620 6c75 216c 4900 5152 6620     FIFO Full!.IRQ f
    bc24:	6f72 206d 6152 6964 006f 4652 5020 6f72     rom Radio.RF Pro
    bc34:	6f74 6f63 206c 7245 6f72 3a72 7420 4478     tocol Error: txD
    bc44:	6e6f 7c65 747c 5478 6d69 6f65 7475 7c7c     one||txTimeout||
    bc54:	7872 6954 656d 756f 2074 6e69 5220 5f58     rxTimeout in RX_
    bc64:	4449 454c 5320 6174 6574 2d20 4e20 7865     IDLE State - Nex
    bc74:	7374 6174 6574 7320 7465 7420 206f 5852     tstate set to RX
    bc84:	495f 4c44 0045 7245 6f72 2172 2d20 5420     _IDLE.Error! - T
    bc94:	2078 4946 4f46 4620 6c75 2c6c 5520 616e     x FIFO Full, Una
    bca4:	6c62 2065 6f74 7320 6e65 2064 6542 6361     ble to send Beac
    bcb4:	6e6f 6d20 7365 6173 6567 4900 2074 6177     on message.It wa
    bcc4:	2073 6461 6564 2064 6f74 7420 6568 6c20     s added to the l
    bcd4:	7369 2074 7461 003a                         ist at:.

0000bcdc <_ZTV9RFService>:
	...
    bce4:	4dfb 0000 50ad 0000 5325 0000               .M...P..%S..

0000bcf0 <_ZTV8Telegram>:
	...
    bcf8:	60a1 0000 0000 0000 0000 0000 4241 4443     .`..........ABCD
    bd08:	4645 4847 4a49 4c4b 4e4d 504f 5251 5453     EFGHIJKLMNOPQRST
    bd18:	5655 5857 5a59 6261 6463 6665 6867 6a69     UVWXYZabcdefghij
    bd28:	6c6b 6e6d 706f 7271 7473 7675 7877 7a79     klmnopqrstuvwxyz
    bd38:	3130 3332 3534 3736 3938 2f2b 6200 7361     0123456789+/.bas
    bd48:	6369 735f 7274 6e69 3a67 5f3a 5f4d 6f63     ic_string::_M_co
    bd58:	736e 7274 6375 2074 756e 6c6c 6e20 746f     nstruct null not
    bd68:	7620 6c61 6469 0000                          valid..

0000bd70 <_ZTV14Telegram_MSG_1>:
	...
    bd78:	56a3 0000 56a1 0000 56a5 0000               .V...V...V..

0000bd84 <_ZTV14Telegram_MSG_2>:
	...
    bd8c:	59d7 0000 59d5 0000 59d9 0000               .Y...Y...Y..

0000bd98 <_ZTV14Telegram_MSG_3>:
	...
    bda0:	5d0f 0000 5d0d 0000 5d11 0000 0a0d 0000     .]...]...]......

0000bdb0 <_ZTV4Uart>:
	...
    bdb8:	6889 0000 6201 0000 67c7 0000 6783 0000     .h...b...g...g..
    bdc8:	679d 0000 693d 0000 6551 0000 6541 0000     .g..=i..Qe..Ae..
    bdd8:	65e9 0000 656b 0000 653d 0000               .e..ke..=e..

0000bde4 <_ZTV7Serial_>:
	...
    bdec:	698d 0000 69b9 0000 6989 0000 69ad 0000     .i...i...i...i..
    bdfc:	69a1 0000 69f1 0000 69d5 0000               .i...i...i..

0000be08 <_ZTV26DoubleBufferedEPOutHandler>:
	...
    be10:	6e2f 0000 6d11 0000 6c6d 0000               /n...m..ml..

0000be1c <_ZL14STRING_PRODUCT>:
    be1c:	7241 7564 6e69 206f 4b4d 5a52 7265 006f     Arduino MKRZero.

0000be2c <_ZL15STRING_LANGUAGE>:
    be2c:	0304 0409                                   ....

0000be30 <_ZL19STRING_MANUFACTURER>:
    be30:	7241 7564 6e69 206f 4c4c 0043               Arduino LLC.

0000be3c <_ZL21USB_DeviceDescriptorB>:
    be3c:	0112 0200 02ef 4001 2341 804f 0100 0201     .......@A#O.....
    be4c:	0103 0000                                   ....

0000be50 <g_APinDescription>:
    be50:	0000 0000 0016 0000 0008 0000 001c 0000     ................
    be60:	00ff 0400 0400 0006 0000 0000 0017 0000     ................
    be70:	0008 0000 001c 0000 00ff 0401 0401 0007     ................
    be80:	0000 0000 000a 0000 0008 0000 001c 0000     ................
    be90:	0012 0100 0100 00ff 0000 0000 000b 0000     ................
    bea0:	0008 0000 001c 0000 0013 0101 0101 00ff     ................
    beb0:	0001 0000 000a 0000 0008 0000 001c 0000     ................
    bec0:	00ff 0500 0500 000a 0001 0000 000b 0000     ................
    bed0:	0008 0000 001c 0000 00ff 0501 0501 000b     ................
    bee0:	0000 0000 0014 0000 0008 0000 002c 0000     ............,...
    bef0:	00ff 0002 0002 0004 0000 0000 0015 0000     ................
    bf00:	0008 0000 002c 0000 00ff 0003 0003 0005     ....,...........
    bf10:	0000 0000 0010 0000 0002 0000 001c 0000     ................
    bf20:	00ff 0200 0200 0000 0000 0000 0011 0000     ................
    bf30:	0002 0000 0004 0000 00ff ffff ffff 0001     ................
    bf40:	0000 0000 0013 0000 0002 0000 001c 0000     ................
    bf50:	00ff 0301 0301 00ff 0000 0000 0008 0000     ................
    bf60:	0002 0000 0004 0000 0010 ffff ffff 0010     ................
    bf70:	0000 0000 0009 0000 0002 0000 0004 0000     ................
    bf80:	0011 ffff ffff 00ff 0001 0000 0017 0000     ................
    bf90:	0003 0000 0004 0000 00ff ffff ffff 00ff     ................
    bfa0:	0001 0000 0016 0000 0003 0000 0004 0000     ................
    bfb0:	00ff ffff ffff 00ff 0000 0000 0002 0000     ................
    bfc0:	0001 0000 0006 0000 0000 ffff ffff 00ff     ................
    bfd0:	0001 0000 0002 0000 0001 0000 0004 0000     ................
    bfe0:	000a ffff ffff 0002 0001 0000 0003 0000     ................
    bff0:	0001 0000 0004 0000 000b ffff ffff 0003     ................
    c000:	0000 0000 0004 0000 0001 0000 001c 0000     ................
    c010:	0004 0000 0000 00ff 0000 0000 0005 0000     ................
    c020:	0001 0000 001c 0000 0005 0001 0001 00ff     ................
    c030:	0000 0000 0006 0000 0001 0000 0004 0000     ................
    c040:	0006 ffff ffff 00ff 0000 0000 0007 0000     ................
    c050:	0001 0000 0004 0000 0007 ffff ffff 00ff     ................
    c060:	0000 0000 0018 0000 0006 0000 0000 0000     ................
    c070:	00ff ffff ffff 00ff 0000 0000 0019 0000     ................
    c080:	0006 0000 0000 0000 00ff ffff ffff 00ff     ................
    c090:	0000 0000 0012 0000 0008 0000 0004 0000     ................
    c0a0:	00ff ffff ffff 00ff 0000 0000 0003 0000     ................
    c0b0:	0008 0000 0004 0000 00ff ffff ffff 0003     ................
    c0c0:	0000 0000 000c 0000 0002 0000 0000 0000     ................
    c0d0:	00ff ffff ffff 00ff 0000 0000 000d 0000     ................
    c0e0:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    c0f0:	0000 0000 000e 0000 0008 0000 0000 0000     ................
    c100:	00ff ffff ffff 00ff 0000 0000 000f 0000     ................
    c110:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    c120:	0000 0000 001b 0000 0008 0000 0000 0000     ................
    c130:	00ff ffff ffff 000f 0000 0000 001c 0000     ................
    c140:	0008 0000 0000 0000 00ff ffff ffff 00ff     ................
    c150:	0001 0000 0008 0000 0008 0000 0000 0000     ................
    c160:	00ff ffff ffff 00ff 0001 0000 0009 0000     ................
    c170:	0001 0000 0018 0000 0003 0401 0401 0009     ................
	...
    c188:	0008 0000 0000 0000 00ff ffff ffff 00ff     ................
    c198:	0000 0000 0001 0000 0008 0000 0000 0000     ................
    c1a8:	00ff ffff ffff 00ff 6162 6973 5f63 7473     ........basic_st
    c1b8:	6972 676e 3a3a 4d5f 635f 6572 7461 0065     ring::_M_create.
    c1c8:	92a8 0000 9278 0000 928a 0000 91cc 0000     ....x...........
    c1d8:	928a 0000 926e 0000 928a 0000 91cc 0000     ....n...........
    c1e8:	9278 0000 9278 0000 926e 0000 91cc 0000     x...x...n.......
    c1f8:	91d4 0000 91d4 0000 91d4 0000 9290 0000     ................
    c208:	9278 0000 9278 0000 924c 0000 9330 0000     x...x...L...0...
    c218:	924c 0000 926e 0000 924c 0000 9330 0000     L...n...L...0...
    c228:	9278 0000 9278 0000 926e 0000 9330 0000     x...x...n...0...
    c238:	91d4 0000 91d4 0000 91d4 0000 933a 0000     ............:...
    c248:	9628 0000 9578 0000 9578 0000 9576 0000     (...x...x...v...
    c258:	961a 0000 961a 0000 9610 0000 9576 0000     ............v...
    c268:	961a 0000 9610 0000 961a 0000 9576 0000     ............v...
    c278:	9620 0000 9620 0000 9620 0000 96b0 0000      ... ... .......
    c288:	9dd8 0000 9dba 0000 9d74 0000 9c92 0000     ........t.......
    c298:	9d74 0000 9dac 0000 9d74 0000 9c92 0000     t.......t.......
    c2a8:	9dba 0000 9dba 0000 9dac 0000 9c92 0000     ................
    c2b8:	9c8a 0000 9c8a 0000 9c8a 0000 9ff0 0000     ................
    c2c8:	a638 0000 a4f8 0000 a4f8 0000 a4f4 0000     8...............
    c2d8:	a610 0000 a610 0000 a602 0000 a4f4 0000     ................
    c2e8:	a610 0000 a602 0000 a610 0000 a4f4 0000     ................
    c2f8:	a618 0000 a618 0000 a618 0000 a81c 0000     ................

0000c308 <__sf_fake_stderr>:
	...

0000c328 <__sf_fake_stdin>:
	...

0000c348 <__sf_fake_stdout>:
	...

0000c368 <__EH_FRAME_BEGIN__>:
    c368:	0000 0000                                   ....
